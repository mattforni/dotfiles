"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const extractors_1 = require("./extractors");
exports.ExportableRuleSet = [
    // module.exports =
    {
        condition: (node) => node.type === "ExpressionStatement" &&
            (node.expression.type === "AssignmentExpression" &&
                node.expression.operator === "=") &&
            (node.expression.left.type === "MemberExpression" &&
                node.expression.left.object &&
                node.expression.left.property) &&
            node.expression.left.object.name === "module" &&
            node.expression.left.property.name === "exports",
        extract: (node, nonExports) => extractors_1.extract(node.expression.right, nonExports),
        rules: {
            enablesExportExtension: false,
            isExportExtension: false,
            override: true
        }
    },
    // exports.* =
    {
        condition: (node) => node.type === "ExpressionStatement" &&
            (node.expression.type === "AssignmentExpression" &&
                node.expression.operator === "=") &&
            (node.expression.left.type === "MemberExpression" &&
                node.expression.left.object &&
                node.expression.left.property) &&
            node.expression.left.object.name === "exports" &&
            node.expression.left.property.type === "Identifier",
        extract: (node, nonExports) => extractors_1.extract(node.expression, nonExports),
        rules: {
            enablesExportExtension: false,
            isExportExtension: true,
            override: false
        }
    },
    // module.exports.* =
    {
        condition: (node) => node.type === "ExpressionStatement" &&
            (node.expression.type === "AssignmentExpression" &&
                node.expression.operator === "=") &&
            (node.expression.left.type === "MemberExpression" &&
                node.expression.left.object &&
                node.expression.left.property) &&
            node.expression.left.object.object.name === "module" &&
            node.expression.left.object.property.name === "exports",
        extract: (node, nonExports) => extractors_1.extract(node.expression, nonExports),
        rules: {
            enablesExportExtension: false,
            isExportExtension: false,
            override: false
        }
    },
    // exports = module.exports =
    {
        condition: (node) => node.type === "ExpressionStatement" &&
            (node.expression.type === "AssignmentExpression" &&
                node.expression.operator === "=") &&
            (node.expression.left.type === "Identifier" &&
                node.expression.left.name === "exports") &&
            (node.expression.right.type === "AssignmentExpression" &&
                node.expression.right.left.object.name === "module" &&
                node.expression.right.left.property.name === "exports"),
        extract: (node, nonExports) => extractors_1.extract(node.expression.right.right, nonExports),
        rules: {
            enablesExportExtension: true,
            isExportExtension: false,
            override: false
        }
    },
    // export type
    {
        condition: node => node.type === "ExportNamedDeclaration" &&
            node.specifiers.length === 0,
        extract: (node, nonExports) => extractors_1.extract(node.declaration, nonExports),
        rules: {
            enablesExportExtension: true,
            isExportExtension: true,
            override: false
        }
    },
    // export {}
    {
        condition: node => node.type === "ExportNamedDeclaration" &&
            node.specifiers.some(s => s.type === "ExportSpecifier"),
        extract: (node, nonExports) => extractors_1.extract(node, nonExports),
        rules: {
            enablesExportExtension: true,
            isExportExtension: true,
            override: false
        }
    },
    // export default
    {
        condition: node => node.type === "ExportDefaultDeclaration",
        extract: (node, nonExports) => extractors_1.extract(node, nonExports),
        rules: {
            enablesExportExtension: true,
            isExportExtension: true,
            override: false
        }
    }
];
