"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function extract(node, nonExports) {
    switch (node.type) {
        case "ObjectExpression":
            return extractObject(node);
        case "FunctionDeclaration":
            return [extractFunctionIdentifier(node)];
        case "ClassDeclaration":
            return [extractIdentifier(node)];
        case "MemberExpression":
        case "AssignmentExpression":
            return [extractProperty(node)];
        case "VariableDeclaration":
            return extractVariables(node.declarations);
        case "Identifier":
            return extractFromNonExports(node, nonExports);
        case "ExportNamedDeclaration":
            return extractSpecifiedExports(node, nonExports);
        case "ExportDefaultDeclaration":
            return [
                {
                    default: true,
                    name: "default"
                }
            ];
        default:
            return [{ name: "", default: false }];
    }
}
exports.extract = extract;
function extractObject(objectExpression) {
    return objectExpression.properties.map((prop) => ({
        default: false,
        name: prop.key.name
    }));
}
exports.extractObject = extractObject;
function extractProperty(assignmentExpression) {
    return {
        default: false,
        name: assignmentExpression.left.property.name
    };
}
exports.extractProperty = extractProperty;
function extractIdentifier(node) {
    return {
        default: false,
        name: node.id.name
    };
}
exports.extractIdentifier = extractIdentifier;
function extractFunctionIdentifier(node) {
    return {
        default: false,
        name: node.id.name
    };
}
exports.extractFunctionIdentifier = extractFunctionIdentifier;
function extractFromNonExports(identifier, statements) {
    let extractedExport = [{ name: "", default: false }];
    for (const statement of statements) {
        const actualExport = statement.declarations.find(d => d.id.name === identifier.name);
        if (actualExport) {
            const exportValue = actualExport.init;
            extractedExport =
                exportValue.type === "ObjectExpression"
                    ? extractObject(exportValue)
                    : [
                        {
                            default: false,
                            name: identifier.name
                        }
                    ];
            break;
        }
    }
    return extractedExport;
}
exports.extractFromNonExports = extractFromNonExports;
function extractVariables(declarations) {
    return declarations.map((d) => ({
        default: false,
        name: d.id.name
    }));
}
exports.extractVariables = extractVariables;
function extractSpecifiedExports(declaration, statements) {
    return declaration.specifiers.map(d => ({
        default: false,
        name: d.exported.name
    }));
}
exports.extractSpecifiedExports = extractSpecifiedExports;
