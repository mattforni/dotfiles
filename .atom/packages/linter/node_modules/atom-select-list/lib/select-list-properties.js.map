{"version":3,"file":"select-list-properties.js","sourceRoot":"","sources":["../src/select-list-properties.ts"],"names":[],"mappings":"","sourcesContent":["import { EtchElement } from './select-list-view' // TODO: etch types\n\nexport interface SelectListProperties {\n  /** an array containing the objects you want to show in the select list. */\n  items: Array<object | string>\n\n  /**\n   * a function that is called whenever an item needs to be displayed.\n   *\n   * `options: { selected: boolean, index: number, visible: boolean }`\n   *\n   * - `selected`: indicating whether item is selected or not.\n   * - `index`: item's index.\n   * - `visible`: indicating whether item is visible in viewport or not. Unless initiallyVisibleItemCount was given,\n        this value is always true.\n   */\n  elementForItem: (\n    item: object | string,\n    options: { selected: boolean; index: number; visible: boolean }\n  ) => EtchElement // TODO: HTMLElement\n\n  /** (Optional) the number of maximum items that are shown. */\n  maxResults?: number\n\n  /** (Optional) a function that allows to decide which items to show whenever the query changes.\n  By default, it uses fuzzaldrin to filter results. */\n  filter?: (items: Array<object | string>, query: string) => Array<object>\n\n  /** (Optional) when filter is not provided, this function will be called to retrieve a string property on each item,\n  and that will be used to filter them. */\n  filterKeyForItem?: (item: object | string) => string\n\n  /** (Optional) a function that allows to apply a transformation to the user query and whose return value\n  will be used to filter items. */\n  filterQuery?: (query: string) => string\n\n  /** (Optional) a string that will replace the contents of the query editor. */\n  query?: string\n\n  /** (Optional)  a boolean indicating whether the query text should be selected or not. */\n  selectQuery?: boolean\n\n  /** (Optional)  a function that allows to change the order in which items are shown. */\n  order?: (item1: object | string, item2: object | string) => number\n\n  /** (Optional) a string shown when the list is empty. */\n  emptyMessage?: string\n\n  /** (Optional) a string that needs to be set when you want to notify the user that an error occurred. */\n  errorMessage?: string\n\n  /** (Optional) a string that needs to be set when you want to provide some information to the user. */\n  infoMessage?: string\n\n  /** (Optional) a string that needs to be set when you are loading items in the background. */\n  loadingMessage?: string\n\n  /** (Optional) a string or number that needs to be set when the progress status changes\n  (e.g. a percentage showing how many items have been loaded so far). */\n  loadingBadge?: string | number\n\n  /** (Optional) an array of strings that will be added as class names to the items element. */\n  itemsClassList?: Array<string>\n\n  /** (Optional) the index of the item to initially select and automatically select after query changes; defaults to 0. */\n  initialSelectionIndex?: number\n\n  /** (Optional) a function that is called when the query changes. */\n  didChangeQuery?: (query: string) => void\n\n  /** (Optional) a function that is called when the selected item changes. */\n  didChangeSelection?: (item: object | string) => void\n\n  /** (Optional) a function that is called when the user clicks or presses Enter on an item. */\n  didConfirmSelection?: (item: object | string) => void\n\n  /** (Optional) a function that is called when the user presses Enter but the list is empty. */\n  didConfirmEmptySelection?: () => void\n\n  /** (Optional) a function that is called when the user presses Esc or the list loses focus. */\n  didCancelSelection?: () => void\n\n  /** (Optional) When this options was provided, SelectList observe visibility of items in viewport, visibility state is\n  passed as visible option to elementForItem. This is mainly used to skip heavy computation for invisible items. */\n  initiallyVisibleItemCount?: number\n\n  skipCommandsRegistration?: boolean\n}\n"]}