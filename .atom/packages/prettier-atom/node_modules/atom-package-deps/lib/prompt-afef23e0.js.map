{"version":3,"file":"prompt-afef23e0.js","sources":["../src/prompt.js"],"sourcesContent":["/* @flow */\n\nimport Path from 'path'\nimport fs from 'sb-fs'\nimport type { Dependency } from './types'\n\nlet shownStorageInfo = false\n\nexport async function promptUser(packageName: string, dependencies: Array<Dependency>): Promise<'Yes' | 'No' | 'Never'> {\n  const oldConfigPath = Path.join(atom.getConfigDirPath(), 'package-deps-state.json')\n  let ignoredPackages = atom.config.get('atom-package-deps.ignored') || []\n\n  if (await fs.exists(oldConfigPath)) {\n    const oldConfig = JSON.parse(await fs.readFile(oldConfigPath, 'utf8'))\n    atom.config.set('atom-package-deps.ignored', (ignoredPackages = oldConfig.ignored))\n    await fs.unlink(oldConfigPath)\n  }\n\n  if (ignoredPackages.includes(packageName)) {\n    return 'No'\n  }\n\n  if (atom.packages.isPackageDisabled('notifications')) {\n    console.warn(`Enable notifications to install dependencies for ${packageName}`)\n  }\n\n  return new Promise(function (resolve) {\n    const notification = atom.notifications.addInfo(`${packageName} needs to install dependencies`, {\n      dismissable: true,\n      icon: 'cloud-download',\n      detail: dependencies.map((e) => e.name).join(', '),\n      description: `Install dependenc${dependencies.length === 1 ? 'y' : 'ies'}?`,\n      buttons: [\n        {\n          text: 'Yes',\n          onDidClick: () => {\n            resolve('Yes')\n            notification.dismiss()\n          },\n        },\n        {\n          text: 'No Thanks',\n          onDidClick: () => {\n            resolve('No')\n            notification.dismiss()\n          },\n        },\n        {\n          text: 'Never',\n          onDidClick: () => {\n            // Reload, in case it may have changed:\n            ignoredPackages = atom.config.get('atom-package-deps.ignored') || []\n            ignoredPackages.push(packageName)\n            atom.config.set('atom-package-deps.ignored', ignoredPackages)\n\n            if (!shownStorageInfo) {\n              shownStorageInfo = true\n              atom.notifications.addInfo('How to reset package-deps memory', {\n                dismissable: true,\n                description:\n                  \"To modify the list of ignored files invoke 'Application: Open Your Config' and change the 'atom-package-deps' section\",\n              })\n            }\n            resolve('Never')\n            notification.dismiss()\n          },\n        },\n      ],\n    })\n    notification.onDidDismiss(() => resolve('No'))\n  })\n}\n"],"names":["shownStorageInfo","async","packageName","dependencies","oldConfigPath","Path","join","atom","getConfigDirPath","ignoredPackages","config","get","fs","exists","oldConfig","JSON","parse","readFile","set","ignored","unlink","includes","packages","isPackageDisabled","Promise","resolve","notification","notifications","addInfo","dismissable","icon","detail","map","e","name","description","length","buttons","text","onDidClick","dismiss","push","onDidDismiss"],"mappings":"6KAMA,IAAIA,GAAmB,qBAEhBC,eAA0BC,EAAqBC,SAC9CC,EAAgBC,EAAKC,KAAKC,KAAKC,mBAAoB,+BACrDC,EAAkBF,KAAKG,OAAOC,IAAI,8BAAgC,YAE5DC,KAAGC,OAAOT,GAAgB,OAC5BU,EAAYC,KAAKC,YAAYJ,KAAGK,SAASb,EAAe,SAC9DG,KAAKG,OAAOQ,IAAI,4BAA8BT,EAAkBK,EAAUK,eACpEP,KAAGQ,OAAOhB,UAGdK,EAAgBY,SAASnB,GACpB,MAGLK,KAAKe,SAASC,kBAAkB,iBAI7B,IAAIC,SAAQ,SAAUC,SACrBC,EAAenB,KAAKoB,cAAcC,QAAW1B,EAAF,iCAA+C,CAC9F2B,aAAa,EACbC,KAAM,iBACNC,OAAQ5B,EAAa6B,IAAKC,GAAMA,EAAEC,MAAM5B,KAAK,MAC7C6B,YAAc,oBAA2C,IAAxBhC,EAAaiC,OAAe,IAAM,SACnEC,QAAS,CACP,CACEC,KAAM,MACNC,WAAY,KACVd,EAAQ,OACRC,EAAac,YAGjB,CACEF,KAAM,YACNC,WAAY,KACVd,EAAQ,MACRC,EAAac,YAGjB,CACEF,KAAM,QACNC,WAAY,KAEV9B,EAAkBF,KAAKG,OAAOC,IAAI,8BAAgC,GAClEF,EAAgBgC,KAAKvC,GACrBK,KAAKG,OAAOQ,IAAI,4BAA6BT,GAExCT,IACHA,GAAmB,EACnBO,KAAKoB,cAAcC,QAAQ,mCAAoC,CAC7DC,aAAa,EACbM,YACE,2HAGNV,EAAQ,SACRC,EAAac,eAKrBd,EAAagB,aAAa,IAAMjB,EAAQ"}