/// <reference types="node" />
import * as vscode from 'vscode';
import * as util from 'util';
/**
 * A simple logger for VS Code extensions that can log to a VS Code output channel or a file
 */
export declare class Log {
    private readonly configSection;
    private readonly workspaceFolder;
    private readonly outputChannelName;
    private inspectOptions;
    private readonly includeLocation;
    private configChangeSubscription;
    private targets;
    private nextInspectOptions;
    /**
     * Create a simple logger for VS Code extensions that can log to a VS Code output channel or a file
     * @param configSection - the prefix for the configuration variables: logging to the output channel will be enabled if <configSection>.logpanel is set to true, logging to a file will be enabled if <configSection>.logfile is set to a filename
     * @param workspaceFolder - the WorkspaceFolder (optional)
     * @param outputChannelName - the name of the output channel
     * @param includeLocation - if true it will try to include the location info of the caller
     */
    constructor(configSection: string, workspaceFolder: vscode.WorkspaceFolder | undefined, outputChannelName: string, inspectOptions?: InspectOptions, includeLocation?: boolean);
    get enabled(): boolean;
    setDefaultInspectOptions(inspectOptions: InspectOptions): void;
    updateDefaultInspectOptions(inspectOptions: InspectOptions): void;
    setNextInspectOptions(inspectOptions: InspectOptions): void;
    updateNextInspectOptions(inspectOptions: InspectOptions): void;
    debug(...msg: any[]): void;
    info(...msg: any[]): void;
    warn(...msg: any[]): void;
    error(...msg: any[]): void;
    dispose(): void;
    private log;
    private getCallerLocation;
    private configure;
}
interface ILogTarget {
    write(msg: string): void;
    dispose(): void;
}
export declare class OutputChannelTarget implements ILogTarget {
    private outputChannel;
    constructor(name: string);
    write(msg: string): void;
    dispose(): void;
}
export declare class FileTarget implements ILogTarget {
    private readonly writeStream;
    constructor(filename: string);
    write(msg: string): void;
    dispose(): void;
}
export interface InspectOptions extends util.InspectOptions {
}
export {};
