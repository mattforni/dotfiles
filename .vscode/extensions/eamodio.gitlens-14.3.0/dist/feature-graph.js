exports.id=786,exports.ids=[786],exports.modules={1302:(e,t,i)=>{i.d(t,{GraphWebviewProvider:()=>GraphWebviewProvider});var s=i(9496),r=i(8388),o=i(7139),a=i(5255),n=i(8887),h=i(3401),p=i(6897),l=i(7445),d=i(8834),g=i(252),c=i(6713),m=i(5025),u=i(6592),f=i(5367),v=i(439),w=i(1719),y=i(5069),b=i(4321),C=i(3050),R=i(6503),D=i(3646),P=i(6934),W=i(635),S=i(9529),G=i(5148),_=i(2061),I=i(5432),F=i(4241),k=i(9796),M=i(3105),T=i(9967),O=i(7469),V=i(2509),B=i(9701),x=i(6922),H=i(5798),A=i(620),L=(e=>(e.Upstream="upstream",e.PullRequest="pullRequest",e))(L||{});const E=Object.values(L),j=new H.ke("graph/chooseRepository"),q=new H.ke("graph/dimMergeCommits"),N=new H.ke("graph/dblclick"),U=new H.ke("graph/rows/ensure"),$=new H.ke("graph/avatars/get"),z=new H.ke("graph/refs/metadata/get"),J=new H.ke("graph/rows/get"),Q=new H.ke("graph/search"),K=new H.ke("graph/search/openInView"),X=new H.ke("graph/columns/update"),Z=new H.ke("graph/refs/update/visibility"),Y=new H.ke("graph/fitlers/update/excludeType"),ee=new H.ke("graph/configuration/update"),te=new H.ke("graph/fitlers/update/includeOnlyRefs"),ie=new H.ke("graph/selection/update"),se=new H.jH("graph/didChange",!0),re=new H.jH("graph/configuration/didChange"),oe=new H.jH("graph/subscription/didChange"),ae=new H.jH("graph/avatars/didChange"),ne=new H.jH("graph/refs/didChangeMetadata"),he=new H.jH("graph/columns/didChange"),pe=new H.jH("graph/scrollMarkers/didChange"),le=new H.jH("graph/focus/didChange"),de=new H.jH("graph/window/focus/didChange"),ge=new H.jH("graph/refs/didChangeVisibility"),ce=new H.jH("graph/rows/didChange"),me=new H.jH("graph/rows/stats/didChange"),ue=new H.jH("graph/selection/didChange"),fe=new H.jH("graph/workingTree/didChange"),ve=new H.jH("graph/rows/didEnsure"),we=new H.jH("graph/didSearch"),ye=new H.jH("graph/didFetch");var be=Object.defineProperty,Ce=Object.getOwnPropertyDescriptor,Re=(e,t,i,s)=>{for(var r,o=s>1?void 0:s?Ce(t,i):t,a=e.length-1;a>=0;a--)(r=e[a])&&(o=(s?r(t,i,o):r(o))||o);return s&&o&&be(t,i,o),o};const De={ref:{width:130,isHidden:!1,order:0},graph:{width:150,mode:void 0,isHidden:!1,order:1},message:{width:300,isHidden:!1,order:2},author:{width:130,isHidden:!1,order:3},changes:{width:200,isHidden:!1,order:4},datetime:{width:130,isHidden:!1,order:5},sha:{width:130,isHidden:!1,order:6}},Pe={ref:{width:32,isHidden:!1},graph:{width:150,mode:"compact",isHidden:!1},author:{width:32,isHidden:!1,order:2},message:{width:500,isHidden:!1,order:3},changes:{width:200,isHidden:!1,order:4},datetime:{width:130,isHidden:!0,order:5},sha:{width:130,isHidden:!1,order:6}};class GraphWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._showDetailsView=G.D.get("graph.showDetailsView"),this._theme=s.window.activeColorTheme,this.ensureRepositorySubscriptions(),this.host.isView()&&(this.host.description="âœ¨"),this._disposable=s.Disposable.from(G.D.onDidChange(this.onConfigurationChanged,this),this.container.subscription.onDidChange(this.onSubscriptionChanged,this),this.container.git.onDidChangeRepositories((()=>{this.host.refresh(!0)})),s.window.onDidChangeActiveColorTheme(this.onThemeChanged,this),{dispose:()=>{null!=this._repositoryEventsDisposable&&(this._repositoryEventsDisposable.dispose(),this._repositoryEventsDisposable=void 0)}})}_repository;get repository(){return this._repository}set repository(e){this._repository!==e?(this._repository=e,this.resetRepositoryState(),this.ensureRepositorySubscriptions(!0),this.host.ready&&this.updateState()):this.ensureRepositorySubscriptions()}_selection;get activeSelection(){return this._selection?.[0]}_disposable;_etagSubscription;_etagRepository;_firstSelection=!0;_graph;_ipcNotificationMap=new Map([[he,this.notifyDidChangeColumns],[re,this.notifyDidChangeConfiguration],[se,this.notifyDidChangeState],[ge,this.notifyDidChangeRefsVisibility],[pe,this.notifyDidChangeScrollMarkers],[ue,this.notifyDidChangeSelection],[oe,this.notifyDidChangeSubscription],[fe,this.notifyDidChangeWorkingTree],[de,this.notifyDidChangeWindowFocus],[ye,this.notifyDidFetch]]);_refsMetadata;_search;_searchCancellation;_selectedId;_selectedRows;_showDetailsView;_theme;_repositoryEventsDisposable;_lastFetchedDisposable;isWindowFocused=!0;dispose(){this._disposable.dispose()}async onShowing(e,t,...i){this._firstSelection=!0;const[s]=i;if((0,D.uC)(s))this.repository=s;else if(null!=(r=s)&&"object"==typeof r&&"ref"in r&&(0,b.Yn)(r.ref)){this.repository=this.container.git.getRepository(s.ref.repoPath);let e=s.ref.ref;if((0,b.D3)(e)||(e=await this.container.git.resolveReference(s.ref.repoPath,e,void 0,{force:!0})),this.setSelectedRows(e),null!=this._graph){if(this._graph?.ids.has(e))return this.notifyDidChangeSelection(),!0;this.onGetMoreRows({id:e},!0)}}else if((0,A.W)(s)&&null!=s.state.selectedRepository&&(this.repository=this.container.git.getRepository(s.state.selectedRepository)),null==this.repository&&this.container.git.repositoryCount>1){const[t]=(0,o.P)(a.Gh.ShowGraph,void 0,...i),s=Array.isArray(t)?t[0]:t;"scm"===s.type&&null!=s.scm.rootUri?this.repository=this.container.git.getRepository(s.scm.rootUri):"viewItem"===s.type&&s.node instanceof x.vb&&(this.repository=s.node.repo),null!=this.repository&&!e&&this.host.ready&&this.updateState()}var r;return!0}onRefresh(e){e&&this.resetRepositoryState()}includeBootstrap(){return this.getState(!0)}registerCommands(){return[(0,S.xR)(`${this.host.id}.refresh`,(()=>this.host.refresh(!0))),...this.host.isView()?[(0,S.xR)(`${this.host.id}.openInTab`,(()=>{(0,S.P0)(a.Gh.ShowGraphPage,this.repository)}))]:[],this.host.registerWebviewCommand("gitlens.graph.push",this.push),this.host.registerWebviewCommand("gitlens.graph.pull",this.pull),this.host.registerWebviewCommand("gitlens.graph.fetch",this.fetch),this.host.registerWebviewCommand("gitlens.graph.publishBranch",this.publishBranch),this.host.registerWebviewCommand("gitlens.graph.switchToAnotherBranch",this.switchToAnother),this.host.registerWebviewCommand("gitlens.graph.createBranch",this.createBranch),this.host.registerWebviewCommand("gitlens.graph.deleteBranch",this.deleteBranch),this.host.registerWebviewCommand("gitlens.graph.copyRemoteBranchUrl",(e=>this.openBranchOnRemote(e,!0))),this.host.registerWebviewCommand("gitlens.graph.openBranchOnRemote",this.openBranchOnRemote),this.host.registerWebviewCommand("gitlens.graph.mergeBranchInto",this.mergeBranchInto),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoBranch",this.rebase),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoUpstream",this.rebaseToRemote),this.host.registerWebviewCommand("gitlens.graph.renameBranch",this.renameBranch),this.host.registerWebviewCommand("gitlens.graph.switchToBranch",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.hideLocalBranch",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.hideRemoteBranch",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.hideRemote",(e=>this.hideRef(e,{remote:!0}))),this.host.registerWebviewCommand("gitlens.graph.hideRefGroup",(e=>this.hideRef(e,{group:!0}))),this.host.registerWebviewCommand("gitlens.graph.hideTag",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.cherryPick",this.cherryPick),this.host.registerWebviewCommand("gitlens.graph.copyRemoteCommitUrl",(e=>this.openCommitOnRemote(e,!0))),this.host.registerWebviewCommand("gitlens.graph.showInDetailsView",this.openInDetailsView),this.host.registerWebviewCommand("gitlens.graph.openCommitOnRemote",this.openCommitOnRemote),this.host.registerWebviewCommand("gitlens.graph.openSCM",this.openSCM),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoCommit",this.rebase),this.host.registerWebviewCommand("gitlens.graph.resetCommit",this.resetCommit),this.host.registerWebviewCommand("gitlens.graph.resetToCommit",this.resetToCommit),this.host.registerWebviewCommand("gitlens.graph.resetToTip",this.resetToTip),this.host.registerWebviewCommand("gitlens.graph.revert",this.revertCommit),this.host.registerWebviewCommand("gitlens.graph.switchToCommit",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.undoCommit",this.undoCommit),this.host.registerWebviewCommand("gitlens.graph.saveStash",this.saveStash),this.host.registerWebviewCommand("gitlens.graph.applyStash",this.applyStash),this.host.registerWebviewCommand("gitlens.graph.stash.delete",this.deleteStash),this.host.registerWebviewCommand("gitlens.graph.stash.rename",this.renameStash),this.host.registerWebviewCommand("gitlens.graph.createTag",this.createTag),this.host.registerWebviewCommand("gitlens.graph.deleteTag",this.deleteTag),this.host.registerWebviewCommand("gitlens.graph.switchToTag",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.createWorktree",this.createWorktree),this.host.registerWebviewCommand("gitlens.graph.createPullRequest",this.createPullRequest),this.host.registerWebviewCommand("gitlens.graph.openPullRequestOnRemote",this.openPullRequestOnRemote),this.host.registerWebviewCommand("gitlens.graph.compareWithUpstream",this.compareWithUpstream),this.host.registerWebviewCommand("gitlens.graph.compareWithHead",this.compareHeadWith),this.host.registerWebviewCommand("gitlens.graph.compareWithWorking",this.compareWorkingWith),this.host.registerWebviewCommand("gitlens.graph.compareAncestryWithWorking",this.compareAncestryWithWorking),this.host.registerWebviewCommand("gitlens.graph.copy",this.copy),this.host.registerWebviewCommand("gitlens.graph.copyMessage",this.copyMessage),this.host.registerWebviewCommand("gitlens.graph.copySha",this.copySha),this.host.registerWebviewCommand("gitlens.graph.addAuthor",this.addAuthor),this.host.registerWebviewCommand("gitlens.graph.columnAuthorOn",(()=>this.toggleColumn("author",!0))),this.host.registerWebviewCommand("gitlens.graph.columnAuthorOff",(()=>this.toggleColumn("author",!1))),this.host.registerWebviewCommand("gitlens.graph.columnDateTimeOn",(()=>this.toggleColumn("datetime",!0))),this.host.registerWebviewCommand("gitlens.graph.columnDateTimeOff",(()=>this.toggleColumn("datetime",!1))),this.host.registerWebviewCommand("gitlens.graph.columnShaOn",(()=>this.toggleColumn("sha",!0))),this.host.registerWebviewCommand("gitlens.graph.columnShaOff",(()=>this.toggleColumn("sha",!1))),this.host.registerWebviewCommand("gitlens.graph.columnChangesOn",(()=>this.toggleColumn("changes",!0))),this.host.registerWebviewCommand("gitlens.graph.columnChangesOff",(()=>this.toggleColumn("changes",!1))),this.host.registerWebviewCommand("gitlens.graph.columnGraphOn",(()=>this.toggleColumn("graph",!0))),this.host.registerWebviewCommand("gitlens.graph.columnGraphOff",(()=>this.toggleColumn("graph",!1))),this.host.registerWebviewCommand("gitlens.graph.columnMessageOn",(()=>this.toggleColumn("message",!0))),this.host.registerWebviewCommand("gitlens.graph.columnMessageOff",(()=>this.toggleColumn("message",!1))),this.host.registerWebviewCommand("gitlens.graph.columnRefOn",(()=>this.toggleColumn("ref",!0))),this.host.registerWebviewCommand("gitlens.graph.columnRefOff",(()=>this.toggleColumn("ref",!1))),this.host.registerWebviewCommand("gitlens.graph.columnGraphCompact",(()=>this.setColumnMode("graph","compact"))),this.host.registerWebviewCommand("gitlens.graph.columnGraphDefault",(()=>this.setColumnMode("graph",void 0))),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerLocalBranchOn",(()=>this.toggleScrollMarker("localBranches",!0))),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerLocalBranchOff",(()=>this.toggleScrollMarker("localBranches",!1))),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerRemoteBranchOn",(()=>this.toggleScrollMarker("remoteBranches",!0))),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerRemoteBranchOff",(()=>this.toggleScrollMarker("remoteBranches",!1))),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerStashOn",(()=>this.toggleScrollMarker("stashes",!0))),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerStashOff",(()=>this.toggleScrollMarker("stashes",!1))),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerTagOn",(()=>this.toggleScrollMarker("tags",!0))),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerTagOff",(()=>this.toggleScrollMarker("tags",!1))),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToBranch",this.copyDeepLinkToBranch),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToCommit",this.copyDeepLinkToCommit),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToRepo",this.copyDeepLinkToRepo),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToTag",this.copyDeepLinkToTag),this.host.registerWebviewCommand("gitlens.graph.openChangedFiles",this.openFiles),this.host.registerWebviewCommand("gitlens.graph.openOnlyChangedFiles",this.openOnlyChangedFiles),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffs",this.openAllChanges),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsWithWorking",this.openAllChangesWithWorking),this.host.registerWebviewCommand("gitlens.graph.openChangedFileRevisions",this.openRevisions),this.host.registerWebviewCommand("gitlens.graph.resetColumnsDefault",(()=>this.updateColumns(De))),this.host.registerWebviewCommand("gitlens.graph.resetColumnsCompact",(()=>this.updateColumns(Pe)))]}onWindowFocusChanged(e){this.isWindowFocused=e,this.notifyDidChangeWindowFocus()}onFocusChanged(e){this.notifyDidChangeFocus(e),e&&null!=this.activeSelection&&this.container.commitDetailsView.visible?this.showActiveSelectionDetails():this._showActiveSelectionDetailsDebounced?.cancel()}onVisibilityChanged(e){if(e||this._showActiveSelectionDetailsDebounced?.cancel(),e&&(null!=this.repository&&this.repository.etag!==this._etagRepository||this.container.subscription.etag!==this._etagSubscription))this.updateState(!0);else if(e){this.host.ready&&this.host.sendPendingIpcNotifications();const{activeSelection:e}=this;if(null==e)return;this.showActiveSelectionDetails()}}onMessageReceived(e){switch(e.method){case j.method:(0,H.mq)(j,e,(()=>this.onChooseRepository()));break;case q.method:(0,H.mq)(q,e,(e=>this.dimMergeCommits(e)));break;case N.method:(0,H.mq)(N,e,(e=>this.onDoubleClick(e)));break;case U.method:(0,H.mq)(U,e,(t=>this.onEnsureRow(t,e.completionId)));break;case $.method:(0,H.mq)($,e,(e=>this.onGetMissingAvatars(e)));break;case z.method:(0,H.mq)(z,e,(e=>this.onGetMissingRefMetadata(e)));break;case J.method:(0,H.mq)(J,e,(e=>this.onGetMoreRows(e)));break;case Q.method:(0,H.mq)(Q,e,(t=>this.onSearch(t,e.completionId)));break;case K.method:(0,H.mq)(K,e,(e=>this.onSearchOpenInView(e)));break;case X.method:(0,H.mq)(X,e,(e=>this.onColumnsChanged(e)));break;case ee.method:(0,H.mq)(ee,e,(e=>this.updateGraphConfig(e)));break;case Z.method:(0,H.mq)(Z,e,(e=>this.onRefsVisibilityChanged(e)));break;case ie.method:(0,H.mq)(ie,e,this.onSelectionChanged.bind(this));break;case Y.method:(0,H.mq)(Y,e,(e=>this.updateExcludedType(this._graph,e)));break;case te.method:(0,H.mq)(te,e,(e=>this.updateIncludeOnlyRefs(this._graph,e.refs)))}}updateGraphConfig(e){const t=this.getComponentConfig();let i;for(i in e.changes)if(t[i]!==e.changes[i])switch(i){case"minimap":G.D.updateEffective("graph.minimap.enabled",e.changes[i]);break;case"minimapDataType":G.D.updateEffective("graph.minimap.dataType",e.changes[i]);break;case"minimapMarkerTypes":{const t=[],s=e.changes[i]??[];for(const e of s)switch(e){case"localBranches":case"remoteBranches":case"stashes":case"tags":t.push(e)}G.D.updateEffective("graph.minimap.additionalTypes",t);break}}}_showActiveSelectionDetailsDebounced=void 0;showActiveSelectionDetails(){null==this._showActiveSelectionDetailsDebounced&&(this._showActiveSelectionDetailsDebounced=(0,k.Ds)(this.showActiveSelectionDetailsCore.bind(this),250)),this._showActiveSelectionDetailsDebounced()}showActiveSelectionDetailsCore(){const{activeSelection:e}=this;null!=e&&this.container.events.fire("commit:selected",{commit:e,interaction:"passive",preserveFocus:!0,preserveVisibility:!1===this._showDetailsView},{source:this.host.id})}onConfigurationChanged(e){G.D.changed(e,"graph.showDetailsView")&&(this._showDetailsView=G.D.get("graph.showDetailsView")),G.D.changed(e,"graph.commitOrdering")?this.updateState():(G.D.changed(e,"defaultDateFormat")||G.D.changed(e,"defaultDateStyle")||G.D.changed(e,"advanced.abbreviatedShaLength")||G.D.changed(e,"graph.avatars")||G.D.changed(e,"graph.dateFormat")||G.D.changed(e,"graph.dateStyle")||G.D.changed(e,"graph.dimMergeCommits")||G.D.changed(e,"graph.highlightRowsOnRefHover")||G.D.changed(e,"graph.scrollRowPadding")||G.D.changed(e,"graph.scrollMarkers.enabled")||G.D.changed(e,"graph.scrollMarkers.additionalTypes")||G.D.changed(e,"graph.showGhostRefsOnRowHover")||G.D.changed(e,"graph.pullRequests.enabled")||G.D.changed(e,"graph.showRemoteNames")||G.D.changed(e,"graph.showUpstreamStatus")||G.D.changed(e,"graph.minimap.enabled")||G.D.changed(e,"graph.minimap.dataType")||G.D.changed(e,"graph.minimap.additionalTypes"))&&(this.notifyDidChangeConfiguration(),(G.D.changed(e,"graph.minimap.enabled")||G.D.changed(e,"graph.minimap.dataType"))&&G.D.get("graph.minimap.enabled")&&"lines"===G.D.get("graph.minimap.dataType")&&!this._graph?.includes?.stats&&this.updateState())}onRepositoryChanged(e){e.changed(D.I6.Config,D.I6.Head,D.I6.Heads,D.I6.Remotes,D.I6.Stash,D.I6.Status,D.I6.Tags,D.I6.Unknown,D.du.Any)?(e.changed(D.I6.Head,D.du.Any)&&this.setSelectedRows(void 0),this.updateState(!e.changed(D.I6.Unknown,D.du.Exclusive))):this._etagRepository=e.repository.etag}onRepositoryFileSystemChanged(e){e.repository?.path===this.repository?.path&&this.notifyDidChangeWorkingTree()}onSubscriptionChanged(e){e.etag!==this._etagSubscription&&(this._etagSubscription=e.etag,this.notifyDidChangeSubscription())}onThemeChanged(e){null!=this._theme&&((0,V.$o)(e)&&(0,V.$o)(this._theme)||(0,V.GC)(e)&&(0,V.GC)(this._theme))||(this._theme=e,this.updateState())}dimMergeCommits(e){G.D.updateEffective("graph.dimMergeCommits",e.dim)}onColumnsChanged(e){this.updateColumns(e.config)}onRefsVisibilityChanged(e){this.updateExcludedRefs(this._graph,e.refs,e.visible)}onDoubleClick(e){if("ref"===e.type&&e.ref.context){let t=this.getGraphItemContext(e.ref.context);if(_e(t)){if(null!=e.metadata){if(t=this.getGraphItemContext(e.metadata.data.context),"upstream"===e.metadata.type&&Ge(t,"upstreamStatus")){const{ahead:e,behind:i,ref:s}=t.webviewItemValue;if(i>0)return void d.X4(s.repoPath,s);if(e>0)return void d.VF(s.repoPath,!1,s)}else if("pullRequest"===e.metadata.type&&Ge(t,"pullrequest"))return void this.openPullRequestOnRemote(t);return}const{ref:i}=t.webviewItemValue;return"head"===e.ref.refType&&e.ref.isCurrentHead?d.gu(i.repoPath):d.gu(i.repoPath,i,!!G.D.isUnset("gitCommands.skipConfirmations")||void 0)}}else if("row"===e.type&&e.row){const t=this.getRevisionReference(this.repository?.path,e.row.id,e.row.type);if(null!=t){this.container.events.fire("commit:selected",{commit:t,interaction:"active",preserveFocus:e.preserveFocus,preserveVisibility:!1},{source:this.host.id});const i=this.host.isView()?this.container.graphDetailsView:this.container.commitDetailsView;i.ready||i.show({preserveFocus:e.preserveFocus},{commit:t,interaction:"active",preserveVisibility:!1})}}return Promise.resolve()}async onEnsureRow(e,t){if(null==this._graph)return;const i=this._graph.remappedIds?.get(e.id)??e.id;let s,r;this._graph.ids.has(i)?(s=e.id,r=e.id!==i?i:void 0):(await this.updateGraphWithMoreRows(this._graph,i,this._search),this.notifyDidChangeRows(),this._graph.ids.has(i)&&(s=e.id,r=e.id!==i?i:void 0)),this.host.notify(ve,{id:s,remapped:r},t)}async onGetMissingAvatars(e){if(null==this._graph)return;const t=this._graph.repoPath;async function i(e,i){const s=await(0,r.oP)(e,{ref:i,repoPath:t});this._graph.avatars.set(e,s.toString(!0))}const s=[];for(const[t,r]of Object.entries(e.emails))this._graph.avatars.has(t)||s.push(i.call(this,t,r));s.length&&(await Promise.allSettled(s),this.updateAvatars())}async onGetMissingRefMetadata(e){if(null==this._graph||null===this._refsMetadata||!(0,_.fw)("gitlens:hasConnectedRemotes"))return;const t=this._graph.repoPath;async function i(e,i){null==this._refsMetadata&&(this._refsMetadata=new Map);const s=(await this.container.git.getBranches(t,{filter:t=>t.id===e}))?.values?.[0],r={...this._refsMetadata.get(e)};if(null!=s)for(const t of i)if(E.includes(t))if(t!==L.PullRequest){if(t===L.Upstream){const t=s?.upstream;if(null==t||null==t||t.missing){r.upstream=null,this._refsMetadata.set(e,r);continue}const i={name:(0,f.S3)(t.name),owner:(0,f.Lo)(t.name),ahead:s.state.ahead,behind:s.state.behind,context:(0,B.BH)({webviewItem:"gitlens:upstreamStatus",webviewItemValue:{type:"upstreamStatus",ref:(0,b.LB)(s),ahead:s.state.ahead,behind:s.state.behind}})};r.upstream=i,this._refsMetadata.set(e,r)}}else{const t=await(s?.getAssociatedPullRequest());if(null==t){void 0!==r.pullRequest&&0!==r.pullRequest?.length||(r.pullRequest=null),this._refsMetadata.set(e,r);continue}const i={hostingServiceType:t.provider.id,id:Number.parseInt(t.id)||0,title:t.title,author:t.author.name,date:(t.mergedDate??t.closedDate??t.date)?.getTime(),state:t.state,url:t.url,context:(0,B.BH)({webviewItem:"gitlens:pullrequest",webviewItemValue:{type:"pullrequest",id:t.id,url:t.url}})};r.pullRequest=[i],this._refsMetadata.set(e,r)}else r[t]=null,this._refsMetadata.set(e,r);else for(const t of i)r[t]=null,this._refsMetadata.set(e,r)}const s=[];for(const t of Object.keys(e.metadata))s.push(i.call(this,t,e.metadata[t]));s.length&&await Promise.allSettled(s),this.updateRefsMetadata()}async onGetMoreRows(e,t=!1){null!=this._graph?.paging&&(null!=this._graph?.more&&this.repository?.etag===this._etagRepository?(await this.updateGraphWithMoreRows(this._graph,e.id,this._search),this.notifyDidChangeRows(t)):this.updateState(!0))}async onSearch(e,t){if(null==e.search)return void this.resetSearchState();let i=this._search;if(e.more&&null!=i?.more&&i.comparisonKey===(0,P.FL)(e.search))return i=await i.more(e.limit??G.D.get("graph.searchItemLimit")??100),void(null!=i&&(this._search=i,await this.ensureSearchStartsInRange(this._graph,i),this.host.notify(we,{results:i.results.size>0?{ids:Object.fromEntries((0,M.UI)(i.results,(([e,t])=>[this._graph?.remappedIds?.get(e)??e,t]))),count:i.results.size,paging:{hasMore:i.paging?.hasMore??!1}}:void 0},t)));if(null==i||i.comparisonKey!==(0,P.FL)(e.search)){if(null==this.repository)return;this.repository.etag!==this._etagRepository&&this.updateState(!0),null!=this._searchCancellation&&(this._searchCancellation.cancel(),this._searchCancellation.dispose());const r=new s.CancellationTokenSource;this._searchCancellation=r;try{i=await this.repository.searchCommits(e.search,{limit:G.D.get("graph.searchItemLimit")??100,ordering:G.D.get("graph.commitOrdering"),cancellation:r.token})}catch(e){return this._search=void 0,void this.host.notify(we,{results:{error:e instanceof u.l0?"Invalid search pattern":"Unexpected error"}},t)}if(r.token.isCancellationRequested)return void(null!=t&&this.host.notify(we,{results:void 0},t));this._search=i}else i=this._search;const r=await this.ensureSearchStartsInRange(this._graph,i);let o=!1;null!=r&&(o=!0,this.setSelectedRows(r)),this.host.notify(we,{results:0===i.results.size?{count:0}:{ids:Object.fromEntries((0,M.UI)(i.results,(([e,t])=>[this._graph?.remappedIds?.get(e)??e,t]))),count:i.results.size,paging:{hasMore:i.paging?.hasMore??!1}},selectedRows:o?this._selectedRows:void 0},t)}onSearchOpenInView(e){null!=this.repository&&this.container.searchAndCompareView.search(this.repository.path,e.search,{label:{label:`for ${e.search.query}`},reveal:{select:!0,focus:!1,expand:!0}})}async onChooseRepository(){const e=this.container.git.openRepositories.sort(((e,t)=>(e===this.repository?1:-1)-(t===this.repository?1:-1)||(e.starred?-1:1)-(t.starred?-1:1)||e.index-t.index)),t=await(0,W.E2)(`Switch Repository ${a.NE.Dot} ${this.repository?.name}`,"Choose a repository to switch to",e);null!=t&&(this.repository=t.item)}_fireSelectionChangedDebounced=void 0;onSelectionChanged(e){const t=e.selection[0];this.setSelectedRows(t?.id),null==this._fireSelectionChangedDebounced&&(this._fireSelectionChangedDebounced=(0,k.Ds)(this.fireSelectionChanged.bind(this),250)),this._fireSelectionChangedDebounced(t?.id,t?.type)}fireSelectionChanged(e,t){if(null==this.repository)return;const i=this.getRevisionReference(this.repository.path,e,t),s=null!=i?[i]:void 0;this._selection=s,null!=s&&(this.container.events.fire("commit:selected",{commit:s[0],interaction:"passive",preserveFocus:!0,preserveVisibility:this._firstSelection?!1===this._showDetailsView:"selection"!==this._showDetailsView},{source:this.host.id}),this._firstSelection=!1)}_notifyDidChangeStateDebounced=void 0;getRevisionReference(e,t,i){if(null!=e&&null!=t)switch(i){case y.e.Stash:return(0,b.xB)(t,e,{refType:"stash",name:t,number:void 0});case y.e.Working:return(0,b.xB)(v.CL,e,{refType:"revision"});default:return(0,b.xB)(t,e,{refType:"revision"})}}updateState(e=!1){this.host.clearPendingIpcNotifications(),e?this.notifyDidChangeState():(null==this._notifyDidChangeStateDebounced&&(this._notifyDidChangeStateDebounced=(0,k.Ds)(this.notifyDidChangeState.bind(this),250)),this._notifyDidChangeStateDebounced())}async notifyDidChangeFocus(e){return!(!this.host.ready||!this.host.visible)&&this.host.notify(le,{focused:e})}async notifyDidChangeWindowFocus(){return this.host.ready&&this.host.visible?this.host.notify(de,{focused:this.isWindowFocused}):(this.host.addPendingIpcNotification(de,this._ipcNotificationMap,this),!1)}_notifyDidChangeAvatarsDebounced=void 0;updateAvatars(e=!1){e?this.notifyDidChangeAvatars():(null==this._notifyDidChangeAvatarsDebounced&&(this._notifyDidChangeAvatarsDebounced=(0,k.Ds)(this.notifyDidChangeAvatars.bind(this),100)),this._notifyDidChangeAvatarsDebounced())}async notifyDidChangeAvatars(){if(null==this._graph)return;const e=this._graph;return this.host.notify(ae,{avatars:Object.fromEntries(e.avatars)})}_notifyDidChangeRefsMetadataDebounced=void 0;updateRefsMetadata(e=!1){e?this.notifyDidChangeRefsMetadata():(null==this._notifyDidChangeRefsMetadataDebounced&&(this._notifyDidChangeRefsMetadataDebounced=(0,k.Ds)(this.notifyDidChangeRefsMetadata.bind(this),100)),this._notifyDidChangeRefsMetadataDebounced())}async notifyDidChangeRefsMetadata(){return this.host.notify(ne,{metadata:null!=this._refsMetadata?Object.fromEntries(this._refsMetadata):this._refsMetadata})}async notifyDidChangeColumns(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(he,this._ipcNotificationMap,this),!1;const e=this.getColumns(),t=this.getColumnSettings(e);return this.host.notify(he,{columns:t,context:this.getColumnHeaderContext(t),settingsContext:this.getGraphSettingsIconContext(t)})}async notifyDidChangeScrollMarkers(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(pe,this._ipcNotificationMap,this),!1;const e=this.getColumns(),t=this.getColumnSettings(e);return this.host.notify(pe,{context:this.getGraphSettingsIconContext(t)})}async notifyDidChangeRefsVisibility(){return this.host.ready&&this.host.visible?this.host.notify(ge,{excludeRefs:this.getExcludedRefs(this._graph),excludeTypes:this.getExcludedTypes(this._graph),includeOnlyRefs:this.getIncludeOnlyRefs(this._graph)}):(this.host.addPendingIpcNotification(ge,this._ipcNotificationMap,this),!1)}async notifyDidChangeConfiguration(){return this.host.ready&&this.host.visible?this.host.notify(re,{config:this.getComponentConfig()}):(this.host.addPendingIpcNotification(re,this._ipcNotificationMap,this),!1)}async notifyDidFetch(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(ye,this._ipcNotificationMap,this),!1;const e=await this.repository.getLastFetched();return this.host.notify(ye,{lastFetched:new Date(e)})}async notifyDidChangeRows(e=!1,t){if(null==this._graph)return;const i=this._graph;return this.host.notify(ce,{rows:i.rows,avatars:Object.fromEntries(i.avatars),downstreams:Object.fromEntries(i.downstreams),refsMetadata:null!=this._refsMetadata?Object.fromEntries(this._refsMetadata):this._refsMetadata,rowsStats:i.rowsStats?.size?Object.fromEntries(i.rowsStats):void 0,rowsStatsLoading:null!=i.rowsStatsDeferred?.isLoaded&&!i.rowsStatsDeferred.isLoaded(),selectedRows:e?this._selectedRows:void 0,paging:{startingCursor:i.paging?.startingCursor,hasMore:i.paging?.hasMore??!1}},t)}async notifyDidChangeRowsStats(e){if(null!=e.rowsStats)return this.host.notify(me,{rowsStats:Object.fromEntries(e.rowsStats),rowsStatsLoading:null!=e.rowsStatsDeferred?.isLoaded&&!e.rowsStatsDeferred.isLoaded()})}async notifyDidChangeWorkingTree(){return this.host.ready&&this.host.visible?this.host.notify(fe,{stats:await this.getWorkingTreeStats()??{added:0,deleted:0,modified:0}}):(this.host.addPendingIpcNotification(fe,this._ipcNotificationMap,this),!1)}async notifyDidChangeSelection(){return this.host.ready&&this.host.visible?this.host.notify(ue,{selection:this._selectedRows??{}}):(this.host.addPendingIpcNotification(ue,this._ipcNotificationMap,this),!1)}async notifyDidChangeSubscription(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(oe,this._ipcNotificationMap,this),!1;const[e]=await this.getGraphAccess();return this.host.notify(oe,{subscription:e.subscription.current,allowed:!1!==e.allowed})}async notifyDidChangeState(){return this.host.ready&&this.host.visible?this.host.notify(se,{state:await this.getState()}):(this.host.addPendingIpcNotification(se,this._ipcNotificationMap,this),!1)}ensureRepositorySubscriptions(e){if(this.ensureLastFetchedSubscription(e),!e&&null!=this._repositoryEventsDisposable)return;null!=this._repositoryEventsDisposable&&(this._repositoryEventsDisposable.dispose(),this._repositoryEventsDisposable=void 0);const t=this.repository;null!=t&&(this._repositoryEventsDisposable=s.Disposable.from(t.onDidChange(this.onRepositoryChanged,this),t.startWatchingFileSystem(),t.onDidChangeFileSystem(this.onRepositoryFileSystemChanged,this),(0,_.ve)((e=>{"gitlens:hasConnectedRemotes"===e&&(this.resetRefsMetadata(),this.updateRefsMetadata())}))))}async ensureLastFetchedSubscription(e){if(!e&&null!=this._lastFetchedDisposable)return;null!=this._lastFetchedDisposable&&(this._lastFetchedDisposable.dispose(),this._lastFetchedDisposable=void 0);const t=this.repository;if(null==t)return;const i=await t.getLastFetched()??0;let s=D._j.getLastFetchedUpdateInterval(i);0!==i&&s>0&&(this._lastFetchedDisposable=(0,k.DH)((()=>{const e=D._j.getLastFetchedUpdateInterval(i);s!==D._j.getLastFetchedUpdateInterval(i)&&(s=e),this.notifyDidFetch()}),s))}async ensureSearchStartsInRange(e,t){if(0===t.results.size)return;let i;for(const s of t.results.keys()){const t=e.remappedIds?.get(s)??s;if(e.ids.has(t))return t;i=t;break}return null!=i?(await this.updateGraphWithMoreRows(e,i),this.notifyDidChangeRows(),e.ids.has(i)?i:void 0):void 0}getColumns(){return this.container.storage.getWorkspace("graph:columns")}getExcludedTypes(e){if(null!=e)return this.getFiltersByRepo(e)?.excludeTypes}getExcludedRefs(e){if(null==e)return;let t;const i=this.container.storage.getWorkspace("graph:hiddenRefs");if(null!=i&&0!==Object.keys(i).length){t=this.container.storage.getWorkspace("graph:filtersByRepo")??{};for(const e in i){const s=Ie(e);t[s]=t[s]??{},t[s].excludeRefs=(0,T.iC)(t[s].excludeRefs,e,i[e])}this.container.storage.storeWorkspace("graph:filtersByRepo",t),this.container.storage.deleteWorkspace("graph:hiddenRefs")}const s=(t?.[e.repoPath]??this.getFiltersByRepo(e))?.excludeRefs;if(null==s||0===Object.keys(s).length)return;const r=G.D.get("graph.avatars",void 0,!0),o={},a=e=>this.host.asWebviewUri(e);for(const t in s){const i={...s[t]};if("remote"===i.type&&i.owner){const t=e.remotes.get(i.owner);null!=t&&(i.avatarUrl=((r?t.provider?.avatarUri:void 0)??(0,C.dM)(this.container,t,a))?.toString(!0))}o[t]=i}return o}getIncludeOnlyRefs(e){if(null==e)return;const t=this.getFiltersByRepo(e),i=t?.includeOnlyRefs;if(null==i||0===Object.keys(i).length)return;const s={};for(const[t,r]of Object.entries(i)){let i;if("HEAD"===r.id){if(i=(0,M.sE)(e.branches.values(),(e=>e.current)),null==i)continue;s[i.id]={...r,id:i.id,name:i.name}}else s[t]=r;if("head"===r.type&&(i=i??e.branches.get(r.name),null!=i?.upstream&&!i.upstream.missing)){const t=(0,f.Vx)(e.repoPath,!0,i.upstream.name);s[t]={id:t,type:"remote",name:(0,f.S3)(i.upstream.name),owner:(0,f.Lo)(i.upstream.name)}}}return s}getFiltersByRepo(e){if(null==e)return;const t=this.container.storage.getWorkspace("graph:filtersByRepo");return t?.[e.repoPath]}getColumnSettings(e){const t={...De};if(null!=e)for(const[i,s]of Object.entries(e))t[i]={...De[i],...s};return t}getColumnHeaderContext(e){return(0,B.BH)({webviewItem:"gitlens:graph:columns",webviewItemValue:this.getColumnContextItems(e).join(",")})}getGraphSettingsIconContext(e){return(0,B.BH)({webviewItem:"gitlens:graph:settings",webviewItemValue:this.getSettingsIconContextItems(e).join(",")})}getColumnContextItems(e){const t=[],i=["author","changes","datetime","graph","message","ref","sha"];let s=0;for(const[r,o]of Object.entries(e))i.includes(r)&&(o.isHidden||s++,t.push(`column:${r}:${o.isHidden?"hidden":"visible"}${o.mode?`+${o.mode}`:""}`));return s>1&&t.push("columns:canHide"),t}getSettingsIconContextItems(e){const t=null!=e?this.getColumnContextItems(e):[];if(G.D.get("graph.scrollMarkers.enabled")){const e=["localBranches","remoteBranches","stashes","tags"],i=G.D.get("graph.scrollMarkers.additionalTypes");for(const s of e)t.push(`scrollMarker:${s}:${i.includes(s)?"enabled":"disabled"}`)}return t}getComponentConfig(){return{avatars:G.D.get("graph.avatars"),dateFormat:G.D.get("graph.dateFormat")??G.D.get("defaultDateFormat")??"short+short",dateStyle:G.D.get("graph.dateStyle")??G.D.get("defaultDateStyle"),enabledRefMetadataTypes:this.getEnabledRefMetadataTypes(),dimMergeCommits:G.D.get("graph.dimMergeCommits"),enableMultiSelection:!1,highlightRowsOnRefHover:G.D.get("graph.highlightRowsOnRefHover"),minimap:G.D.get("graph.minimap.enabled"),minimapDataType:G.D.get("graph.minimap.dataType"),minimapMarkerTypes:this.getMinimapMarkerTypes(),scrollRowPadding:G.D.get("graph.scrollRowPadding"),scrollMarkerTypes:this.getScrollMarkerTypes(),showGhostRefsOnRowHover:G.D.get("graph.showGhostRefsOnRowHover"),showRemoteNamesOnRefs:G.D.get("graph.showRemoteNames"),idLength:G.D.get("advanced.abbreviatedShaLength")}}getScrollMarkerTypes(){if(!G.D.get("graph.scrollMarkers.enabled"))return[];return["selection","highlights","head","upstream",...G.D.get("graph.scrollMarkers.additionalTypes")]}getMinimapMarkerTypes(){if(!G.D.get("graph.minimap.enabled"))return[];return["selection","highlights","head","upstream",...G.D.get("graph.minimap.additionalTypes")]}getEnabledRefMetadataTypes(){const e=[];return G.D.get("graph.pullRequests.enabled")&&e.push(L.PullRequest),G.D.get("graph.showUpstreamStatus")&&e.push(L.Upstream),e}async getGraphAccess(){let e=await this.container.git.access(n.x.Graph,this.repository?.path);this._etagSubscription=this.container.subscription.etag,!1===e.allowed&&null==e.subscription.current.previewTrial&&(await this.container.subscription.startPreviewTrial(),e=await this.container.git.access(n.x.Graph,this.repository?.path));let t=e?.visibility;return null==t&&null!=this.repository&&(t=await this.container.git.visibility(this.repository?.path)),[e,t]}getGraphItemContext(e){const t="string"==typeof e?JSON.parse(e):e;return null==t||"webview"in t||(t.webview=this.host.id),t}async getWorkingTreeStats(){if(null==this.repository||0===this.container.git.repositoryCount)return;const e=await this.container.git.getStatusForRepo(this.repository.path),t=e?.getDiffStatus();return{added:t?.added??0,deleted:t?.deleted??0,modified:t?.changed??0,context:(0,B.BH)({webviewItem:"gitlens:wip",webviewItemValue:{type:"commit",ref:this.getRevisionReference(this.repository.path,v.CL,y.e.Working)}})}}async getState(e){if(0===this.container.git.repositoryCount)return{webviewId:this.host.id,timestamp:Date.now(),allowed:!0,repositories:[]};if(null==this.repository&&(this.repository=this.container.git.getBestRepositoryOrFirst(),null==this.repository))return{webviewId:this.host.id,timestamp:Date.now(),allowed:!0,repositories:[]};this._etagRepository=this.repository?.etag,this.host.title=`${this.host.originalTitle}: ${this.repository.formattedName}`;const{defaultItemLimit:t}=G.D.get("graph"),i=Math.max(t,this._graph?.ids.size??t),s=null==this._selectedId||this._selectedId===v.CL?"HEAD":this._selectedId,r=this.getColumns(),o=this.getColumnSettings(r),a=this.container.git.getCommitsForGraph(this.repository.path,(e=>this.host.asWebviewUri(e)),{include:{stats:G.D.get("graph.minimap.enabled")&&"lines"===G.D.get("graph.minimap.dataType")||!o.changes.isHidden},limit:i,ref:s}),n=Promise.allSettled([this.getGraphAccess(),this.getWorkingTreeStats(),this.repository.getBranch(),this.repository.getLastFetched()]);let h;e?queueMicrotask((async()=>{const e=await a;this.setGraph(e),this.setSelectedRows(e.id),this.notifyDidChangeRefsVisibility(),this.notifyDidChangeRows(!0)})):(h=await a,this.setGraph(h),this.setSelectedRows(h.id));const[p,l,d,g]=await n,[c,m]=(0,O.Sb)(p)??[];let u;const f=(0,O.Sb)(d);if(null!=f&&(u={...f.state},null!=f.upstream)){u.upstream=f.upstream.name;const e=await f.getRemote();null!=e?.provider&&(u.provider={name:e.provider.name,icon:"remote"===e.provider.icon?"cloud":e.provider.icon,url:e.provider.url({type:R.J.Repo})})}return{webviewId:this.host.id,timestamp:Date.now(),windowFocused:this.isWindowFocused,repositories:We(this.container.git.openRepositories),selectedRepository:this.repository.path,selectedRepositoryVisibility:m,branchName:f?.name,branchState:u,lastFetched:new Date((0,O.Sb)(g)),selectedRows:this._selectedRows,subscription:c?.subscription.current,allowed:!1!==(c?.allowed??!1),avatars:null!=h?Object.fromEntries(h.avatars):void 0,refsMetadata:null===this.resetRefsMetadata()?null:{},loading:e,rowsStatsLoading:null!=h?.rowsStatsDeferred?.isLoaded&&!h.rowsStatsDeferred.isLoaded(),rows:h?.rows,downstreams:null!=h?Object.fromEntries(h.downstreams):void 0,paging:null!=h?{startingCursor:h.paging?.startingCursor,hasMore:h.paging?.hasMore??!1}:void 0,columns:o,config:this.getComponentConfig(),context:{header:this.getColumnHeaderContext(o),settings:this.getGraphSettingsIconContext(o)},excludeRefs:null!=h?this.getExcludedRefs(h)??{}:{},excludeTypes:this.getExcludedTypes(h)??{},includeOnlyRefs:null!=h?this.getIncludeOnlyRefs(h)??{}:{},nonce:this.host.cspNonce,workingTreeStats:(0,O.Sb)(l)??{added:0,deleted:0,modified:0}}}updateColumns(e){let t=this.container.storage.getWorkspace("graph:columns");for(const[i,s]of Object.entries(e))t=(0,T.iC)(t,i,s);this.container.storage.storeWorkspace("graph:columns",t),this.notifyDidChangeColumns()}updateExcludedRefs(e,t,i){if(null==t||0===t.length)return;let s=this.getFiltersByRepo(e)?.excludeRefs??{};for(const e of t)s=(0,T.iC)(s,e.id,i?void 0:{id:e.id,type:e.type,name:e.name,owner:e.owner});this.updateFiltersByRepo(e,{excludeRefs:s}),this.notifyDidChangeRefsVisibility()}updateFiltersByRepo(e,t){if(null==e)throw new Error("Cannot save repository filters since Graph is undefined");const i=this.container.storage.getWorkspace("graph:filtersByRepo");return this.container.storage.storeWorkspace("graph:filtersByRepo",(0,T.iC)(i,e.repoPath,{...i?.[e.repoPath],...t}))}updateIncludeOnlyRefs(e,t){let i;if(null==t||0===t.length){if(null==this.getFiltersByRepo(e)?.includeOnlyRefs)return;i=void 0}else{i={};for(const e of t)i[e.id]={id:e.id,type:e.type,name:e.name,owner:e.owner}}this.updateFiltersByRepo(e,{includeOnlyRefs:i}),this.notifyDidChangeRefsVisibility()}updateExcludedType(e,{key:t,value:i}){let s=this.getFiltersByRepo(e)?.excludeTypes;(null!=s&&0!==Object.keys(s).length||!1!==i)&&(s=(0,T.iC)(s,t,i),this.updateFiltersByRepo(e,{excludeTypes:s}),this.notifyDidChangeRefsVisibility())}resetRefsMetadata(){return this._refsMetadata=(0,_.fw)("gitlens:hasConnectedRemotes")?void 0:null,this._refsMetadata}resetRepositoryState(){this.setGraph(void 0),this.setSelectedRows(void 0)}resetSearchState(){this._search=void 0,this._searchCancellation?.dispose(),this._searchCancellation=void 0}setSelectedRows(e){this._selectedId!==e&&(this._selectedId=e,e===v.CL&&(e=y.e.Working),this._selectedRows=null!=e?{[e]:!0}:void 0)}setGraph(e){this._graph=e,null==e?(this.resetRefsMetadata(),this.resetSearchState()):e.rowsStatsDeferred?.promise.then((()=>{this.notifyDidChangeRowsStats(e)}))}async updateGraphWithMoreRows(e,t,i){const{defaultItemLimit:s,pageItemLimit:r}=G.D.get("graph"),o=await(e.more?.(r??s,t));if(null!=o){if(this.setGraph(o),!i?.paging?.hasMore)return;const e=(0,M.Z$)(i.results)?.[0];if(null==e)return;const t=o.remappedIds?.get(e)??e;o.ids.has(t)&&queueMicrotask((()=>{this.onSearch({search:i.query,more:!0})}))}}fetch(e){const t=null!=e?this.getGraphItemRef(e,"branch"):void 0;d.he(this.repository,t)}pull(e){const t=null!=e?this.getGraphItemRef(e,"branch"):void 0;d.X4(this.repository,t)}push(e){const t=null!=e?this.getGraphItemRef(e):void 0;d.VF(this.repository,void 0,t)}createBranch(e){const t=this.getGraphItemRef(e);return null==t?Promise.resolve():h.Ue(t.repoPath,t)}deleteBranch(e){if(_e(e,"branch")){const{ref:t}=e.webviewItemValue;return h.Od(t.repoPath,t)}return Promise.resolve()}mergeBranchInto(e){if(_e(e,"branch")){const{ref:t}=e.webviewItemValue;return d.TS(t.repoPath,t)}return Promise.resolve()}openBranchOnRemote(e,t){if(_e(e,"branch")){const{ref:i}=e.webviewItemValue;return(0,S.P0)(a.Gh.OpenOnRemote,{repoPath:i.repoPath,resource:{type:R.J.Branch,branch:i.name},remote:i.upstream?.name,clipboard:t})}return Promise.resolve()}publishBranch(e){if(_e(e,"branch")){const{ref:t}=e.webviewItemValue;return d.VF(t.repoPath,void 0,t)}return Promise.resolve()}rebase(e){const t=this.getGraphItemRef(e);return null==t?Promise.resolve():d.DW(t.repoPath,t)}rebaseToRemote(e){if(_e(e,"branch")){const{ref:t}=e.webviewItemValue;if(null!=t.upstream)return d.DW(t.repoPath,(0,b.xB)(t.upstream.name,t.repoPath,{refType:"branch",name:t.upstream.name,remote:!0}))}return Promise.resolve()}renameBranch(e){if(_e(e,"branch")){const{ref:t}=e.webviewItemValue;return h.PQ(t.repoPath,t)}return Promise.resolve()}cherryPick(e){const t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():d.QP(t.repoPath,t)}async copy(e){const t=this.getGraphItemRef(e);if(null!=t)await s.env.clipboard.writeText("revision"===t.refType&&t.message?`${t.name}: ${t.message}`:t.name);else if(Ge(e,"contributor")){const{name:t,email:i}=e.webviewItemValue;await s.env.clipboard.writeText(`${t}${i?` <${i}>`:""}`)}else if(Ge(e,"pullrequest")){const{url:t}=e.webviewItemValue;await s.env.clipboard.writeText(t)}return Promise.resolve()}copyMessage(e){const t=this.getGraphItemRef(e);return null==t?Promise.resolve():(0,S.P0)(a.Gh.CopyMessageToClipboard,{repoPath:t.repoPath,sha:t.ref,message:"message"in t?t.message:void 0})}async copySha(e){const t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=t.ref;return(0,b.D3)(i)||(i=await this.container.git.resolveReference(t.repoPath,i,void 0,{force:!0})),(0,S.P0)(a.Gh.CopyShaToClipboard,{sha:i})}openInDetailsView(e){const t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():this.host.isView()?void(0,p.E4)(t,{preserveFocus:!0,preserveVisibility:!1}):(0,S.P0)(a.Gh.ShowInDetailsView,{repoPath:t.repoPath,refs:[t.ref]})}openSCM(e){return null==this.getGraphItemRef(e,"revision")?Promise.resolve():(0,S.dO)("workbench.view.scm")}openCommitOnRemote(e,t){const i=this.getGraphItemRef(e,"revision");return null==i?Promise.resolve():(0,S.P0)(a.Gh.OpenOnRemote,{repoPath:i.repoPath,resource:{type:R.J.Commit,sha:i.ref},clipboard:t})}copyDeepLinkToBranch(e){if(_e(e,"branch")){const{ref:t}=e.webviewItemValue;return(0,S.P0)(a.Gh.CopyDeepLinkToBranch,{refOrRepoPath:t})}return Promise.resolve()}copyDeepLinkToCommit(e){const t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():(0,S.P0)(a.Gh.CopyDeepLinkToCommit,{refOrRepoPath:t})}copyDeepLinkToRepo(e){if(_e(e,"branch")){const{ref:t}=e.webviewItemValue;return t.remote?(0,S.P0)(a.Gh.CopyDeepLinkToRepo,{refOrRepoPath:t.repoPath,remote:(0,f.Lo)(t.name)}):Promise.resolve()}return Promise.resolve()}copyDeepLinkToTag(e){if(_e(e,"tag")){const{ref:t}=e.webviewItemValue;return(0,S.P0)(a.Gh.CopyDeepLinkToTag,{refOrRepoPath:t})}return Promise.resolve()}resetCommit(e){const t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():d.mc(t.repoPath,(0,b.xB)(`${t.ref}^`,t.repoPath,{refType:"revision",name:`${t.name}^`,message:t.message}))}resetToCommit(e){const t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():d.mc(t.repoPath,t)}resetToTip(e){const t=this.getGraphItemRef(e,"branch");return null==t?Promise.resolve():d.mc(t.repoPath,(0,b.xB)(t.ref,t.repoPath,{refType:"revision",name:t.name}))}revertCommit(e){const t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():d.CU(t.repoPath,t)}switchTo(e){const t=this.getGraphItemRef(e);return null==t?Promise.resolve():d.gu(t.repoPath,t)}hideRef(e,t){let i;if(t?.group&&function(e){return null!=e&&(function(e){return null!=e&&((0,B.dH)(e)&&("gitlens.graph"===e.webview||"gitlens.views.graph"===e.webview))}(e)&&"object"==typeof e.webviewItemGroupValue&&"refGroup"===e.webviewItemGroupValue.type)}(e))({refs:i}=e.webviewItemGroupValue);else if(!t?.group&&_e(e)){const{ref:t}=e.webviewItemValue;null!=t.id&&(i=[t])}return null!=i&&this.updateExcludedRefs(this._graph,i.map((e=>{const i="branch"===e.refType&&e.remote;return{id:e.id,name:i?t?.remote?"*":(0,f.S3)(e.name):e.name,owner:i?(0,f.Lo)(e.name):void 0,type:"branch"===e.refType?e.remote?"remote":"head":"tag"}})),!1),Promise.resolve()}switchToAnother(e){const t=this.getGraphItemRef(e);return null==t?d.gu(this.repository?.path):d.gu(t.repoPath)}async undoCommit(e){const t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();const i=await this.container.git.getOrOpenScmRepository(t.repoPath),r=await(i?.getCommit("HEAD"));r?.hash===t.ref?(0,S.Zv)("git.undoCommit",t.repoPath):s.window.showWarningMessage(`Commit ${(0,b.Wh)(t,{capitalize:!0,icon:!1})} cannot be undone, because it is no longer the most recent commit.`)}saveStash(e){const t=this.getGraphItemRef(e);return null==t?Promise.resolve():g.VF(t.repoPath)}applyStash(e){const t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():g.nn(t.repoPath,t)}deleteStash(e){const t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():g.Cw(t.repoPath,t)}renameStash(e){const t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():g.PQ(t.repoPath,t)}async createTag(e){const t=this.getGraphItemRef(e);return null==t?Promise.resolve():c.Ue(t.repoPath,t)}deleteTag(e){if(_e(e,"tag")){const{ref:t}=e.webviewItemValue;return c.Od(t.repoPath,t)}return Promise.resolve()}async createWorktree(e){const t=this.getGraphItemRef(e);return null==t?Promise.resolve():m.Ue(t.repoPath,void 0,t)}async createPullRequest(e){if(_e(e,"branch")){const{ref:t}=e.webviewItemValue,i=this.container.git.getRepository(t.repoPath),s=await(i?.getBranch(t.name)),r=await(s?.getRemote());return(0,S.SI)("createPullRequest",{repoPath:t.repoPath,remote:null!=r?{name:r.name,provider:null!=r.provider?{id:r.provider.id,name:r.provider.name,domain:r.provider.domain}:void 0,url:r.url}:void 0,branch:{name:t.name,upstream:t.upstream?.name,isRemote:t.remote}})}return Promise.resolve()}openPullRequestOnRemote(e,t){if(Se(e)&&"object"==typeof e.webviewItemValue&&"pullrequest"===e.webviewItemValue.type){const{url:i}=e.webviewItemValue;return(0,S.P0)(a.Gh.OpenPullRequestOnRemote,{pr:{url:i},clipboard:t})}return Promise.resolve()}async compareAncestryWithWorking(e){const t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();const i=await this.container.git.getBranch(t.repoPath);if(null==i)return;const s=await this.container.git.getMergeBase(t.repoPath,i.ref,t.ref);return null!=s?this.container.searchAndCompareView.compare(t.repoPath,{ref:s,label:`ancestry with ${t.ref} (${(0,b.zL)(s)})`},""):void 0}compareHeadWith(e){const t=this.getGraphItemRef(e);return null==t?Promise.resolve():this.container.searchAndCompareView.compare(t.repoPath,"HEAD",t.ref)}compareWithUpstream(e){if(_e(e,"branch")){const{ref:t}=e.webviewItemValue;if(null!=t.upstream)return this.container.searchAndCompareView.compare(t.repoPath,t.ref,t.upstream.name)}return Promise.resolve()}compareWorkingWith(e){const t=this.getGraphItemRef(e);return null==t?Promise.resolve():this.container.searchAndCompareView.compare(t.repoPath,"",t.ref)}async openFiles(e){const t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,p.aE)(t)}async openAllChanges(e){const t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,p.Gp)(t)}async openAllChangesWithWorking(e){const t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,p.Ou)(t)}async openRevisions(e){const t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,p.Dh)(t)}async openOnlyChangedFiles(e){const t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,p.Uc)(t)}addAuthor(e){if(Ge(e,"contributor")){const{repoPath:t,name:i,email:s,current:r}=e.webviewItemValue;return l.q(t,new w.V(t,i,s,0,void 0,r))}return Promise.resolve()}async toggleColumn(e,t){let i=this.container.storage.getWorkspace("graph:columns"),s=i?.[e];null!=s?s.isHidden=!t:s={isHidden:!t},i=(0,T.iC)(i,e,s),await this.container.storage.storeWorkspace("graph:columns",i),this.notifyDidChangeColumns(),"changes"!==e||s.isHidden||this._graph?.includes?.stats||this.updateState()}async toggleScrollMarker(e,t){let i=G.D.get("graph.scrollMarkers.additionalTypes"),s=!1;t&&!i.includes(e)?(i=i.concat(e),s=!0):!t&&i.includes(e)&&(i=i.filter((t=>t!==e)),s=!0),s&&(await G.D.updateEffective("graph.scrollMarkers.additionalTypes",i),this.notifyDidChangeScrollMarkers())}async setColumnMode(e,t){let i=this.container.storage.getWorkspace("graph:columns"),s=i?.[e];null!=s?s.mode=t:s={mode:t},i=(0,T.iC)(i,e,s),await this.container.storage.storeWorkspace("graph:columns",i),this.notifyDidChangeColumns()}getCommitFromGraphItemRef(e){let t=this.getGraphItemRef(e,"revision");return null!=t?this.container.git.getCommit(t.repoPath,t.ref):(t=this.getGraphItemRef(e,"stash"),null!=t?this.container.git.getCommit(t.repoPath,t.ref):Promise.resolve(void 0))}getGraphItemRef(e,t){if(null==e){const e=this.activeSelection;return null==e||null!=t&&t!==e.refType?void 0:e}switch(t){case"branch":return _e(e,"branch")||Ge(e,"upstreamStatus")?e.webviewItemValue.ref:void 0;case"revision":return _e(e,"revision")?e.webviewItemValue.ref:void 0;case"stash":return _e(e,"stash")?e.webviewItemValue.ref:void 0;case"tag":return _e(e,"tag")?e.webviewItemValue.ref:void 0;default:return _e(e)?e.webviewItemValue.ref:void 0}}}function We(e){return 0===e.length?[]:e.map((e=>({formattedName:e.formattedName,id:e.id,name:e.name,path:e.path,isVirtual:e.provider.virtual})))}function Se(e){return null!=e&&((0,B.tM)(e)&&("gitlens.graph"===e.webview||"gitlens.views.graph"===e.webview))}function Ge(e,t){return null!=e&&(Se(e)&&"object"==typeof e.webviewItemValue&&e.webviewItemValue.type===t)}function _e(e,t){return null!=e&&(Se(e)&&"object"==typeof e.webviewItemValue&&"ref"in e.webviewItemValue&&(null==t||e.webviewItemValue.ref.refType===t))}function Ie(e){return e.split("|",1)[0]}Re([(0,F.fF)({args:{0:e=>e.toString()}})],GraphWebviewProvider.prototype,"onRepositoryChanged",1),Re([(0,F.fF)({args:!1})],GraphWebviewProvider.prototype,"onRepositoryFileSystemChanged",1),Re([(0,F.fF)({args:!1})],GraphWebviewProvider.prototype,"onSubscriptionChanged",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"onEnsureRow",1),Re([(0,I.H)(),(0,F.fF)()],GraphWebviewProvider.prototype,"onGetMoreRows",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"onSearch",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"updateState",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"notifyDidChangeFocus",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"notifyDidChangeWindowFocus",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"updateAvatars",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"notifyDidChangeAvatars",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"updateRefsMetadata",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"notifyDidChangeRefsMetadata",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"notifyDidChangeColumns",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"notifyDidChangeScrollMarkers",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"notifyDidChangeRefsVisibility",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"notifyDidChangeConfiguration",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"notifyDidFetch",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"notifyDidChangeRows",1),Re([(0,F.fF)({args:!1})],GraphWebviewProvider.prototype,"notifyDidChangeRowsStats",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"notifyDidChangeWorkingTree",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"notifyDidChangeSelection",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"notifyDidChangeSubscription",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"notifyDidChangeState",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"fetch",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"pull",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"push",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"createBranch",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"deleteBranch",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"mergeBranchInto",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"openBranchOnRemote",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"publishBranch",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"rebase",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"rebaseToRemote",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"renameBranch",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"cherryPick",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"copy",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"copyMessage",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"copySha",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"openInDetailsView",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"openSCM",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"openCommitOnRemote",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"copyDeepLinkToBranch",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"copyDeepLinkToCommit",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"copyDeepLinkToRepo",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"copyDeepLinkToTag",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"resetCommit",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"resetToCommit",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"resetToTip",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"revertCommit",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"switchTo",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"hideRef",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"switchToAnother",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"undoCommit",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"saveStash",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"applyStash",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"deleteStash",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"renameStash",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"createTag",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"deleteTag",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"createWorktree",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"createPullRequest",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"openPullRequestOnRemote",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"compareAncestryWithWorking",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"compareHeadWith",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"compareWithUpstream",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"compareWorkingWith",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"openFiles",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"openAllChanges",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"openAllChangesWithWorking",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"openRevisions",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"openOnlyChangedFiles",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"addAuthor",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"toggleColumn",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"toggleScrollMarker",1),Re([(0,F.fF)()],GraphWebviewProvider.prototype,"setColumnMode",1)}};