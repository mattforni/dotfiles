(()=>{var e,t,i,r={8054:function(e,t,i){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};const s=i(2361),o=r(i(1957)),n=r(i(6304)),a=o.default("agent-base");function c(){const{stack:e}=new Error;return"string"==typeof e&&e.split("\n").some((e=>-1!==e.indexOf("(https.js:")||-1!==e.indexOf("node:https:")))}function l(e,t){return new l.Agent(e,t)}!function(e){class Agent extends s.EventEmitter{constructor(e,t){super();let i=t;"function"==typeof e?this.callback=e:e&&(i=e),this.timeout=null,i&&"number"==typeof i.timeout&&(this.timeout=i.timeout),this.maxFreeSockets=1,this.maxSockets=1,this.maxTotalSockets=1/0,this.sockets={},this.freeSockets={},this.requests={},this.options={}}get defaultPort(){return"number"==typeof this.explicitDefaultPort?this.explicitDefaultPort:c()?443:80}set defaultPort(e){this.explicitDefaultPort=e}get protocol(){return"string"==typeof this.explicitProtocol?this.explicitProtocol:c()?"https:":"http:"}set protocol(e){this.explicitProtocol=e}callback(e,t,i){throw new Error('"agent-base" has no default implementation, you must subclass and override `callback()`')}addRequest(e,t){const i=Object.assign({},t);"boolean"!=typeof i.secureEndpoint&&(i.secureEndpoint=c()),null==i.host&&(i.host="localhost"),null==i.port&&(i.port=i.secureEndpoint?443:80),null==i.protocol&&(i.protocol=i.secureEndpoint?"https:":"http:"),i.host&&i.path&&delete i.path,delete i.agent,delete i.hostname,delete i._defaultAgent,delete i.defaultPort,delete i.createConnection,e._last=!0,e.shouldKeepAlive=!1;let r=!1,s=null;const o=i.timeout||this.timeout,l=t=>{e._hadError||(e.emit("error",t),e._hadError=!0)},h=()=>{s=null,r=!0;const e=new Error(`A "socket" was not created for HTTP request before ${o}ms`);e.code="ETIMEOUT",l(e)},u=e=>{r||(null!==s&&(clearTimeout(s),s=null),l(e))},d=t=>{if(r)return;if(null!=s&&(clearTimeout(s),s=null),o=t,Boolean(o)&&"function"==typeof o.addRequest)return a("Callback returned another Agent instance %o",t.constructor.name),void t.addRequest(e,i);var o;if(t)return t.once("free",(()=>{this.freeSocket(t,i)})),void e.onSocket(t);const n=new Error(`no Duplex stream was returned to agent-base for \`${e.method} ${e.path}\``);l(n)};if("function"==typeof this.callback){this.promisifiedCallback||(this.callback.length>=3?(a("Converting legacy callback function to promise"),this.promisifiedCallback=n.default(this.callback)):this.promisifiedCallback=this.callback),"number"==typeof o&&o>0&&(s=setTimeout(h,o)),"port"in i&&"number"!=typeof i.port&&(i.port=Number(i.port));try{a("Resolving socket for %o request: %o",i.protocol,`${e.method} ${e.path}`),Promise.resolve(this.promisifiedCallback(e,i)).then(d,u)}catch(e){Promise.reject(e).catch(u)}}else l(new Error("`callback` is not defined"))}freeSocket(e,t){a("Freeing socket %o %o",e.constructor.name,t),e.destroy()}destroy(){a("Destroying agent %o",this.constructor.name)}}e.Agent=Agent,e.prototype=e.Agent.prototype}(l||(l={})),e.exports=l},6304:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(t,i){return new Promise(((r,s)=>{e.call(this,t,i,((e,t)=>{e?s(e):r(t)}))}))}}},5640:(e,t,i)=>{i.d(t,{QO:()=>r,qb:()=>s});var r=(e=>(e[e.Force=0]="Force",e[e.ForceWithLease=1]="ForceWithLease",e))(r||{}),s=(e=>(e[e.INDEX_MODIFIED=0]="INDEX_MODIFIED",e[e.INDEX_ADDED=1]="INDEX_ADDED",e[e.INDEX_DELETED=2]="INDEX_DELETED",e[e.INDEX_RENAMED=3]="INDEX_RENAMED",e[e.INDEX_COPIED=4]="INDEX_COPIED",e[e.MODIFIED=5]="MODIFIED",e[e.DELETED=6]="DELETED",e[e.UNTRACKED=7]="UNTRACKED",e[e.IGNORED=8]="IGNORED",e[e.INTENT_TO_ADD=9]="INTENT_TO_ADD",e[e.ADDED_BY_US=10]="ADDED_BY_US",e[e.ADDED_BY_THEM=11]="ADDED_BY_THEM",e[e.DELETED_BY_US=12]="DELETED_BY_US",e[e.DELETED_BY_THEM=13]="DELETED_BY_THEM",e[e.BOTH_ADDED=14]="BOTH_ADDED",e[e.BOTH_DELETED=15]="BOTH_DELETED",e[e.BOTH_MODIFIED=16]="BOTH_MODIFIED",e))(s||{})},4398:(e,t,i)=>{i.d(t,{h:()=>s});var r=i(5255);function s(e){if(e.scheme===r.sN.Git)try{return JSON.parse(e.query)}catch{}}},2022:(e,t,i)=>{i.d(t,{H:()=>AnnotationProviderBase,m:()=>n});var r=i(9496),s=i(2061),o=i(4336);function n(e){return`${e?.document.uri.toString()}|${e?.viewColumn}`}class AnnotationProviderBase{constructor(e,t,i){this.annotationType=e,this.editor=t,this.trackedDocument=i,this.correlationKey=n(this.editor),this.document=this.editor.document,this.disposable=r.Disposable.from(r.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this))}annotationContext;correlationKey;document;status;decorations;disposable;dispose(){this.clear(),this.disposable.dispose()}onTextEditorSelectionChanged(e){this.document===e.textEditor.document&&this.selection({line:e.selections[0].active.line})}get editorUri(){return this.editor?.document?.uri}clear(){if(this.annotationContext=void 0,this.status=void 0,null!=this.editor&&this.decorations?.length){for(const e of this.decorations)try{this.editor.setDecorations(e.decorationType,[])}catch{}this.decorations=void 0}}mustReopen(e){return!1}refresh(e){if(null==this.editor||!this.decorations?.length)return;const t=[];for(const i of this.decorations){const r=e.get(i.decorationType);null!==r&&(null!=r&&(i.decorationType=r),t.push(i))}this.setDecorations(this.decorations)}async restore(e){if(!1!==this.editor._disposed){if(this.status="computing",e===r.window.activeTextEditor&&await(0,s.v)("gitlens:annotationStatus",this.status),this.editor=e,this.correlationKey=n(e),this.document=e.document,this.decorations?.length)for(const e of this.decorations)this.editor.setDecorations(e.decorationType,e.rangesOrOptions);this.status="computed",e===r.window.activeTextEditor&&await(0,s.v)("gitlens:annotationStatus",this.status)}}async provideAnnotation(e){this.status="computing";try{if(await this.onProvideAnnotation(e))return this.status="computed",!0}catch(e){o.Yd.error(e)}return this.status=void 0,!1}setDecorations(e){if(this.decorations?.length&&this.clear(),this.decorations=e,this.decorations?.length)for(const e of this.decorations)this.editor.setDecorations(e.decorationType,e.rangesOrOptions)}}},248:(e,t,i)=>{i.d(t,{Lx:()=>k,iF:()=>A,U5:()=>P,Vz:()=>S,HM:()=>C,sV:()=>D});var r=i(9496),s=i(5255),o=i(9338);function n(e){const t=d(e);return null==t?null:[t.rgba.r,t.rgba.g,t.rgba.b,t.rgba.a]}function a(e,t){const i=Math.pow(10,t);return Math.round(e*i)/i}class RGBA{_rgbaBrand=void 0;r;g;b;a;constructor(e,t,i,r=1){this.r=0|Math.min(255,Math.max(0,e)),this.g=0|Math.min(255,Math.max(0,t)),this.b=0|Math.min(255,Math.max(0,i)),this.a=a(Math.max(Math.min(1,r),0),3)}static equals(e,t){return e.r===t.r&&e.g===t.g&&e.b===t.b&&e.a===t.a}}class HSLA{_hslaBrand=void 0;h;s;l;a;constructor(e,t,i,r){this.h=0|Math.max(Math.min(360,e),0),this.s=a(Math.max(Math.min(1,t),0),3),this.l=a(Math.max(Math.min(1,i),0),3),this.a=a(Math.max(Math.min(1,r),0),3)}static equals(e,t){return e.h===t.h&&e.s===t.s&&e.l===t.l&&e.a===t.a}static fromRGBA(e){const t=e.r/255,i=e.g/255,r=e.b/255,s=e.a,o=Math.max(t,i,r),n=Math.min(t,i,r);let a=0,c=0;const l=(n+o)/2,h=o-n;if(h>0){switch(c=Math.min(l<=.5?h/(2*l):h/(2-2*l),1),o){case t:a=(i-r)/h+(i<r?6:0);break;case i:a=(r-t)/h+2;break;case r:a=(t-i)/h+4}a*=60,a=Math.round(a)}return new HSLA(a,c,l,s)}static _hue2rgb(e,t,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?e+6*(t-e)*i:i<.5?t:i<2/3?e+(t-e)*(2/3-i)*6:e}static toRGBA(e){const t=e.h/360,{s:i,l:r,a:s}=e;let o,n,a;if(0===i)o=n=a=r;else{const e=r<.5?r*(1+i):r+i-r*i,s=2*r-e;o=HSLA._hue2rgb(s,e,t+1/3),n=HSLA._hue2rgb(s,e,t),a=HSLA._hue2rgb(s,e,t-1/3)}return new RGBA(Math.round(255*o),Math.round(255*n),Math.round(255*a),s)}}class HSVA{_hsvaBrand=void 0;h;s;v;a;constructor(e,t,i,r){this.h=0|Math.max(Math.min(360,e),0),this.s=a(Math.max(Math.min(1,t),0),3),this.v=a(Math.max(Math.min(1,i),0),3),this.a=a(Math.max(Math.min(1,r),0),3)}static equals(e,t){return e.h===t.h&&e.s===t.s&&e.v===t.v&&e.a===t.a}static fromRGBA(e){const t=e.r/255,i=e.g/255,r=e.b/255,s=Math.max(t,i,r),o=s-Math.min(t,i,r),n=0===s?0:o/s;let a;return a=0===o?0:s===t?((i-r)/o%6+6)%6:s===i?(r-t)/o+2:(t-i)/o+4,new HSVA(Math.round(60*a),n,s,e.a)}static toRGBA(e){const{h:t,s:i,v:r,a:s}=e,o=r*i,n=o*(1-Math.abs(t/60%2-1)),a=r-o;let[c,l,h]=[0,0,0];return t<60?(c=o,l=n):t<120?(c=n,l=o):t<180?(l=o,h=n):t<240?(l=n,h=o):t<300?(c=n,h=o):t<=360&&(c=o,h=n),c=Math.round(255*(c+a)),l=Math.round(255*(l+a)),h=Math.round(255*(h+a)),new RGBA(c,l,h,s)}}class Color{static from(e){return e instanceof Color?e:d(e)||Color.red}static fromCssVariable(e,t){return d(function(e,t){return t.getPropertyValue(e).trim()}(e,t))||Color.red}static fromHex(e){return p(e)||Color.red}static equals(e,t){return!e&&!t||!(!e||!t)&&e.equals(t)}rgba;_hsla;get hsla(){return this._hsla?this._hsla:HSLA.fromRGBA(this.rgba)}_hsva;get hsva(){return this._hsva?this._hsva:HSVA.fromRGBA(this.rgba)}constructor(e){if(!e)throw new Error("Color needs a value");if(e instanceof RGBA)this.rgba=e;else if(e instanceof HSLA)this._hsla=e,this.rgba=HSLA.toRGBA(e);else{if(!(e instanceof HSVA))throw new Error("Invalid color ctor argument");this._hsva=e,this.rgba=HSVA.toRGBA(e)}}equals(e){return null!=e&&(Boolean(e)&&RGBA.equals(this.rgba,e.rgba)&&HSLA.equals(this.hsla,e.hsla)&&HSVA.equals(this.hsva,e.hsva))}getRelativeLuminance(){return a(.2126*Color._relativeLuminanceForComponent(this.rgba.r)+.7152*Color._relativeLuminanceForComponent(this.rgba.g)+.0722*Color._relativeLuminanceForComponent(this.rgba.b),4)}static _relativeLuminanceForComponent(e){const t=e/255;return t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4)}luminance(e){return function(e,t){if(0===t)return new Color(new RGBA(0,0,0,e.rgba.a));if(1===t)return new Color(new RGBA(255,255,255,e.rgba.a));const i=e.getRelativeLuminance();let r=20;const s=(e,i)=>{const o=e.mix(i,.5),n=o.getRelativeLuminance();return Math.abs(t-n)<1e-7||!r--?o:n>t?s(e,o):s(o,i)},o=(i>t?s(Color.black,e):s(e,Color.white)).rgba;return new Color(new RGBA(o.r,o.g,o.b,e.rgba.a))}(this,e)}getContrastRatio(e){const t=this.getRelativeLuminance(),i=e.getRelativeLuminance();return t>i?(t+.05)/(i+.05):(i+.05)/(t+.05)}isDarker(){return(299*this.rgba.r+587*this.rgba.g+114*this.rgba.b)/1e3<128}isLighter(){return(299*this.rgba.r+587*this.rgba.g+114*this.rgba.b)/1e3>=128}isLighterThan(e){return this.getRelativeLuminance()>e.getRelativeLuminance()}isDarkerThan(e){return this.getRelativeLuminance()<e.getRelativeLuminance()}lighten(e){return new Color(new HSLA(this.hsla.h,this.hsla.s,this.hsla.l+this.hsla.l*e,this.hsla.a))}darken(e){return new Color(new HSLA(this.hsla.h,this.hsla.s,this.hsla.l-this.hsla.l*e,this.hsla.a))}transparent(e){const{r:t,g:i,b:r,a:s}=this.rgba;return new Color(new RGBA(t,i,r,s*e))}isTransparent(){return 0===this.rgba.a}isOpaque(){return 1===this.rgba.a}opposite(){return new Color(new RGBA(255-this.rgba.r,255-this.rgba.g,255-this.rgba.b,this.rgba.a))}blend(e){const t=e.rgba,i=this.rgba.a,r=t.a,s=i+r*(1-i);if(s<1e-6)return Color.transparent;const o=this.rgba.r*i/s+t.r*r*(1-i)/s,n=this.rgba.g*i/s+t.g*r*(1-i)/s,a=this.rgba.b*i/s+t.b*r*(1-i)/s;return new Color(new RGBA(o,n,a,s))}mix(e,t){return function(e,t,i){const r=e.rgba,s=t.rgba;return new Color(new RGBA(r.r+i*(s.r-r.r),r.g+i*(s.g-r.g),r.b+i*(s.b-r.b),r.a+i*(s.a-r.a)))}(this,e,t)}makeOpaque(e){if(this.isOpaque()||1!==e.rgba.a)return this;const{r:t,g:i,b:r,a:s}=this.rgba;return new Color(new RGBA(e.rgba.r-s*(e.rgba.r-t),e.rgba.g-s*(e.rgba.g-i),e.rgba.b-s*(e.rgba.b-r),1))}flatten(...e){const t=e.reduceRight(((e,t)=>Color._flatten(t,e)));return Color._flatten(this,t)}static _flatten(e,t){const i=1-e.rgba.a;return new Color(new RGBA(i*t.rgba.r+e.rgba.a*e.rgba.r,i*t.rgba.g+e.rgba.a*e.rgba.g,i*t.rgba.b+e.rgba.a*e.rgba.b))}_toString;toString(){return this._toString||(this._toString=function(e){if(e.isOpaque())return h(e);return c(e)}(this)),this._toString}static getLighterColor(e,t,i){if(e.isLighterThan(t))return e;i=i||.5;const r=e.getRelativeLuminance(),s=t.getRelativeLuminance();return i=i*(s-r)/s,e.lighten(i)}static getDarkerColor(e,t,i){if(e.isDarkerThan(t))return e;i=i||.5;const r=e.getRelativeLuminance();return i=i*(r-t.getRelativeLuminance())/r,e.darken(i)}static white=new Color(new RGBA(255,255,255,1));static black=new Color(new RGBA(0,0,0,1));static red=new Color(new RGBA(255,0,0,1));static blue=new Color(new RGBA(0,0,255,1));static green=new Color(new RGBA(0,255,0,1));static cyan=new Color(new RGBA(0,255,255,1));static lightgrey=new Color(new RGBA(211,211,211,1));static transparent=new Color(new RGBA(0,0,0,0))}function c(e){return`rgba(${e.rgba.r}, ${e.rgba.g}, ${e.rgba.b}, ${Number(e.rgba.a.toFixed(2))})`}function l(e){const t=e.toString(16);return 2!==t.length?`0${t}`:t}function h(e){return`#${l(e.rgba.r)}${l(e.rgba.g)}${l(e.rgba.b)}`}const u=/^((?:rgb|hsl)a?)\((-?\d+%?)[,\s]+(-?\d+%?)[,\s]+(-?\d+%?)[,\s]*(-?[\d.]+%?)?\)$/i;function d(e){if(0===(e=e.trim()).length)return null;if(e.charCodeAt(0)===s.mN.Hash)return p(e);const t=u.exec(e);if(null==t)return null;const i=t[1];let r;switch(i){case"rgb":case"hsl":r=[parseInt(t[2],10),parseInt(t[3],10),parseInt(t[4],10),1];break;case"rgba":case"hsla":r=[parseInt(t[2],10),parseInt(t[3],10),parseInt(t[4],10),parseFloat(t[5])];break;default:return null}switch(i){case"rgb":case"rgba":return new Color(new RGBA(r[0],r[1],r[2],r[3]));case"hsl":case"hsla":return new Color(new HSLA(r[0],r[1],r[2],r[3]))}return Color.red}function p(e){const t=(e=e.trim()).length;if(0===t)return null;if(e.charCodeAt(0)!==s.mN.Hash)return null;switch(t){case 7:{const t=16*m(e.charCodeAt(1))+m(e.charCodeAt(2)),i=16*m(e.charCodeAt(3))+m(e.charCodeAt(4)),r=16*m(e.charCodeAt(5))+m(e.charCodeAt(6));return new Color(new RGBA(t,i,r,1))}case 9:{const t=16*m(e.charCodeAt(1))+m(e.charCodeAt(2)),i=16*m(e.charCodeAt(3))+m(e.charCodeAt(4)),r=16*m(e.charCodeAt(5))+m(e.charCodeAt(6)),s=16*m(e.charCodeAt(7))+m(e.charCodeAt(8));return new Color(new RGBA(t,i,r,s/255))}case 4:{const t=m(e.charCodeAt(1)),i=m(e.charCodeAt(2)),r=m(e.charCodeAt(3));return new Color(new RGBA(16*t+t,16*i+i,16*r+r))}case 5:{const t=m(e.charCodeAt(1)),i=m(e.charCodeAt(2)),r=m(e.charCodeAt(3)),s=m(e.charCodeAt(4));return new Color(new RGBA(16*t+t,16*i+i,16*r+r,(16*s+s)/255))}default:return null}}function m(e){switch(e){case s.mN.Digit0:return 0;case s.mN.Digit1:return 1;case s.mN.Digit2:return 2;case s.mN.Digit3:return 3;case s.mN.Digit4:return 4;case s.mN.Digit5:return 5;case s.mN.Digit6:return 6;case s.mN.Digit7:return 7;case s.mN.Digit8:return 8;case s.mN.Digit9:return 9;case s.mN.a:case s.mN.A:return 10;case s.mN.b:case s.mN.B:return 11;case s.mN.c:case s.mN.C:return 12;case s.mN.d:case s.mN.D:return 13;case s.mN.e:case s.mN.E:return 14;case s.mN.f:case s.mN.F:return 15}return 0}var g=i(5148),f=i(4627);const w="#f66a0a",v="#0a60f6",y=["#f66a0a","#ef6939","#e96950","#e26862","#db6871","#d3677e","#cc678a","#c46696","#bb66a0","#b365a9","#a965b3","#a064bb","#9664c4","#8a63cc","#7e63d3","#7162db","#6262e2","#5061e9","#3961ef","#0a60f6"];let b;function C(){if(null==b){const{coldColor:e,hotColor:t}=g.D.get("heatmap");let i;i=e===v&&t===w?y:function(e,t,i){const r=[],s=Color.from(e),o=Color.from(t);r.push(s.toString());const n=i-1;for(let e=1;e<n;e++){const t=s.mix(o,e/n);r.push(t.toString())}return r.push(o.toString()),r}(t,e,20),b={hot:i.slice(0,10),cold:i.slice(10,20)};const r=g.D.onDidChange((e=>{g.D.changed(e,["heatmap.ageThreshold","heatmap.hotColor","heatmap.coldColor"])&&(r.dispose(),b=void 0)}))}return b}function A(e,t,i){const[r,s,o,n]=R(t,i);e.renderOptions.before.borderColor=`rgba(${r},${s},${o},${n})`}function k(e,t,i,s){const[o,n,a,c]=R(e,t),{fadeLines:l,locations:h}=g.D.get("heatmap"),u=h.includes("gutter"),d=h.includes("line"),p=h.includes("overview"),m=`${o},${n},${a},${c}`;let f=s.get(m);return null==f?(f={decorationType:r.window.createTextEditorDecorationType({backgroundColor:d?`rgba(${o},${n},${a},${.15*c})`:void 0,opacity:l?`${t.computeOpacity(e).toFixed(2)} !important`:void 0,isWholeLine:!(!d&&!l)||void 0,gutterIconPath:u?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${o},${n},${a})' fill-opacity='${c}' x='15' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:u?"contain":void 0,overviewRulerLane:p?r.OverviewRulerLane.Center:void 0,overviewRulerColor:p?`rgba(${o},${n},${a},${.7*c})`:void 0}),rangesOrOptions:[i]},s.set(m,f)):f.rangesOrOptions.push(i),f.decorationType}function P(e,t,i,r){const n={renderOptions:{before:{...r}}};e.isUncommitted&&(n.renderOptions.before.color=r.uncommittedColor);const a=o.i.fromTemplate(t,e,i);return n.renderOptions.before.contentText=(0,f.vk)(a.replace(/ /g,s.NE.Space),1,1),n}function S(e,t,i,s,o){let n,a,c,l=0;for(const e of Object.values(o.tokenOptions))if(void 0!==e){if(null==e.truncateTo){l=-1;break}l+=e.truncateTo}if(l>=0&&(l+=(0,f.dz)((0,f.sX)(s,void 0)),l>0&&(l+=3)),t.enabled&&(n="solid",a="left"===t.location?"0 0 0 2px":"0 2px 0 0"),l>=0){const e=g.D.getAny("editor.letterSpacing");c=null!=e&&0!==e?`calc(${l}ch + ${Math.round(l*e)+(i?13:-6)}px)`:`calc(${l}ch ${i?"+ 13px":"- 6px"})`}return{backgroundColor:new r.ThemeColor("gitlens.gutterBackgroundColor"),borderStyle:n,borderWidth:a,color:new r.ThemeColor("gitlens.gutterForegroundColor"),fontWeight:"normal",fontStyle:"normal",height:"100%",margin:"0 26px -1px 0",textDecoration:`${e?"overline solid rgba(0, 0, 0, .2)":"none"};box-sizing: border-box${i?";padding: 0 0 0 18px":""}`,width:c,uncommittedColor:new r.ThemeColor("gitlens.gutterUncommittedForegroundColor")}}function D(e,t,i,n=!0){const a=o.i.fromTemplate(t,e,{...i,messageTruncateAtNewLine:!0});return{renderOptions:{after:{backgroundColor:new r.ThemeColor("gitlens.trailingLineBackgroundColor"),color:new r.ThemeColor("gitlens.trailingLineForegroundColor"),contentText:(0,f.vk)(a.replace(/ /g,s.NE.Space),1,1),fontWeight:"normal",fontStyle:"normal",textDecoration:"none;"+(n?"":" position: absolute;")}}}}function R(e,t){const i=t.computeRelativeAge(e),r=n((e.getTime()<t.coldThresholdTimestamp?t.colors.cold:t.colors.hot)[i]);return[...r??[0,0,0],null==r?0:0===i?1:i<=5?.8:.6]}},3139:(e,t,i)=>{i.d(t,{G:()=>v,P:()=>Autolinks});var r=i(9496),s=i(5255),o=i(8452),n=i(5148),a=i(7512),c=i(4241),l=i(8786),h=i(3105),u=i(4336),d=i(4627),p=Object.defineProperty,m=Object.getOwnPropertyDescriptor,g=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&p(t,i,o),o};const f=Object.freeze(new Map),w=/<num>/g;function v(e){return{provider:e.provider?{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon}:void 0,id:e.id,prefix:e.prefix,title:e.title,url:e.url,type:e.type,description:e.description}}function y(e){return!("prefix"in e)&&!("url"in e)}function b(e){return"prefix"in e&&null!=e.prefix&&"url"in e&&null!=e.url}class Autolinks{constructor(e){this.container=e,this._disposable=r.Disposable.from(n.D.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged()}_disposable;_references=[];dispose(){this._disposable?.dispose()}onConfigurationChanged(e){if(n.D.changed(e,"autolinks")){const e=n.D.get("autolinks");this._references=e?.filter((e=>e.prefix&&e.url))?.map((e=>({prefix:e.prefix,url:e.url,title:e.title,alphanumeric:e.alphanumeric,ignoreCase:e.ignoreCase,type:e.type,description:e.description})))??[]}}getAutolinks(e,t,i){const r=[];if(t?.provider?.autolinks?.length&&r.push([t.provider,t.provider.autolinks]),!this._references.length||null!=t?.provider&&i?.excludeCustom||r.push([void 0,this._references]),0===r.length)return f;const s=new Map;let o,n;for(const[t,i]of r)for(const r of i)if(b(r))for(C(r,"plaintext");;){if(o=r.messageRegex.exec(e),null==o)break;[,,,n]=o,s.set(n,{provider:t,id:n,prefix:r.prefix,url:r.url?.replace(w,n),title:r.title?.replace(w,n),type:r.type,description:r.description?.replace(w,n)})}else y(r)&&r.parse(e,s);return s}async getEnrichedAutolinks(e,t){if("string"==typeof e&&(e=this.getAutolinks(e,t)),0===e.size)return;let i;if(t?.hasRichIntegration()){({provider:i}=t);(t.provider.maybeConnected??await t.provider.isConnected())||(i=void 0)}return new Map((0,h.UI)(e,(([e,t])=>[e,[null!=i&&t.provider?.id===i.id&&t.provider?.domain===i.domain?i.getIssueOrPullRequest(e):void 0,t]])))}linkify(e,t,i,r,o,n){const a="plaintext"===t&&null==n;a&&(n=new Map);const c=new Map;for(const i of this._references)this.ensureAutolinkCached(i)&&null!=i.tokenize&&(e=i.tokenize(e,t,c,r,o,n));if(null!=i&&0!==i.length){i=[...i].sort(((e,t)=>{const i=e.provider?.maybeConnected,r=t.provider?.maybeConnected;return i!==r?i?-1:r?1:0:0}));for(const s of i)if(null!=s.provider)for(const i of s.provider.autolinks)this.ensureAutolinkCached(i)&&null!=i.tokenize&&(e=i.tokenize(e,t,c,r,o,n))}return 0!==c.size&&(e=e.replace(/(\x00\d+\x00)/g,((e,t)=>c.get(t)??t))),a&&n?.size&&(e+=`\n${s.NE.Dash.repeat(2)}\n${(0,h.v_)((0,h.UI)(n,(([e,t])=>`${(0,d.sC)(e)} ${t}`)),"\n")}`),e}ensureAutolinkCached(e){if(y(e))return!0;if(!e.prefix||!e.url)return!1;if(void 0!==e.tokenize||null===e.tokenize)return!0;try{e.tokenize=(t,i,r,n,c,h)=>{let u;switch(i){case"markdown":return C(e,i),t.replace(e.messageMarkdownRegex,((t,i,p,m)=>{const g=(0,l.M)(e.url.replace(w,m));let f="";if(e.title){f=` "${e.title.replace(w,m)}`;const t=n?.get(m)?.[0];if(null!=t?.value)if(t.paused){if(null!=h&&!c?.has(m)){let t=e.description?.replace(w,m);null==t&&(t=`Custom Autolink ${e.prefix}${m}`),u=h.size+1,h.set(u,`[${(0,o.sy)()} ${t} $(loading~spin)](${g}${f}")`)}f+=`\n${s.NE.Dash.repeat(2)}\nLoading...`}else{const e=t.value,i=(0,d.ry)(e.title.trim()),r=i.replace(/"/g,'\\"');null==h||c?.has(m)||(u=h.size+1,h.set(u,`[${(0,o.sy)(e)} **${i}**](${g}${f}")\\\n${s.NE.Space.repeat(5)}${p} ${e.state} ${(0,a.Zh)(e.closedDate??e.date)}`)),f+=`\n${s.NE.Dash.repeat(2)}\n${r}\n${(0,d.kC)(e.state)}, ${(0,a.Zh)(e.closedDate??e.date)}`}else if(null!=h&&!c?.has(m)){let t=e.description?.replace(w,m);null==t&&(t=`Custom Autolink ${e.prefix}${m}`),u=h.size+1,h.set(u,`[${(0,o.sy)()} ${t}](${g}${f}")`)}f+='"'}const v=`\0${r.size}\0`;return r.set(v,`[${p}](${g}${f})`),`${i}${v}`}));case"html":return C(e,i),t.replace(e.messageHtmlRegex,((t,i,p,m)=>{const g=(0,l.M)(e.url.replace(w,m));let f="";if(e.title){f=`"${(0,d.se)(e.title.replace(w,m))}`;const t=n?.get(m)?.[0];if(null!=t?.value)if(t.paused){if(null!=h&&!c?.has(m)){let t=e.description?.replace(w,m);null==t&&(t=`Custom Autolink ${e.prefix}${m}`),u=h.size+1,h.set(u,`<a href="${g}" title=${f}>${(0,o.Ty)()} ${t}</a>`)}f+=`\n${s.NE.Dash.repeat(2)}\nLoading...`}else{const e=t.value,i=(0,d.se)(e.title.trim()),r=i.replace(/"/g,"&quot;");null==h||c?.has(m)||(u=h.size+1,h.set(u,`<a href="${g}" title=${f}>${(0,o.Ty)(e)} <b>${i}</b></a><br /><span>${s.NE.Space.repeat(5)}${p} ${e.state} ${(0,a.Zh)(e.closedDate??e.date)}</span>`)),f+=`\n${s.NE.Dash.repeat(2)}\n${r}\n${(0,d.kC)(e.state)}, ${(0,a.Zh)(e.closedDate??e.date)}`}else if(null!=h&&!c?.has(m)){let t=e.description?.replace(w,m);null==t&&(t=`Custom Autolink ${e.prefix}${m}`),u=h.size+1,h.set(u,`<a href="${g}" title=${f}>${(0,o.Ty)()} ${t}</a>`)}f+='"'}const v=`\0${r.size}\0`;return r.set(v,`<a href="${g}" title=${f}>${p}</a>`),`${i}${v}`}));default:return C(e,i),t.replace(e.messageRegex,((e,t,i,o)=>{const l=n?.get(o)?.[0];if(null==l?.value)return i;null==h||c?.has(o)||(u=h.size+1,h.set(u,`${i}: ${l.paused?"Loading...":`${l.value.title}  ${s.NE.Dot}  ${(0,d.kC)(l.value.state)}, ${(0,a.Zh)(l.value.closedDate??l.value.date)}`}`));const p=`\0${r.size}\0`;return r.set(p,`${i}${(0,d.sC)(u)}`),`${t}${p}`}))}}}catch(t){u.Yd.error(t,`Failed to create autolink generator: prefix=${e.prefix}, url=${e.url}, title=${e.title}`),e.tokenize=null}return!0}}function C(e,t){return"markdown"===t&&null==e.messageMarkdownRegex?e.messageMarkdownRegex=new RegExp(`(^|\\s|\\(|\\[|\\{)(${(0,d.yI)((0,d.se)((0,d.ry)(e.prefix)))}(${e.alphanumeric?"\\w":"\\d"}+))\\b`,e.ignoreCase?"gi":"g"):"html"===t&&null==e.messageHtmlRegex?e.messageHtmlRegex=new RegExp(`(^|\\s|\\(|\\[|\\{)(${(0,d.yI)((0,d.se)(e.prefix))}(${e.alphanumeric?"\\w":"\\d"}+))\\b`,e.ignoreCase?"gi":"g"):null==e.messageRegex&&(e.messageRegex=new RegExp(`(^|\\s|\\(|\\[|\\{)(${(0,d.yI)(e.prefix)}(${e.alphanumeric?"\\w":"\\d"}+))\\b`,e.ignoreCase?"gi":"g")),!0}g([(0,c.fF)({args:{0:"<message>",1:!1}})],Autolinks.prototype,"getAutolinks",1),g([(0,c.fF)({args:{0:e=>"string"==typeof e?"<message>":`autolinks=${e.size}`,1:e=>e?.remoteKey}})],Autolinks.prototype,"getEnrichedAutolinks",1),g([(0,c.fF)({args:{0:"<text>",2:e=>e?.length,3:e=>e?.size,4:e=>e?.size}})],Autolinks.prototype,"linkify",1)},623:(e,t,i)=>{i.d(t,{I:()=>p,f:()=>FileAnnotationController});var r=i(9496),s=i(5148),o=i(2061),n=i(2185),a=i(9796),c=i(3105),l=i(4336),h=i(3700),u=i(2509),d=i(2022);const p={gutterBlameAnnotation:r.window.createTextEditorDecorationType({rangeBehavior:r.DecorationRangeBehavior.ClosedOpen,textDecoration:"none"}),gutterBlameHighlight:void 0,changesLineChangedAnnotation:void 0,changesLineAddedAnnotation:void 0,changesLineDeletedAnnotation:void 0};class FileAnnotationController{constructor(e){this.container=e,this._disposable=r.Disposable.from((0,n.IH)(e.onReady)(this.onReady,this),s.D.onDidChange(this.onConfigurationChanged,this),r.window.onDidChangeActiveColorTheme(this.onThemeChanged,this)),this._toggleModes=new Map}_onDidToggleAnnotations=new r.EventEmitter;get onDidToggleAnnotations(){return this._onDidToggleAnnotations.event}_annotationsDisposable;_annotationProviders=new Map;_disposable;_editor;_keyboardScope=void 0;_toggleModes;_windowAnnotationType=void 0;dispose(){this.clearAll(),p.gutterBlameAnnotation?.dispose(),p.gutterBlameHighlight?.dispose(),p.changesLineChangedAnnotation?.dispose(),p.changesLineAddedAnnotation?.dispose(),p.changesLineDeletedAnnotation?.dispose(),this._annotationsDisposable?.dispose(),this._disposable?.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){const t=null==e;let i;if(s.D.changed(e,["blame.highlight","changes.locations"])&&this.updateDecorations(!1),s.D.changed(e,"blame.toggleMode")&&(i=s.D.get("blame.toggleMode"),this._toggleModes.set("blame",i),t||"file"!==i||this.clearAll()),s.D.changed(e,"changes.toggleMode")&&(i=s.D.get("changes.toggleMode"),this._toggleModes.set("changes",i),t||"file"!==i||this.clearAll()),s.D.changed(e,"heatmap.toggleMode")&&(i=s.D.get("heatmap.toggleMode"),this._toggleModes.set("heatmap",i),t||"file"!==i||this.clearAll()),!t&&s.D.changed(e,["blame","changes","heatmap","hovers","defaultDateFormat","defaultDateSource","defaultDateStyle","defaultGravatarsStyle"]))for(const e of this._annotationProviders.values())null!=e&&this.show(e.editor,e.annotationType??"blame")}onThemeChanged(e){this.updateDecorations(!0)}async onActiveTextEditorChanged(e){if(null!=e&&!(0,u.PH)(e))return;if(this._editor=e,this.isInWindowToggle())return void await this.show(e,this._windowAnnotationType);const t=this.getProvider(e);null==t?((0,o.v)("gitlens:annotationStatus",void 0),this.detachKeyboardHook()):((0,o.v)("gitlens:annotationStatus",t.status),this.attachKeyboardHook())}onBlameStateChanged(e){if(e.blameable)return;const t=r.window.activeTextEditor;null!=t&&this.clear(t,"BlameabilityChanged")}onDirtyStateChanged(e){for(const[t,i]of this._annotationProviders)e.document.is(i.document)&&this.clearCore(t,"DocumentChanged")}onTextDocumentClosed(e){if(this.container.git.isTrackable(e.uri))for(const[t,i]of this._annotationProviders)i.document===e&&this.clearCore(t,"DocumentClosed")}onTextEditorViewColumnChanged(e){const t=this.getProvider(e.textEditor);if(null!=t)t.restore(e.textEditor);else{const t=(0,c.sE)(this._annotationProviders.values(),(t=>t.editor.document===e.textEditor.document));if(null==t)return;this.clearCore(t.correlationKey,"ColumnChanged")}}onVisibleTextEditorsChanged(e){for(const t of e)this.getProvider(t)?.restore(t)}isInWindowToggle(){return"window"===this.getToggleMode(this._windowAnnotationType)}getToggleMode(e){return null==e?"file":this._toggleModes.get(e)??"file"}clear(e,t="User"){return this.isInWindowToggle()?this.clearAll():this.clearCore((0,d.m)(e),t)}async clearAll(){this._windowAnnotationType=void 0;for(const[e]of this._annotationProviders)await this.clearCore(e,"Disposing")}async getAnnotationType(e){const t=this.getProvider(e);if(null==t)return;const i=await this.container.tracker.get(e.document);return null!=i&&i.isBlameable?t.annotationType:void 0}getProvider(e){if(null!=e?.document)return this._annotationProviders.get((0,d.m)(e))}async show(e,t,i){if("window"===this.getToggleMode(t)){let i=null==this._windowAnnotationType;const s=!i&&this._windowAnnotationType!==t;if(this._windowAnnotationType=t,s&&(await this.clearAll(),i=!0),i)for(const i of r.window.visibleTextEditors)i!==e&&this.show(i,t)}if(null==e)return!1;this._editor=e;if(!(await this.container.tracker.getOrAdd(e.document)).isBlameable)return!1;const s=this.getProvider(e);if(s?.annotationType===t)return await s.provideAnnotation(i),await s.selection(i?.selection),!0;return null!=await r.window.withProgress({location:r.ProgressLocation.Window},(async r=>{await(0,o.v)("gitlens:annotationStatus","computing");const n=this.showAnnotationsCore(s,e,t,i,r),a=await n;return e===this._editor&&await(0,o.v)("gitlens:annotationStatus",a?.status),n}))}async toggle(e,t,i,r){if(null!=e&&"file"===this._toggleModes.get(t)){const i=await this.container.tracker.getOrAdd(e.document);if("changes"===t&&!i.isTracked||!i.isBlameable)return!1}const s=this.getProvider(e);if(null==s)return this.show(e,t,i);const o=s.annotationType!==t||s.mustReopen(i);return!0===r&&!o||(this.isInWindowToggle()?await this.clearAll():await this.clearCore(s.correlationKey,"User"),!!o&&this.show(e,t,i))}async attachKeyboardHook(){null==this._keyboardScope&&(this._keyboardScope=await this.container.keyboard.beginScope({escape:{onDidPressKey:async()=>{const e=this._editor;null!=e&&await this.clear(e,"User")}}}))}async clearCore(e,t){const i=this._annotationProviders.get(e);null!=i&&(l.Yd.log(`${t}:`,`Clear annotations for ${e}`),this._annotationProviders.delete(e),i.dispose(),0!==this._annotationProviders.size&&e!==(0,d.m)(this._editor)||(await(0,o.v)("gitlens:annotationStatus",void 0),await this.detachKeyboardHook()),0===this._annotationProviders.size&&(l.Yd.log("Remove all listener registrations for annotations"),this._annotationsDisposable?.dispose(),this._annotationsDisposable=void 0),this._onDidToggleAnnotations.fire())}async detachKeyboardHook(){null!=this._keyboardScope&&(await this._keyboardScope.dispose(),this._keyboardScope=void 0)}async showAnnotationsCore(e,t,s,o,n){if(null!=n){let e="annotations";switch(s){case"blame":e="blame annotations";break;case"changes":e="changes annotations";break;case"heatmap":e="heatmap annotations"}n.report({message:`Computing ${e} for ${(0,h.EZ)(t.document.fileName)}`})}await this.attachKeyboardHook();const c=await this.container.tracker.getOrAdd(t.document);let u;switch(s){case"blame":{const{GutterBlameAnnotationProvider:e}=await i.e(519).then(i.bind(i,4455));u=new e(t,c,this.container);break}case"changes":{const{GutterChangesAnnotationProvider:e}=await i.e(817).then(i.bind(i,34));u=new e(t,c,this.container);break}case"heatmap":{const{GutterHeatmapBlameAnnotationProvider:e}=await i.e(278).then(i.bind(i,79));u=new e(t,c,this.container);break}}if(null!=u&&await u.validate()){if(null!=e&&await this.clearCore(e.correlationKey,"User"),null==this._annotationsDisposable&&0===this._annotationProviders.size&&(l.Yd.log("Add listener registrations for annotations"),this._annotationsDisposable=r.Disposable.from(r.window.onDidChangeActiveTextEditor((0,a.Ds)(this.onActiveTextEditorChanged,50),this),r.window.onDidChangeTextEditorViewColumn(this.onTextEditorViewColumnChanged,this),r.window.onDidChangeVisibleTextEditors((0,a.Ds)(this.onVisibleTextEditorsChanged,50),this),r.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this),this.container.tracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.container.tracker.onDidChangeDirtyState(this.onDirtyStateChanged,this))),this._annotationProviders.set(u.correlationKey,u),await u.provideAnnotation(o))return this._onDidToggleAnnotations.fire(),u;await this.clearCore(u.correlationKey,"Disposing")}}updateDecorations(e){const t=e?Object.entries(p):void 0;if(this.updateHighlightDecoration(),this.updateChangedDecorations(),!e)return;const i=new Map;for(const[e,r]of t){if(null==r)continue;r!==(p[e]??null)&&i.set(r,p[e]??null)}if(0!==i.size)for(const e of r.window.visibleTextEditors)this.getProvider(e)?.refresh(i)}updateChangedDecorations(){p.changesLineAddedAnnotation?.dispose(),p.changesLineChangedAnnotation?.dispose(),p.changesLineDeletedAnnotation?.dispose();const e=s.D.get("changes.locations");let t,i,o;switch(r.window.activeColorTheme.kind){case r.ColorThemeKind.Light:t=[72,152,93],i=[32,144,211],o=[229,20,0];break;case r.ColorThemeKind.HighContrast:default:t=[72,126,2],i=[27,129,168],o=[241,76,76]}p.changesLineAddedAnnotation=r.window.createTextEditorDecorationType({backgroundColor:e.includes("line")?`rgba(${t.join(",")},0.4)`:void 0,isWholeLine:!!e.includes("line")||void 0,gutterIconPath:e.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${t.join(",")})' x='15' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:r.OverviewRulerLane.Left,overviewRulerColor:e.includes("overview")?new r.ThemeColor("editorOverviewRuler.addedForeground"):void 0}),p.changesLineChangedAnnotation=r.window.createTextEditorDecorationType({backgroundColor:e.includes("line")?`rgba(${i.join(",")},0.4)`:void 0,isWholeLine:!!e.includes("line")||void 0,gutterIconPath:e.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${i.join(",")})' x='15' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:r.OverviewRulerLane.Left,overviewRulerColor:e.includes("overview")?new r.ThemeColor("editorOverviewRuler.modifiedForeground"):void 0}),p.changesLineDeletedAnnotation=r.window.createTextEditorDecorationType({gutterIconPath:e.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><polygon fill='rgb(${o.join(",")})' points='13,10 13,18 17,14'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:r.OverviewRulerLane.Left,overviewRulerColor:e.includes("overview")?new r.ThemeColor("editorOverviewRuler.deletedForeground"):void 0})}updateHighlightDecoration(){p.gutterBlameHighlight?.dispose(),p.gutterBlameHighlight=void 0;const e=s.D.get("blame.highlight");if(e.enabled){const{locations:t}=e,i="#00bcf2",s=t.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='${i}' fill-opacity='0.6' x='7' y='0' width='3' height='18'/></svg>`)}`):void 0;p.gutterBlameHighlight=r.window.createTextEditorDecorationType({gutterIconPath:s,gutterIconSize:"contain",isWholeLine:!0,overviewRulerLane:r.OverviewRulerLane.Right,backgroundColor:t.includes("line")?new r.ThemeColor("gitlens.lineHighlightBackgroundColor"):void 0,overviewRulerColor:t.includes("overview")?new r.ThemeColor("gitlens.lineHighlightOverviewRulerColor"):void 0})}}}},8294:(e,t,i)=>{i.d(t,{AR:()=>ActionRunners,vj:()=>u});var r=i(9496),s=i(5255),o=i(9529),n=i(5148),a=i(2061),c=i(4627),l=i(2509);const h=["createPullRequest","openPullRequest","hover.commands"];const u="Built In";class ActionRunnerQuickPickItem{constructor(e,t){this.runner=e,this._label="string"==typeof e.label?e.label:e.label(t)}_label;get label(){return this._label}get detail(){return this.runner.name}}class NoActionRunnersQuickPickItem{runner;get label(){return"No actions were found"}get detail(){}}let d=0;class RegisteredActionRunner{constructor(e,t,i){this.type=e,this.runner=t,this.unregister=i,this.id=(1073741824===d?d=1:d++,d)}id;dispose(){this.unregister()}get name(){return this.runner.name}get label(){return this.runner.label}get order(){switch(this.type){case 0:return 0;case 1:return 1;case 2:return this.partnerId?1:2;case 3:return 3;default:return 100}}get partnerId(){return this.runner.partnerId}run(e){return this.runner.run(e)}}class ActionRunners{constructor(e){this.container=e;const t=[n.D.onDidChange((e=>{n.D.changed(e,"partners")&&this._updateAllContextKeys()}))];for(const e of h)t.push((0,o.xR)(`${s.Gh.ActionPrefix}${e}`,((e,t)=>this.run(e,t))));this._disposable=r.Disposable.from(...t)}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}_actionRunners=new Map;_disposable;dispose(){this._disposable.dispose();for(const e of this._actionRunners.values())for(const t of e)t.dispose();this._actionRunners.clear()}count(e){return this.get(e)?.length??0}get(e){return t=n.D.get("partners"),null==(i=this._actionRunners.get(e))||0===i.length?void 0:null==t?i:i.filter((e=>null==e.partnerId||null!=e.partnerId&&!1!==t[e.partnerId]?.enabled));var t,i}has(e){return this.count(e)>0}register(e,t,i=2){let r=this._actionRunners.get(e);null==r&&(r=[],this._actionRunners.set(e,r));const s=e=>{this._updateContextKeys(e),this._onDidChange.fire(e)},o=this._actionRunners,n=new RegisteredActionRunner(i,t,(function(){if(1===r.length)o.delete(e),s(e);else{const e=r.indexOf(this);-1!==e&&r.splice(e,1)}}));return r.push(n),s(e),{dispose:()=>n.dispose()}}registerBuiltIn(e,t){return this.register(e,{...t,partnerId:void 0,name:u},0)}registerBuiltInPartner(e,t,i){return this.register(t,{...i,partnerId:e},1)}registerBuiltInPartnerInstaller(e,t,i){return this.register(t,{...i,partnerId:e,name:`${i.name} (Not Installed)`},3)}async run(e,t){let i,s=this.get(e.type);if(null!=s&&0!==s.length&&(null!=t&&(s=s.filter((e=>e.id===t))),0!==s.length)){if(s.length>1||s.every((e=>0!==e.type))){const t=s.sort(((e,t)=>e.order-t.order||(0,c.dm)(e.name,t.name))).map((t=>new ActionRunnerQuickPickItem(t,e)));0===t.length&&t.push(new NoActionRunnersQuickPickItem);const o=r.window.createQuickPick();o.ignoreFocusOut=(0,l.hE)();const n=[];try{const r=await new Promise((i=>{let r,s;switch(n.push(o.onDidHide((()=>i(void 0))),o.onDidAccept((()=>{0!==o.activeItems.length&&i(o.activeItems[0])}))),e.type){case"createPullRequest":r="Create Pull Request",s="Choose how to create a pull request";break;case"openPullRequest":r="Open Pull Request",s="Choose how to open the pull request";break;case"hover.commands":r="Need Help or Want to Collaborate?",s="Choose what you would like to do"}o.title=r,o.placeholder=s,o.matchOnDetail=!0,o.items=t,o.show()}));if(null==r)return;i=r.runner}finally{o.dispose(),n.forEach((e=>{e.dispose()}))}}else[i]=s;await(i?.run(e))}}async _updateContextKeys(e){await(0,a.v)(`gitlens:action:${e}`,this.count(e))}async _updateAllContextKeys(){for(const e of h)await this._updateContextKeys(e)}}},8388:(e,t,i)=>{i.d(t,{E3:()=>x,GV:()=>$,TU:()=>T,Wr:()=>O,cL:()=>f,oP:()=>A,x4:()=>k});var r=i(9496),s=i(3951),o=i(3599),n=i(2075),a=i(5148),c=i(2061),l=i(9796),h=i(3105),u=i(4627);const d=2**30;let p;const m=new Map,g=new r.EventEmitter;g.event((0,l.Ds)((()=>{const e=null!=p?[...(0,h.DZ)(p,(([e,t])=>null!=t.uri?[e,{uri:t.uri.toString(),timestamp:t.timestamp}]:void 0))]:void 0;o.W.instance.storage.store("avatars",e)}),1e3));const f=g.event,w="00000000000000000000000000000000",v=new Map,y=6e4,b=864e5,C=[6048e5,y,3e5,6e5,36e5,b,6048e5];function A(e,t,i){return P(e,t,i)}function k(e,t){return P(e,void 0,{...t,cached:!0})}function P(e,t,i){D(p);const n=2*(i?.size??16);if(!e){const e=S(`${w}:${n}`,void 0,n,w,i?.defaultStyle);return e.uri??e.fallback}const a=(0,s.FB)(e.trim().toLowerCase()),l=`${a}:${n}`,h=S(l,e,n,a,i?.defaultStyle);if(null!=h.uri)return h.uri;if(!i?.cached&&null!=t&&(0,c.fw)("gitlens:hasConnectedRemotes")){let i=m.get(l);return null==i&&function(e){return Date.now()>=e.timestamp+C[Math.min(e.retries,C.length-1)]}(h)&&(i=async function(e,t,i,n,{size:a=16}={}){D(p);try{let t;if("string"!=typeof n){const e=await o.W.instance.git.getBestRemoteWithRichProvider(n.repoPath);t=await(e?.provider.getAccountForCommit(n.ref,{avatarSize:a}))}return null==t?.avatarUrl?(e.uri=void 0,e.timestamp=d,void(e.retries=0)):(e.uri=r.Uri.parse(t.avatarUrl),e.timestamp=Date.now(),e.retries=0,null!=t.email&&(0,u.qq)(i,t.email)&&p.set(`${(0,s.FB)(t.email.trim().toLowerCase())}:${a}`,{...e}),g.fire({email:i}),e.uri)}catch{return e.uri=void 0,e.timestamp=Date.now(),void e.retries++}}(h,0,e,t,{size:n}).then((e=>e??h.uri??h.fallback)),m.set(l,i.finally((()=>m.delete(l))))),i??h.fallback}return i?.cached?h.uri:h.uri??h.fallback}function S(e,t,i,r,s){let o=p.get(e);return null==o?(o={uri:null!=t&&0!==t.length?_(t,i):void 0,fallback:R(r,i,s),timestamp:0,retries:0},p.set(e,o)):null==o.fallback&&(o.fallback=R(r,i,s)),o}function D(e){if(null==e){const e=o.W.instance.storage.get("avatars")?.map((([e,t])=>[e,{uri:r.Uri.parse(t.uri),timestamp:t.timestamp,retries:0}]));p=new Map(e)}}function R(e,t,i){return r.Uri.parse(`https://www.gravatar.com/avatar/${e}?s=${t}&d=${i??function(){null==I&&(I=a.D.get("defaultGravatarsStyle",void 0,"robohash"));return I}()}`)}function $(e,t,i){return R((0,s.FB)(e.trim().toLowerCase()),t,i)}function _(e,t=16){const i=(0,n.at)(e);if(null!=i&&(0,u.qq)(i.authority,"github.com"))return r.Uri.parse(`https://avatars.githubusercontent.com/${i.userId?`u/${i.userId}`:i.login}?size=${t}`)}const F=new Map([["online","#28ca42"],["away","#cecece"],["busy","#ca5628"],["dnd","#ca5628"],["offline","#cecece"]]);function T(e){let t=v.get(e);if(null==t){const i=(0,u.US)(`<?xml version="1.0" encoding="utf-8"?>\n<svg xmlns="http://www.w3.org/2000/svg" width="4" height="16" viewBox="0 0 4 16">\n\t<circle cx="2" cy="14" r="2" fill="${F.get(e)}"/>\n</svg>`);t=encodeURI(`data:image/svg+xml;base64,${i}`),v.set(e,t)}return t}function x(e){switch(e){case"all":o.W.instance.storage.delete("avatars"),p?.clear(),m.clear();break;case"failed":for(const e of p?.values()??[])null==e.uri&&(e.timestamp=0,e.retries=0);break;case"fallback":for(const e of p?.values()??[])e.fallback=void 0}}let I;function O(e){I=e,x("fallback")}},7139:(e,t,i)=>{i.d(t,{Bu:()=>$,C$:()=>P,DW:()=>k,E9:()=>y,F4:()=>A,Lk:()=>ActiveEditorCachedCommand,Mg:()=>v,O$:()=>C,P:()=>T,Qo:()=>f,SX:()=>m,_5:()=>R,_l:()=>EditorCommand,d$:()=>b,en:()=>w,jT:()=>g,l7:()=>D,l8:()=>I,mY:()=>Command,pT:()=>S,pu:()=>ActiveEditorCommand});var r=i(9496),s=i(5367),o=i(6450),n=i(1719),a=i(3050),c=i(3646),l=i(9502),h=i(1907),u=i(9529),d=i(9796),p=i(6922);function m(e,t){return t?.document?.uri??e}function g(e){return"timeline-item:git"===e.type}function f(e){return"viewItem"===e.type&&(0,s.BF)(e.node.branch)}function w(e){return"viewItem"===e.type&&(0,o.f_)(e.node.commit)}function v(e){return"viewItem"===e.type&&n.V.is(e.node.contributor)}function y(e){if("viewItem"!==e.type)return!1;const t=e.node;return null!=t.file&&(null!=t.file.repoPath||null!=t.repoPath)}function b(e){if("viewItem"!==e.type)return!1;const t=e.node;return null!=t.file&&(0,o.f_)(t.commit)&&(null!=t.file.repoPath||null!=t.repoPath)}function C(e){if("viewItem"!==e.type)return!1;const t=e.node;return null!=t.file&&null!=t.ref1&&null!=t.ref2&&(null!=t.file.repoPath||null!=t.repoPath)}function A(e){return"viewItem"===e.type&&("string"==typeof e.node.compareRef?.ref&&"string"==typeof e.node.compareWithRef?.ref)}function k(e){return"viewItem"===e.type&&e.node instanceof p.bT&&e.node instanceof p.RW}function P(e){return"viewItem"===e.type&&a.ss.is(e.node.remote)}function S(e){return"viewItem"===e.type&&e.node.repo instanceof c._j}function D(e){return"viewItem"===e.type&&"string"==typeof e.node.repoPath}function R(e){return"viewItem"===e.type&&(0,l.YR)(e.node.tag)}function $(e){if("viewItem"!==e.type)return!1;const t=e.node.workspace;return t instanceof h.CH||t instanceof h.qP}function _(e){return null!=e&&(null!=e.id&&null!=e.label&&null!=e.resourceStates&&Array.isArray(e.resourceStates))}function F(e){return null!=e&&null!=e.resourceUri}class Command{static getMarkdownCommandArgsCore(e,t){return`command:${e}?${encodeURIComponent(JSON.stringify(t))}`}contextParsingOptions={expectsEditor:!1};_disposable;constructor(e){if("string"==typeof e)return void(this._disposable=(0,u.xR)(e,((...t)=>this._execute(e,...t)),this));const t=e.map((e=>(0,u.xR)(e,((...t)=>this._execute(e,...t)),this)));this._disposable=r.Disposable.from(...t)}dispose(){this._disposable.dispose()}preExecute(e,...t){return this.execute(...t)}_execute(e,...t){const[i,r]=T(e,{...this.contextParsingOptions},...t);return Array.isArray(i)?(0,d.df)(this.preExecute,i.map((e=>[e,...r])),this):this.preExecute(i,...r)}}function T(e,t,...i){let s,o=i[0];if(t?.expectsEditor)if((null==o||null!=o.id&&null!=o.document?.uri)&&(s=o,o=(i=i.slice(1))[0]),i.length>0&&(null==o||o instanceof r.Uri)){const[t,...o]=i;if(null!=t){null!=s||t.toString()!==r.window.activeTextEditor?.document.uri.toString()&&!e.endsWith("InDiffLeft")||(s=r.window.activeTextEditor);const i=o[0];return null!=i&&Array.isArray(i)&&0!==i.length&&i[0]instanceof r.Uri?[{command:e,type:"uris",editor:s,uri:t,uris:i},o.slice(1)]:[{command:e,type:"uri",editor:s,uri:t},o]}i=i.slice(1)}else if(null==s){if(null!=o&&"object"==typeof o&&"lineNumber"in o&&"uri"in o){const[,...t]=i;return[{command:e,type:"editorLine",editor:void 0,line:o.lineNumber-1,uri:o.uri},t]}s=r.window.activeTextEditor}if(o instanceof p.Re){let[t,...r]=i;if(o=r[0],Array.isArray(o)&&o[0]instanceof p.Re){let i;[i,...r]=r;const s=[];for(const r of i)r?.constructor===t.constructor&&s.push({command:e,type:"viewItem",node:r,uri:r.uri});return[s,r]}return[{command:e,type:"viewItem",node:t,uri:t.uri},r]}if(F(o)){const t=[];let r=0;for(const e of i){if(!F(e))break;r++,t.push(e)}return[{command:e,type:"scm-states",scmResourceStates:t,uri:t[0].resourceUri},i.slice(r)]}if(_(o)){const t=[];let r=0;for(const e of i){if(!_(e))break;r++,t.push(e)}return[{command:e,type:"scm-groups",scmResourceGroups:t},i.slice(r)]}if(null!=(n=o)&&function(e){return null!=e&&null!=e.timestamp&&null!=e.label}(n)&&null!=n.ref&&null!=n.previousRef&&null!=n.message){const[t,r,...s]=i;return[{command:e,type:"timeline-item:git",item:t,uri:r},s]}var n,a;if(null!=(a=o)&&null!=a.id&&null!=a.rootUri&&null!=a.inputBox&&null!=a.statusBarCommands){const[t,...r]=i;return[{command:e,type:"scm",scm:t},r]}return[{command:e,type:"unknown",editor:s,uri:s?.document.uri},i]}class ActiveEditorCommand extends Command{contextParsingOptions={expectsEditor:!0};preExecute(e,...t){return this.execute(e.editor,e.uri,...t)}_execute(e,...t){return super._execute(e,void 0,...t)}}let x;function I(){return x}class ActiveEditorCachedCommand extends ActiveEditorCommand{_execute(e,...t){return x={command:e,args:t},super._execute(e,...t)}}class EditorCommand{_disposable;constructor(e){Array.isArray(e)||(e=[e]);const t=[];for(const i of e)t.push(r.commands.registerTextEditorCommand(i,((e,t,...r)=>this.executeCore(i,e,t,...r)),this));this._disposable=r.Disposable.from(...t)}dispose(){this._disposable.dispose()}executeCore(e,t,i,...r){return this.execute(t,i,...r)}}},1848:(e,t,i)=>{i.d(t,{V:()=>g});var r=i(9496),s=i(5255),o=i(6450),n=i(439),a=i(4321),c=i(7925),l=i(9529),h=i(4336),u=i(3700),d=i(7139),p=Object.defineProperty,m=Object.getOwnPropertyDescriptor;let g=class extends d.mY{constructor(e){super(s.Gh.DiffWith),this.container=e}static getMarkdownCommandArgs(e,t){let i;if((0,o.f_)(e)){const r=e;if(null==r.file||null==r.unresolvedPreviousSha)throw new Error("Commit has no file");i=r.isUncommitted?{repoPath:r.repoPath,lhs:{sha:"HEAD",uri:r.file.uri},rhs:{sha:"",uri:r.file.uri},line:t}:{repoPath:r.repoPath,lhs:{sha:r.unresolvedPreviousSha,uri:r.file.originalUri??r.file.uri},rhs:{sha:r.sha,uri:r.file.uri},line:t}}else i=e;return super.getMarkdownCommandArgsCore(s.Gh.DiffWith,i)}async execute(e){if(null!=e?.lhs&&null!=e?.rhs&&null!=(e={...e,lhs:{...e.lhs},rhs:{...e.rhs},showOptions:null==e.showOptions?void 0:{...e.showOptions}}).repoPath)try{let t=e.lhs.sha,i=e.rhs.sha;if([e.lhs.sha,e.rhs.sha]=await Promise.all([await this.container.git.resolveReference(e.repoPath,e.lhs.sha,e.lhs.uri,{timeout:(0,a.yo)(e.lhs.sha)?100:void 0}),await this.container.git.resolveReference(e.repoPath,e.rhs.sha,e.rhs.uri,{timeout:(0,a.yo)(e.rhs.sha)?100:void 0})]),e.lhs.sha!==n.Ii&&(t=e.lhs.sha),e.rhs.sha&&e.rhs.sha!==n.Ii){const t=await this.container.git.getFileStatusForCommit(e.repoPath,e.rhs.uri,e.rhs.sha);"D"===t?.status?e.rhs.sha=n.Ii:i=e.rhs.sha,"A"===t?.status&&e.lhs.sha.endsWith("^")&&(e.lhs.sha=n.Ii)}const[o,c]=await Promise.all([this.container.git.getBestRevisionUri(e.repoPath,e.lhs.uri.fsPath,e.lhs.sha),this.container.git.getBestRevisionUri(e.repoPath,e.rhs.uri.fsPath,e.rhs.sha)]);let h=(0,a.zL)(i,{strings:{uncommitted:"Working Tree"}});null==c?h=(0,a.l3)(e.rhs.sha)?"deleted":0===h.length&&e.rhs.sha===n.Ii?"not in Working Tree":"deleted"+(0===h.length?"":` in ${h}`):null==o&&(h="added"+(0===h.length?"":` in ${h}`));let d=e.lhs.sha!==n.Ii?(0,a.zL)(t):"";null==o&&0===e.rhs.sha.length&&(null!=c?(d=0===d.length?"":`not in ${d}`,h=""):d="deleted"+(0===d.length?"":` in ${d}`)),null!=e.lhs.title||null==o&&0===d.length||(e.lhs.title=`${(0,u.EZ)(e.lhs.uri.fsPath)}${d?` (${d})`:""}`),null==e.rhs.title&&(e.rhs.title=`${(0,u.EZ)(e.rhs.uri.fsPath)}${h?` (${h})`:""}`);const p=null!=e.lhs.title&&null!=e.rhs.title?`${e.lhs.title} ${s.NE.ArrowLeftRightLong} ${e.rhs.title}`:e.lhs.title??e.rhs.title;null==e.showOptions&&(e.showOptions={}),null==e.showOptions.viewColumn&&(e.showOptions.viewColumn=r.ViewColumn.Active),null!=e.line&&0!==e.line&&(e.showOptions.selection=new r.Range(e.line,0,e.line,0)),await(0,l.dO)("vscode.diff",o??this.container.git.getRevisionUri(n.Ii,e.lhs.uri.fsPath,e.repoPath),c??this.container.git.getRevisionUri(n.Ii,e.rhs.uri.fsPath,e.repoPath),p,e.showOptions)}catch(e){h.Yd.error(e,"DiffWithCommand","getVersionedFile"),(0,c.W8)("Unable to open compare")}}};g=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&p(t,i,o),o})([(0,l.WD)()],g)},2967:(e,t,i)=>{i.d(t,{K:()=>PickCommandStep,I:()=>le});var r=i(5148),s=i(2061),o=i(9496),n=i(4321),a=i(3646);function c(e,t,i,r){return{...i,item:t,picked:l(e,t),context:r}}function l(e,t){return void 0===t?0===e.length:Array.isArray(t)?0===t.length?0===e.length:t.every((t=>e.includes(t))):e.includes(t)}var h=i(4627),u=i(4239),d=i(847);function p(e){if(!(e.repo instanceof a._j&&"create"===e.subcommand))throw new Error("Missing repository")}function m(e){if(!(e.repo instanceof a._j&&"delete"===e.subcommand))throw new Error("Missing repository")}function g(e){if(!(e.repo instanceof a._j&&"rename"===e.subcommand))throw new Error("Missing repository")}function f(e){if(!Array.isArray(e.references))throw new Error("Missing branches")}const w=new Map([["create","Create"],["delete","Delete"],["rename","Rename"]]);function v(e,t){return null==t?e:`${w.get(t)} ${e}`}class BranchGitCommand extends u.tR{subcommand;constructor(e,t){super(e,"branch","branch","Branch",{description:"create, rename, or delete branches"});let i=0;if(null!=t?.state?.subcommand)switch(i++,t?.state.subcommand){case"create":case"rename":null!=t.state.reference&&i++,null!=t.state.name&&i++;break;case"delete":null==t.state.references||Array.isArray(t.state.references)&&0===t.state.references.length||i++}null!=t?.state?.repo&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"delete"!==this.subcommand&&"rename"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async*steps(e){const t={associatedView:this.container.branchesView,repos:this.container.git.openRepositories,showTags:!1,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;const t=yield*this.pickSubcommandStep(e);if(t===u.Vd)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=v("delete"===e.subcommand?"Branches":this.title,e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)continue;e.repo=i}switch(e.subcommand){case"create":p(e),yield*this.createCommandSteps(e,t),e.name=void 0;break;case"delete":m(e),yield*this.deleteCommandSteps(e,t);break;case"rename":g(e),yield*this.renameCommandSteps(e,t),e.name=void 0;break;default:(0,u.uZ)(e)}i&&e.counter--}return e.counter<0?u.Vd:void 0}*pickSubcommandStep(e){const t=(0,u.xf)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"create",description:"creates a new branch",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified branches",picked:"delete"===e.subcommand,item:"delete"},{label:"rename",description:"renames the specified branch",picked:"rename"===e.subcommand,item:"rename"}],buttons:[o.QuickInputButtons.Back]}),i=yield t;return(0,u.i9)(t,e,i)?i[0].item:u.Vd}async*createCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*(0,d.Yv)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to create the new branch from`,picked:e.reference?.ref??(await e.repo.getBranch())?.ref,titleContext:" from",value:(0,n.FT)(e.reference)?e.reference.ref:void 0});if(i===u.Vd)break;e.reference=i}if(e.counter<4||null==e.name){const i=yield*(0,d.f6)(e,t,{placeholder:"Please provide a name for the new branch",titleContext:` from ${(0,n.Wh)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,value:e.name??(0,n.Av)(e.reference)});if(i===u.Vd)continue;e.name=i}if(this.confirm(e.confirm)){const i=yield*this.createCommandConfirmStep(e,t);if(i===u.Vd)continue;e.flags=i}(0,u.uZ)(e),e.flags.includes("--switch")?await e.repo.switch(e.reference.ref,{createBranch:e.name}):e.repo.branch(...e.flags,e.name,e.reference.ref)}}*createCommandConfirmStep(e,t){const i=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:t.title,detail:`Will create a new branch named ${e.name} from ${(0,n.Wh)(e.reference)}`}),c(e.flags,["--switch"],{label:`${t.title} and Switch`,description:"--switch",detail:`Will create and switch to a new branch named ${e.name} from ${(0,n.Wh)(e.reference)}`})],t),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}async*deleteCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(null==e.references||Array.isArray(e.references)||(e.references=[e.references]),e.counter<3||null==e.references||Array.isArray(e.references)&&0===e.references.length){t.title=v("Branches",e.subcommand);const i=yield*(0,d.FO)(e,t,{filter:e=>!e.current,picked:e.references?.map((e=>e.ref)),placeholder:"Choose branches to delete",sort:{current:!1,missingUpstream:!0}});if(i===u.Vd)break;e.references=i}t.title=v((0,h._6)("Branch",e.references.length,{only:!0,plural:"Branches"}),e.subcommand),f(e);const i=yield*this.deleteCommandConfirmStep(e,t);i!==u.Vd&&(e.flags=i,(0,u.uZ)(e),e.repo.branchDelete(e.references,{force:e.flags.includes("--force"),remote:e.flags.includes("--remotes")}))}}*deleteCommandConfirmStep(e,t){const i=[c(e.flags,[],{label:t.title,detail:`Will delete ${(0,n.Wh)(e.references)}`})];e.references.every((e=>e.remote))||(i.push(c(e.flags,["--force"],{label:`Force ${t.title}`,description:"--force",detail:`Will forcibly delete ${(0,n.Wh)(e.references)}`})),e.references.some((e=>null!=e.upstream))&&i.push(c(e.flags,["--remotes"],{label:`${t.title} & Remote${e.references.filter((e=>!e.remote)).length>1?"s":""}`,description:"--remotes",detail:`Will delete ${(0,n.Wh)(e.references)} and any remote tracking branches`}),c(e.flags,["--force","--remotes"],{label:`Force ${t.title} & Remote${e.references.filter((e=>!e.remote)).length>1?"s":""}`,description:"--force --remotes",detail:`Will forcibly delete ${(0,n.Wh)(e.references)} and any remote tracking branches`})));const r=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),i,t),s=yield r;return(0,u.i9)(r,e,s)?s[0].item:u.Vd}async*renameCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*(0,d.sd)(e,t,{filter:e=>!e.remote,picked:e.reference?.ref,placeholder:"Choose a branch to rename"});if(i===u.Vd)break;e.reference=i}if(e.counter<4||null==e.name){const i=yield*(0,d.f6)(e,t,{placeholder:`Please provide a new name for ${(0,n.Wh)(e.reference,{icon:!1})}`,titleContext:` ${(0,n.Wh)(e.reference,!1)}`,value:e.name??e.reference.name});if(i===u.Vd)continue;e.name=i}const i=yield*this.renameCommandConfirmStep(e,t);i!==u.Vd&&(e.flags=i,(0,u.uZ)(e),e.repo.branch(...e.flags,e.reference.ref,e.name))}}*renameCommandConfirmStep(e,t){const i=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,["-m"],{label:t.title,detail:`Will rename ${(0,n.Wh)(e.reference)} to ${e.name}`})],t),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}}class CherryPickGitCommand extends u.tR{constructor(e,t){super(e,"cherry-pick","cherry-pick","Cherry Pick",{description:"integrates changes from specified commits into the current branch"});let i=0;null!=t?.state?.repo&&i++,null==t?.state?.references||Array.isArray(t.state.references)&&0===t.state.references.length||i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}execute(e){e.repo.cherryPick(...e.flags,...e.references.map((e=>e.ref)).reverse())}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"cherry"===e}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]),null==e.references||Array.isArray(e.references)||(e.references=[e.references]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)break;e.repo=i}if(null==t.destination){const i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} into ${(0,n.Wh)(t.destination,{icon:!1})}`,e.counter<2||null==e.references||0===e.references.length){const r=yield*(0,d.Yv)(e,t,{filter:{branches:e=>e.id!==t.destination.id},placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to cherry-pick from`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.references?.[0]?.ref:void 0});if(r===u.Vd){i&&e.counter--;continue}(0,n.FT)(r)?(e.references=[r],t.selectedBranchOrTag=void 0):t.selectedBranchOrTag=r}if(e.counter<3&&null!=t.selectedBranchOrTag){const i=(0,n.oI)(t.destination.ref,t.selectedBranchOrTag.ref);let r=t.cache.get(i);null==r&&(r=this.container.git.getLog(e.repo.path,{ref:i,merges:!1}),t.cache.set(i,r));const s=yield*(0,d.Rj)(e,t,{log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),picked:e.references?.map((e=>e.ref)),placeholder:(e,t)=>null==t?`No pickable commits found on ${(0,n.Wh)(e.selectedBranchOrTag,{icon:!1})}`:`Choose commits to cherry-pick into ${(0,n.Wh)(e.destination,{icon:!1})}`});if(s===u.Vd)continue;e.references=s}if(this.confirm(e.confirm)){const i=yield*this.confirmStep(e,t);if(i===u.Vd)continue;e.flags=i}(0,u.uZ)(e),this.execute(e)}return e.counter<0?u.Vd:void 0}*confirmStep(e,t){const i=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:this.title,detail:`Will apply ${(0,n.Wh)(e.references)} to ${(0,n.Wh)(t.destination)}`}),c(e.flags,["--edit"],{label:`${this.title} & Edit`,description:"--edit",detail:`Will edit and apply ${(0,n.Wh)(e.references)} to ${(0,n.Wh)(t.destination)}`}),c(e.flags,["--no-commit"],{label:`${this.title} without Committing`,description:"--no-commit",detail:`Will apply ${(0,n.Wh)(e.references)} to ${(0,n.Wh)(t.destination)} without Committing`})],t),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}}var y=i(9529),b=i(3700);class CoAuthorsGitCommand extends u.tR{constructor(e,t){super(e,"co-authors","co-authors","Add Co-Authors",{description:"adds co-authors to a commit message"});let i=0;null!=t?.state?.repo&&i++,null==t?.state?.contributors||Array.isArray(t.state.contributors)&&0===t.state.contributors.length||i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}async execute(e){const t=await this.container.git.getOrOpenScmRepository(e.repo.path);if(null==t)return;let i=t.inputBox.value;const r=i.indexOf("Co-authored-by: ");-1!==r&&(i=i.substring(0,r-1).trimRight()),null==e.contributors||Array.isArray(e.contributors)||(e.contributors=[e.contributors]);for(const t of e.contributors){let e;e=i.includes("Co-authored-by: ")?"\n":0!==i.length&&i.endsWith("\n")?"\n\n":"\n\n\n",i+=`${e}Co-authored-by: ${t.getCoauthor()}`}t.inputBox.value=i,await(0,y.dO)("workbench.view.scm")}async*steps(e){const t={repos:this.container.git.openRepositories,activeRepo:void 0,associatedView:this.container.contributorsView,title:this.title},i=await this.container.git.getOpenScmRepositories();i.length&&(t.repos=t.repos.filter((e=>i.find((t=>(0,b.AH)(t.rootUri.fsPath)===e.path)))),t.activeRepo=await this.container.git.getOrOpenRepositoryForEditor(),null==t.activeRepo||i.some((e=>e.rootUri.fsPath===t.activeRepo.path))||(t.activeRepo=void 0));let r=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(r=!1,1===t.repos.length)r=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)break;e.repo=i}if(e.counter<2||null==e.contributors){const i=yield*(0,d.bR)(e,t,"Choose contributors to add as co-authors");if(i===u.Vd){r&&e.counter--;continue}e.contributors=i}(0,u.uZ)(e),this.execute(e)}return e.counter<0?u.Vd:void 0}}var C=i(5255),A=i(2800),k=i(7512);class FetchGitCommand extends u.tR{constructor(e,t){super(e,"fetch","fetch","Fetch",{description:"fetches changes from one or more remotes"});let i=0;null==t?.state?.repos||Array.isArray(t.state.repos)&&0===t.state.repos.length||i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}execute(e){return(0,n.UR)(e.reference)?e.repos[0].fetch({branch:e.reference}):this.container.git.fetchAll(e.repos,{all:e.flags.includes("--all"),prune:e.flags.includes("--prune")})}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,A.GI)(e.repos))if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else{const i=yield*(0,d.j8)(e,t,{skipIfPossible:e.counter>=1});if(i===u.Vd)break;e.repos=i}if(this.confirm(e.confirm)){const r=yield*this.confirmStep(e,t);if(r===u.Vd){i&&e.counter--;continue}e.flags=r}(0,u.uZ)(e),this.execute(e)}return e.counter<0?u.Vd:void 0}async*confirmStep(e,t){let i,r="";if(1===e.repos.length){const t=await e.repos[0].getLastFetched();0!==t&&(r=`${(0,h.vk)(C.NE.Dot,2,2)}Last fetched ${(0,k.Zh)(new Date(t))}`)}if(1===e.repos.length&&(0,n.UR)(e.reference))i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t,r),[c(e.flags,[],{label:this.title,detail:`Will fetch ${(0,n.Wh)(e.reference)}`})]);else{const s=1===e.repos.length?`$(repo) ${e.repos[0].formattedName}`:`${e.repos.length} repositories`;i=(0,u.Tv)((0,d.C8)(`Confirm ${this.title}`,e,t,r),[c(e.flags,[],{label:this.title,detail:`Will fetch ${s}`}),c(e.flags,["--prune"],{label:`${this.title} & Prune`,description:"--prune",detail:`Will fetch and prune ${s}`}),c(e.flags,["--all"],{label:`${this.title} All`,description:"--all",detail:`Will fetch all remotes of ${s}`}),c(e.flags,["--all","--prune"],{label:`${this.title} All & Prune`,description:"--all --prune",detail:`Will fetch and prune all remotes of ${s}`})],t)}const s=yield i;return(0,u.i9)(i,e,s)?s[0].item:u.Vd}}var P=i(6897),S=i(6450),D=i(1774);function R(e){if(!(e.repo instanceof a._j))throw new Error("Missing repository")}class LogGitCommand extends u.tR{constructor(e,t){super(e,"log","history","Commits",{description:"aka log, shows commit history"});let i=0;null!=t?.state?.repo&&i++,null!=t?.state?.reference&&(i++,"HEAD"!==t.state.reference&&(0,n.FT)(t.state.reference)&&!(0,n.Nn)(t.state.reference)&&i++),this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"log"===e}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,selectedBranchOrTag:void 0,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)break;e.repo=i}if(R(e),"HEAD"===e.reference){const t=await e.repo.getBranch();e.reference=t}if(e.counter<2||null==e.reference){const r=yield*(0,d.Yv)(e,t,{placeholder:"Choose a branch or tag to show its commit history",picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.reference?.ref:void 0,ranges:!0});if(r===u.Vd){i&&e.counter--;continue}e.reference=r,t.selectedBranchOrTag=void 0}if((0,n.FT)(e.reference)&&!(0,n.Nn)(e.reference)||(t.selectedBranchOrTag=e.reference),t.title=`${this.title}${(0,h.vk)(C.NE.Dot,2,2)}${(0,n.Wh)(t.selectedBranchOrTag,{icon:!1})}`,e.fileName&&(t.title+=`${(0,h.vk)(C.NE.Dot,2,2)}${(0,D.d)(e.fileName,{fileOnly:!0,truncateTo:C.d$-t.title.length-3})}`),e.counter<3&&null!=t.selectedBranchOrTag){const i=t.selectedBranchOrTag.ref;let r=t.cache.get(i);null==r&&(r=null!=e.fileName?this.container.git.getLogForFile(e.repo.path,e.fileName,{ref:i}):this.container.git.getLog(e.repo.path,{ref:i}),t.cache.set(i,r));const s=yield*(0,d.s4)(e,t,{ignoreFocusOut:!0,log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found in ${(0,n.Wh)(e.selectedBranchOrTag,{icon:!1})}`:"Choose a commit",picked:e.reference?.ref});if(s===u.Vd)continue;e.reference=s}let r;e.reference instanceof S.aM&&null==e.reference.file||(e.reference=await this.container.git.getCommit(e.repo.path,e.reference.ref)),e.openPickInView?((0,P.Fw)(e.reference,{pin:!1,preserveFocus:!1}),r=u.Vd):r=yield*le(this.container,{command:"show",state:{repo:e.repo,reference:e.reference,fileName:e.fileName}},this.pickedVia),e.counter--,r===u.Vd&&(0,u.uZ)(e)}return e.counter<0?u.Vd:void 0}}var $=i(3530),_=i(3016);class MergeGitCommand extends u.tR{constructor(e,t){super(e,"merge","merge","Merge",{description:"integrates changes from a specified branch into the current branch"});let i=0;null!=t?.state?.repo&&i++,null!=t?.state?.reference&&i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}execute(e){e.repo.merge(...e.flags,e.reference.ref)}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,pickCommit:!1,pickCommitForItem:!1,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)break;e.repo=i}if(null==t.destination){const i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} into ${(0,n.Wh)(t.destination,{icon:!1})}`,t.pickCommitForItem=!1,e.counter<2||null==e.reference){const r=new _.v_(t.pickCommit,t,(()=>{t.pickCommit=!t.pickCommit,r.on=t.pickCommit})),s=yield*(0,d.Yv)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to merge`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.reference?.ref:void 0,additionalButtons:[r]});if(s===u.Vd){i&&e.counter--;continue}e.reference=s,t.selectedBranchOrTag=void 0}if((0,n.FT)(e.reference)||(t.selectedBranchOrTag=e.reference),e.counter<3&&null!=t.selectedBranchOrTag&&(t.pickCommit||t.pickCommitForItem||e.reference.ref===t.destination.ref)){const i=t.selectedBranchOrTag.ref;let r=t.cache.get(i);null==r&&(r=this.container.git.getLog(e.repo.path,{ref:i,merges:!1}),t.cache.set(i,r));const s=yield*(0,d.s4)(e,t,{ignoreFocusOut:!0,log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found on ${(0,n.Wh)(e.selectedBranchOrTag,{icon:!1})}`:`Choose a commit to merge into ${(0,n.Wh)(e.destination,{icon:!1})}`,picked:e.reference?.ref});if(s===u.Vd)continue;e.reference=s}const r=yield*this.confirmStep(e,t);r!==u.Vd&&(e.flags=r,(0,u.uZ)(e),this.execute(e))}return e.counter<0?u.Vd:void 0}async*confirmStep(e,t){const i=await this.container.git.getAheadBehindCommitCount(e.repo.path,[(0,n.oI)(t.destination.name,e.reference.name)]),r=null!=i?i.ahead+i.behind:0;if(0===r){const i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[],(0,$.fw)($.Xe.Cancel,!0,{label:`Cancel ${this.title}`,detail:`${(0,n.Wh)(t.destination,{capitalize:!0})} is up to date with ${(0,n.Wh)(e.reference)}`})),r=yield i;return(0,u.i9)(i,e,r),u.Vd}const s=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:this.title,detail:`Will merge ${(0,h._6)("commit",r)} from ${(0,n.Wh)(e.reference)} into ${(0,n.Wh)(t.destination)}`}),c(e.flags,["--ff-only"],{label:`Fast-forward ${this.title}`,description:"--ff-only",detail:`Will fast-forward merge ${(0,h._6)("commit",r)} from ${(0,n.Wh)(e.reference)} into ${(0,n.Wh)(t.destination)}`}),c(e.flags,["--squash"],{label:`Squash ${this.title}`,description:"--squash",detail:`Will squash ${(0,h._6)("commit",r)} from ${(0,n.Wh)(e.reference)} into one when merging into ${(0,n.Wh)(t.destination)}`}),c(e.flags,["--no-ff"],{label:`${this.title} without Fast-Forwarding`,description:"--no-ff",detail:`Will create a merge commit when merging ${(0,h._6)("commit",r)} from ${(0,n.Wh)(e.reference)} into ${(0,n.Wh)(t.destination)}`}),c(e.flags,["--no-ff","--no-commit"],{label:`${this.title} without Fast-Forwarding or Committing`,description:"--no-ff --no-commit",detail:`Will merge ${(0,h._6)("commit",r)} from ${(0,n.Wh)(e.reference)} into ${(0,n.Wh)(t.destination)} without Committing`})]),o=yield s;return(0,u.i9)(s,e,o)?o[0].item:u.Vd}}var F=i(5367);class PullGitCommand extends u.tR{constructor(e,t){super(e,"pull","pull","Pull",{description:"fetches and integrates changes from a remote into the current branch"});let i=0;null==t?.state?.repos||Array.isArray(t.state.repos)&&0===t.state.repos.length||i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}async execute(e){if((0,n.UR)(e.reference)&&(!(0,F.BF)(e.reference)||!e.reference.current)){const t=await e.repos[0].getBranch();if(t?.name!==e.reference.name)return e.repos[0].fetch({branch:e.reference,pull:!0})}return this.container.git.pullAll(e.repos,{rebase:e.flags.includes("--rebase")})}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,A.GI)(e.repos))if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else{const i=yield*(0,d.j8)(e,t,{skipIfPossible:e.counter>=1});if(i===u.Vd)break;e.repos=i}if(this.confirm(e.confirm)){const r=yield*this.confirmStep(e,t);if(r===u.Vd){i&&e.counter--;continue}e.flags=r}(0,u.uZ)(e),this.execute(e)}return e.counter<0?u.Vd:void 0}async*confirmStep(e,t){let i;if(e.repos.length>1)i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:this.title,detail:`Will pull ${e.repos.length} repositories`}),c(e.flags,["--rebase"],{label:`${this.title} with Rebase`,description:"--rebase",detail:`Will pull ${e.repos.length} repositories by rebasing`})]);else if((0,n.UR)(e.reference))if(e.reference.remote)i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[],(0,$.fw)($.Xe.Cancel,!0,{label:`Cancel ${this.title}`,detail:"Cannot pull a remote branch"}));else{const[r]=e.repos,s=await r.getBranch(e.reference.name);i=null==s?.upstream?this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[],(0,$.fw)($.Xe.Cancel,!0,{label:`Cancel ${this.title}`,detail:"Cannot pull a branch until it has been published"})):this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:this.title,detail:"Will pull"+(s.state.behind?` ${(0,h._6)("commit",s.state.behind)} into ${(0,n.Wh)(s)}`:` into ${(0,n.Wh)(s)}`)})])}else{const[r]=e.repos,[s,o]=await Promise.all([r.getStatus(),r.getLastFetched()]);let n="";0!==o&&(n=`${(0,h.vk)(C.NE.Dot,2,2)}Last fetched ${(0,k.Zh)(new Date(o))}`);const a=null!=s?.state.behind?` ${(0,h._6)("commit",s.state.behind)} into $(repo) ${r.formattedName}`:` into $(repo) ${r.formattedName}`;i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t,n),[c(e.flags,[],{label:this.title,detail:`Will pull${a}`}),c(e.flags,["--rebase"],{label:`${this.title} with Rebase`,description:"--rebase",detail:`Will pull and rebase${a}`})],void 0,{additionalButtons:[_.My],onDidClickButton:async(e,i)=>{if(i!==_.My||e.busy)return!1;e.title=`Confirm ${t.title}${(0,h.vk)(C.NE.Dot,2,2)}Fetching${C.NE.Ellipsis}`,e.busy=!0;try{return await r.fetch({progress:!0}),!0}finally{e.busy=!1}}})}const r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}}class PushGitCommand extends u.tR{constructor(e,t){super(e,"push","push","Push",{description:"pushes changes from the current branch to a remote"});let i=0;null==t?.state?.repos||Array.isArray(t.state.repos)&&0===t.state.repos.length||i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}execute(e){const t=e.flags.indexOf("--set-upstream");return-1!==t?(0,n.UR)(e.reference)?this.container.git.pushAll(e.repos,{force:!1,publish:{remote:e.flags[t+1]},reference:e.reference}):Promise.resolve():this.container.git.pushAll(e.repos,{force:e.flags.includes("--force"),reference:e.reference})}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,A.GI)(e.repos))if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else if(null!=e.reference){const i=yield*(0,d.lA)({...e,repos:void 0,repo:e.reference.repoPath},t);if(i===u.Vd)break;e.repos=[i]}else{const i=yield*(0,d.j8)(e,t,{skipIfPossible:e.counter>=1});if(i===u.Vd)break;e.repos=i}if(this.confirm(e.confirm)){const r=yield*this.confirmStep(e,t);if(r===u.Vd){i&&e.counter--;continue}e.flags=r}(0,u.uZ)(e),this.execute(e)}return e.counter<0?u.Vd:void 0}async*confirmStep(e,t){const i=r.D.getAny("git.useForcePushWithLease")??!1;let s;if(e.repos.length>1)s=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:this.title,detail:`Will push ${e.repos.length} repositories`}),c(e.flags,["--force"],{label:`Force ${this.title}${i?" (with lease)":""}`,description:"--force"+(i?"-with-lease":""),detail:`Will force push${i?" (with lease)":""} ${e.repos.length} repositories`})]);else{const[r]=e.repos,o=[];if((0,n.UR)(e.reference))if(e.reference.remote)s=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[],(0,$.fw)($.Xe.Cancel,!0,{label:`Cancel ${this.title}`,detail:"Cannot push remote branch"}));else{const a=await r.getBranch(e.reference.name);if(null!=a&&null==a?.upstream){for(const t of await r.getRemotes())o.push(c(e.flags,["--set-upstream",t.name,a.name],{label:`Publish ${a.name} to ${t.name}`,detail:`Will publish ${(0,n.Wh)(a)} to ${t.name}`}));s=o.length?this.createConfirmStep((0,d.C8)("Confirm Publish",e,t),o,void 0,{placeholder:"Confirm Publish"}):this.createConfirmStep((0,d.C8)("Confirm Publish",e,t),[],(0,$.fw)($.Xe.Cancel,!0,{label:"Cancel Publish",detail:"Cannot publish; No remotes found"}),{placeholder:"Confirm Publish"})}else s=null!=a&&a?.state.behind>0?this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,["--force"],{label:`Force ${this.title}${i?" (with lease)":""}`,description:"--force"+(i?"-with-lease":""),detail:`Will force push${i?" (with lease)":""} ${a?.state.ahead?` ${(0,h._6)("commit",a.state.ahead)}`:""}${a.getRemoteName()?` to ${a.getRemoteName()}`:""}${null!=a&&a.state.behind>0?`, overwriting ${(0,h._6)("commit",a.state.behind)}${a?.getRemoteName()?` on ${a.getRemoteName()}`:""}`:""}`})],(0,$.fw)($.Xe.Cancel,!0,{label:`Cancel ${this.title}`,detail:`Cannot push; ${(0,n.Wh)(a)} is behind ${a.getRemoteName()} by ${(0,h._6)("commit",a.state.behind)}`})):null!=a&&a?.state.ahead>0?this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[a.getRemoteName()],{label:this.title,detail:`Will push ${(0,h._6)("commit",a.state.ahead)} from ${(0,n.Wh)(a)} to ${a.getRemoteName()}`})]):this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[],(0,$.fw)($.Xe.Cancel,!0,{label:`Cancel ${this.title}`,detail:"No commits found to push"}))}else{const a=await r.getStatus(),l={refType:"branch",name:a?.branch??"HEAD",ref:a?.branch??"HEAD",remote:!1,repoPath:r.path};if(0===a?.state.ahead){if(null==e.reference&&null==a.upstream){e.reference=l;for(const t of await r.getRemotes())o.push(c(e.flags,["--set-upstream",t.name,a.branch],{label:`Publish ${l.name} to ${t.name}`,detail:`Will publish ${(0,n.Wh)(l)} to ${t.name}`}))}s=o.length?this.createConfirmStep((0,d.C8)("Confirm Publish",e,t),o,void 0,{placeholder:"Confirm Publish"}):null==a.upstream?this.createConfirmStep((0,d.C8)("Confirm Publish",e,t),[],(0,$.fw)($.Xe.Cancel,!0,{label:"Cancel Publish",detail:"Cannot publish; No remotes found"}),{placeholder:"Confirm Publish"}):this.createConfirmStep((0,d.C8)("Confirm Push",e,t),[],(0,$.fw)($.Xe.Cancel,!0,{label:`Cancel ${this.title}`,detail:`Cannot push; No commits ahead of ${(0,F.Lo)(a.upstream)}`}))}else{let o="";const u=await r.getLastFetched();let p;0!==u&&(o=`${(0,h.vk)(C.NE.Dot,2,2)}Last fetched ${(0,k.Zh)(new Date(u))}`),p=null!=e.reference?`${a?.state.ahead?` commits up to and including ${(0,n.Wh)(e.reference,{label:!1})}`:""}${a?.upstream?` to ${(0,F.Lo)(a.upstream)}`:""}`:`${a?.state.ahead?` ${(0,h._6)("commit",a.state.ahead)}`:""}${a?.upstream?` to ${(0,F.Lo)(a.upstream)}`:""}`,s=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t,o),[...a?.state.behind?[]:[c(e.flags,[],{label:this.title,detail:`Will push${p}`})],c(e.flags,["--force"],{label:`Force ${this.title}${i?" (with lease)":""}`,description:"--force"+(i?"-with-lease":""),detail:`Will force push${i?" (with lease)":""} ${p}${null!=a&&a.state.behind>0?`, overwriting ${(0,h._6)("commit",a.state.behind)}${a?.upstream?` on ${(0,F.Lo)(a.upstream)}`:""}`:""}`})],a?.state.behind?(0,$.fw)($.Xe.Cancel,!0,{label:`Cancel ${this.title}`,detail:`Cannot push; ${(0,n.Wh)(l)} is behind${a?.upstream?` ${(0,F.Lo)(a.upstream)}`:""} by ${(0,h._6)("commit",a.state.behind)}`}):void 0),s.additionalButtons=[_.My],s.onDidClickButton=async(e,i)=>{if(i!==_.My||e.busy)return!1;e.title=`Confirm ${t.title}${(0,h.vk)(C.NE.Dot,2,2)}Fetching${C.NE.Ellipsis}`,e.busy=!0;try{return await r.fetch({progress:!0}),!0}finally{e.busy=!1}}}}}const o=yield s;return(0,u.i9)(s,e,o)?o[0].item:u.Vd}}var T=i(2509);class RebaseGitCommand extends u.tR{constructor(e,t){super(e,"rebase","rebase","Rebase",{description:"integrates changes from a specified branch into the current branch, by changing the base of the branch and reapplying the commits on top"});let i=0;null!=t?.state?.repo&&i++,null!=t?.state?.reference&&i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}async execute(e){let t;if(e.flags.includes("--interactive")){await this.container.rebaseEditor.enableForNextUse();t=["-c",`"sequence.editor=${(0,T._L)()}"`]}e.repo.rebase(t,...e.flags,e.reference.ref)}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,pickCommit:!1,pickCommitForItem:!1,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)break;e.repo=i}if(null==t.destination){const i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} ${(0,n.Wh)(t.destination,{icon:!1})}`,t.pickCommitForItem=!1,e.counter<2||null==e.reference){const r=new _.v_(t.pickCommit,t,(()=>{t.pickCommit=!t.pickCommit,r.on=t.pickCommit})),s=yield*(0,d.Yv)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to rebase`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.reference?.ref:void 0,additionalButtons:[r]});if(s===u.Vd){i&&e.counter--;continue}e.reference=s,t.selectedBranchOrTag=void 0}if((0,n.FT)(e.reference)||(t.selectedBranchOrTag=e.reference),e.counter<3&&null!=t.selectedBranchOrTag&&(t.pickCommit||t.pickCommitForItem||e.reference.ref===t.destination.ref)){const i=t.selectedBranchOrTag.ref;let r=t.cache.get(i);null==r&&(r=this.container.git.getLog(e.repo.path,{ref:i,merges:!1}),t.cache.set(i,r));const s=yield*(0,d.s4)(e,t,{ignoreFocusOut:!0,log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found on ${(0,n.Wh)(e.selectedBranchOrTag,{icon:!1})}`:`Choose a commit to rebase ${(0,n.Wh)(e.destination,{icon:!1})} onto`,picked:e.reference?.ref});if(s===u.Vd)continue;e.reference=s}const r=yield*this.confirmStep(e,t);r!==u.Vd&&(e.flags=r,(0,u.uZ)(e),this.execute(e))}return e.counter<0?u.Vd:void 0}async*confirmStep(e,t){const i=await this.container.git.getAheadBehindCommitCount(e.repo.path,["revision"===e.reference.refType?(0,n.oI)(e.reference.ref,t.destination.ref):(0,n.oI)(t.destination.name,e.reference.name)]),r=null!=i?i.ahead+i.behind:0;if(0===r){const i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[],(0,$.fw)($.Xe.Cancel,!0,{label:`Cancel ${this.title}`,detail:`${(0,n.Wh)(t.destination,{capitalize:!0})} is up to date with ${(0,n.Wh)(e.reference)}`})),r=yield i;return(0,u.i9)(i,e,r),u.Vd}const s=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:this.title,detail:`Will update ${(0,n.Wh)(t.destination)} by applying ${(0,h._6)("commit",r)} on top of ${(0,n.Wh)(e.reference)}`}),c(e.flags,["--interactive"],{label:`Interactive ${this.title}`,description:"--interactive",detail:`Will interactively update ${(0,n.Wh)(t.destination)} by applying ${(0,h._6)("commit",r)} on top of ${(0,n.Wh)(e.reference)}`})]),o=yield s;return(0,u.i9)(s,e,o)?o[0].item:u.Vd}}var x=i(4155),I=i(7925),O=i(4336);function B(e){if(!(e.repo instanceof a._j&&"add"===e.subcommand))throw new Error("Missing repository")}function E(e){if(!(e.repo instanceof a._j&&"remove"===e.subcommand))throw new Error("Missing repository")}function W(e){if(!(e.repo instanceof a._j&&"prune"===e.subcommand))throw new Error("Missing repository")}function N(e){if("string"==typeof e.remote)throw new Error("Missing remote")}function M(e){if("string"==typeof e.remote)throw new Error("Missing remote")}const U=new Map([["add","Add"],["prune","Prune"],["remove","Remove"]]);function L(e,t){return null==t?e:`${U.get(t)} ${e}`}class RemoteGitCommand extends u.tR{subcommand;constructor(e,t){super(e,"remote","remote","Remote",{description:"add, prune, or remove remotes"});let i=0;if(null!=t?.state?.subcommand)switch(i++,t?.state.subcommand){case"add":null!=t.state.name&&i++,null!=t.state.url&&i++;break;case"prune":case"remove":null!=t.state.remote&&i++}null!=t?.state?.repo&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"remove"!==this.subcommand&&"prune"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.remotesView,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;const t=yield*this.pickSubcommandStep(e);if(t===u.Vd)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=L(this.title,e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)continue;e.repo=i}switch(e.subcommand){case"add":B(e),yield*this.addCommandSteps(e,t),e.name=void 0,e.url=void 0;break;case"prune":W(e),yield*this.pruneCommandSteps(e,t);break;case"remove":E(e),yield*this.removeCommandSteps(e,t);break;default:(0,u.uZ)(e)}i&&e.counter--}return e.counter<0?u.Vd:void 0}*pickSubcommandStep(e){const t=(0,u.xf)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"add",description:"adds a new remote",picked:"add"===e.subcommand,item:"add"},{label:"prune",description:"prunes remote branches on the specified remote",picked:"prune"===e.subcommand,item:"prune"},{label:"remove",description:"removes the specified remote",picked:"remove"===e.subcommand,item:"remove"}],buttons:[o.QuickInputButtons.Back]}),i=yield t;return(0,u.i9)(t,e,i)?i[0].item:u.Vd}async*addCommandSteps(e,t){null==e.flags&&(e.flags=["-f"]);let i=0!==(await e.repo.getRemotes({filter:t=>t.name===e.name})).length;for(;this.canStepsContinue(e);){if(e.counter<3||null==e.name||i){const r=yield*(0,d.NQ)(e,t,{placeholder:"Please provide a name for the remote",value:e.name});if(r===u.Vd)continue;if(i=0!==(await e.repo.getRemotes({filter:e=>e.name===r})).length,i){e.counter--;continue}e.name=r}if(e.counter<4||null==e.url){const i=yield*(0,d.Kf)(e,t,{placeholder:"Please provide a URL for the remote",value:e.url});if(i===u.Vd)continue;e.url=i}if(this.confirm(e.confirm)){const i=yield*this.addCommandConfirmStep(e,t);if(i===u.Vd)continue;e.flags=i}(0,u.uZ)(e),await e.repo.addRemote(e.name,e.url,e.flags.includes("-f")?{fetch:!0}:void 0),!1!==e.reveal&&(0,x.ay)(void 0,{focus:!0,select:!0})}}*addCommandConfirmStep(e,t){const i=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:t.title,detail:`Will add remote '${e.name}' for ${e.url}`}),c(e.flags,["-f"],{label:`${t.title} and Fetch`,description:"-f",detail:`Will add and fetch remote '${e.name}' for ${e.url}`})],t),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}async*removeCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null!=e.remote&&"string"==typeof e.remote){const[t]=await e.repo.getRemotes({filter:t=>t.name===e.remote});e.remote=null!=t?t:void 0}if(e.counter<3||null==e.remote){t.title=L("Remotes",e.subcommand);const i=yield*(0,d.Lt)(e,t,{picked:e.remote?.name,placeholder:"Choose remote to remove"});if(i===u.Vd)break;e.remote=i}N(e);if((yield*this.removeCommandConfirmStep(e,t))!==u.Vd){(0,u.uZ)(e);try{await e.repo.removeRemote(e.remote.name)}catch(e){O.Yd.error(e),(0,I.W8)("Unable to remove remote")}}}}*removeCommandConfirmStep(e,t){const i=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will remove remote '${e.remote.name}'`}],t),r=yield i;return(0,u.i9)(i,e,r)?void 0:u.Vd}async*pruneCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null!=e.remote&&"string"==typeof e.remote){const[t]=await e.repo.getRemotes({filter:t=>t.name===e.remote});e.remote=null!=t?t:void 0}if(e.counter<3||null==e.remote){const i=yield*(0,d.Lt)(e,t,{picked:e.remote?.name,placeholder:"Choose a remote to prune"});if(i===u.Vd)break;e.remote=i}M(e);(yield*this.pruneCommandConfirmStep(e,t))!==u.Vd&&((0,u.uZ)(e),e.repo.pruneRemote(e.remote.name))}}*pruneCommandConfirmStep(e,t){const i=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will prune remote '${e.remote.name}'`}],t),r=yield i;return(0,u.i9)(i,e,r)?void 0:u.Vd}}class ResetGitCommand extends u.tR{constructor(e,t){super(e,"reset","reset","Reset",{description:"resets the current branch to a specified commit"});let i=0;null!=t?.state?.repo&&i++,null!=t?.state?.reference&&i++,this.initialState={counter:i,confirm:t?.confirm??!0,...t?.state},this._canSkipConfirm=!this.initialState.confirm}_canSkipConfirm=!1;get canSkipConfirm(){return this._canSkipConfirm}execute(e){e.repo.reset(...e.flags,e.reference.ref)}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)break;e.repo=i}if(null==t.destination){const i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} ${(0,n.Wh)(t.destination,{icon:!1})}`,e.counter<2||null==e.reference){const r=t.destination.ref;let s=t.cache.get(r);null==s&&(s=this.container.git.getLog(e.repo.path,{ref:r,merges:!1}),t.cache.set(r,s));const o=yield*(0,d.s4)(e,t,{log:await s,onDidLoadMore:e=>t.cache.set(r,Promise.resolve(e)),placeholder:(e,t)=>null==t?`${e.destination.name} has no commits`:`Choose a commit to reset ${e.destination.name} to`,picked:e.reference?.ref});if(o===u.Vd){i&&e.counter--;continue}e.reference=o}if(this.confirm(e.confirm)){const i=yield*this.confirmStep(e,t);if(i===u.Vd)continue;e.flags=i}(0,u.uZ)(e),this.execute(e)}return e.counter<0?u.Vd:void 0}*confirmStep(e,t){const i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:this.title,detail:`Will reset (leaves changes in the working tree) ${(0,n.Wh)(t.destination)} to ${(0,n.Wh)(e.reference)}`}),c(e.flags,["--soft"],{label:`Soft ${this.title}`,description:"--soft",detail:`Will soft reset (leaves changes in the index and working tree) ${(0,n.Wh)(t.destination)} to ${(0,n.Wh)(e.reference)}`}),c(e.flags,["--hard"],{label:`Hard ${this.title}`,description:"--hard",detail:`Will hard reset (discards all changes) ${(0,n.Wh)(t.destination)} to ${(0,n.Wh)(e.reference)}`})]),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}}class RevertGitCommand extends u.tR{constructor(e,t){super(e,"revert","revert","Revert",{description:"undoes the changes of specified commits, by creating new commits with inverted changes"});let i=0;null!=t?.state?.repo&&i++,null==t?.state?.references||Array.isArray(t.state.references)&&0===t.state.references.length||i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}execute(e){e.repo.revert(...e.flags,...e.references.map((e=>e.ref)).reverse())}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,title:this.title};null==e.flags&&(e.flags=[]),null==e.references||Array.isArray(e.references)||(e.references=[e.references]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)break;e.repo=i}if(null==t.destination){const i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(e.counter<2||null==e.references||0===e.references.length){const r=t.destination.ref;let s=t.cache.get(r);null==s&&(s=this.container.git.getLog(e.repo.path,{ref:r,merges:!1}),t.cache.set(r,s));const o=yield*(0,d.Rj)(e,t,{log:await s,onDidLoadMore:e=>t.cache.set(r,Promise.resolve(e)),placeholder:(e,t)=>null==t?`${e.destination.name} has no commits`:"Choose commits to revert",picked:e.references?.map((e=>e.ref))});if(o===u.Vd){i&&e.counter--;continue}e.references=o}const r=yield*this.confirmStep(e,t);r!==u.Vd&&(e.flags=r,(0,u.uZ)(e),this.execute(e))}return e.counter<0?u.Vd:void 0}*confirmStep(e,t){const i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,["--no-edit"],{label:this.title,description:"--no-edit",detail:`Will revert ${(0,n.Wh)(e.references)}`}),c(e.flags,["--edit"],{label:`${this.title} & Edit`,description:"--edit",detail:`Will revert and edit ${(0,n.Wh)(e.references)}`})]),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}}var G=i(6934),H=i(9729),V=i(4655);const Y=new Map([["","Search by Message"],["=:","Search by Message"],["message:","Search by Message"],["@:","Search by Author"],["author:","Search by Author"],["#:","Search by Commit SHA"],["commit:","Search by Commit SHA"],["?:","Search by File"],["file:","Search by File"],["~:","Search by Changes"],["change:","Search by Changes"]]);class SearchGitCommand extends u.tR{constructor(e,t){super(e,"search","search","Commit Search",{description:"aka grep, searches for commits"});let i=0;null!=t?.state?.repo&&i++,null==t?.state?.query||t.prefillOnly||i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}isMatch(e){return super.isMatch(e)||"grep"===e}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"grep"===e}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.searchAndCompareView,commit:void 0,hasVirtualFolders:(0,s.fw)("gitlens:hasVirtualFolders",!1),resultsKey:void 0,resultsPromise:void 0,title:this.title},i=r.D.get("gitCommands.search");null==e.matchAll&&(e.matchAll=i.matchAll),null==e.matchCase&&(e.matchCase=i.matchCase),null==e.matchRegex&&(e.matchRegex=i.matchRegex),null==e.showResultsInSideBar&&(e.showResultsInSideBar=i.showResultsInSideBar??void 0);let o=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(o=!1,1===t.repos.length)o=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)break;e.repo=i}if(e.counter<2||null==e.query){const i=yield*this.pickSearchOperatorStep(e,t);if(i===u.Vd){o&&e.counter--,e.query=void 0;continue}e.query=i}const i={query:e.query,matchAll:e.matchAll,matchCase:e.matchCase,matchRegex:e.matchRegex},r=(0,G.FL)(i);if(null!=t.resultsPromise&&t.resultsKey===r||(t.resultsPromise=e.repo.richSearchCommits(i),t.resultsKey=r),e.showResultsInSideBar){this.container.searchAndCompareView.search(e.repo.path,i,{label:{label:`for ${e.query}`}},t.resultsPromise,e.showResultsInSideBar instanceof V.V?e.showResultsInSideBar:void 0);break}if(e.counter<3||null==t.commit){const r=e.repo.path,s=yield*(0,d.s4)(e,t,{ignoreFocusOut:!0,log:await t.resultsPromise,onDidLoadMore:e=>t.resultsPromise=Promise.resolve(e),placeholder:(t,i)=>null==i?`No results for ${e.query}`:`${(0,h._6)("result",i.count,{format:e=>i.hasMore?`${e}+`:void 0})} for ${e.query}`,picked:t.commit?.ref,showInSideBarCommand:new H.qv("$(link-external)  Show Results in Side Bar",(()=>{this.container.searchAndCompareView.search(r,i,{label:{label:`for ${e.query}`},reveal:{select:!0,focus:!1,expand:!0}},t.resultsPromise)})),showInSideBarButton:{button:_.vU,onDidClick:()=>{this.container.searchAndCompareView.search(r,i,{label:{label:`for ${e.query}`},reveal:{select:!0,focus:!1,expand:!0}},t.resultsPromise)}}});if(s===u.Vd){e.counter--;continue}t.commit=s}let s;e.openPickInView?((0,P.Fw)(t.commit,{pin:!1,preserveFocus:!1}),s=u.Vd):s=yield*le(this.container,{command:"show",state:{repo:e.repo,reference:t.commit}},this.pickedVia),e.counter--,s===u.Vd&&(0,u.uZ)(e)}return e.counter<0?u.Vd:void 0}*pickSearchOperatorStep(e,t){const i=[{label:Y.get(""),description:`pattern or message: pattern or =: pattern ${C.NE.Dash} use quotes to search for phrases`,item:"message:"},{label:Y.get("author:"),description:"author: pattern or @: pattern",item:"author:"},{label:Y.get("commit:"),description:"commit: sha or #: sha",item:"commit:"},t.hasVirtualFolders?void 0:{label:Y.get("file:"),description:"file: glob or ?: glob",item:"file:"},t.hasVirtualFolders?void 0:{label:Y.get("change:"),description:"change: pattern or ~: pattern",item:"change:"}].filter((e=>null!=e)),r=new _.I4(e.matchCase),s=new _.eY(e.matchAll),o=new _.Mn(e.matchRegex),n=(0,u.xf)({title:(0,d.C8)(t.title,e,t),placeholder:'e.g. "Updates dependencies" author:eamodio',matchOnDescription:!0,matchOnDetail:!0,additionalButtons:[r,s,o],items:i,value:e.query,selectValueWhenShown:!1,onDidAccept:e=>{const t=e.selectedItems[0];if(!G.WY.has(t.item))return!0;const i=e.value.trim();return 0===i.length||G.WY.has(i)?e.value=t.item:e.value=`${i} ${t.item}`,n.onDidChangeValue(e),!1},onDidClickButton:(t,i)=>{i===r?(e.matchCase=!e.matchCase,r.on=e.matchCase):i===s?(e.matchAll=!e.matchAll,s.on=e.matchAll):i===o&&(e.matchRegex=!e.matchRegex,o.on=e.matchRegex)},onDidChangeValue:r=>{const s=r.value.trim();e.counter=s?3:2;const o=(0,G.pD)({query:s,matchCase:e.matchCase,matchAll:e.matchAll,matchRegex:e.matchRegex});return r.title=(0,d.C8)(0===o.size||o.size>1?t.title:`Commit ${Y.get(o.keys().next().value)}`,e,t),0===r.value.length?r.items=i:(r.ignoreFocusOut=!0,n.ignoreFocusOut=!0,r.items=[{label:"Search for",description:r.value,item:r.value}]),!0}}),a=yield n;return(0,u.i9)(n,e,a)?(e.counter--,a[0].item.trim()):(e.counter--,u.Vd)}}var Q=i(3931),q=i(1742);function j(e){if(!(e.repo instanceof a._j))throw new Error("Missing repository")}function z(e){if(!(0,S.f_)(e.reference))throw new Error("Missing reference")}function K(e){if(!e.fileName)throw new Error("Missing filename")}class ShowGitCommand extends u.tR{constructor(e,t){super(e,"show","show","Show",{description:"shows information about a git reference"});let i=0;null!=t?.state?.repo&&i++,null!=t?.state?.reference&&i++,null!=t?.state?.fileName&&(i+=2),this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}getStepState(e){const t=super.getStepState(e);return{...t,startingStep:e?Math.min(t.startingStep??0,1):0}}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)break;e.repo=i}if(j(e),(e.counter<2||null==e.reference||!(0,S.f_)(e.reference)||null!=e.reference.file)&&(null==e.reference||(0,S.f_)(e.reference)||(e.reference=await this.container.git.getCommit(e.reference.repoPath,e.reference.ref)),e.counter<2||null==e.reference)){const r=yield*(0,d.s4)(e,t,{log:{repoPath:e.repo.path,commits:new Map,sha:void 0,range:void 0,count:0,limit:void 0,hasMore:!1},placeholder:"Enter a reference or commit SHA",picked:e.reference?.ref});if(r===u.Vd){i&&e.counter--;continue}e.reference=r}if(z(e),e.counter<3){null==e.reference.files&&await e.reference.ensureFullDetails();const i=yield*(0,d.KT)(e,t);if(i===u.Vd)continue;if(i instanceof q.Wv){const t=yield*i.executeSteps(this.pickedVia);e.counter--,t===u.Vd&&(0,u.uZ)(e);continue}if(i instanceof H.$w&&!(i instanceof Q.PF)){(0,u.uZ)(e),i.execute();break}}if(e.counter<4||null==e.fileName){const i=yield*(0,d.fD)(e,t,{picked:e.fileName});if(i===u.Vd)continue;if(i instanceof Q.PF){e.counter-=2;continue}e.fileName=i.file.path}K(e);const r=yield*(0,d.nI)(e,t);if(r!==u.Vd)if(r instanceof Q.PF)e.counter-=2;else if(r instanceof q.Wv)yield*r.executeSteps(this.pickedVia),e.counter--;else if(r instanceof H.$w){(0,u.uZ)(e),r.execute();break}}return e.counter<0?u.Vd:void 0}}var J=i(252),Z=i(6592);const X=new Map([["apply","Apply"],["drop","Drop"],["list","List"],["pop","Pop"],["push","Push"],["rename","Rename"]]);function ee(e,t){return null==t?e:`${X.get(t)} ${e}`}class StashGitCommand extends u.tR{subcommand;constructor(e,t){super(e,"stash","stash","Stash",{description:"shelves (stashes) local changes to be reapplied later"});let i=0;if(null!=t?.state?.subcommand)switch(i++,t.state.subcommand){case"apply":case"drop":case"pop":null!=t.state.reference&&i++;break;case"push":null!=t.state.message&&i++;break;case"rename":null!=t.state.reference&&i++,null!=t.state.message&&i++}null!=t?.state?.repo&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand&&"list"!==this.subcommand}get canSkipConfirm(){return"drop"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.stashesView,readonly:(0,s.fw)("gitlens:readonly",!1)||(0,s.fw)("gitlens:untrusted",!1)||(0,s.fw)("gitlens:hasVirtualFolders",!1),title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,t.readonly&&(e.subcommand="list"),e.counter<1||null==e.subcommand){this.subcommand=void 0;const t=yield*this.pickSubcommandStep(e);if(t===u.Vd)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=ee(this.title,e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)continue;e.repo=i}switch(e.subcommand){case"apply":case"pop":yield*this.applyOrPopCommandSteps(e,t);break;case"drop":yield*this.dropCommandSteps(e,t);break;case"list":yield*this.listCommandSteps(e,t);break;case"push":yield*this.pushCommandSteps(e,t);break;case"rename":yield*this.renameCommandSteps(e,t),e.message=void 0;break;default:(0,u.uZ)(e)}i&&e.counter--}return e.counter<0?u.Vd:void 0}*pickSubcommandStep(e){const t=(0,u.xf)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"apply",description:"integrates changes from the specified stash into the current branch",picked:"apply"===e.subcommand,item:"apply"},{label:"drop",description:"deletes the specified stash",picked:"drop"===e.subcommand,item:"drop"},{label:"list",description:"lists the saved stashes",picked:"list"===e.subcommand,item:"list"},{label:"pop",description:"integrates changes from the specified stash into the current branch and deletes the stash",picked:"pop"===e.subcommand,item:"pop"},{label:"push",description:"saves your local changes to a new stash and discards them from the working tree and index",picked:"push"===e.subcommand,item:"push"},{label:"rename",description:"renames the specified stash",picked:"rename"===e.subcommand,item:"rename"}],buttons:[o.QuickInputButtons.Back]}),i=yield t;return(0,u.i9)(t,e,i)?i[0].item:u.Vd}async*applyOrPopCommandSteps(e,t){for(;this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*(0,d.Qp)(e,t,{stash:await this.container.git.getStash(e.repo.path),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash to apply to your working tree",picked:e.reference?.ref});if(i===u.Vd)break;e.reference=i}if(this.confirm(e.confirm)){const i=yield*this.applyOrPopCommandConfirmStep(e,t);if(i===u.Vd)continue;e.subcommand=i}(0,u.uZ)(e);try{if(await e.repo.stashApply("pop"===e.subcommand?`stash@{${e.reference.number}}`:e.reference.ref,{deleteAfter:"pop"===e.subcommand}),e.reference.message){const t=await this.container.git.getScmRepository(e.repo.path);null==t||t.inputBox.value||(t.inputBox.value=e.reference.message)}}catch(e){O.Yd.error(e,t.title),Z.ef.is(e,Z.bk.WorkingChanges)?o.window.showWarningMessage("Unable to apply stash. Your working tree changes would be overwritten. Please commit or stash your changes before trying again"):(0,I.W8)(e.message)}}}*applyOrPopCommandConfirmStep(e,t){const i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:"pop"===e.subcommand?`Will delete ${(0,n.Wh)(e.reference)} and apply the changes to the working tree`:`Will apply the changes from ${(0,n.Wh)(e.reference)} to the working tree`,item:e.subcommand},{label:ee(this.title,"pop"===e.subcommand?"apply":"pop"),detail:"pop"===e.subcommand?`Will apply the changes from ${(0,n.Wh)(e.reference)} to the working tree`:`Will delete ${(0,n.Wh)(e.reference)} and apply the changes to the working tree`,item:"pop"===e.subcommand?"apply":"pop"}],void 0,{placeholder:`Confirm ${t.title}`,additionalButtons:[_._9,_.Nv],onDidClickButton:(t,i)=>{i===_._9?(0,J.Fw)(e.reference,{pin:!1,preserveFocus:!0}):i===_.Nv&&(0,J.ay)(e.reference,{select:!0,expand:!0})}}),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}async*dropCommandSteps(e,t){for(;this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*(0,d.Qp)(e,t,{stash:await this.container.git.getStash(e.repo.path),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash to delete",picked:e.reference?.ref});if(i===u.Vd)break;e.reference=i}if((yield*this.dropCommandConfirmStep(e,t))!==u.Vd){(0,u.uZ)(e);try{await e.repo.stashDelete(`stash@{${e.reference.number}}`,e.reference.ref)}catch(e){return O.Yd.error(e,t.title),void(0,I.W8)("Unable to delete stash")}}}}*dropCommandConfirmStep(e,t){const i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will delete ${(0,n.Wh)(e.reference)}`}],void 0,{placeholder:`Confirm ${t.title}`,additionalButtons:[_._9,_.Nv],onDidClickButton:(t,i)=>{i===_._9?(0,J.Fw)(e.reference,{pin:!1,preserveFocus:!0}):i===_.Nv&&(0,J.ay)(e.reference,{select:!0,expand:!0})}}),r=yield i;return(0,u.i9)(i,e,r)?void 0:u.Vd}async*listCommandSteps(e,t){for(t.title="Stashes";this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*(0,d.Qp)(e,t,{stash:await this.container.git.getStash(e.repo.path),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash",picked:e.reference?.ref});if(i===u.Vd)break;e.reference=i}const i=yield*le(this.container,{command:"show",state:{repo:e.repo,reference:e.reference}},this.pickedVia);e.counter--,i===u.Vd&&(0,u.uZ)(e)}}async*pushCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.message){if(null==e.message){const t=await this.container.git.getScmRepository(e.repo.path);e.message=t?.inputBox.value}const i=yield*this.pushCommandInputMessageStep(e,t);if(i===u.Vd)break;e.message=i}if(this.confirm(e.confirm)){const i=yield*this.pushCommandConfirmStep(e,t);if(i===u.Vd)continue;e.flags=i}try{await e.repo.stashSave(e.message,e.uris,{includeUntracked:e.flags.includes("--include-untracked"),keepIndex:e.flags.includes("--keep-index"),onlyStaged:e.flags.includes("--staged")}),(0,u.uZ)(e)}catch(i){if(O.Yd.error(i,t.title),i instanceof Z.s8&&i.reason===Z.g1.ConflictingStagedAndUnstagedLines&&e.flags.includes("--staged")){const t={title:"Yes"},r={title:"No",isCloseAffordance:!0};if(await o.window.showErrorMessage(i.message,{modal:!0},t,r)===t){e.uris=e.onlyStagedUris,e.flags.splice(e.flags.indexOf("--staged"),1);continue}return}const r=i?.message??i?.toString()??"";return r.includes("newer version of Git")?void o.window.showErrorMessage(`Unable to stash changes. ${r}`):void(0,I.W8)("Unable to stash changes")}}}async*pushCommandInputMessageStep(e,t){const i=(0,u.Ke)({title:(0,d.C8)(t.title,e,t,null!=e.uris?`${(0,h.vk)(C.NE.Dot,2,2)}${1===e.uris.length?(0,D.d)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}`:void 0),placeholder:"Please provide a stash message",value:e.message,prompt:"Enter stash message"}),r=yield i;return(0,u.$V)(i,e,r)&&await(0,u.Wm)(i,e,r)?r:u.Vd}*pushCommandConfirmStep(e,t){const i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),null==e.uris||0===e.uris.length?[c(e.flags,[],{label:t.title,detail:"Will stash uncommitted changes"}),c(e.flags,["--include-untracked"],{label:`${t.title} & Include Untracked`,description:"--include-untracked",detail:"Will stash uncommitted changes, including untracked files"}),c(e.flags,["--keep-index"],{label:`${t.title} & Keep Staged`,description:"--keep-index",detail:"Will stash uncommitted changes, but will keep staged files intact"})]:[c(e.flags,[],{label:t.title,detail:`Will stash changes from ${1===e.uris.length?(0,D.d)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}`}),c(e.flags,["--keep-index"],{label:`${t.title} & Keep Staged`,detail:`Will stash changes from ${1===e.uris.length?(0,D.d)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}, but will keep staged files intact`})],void 0,{placeholder:`Confirm ${t.title}`}),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}async*renameCommandSteps(e,t){for(;this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*(0,d.Qp)(e,t,{stash:await this.container.git.getStash(e.repo.path),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash to rename",picked:e.reference?.ref});if(i===u.Vd)break;e.reference=i}if(e.counter<4||null==e.message){const i=yield*this.renameCommandInputMessageStep(e,t);if(i===u.Vd)continue;e.message=i}if(this.confirm(e.confirm)){if((yield*this.renameCommandConfirmStep(e,t))===u.Vd)continue}(0,u.uZ)(e);try{await e.repo.stashRename(e.reference.name,e.reference.ref,e.message,e.reference.stashOnRef)}catch(e){O.Yd.error(e,t.title),(0,I.W8)(e.message)}}}async*renameCommandInputMessageStep(e,t){const i=(0,u.Ke)({title:(0,d.C8)(t.title,e,t),placeholder:`Please provide a new message for ${(0,n.Wh)(e.reference,{icon:!1})}`,value:e.message??e.reference?.message,prompt:"Enter new stash message"}),r=yield i;return(0,u.$V)(i,e,r)&&await(0,u.Wm)(i,e,r)?r:u.Vd}*renameCommandConfirmStep(e,t){const i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will rename ${(0,n.Wh)(e.reference)}`,item:e.subcommand}],void 0,{placeholder:`Confirm ${t.title}`,additionalButtons:[_._9,_.Nv],onDidClickButton:(t,i)=>{i===_._9?(0,J.Fw)(e.reference,{pin:!1,preserveFocus:!0}):i===_.Nv&&(0,J.ay)(e.reference,{select:!0,expand:!0})}}),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}}class StatusGitCommand extends u.tR{constructor(e,t){super(e,"status","status","Status",{description:"shows status information about a repository"});let i=0;null!=t?.state?.repo&&i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,status:void 0,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)break;e.repo=i}if(t.status=await e.repo.getStatus(),null==t.status)return;t.title=`${this.title}${(0,h.vk)(C.NE.Dot,2,2)}${(0,n.Wh)((0,n.xB)(t.status.branch,e.repo.path,{refType:"branch",name:t.status.branch,remote:!1,upstream:null!=t.status.upstream?{name:t.status.upstream,missing:!1}:void 0}),{icon:!1})}`;const r=yield*(0,d.up)(e,t);if(r!==u.Vd){if(r instanceof q.Wv){const t=yield*r.executeSteps(this.pickedVia);e.counter--,t===u.Vd&&(0,u.uZ)(e)}else if(r instanceof H.$w){(0,u.uZ)(e),r.execute();break}}else i&&e.counter--}}}class SwitchGitCommand extends u.tR{constructor(e,t){super(e,"switch","switch","Switch Branch",{description:"aka checkout, switches the current branch to a specified branch"});let i=0;null==t?.state?.repos||Array.isArray(t.state.repos)&&0===t.state.repos.length||i++,null!=t?.state?.reference&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}async execute(e){await o.window.withProgress({location:o.ProgressLocation.Notification,title:`Switching ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repositories`} to ${e.reference.name}`},(()=>Promise.all(e.repos.map((t=>t.switch(e.reference.ref,{createBranch:e.createBranch,progress:!1})))))),null!=e.fastForwardTo&&e.repos[0].merge("--ff-only",e.fastForwardTo.ref)}isMatch(e){return super.isMatch(e)||"checkout"===e}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"checkout"===e}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,showTags:!1,switchToLocalFrom:void 0,title:this.title};null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,A.GI)(e.repos))if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else{const i=yield*(0,d.j8)(e,t,{skipIfPossible:e.counter>=1});if(i===u.Vd)break;e.repos=i}if(e.counter<2||null==e.reference){const r=yield*(0,d.xC)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to switch to`});if(r===u.Vd){i&&e.counter--;continue}e.reference=r}if((0,n.UR)(e.reference)&&e.reference.remote){t.title=`Create Branch and ${this.title}`;const{values:i}=await this.container.git.getBranches(e.reference.repoPath,{filter:t=>t.upstream?.name===e.reference.name,sort:{orderBy:"date:desc"}});if(0===i.length){const i=yield*(0,d.f6)(e,t,{placeholder:"Please provide a name for the new branch",titleContext:` based on ${(0,n.Wh)(e.reference,{icon:!1})}`,value:e.createBranch??(0,n.Av)(e.reference)});if(i===u.Vd)continue;e.createBranch=i}else t.title=`${this.title} to Local Branch`,t.switchToLocalFrom=e.reference,e.reference=i[0],e.createBranch=void 0}else e.createBranch=void 0;if(this.confirm(e.confirm||null!=t.switchToLocalFrom)){const i=yield*this.confirmStep(e,t);if(i===u.Vd)continue;"switch+fast-forward"===i&&(e.fastForwardTo=t.switchToLocalFrom)}(0,u.uZ)(e),this.execute(e)}return e.counter<0?u.Vd:void 0}*confirmStep(e,t){let i;i=null!=t.switchToLocalFrom&&1===e.repos.length?[{label:`${t.title} and Fast-Forward`,description:"",detail:`Will switch to and fast-forward local ${(0,n.Wh)(e.reference)} in $(repo) ${e.repos[0].formattedName}`,item:"switch+fast-forward"}]:[];const r=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[{label:t.title,description:e.createBranch?"-b":"",detail:`Will ${e.createBranch?`create and switch to a new branch named ${e.createBranch} from ${(0,n.Wh)(e.reference)}`:`switch to ${null!=t.switchToLocalFrom?"local ":""}${(0,n.Wh)(e.reference)}`} in ${1===e.repos.length?`$(repo) ${e.repos[0].formattedName}`:`${e.repos.length} repositories`}`,item:"switch"},...i],void 0,{placeholder:`Confirm ${t.title}`}),s=yield r;return(0,u.i9)(r,e,s)?s[0].item:u.Vd}}const te=new Map([["create","Create"],["delete","Delete"]]);function ie(e,t){return null==t?e:`${te.get(t)} ${e}`}class TagGitCommand extends u.tR{subcommand;constructor(e,t){super(e,"tag","tag","Tag",{description:"create, or delete tags"});let i=0;if(null!=t?.state?.subcommand)switch(i++,t.state.subcommand){case"create":null!=t.state.reference&&i++,null!=t.state.name&&i++,null!=t.state.message&&i++;break;case"delete":null==t.state.references||Array.isArray(t.state.references)&&0===t.state.references.length||i++}null!=t?.state?.repo&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"delete"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.tagsView,showTags:!1,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;const t=yield*this.pickSubcommandStep(e);if(t===u.Vd)break;e.subcommand=t}if(this.subcommand=e.subcommand,e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)continue;e.repo=i}switch(t.title=ie("delete"===e.subcommand?"Tags":this.title,e.subcommand),e.subcommand){case"create":yield*this.createCommandSteps(e,t),e.name=void 0;break;case"delete":yield*this.deleteCommandSteps(e,t);break;default:(0,u.uZ)(e)}i&&e.counter--}return e.counter<0?u.Vd:void 0}*pickSubcommandStep(e){const t=(0,u.xf)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"create",description:"creates a new tag",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified tags",picked:"delete"===e.subcommand,item:"delete"}],buttons:[o.QuickInputButtons.Back]}),i=yield t;return(0,u.i9)(t,e,i)?i[0].item:u.Vd}async*createCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*(0,d.Yv)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to create the new tag from`,picked:e.reference?.ref??(await e.repo.getBranch())?.ref,titleContext:" from",value:(0,n.FT)(e.reference)?e.reference.ref:void 0});if(i===u.Vd)break;e.reference=i}if(e.counter<4||null==e.name){const i=yield*(0,d.fG)(e,t,{placeholder:"Please provide a name for the new tag",titleContext:` at ${(0,n.Wh)(e.reference,{capitalize:!0,icon:!1})}`,value:e.name??(0,n.Av)(e.reference)});if(i===u.Vd)continue;e.name=i}if(e.counter<5||null==e.message){const i=yield*this.createCommandInputMessageStep(e,t);if(i===u.Vd)continue;e.message=i}if(0===e.message.length||e.flags.includes("-m")||e.flags.push("-m"),this.confirm(e.confirm)){const i=yield*this.createCommandConfirmStep(e,t);if(i===u.Vd)continue;e.flags=i}(0,u.uZ)(e),e.repo.tag(...e.flags,...0!==e.message.length?[`"${e.message}"`]:[],e.name,e.reference.ref)}}async*createCommandInputMessageStep(e,t){const i=(0,u.Ke)({title:(0,d.C8)(`${t.title} at ${(0,n.Wh)(e.reference,{capitalize:!0,icon:!1})}`,e,t),placeholder:"Please provide an optional message to annotate the tag",value:e.message,prompt:"Enter optional message"}),r=yield i;return(0,u.$V)(i,e,r)&&await(0,u.Wm)(i,e,r)?r:u.Vd}*createCommandConfirmStep(e,t){const i=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,0!==e.message.length?["-m"]:[],{label:t.title,description:0!==e.message.length?"-m":"",detail:`Will create a new tag named ${e.name} at ${(0,n.Wh)(e.reference)}`}),c(e.flags,0!==e.message.length?["--force","-m"]:["--force"],{label:`Force ${t.title}`,description:"--force"+(0!==e.message.length?" -m":""),detail:`Will forcibly create a new tag named ${e.name} at ${(0,n.Wh)(e.reference)}`})],t),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}async*deleteCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null==e.references||Array.isArray(e.references)||(e.references=[e.references]),e.counter<3||null==e.references||0===e.references.length){t.title=ie("Tags",e.subcommand);const i=yield*(0,d.yY)(e,t,{picked:e.references?.map((e=>e.ref)),placeholder:"Choose tags to delete"});if(i===u.Vd)break;e.references=i}t.title=ie((0,h._6)("Tag",e.references.length,{only:!0}),e.subcommand);(yield*this.deleteCommandConfirmStep(e,t))!==u.Vd&&((0,u.uZ)(e),e.repo.tagDelete(e.references))}}*deleteCommandConfirmStep(e,t){const i=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will delete ${(0,n.Wh)(e.references)}`}],t),r=yield i;return(0,u.i9)(i,e,r)?void 0:u.Vd}}var re=i(8887),se=i(5025),oe=i(2674);function ne(e){if(null==e.repo||"string"==typeof e.repo)throw new Error("Missing repository")}const ae=new Map([["create","Create"],["delete","Delete"],["open","Open"]]);function ce(e,t){return null==t?e:`${ae.get(t)} ${e}`}class WorktreeGitCommand extends u.tR{subcommand;canSkipConfirmOverride;constructor(e,t){super(e,"worktree","worktree","Worktree",{description:"open, create, or delete worktrees"});let i=0;if(null!=t?.state?.subcommand)switch(i++,t.state.subcommand){case"create":null!=t.state.uri&&i++,null!=t.state.reference&&i++;break;case"delete":null==t.state.uris||Array.isArray(t.state.uris)&&0===t.state.uris.length||i++;break;case"open":null!=t.state.uri&&i++}null!=t?.state?.repo&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return this.canSkipConfirmOverride??!1}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.worktreesView,showTags:!1,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;const t=yield*this.pickSubcommandStep(e);if(t===u.Vd)break;e.subcommand=t}if(this.subcommand=e.subcommand,e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)continue;e.repo=i}e.repo=await e.repo.getMainRepository()??e.repo,ne(e);if((yield*(0,d.Oz)(e,t,re.x.Worktrees))===u.Vd)break;switch(t.title=ce("delete"===e.subcommand?"Worktrees":this.title,e.subcommand),e.subcommand){case"create":yield*this.createCommandSteps(e,t),e.uri=void 0;break;case"delete":null==e.uris||Array.isArray(e.uris)||(e.uris=[e.uris]),yield*this.deleteCommandSteps(e,t);break;case"open":yield*this.openCommandSteps(e,t);break;default:(0,u.uZ)(e)}i&&e.counter--}return e.counter<0?u.Vd:void 0}*pickSubcommandStep(e){const t=(0,u.xf)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"open",description:"opens the specified worktree",picked:"open"===e.subcommand,item:"open"},{label:"create",description:"creates a new worktree",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified worktrees",picked:"delete"===e.subcommand,item:"delete"}],buttons:[o.QuickInputButtons.Back]}),i=yield t;return(0,u.i9)(t,e,i)?i[0].item:u.Vd}async*createCommandSteps(e,t){for(null==t.defaultUri&&(t.defaultUri=await e.repo.getWorktreesDefaultUri()),null==e.flags&&(e.flags=[]),t.pickedUri=void 0,e.confirm=!0,this.canSkipConfirmOverride=void 0;this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*(0,d.Yv)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to create the new worktree for`,picked:e.reference?.ref??(await e.repo.getBranch())?.ref,titleContext:" for",value:(0,n.FT)(e.reference)?e.reference.ref:void 0});if(i===u.Vd)break;e.reference=i}if(e.counter<4||null==e.uri)if(null==e.reference||r.D.get("worktrees.promptForLocation",e.repo.folder)||null==t.defaultUri){const i=yield*this.createCommandChoosePathStep(e,t,{titleContext:` for ${(0,n.Wh)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,defaultUri:t.defaultUri});if(i===u.Vd)continue;e.uri=i,t.pickedUri=e.uri}else e.uri=t.defaultUri;if(this.confirm(e.confirm)){const i=yield*this.createCommandConfirmStep(e,t);if(i===u.Vd)continue;[e.uri,e.flags]=i}e.confirm=!0,this.canSkipConfirmOverride=void 0;if("branch"===e.reference?.refType&&e.reference?.remote&&!e.flags.includes("-b")){e.flags.push("-b"),e.createBranch=(0,n.Av)(e.reference);null!=await e.repo.getBranch(e.createBranch)&&(e.createBranch=e.reference.name)}if(e.flags.includes("-b")){let i;if(null!=e.createBranch){let t=await this.container.git.validateBranchOrTagName(e.repo.path,e.createBranch);if(t){t=null==await e.repo.getBranch(e.createBranch)}t||(i=e.createBranch,e.createBranch=void 0)}if(null==e.createBranch){const r=yield*(0,d.f6)(e,t,{placeholder:"Please provide a name for the new branch",titleContext:` from ${(0,n.Wh)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,value:i??e.createBranch??(0,n.Av)(e.reference)});if(r===u.Vd){e.flags=[];continue}e.createBranch=r}}const i=e.flags.includes("--direct")?e.uri:o.Uri.joinPath(e.uri,...(e.createBranch??e.reference.name).replace(/\\/g,"/").split("/"));let s;try{s=await e.repo.createWorktree(i,{commitish:e.reference?.name,createBranch:e.flags.includes("-b")?e.createBranch:void 0,detach:e.flags.includes("--detach"),force:e.flags.includes("--force")}),!1!==e.reveal&&(0,se.ay)(void 0,{select:!0,focus:!0})}catch(t){if(Z.P6.is(t,Z.hK.AlreadyCheckedOut)&&!e.flags.includes("--force")){const t={title:"Create New Branch"},i={title:"Create Anyway"},r={title:"Cancel",isCloseAffordance:!0},s=await o.window.showWarningMessage(`Unable to create the new worktree because ${(0,n.Wh)(e.reference,{icon:!1,quoted:!0})} is already checked out.\n\nWould you like to create a new branch for this worktree or forcibly create it anyway?`,{modal:!0},t,i,r);if(s===t){e.flags.push("-b"),this.canSkipConfirmOverride=!0,e.confirm=!1;continue}if(s===i){e.flags.push("--force"),this.canSkipConfirmOverride=!0,e.confirm=!1;continue}}else Z.P6.is(t,Z.hK.AlreadyExists)?o.window.showErrorMessage(`Unable to create a new worktree in '${oe.e.getFriendlyPath(i)}' because the folder already exists and is not empty.`,"OK"):(0,I.W8)(`Unable to create a new worktree in '${oe.e.getFriendlyPath(i)}.`)}if((0,u.uZ)(e),null==s)break;const a=r.D.get("worktrees.openAfterCreate");if("never"===a)break;if("prompt"===a){yield*this.openCommandSteps({subcommand:"open",repo:e.repo,uri:s.uri,counter:3,confirm:!0},t);break}queueMicrotask((()=>{switch(a){case"always":(0,T.ic)(s.uri,{location:"currentWindow"});break;case"alwaysNewWindow":(0,T.ic)(s.uri,{location:"newWindow"});break;case"onlyWhenEmpty":(0,T.ic)(s.uri,{location:o.workspace.workspaceFolders?.length?"currentWindow":"newWindow"})}}))}}async*createCommandChoosePathStep(e,t,i){const r=(0,u.jf)({show:async r=>{const s=null!=i?.defaultUri,n=await o.window.showInformationMessage(`Choose a location in which to create the worktree${i.titleContext}.`,{modal:!0},{title:"Choose Location"},...s?[{title:"Use Default Location"}]:[]);if(null==n)return $.Xe.Back;if("Use Default Location"===n.title)return i.defaultUri;const a=await o.window.showOpenDialog({canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1,defaultUri:t.pickedUri??e.uri??t.defaultUri,openLabel:"Select Worktree Location",title:`${(0,d.C8)(`Choose a Worktree Location${i.titleContext}`,e,t)}`});return null==a||0===a.length?$.Xe.Back:a[0]}}),s=yield r;return(0,u.$V)(r,e,s)&&await(0,u.Wm)(r,e,s)?s:u.Vd}*createCommandConfirmStep(e,t){const i=t.pickedUri??e.uri,r=(0,h.AO)(oe.e.getFriendlyPath(i),60);let s,a=!0;const l=e.repo.uri,p=`${(0,b.EZ)(l.path)}.worktrees`;l.toString()!==i.toString()?s=(0,b.$d)(i,l)?o.Uri.joinPath(l,"..",p):(0,b.EZ)(i.path)===p?i:o.Uri.joinPath(i,p):(s=o.Uri.joinPath(l,"..",p),a=!1);const m=e.createBranch??(null!=e.reference?(0,n.Av)(e.reference):void 0),g=m?o.Uri.joinPath(s,...m.replace(/\\/g,"/").split("/")):s,f=(0,h.AO)(oe.e.getFriendlyPath(g),65),w=(0,h.AO)(oe.e.getFriendlyPath(o.Uri.joinPath(s,"<new-branch-name>")),60),v="branch"===e.reference?.refType&&e.reference?.remote,y=(0,u.Tv)((0,d.C8)(`Confirm ${t.title} • ${(0,n.Wh)(e.reference,{icon:!1,label:!1})}`,e,t),[c(e.flags,v?["-b"]:[],{label:v?"Create Local Branch and Worktree":t.title,description:" in subfolder",detail:`Will create worktree in $(folder) ${f}`},s),c(e.flags,["-b"],{label:v?"Create New Local Branch and Worktree":"Create New Branch and Worktree",description:" in subfolder",detail:`Will create worktree in $(folder) ${w}`},s),...a?[(0,H.fz)(),c(e.flags,["--direct"],{label:v?"Create Local Branch and Worktree":t.title,description:" directly in folder",detail:`Will create worktree directly in $(folder) ${r}`},i),c(e.flags,["-b","--direct"],{label:v?"Create New Local Branch and Worktree":"Create New Branch and Worktree",description:" directly in folder",detail:`Will create worktree directly in $(folder) ${r}`},i)]:[]],t),C=yield y;return(0,u.i9)(y,e,C)?[C[0].context,C[0].item]:u.Vd}async*deleteCommandSteps(e,t){for(t.worktrees=await e.repo.getWorktrees(),null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.uris||0===e.uris.length){t.title=ce("Worktrees",e.subcommand);const i=yield*(0,d.Mb)(e,t,{filter:e=>e.main||!e.opened,includeStatus:!0,picked:e.uris?.map((e=>e.toString())),placeholder:"Choose worktrees to delete"});if(i===u.Vd)break;e.uris=i.map((e=>e.uri))}t.title=ce((0,h._6)("Worktree",e.uris.length,{only:!0}),e.subcommand);const i=yield*this.deleteCommandConfirmStep(e,t);if(i!==u.Vd){e.flags=i,(0,u.uZ)(e);for(const i of e.uris){let r=!1;do{r=!1;const s=e.flags.includes("--force");try{if(s){const e=t.worktrees.find((e=>e.uri.toString()===i.toString()));let r;try{r=await(e?.getStatus())}catch{}if(r?.hasChanges){const e={title:"Force Delete"},t={title:"Cancel",isCloseAffordance:!0};if(await o.window.showWarningMessage(`The worktree in '${i.fsPath}' has uncommitted changes.\n\nDeleting it will cause those changes to be FOREVER LOST.\nThis is IRREVERSIBLE!\n\nAre you sure you still want to delete it?`,{modal:!0},e,t)!==e)return}}await e.repo.deleteWorktree(i,{force:s})}catch(t){if(Z.Nk.is(t)){if(t.reason===Z.xe.MainWorkingTree)o.window.showErrorMessage("Unable to delete the main worktree");else if(!s){const s={title:"Force Delete"},n={title:"Cancel",isCloseAffordance:!0};await o.window.showErrorMessage(t.reason===Z.xe.HasChanges?`Unable to delete worktree because there are UNCOMMITTED changes in '${i.fsPath}'.\n\nForcibly deleting it will cause those changes to be FOREVER LOST.\nThis is IRREVERSIBLE!\n\nWould you like to forcibly delete it?`:`Unable to delete worktree in '${i.fsPath}'.\n\nWould you like to try to forcibly delete it?`,{modal:!0},s,n)===s&&(e.flags.push("--force"),r=!0)}}else(0,I.W8)(`Unable to delete worktree in '${i.fsPath}.`)}}while(r)}}}}*deleteCommandConfirmStep(e,t){const i=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:t.title,detail:`Will delete ${(0,h._6)("worktree",e.uris.length,{only:1===e.uris.length})}${1===e.uris.length?` in $(folder) ${oe.e.getFriendlyPath(e.uris[0])}`:""}`}),c(e.flags,["--force"],{label:`Force ${t.title}`,description:"including ANY UNCOMMITTED changes",detail:`Will forcibly delete ${(0,h._6)("worktree",e.uris.length,{only:1===e.uris.length})} ${1===e.uris.length?` in $(folder) ${oe.e.getFriendlyPath(e.uris[0])}`:""}`})],t),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}async*openCommandSteps(e,t){for(t.worktrees=await e.repo.getWorktrees(),null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.uri){t.title=ce("Worktree",e.subcommand);const i=yield*(0,d.UP)(e,t,{includeStatus:!0,picked:e.uri?.toString(),placeholder:"Choose worktree to open"});if(i===u.Vd)break;e.uri=i.uri}t.title=ce("Worktree",e.subcommand);const i=yield*this.openCommandConfirmStep(e,t);if(i===u.Vd)continue;e.flags=i,(0,u.uZ)(e);const r=t.worktrees.find((t=>t.uri.toString()===e.uri.toString()));if(null==r)break;e.flags.includes("--reveal-explorer")?(0,se.qM)(r):(0,T.ic)(r.uri,{location:(0,se.BC)(e.flags)})}}*openCommandConfirmStep(e,t){const i=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:t.title,detail:`Will open in the current window, the worktree in $(folder) ${oe.e.getFriendlyPath(e.uri)}`}),c(e.flags,["--new-window"],{label:`${t.title} in a New Window`,detail:`Will open in a new window, the worktree in $(folder) ${oe.e.getFriendlyPath(e.uri)}`}),c(e.flags,["--add-to-workspace"],{label:"Add Worktree to Workspace",detail:`Will add into the current workspace, the worktree in $(folder) ${oe.e.getFriendlyPath(e.uri)}`}),c(e.flags,["--reveal-explorer"],{label:"Reveal in File Explorer",detail:`Will open in the File Explorer, the worktree in $(folder) ${oe.e.getFriendlyPath(e.uri)}`})],t),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}}function le(e,t,i){const r=new PickCommandStep(e,t),s=r.find(t.command);return null==s?function*(){}():(r.setCommand(s,i),s.executeSteps())}class PickCommandStep{constructor(e,t){this.container=e;const i=(0,s.fw)("gitlens:hasVirtualFolders",!1),o=i||(0,s.fw)("gitlens:readonly",!1)||(0,s.fw)("gitlens:untrusted",!1);if(this.items=[o?void 0:new BranchGitCommand(e,"branch"===t?.command?t:void 0),o?void 0:new CherryPickGitCommand(e,"cherry-pick"===t?.command?t:void 0),i?void 0:new CoAuthorsGitCommand(e,"co-authors"===t?.command?t:void 0),o?void 0:new FetchGitCommand(e,"fetch"===t?.command?t:void 0),new LogGitCommand(e,"log"===t?.command?t:void 0),o?void 0:new MergeGitCommand(e,"merge"===t?.command?t:void 0),o?void 0:new PullGitCommand(e,"pull"===t?.command?t:void 0),o?void 0:new PushGitCommand(e,"push"===t?.command?t:void 0),o?void 0:new RebaseGitCommand(e,"rebase"===t?.command?t:void 0),o?void 0:new RemoteGitCommand(e,"remote"===t?.command?t:void 0),o?void 0:new ResetGitCommand(e,"reset"===t?.command?t:void 0),o?void 0:new RevertGitCommand(e,"revert"===t?.command?t:void 0),new SearchGitCommand(e,"search"===t?.command||"grep"===t?.command?t:void 0),new ShowGitCommand(e,"show"===t?.command?t:void 0),i?void 0:new StashGitCommand(e,"stash"===t?.command?t:void 0),i?void 0:new StatusGitCommand(e,"status"===t?.command?t:void 0),o?void 0:new SwitchGitCommand(e,"switch"===t?.command||"checkout"===t?.command?t:void 0),o?void 0:new TagGitCommand(e,"tag"===t?.command?t:void 0),i?void 0:new WorktreeGitCommand(e,"worktree"===t?.command?t:void 0)].filter((e=>null!=e)),"usage"===r.D.get("gitCommands.sortBy")){const e=this.container.storage.getWorkspace("gitComandPalette:usage");null!=e&&this.items.sort(((t,i)=>(e[i.key]??0)-(e[t.key]??0)))}this.hiddenItems=[]}buttons=[];hiddenItems;ignoreFocusOut=!1;items;matchOnDescription=!0;placeholder="Choose a git command";title="GitLens";_command;get command(){return this._command}find(e,t=!1){if(t){const t=e.toLowerCase();return this.items.find((e=>e.isFuzzyMatch(t)))??this.hiddenItems.find((e=>e.isFuzzyMatch(t)))}return this.items.find((t=>t.isMatch(e)))??this.hiddenItems.find((t=>t.isMatch(e)))}setCommand(e,t){null!=this._command&&(this._command.picked=!1),null!=e&&(e.picked=!0,e.pickedVia=t),this._command=e,null!=e&&this.updateCommandUsage(e.key,Date.now())}async updateCommandUsage(e,t){let i=this.container.storage.getWorkspace("gitComandPalette:usage");void 0===i&&(i=Object.create(null)),i[e]=t,await this.container.storage.storeWorkspace("gitComandPalette:usage",i)}}},2138:(e,t,i)=>{i.d(t,{_:()=>m});var r=i(5255),s=i(7462),o=i(439),n=i(6503),a=i(7925),c=i(635),l=i(9529),h=i(4336),u=i(7139),d=Object.defineProperty,p=Object.getOwnPropertyDescriptor;let m=class extends u.pu{constructor(e){super([r.Gh.OpenCommitOnRemote,r.Gh.Deprecated_OpenCommitInRemote,r.Gh.CopyRemoteCommitUrl]),this.container=e}static getMarkdownCommandArgs(e){const t="string"==typeof e?{sha:e}:e;return super.getMarkdownCommandArgsCore(r.Gh.OpenCommitOnRemote,t)}preExecute(e,t){let i=e.uri;if("editorLine"===e.type&&(t={...t,line:e.line}),(0,u.en)(e)){if(e.node.commit.isUncommitted)return Promise.resolve(void 0);t={...t,sha:e.node.commit.sha},i=e.node.uri}return(0,u.jT)(e)&&(t={sha:e.item.ref},i=e.uri),e.command===r.Gh.CopyRemoteCommitUrl&&(t={...t,clipboard:!0}),this.execute(e.editor,i,t)}async execute(e,t,i){let d=null!=(t=(0,u.SX)(t,e))?await s.YY.fromUri(t):void 0;const p=(await(0,c.hM)(d,e,i?.clipboard?"Copy Remote Commit URL":"Open Commit On Remote"))?.path;if(p){null==d&&(d=s.YY.fromRepoPath(p)),i={...i};try{if(null==i.sha){const t=i.line??e?.selection.active.line;if(null==t)return;const r=await this.container.git.getBlameForLine(d,t,e?.document);if(null==r)return void(0,a.zk)("Unable to open commit on remote provider");i.sha=r.commit.isUncommitted?await r.commit.getPreviousSha()??o.Ii:r.commit.sha}await(0,l.P0)(r.Gh.OpenOnRemote,{resource:{type:n.J.Commit,sha:i.sha},repoPath:p,clipboard:i.clipboard})}catch(e){h.Yd.error(e,"OpenCommitOnRemoteCommand"),(0,a.W8)("Unable to open commit on remote provider")}}}};m=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?p(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&d(t,i,o),o})([(0,l.WD)()],m)},4893:(e,t,i)=>{i.d(t,{D:()=>w});var r=i(9496),s=i(5255),o=i(6897),n=i(7462),a=i(4321),c=i(7925),l=i(1857),h=i(9729),u=i(9529),d=i(4336),p=i(4627),m=i(7139),g=Object.defineProperty,f=Object.getOwnPropertyDescriptor;let w=class extends m.pu{constructor(e){super([s.Gh.OpenFileAtRevision,s.Gh.OpenBlamePriorToChange]),this.container=e}static getMarkdownCommandArgs(e,t,i){let o;if(e instanceof r.Uri){o={revisionUri:e,line:i,annotationType:t}}else o=e;return super.getMarkdownCommandArgsCore(s.Gh.OpenFileAtRevision,o)}async preExecute(e,t){if(e.command===s.Gh.OpenBlamePriorToChange){if(null==(t={...t,annotationType:"blame"}).revisionUri&&null!=e.editor){const i=e.editor.selection.active.line;if(i>=0)try{const r=await n.YY.fromUri(e.editor.document.uri),s=await this.container.git.getBlameForLine(r,i);if(null!=s)if(s.commit.isUncommitted){const e=await s.commit.getPreviousComparisonUrisForLine(i);if(null==e?.previous)return void(0,c.RR)(s.commit);t.revisionUri=this.container.git.getRevisionUri(e.previous)}else{if(null==(null!=s?await(s?.commit.getPreviousSha()):void 0))return void(0,c.RR)(s.commit);t.revisionUri=this.container.git.getRevisionUri(s.commit.getGitUri(!0))}}catch(e){d.Yd.error(e,"OpenBlamePriorToChangeCommand")}}if(null==t.revisionUri)return void(0,c.W8)("Unable to open blame")}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=(0,m.SX)(t,e)))return;const r=await n.YY.fromUri(t);null==(i={...i}).line&&(i.line=e?.selection.active.line??0);try{if(null==i.revisionUri){const e=this.container.git.getLogForFile(r.repoPath,r.fsPath).then((e=>e??(r.sha?this.container.git.getLogForFile(r.repoPath,r.fsPath,{ref:r.sha}):void 0))),t=`Open ${"blame"===i.annotationType?"Blame":"File"} at Revision${(0,p.vk)(s.NE.Dot,2,2)}`,n=await(0,l.D)(e,`${t}${r.getFormattedFileName({suffix:r.sha?`:${(0,a.zL)(r.sha)}`:void 0,truncateTo:s.d$-t.length})}`,`Choose a commit to ${"blame"===i.annotationType?"blame":"open"} the file revision from`,{picked:r.sha,keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await(0,o.YS)(t.item.file,t.item,{annotationType:i.annotationType,line:i.line,preserveFocus:!0,preview:!1})},showOtherReferences:[h.$w.fromCommand("Choose a Branch or Tag...",s.Gh.OpenFileAtRevisionFrom),h.$w.fromCommand("Choose a Stash...",s.Gh.OpenFileAtRevisionFrom,{stash:!0})]});if(null==n?.file)return;return void await(0,o.YS)(n.file,n,{annotationType:i.annotationType,line:i.line,...i.showOptions})}await(0,o.YS)(i.revisionUri,{annotationType:i.annotationType,line:i.line,...i.showOptions})}catch(e){d.Yd.error(e,"OpenFileAtRevisionCommand"),(0,c.W8)("Unable to open file at revision")}}};w=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?f(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o),o})([(0,u.WD)()],w)},3016:(e,t,i)=>{i.d(t,{DY:()=>f,Ft:()=>h,I4:()=>a,Lp:()=>b,Mn:()=>l,My:()=>o,Nv:()=>p,Q0:()=>n,_9:()=>g,_r:()=>d,cq:()=>v,eY:()=>c,ip:()=>m,jQ:()=>ToggleQuickInputButton,vU:()=>w,v_:()=>u,zY:()=>y});var r=i(9496),s=i(3599);class ToggleQuickInputButton{constructor(e,t=!1){this.state=e,this._on=t}get iconPath(){const e=this.getToggledState().icon;return"string"==typeof e?{dark:r.Uri.file(s.W.instance.context.asAbsolutePath(`images/dark/${e}.svg`)),light:r.Uri.file(s.W.instance.context.asAbsolutePath(`images/light/${e}.svg`))}:e}get tooltip(){return this.getToggledState().tooltip}get on(){return this._on}set on(e){this._on=e}getState(){return"function"==typeof this.state?this.state():this.state}getToggledState(){return this.on?this.getState().on:this.getState().off}}class SelectableQuickInputButton extends ToggleQuickInputButton{constructor(e,t,i=!1){super({off:{tooltip:e,icon:t.off},on:{tooltip:e,icon:t.on}},i)}}const o={iconPath:new r.ThemeIcon("sync"),tooltip:"Fetch"},n={iconPath:new r.ThemeIcon("refresh"),tooltip:"Load More"},a=class extends SelectableQuickInputButton{constructor(e=!1){super("Match Case",{off:"icon-match-case",on:"icon-match-case-selected"},e)}},c=class extends SelectableQuickInputButton{constructor(e=!1){super("Match All",{off:"icon-match-all",on:"icon-match-all-selected"},e)}},l=class extends SelectableQuickInputButton{constructor(e=!1){super("Match using Regular Expressions",{off:"icon-match-regex",on:"icon-match-regex-selected"},e)}},h={iconPath:new r.ThemeIcon("git-commit"),tooltip:"Choose a Specific Commit"},u=class extends ToggleQuickInputButton{constructor(e=!1,t,i){super((()=>({on:{tooltip:"Choose a Specific Commit",icon:new r.ThemeIcon("git-commit")},off:{tooltip:"Choose a Branch"+(t.showTags?" or Tag":""),icon:new r.ThemeIcon("git-branch")}})),e),this.onDidClick=i}},d={iconPath:new r.ThemeIcon("empty-window"),tooltip:"Open in New Window"},p={iconPath:new r.ThemeIcon("search"),tooltip:"Reveal in Side Bar"},m={iconPath:new r.ThemeIcon("settings-gear"),tooltip:"Set as Default Remote"},g={iconPath:new r.ThemeIcon("eye"),tooltip:"Open Details"},f={iconPath:new r.ThemeIcon("compare-changes"),tooltip:"Open Changes"},w={iconPath:new r.ThemeIcon("link-external"),tooltip:"Show Results in Side Bar"},v=class extends SelectableQuickInputButton{constructor(e=!1){super("Show Tags",{off:new r.ThemeIcon("tag"),on:"icon-tag-selected"},e)}},y={iconPath:new r.ThemeIcon("check"),tooltip:"Will always confirm"},b=class extends ToggleQuickInputButton{constructor(e=!1,t){super((()=>({on:{tooltip:"Will confirm",icon:{dark:r.Uri.file(s.W.instance.context.asAbsolutePath("images/dark/icon-check.svg")),light:r.Uri.file(s.W.instance.context.asAbsolutePath("images/light/icon-check.svg"))}},off:{tooltip:"Skips confirm",icon:{dark:r.Uri.file(s.W.instance.context.asAbsolutePath("images/dark/icon-no-check.svg")),light:r.Uri.file(s.W.instance.context.asAbsolutePath("images/light/icon-no-check.svg"))}}})),e),this.onDidClick=t}}},847:(e,t,i)=>{i.d(t,{B$:()=>U,C8:()=>E,FO:()=>q,KT:()=>ne,Kf:()=>V,Lt:()=>X,Mb:()=>oe,NQ:()=>H,Oz:()=>pe,Qp:()=>ie,Rj:()=>J,UP:()=>se,Yv:()=>j,bR:()=>Z,f6:()=>G,fD:()=>ce,fG:()=>Y,j8:()=>te,lA:()=>ee,nI:()=>le,s4:()=>K,sd:()=>Q,up:()=>ue,v$:()=>L,xC:()=>z,yY:()=>re});var r=i(5255),s=i(3599),o=i(3401),n=i(6897),a=i(7445),c=i(4155),l=i(8834),h=i(252),u=i(6713),d=i(5025),p=i(5367),m=i(6450),g=i(4321),f=i(3050),w=i(6503),v=i(3646),y=i(9502),b=i(4794),C=i(3931),A=i(9729),k=i(3530),P=i(1742),S=i(5009),D=i(4968),R=i(2800),$=i(5148),_=i(1774),F=i(3105),T=i(7469),x=i(4627),I=i(2509),O=i(4239),B=i(3016);function E(e,t,i,s){if(1===i.repos.length)return s?`${e}${(0,x.$G)(s,r.d$-e.length)}`:e;let o;return o=null!=t.repo?`${s??""}${(0,x.vk)(r.NE.Dot,2,2)}${t.repo.formattedName}`:1===t.repos.length?`${s??""}${(0,x.vk)(r.NE.Dot,2,2)}${t.repos[0].formattedName}`:`${(0,x.vk)(r.NE.Dot,2,2)}${t.repos.length} repositories`,`${e}${(0,x.$G)(o,r.d$-e.length)}`}async function W(e,t){return U(e,["branches"],{buttons:t?.buttons,filter:null!=t?.filter?{branches:t.filter}:void 0,picked:t?.picked,sort:null==t?.sort||{branches:t.sort}})}async function N(e,t){if(null==e)return[];return(await e.getRemotes(null!=t?.filter?{filter:t.filter}:void 0)).map((e=>(0,P.vl)(e,null!=t?.picked&&("string"==typeof t.picked?e.name===t.picked:t.picked.includes(e.name)),{buttons:t?.buttons,upstream:!0})))}async function M(e,{buttons:t,filter:i,includeStatus:r,picked:s}){const o=e instanceof v._j?await e.getWorktrees():e;return Promise.all([...o.filter((e=>null==i||i(e))).map((async e=>{let i,o=!1;if(r)try{i=await e.getStatus()}catch{o=!0}return(0,P.E0)(e,null!=s&&("string"==typeof s?e.uri.toString()===s:s.includes(e.uri.toString())),o,{buttons:t,path:!0,status:i})}))])}async function U(e,t,{buttons:i,filter:r,picked:s,sort:o}={}){if(null==e)return[];let n,a,c=!1;if(e instanceof v._j||1===e.length){c=!0;const i=e instanceof v._j?e:e[0],[s,l]=await Promise.allSettled([t.includes("branches")?i.getBranches({filter:r?.branches,sort:"boolean"==typeof o?o:o?.branches}):void 0,t.includes("tags")?i.getTags({filter:r?.tags,sort:!0}):void 0]);n=(0,T.Sb)(s)?.values??[],a=(0,T.Sb)(l)?.values??[]}else{const[i,s]=await Promise.allSettled([t.includes("branches")?Promise.allSettled(e.map((e=>e.getBranches({filter:r?.branches,sort:"boolean"==typeof o?o:o?.branches})))):void 0,t.includes("tags")?Promise.allSettled(e.map((e=>e.getTags({filter:r?.tags,sort:"boolean"==typeof o?o:o?.tags})))):void 0]),c="fulfilled"===i.status?i.value?.filter((e=>"fulfilled"===e.status))?.map((e=>e.value.values)):void 0,l="fulfilled"===s.status?s.value?.filter((e=>"fulfilled"===e.status))?.map((e=>e.value.values)):void 0;t.includes("branches")&&null!=c&&(n=(0,p.YF)((0,R.jV)(c,((e,t)=>e.name===t.name)))),t.includes("tags")&&null!=l&&(a=(0,y.Pj)((0,R.jV)(l,((e,t)=>e.name===t.name))))}return null!=n&&0!==n.length||null!=a&&0!==a.length?null==n||0===n.length||null!=a&&0!==a.length?null==a||0===a.length||null!=n&&0!==n.length?[(0,A.fz)("Branches"),...await Promise.all(n.filter((e=>!e.remote)).map((e=>(0,P.RE)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,current:!!c&&"checkmark",ref:c,status:c})))),(0,A.fz)("Tags"),...a.map((e=>(0,P.MH)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,message:!1,ref:c,type:!0}))),(0,A.fz)("Remote Branches"),...await Promise.all(n.filter((e=>e.remote)).map((e=>(0,P.RE)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,current:!!c&&"checkmark",ref:c,status:c,type:"remote"}))))]:a.map((e=>(0,P.MH)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,message:!1,ref:c}))):[(0,A.fz)("Branches"),...await Promise.all(n.filter((e=>!e.remote)).map((e=>(0,P.RE)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,current:!!c&&"checkmark",ref:c,status:c,type:"remote"})))),(0,A.fz)("Remote Branches"),...await Promise.all(n.filter((e=>e.remote)).map((e=>(0,P.RE)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,current:!!c&&"checkmark",ref:c,status:c,type:"remote"}))))]:[]}function L(e,t){return async(i,r)=>{let o=!1;if(r.startsWith("#")&&(o=!0,r=r.substring(1)),null==e)return!1;if(Array.isArray(e)){if(1!==e.length)return!1;e=e[0]}if(o&&t?.ranges&&(0,g.yk)(r))return i.items=[(0,P.RP)(r,e.path,!0,{alwaysShow:!0,buttons:t?.buttons,ref:!1,icon:!1})],!0;if(!await s.W.instance.git.validateReference(e.path,r))return!!o&&(i.items=[(0,k.fw)(k.Xe.Back,!0,{label:"Enter a reference or commit SHA"})],!0);if(!o&&await s.W.instance.git.hasBranchOrTag(e.path,{filter:{branches:e=>e.name.includes(r),tags:e=>e.name.includes(r)}}))return!1;const n=await s.W.instance.git.getCommit(e.path,r);return i.items=[(0,P.YY)(n,!0,{alwaysShow:!0,buttons:t?.buttons,compact:!0,icon:!0})],!0}}async function*G(e,t,i){const r=(0,O.Ke)({title:E(`${t.title}${i.titleContext??""}`,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter branch name",validate:async t=>{if(null==t)return[!1,void 0];if(0===(t=t.trim()).length)return[!1,"Please enter a valid branch name"];if("repo"in e){if(!await s.W.instance.git.validateBranchOrTagName(e.repo.path,t))return[!1,`'${t}' isn't a valid branch name`];return await e.repo.getBranch(t)?[!1,`A branch named '${t}' already exists`]:[!0,void 0]}let i=!0;for(const r of e.repos){if(i=await s.W.instance.git.validateBranchOrTagName(r.path,t),!i)return[!1,`'${t}' isn't a valid branch name`];if(await r.getBranch(t))return[!1,`A branch named '${t}' already exists`]}return[!0,void 0]}}),o=yield r;return(0,O.$V)(r,e,o)&&await(0,O.Wm)(r,e,o)?o:O.Vd}async function*H(e,t,i){const r=(0,O.Ke)({title:E(`${t.title}${i.titleContext??""}`,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter remote name",validate:async t=>{if(null==t)return[!1,void 0];if(0===(t=t.trim()).length)return[!1,"Please enter a valid remote name"];if(!!/[^a-zA-Z0-9-_.]/.test(t))return[!1,`'${t}' isn't a valid remote name`];if("repo"in e){if(0!==(await e.repo.getRemotes({filter:e=>e.name===t})).length)return[!1,`A remote named '${t}' already exists`]}return[!0,void 0]}}),s=yield r;return(0,O.$V)(r,e,s)&&await(0,O.Wm)(r,e,s)?s:O.Vd}async function*V(e,t,i){const r=(0,O.Ke)({title:E(`${t.title}${i.titleContext??""}`,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter remote URL",validate:e=>{if(null==e)return[!1,void 0];if(0===(e=e.trim()).length)return[!1,"Please enter a valid remote URL"];const t=b.gK.test(e);return[t,t?void 0:`'${e}' isn't a valid remote URL`]}}),s=yield r;return(0,O.$V)(r,e,s)&&await(0,O.Wm)(r,e,s)?s:O.Vd}async function*Y(e,t,i){const r=(0,O.Ke)({title:E(`${t.title}${i.titleContext??""}`,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter tag name",validate:async t=>{if(null==t)return[!1,void 0];if(0===(t=t.trim()).length)return[!1,"Please enter a valid tag name"];if("repo"in e){const i=await s.W.instance.git.validateBranchOrTagName(e.repo.path,t);return[i,i?void 0:`'${t}' isn't a valid tag name`]}let i=!0;for(const r of e.repos)if(i=await s.W.instance.git.validateBranchOrTagName(r.path,t),!i)return[!1,`'${t}' isn't a valid branch name`];return[!0,void 0]}}),o=yield r;return(0,O.$V)(r,e,o)&&await(0,O.Wm)(r,e,o)?o:O.Vd}async function*Q(e,t,{filter:i,picked:r,placeholder:s,titleContext:n}){const a=await W(e.repo,{buttons:[B.Nv],filter:i,picked:r}),c=(0,O.xf)({title:E(`${t.title}${n??""}`,e,t),placeholder:0===a.length?`No branches found in ${e.repo.formattedName}`:s,matchOnDetail:!0,items:0===a.length?[(0,k.fw)(k.Xe.Back,!0),(0,k.fw)(k.Xe.Cancel)]:a,onDidClickItemButton:(e,t,{item:i})=>{t===B.Nv&&o.ay(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await o.ay(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}}),l=yield c;return(0,O.i9)(c,e,l)?l[0].item:O.Vd}async function*q(e,t,{filter:i,picked:r,placeholder:s,sort:n,titleContext:a}){const c=await W(e.repo,{buttons:[B.Nv],filter:i,picked:r,sort:n}),l=(0,O.xf)({multiselect:0!==c.length,title:E(`${t.title}${a??""}`,e,t),placeholder:0===c.length?`No branches found in ${e.repo.formattedName}`:s,matchOnDetail:!0,items:0===c.length?[(0,k.fw)(k.Xe.Back,!0),(0,k.fw)(k.Xe.Cancel)]:c,onDidClickItemButton:(e,t,{item:i})=>{t===B.Nv&&o.ay(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await o.ay(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}}),h=yield l;return(0,O.i9)(l,e,h)?h.map((e=>e.item)):O.Vd}async function*j(e,t,{filter:i,picked:s,placeholder:a,titleContext:c,value:l,additionalButtons:h,ranges:d}){t.showTags=!0;const p=new B.cq(t.showTags),m=async()=>U(e.repo,t.showTags?["branches","tags"]:["branches"],{buttons:"boolean"==typeof t.pickCommitForItem?[B.Ft,B.Nv]:[B.Nv],filter:i,picked:s,sort:!0}),f=await m(),w=(0,O.xf)({title:E(`${t.title}${c??""}`,e,t),placeholder:0===f.length?`No branches${t.showTags?" or tags":""} found in ${e.repo.formattedName}`:`${"string"==typeof a?a:a(t)}${r.NE.Space.repeat(3)}(or enter a reference using #)`,matchOnDescription:!0,matchOnDetail:!0,value:l,selectValueWhenShown:!0,items:0===f.length?[(0,k.fw)(k.Xe.Back,!0),(0,k.fw)(k.Xe.Cancel)]:f,additionalButtons:[...h??[],p],onDidClickItemButton:(e,i,{item:r})=>i===B.Ft?(t.pickCommitForItem=!0,!0):(i===B.Nv&&((0,g.UR)(r)?o.ay(r,{select:!0,focus:!1,expand:!0}):(0,g.gA)(r)?u.ay(r,{select:!0,focus:!1,expand:!0}):(0,g.FT)(r)&&n.Fw(r,{pin:!1,preserveFocus:!0})),!1),onDidClickButton:async(i,s)=>{if(s===p){i.busy=!0;try{t.showTags=!t.showTags,p.on=t.showTags;const s=await m();i.placeholder=0===s.length?`${e.repo.formattedName} has no branches${t.showTags?" or tags":""}`:`${"string"==typeof a?a:a(t)}${r.NE.Space.repeat(3)}(or enter a reference using #)`,i.items=s}finally{i.busy=!1}}},keys:["right","alt+right","ctrl+right"],onDidPressKey:e=>{if(0===e.activeItems.length)return;const t=e.activeItems[0].item;(0,g.UR)(t)?o.ay(t,{select:!0,focus:!1,expand:!0}):(0,g.gA)(t)?u.ay(t,{select:!0,focus:!1,expand:!0}):(0,g.FT)(t)&&n.Fw(t,{pin:!1,preserveFocus:!0})},onValidateValue:L(e.repo,{ranges:d})}),v=yield w;return(0,O.i9)(w,e,v)?v[0].item:O.Vd}async function*z(e,t,{filter:i,picked:s,placeholder:a,titleContext:c,value:l}){t.showTags=1===e.repos.length;const h=new B.cq(t.showTags),d=()=>U(e.repos,t.showTags?["branches","tags"]:["branches"],{buttons:[B.Nv],filter:{branches:1===e.repos.length?void 0:e=>!e.remote,...i},picked:s??e.reference?.ref,sort:{branches:{orderBy:"date:desc"},tags:{orderBy:"date:desc"}}}),p=await d(),m=(0,O.xf)({title:E(`${t.title}${c??""}`,e,t),placeholder:0===p.length?`No ${1===e.repos.length?"":"common "}branches${t.showTags?" or tags":""} found in ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repositories`}`:`${"string"==typeof a?a:a(t)}${r.NE.Space.repeat(3)}(or enter a reference using #)`,matchOnDescription:!0,matchOnDetail:!0,value:l??((0,g.FT)(e.reference)?e.reference.ref:void 0),selectValueWhenShown:!0,items:0===p.length?[(0,k.fw)(k.Xe.Back,!0),(0,k.fw)(k.Xe.Cancel)]:p,additionalButtons:[h],onDidClickItemButton:(e,t,{item:i})=>{t===B.Nv&&((0,g.UR)(i)?o.ay(i,{select:!0,focus:!1,expand:!0}):(0,g.gA)(i)?u.ay(i,{select:!0,focus:!1,expand:!0}):(0,g.FT)(i)&&n.Fw(i,{pin:!1,preserveFocus:!0}))},onDidClickButton:async(i,s)=>{if(s===h){i.busy=!0;try{t.showTags=!t.showTags,h.on=t.showTags;const s=await d();i.placeholder=0===s.length?`No ${1===e.repos.length?"":"common "}branches${t.showTags?" or tags":""} found in ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repositories`}`:`${"string"==typeof a?a:a(t)}${r.NE.Space.repeat(3)}(or enter a reference using #)`,i.items=s}finally{i.busy=!1}}},keys:["right","alt+right","ctrl+right"],onDidPressKey:e=>{if(0===e.activeItems.length)return;const t=e.activeItems[0].item;(0,g.UR)(t)?o.ay(t,{select:!0,focus:!1,expand:!0}):(0,g.gA)(t)?u.ay(t,{select:!0,focus:!1,expand:!0}):(0,g.FT)(t)&&n.Fw(t,{pin:!1,preserveFocus:!0})},onValidateValue:L(e.repos)}),f=yield m;return(0,O.i9)(m,e,f)?f[0].item:O.Vd}async function*K(e,t,{ignoreFocusOut:i,log:r,onDidLoadMore:s,picked:o,placeholder:a,showInSideBarCommand:c,showInSideBarButton:l,titleContext:h}){function u(e){if(null==e)return[(0,k.fw)(k.Xe.Back,!0),(0,k.fw)(k.Xe.Cancel)];const t=[B._9,B.Nv];return null!=(0,F.Ps)(e.commits)?.[1].file&&t.splice(0,0,B.DY),[...(0,F.UI)(e.commits.values(),(e=>(0,P.YY)(e,null!=o&&("string"==typeof o?e.ref===o:o.includes(e.ref)),{buttons:t,compact:!0,icon:!0}))),...e?.hasMore?[(0,k.fw)(k.Xe.LoadMore)]:[]]}const d=(0,O.xf)({title:E(`${t.title}${h??""}`,e,t),placeholder:"string"==typeof a?a:a(t,r),ignoreFocusOut:i,matchOnDescription:!0,matchOnDetail:!0,value:"string"==typeof o&&0===r?.count?o:void 0,selectValueWhenShown:!0,items:null!=c?[c,...u(r)]:u(r),onDidLoadMore:async e=>(e.keepScrollPosition=!0,r=await(r?.more?.($.D.get("advanced.maxListItems"))),s?.(r),"string"!=typeof a&&(e.placeholder=a(t,r)),u(r)),additionalButtons:[...null!=l?.button?[l?.button]:[],...r?.hasMore?[B.Q0]:[]],onDidClickItemButton:(e,t,i)=>{if(!A.$w.is(i))switch(t){case B._9:n.Fw(i.item,{pin:!1,preserveFocus:!0});break;case B.Nv:n.ay(i.item,{select:!0,focus:!1,expand:!0});break;case B.DY:{const e=i.item.file?.path;null!=e&&n.vw(e,i.item);break}}},onDidClickButton:(e,t)=>{if(null==r)return;const i=e.activeItems.filter((e=>!A.$w.is(e)));t===l?.button&&l.onDidClick(i)},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{if(0===e.activeItems.length)return;const i=e.activeItems.filter((e=>!A.$w.is(e)));"ctrl+right"===t?n.Fw(i[0].item,{pin:!1,preserveFocus:!0}):await n.ay(i[0].item,{select:!0,focus:!1,expand:!0})},onValidateValue:L(e.repo,{buttons:[B._9,B.Nv]})}),p=yield d;return(0,O.i9)(d,e,p)?A.$w.is(p[0])?((0,O.uZ)(e),await p[0].execute(),O.Vd):p[0].item:O.Vd}function*J(e,t,{log:i,onDidLoadMore:r,picked:s,placeholder:o,titleContext:a}){function c(e){return null==e?[(0,k.fw)(k.Xe.Back,!0),(0,k.fw)(k.Xe.Cancel)]:[...(0,F.UI)(e.commits.values(),(e=>(0,P.YY)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:[B._9,B.Nv],compact:!0,icon:!0})))]}const l=(0,O.xf)({title:E(`${t.title}${a??""}`,e,t),multiselect:null!=i,placeholder:"string"==typeof o?o:o(t,i),matchOnDescription:!0,matchOnDetail:!0,items:c(i),onDidLoadMore:async e=>(e.keepScrollPosition=!0,i=await(i?.more?.($.D.get("advanced.maxListItems"))),r?.(i),"string"!=typeof o&&(e.placeholder=o(t,i)),c(i)),additionalButtons:[...i?.hasMore?[B.Q0]:[]],onDidClickItemButton:(e,t,{item:i})=>{switch(t){case B._9:n.Fw(i,{pin:!1,preserveFocus:!0});break;case B.Nv:n.ay(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{0!==e.activeItems.length&&("ctrl+right"===t?n.Fw(e.activeItems[0].item,{pin:!1,preserveFocus:!0}):await n.ay(e.activeItems[0].item,{select:!0,focus:!1,expand:!0}))}}),h=yield l;return(0,O.i9)(l,e,h)?h.map((e=>e.item)):O.Vd}async function*Z(e,t,i="Choose contributors"){const r=(await s.W.instance.git.getOrOpenScmRepository(e.repo.path))?.inputBox.value,o=(0,O.xf)({title:E(t.title,e,t),allowEmpty:!0,multiselect:!0,placeholder:i,matchOnDescription:!0,items:(await s.W.instance.git.getContributors(e.repo.path)).map((e=>(0,P.RI)(e,r?.includes(e.getCoauthor()),{buttons:[B.Nv]}))),onDidClickItemButton:(e,t,{item:i})=>{t===B.Nv&&a.a(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:e=>{0!==e.activeItems.length&&a.a(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}}),n=yield o;return(0,O.i9)(o,e,n)?n.map((e=>e.item)):O.Vd}async function*X(e,t,{filter:i,picked:r,placeholder:s,titleContext:o}){const n=await N(e.repo,{buttons:[B.Nv],filter:i,picked:r}),a=(0,O.xf)({title:E(`${t.title}${o??""}`,e,t),placeholder:0===n.length?`No remotes found in ${e.repo.formattedName}`:s,matchOnDetail:!0,items:0===n.length?[(0,k.fw)(k.Xe.Back,!0),(0,k.fw)(k.Xe.Cancel)]:n,onDidClickItemButton:(e,t,{item:i})=>{t===B.Nv&&c.ay(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await c.ay(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}}),l=yield a;return(0,O.i9)(a,e,l)?l[0].item:O.Vd}async function*ee(e,t,i="Choose a repository"){if("string"==typeof e.repo&&(e.repo=s.W.instance.git.getRepository(e.repo),null!=e.repo))return e.repo;const r=e.repo??await s.W.instance.git.getOrOpenRepositoryForEditor(),o=(0,O.xf)({title:t.title,placeholder:i,items:0===t.repos.length?[(0,k.fw)(k.Xe.Cancel)]:await Promise.all(t.repos.map((e=>(0,P.FO)(e,e.id===r?.id,{branch:!0,buttons:[B.Nv],fetched:!0,status:!0})))),onDidClickItemButton:(e,i,{item:r})=>{i===B.Nv&&l.ay(r.path,t.associatedView,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:e=>{0!==e.activeItems.length&&l.ay(e.activeItems[0].item.path,t.associatedView,{select:!0,focus:!1,expand:!0})}}),n=yield o;return(0,O.i9)(o,e,n)?n[0].item:O.Vd}async function*te(e,t,i){let r;if(i={placeholder:"Choose repositories",skipIfPossible:!1,...i},null!=e.repos)if((0,R.GI)(e.repos)){if(r=(0,R.DZ)(e.repos,(e=>t.repos.find((t=>t.path===e)))),i.skipIfPossible&&0!==r.length&&e.repos.length===r.length)return r}else r=e.repos;else{const e=await s.W.instance.git.getOrOpenRepositoryForEditor();r=null!=e?[e]:[]}const o=(0,O.xf)({multiselect:!0,title:t.title,placeholder:i.placeholder,items:0===t.repos.length?[(0,k.fw)(k.Xe.Cancel)]:await Promise.all(t.repos.map((e=>(0,P.FO)(e,r.some((t=>t.id===e.id)),{branch:!0,buttons:[B.Nv],fetched:!0,status:!0})))),onDidClickItemButton:(e,i,{item:r})=>{i===B.Nv&&l.ay(r.path,t.associatedView,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:e=>{0!==e.activeItems.length&&l.ay(e.activeItems[0].item.path,t.associatedView,{select:!0,focus:!1,expand:!0})}}),n=yield o;return(0,O.i9)(o,e,n)?n.map((e=>e.item)):O.Vd}function*ie(e,t,{ignoreFocusOut:i,stash:r,picked:s,placeholder:o,titleContext:n}){const a=(0,O.xf)({title:E(`${t.title}${n??""}`,e,t),placeholder:"string"==typeof o?o:o(t,r),ignoreFocusOut:i,matchOnDescription:!0,matchOnDetail:!0,items:null==r?[(0,k.fw)(k.Xe.Back,!0),(0,k.fw)(k.Xe.Cancel)]:[...(0,F.UI)(r.commits.values(),(e=>(0,P.YY)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:[B._9],compact:!0,icon:!0})))],onDidClickItemButton:(e,t,{item:i})=>{t===B._9&&h.Fw(i,{pin:!1,preserveFocus:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await h.Fw(e.activeItems[0].item,{pin:!1,preserveFocus:!0})}}),c=yield a;return(0,O.i9)(a,e,c)?c[0].item:O.Vd}async function*re(e,t,{filter:i,picked:r,placeholder:s,titleContext:o}){const n=await async function(e,t){return U(e,["tags"],{buttons:t?.buttons,filter:null!=t?.filter?{tags:t.filter}:void 0,picked:t?.picked,sort:null==t?.sort||{tags:t.sort}})}(e.repo,{buttons:[B.Nv],filter:i,picked:r}),a=(0,O.xf)({multiselect:0!==n.length,title:E(`${t.title}${o??""}`,e,t),placeholder:0===n.length?`No tags found in ${e.repo.formattedName}`:s,matchOnDetail:!0,items:0===n.length?[(0,k.fw)(k.Xe.Back,!0),(0,k.fw)(k.Xe.Cancel)]:n,onDidClickItemButton:(e,t,{item:i})=>{t===B.Nv&&u.ay(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await u.ay(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}}),c=yield a;return(0,O.i9)(a,e,c)?c.map((e=>e.item)):O.Vd}async function*se(e,t,{filter:i,includeStatus:r,picked:s,placeholder:o,titleContext:n}){const a=await M(t.worktrees??e.repo,{buttons:[B._r,B.Nv],filter:i,includeStatus:r,picked:s}),c=(0,O.xf)({title:E(`${t.title}${n??""}`,e,t),placeholder:0===a.length?`No worktrees found in ${e.repo.formattedName}`:o,matchOnDetail:!0,items:0===a.length?[(0,k.fw)(k.Xe.Back,!0),(0,k.fw)(k.Xe.Cancel)]:a,onDidClickItemButton:(e,t,{item:i})=>{switch(t){case B._r:(0,I.ic)(i.uri,{location:"newWindow"});break;case B.Nv:d.ay(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await d.ay(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}}),l=yield c;return(0,O.i9)(c,e,l)?l[0].item:O.Vd}async function*oe(e,t,{filter:i,includeStatus:r,picked:s,placeholder:o,titleContext:n}){const a=await M(t.worktrees??e.repo,{buttons:[B._r,B.Nv],filter:i,includeStatus:r,picked:s}),c=(0,O.xf)({multiselect:0!==a.length,title:E(`${t.title}${n??""}`,e,t),placeholder:0===a.length?`No worktrees found in ${e.repo.formattedName}`:o,matchOnDetail:!0,items:0===a.length?[(0,k.fw)(k.Xe.Back,!0),(0,k.fw)(k.Xe.Cancel)]:a,onDidClickItemButton:(e,t,{item:i})=>{switch(t){case B._r:(0,I.ic)(i.uri,{location:"newWindow"});break;case B.Nv:d.ay(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await d.ay(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}}),l=yield c;return(0,O.i9)(c,e,l)?l.map((e=>e.item)):O.Vd}async function*ne(e,t){const i=(0,O.xf)({title:E((0,g.Wh)(e.reference,{capitalize:!0,icon:!1}),e,t),placeholder:(0,g.Wh)(e.reference,{capitalize:!0,icon:!1}),ignoreFocusOut:!0,items:await ae(e),onDidClickItemButton:(t,i,r)=>{switch(i){case B._9:(0,g.pZ)(e.reference)?h.Fw(e.reference,{pin:!1,preserveFocus:!0}):n.Fw(e.reference,{pin:!1,preserveFocus:!0});break;case B.Nv:(0,g.pZ)(e.reference)?h.ay(e.reference,{select:!0,focus:!1,expand:!0}):n.ay(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{0!==e.activeItems.length&&await e.activeItems[0].onDidPressKey(t)}}),r=yield i;return(0,O.i9)(i,e,r)?r[0]:O.Vd}async function ae(e){const t=[new C.EE(e.reference),new C.sQ(e.reference)];let i;if((0,m.G2)(e.reference))t.push((0,A.fz)("Actions"),new P.Wv("Apply Stash...",{command:"stash",state:{subcommand:"apply",repo:e.repo,reference:e.reference}}),new P.Wv("Delete Stash...",{command:"stash",state:{subcommand:"drop",repo:e.repo,reference:e.reference}}),(0,A.fz)(),new C.NC(e.reference));else{const r=await s.W.instance.git.getRemotesWithProviders(e.repo.path,{sort:!0});r?.length&&t.push((0,A.fz)(f.ss.getHighlanderProviderName(r)??"Remote"),new S.az(r,{type:w.J.Commit,sha:e.reference.sha}),new S.eO(r,{type:w.J.Commit,sha:e.reference.sha})),t.push((0,A.fz)("Actions"));const o=await s.W.instance.git.getBranch(e.repo.path),[n,a]=await Promise.all([null!=o?s.W.instance.git.getCommitBranches(e.repo.path,e.reference.ref,o.name,{commitDate:(0,m.f_)(e.reference)?e.reference.committer.date:void 0}):void 0,o?.remote||null==o?.upstream?void 0:e.reference.isPushed()]);Boolean(n?.length)?(i=!a,i&&t.push(new P.Wv("Push to Commit...",{command:"push",state:{repos:e.repo,reference:e.reference}})),t.push(new P.Wv("Revert Commit...",{command:"revert",state:{repo:e.repo,references:[e.reference]}}),new P.Wv(`Reset ${o?.name??"Current Branch"} to Commit...`,{command:"reset",state:{repo:e.repo,reference:e.reference}}),new P.Wv(`Reset ${o?.name??"Current Branch"} to Previous Commit...`,{command:"reset",state:{repo:e.repo,reference:(0,g.xB)(`${e.reference.ref}^`,e.reference.repoPath,{refType:"revision",name:`${e.reference.name}^`,message:e.reference.message})}}))):t.push(new P.Wv("Cherry Pick Commit...",{command:"cherry-pick",state:{repo:e.repo,references:[e.reference]}})),t.push(new P.Wv(`Rebase ${o?.name??"Current Branch"} onto Commit...`,{command:"rebase",state:{repo:e.repo,reference:e.reference}}),new P.Wv("Switch to Commit...",{command:"switch",state:{repos:[e.repo],reference:e.reference}}),(0,A.fz)(),new P.Wv("Create Branch at Commit...",{command:"branch",state:{subcommand:"create",repo:e.repo,reference:e.reference}}),new P.Wv("Create Tag at Commit...",{command:"tag",state:{subcommand:"create",repo:e.repo,reference:e.reference}}),(0,A.fz)("Copy"),new C.OT(e.reference),new C.NC(e.reference))}return t.push((0,A.fz)("Open"),new C.CV(e.reference),new C.Y4(e.reference),new C.o$(e.reference),(0,A.fz)(),new C.lN(e.reference),new C.A1(e.reference)),t.push((0,A.fz)("Compare"),new C.Jw(e.reference),new C.m5(e.reference)),t.push((0,A.fz)(),new C.eG(e.reference),new C.nl(e.reference)),t.push((0,A.fz)("Browse"),new C.Lf(e.reference,{openInNewWindow:!1}),new C.Lf(e.reference,{before:!0,openInNewWindow:!1}),new C.Lf(e.reference,{openInNewWindow:!0}),new C.Lf(e.reference,{before:!0,openInNewWindow:!0})),t.unshift(new C.PF(e.reference,{unpublished:i,hint:"Click to see all changed files"})),t}function*ce(e,t,i){e.reference.files;const r=(0,O.xf)({title:E((0,g.Wh)(e.reference,{capitalize:!0,icon:!1}),e,t),placeholder:(0,g.Wh)(e.reference,{capitalize:!0,icon:!1}),ignoreFocusOut:!0,items:[new C.PF(e.reference,{picked:null==e.fileName,hint:`Click to see ${(0,m.G2)(e.reference)?"stash":"commit"} actions`}),(0,A.fz)("Files"),...e.reference.files?.map((t=>new C.zr(e.reference,t,i?.picked===t.path)))??[]],matchOnDescription:!0,onDidClickItemButton:(t,i,r)=>{switch(i){case B._9:(0,g.pZ)(e.reference)?h.Fw(e.reference,{pin:!1,preserveFocus:!0}):n.Fw(e.reference,{pin:!1,preserveFocus:!0});break;case B.Nv:(0,g.pZ)(e.reference)?h.ay(e.reference,{select:!0,focus:!1,expand:!0}):n.ay(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{0!==e.activeItems.length&&await e.activeItems[0].onDidPressKey(t)}}),s=yield r;return(0,O.i9)(r,e,s)?s[0]:O.Vd}async function*le(e,t){const i=(0,O.xf)({title:E((0,g.Wh)(e.reference,{capitalize:!0,icon:!1}),e,t,`${(0,x.vk)(r.NE.Dot,2,2)}${(0,_.d)(e.fileName,{fileOnly:!0})}`),placeholder:`${(0,_.d)(e.fileName,{relativeTo:e.repo.path})} in ${(0,g.Wh)(e.reference,{icon:!1})}`,ignoreFocusOut:!0,items:await he(e),matchOnDescription:!0,onDidClickItemButton:(t,i,r)=>{switch(i){case B._9:(0,g.pZ)(e.reference)?h.Fw(e.reference,{pin:!1,preserveFocus:!0}):n.Fw(e.reference,{pin:!1,preserveFocus:!0});break;case B.Nv:(0,g.pZ)(e.reference)?h.ay(e.reference,{select:!0,focus:!1,expand:!0}):n.ay(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{0!==e.activeItems.length&&await e.activeItems[0].onDidPressKey(t)}}),s=yield i;return(0,O.i9)(i,e,s)?s[0]:O.Vd}async function he(e){const t=await e.reference.findFile(e.fileName);if(null==t)return[];const i=[new C.EE(e.reference),new C.sQ(e.reference)];if((0,m.G2)(e.reference))i.push((0,A.fz)(),new C.NC(e.reference),(0,A.fz)("Actions"),new C.do(e.reference,t),new C.QP(e.reference,t),(0,A.fz)(),new C.NC(e.reference));else{const r=await s.W.instance.git.getRemotesWithProviders(e.repo.path,{sort:!0});r?.length&&i.push((0,A.fz)(f.ss.getHighlanderProviderName(r)??"Remote"),new S.az(r,{type:w.J.Revision,fileName:e.fileName,commit:e.reference}),new S.eO(r,{type:w.J.Revision,fileName:e.fileName,commit:e.reference}),(0,A.fz)(),new S.az(r,{type:w.J.Commit,sha:e.reference.ref}),new S.eO(r,{type:w.J.Commit,sha:e.reference.sha})),i.push((0,A.fz)("Actions"),new C.do(e.reference,t),new C.QP(e.reference,t),(0,A.fz)("Copy"),new C.OT(e.reference),new C.NC(e.reference))}return i.push((0,A.fz)("Open"),new C.lp(e.reference,e.fileName),new C.aU(e.reference,e.fileName),new C.xL(e.reference,e.fileName),(0,A.fz)()),"D"!==t.status&&i.push(new C.ZO(e.reference,t)),i.push(new C.Wt(e.reference,t)),i.push((0,A.fz)("Compare"),new C.Jw(e.reference),new C.m5(e.reference)),i.push((0,A.fz)("Browse"),new C.Lf(e.reference,{openInNewWindow:!1}),new C.Lf(e.reference,{before:!0,openInNewWindow:!1}),new C.Lf(e.reference,{openInNewWindow:!0}),new C.Lf(e.reference,{before:!0,openInNewWindow:!0})),i.unshift(new C.PF(e.reference,{file:t,hint:"Click to see all changed files"})),i}function*ue(e,t){const i=t.status.getUpstreamStatus({expand:!0,separator:", "}),r=t.status.getFormattedDiffStatus({expand:!0,separator:", "}),s=(0,O.xf)({title:E(t.title,e,t),placeholder:`${i?`${i}, ${r}`:r}`,ignoreFocusOut:!0,items:de(e,t),keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{0!==e.activeItems.length&&await e.activeItems[0].onDidPressKey(t)}}),o=yield s;return(0,O.i9)(s,e,o)?o[0]:O.Vd}function de(e,t){const i=[],s=t.status.computeWorkingTreeStatus();let o;return o=0===s.staged&&0===s.unstaged?"No working tree changes":`$(files) ${s.staged?`${(0,x._6)("staged file",s.staged)} (${s.stagedStatus})`:""}${s.unstaged?`${s.staged?", ":""}${(0,x._6)("unstaged file",s.unstaged)} (${s.unstagedStatus})`:""}`,t.status.upstream?(0===t.status.state.ahead&&0===t.status.state.behind?i.push((0,k.fw)(k.Xe.Noop,!0,{label:`$(git-branch) ${t.status.branch} is up to date with $(git-branch) ${t.status.upstream}`,detail:o})):0!==t.status.state.ahead&&0!==t.status.state.behind?i.push((0,k.fw)(k.Xe.Noop,!0,{label:`$(git-branch) ${t.status.branch} has diverged from $(git-branch) ${t.status.upstream}`,detail:o})):0!==t.status.state.ahead?i.push((0,k.fw)(k.Xe.Noop,!0,{label:`$(git-branch) ${t.status.branch} is ahead of $(git-branch) ${t.status.upstream}`,detail:o})):0!==t.status.state.behind&&i.push((0,k.fw)(k.Xe.Noop,!0,{label:`$(git-branch) ${t.status.branch} is behind $(git-branch) ${t.status.upstream}`,detail:o})),0!==t.status.state.behind&&i.push(new P.Wv(`$(cloud-download) ${(0,x._6)("commit",t.status.state.behind)} behind`,{command:"log",state:{repo:e.repo,reference:(0,g.xB)((0,g.oI)(t.status.ref,t.status.upstream),e.repo.path)}})),0!==t.status.state.ahead&&i.push(new P.Wv(`$(cloud-upload) ${(0,x._6)("commit",t.status.state.ahead)} ahead`,{command:"log",state:{repo:e.repo,reference:(0,g.xB)((0,g.oI)(t.status.upstream,t.status.ref),e.repo.path)}}))):i.push((0,k.fw)(k.Xe.Noop,!0,{label:`$(git-branch) ${t.status.branch} has no upstream`,detail:o})),t.status.files.length&&(i.push(new C.K6(s.stagedAddsAndChanges.concat(s.unstagedAddsAndChanges))),i.push(new C.rl(s.stagedAddsAndChanges.concat(s.unstagedAddsAndChanges)))),s.staged>0&&(i.push(new C.K6(s.stagedAddsAndChanges,{label:"$(files) Open Staged Files"})),i.push(new C.rl(s.stagedAddsAndChanges,{label:"$(files) Open Only Staged Files"}))),s.unstaged>0&&(i.push(new C.K6(s.unstagedAddsAndChanges,{label:"$(files) Open Unstaged Files"})),i.push(new C.rl(s.unstagedAddsAndChanges,{label:"$(files) Open Only Unstaged Files"}))),t.status.files.length&&i.push(new A.$w("$(x) Close Unchanged Files",r.Gh.CloseUnchangedFiles)),i}async function*pe(e,t,i){const r=await s.W.instance.git.access(i,e.repo.path);if(r.allowed)return;const o=[];let n;if(!1===r.subscription.current.account?.verified)o.push((0,k.fw)(k.Xe.RequiresVerification,!0)),n="You must verify your email before you can continue";else{if(null==r.subscription.required)return;n="✨ Requires a trial or paid plan for use on privately hosted repos",(0,D.aG)(r.subscription.required)&&null!=r.subscription.current.account?(n="✨ Requires a paid plan for use on privately hosted repos",o.push((0,k.fw)(k.Xe.RequiresPaidSubscription,!0))):null!=r.subscription.current.account||(0,D.gA)(r.subscription.current)?o.push((0,k.fw)(k.Xe.ExtendTrial)):o.push((0,k.fw)(k.Xe.StartPreviewTrial,!0))}const a=(0,O.xf)({title:E(t.title,e,t),placeholder:n,items:[...o,(0,k.fw)(k.Xe.Cancel)]}),c=yield a;return(0,O.i9)(a,e,c)?void 0:O.Vd}},4239:(e,t,i)=>{i.d(t,{$V:()=>d,Dr:()=>a,Gj:()=>n,Ke:()=>m,Tv:()=>p,Vd:()=>c,Wm:()=>h,YB:()=>l,a:()=>o,i9:()=>u,jf:()=>f,tR:()=>QuickCommand,uZ:()=>w,xf:()=>g});var r=i(3530),s=i(5148);function o(e){return"object"==typeof e&&null!=e.show}function n(e){return"object"==typeof e&&null==e.items&&null==e.show}function a(e){return"object"==typeof e&&null!=e.items}const c=Symbol("BreakStep");class QuickCommand{constructor(e,t,i,r,s={}){this.container=e,this.key=t,this.label=i,this.title=r,this.description=s.description,this.detail=s.detail}description;detail;initialState;_currentStep;_stepsIterator;get canConfirm(){return!0}get canSkipConfirm(){return!0}_picked=!1;get picked(){return this._picked}set picked(e){this._picked=e,e||(this._pickedVia="menu")}_pickedVia="menu";get pickedVia(){return this._pickedVia}set pickedVia(e){this._pickedVia=e}get skipConfirmKey(){return`${this.key}:${this.pickedVia}`}get value(){return this._currentStep}confirm(e){return!this.canConfirm||!this.canSkipConfirm||(null!=e?e:!s.D.get("gitCommands.skipConfirmations").includes(this.skipConfirmKey))}isMatch(e){return this.key===e}isFuzzyMatch(e){return this.label===e}executeSteps(){return this.steps(this.getStepState(!0))}async previous(){return(await this.next(r.Xe.Back)).value}async next(e){null==this._stepsIterator&&(this._stepsIterator=this.steps(this.getStepState(!1)));const t=await this._stepsIterator.next(e);return t.done&&(this.initialState=void 0,this._stepsIterator=void 0),t.value===c?(this._currentStep=void 0,{...t,value:void 0}):(this._currentStep=t.value,t)}async retry(){return await this.next(r.Xe.Noop),this.value}canStepsContinue(e){return e.counter>=(e.startingStep??0)}createConfirmStep(e,t,i,r={}){return p(e,t,{title:this.title},i,r)}getStepState(e){return{counter:0,...this.initialState,startingStep:e?this.initialState?.counter??0:0}}}function l(e){return e instanceof QuickCommand}async function h(e,t,i){if(!d(e,t,i))return!1;const[r]=await(e.validate?.(i))??[!0];return!!r&&(t.counter++,!0)}function u(e,t,i){return!!d(e,t,i)&&(!!(e.validate?.(i)??1)&&(t.counter++,!0))}function d(e,t,i){if(null==i)return!1;if((0,r.wX)(i)){switch(i){case r.Xe.Back:t.counter--,t.counter<=(t.startingStep??0)&&(t.counter=0);break;case r.Xe.Cancel:w(t)}return!1}return!0}function p(e,t,i,s,o={}){return{placeholder:`Confirm ${i.title}`,title:e,ignoreFocusOut:!0,items:[...t,s??(0,r.fw)(r.Xe.Cancel)],selectedItems:[t.find((e=>e.picked))??t[0]],...o}}function m(e){return e.ignoreFocusOut=!0,e}function g(e){return e}function f(e){return e}function w(e){e.counter=-1}},6199:(e,t,i)=>{i.d(t,{t:()=>d});var r=i(5255),s=i(3050),o=i(635),n=i(9529),a=i(3105),c=i(7139),l=Object.defineProperty,h=Object.getOwnPropertyDescriptor,u=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?h(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&l(t,i,o),o};let d=class extends c.mY{constructor(e){super(r.Gh.ConnectRemoteProvider),this.container=e}static getMarkdownCommandArgs(e){let t;return t=s.ss.is(e)?{remote:e.name,repoPath:e.repoPath}:e,super.getMarkdownCommandArgsCore(r.Gh.ConnectRemoteProvider,t)}preExecute(e,t){return(0,c.C$)(e)&&(t={...t,remote:e.node.remote.name,repoPath:e.node.remote.repoPath}),this.execute(t)}async execute(e){let t,i,r;if(null==e?.repoPath){const e=new Map;for(const t of this.container.git.openRepositories){const i=await t.getRichRemote();null==i?.provider||await i.provider.isConnected()||e.set(t,i)}if(0===e.size)return!1;if(1===e.size){let i;[i,t]=(0,a.Ps)(e),r=i.path}else{const i=await(0,o.E2)(void 0,"Choose which repository to connect to the remote provider",[...e.keys()]);if(null==i?.item)return;r=i.repoPath,t=e.get(i.item)}}else if(null==e?.remote){if(r=e.repoPath,t=await this.container.git.getBestRemoteWithRichProvider(r,{includeDisconnected:!0}),null==t)return!1}else if(r=e.repoPath,i=await this.container.git.getRemotesWithProviders(r),t=i.find((t=>t.name===e.remote)),!t?.hasRichIntegration())return!1;const s=await t.provider.connect();return s&&!(i??await this.container.git.getRemotesWithProviders(r)).some((e=>e.default))&&await t.setAsDefault(!0),s}};d=u([(0,n.WD)()],d);let p=class extends c.mY{constructor(e){super(r.Gh.DisconnectRemoteProvider),this.container=e}static getMarkdownCommandArgs(e){let t;return t=s.ss.is(e)?{remote:e.name,repoPath:e.repoPath}:e,super.getMarkdownCommandArgsCore(r.Gh.DisconnectRemoteProvider,t)}preExecute(e,t){return(0,c.C$)(e)&&(t={...t,remote:e.node.remote.name,repoPath:e.node.remote.repoPath}),this.execute(t)}async execute(e){let t,i;if(null==e?.repoPath){const e=new Map;for(const t of this.container.git.openRepositories){const i=await t.getRichRemote(!0);null!=i&&e.set(t,i)}if(0===e.size)return;if(1===e.size){let r;[r,t]=(0,a.Ps)(e),i=r.path}else{const r=await(0,o.E2)(void 0,"Choose which repository to disconnect from the remote provider",[...e.keys()]);if(null==r?.item)return;i=r.repoPath,t=e.get(r.item)}}else if(null==e?.remote){if(i=e.repoPath,t=await this.container.git.getBestRemoteWithRichProvider(i,{includeDisconnected:!1}),null==t)return}else if(i=e.repoPath,t=(await this.container.git.getRemotesWithProviders(i)).find((t=>t.name===e.remote)),!t?.hasRichIntegration())return;return t.provider.disconnect()}};p=u([(0,n.WD)()],p)},1676:(e,t,i)=>{i.d(t,{C:()=>f});var r=i(5255),s=i(9311),o=i(6897),n=i(7462),a=i(4321),c=i(6934),l=i(7925),h=i(9529),u=i(3105),d=i(4336),p=i(7139),m=Object.defineProperty,g=Object.getOwnPropertyDescriptor;let f=class extends p.pu{constructor(e){super([r.Gh.ShowCommitInView,r.Gh.ShowInDetailsView,r.Gh.ShowCommitsInView]),this.container=e}static getMarkdownCommandArgs(e,t){const i="string"==typeof e?{refs:[e],repoPath:t}:e;return super.getMarkdownCommandArgsCore(r.Gh.ShowCommitInView,i)}preExecute(e,t){return"viewItem"===e.type&&(t={...t},(0,p.en)(e)&&(t.refs=[e.node.commit.sha],t.repoPath=e.node.commit.repoPath)),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(void 0===(i={...i}).refs){if(null==(t=(0,p.SX)(t,e)))return;const r=await n.YY.fromUri(t);if(i.repoPath=r.repoPath,null!=e)try{const t=e.document.isDirty?await this.container.git.getBlameForRangeContents(r,e.selection,e.document.getText()):await this.container.git.getBlameForRange(r,e.selection);if(void 0===t)return(0,l.zk)("Unable to find commits");i.refs=[...(0,u.DZ)(t.commits.values(),(e=>e.isUncommitted?void 0:e.ref))]}catch(e){return d.Yd.error(e,"ShowCommitsInViewCommand","getBlameForRange"),(0,l.W8)("Unable to find commits")}else{if(null==r.sha)return;i.refs=[r.sha]}}return 1===i.refs.length?(0,o.Fw)((0,a.xB)(i.refs[0],i.repoPath,{refType:"revision"})):(0,s.m)({command:"search",state:{repo:i?.repoPath,query:(0,c.pU)(i.refs),showResultsInSideBar:!0}})}};f=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?g(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&m(t,i,o),o})([(0,h.WD)()],f)},1744:(e,t,i)=>{i.d(t,{o:()=>p});var r=i(5255),s=i(9311),o=i(6897),n=i(7462),a=i(7925),c=i(9529),l=i(4336),h=i(7139),u=Object.defineProperty,d=Object.getOwnPropertyDescriptor;let p=class extends h.Lk{constructor(e){super([r.Gh.RevealCommitInView,r.Gh.ShowQuickCommit]),this.container=e}static getMarkdownCommandArgs(e,t){const i="string"==typeof e?{sha:e,repoPath:t}:e;return super.getMarkdownCommandArgsCore(r.Gh.ShowQuickCommit,i)}preExecute(e,t){return e.command===r.Gh.RevealCommitInView&&((t={...t}).revealInView=!0),"viewItem"===e.type&&((t={...t}).sha=e.node.uri.sha,(0,h.en)(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r,c;if(null==i?.commit)if(null!=i?.repoPath&&null!=i.sha)c=i.repoPath,r=n.YY.fromRepoPath(c);else{if(null==(t=(0,h.SX)(t,e)))return;r=await n.YY.fromUri(t),c=r.repoPath}else null==i.sha&&(i.sha=i.commit.sha),r=i.commit.getGitUri(),c=i.commit.repoPath,null==t&&(t=i.commit.file?.uri);if(null==(i={...i}).sha){if(null==e)return;const t=e.selection.active.line;if(t<0)return;try{const e=await this.container.git.getBlameForLine(r,t);if(null==e)return void(0,a.zk)("Unable to show commit");if(e.commit.isUncommitted)return void(0,a.f3)("Unable to show commit");i.sha=e.commit.sha,c=e.commit.repoPath,i.commit=e.commit}catch(e){return l.Yd.error(e,"ShowQuickCommitCommand",`getBlameForLine(${t})`),void(0,a.W8)("Unable to show commit")}}try{if(null!=i.commit&&null==i.commit.file||(null!=i.repoLog&&(i.commit=i.repoLog.commits.get(i.sha),null==i.commit&&(i.repoLog=void 0)),null==i.repoLog&&(i.commit=await this.container.git.getCommit(c,i.sha))),null==i.commit)return void(0,a.G)("Unable to show commit");if(i.revealInView)return void await(0,o.ay)(i.commit,{select:!0,focus:!0,expand:!0});await(0,s.m)({command:"show",state:{repo:c,reference:i.commit}})}catch(e){l.Yd.error(e,"ShowQuickCommitCommand"),(0,a.W8)("Unable to show commit")}}};p=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?d(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&u(t,i,o),o})([(0,c.WD)()],p)},8918:(e,t,i)=>{i.d(t,{M:()=>m});var r=i(9496),s=i(5255),o=i(9311),n=i(7462),a=i(6450),c=i(7925),l=i(9529),h=i(4336),u=i(7139),d=Object.defineProperty,p=Object.getOwnPropertyDescriptor;let m=class extends u.Lk{constructor(e){super([s.Gh.ShowQuickCommitFile,s.Gh.ShowQuickCommitRevision,s.Gh.ShowQuickCommitRevisionInDiffLeft,s.Gh.ShowQuickCommitRevisionInDiffRight,s.Gh.ShowLineCommitInView]),this.container=e}static getMarkdownCommandArgs(e){return super.getMarkdownCommandArgsCore(s.Gh.ShowQuickCommitFile,e)}async preExecute(e,t){if("editorLine"===e.type&&(t={...t,line:e.line}),e.command===s.Gh.ShowLineCommitInView&&(t={...t,inView:!0}),null!=e.editor&&e.command.startsWith(s.Gh.ShowQuickCommitRevision)){const i=await n.YY.fromUri(e.editor.document.uri);t={...t,sha:i.sha}}return"viewItem"===e.type&&(t={...t,sha:e.node.uri.sha},(0,u.en)(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=(0,u.SX)(t,e)))return;let d;if(null!=(i={...i}).revisionUri?(d=n.YY.fromRevisionUri(r.Uri.parse(i.revisionUri,!0)),i.sha=d.sha):d=await n.YY.fromUri(t),null==i.sha){const t=i.line??e?.selection.active.line;if(null==t)return;try{const e=await this.container.git.getBlameForLine(d,t);if(null==e)return void(0,c.zk)("Unable to show commit file details");if(e.commit.isUncommitted)return void(0,c.f3)("Unable to show commit file details");i.sha=e.commit.sha,i.commit=e.commit}catch(e){return h.Yd.error(e,"ShowQuickCommitFileDetailsCommand",`getBlameForLine(${t})`),void(0,c.W8)("Unable to show commit file details")}}try{if(null==i.commit&&(null!=i.fileLog&&(i.commit=i.fileLog.commits.get(i.sha),null==i.commit&&(i.fileLog=void 0)),null==i.fileLog)){const e=i.commit?.repoPath??d.repoPath;if(i.commit=await this.container.git.getCommitForFile(e,d,{ref:i.sha}),null==i.commit)return void(0,c.G)("Unable to show commit file details")}if(null==i.commit)return void(0,c.G)("Unable to show commit file details");const e=i.commit?.file?.path??d.fsPath;(0,a.f_)(i.commit)&&null==i.commit.files&&await i.commit.ensureFullDetails(),i.inView?await(0,l.P0)(s.Gh.ShowCommitsInView,{refs:[i.commit.sha],repoPath:i.commit.repoPath}):await(0,o.m)({command:"show",state:{repo:i.commit.repoPath,reference:i.commit,fileName:e}})}catch(e){h.Yd.error(e,"ShowQuickCommitFileDetailsCommand"),(0,c.W8)("Unable to show commit file details")}}};m=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?p(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&d(t,i,o),o})([(0,l.WD)()],m)},2540:(e,t,i)=>{i.d(t,{N4:()=>r,S4:()=>n,TA:()=>o,ef:()=>s,oE:()=>a});var r=(e=>(e.CopyRemoteCommitUrl="gitlens.copyRemoteCommitUrl",e.CopyRemoteFileUrl="gitlens.copyRemoteFileUrl",e.DiffWithPrevious="gitlens.diffWithPrevious",e.OpenCommitOnRemote="gitlens.openCommitOnRemote",e.OpenFileOnRemote="gitlens.openFileOnRemote",e.RevealCommitInView="gitlens.revealCommitInView",e.ShowCommitsInView="gitlens.showCommitsInView",e.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",e.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ToggleFileBlame="gitlens.toggleFileBlame",e.ToggleFileChanges="gitlens.toggleFileChanges",e.ToggleFileChangesOnly="gitlens.toggleFileChangesOnly",e.ToggleFileHeatmap="gitlens.toggleFileHeatmap",e))(r||{}),s=(e=>(e.CopyRemoteCommitUrl="gitlens.copyRemoteCommitUrl",e.CopyRemoteFileUrl="gitlens.copyRemoteFileUrl",e.DiffWithPrevious="gitlens.diffWithPrevious",e.DiffWithWorking="gitlens.diffWithWorking",e.OpenCommitOnRemote="gitlens.openCommitOnRemote",e.OpenFileOnRemote="gitlens.openFileOnRemote",e.RevealCommitInView="gitlens.revealCommitInView",e.ShowCommitsInView="gitlens.showCommitsInView",e.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",e.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ToggleCodeLens="gitlens.toggleCodeLens",e.ToggleFileBlame="gitlens.toggleFileBlame",e.ToggleFileChanges="gitlens.toggleFileChanges",e.ToggleFileChangesOnly="gitlens.toggleFileChangesOnly",e.ToggleFileHeatmap="gitlens.toggleFileHeatmap",e))(s||{});const o=["defaultItemLimit","formats","pageItemLimit","showRelativeDateMarkers"],n=["branches","commits","commitDetails","contributors","fileHistory","lineHistory","remotes","repositories","searchAndCompare","stashes","tags","worktrees"];function a(e){switch(e){case"silent":return"off";case"errors":return"error";case"verbose":return"info";case"debug":return"debug";default:return e}}},5255:(e,t,i)=>{i.d(t,{Gh:()=>a,NE:()=>l,XP:()=>h,ZY:()=>o,_h:()=>c,d$:()=>s,lw:()=>d,m1:()=>r,mN:()=>n,sN:()=>u});const r="gitlens",s=80,o={".png":"image/png",".gif":"image/gif",".jpg":"image/jpeg",".jpeg":"image/jpeg",".jpe":"image/jpeg",".webp":"image/webp",".tif":"image/tiff",".tiff":"image/tiff",".bmp":"image/bmp"};var n=(e=>(e[e.Hash=35]="Hash",e[e.Slash=47]="Slash",e[e.Digit0=48]="Digit0",e[e.Digit1=49]="Digit1",e[e.Digit2=50]="Digit2",e[e.Digit3=51]="Digit3",e[e.Digit4=52]="Digit4",e[e.Digit5=53]="Digit5",e[e.Digit6=54]="Digit6",e[e.Digit7=55]="Digit7",e[e.Digit8=56]="Digit8",e[e.Digit9=57]="Digit9",e[e.Backslash=92]="Backslash",e[e.A=65]="A",e[e.B=66]="B",e[e.C=67]="C",e[e.D=68]="D",e[e.E=69]="E",e[e.F=70]="F",e[e.Z=90]="Z",e[e.a=97]="a",e[e.b=98]="b",e[e.c=99]="c",e[e.d=100]="d",e[e.e=101]="e",e[e.f=102]="f",e[e.z=122]="z",e))(n||{}),a=(e=>(e.ActionPrefix="gitlens.action.",e.AddAuthors="gitlens.addAuthors",e.BrowseRepoAtRevision="gitlens.browseRepoAtRevision",e.BrowseRepoAtRevisionInNewWindow="gitlens.browseRepoAtRevisionInNewWindow",e.BrowseRepoBeforeRevision="gitlens.browseRepoBeforeRevision",e.BrowseRepoBeforeRevisionInNewWindow="gitlens.browseRepoBeforeRevisionInNewWindow",e.ClearFileAnnotations="gitlens.clearFileAnnotations",e.CloseUnchangedFiles="gitlens.closeUnchangedFiles",e.CloseWelcomeView="gitlens.closeWelcomeView",e.CompareWith="gitlens.compareWith",e.CompareHeadWith="gitlens.compareHeadWith",e.CompareWorkingWith="gitlens.compareWorkingWith",e.ComputingFileAnnotations="gitlens.computingFileAnnotations",e.ConnectRemoteProvider="gitlens.connectRemoteProvider",e.CopyAutolinkUrl="gitlens.copyAutolinkUrl",e.CopyCurrentBranch="gitlens.copyCurrentBranch",e.CopyDeepLinkToBranch="gitlens.copyDeepLinkToBranch",e.CopyDeepLinkToCommit="gitlens.copyDeepLinkToCommit",e.CopyDeepLinkToComparison="gitlens.copyDeepLinkToComparison",e.CopyDeepLinkToRepo="gitlens.copyDeepLinkToRepo",e.CopyDeepLinkToTag="gitlens.copyDeepLinkToTag",e.CopyDeepLinkToWorkspace="gitlens.copyDeepLinkToWorkspace",e.CopyMessageToClipboard="gitlens.copyMessageToClipboard",e.CopyRemoteBranchesUrl="gitlens.copyRemoteBranchesUrl",e.CopyRemoteBranchUrl="gitlens.copyRemoteBranchUrl",e.CopyRemoteCommitUrl="gitlens.copyRemoteCommitUrl",e.CopyRemoteComparisonUrl="gitlens.copyRemoteComparisonUrl",e.CopyRemoteFileUrl="gitlens.copyRemoteFileUrlToClipboard",e.CopyRemoteFileUrlWithoutRange="gitlens.copyRemoteFileUrlWithoutRange",e.CopyRemoteFileUrlFrom="gitlens.copyRemoteFileUrlFrom",e.CopyRemoteIssueUrl="gitlens.copyRemoteIssueUrl",e.CopyRemotePullRequestUrl="gitlens.copyRemotePullRequestUrl",e.CopyRemoteRepositoryUrl="gitlens.copyRemoteRepositoryUrl",e.CopyShaToClipboard="gitlens.copyShaToClipboard",e.CopyRelativePathToClipboard="gitlens.copyRelativePathToClipboard",e.CreatePullRequestOnRemote="gitlens.createPullRequestOnRemote",e.DiffDirectory="gitlens.diffDirectory",e.DiffDirectoryWithHead="gitlens.diffDirectoryWithHead",e.DiffWith="gitlens.diffWith",e.DiffWithNext="gitlens.diffWithNext",e.DiffWithNextInDiffLeft="gitlens.diffWithNextInDiffLeft",e.DiffWithNextInDiffRight="gitlens.diffWithNextInDiffRight",e.DiffWithPrevious="gitlens.diffWithPrevious",e.DiffWithPreviousInDiffLeft="gitlens.diffWithPreviousInDiffLeft",e.DiffWithPreviousInDiffRight="gitlens.diffWithPreviousInDiffRight",e.DiffLineWithPrevious="gitlens.diffLineWithPrevious",e.DiffWithRevision="gitlens.diffWithRevision",e.DiffWithRevisionFrom="gitlens.diffWithRevisionFrom",e.DiffWithWorking="gitlens.diffWithWorking",e.DiffWithWorkingInDiffLeft="gitlens.diffWithWorkingInDiffLeft",e.DiffWithWorkingInDiffRight="gitlens.diffWithWorkingInDiffRight",e.DiffLineWithWorking="gitlens.diffLineWithWorking",e.DisconnectRemoteProvider="gitlens.disconnectRemoteProvider",e.DisableDebugLogging="gitlens.disableDebugLogging",e.EnableDebugLogging="gitlens.enableDebugLogging",e.DisableRebaseEditor="gitlens.disableRebaseEditor",e.EnableRebaseEditor="gitlens.enableRebaseEditor",e.ExternalDiff="gitlens.externalDiff",e.ExternalDiffAll="gitlens.externalDiffAll",e.FetchRepositories="gitlens.fetchRepositories",e.GenerateCommitMessage="gitlens.generateCommitMessage",e.GetStarted="gitlens.getStarted",e.InviteToLiveShare="gitlens.inviteToLiveShare",e.OpenAutolinkUrl="gitlens.openAutolinkUrl",e.OpenBlamePriorToChange="gitlens.openBlamePriorToChange",e.OpenBranchesOnRemote="gitlens.openBranchesOnRemote",e.OpenBranchOnRemote="gitlens.openBranchOnRemote",e.OpenCurrentBranchOnRemote="gitlens.openCurrentBranchOnRemote",e.OpenChangedFiles="gitlens.openChangedFiles",e.OpenCommitOnRemote="gitlens.openCommitOnRemote",e.OpenComparisonOnRemote="gitlens.openComparisonOnRemote",e.OpenFileHistory="gitlens.openFileHistory",e.OpenFileFromRemote="gitlens.openFileFromRemote",e.OpenFileOnRemote="gitlens.openFileOnRemote",e.OpenFileOnRemoteFrom="gitlens.openFileOnRemoteFrom",e.OpenFileAtRevision="gitlens.openFileRevision",e.OpenFileAtRevisionFrom="gitlens.openFileRevisionFrom",e.OpenFolderHistory="gitlens.openFolderHistory",e.OpenOnRemote="gitlens.openOnRemote",e.OpenIssueOnRemote="gitlens.openIssueOnRemote",e.OpenPullRequestOnRemote="gitlens.openPullRequestOnRemote",e.OpenAssociatedPullRequestOnRemote="gitlens.openAssociatedPullRequestOnRemote",e.OpenRepoOnRemote="gitlens.openRepoOnRemote",e.OpenRevisionFile="gitlens.openRevisionFile",e.OpenRevisionFileInDiffLeft="gitlens.openRevisionFileInDiffLeft",e.OpenRevisionFileInDiffRight="gitlens.openRevisionFileInDiffRight",e.OpenWalkthrough="gitlens.openWalkthrough",e.OpenWorkingFile="gitlens.openWorkingFile",e.OpenWorkingFileInDiffLeft="gitlens.openWorkingFileInDiffLeft",e.OpenWorkingFileInDiffRight="gitlens.openWorkingFileInDiffRight",e.PullRepositories="gitlens.pullRepositories",e.PushRepositories="gitlens.pushRepositories",e.GitCommands="gitlens.gitCommands",e.GitCommandsBranch="gitlens.gitCommands.branch",e.GitCommandsCherryPick="gitlens.gitCommands.cherryPick",e.GitCommandsMerge="gitlens.gitCommands.merge",e.GitCommandsRebase="gitlens.gitCommands.rebase",e.GitCommandsReset="gitlens.gitCommands.reset",e.GitCommandsRevert="gitlens.gitCommands.revert",e.GitCommandsSwitch="gitlens.gitCommands.switch",e.GitCommandsTag="gitlens.gitCommands.tag",e.GitCommandsWorktree="gitlens.gitCommands.worktree",e.GitCommandsWorktreeOpen="gitlens.gitCommands.worktree.open",e.OpenOrCreateWorktreeForGHPR="gitlens.ghpr.views.openOrCreateWorktree",e.PlusHide="gitlens.plus.hide",e.PlusLoginOrSignUp="gitlens.plus.loginOrSignUp",e.PlusLogout="gitlens.plus.logout",e.PlusManage="gitlens.plus.manage",e.PlusPurchase="gitlens.plus.purchase",e.PlusResendVerification="gitlens.plus.resendVerification",e.PlusRestore="gitlens.plus.restore",e.PlusShowPlans="gitlens.plus.showPlans",e.PlusStartPreviewTrial="gitlens.plus.startPreviewTrial",e.PlusValidate="gitlens.plus.validate",e.QuickOpenFileHistory="gitlens.quickOpenFileHistory",e.RefreshFocus="gitlens.focus.refresh",e.RefreshGraph="gitlens.graph.refresh",e.RefreshHover="gitlens.refreshHover",e.RefreshTimelinePage="gitlens.timeline.refresh",e.ResetAvatarCache="gitlens.resetAvatarCache",e.ResetAIKey="gitlens.resetAIKey",e.ResetSuppressedWarnings="gitlens.resetSuppressedWarnings",e.ResetTrackedUsage="gitlens.resetTrackedUsage",e.ResetViewsLayout="gitlens.resetViewsLayout",e.RevealCommitInView="gitlens.revealCommitInView",e.SearchCommits="gitlens.showCommitSearch",e.SearchCommitsInView="gitlens.views.searchAndCompare.searchCommits",e.ShowBranchesView="gitlens.showBranchesView",e.ShowCommitDetailsView="gitlens.showCommitDetailsView",e.ShowCommitInView="gitlens.showCommitInView",e.ShowCommitsInView="gitlens.showCommitsInView",e.ShowCommitsView="gitlens.showCommitsView",e.ShowContributorsView="gitlens.showContributorsView",e.ShowFileHistoryView="gitlens.showFileHistoryView",e.ShowFocusPage="gitlens.showFocusPage",e.ShowGraph="gitlens.showGraph",e.ShowGraphPage="gitlens.showGraphPage",e.ShowGraphView="gitlens.showGraphView",e.ShowHomeView="gitlens.showHomeView",e.ShowAccountView="gitlens.showAccountView",e.ShowInCommitGraph="gitlens.showInCommitGraph",e.ShowInCommitGraphView="gitlens.showInCommitGraphView",e.ShowInDetailsView="gitlens.showInDetailsView",e.ShowLastQuickPick="gitlens.showLastQuickPick",e.ShowLineCommitInView="gitlens.showLineCommitInView",e.ShowLineHistoryView="gitlens.showLineHistoryView",e.OpenOnlyChangedFiles="gitlens.openOnlyChangedFiles",e.ShowQuickBranchHistory="gitlens.showQuickBranchHistory",e.ShowQuickCommit="gitlens.showQuickCommitDetails",e.ShowQuickCommitFile="gitlens.showQuickCommitFileDetails",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ShowQuickRepoStatus="gitlens.showQuickRepoStatus",e.ShowQuickCommitRevision="gitlens.showQuickRevisionDetails",e.ShowQuickCommitRevisionInDiffLeft="gitlens.showQuickRevisionDetailsInDiffLeft",e.ShowQuickCommitRevisionInDiffRight="gitlens.showQuickRevisionDetailsInDiffRight",e.ShowQuickStashList="gitlens.showQuickStashList",e.ShowRemotesView="gitlens.showRemotesView",e.ShowRepositoriesView="gitlens.showRepositoriesView",e.ShowSearchAndCompareView="gitlens.showSearchAndCompareView",e.ShowSettingsPage="gitlens.showSettingsPage",e.ShowSettingsPageAndJumpToBranchesView="gitlens.showSettingsPage#branches-view",e.ShowSettingsPageAndJumpToCommitsView="gitlens.showSettingsPage#commits-view",e.ShowSettingsPageAndJumpToContributorsView="gitlens.showSettingsPage#contributors-view",e.ShowSettingsPageAndJumpToFileHistoryView="gitlens.showSettingsPage#file-history-view",e.ShowSettingsPageAndJumpToLineHistoryView="gitlens.showSettingsPage#line-history-view",e.ShowSettingsPageAndJumpToRemotesView="gitlens.showSettingsPage#remotes-view",e.ShowSettingsPageAndJumpToRepositoriesView="gitlens.showSettingsPage#repositories-view",e.ShowSettingsPageAndJumpToSearchAndCompareView="gitlens.showSettingsPage#search-compare-view",e.ShowSettingsPageAndJumpToStashesView="gitlens.showSettingsPage#stashes-view",e.ShowSettingsPageAndJumpToTagsView="gitlens.showSettingsPage#tags-view",e.ShowSettingsPageAndJumpToWorkTreesView="gitlens.showSettingsPage#worktrees-view",e.ShowSettingsPageAndJumpToViews="gitlens.showSettingsPage#views",e.ShowSettingsPageAndJumpToCommitGraph="gitlens.showSettingsPage#commit-graph",e.ShowSettingsPageAndJumpToAutolinks="gitlens.showSettingsPage#autolinks",e.ShowStashesView="gitlens.showStashesView",e.ShowTagsView="gitlens.showTagsView",e.ShowTimelinePage="gitlens.showTimelinePage",e.ShowTimelineView="gitlens.showTimelineView",e.ShowWelcomePage="gitlens.showWelcomePage",e.ShowWorktreesView="gitlens.showWorktreesView",e.ShowWorkspacesView="gitlens.showWorkspacesView",e.StashApply="gitlens.stashApply",e.StashSave="gitlens.stashSave",e.StashSaveFiles="gitlens.stashSaveFiles",e.SwitchAIModel="gitlens.switchAIModel",e.SwitchMode="gitlens.switchMode",e.ToggleCodeLens="gitlens.toggleCodeLens",e.ToggleFileBlame="gitlens.toggleFileBlame",e.ToggleFileBlameInDiffLeft="gitlens.toggleFileBlameInDiffLeft",e.ToggleFileBlameInDiffRight="gitlens.toggleFileBlameInDiffRight",e.ToggleFileChanges="gitlens.toggleFileChanges",e.ToggleFileChangesOnly="gitlens.toggleFileChangesOnly",e.ToggleFileHeatmap="gitlens.toggleFileHeatmap",e.ToggleFileHeatmapInDiffLeft="gitlens.toggleFileHeatmapInDiffLeft",e.ToggleFileHeatmapInDiffRight="gitlens.toggleFileHeatmapInDiffRight",e.ToggleGraph="gitlens.toggleGraph",e.ToggleMaximizedGraph="gitlens.toggleMaximizedGraph",e.ToggleLineBlame="gitlens.toggleLineBlame",e.ToggleReviewMode="gitlens.toggleReviewMode",e.ToggleZenMode="gitlens.toggleZenMode",e.ViewsCopy="gitlens.views.copy",e.ViewsOpenDirectoryDiff="gitlens.views.openDirectoryDiff",e.ViewsOpenDirectoryDiffWithWorking="gitlens.views.openDirectoryDiffWithWorking",e.Deprecated_DiffHeadWith="gitlens.diffHeadWith",e.Deprecated_DiffWorkingWith="gitlens.diffWorkingWith",e.Deprecated_OpenBranchesInRemote="gitlens.openBranchesInRemote",e.Deprecated_OpenBranchInRemote="gitlens.openBranchInRemote",e.Deprecated_OpenCommitInRemote="gitlens.openCommitInRemote",e.Deprecated_OpenFileInRemote="gitlens.openFileInRemote",e.Deprecated_OpenInRemote="gitlens.openInRemote",e.Deprecated_OpenRepoInRemote="gitlens.openRepoInRemote",e.Deprecated_ShowFileHistoryInView="gitlens.showFileHistoryInView",e))(a||{});const c=new Map([["workbench.view.scm",["branches","commits","remotes","repositories","stashes","tags","worktrees","contributors"]],["workbench.view.extension.gitlensPanel",["graph","graphDetails"]],["workbench.view.extension.gitlensInspect",["commitDetails","fileHistory","lineHistory","timeline","searchAndCompare"]],["workbench.view.extension.gitlens",["home","workspaces","account"]]]);var l=(e=>(e.AngleBracketLeftHeavy="❰",e.AngleBracketRightHeavy="❱",e.ArrowBack="↩",e.ArrowDown="↓",e.ArrowDownUp="⇵",e.ArrowDropRight="⤷",e.ArrowHeadRight="➤",e.ArrowLeft="←",e.ArrowLeftDouble="⇐",e.ArrowLeftRight="↔",e.ArrowLeftRightDouble="⇔",e.ArrowLeftRightDoubleStrike="⇎",e.ArrowLeftRightLong="⟷",e.ArrowRight="→",e.ArrowRightDouble="⇒",e.ArrowRightHollow="⇨",e.ArrowUp="↑",e.ArrowUpDown="⇅",e.ArrowUpRight="↗",e.ArrowsHalfLeftRight="⇋",e.ArrowsHalfRightLeft="⇌",e.ArrowsLeftRight="⇆",e.ArrowsRightLeft="⇄",e.Asterisk="∗",e.Check="✔",e.Dash="—",e.Dot="•",e.Ellipsis="…",e.EnDash="–",e.Envelope="✉",e.EqualsTriple="≡",e.Flag="⚑",e.FlagHollow="⚐",e.MiddleEllipsis="⋯",e.MuchLessThan="≪",e.MuchGreaterThan="≫",e.Pencil="✎",e.Space=" ",e.SpaceThin=" ",e.SpaceThinnest=" ",e.SquareWithBottomShadow="❏",e.SquareWithTopShadow="❐",e.Warning="⚠",e.ZeroWidthSpace="​",e))(l||{});const h=["left","alt+left","ctrl+left","right","alt+right","ctrl+right","alt+,","alt+.","alt+enter","ctrl+enter","escape"];var u=(e=>(e.DebugConsole="debug",e.File="file",e.Git="git",e.GitHub="github",e.GitLens="gitlens",e.Output="output",e.PRs="pr",e.Terminal="vscode-terminal",e.Vsls="vsls",e.VslsScc="vsls-scc",e.Virtual="vscode-vfs",e))(u||{}),d=(e=>(e.Version="gitlens:synced:version",e.PreReleaseVersion="gitlens:synced:preVersion",e.HomeViewWelcomeVisible="gitlens:views:welcome:visible",e))(d||{})},3599:(e,t,i)=>{i.d(t,{W:()=>Ma,N:()=>Ua});var r=i(9496),s=i(5148);const o=require("child_process"),n=require("fs");var a=i(1017),c=i.n(a),l=i(7282),h=i(4372),u=i(5255),d=(e=>(e[e.Throw=0]="Throw",e[e.Ignore=1]="Ignore",e))(d||{}),p=i(6592),m=i(4321),g=i(4241),f=i(5367),w=Object.defineProperty,v=Object.getOwnPropertyDescriptor;const y=/^<h>(.+)<n>(.+)<u>(.*)<t>(?:\[(?:ahead ([0-9]+))?[,\s]*(?:behind ([0-9]+))?]|\[(gone)])?<r>(.*)<d>(.*)$/gm,b="%3c",C="%3e";class GitBranchParser{static defaultFormat=[`${b}h${C}%(HEAD)`,`${b}n${C}%(refname)`,`${b}u${C}%(upstream:short)`,`${b}t${C}%(upstream:track)`,`${b}r${C}%(objectname)`,`${b}d${C}%(committerdate:iso8601)`].join("");static parse(e,t,i){const r=[];if(!t)return r;let s,o,n,a,c,l,h,u,d,p;for(;;){if(p=y.exec(t),null==p)break;if([,s,o,n,a,c,l,h,u]=p,o.startsWith("refs/remotes/")){if(o=o.substr(13),o.endsWith("/HEAD"))continue;d=!0}else o=o.substr(11),d=!1;r.push(new f.XI(e,i,o,d,42===s.charCodeAt(0),u?new Date(u):void 0,null==h||0===h.length?void 0:` ${h}`.substr(1),null==n||0===n.length?void 0:{name:` ${n}`.substr(1),missing:Boolean(l)},Number(a)||0,Number(c)||0))}return r}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?v(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&w(t,i,o)})([(0,g.fF)({args:!1,singleLine:!0})],GitBranchParser,"parse",1);var A=i(2800),k=i(3700),P=i(4627),S=i(6450),D=i(439),R=i(7881),$=i(3961),_=Object.defineProperty,F=Object.getOwnPropertyDescriptor,T=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?F(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&_(t,i,o),o};const x=/diff --git a\/(.*) b\/(.*)/,I=/^@@ -(\d+?),(\d+?) \+(\d+?),(\d+?) @@/,O=/(\S)\S*\t([^\t\n]+)(?:\t(.+))?/,B=/^(\d+?|-)\s+?(\d+?|-)\s+?(.*)(?:\n\s(delete|rename|copy|create))?/,E=/(.+)\s=>\s(.+)/,W=/(.*?){(.+?)?\s=>\s(.*?)?}(.*)/,N=/^<r> (.*)\s*(?:(?:diff --git a\/(.*) b\/(.*))|(?:(\S)\S*\t([^\t\n]+)(?:\t(.+))?))/gm,M=/^<r> (\S+)\s*(.*)$/s,U=/^(\S)\S*\t([^\t\n]+)(?:\t(.+)?)?$/gm,L=/(?<files>\d+) files? changed(?:, (?<additions>\d+) insertions?\(\+\))?(?:, (?<deletions>\d+) deletions?\(-\))?/,G="%x3c",H="%x3e",V="%x2f",Y="%x20";var Q=(e=>(e[e.Log=0]="Log",e[e.LogFile=1]="LogFile",e))(Q||{});let q,j,z,K,J,Z,X;function ee(e,t){let i=t?.prefix??"";const r=[];for(const s in e)r.push(s),i+=`${t?.fieldPrefix??""}${e[s]}${t?.fieldSuffix??(null==t?.fieldPrefix?"%x00":"")}`;const s=["-z",`--format=${i}`];return null!=t?.additionalArgs&&t.additionalArgs.length>0&&s.push(...t.additionalArgs),{arguments:s,parse:function*(e){let i,s={},o=0;const n=(0,P.UM)(e,t?.separator??"\0");if(t?.skip)for(let e=0;e<t.skip;e++)i=n.next();for(;i=n.next(),!i.done;)s[r[o++]]=i.value,o===r.length&&(o=0,i=n.next(),t?.parseEntry?.(n,s),yield s,s={})}}}function te(e){return{arguments:["-z",`--format=${e}`],parse:function*(e){let t;const i=(0,P.UM)(e,"\0");for(;t=i.next(),!t.done;)yield t.value}}}function ie(e){return ee(e,{additionalArgs:["--shortstat"],parseEntry:function(e,t){const i=e.next().value,r=L.exec(i);return null!=r?.groups&&(t.stats={files:Number(r.groups.files||0),additions:Number(r.groups.additions||0),deletions:Number(r.groups.deletions||0)}),e.next(),t},prefix:"%x00%x00",separator:"\0",fieldSuffix:"%x00",skip:2})}const re=class _GitLogParser{static allFormat=[`${G}${V}f${H}`,`${G}r${H}${Y}%H`,`${G}a${H}${Y}%aN`,`${G}e${H}${Y}%aE`,`${G}d${H}${Y}%at`,`${G}n${H}${Y}%cN`,`${G}m${H}${Y}%cE`,`${G}c${H}${Y}%ct`,`${G}p${H}${Y}%P`,`${G}t${H}${Y}%D`,`${G}s${H}`,"%B",`${G}${V}s${H}`,`${G}f${H}`].join("%n");static defaultFormat=[`${G}${V}f${H}`,`${G}r${H}${Y}%H`,`${G}a${H}${Y}%aN`,`${G}e${H}${Y}%aE`,`${G}d${H}${Y}%at`,`${G}n${H}${Y}%cN`,`${G}m${H}${Y}%cE`,`${G}c${H}${Y}%ct`,`${G}p${H}${Y}%P`,`${G}s${H}`,"%B",`${G}${V}s${H}`,`${G}f${H}`].join("%n");static simpleRefs=`${G}r${H}${Y}%H`;static simpleFormat=`${G}r${H}${Y}%H`;static shortlog="%H%x00%aN%x00%aE%x00%at";static parse(e,t,i,r,s,o,n,a,c,l,h,u){if(!t)return;let d,p,m,g={},f=0,w=!0;const v=(0,P.UM)(`${t}</f>`);let y=v.next();if(y.done)return;void 0!==r&&(r=(0,k.AH)(r));const b=new Map;let C,S,$,_=a;e:for(;!(y=v.next(),y.done||(p=y.value,c&&a&&f>=a));)switch(m=p.charCodeAt(1),m){case 114:g={sha:p.substring(4)};break;case 97:D.CL===g.sha?g.author="You":g.author=p.substring(4);break;case 101:g.authorEmail=p.substring(4);break;case 100:g.authorDate=p.substring(4);break;case 110:g.committer=p.substring(4);break;case 109:case 99:g.committedDate=p.substring(4);break;case 112:p=p.substring(4),g.parentShas=0!==p.length?p.split(" "):void 0;break;case 116:p=p.substring(4),g.tips=0!==p.length?p.split(", "):void 0;break;case 115:for(;y=v.next(),!y.done&&(p=y.value,"</s>"!==p);)void 0===g.summary?g.summary=p:g.summary+=`\n${p}`;null!=g.summary&&10===g.summary.charCodeAt(g.summary.length-1)&&(g.summary=g.summary.slice(0,-1));break;case 102:{y=v.next();let t=!0;if(y.done||"</f>"===y.value){if((g.parentShas?.length??0)>1){_&&_--;break}t=!1}for(;t&&(y=v.next(),!y.done)&&(p=y.value,"</f>"!==p);)if(!p.startsWith("warning:"))if(0===i)C=O.exec(p),null!=C&&(void 0===g.files&&(g.files=[]),S=C[3],void 0!==S?g.files.push({status:C[1],path:S,originalPath:C[2]}):g.files.push({status:C[1],path:C[2]}));else{if(C=x.exec(p),null!=C){for([,g.originalPath,g.path]=C,g.path===g.originalPath?(g.originalPath=void 0,g.status=R.NV.Modified):g.status=R.NV.Renamed,v.next(),v.next(),y=v.next(),C=I.exec(y.value),null!==C&&(g.line={sha:g.sha,originalLine:parseInt(C[1],10),line:parseInt(C[3],10)});y=v.next(),!y.done&&"</f>"!==y.value;);break}if(y=v.next(),C=B.exec(`${p}\n${y.value}`),null!=C)switch(g.fileStats={additions:Number(C[1])||0,deletions:Number(C[2])||0,changes:0},C[4]){case void 0:g.status="M",g.path=C[3];break;case"copy":case"rename":if(g.status="copy"===C[4]?"C":"R",S=C[3],$=W.exec(S),null!=$){const[,e,t,i,r]=$;g.path=i?`${e}${i}${r}`:`${e.endsWith("/")&&r.startsWith("/")?e.slice(0,-1):e}${r}`,g.originalPath=t?`${e}${t}${r}`:`${e.endsWith("/")&&r.startsWith("/")?e.slice(0,-1):e}${r}`}else $=E.exec(S),null!=$?(g.path=$[2],g.originalPath=$[1]):g.path=S;break;case"create":g.status="A",g.path=C[3];break;case"delete":g.status="D",g.path=C[3];break;default:g.status="M",g.path=C[3]}if(y.done||"</f>"===y.value)break}void 0!==g.files&&(g.path=(0,A.DZ)(g.files,(e=>e.path?e.path:void 0)).join(", ")),w&&void 0===r&&1===i&&void 0!==s?(r=(0,k.AH)(s.replace(s.startsWith("/")?`/${g.path}`:g.path,"")),d=(0,k.AH)((0,k.Gf)(r,s))):d=g.path??(null!=r&&null!=s?(0,k.AH)((0,k.Gf)(r,s)):void 0),w=!1;const o=b.get(g.sha);if(void 0===o){if(f++,a&&f>a)break e}else _&&_--;_GitLogParser.parseEntry(e,g,o,i,r,d,b,n,h);break}}return{repoPath:r,commits:b,sha:o,count:f,limit:a,range:l,hasMore:u??Boolean(_&&f>_&&1!==_)}}static parseEntry(e,t,i,r,s,o,n,a,c){if(null==i){null!=t.author&&(0,$.o)(a,t.author,t.authorEmail)&&(t.author="You"),null!=t.committer&&(0,$.o)(a,t.committer,t.committerEmail)&&(t.committer="You");const l=t.originalPath??(o!==t.path?t.path:void 0),h={files:t.files?.map((e=>new R.K8(s,e.path,e.status,e.originalPath)))};1===r&&null!=o&&(h.file=new R.K8(s,o,t.status,l,void 0,t.fileStats));const u=c?.get(t.sha);null!=u?(i=new S.aM(e,s,u.sha,u.author,u.committer,u.summary,u.parents,u.message,h,void 0,null!=t.line?[t.line]:[],t.tips,u.stashName,u.stashOnRef),n.set(u.sha,i)):(i=new S.aM(e,s,t.sha,new S._j(t.author,t.authorEmail,new Date(1e3*t.authorDate)),new S._j(t.committer,t.committerEmail,new Date(1e3*t.committedDate)),t.summary?.split("\n",1)[0]??"",t.parentShas??[],t.summary??"",h,void 0,null!=t.line?[t.line]:[],t.tips),n.set(t.sha,i))}}static parseSimple(e,t,i){let r,s,o,n,a,c,l;do{if(l=N.exec(e),null==l)break;l[1]!==i&&(t-- >0||([,r,s,o,n,a,c]=l,a=` ${o||s||c||a}`.substr(1),n=null==n||0===n.length?void 0:` ${n}`.substr(1)))}while(t>=0);return N.lastIndex=0,[null==r||0===r.length?void 0:` ${r}`.substr(1),a,n]}static parseSimpleRenamed(e,t){let i=M.exec(e);if(null==i)return[void 0,void 0,void 0];const[,r,s]=i;let o,n,a;for(;;){if(i=U.exec(s),null==i)break;if([,o,n,a]=i,t===n){n=` ${a||n}`.substr(1),o=null==o||0===o.length?void 0:` ${o}`.substr(1);break}o=void 0,n=void 0,a=void 0}return U.lastIndex=0,[null==r||0===r.length||null==n?void 0:` ${r}`.substr(1),n,o]}};T([(0,g.fF)({args:!1})],re,"parse",1),T([(0,g.fF)({args:!1})],re,"parseSimple",1),T([(0,g.fF)({args:!1})],re,"parseSimpleRenamed",1);let se=re;var oe=i(7512),ne=i(4488),ae=Object.defineProperty,ce=Object.getOwnPropertyDescriptor,le=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?ce(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ae(t,i,o),o};class GitReflogRecord{constructor(e,t,i,r,s,o,n){this.repoPath=e,this.sha=t,this._selector=i,this.date=r,this.command=s,this.commandArgs=o,this.details=n}_previousSha;formatDate(e){return(0,oe.p6)(this.date,e??"MMMM Do, YYYY h:mma")}formatDateFromNow(){return(0,oe.Zh)(this.date)}get formattedDate(){return"absolute"===Ma.instance.CommitDateFormatting.dateStyle?this.formatDate(Ma.instance.CommitDateFormatting.dateFormat):this.formatDateFromNow()}get HEAD(){return null==this._selector||0===this._selector.length?"":this._selector.startsWith("refs/heads")?this._selector.substr(11):this._selector.startsWith("refs/remotes")?this._selector.substr(13):this._selector}get previousSha(){return this._previousSha}get previousShortSha(){return(0,m.zL)(this._previousSha)}get selector(){return this._selector}get shortSha(){return(0,m.zL)(this.sha)}update(e,t){void 0!==e&&(this._previousSha=e),void 0!==t&&(this._selector=t)}}le([(0,ne.H)((e=>e??"MMMM Do, YYYY h:mma"))],GitReflogRecord.prototype,"formatDate",1),le([(0,ne.H)()],GitReflogRecord.prototype,"HEAD",1),le([(0,ne.H)()],GitReflogRecord.prototype,"previousShortSha",1),le([(0,ne.H)()],GitReflogRecord.prototype,"shortSha",1);var he=Object.defineProperty,ue=Object.getOwnPropertyDescriptor;const de=/^<r>(.+)<d>(.+?)@{(.+)}<s>(\w*)(.*?)(?::(.*))?$/gm,pe=/.*?\/?HEAD$/,me="%x3c",ge="%x3e";class GitReflogParser{static defaultFormat=[`${me}r${ge}%H`,`${me}d${ge}%gD`,`${me}s${ge}%gs`].join("");static parse(e,t,i,r,s){if(!e)return;const o=[];let n,a,c,l,h,u,d,p,m,g,f,w,v=0,y=0;for(;;){if(w=de.exec(e),null==w)break;if([,n,a,c,l,h,u]=w,y++,void 0!==f){if(n===f.sha&&(c!==g||!pe.test(f.selector)||pe.test(a)))continue;if(n!==f.sha&&(null!=d&&p===g&&m==f.sha&&pe.test(f.selector)?f.update(n,d):f.update(n),o.push(f),f=void 0,g=void 0,v++,0!==r&&v>=r))break}"HEAD"!==l?i.includes(l)&&(f=new GitReflogRecord(t,` ${n}`.substr(1),` ${a}`.substr(1),new Date(c),` ${l}`.substr(1),null==h||0===h.length?void 0:h.substr(1),null==u||0===u.length?void 0:u.substr(1)),g=c):(d=a,p=c,m=n)}return de.lastIndex=0,{repoPath:t,records:o,count:v,total:y,limit:r,hasMore:0!==r&&v>=r||0!==s&&y>=s}}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ue(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&he(t,i,o)})([(0,g.fF)({args:!1})],GitReflogParser,"parse",1);var fe=i(4794),we=i(9502),ve=Object.defineProperty,ye=Object.getOwnPropertyDescriptor;const be=/^<n>(.+)<\*r>(.*)<r>(.*)<d>(.*)<ad>(.*)<s>(.*)$/gm,Ce="%3c",Ae="%3e";class GitTagParser{static defaultFormat=[`${Ce}n${Ae}%(refname)`,`${Ce}*r${Ae}%(*objectname)`,`${Ce}r${Ae}%(objectname)`,`${Ce}d${Ae}%(creatordate:iso8601)`,`${Ce}ad${Ae}%(authordate:iso8601)`,`${Ce}s${Ae}%(subject)`].join("");static parse(e,t){if(!e)return;const i=[];let r,s,o,n,a,c,l;for(;;){if(l=be.exec(e),null==l)break;[,r,s,o,n,a,c]=l,r=r.substr(10),i.push(new we.gE(t,r,` ${s||o}`.substr(1),` ${c}`.substr(1),n?new Date(n):void 0,null==a||0===a.length?void 0:new Date(a)))}return i}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ye(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&ve(t,i,o)})([(0,g.fF)({args:!1,singleLine:!0})],GitTagParser,"parse",1);var ke=i(3105),Pe=i(4336),Se=i(8227),De=i(6004),Re=i(2509),$e=i(4550);let _e,Fe;const Te="GitLens";const xe="win32"===l.platform,Ie=/[\\/]/,Oe=/\.ps1$/i,Be=/\.(bat|cmd)$/i,Ee=/\.(js)$/i;function We(e){if(Ie.test(e))return e;const t=(0,a.join)(".",e);try{const e=(0,n.statSync)(t);if(e?.isFile()&&Ne(e))return t}catch{}const i=l.env.PATH;if(null!=i&&0!==i.length){const t=i.split(xe?";":":");let r;for(const i of t){const t=(0,a.join)(i,e);try{if(r=(0,n.statSync)(t),r?.isFile()&&Ne(r))return t}catch{}}}return e}function Ne(e){if(xe)return!0;const t=!e.gid||null!=l.getgid&&e.gid===l.getgid(),i=!e.uid||null!=l.getuid&&e.uid===l.getuid();return Boolean(1&e.mode||8&e.mode&&t||64&e.mode&&i)}function Me(e,t){if(!xe)return{cmd:We(e),args:t};if(!(0,n.existsSync)(e)){const i=[".exe",".bat",".cmd",".ps1"];for(const r of i){const i=We(`${e}${r}`);if((0,n.existsSync)(i))return Me(i,t)}}if(Oe.test(e)){return{cmd:(0,a.join)(l.env.SYSTEMROOT??"C:\\WINDOWS","System32","WindowsPowerShell","v1.0","PowerShell.exe"),args:["-ExecutionPolicy","Unrestricted","-NoLogo","-NonInteractive","-File",e].concat(t)}}if(Be.test(e)){return{cmd:(0,a.join)(l.env.SYSTEMROOT??"C:\\WINDOWS","System32","cmd.exe"),args:["/C",e,...t]}}if(Ee.test(e)){return{cmd:l.execPath,args:[e].concat(t)}}return{cmd:e,args:t}}const Ue=/stdout maxBuffer( length)? exceeded/;class RunError extends Error{constructor(e,t,i){super(e.message),this.original=e,this.stdout=t,this.stderr=i,t=t.trim(),i=i.trim(),Error.captureStackTrace?.(this,RunError)}get cmd(){return this.original.cmd}get killed(){return this.original.killed}get code(){return this.original.code}get signal(){return this.original.signal}}class CancelledRunError extends RunError{constructor(e,t,i,r="SIGTERM"){super({name:"CancelledRunError",message:"Cancelled",cmd:e,killed:t,code:i,signal:r},"",""),Error.captureStackTrace?.(this,CancelledRunError)}}function Le(e,t,r,s){const{stdin:n,stdinEncoding:a,...c}={maxBuffer:104857600,...s};let l=!1;return new Promise(((h,u)=>{const d=(0,o.execFile)(e,t,c,(async(o,n,a)=>{if(!l)if(s?.exitCodeOnly)h(o?.code??d.exitCode);else if(null==o)if(a&&Pe.Yd.warn(`Warning(${e} ${t.join(" ")}): ${a}`),"utf8"===r||"binary"===r||"buffer"===r)h(n);else{const e=(await i.e(429).then(i.t.bind(i,4914,23))).decode;h(e(Buffer.from(n,"binary"),r))}else{let e,t;if(Ue.test(o.message)&&(o.message=`Command output exceeded the allocated stdout buffer. Set 'options.maxBuffer' to a larger value than ${c.maxBuffer} bytes`),"utf8"===r||"binary"===r||"buffer"===r)e=n.toString(),t=a.toString();else{const s=(await i.e(429).then(i.t.bind(i,4914,23))).decode;e=s(Buffer.from(n,"binary"),r),t=s(Buffer.from(a,"binary"),r)}u(new RunError(o,e,t))}}));s?.cancellation?.onCancellationRequested((()=>{const t=d.kill();l=!0,s?.exitCodeOnly?h(0):u(new CancelledRunError(e,t))})),null!=n&&d.stdin?.end(n,a??"utf8")}))}async function Ge(e){return new Promise((t=>(0,n.access)(e,n.constants.F_OK,(e=>t(null==e)))))}var He=Object.defineProperty,Ve=Object.getOwnPropertyDescriptor;const Ye=Object.freeze([]),Qe=Object.freeze({}),qe=Object.freeze(["-c","color.branch=false"]),je=Object.freeze(["-c","color.diff=false"]),ze=Object.freeze(["-c","log.showSignature=false"]),Ke=Object.freeze(["-c","log.showSignature=false","-c","diff.renameLimit=0"]),Je=Object.freeze(["-c","color.status=false"]),Ze=new TextDecoder("utf8"),Xe="4b825dc642cb6eb9a060e54bf8d69288fbee4904",et={badRevision:/bad revision '(.*?)'/i,cantLockRef:/cannot lock ref|unable to update local ref/i,changesWouldBeOverwritten:/Your local changes to the following files would be overwritten/i,commitChangesFirst:/Please, commit your changes before you can/i,conflict:/^CONFLICT \([^)]+\): \b/m,noFastForward:/\(non-fast-forward\)/i,noMergeBase:/no merge base/i,noRemoteRepositorySpecified:/No remote repository specified\./i,notAValidObjectName:/Not a valid object name/i,noUserNameConfigured:/Please tell me who you are\./i,invalidLineCount:/file .+? has only \d+ lines/i,uncommittedChanges:/contains modified or untracked files/i,alreadyExists:/already exists/i,alreadyCheckedOut:/already checked out/i,mainWorkingTree:/is a main working tree/i,noUpstream:/^fatal: The current branch .* has no upstream branch/i,permissionDenied:/Permission.*denied/i,pushRejected:/^error: failed to push some refs to\b/m,rebaseMultipleBranches:/cannot rebase onto multiple branches/i,remoteAhead:/rejected because the remote contains work/i,remoteConnection:/Could not read from remote repository/i,tagConflict:/! \[rejected\].*\(would clobber existing tag\)/m,unmergedFiles:/is not possible because you have unmerged files/i,unstagedChanges:/You have unstaged changes/i},tt={notARepository:/Not a git repository/i,outsideRepository:/is outside repository/i,noPath:/no such path/i,noCommits:/does not have any commits/i,notFound:/Path '.*?' does not exist in/i,foundButNotInRevision:/Path '.*?' exists on disk, but not in/i,headNotABranch:/HEAD does not point to a branch/i,noUpstream:/no upstream configured for branch '(.*?)'/i,unknownRevision:/ambiguous argument '.*?': unknown revision or path not in the working tree|not stored as a remote-tracking branch/i,mustRunInWorkTree:/this operation must be run in a work tree/i,patchWithConflicts:/Applied patch to '.*?' with conflicts/i,noRemoteRepositorySpecified:/No remote repository specified\./i,remoteConnectionError:/Could not read from remote repository/i,notAGitCommand:/'.+' is not a git command/i,tipBehind:/tip of your current branch is behind/i};function it(e,t,i){const r=e.message||e.toString();if(null!=r&&0!==r.length){for(const e of Object.values(tt))if(e.test(r)){const e=void 0!==i?` [${(0,P.qk)(i)}ms]`:"";return Pe.Yd.warn(`[${t}] Git ${r.trim().replace(/fatal: /g,"").replace(/\r?\n|\r/g,` ${u.NE.Dot} `)}${e}`),""}const e=et.badRevision.exec(r);if(null!=e){const[,t]=e;if(t?.endsWith("^3"))return""}}throw e}class Git{pendingCommands=new Map;async git(e,...t){if(!r.workspace.isTrusted)throw new p.q6;const i=(0,h.a)(),{configs:s,correlationKey:o,errors:n,encoding:a,...c}=e,m={...c,encoding:"utf8"===(a??"utf8")?"utf8":"buffer",env:{...l.env,...this._gitEnv,...e.env??Qe,GCM_INTERACTIVE:"NEVER",GCM_PRESERVE_CREDS:"TRUE",LC_ALL:"C"}},g=`[${m.cwd}] git ${t.join(" ")}`,f=`${void 0!==o?`${o}:`:""}${g}`;let w,v,y=this.pendingCommands.get(f);void 0===y?(w=!1,t.unshift("-c","core.quotepath=false","-c","color.ui=false",...null!=s?s:Ye),"win32"===l.platform&&t.unshift("-c","core.longpaths=true"),y=Le(await this.path(),t,a??"utf8",m),this.pendingCommands.set(f,y)):(w=!0,Pe.Yd.debug(`[GIT  ] ${g} ${u.NE.Dot} waiting...`));try{return await y}catch(t){switch(v=t,n){case d.Ignore:return v=void 0,"";case d.Throw:throw t;default:return v=void 0,it(t,e.cwd,i)}}finally{this.pendingCommands.delete(f);const e=(0,P.qk)(i),t=e>Se.O,r=t||w?` (${t?"slow"+(w?", waiting":""):""}${w?"waiting":""})`:"";null!=v?Pe.Yd.error("",`[GIT  ] ${g} ${u.NE.Dot} ${(v.message||String(v)||"").trim().replace(/fatal: /g,"").replace(/\r?\n|\r/g,` ${u.NE.Dot} `)} [${e}ms]${r}`):t?Pe.Yd.warn(`[GIT  ] ${g} [*${e}ms]${r}`):Pe.Yd.log(`[GIT  ] ${g} [${e}ms]${r}`),this.logGitCommand(`${g}${null!=v?` ${u.NE.Dot} FAILED`:""}${w?" (waited)":""}`,e,v)}}async gitSpawn(e,...t){if(!r.workspace.isTrusted)throw new p.q6;const i=(0,h.a)(),{cancellation:s,configs:n,stdin:a,stdinEncoding:c,...d}=e,m={stdio:[a?"pipe":"ignore",null,null],...d,env:{...l.env,...this._gitEnv,...e.env??Qe,GCM_INTERACTIVE:"NEVER",GCM_PRESERVE_CREDS:"TRUE",LC_ALL:"C"}},g=`[${m.cwd}] git ${t.join(" ")}`;if(t.unshift("-c","core.quotepath=false","-c","color.ui=false",...void 0!==n?n:Ye),"win32"===l.platform&&t.unshift("-c","core.longpaths=true"),s){const e=new AbortController;m.signal=e.signal,s.onCancellationRequested((()=>e.abort()))}const f=(0,o.spawn)(await this.path(),t,m);let w;return a&&f.stdin?.end(a,c??"utf8"),f.once("error",(e=>w=e)),f.once("exit",(()=>{const e=(0,P.qk)(i),t=e>Se.O,r=t?" (slow)":"";null!=w?Pe.Yd.error("",`[SGIT ] ${g} ${u.NE.Dot} ${(w.message||String(w)||"").trim().replace(/fatal: /g,"").replace(/\r?\n|\r/g,` ${u.NE.Dot} `)} [${e}ms]${r}`):t?Pe.Yd.warn(`[SGIT ] ${g} [*${e}ms]${r}`):Pe.Yd.log(`[SGIT ] ${g} [${e}ms]${r}`),this.logGitCommand(`${g}${null!=w?` ${u.NE.Dot} FAILED`:""}`,e,w)})),f}_gitLocation;_gitLocationPromise;async getLocation(){return null==this._gitLocation&&(null==this._gitLocationPromise&&(this._gitLocationPromise=this._gitLocator()),this._gitLocation=await this._gitLocationPromise),this._gitLocation}_gitLocator;setLocator(e){this._gitLocator=e,this._gitLocationPromise=void 0,this._gitLocation=void 0}_gitEnv;setEnv(e){this._gitEnv=e}async path(){return(await this.getLocation()).path}async version(){return(await this.getLocation()).version}async isAtLeastVersion(e){return-1!==(0,$e.qu)((0,$e.mL)(await this.version()),(0,$e.mL)(e))}maybeIsAtLeastVersion(e){return null!=this._gitLocation?-1!==(0,$e.qu)((0,$e.mL)(this._gitLocation.version),(0,$e.mL)(e)):void 0}add(e,t){return this.git({cwd:e},"add","-A","--",t)}apply(e,t,i={}){const r=["apply","--whitespace=warn"];return i.allowConflicts&&r.push("-3"),this.git({cwd:e,stdin:t},...r)}ignoreRevsFileMap=new Map;async blame(e,t,i,r={}){const[s,o]=(0,k.uo)(t,e,!0),n=["blame","--root","--incremental"];r.ignoreWhitespace&&n.push("-w"),null!=r.startLine&&null!=r.endLine&&n.push(`-L ${r.startLine},${r.endLine}`),null!=r.args&&n.push(...r.args);let a=this.maybeIsAtLeastVersion("2.23");void 0===a&&(a=await this.isAtLeastVersion("2.23"));const c=n.indexOf("--ignore-revs-file");if(a){let e;-1!==c?(e=n[c+1],(0,k.YP)(e)||(e=(0,k.RQ)(o,e))):e=(0,k.RQ)(o,".git-blame-ignore-revs");const t=this.ignoreRevsFileMap.get(e);if(void 0!==t)a=t;else{try{a=await Ge(e)}catch{a=!1}this.ignoreRevsFileMap.set(e,a)}}let l;return a||-1===c?a&&-1===c&&n.push("--ignore-revs-file",".git-blame-ignore-revs"):n.splice(c,2),i&&((0,m.rD)(i)?(n.push("--contents","-"),l=await this.show(e,t,":")):n.push(i)),this.git({cwd:o,stdin:l},...n,"--",s)}blame__contents(e,t,i,r={}){const[s,o]=(0,k.uo)(t,e,!0),n=["blame","--root","--incremental"];return r.ignoreWhitespace&&n.push("-w"),null!=r.startLine&&null!=r.endLine&&n.push(`-L ${r.startLine},${r.endLine}`),null!=r.args&&n.push(...r.args),n.push("--contents","-"),this.git({cwd:o,stdin:i,correlationKey:r.correlationKey},...n,"--",s)}branchOrTag__containsOrPointsAt(e,t,i){const r=[i?.type??"branch"];return i?.all?r.push("-a"):i?.remotes&&r.push("-r"),r.push("pointsAt"===i?.mode?`--points-at=${t}`:`--contains=${t}`,"--format=%(refname:short)"),null!=i?.name&&r.push(i.name),this.git({cwd:e,configs:qe,errors:d.Ignore},...r)}check_ignore(e,...t){return this.git({cwd:e,errors:d.Ignore,stdin:t.join("\0")},"check-ignore","-z","--stdin")}check_mailmap(e,t){return this.git({cwd:e,errors:d.Ignore},"check-mailmap",t)}async check_ref_format(e,t,i={branch:!0}){const r=["check-ref-format"];i.branch?r.push("--branch"):r.push("--normalize");try{const i=await this.git({cwd:t??"",errors:d.Throw},...r,e);return Boolean(i.trim())}catch{return!1}}checkout(e,t,{createBranch:i,path:r}={}){const s=["checkout"];return i?s.push("-b",i,t,"--"):(s.push(t,"--"),r&&([r,e]=(0,k.uo)(r,e,!0),s.push(r))),this.git({cwd:e},...s)}async clone(e,t){let i=0;const[,,r]=(0,fe.Sk)(e),s=r.split("/").pop();if(!s)return;let o=(0,a.join)(t,s);for(;await Ge(o)&&i<20;)i++,o=(0,a.join)(t,`${r}-${i}`);return await this.git({cwd:t},"clone",e,o),o}async config__get(e,t,i){const r=await this.git({cwd:t??"",errors:d.Ignore,local:i?.local},"config","--get",e);return 0===r.length?void 0:r.trim()}async config__get_regex(e,t,i){const r=await this.git({cwd:t??"",errors:d.Ignore,local:i?.local},"config","--get-regex",e);return 0===r.length?void 0:r.trim()}async config__set(e,t,i){const r=["config","--local"];null==t?r.push("--unset",e):r.push(e,t),await this.git({cwd:i??"",local:!0},...r)}async diff(e,t,i,r,s={}){const o=["diff","--no-ext-diff","--minimal"];null!=s.linesOfContext&&o.push(`-U${s.linesOfContext}`),s.renames&&o.push("-M"+(null==s.similarityThreshold?"":`${s.similarityThreshold}%`)),null!=s.filters&&0!==s.filters.length&&o.push(`--diff-filter=${s.filters.join("")}`),i&&(i.endsWith("^3^")&&(i=Xe),o.push((0,m.rD)(i)?"--staged":i)),r&&o.push((0,m.rD)(r)?"--staged":r);try{return await this.git({cwd:e,configs:je,encoding:s.encoding},...o,"--",t)}catch(o){const n=et.badRevision.exec(o.message);if(null!==n){const[,o]=n;if(o===i&&null!=o&&o.endsWith("^"))return this.diff(e,t,Xe,r,s)}throw o}}async diff2(e,t,...i){return this.git({cwd:e,cancellation:t?.cancellation,configs:t?.configs??ze,errors:t?.errors,stdin:t?.stdin},"diff",...t?.stdin?["--stdin"]:Ye,...i,...i.includes("--")?Ye:["--"])}async diff__contents(e,t,i,r,s={}){const o=["diff","-M"+(null==s.similarityThreshold?"":`${s.similarityThreshold}%`),"--no-ext-diff","-U0","--minimal"];null!=s.filters&&0!==s.filters.length&&o.push(`--diff-filter=${s.filters.join("")}`),o.push("--no-index");try{return await this.git({cwd:e,configs:je,encoding:s.encoding,stdin:r},...o,"--",t,"-")}catch(o){if(o instanceof RunError&&o.stdout)return o.stdout;const n=et.badRevision.exec(o.message);if(null!==n){const[,o]=n;if(o===i&&null!=o&&o.endsWith("^"))return this.diff__contents(e,t,Xe,r,s)}throw o}}diff__name_status(e,t,i,{filters:r,similarityThreshold:s}={}){const o=["diff","--name-status","-M"+(null==s?"":`${s}%`),"--no-ext-diff","-z"];return null!=r&&0!==r.length&&o.push(`--diff-filter=${r.join("")}`),t&&o.push(t),i&&o.push(i),this.git({cwd:e,configs:je},...o,"--")}async diff__shortstat(e,t){const i=["diff","--shortstat","--no-ext-diff"];t&&i.push(t);try{return await this.git({cwd:e,configs:je},...i,"--")}catch(e){const t=e?.toString()??"";if(et.noMergeBase.test(t))return;throw e}}difftool(e,t,i,r={}){const s=["difftool","--no-prompt",`--tool=${i}`];return r.staged&&s.push("--staged"),r.ref1&&s.push(r.ref1),r.ref2&&s.push(r.ref2),this.git({cwd:e},...s,"--",t)}difftool__dir_diff(e,t,i,r){const s=["difftool","--dir-diff",`--tool=${t}`,i];return r&&s.push(r),this.git({cwd:e},...s)}async fetch(e,t={}){const i=["fetch"];t.prune&&i.push("--prune"),t.branch&&t.remote?t.upstream&&t.pull?i.push("-u",t.remote,`${t.upstream}:${t.branch}`):i.push(t.remote,t.upstream||t.branch):t.remote?i.push(t.remote):t.all&&i.push("--all");try{await this.git({cwd:e},...i)}catch(e){const i=e?.toString()??"";let r=p.uI.Other;throw et.noFastForward.test(i)||et.noFastForward.test(e.stderr??"")?r=p.uI.NoFastForward:et.noRemoteRepositorySpecified.test(i)||et.noRemoteRepositorySpecified.test(e.stderr??"")?r=p.uI.NoRemote:(et.remoteConnection.test(i)||et.remoteConnection.test(e.stderr??""))&&(r=p.uI.RemoteConnection),new p.kp(r,e,t?.branch,t?.remote)}}async push(e,t){const i=["push"];t.force&&i.push("--force"),t.branch&&t.remote?t.upstream?i.push("-u",t.remote,`${t.upstream}:${t.branch}`):t.publish?i.push("--set-upstream",t.remote,t.branch):i.push(t.remote,t.branch):t.remote&&i.push(t.remote);try{await this.git({cwd:e},...i)}catch(e){const i=e?.toString()??"";let r=p.gk.Other;throw et.remoteAhead.test(i)||et.remoteAhead.test(e.stderr??"")?r=p.gk.RemoteAhead:tt.tipBehind.test(i)||tt.tipBehind.test(e.stderr??"")?r=p.gk.TipBehind:et.pushRejected.test(i)||et.pushRejected.test(e.stderr??"")?r=p.gk.PushRejected:et.permissionDenied.test(i)||et.permissionDenied.test(e.stderr??"")?r=p.gk.PermissionDenied:et.remoteConnection.test(i)||et.remoteConnection.test(e.stderr??"")?r=p.gk.RemoteConnection:(et.noUpstream.test(i)||et.noUpstream.test(e.stderr??""))&&(r=p.gk.NoUpstream),new p.FD(r,e,t?.branch,t?.remote)}}async pull(e,t){const i=["pull"];t.tags&&i.push("--tags"),t.rebase&&i.push("-r"),t.remote&&t.branch&&(i.push(t.remote),i.push(t.branch));try{await this.git({cwd:e},...i)}catch(e){const i=e?.toString()??"";let r=p.PK.Other;throw et.conflict.test(i)||et.conflict.test(e.stdout??"")?r=p.PK.Conflict:et.noUserNameConfigured.test(i)||et.noUserNameConfigured.test(e.stderr??"")?r=p.PK.GitIdentity:et.remoteConnection.test(i)||et.remoteConnection.test(e.stderr??"")?r=p.PK.RemoteConnection:et.unstagedChanges.test(i)||et.unstagedChanges.test(e.stderr??"")?r=p.PK.UnstagedChanges:et.unmergedFiles.test(i)||et.unmergedFiles.test(e.stderr??"")?r=p.PK.UnmergedFiles:et.commitChangesFirst.test(i)||et.commitChangesFirst.test(e.stderr??"")?r=p.PK.UncommittedChanges:et.changesWouldBeOverwritten.test(i)||et.changesWouldBeOverwritten.test(e.stderr??"")?r=p.PK.OverwrittenChanges:et.cantLockRef.test(i)||et.cantLockRef.test(e.stderr??"")?r=p.PK.RefLocked:et.rebaseMultipleBranches.test(i)||et.rebaseMultipleBranches.test(e.stderr??"")?r=p.PK.RebaseMultipleBranches:(et.tagConflict.test(i)||et.tagConflict.test(e.stderr??""))&&(r=p.PK.TagConflict),new p.wG(r,e,t?.branch,t?.remote)}}for_each_ref__branch(e,t={all:!1}){const i=["for-each-ref",`--format=${GitBranchParser.defaultFormat}`,"refs/heads"];return t.all&&i.push("refs/remotes"),this.git({cwd:e},...i)}log(e,t,{all:i,argsOrFormat:r,authors:s,limit:o,merges:n,ordering:a,similarityThreshold:c,since:l,until:h}){null==r&&(r=["--name-status",`--format=${i?se.allFormat:se.defaultFormat}`]),"string"==typeof r&&(r=[`--format=${r}`]);const u=["log",...r,"--full-history","-M"+(null==c?"":`${c}%`),"-m"];return a&&u.push(`--${a}-order`),o&&u.push(`-n${o+1}`),l&&u.push(`--since="${l}"`),h&&u.push(`--until="${h}"`),n||u.push("--first-parent"),null!=s&&0!==s.length&&(u.includes("--use-mailmap")||u.push("--use-mailmap"),u.push(...s.map((e=>`--author=^${e.name} <${e.email}>$`)))),i&&u.push("--all","--single-worktree"),t&&!(0,m.rD)(t)&&u.push(t),this.git({cwd:e,configs:Ke},...u,"--")}log2(e,t,...i){return this.git({cwd:e,cancellation:t?.cancellation,configs:t?.configs??ze,errors:t?.errors,stdin:t?.stdin},"log",...t?.stdin?["--stdin"]:Ye,...i,...t?.ref&&!(0,m.rD)(t.ref)?[t.ref]:Ye,...i.includes("--")?Ye:["--"])}async logStreamTo(e,t,i,r,...s){const o=["log",...s];r?.stdin&&o.push("--stdin");const n=await this.gitSpawn({cwd:e,configs:r?.configs??ze,stdin:r?.stdin},...o,"--"),a=rt(t);let c=!1,l=0;return new Promise(((e,t)=>{const r=[],s=[];function o(e){r.push(e)}function h(e){t(e)}function u(i){0!==i&&t(new Error(r.join(""))),e([s,l])}n.on("error",h),n.on("exit",u),n.stdout.setEncoding("utf8"),n.stdout.on("data",(function t(r){s.push(r),l+=r.match(/(?:^\x00*|\x00\x00)[0-9a-f]{40}\x00/g)?.length??0,!c&&a.test(r)&&(c=!0,l>i&&(i=l+50)),!c||l<=i||(n.removeListener("exit",u),n.removeListener("error",h),n.stdout.removeListener("data",t),n.stderr.removeListener("data",o),n.kill(),e([s,l]))})),n.stderr.setEncoding("utf8"),n.stderr.on("data",o)}))}log__file(e,t,i,{all:r,argsOrFormat:s,fileMode:o="full",filters:n,limit:a,merges:c=!1,ordering:l,renames:h=!0,reverse:u=!1,since:d,skip:p,startLine:g,endLine:f}={}){const[w,v]=(0,k.uo)(t,e,!0);null==s&&(s=[`--format=${r?se.allFormat:se.defaultFormat}`]),"string"==typeof s&&(s=[`--format=${s}`]);const y=["log",...s];return l&&y.push(`--${l}-order`),a&&!u&&y.push(`-n${a+1}`),p&&y.push(`--skip=${p}`),d&&y.push(`--since="${d}"`),r&&y.push("--all","--single-worktree"),c&&y.push("--first-parent"),h&&null!=g&&(h=!1),h&&y.push("--follow"),null!=n&&0!==n.length&&y.push(`--diff-filter=${n.join("")}`),"none"!==o&&(null==g?"simple"===o||(0,k.Mh)(w)?y.push("--name-status"):y.push("--numstat","--summary"):y.push(`-L ${g},${f??g}:${w}`)),i&&!(0,m.rD)(i)&&(u?y.push("--reverse","--ancestry-path",`${i}..HEAD`):y.push(i)),null==g&&y.push("--",w),this.git({cwd:v,configs:ze},...y)}async log__file_recent(e,t,i){const r=["log","-M"+(null==i?.similarityThreshold?"":`${i?.similarityThreshold}%`),"-n1","--format=%H"];i?.ordering&&r.push(`--${i?.ordering}-order`),i?.ref&&r.push(i?.ref);const s=await this.git({cancellation:i?.cancellation,cwd:e,configs:ze,errors:d.Ignore},...r,"--",t);return 0===s.length?void 0:s.trim()}async log__find_object(e,t,i,r,s,o){const n=["log","-n1","--no-renames","--format=%H",`--find-object=${t}`,i];r&&n.push(`--${r}-order`),s&&n.push("--",s);const a=await this.git({cancellation:o,cwd:e,configs:ze,errors:d.Ignore},...n);return 0===a.length?void 0:a.trim()}async log__recent(e,t){const i=["log","-n1","--format=%H"];t&&i.push(`--${t}-order`);const r=await this.git({cwd:e,configs:ze,errors:d.Ignore},...i,"--");return 0===r.length?void 0:r.trim()}async log__recent_committerdate(e,t){const i=["log","-n1","--format=%ct"];t&&i.push(`--${t}-order`);const r=await this.git({cwd:e,configs:ze,errors:d.Ignore},...i,"--");return 0===r.length?void 0:r.trim()}log__search(e,t=Ye,i){if(null!=i?.shas){const t=(0,ke.v_)(i.shas,"\n");return this.git({cwd:e,stdin:t},"show","--stdin","--name-status",`--format=${se.defaultFormat}`,"--use-mailmap")}let r;return[t,r]=(0,A.lx)(t,t.indexOf("--")),this.git({cwd:e,configs:["-C",e,...ze],stdin:i?.stdin},"log",...i?.stdin?["--stdin"]:Ye,"--name-status",`--format=${se.defaultFormat}`,"--use-mailmap",...t,...i?.ordering?[`--${i.ordering}-order`]:Ye,...i?.limit?[`-n${i.limit+1}`]:Ye,...i?.skip?[`--skip=${i.skip}`]:Ye,...r)}async ls_files(e,t,{ref:i,untracked:r}={}){const s=["ls-files"];i&&!(0,m.l3)(i)&&s.push(`--with-tree=${i}`),!i&&r&&s.push("-o");const o=await this.git({cwd:e,errors:d.Ignore},...s,"--",t);return 0===o.length?void 0:o.trim()}ls_remote(e,t,i){return this.git({cwd:e},"ls-remote",t,i)}ls_remote__HEAD(e,t){return this.git({cwd:e},"ls-remote","--symref",t,"HEAD")}async ls_tree(e,t,i){const r=["ls-tree"];i?r.push("-l",t,"--",i):r.push("-lrt",t,"--");const s=await this.git({cwd:e,errors:d.Ignore},...r);return 0===s.length?void 0:s.trim()}merge_base(e,t,i,r){const s=["merge-base"];return r?.forkPoint&&s.push("--fork-point"),this.git({cwd:e},...s,t,i)}async merge_base__is_ancestor(e,t,i){return 0===await this.git({cwd:e,exitCodeOnly:!0},"merge-base","--is-ancestor",t,i)}reflog(e,{all:t,branch:i,limit:r,ordering:s,skip:o}={}){const n=["log","--walk-reflogs",`--format=${GitReflogParser.defaultFormat}`,"--date=iso8601"];return s&&n.push(`--${s}-order`),t&&n.push("--all"),r&&n.push(`-n${r}`),o&&n.push(`--skip=${o}`),i&&n.push(i),this.git({cwd:e,configs:ze},...n,"--")}remote(e){return this.git({cwd:e},"remote","-v")}remote__add(e,t,i,r){const s=["remote","add"];return r?.fetch&&s.push("-f"),this.git({cwd:e},...s,t,i)}remote__prune(e,t){return this.git({cwd:e},"remote","prune",t)}remote__remove(e,t){return this.git({cwd:e},"remote","remove",t)}remote__get_url(e,t){return this.git({cwd:e},"remote","get-url",t)}reset(e,t){return this.git({cwd:e},"reset","-q","--",t)}async rev_list(e,t,i){const r=["rev-list"];i?.all&&r.push("--all"),null!=i?.maxParents&&r.push(`--max-parents=${i.maxParents}`);const s=(await this.git({cwd:e,errors:d.Ignore},...r,t,"--")).trim().split("\n");if(0!==s.length)return s}async rev_list__count(e,t,i){const r=["rev-list","--count"];i&&r.push("--all");let s=await this.git({cwd:e,errors:d.Ignore},...r,t,"--");if(s=s.trim(),0===s.length)return;const o=parseInt(s,10);return isNaN(o)?void 0:o}async rev_list__left_right(e,t){const i=await this.git({cwd:e,errors:d.Ignore},"rev-list","--left-right","--count",...t,"--");if(0===i.length)return;const r=i.split("\t");if(2!==r.length)return;const[s,o]=r,n={ahead:parseInt(s,10),behind:parseInt(o,10)};return isNaN(n.ahead)||isNaN(n.behind)?void 0:n}async rev_parse(e,t){const i=await this.git({cwd:e,errors:d.Ignore},"rev-parse",t);return 0===i.length?void 0:i.trim()}async rev_parse__currentBranch(e,t){try{return[await this.git({cwd:e,errors:d.Throw},"rev-parse","--abbrev-ref","--symbolic-full-name","@","@{u}","--"),void 0]}catch(i){const r=i?.toString()??"";if(et.badRevision.test(r)||tt.noUpstream.test(r)){if(null!=i.stdout&&0!==i.stdout.length)return[i.stdout,void 0];try{const t=await this.symbolic_ref(e,"HEAD");if(null!=t)return[t.trim(),void 0]}catch{}try{const t=await this.symbolic_ref(e,"refs/remotes/origin/HEAD");if(null!=t)return[t.trim().substr(7),void 0]}catch(t){if(/is not a symbolic ref/.test(t.stderr))try{const t=await this.ls_remote__HEAD(e,"origin");if(null!=t){const e=/ref:\s(\S+)\s+HEAD/m.exec(t);if(null!=e){const[,t]=e;return[t.substr(11),void 0]}}}catch{}}const t=await this.config__get("init.defaultBranch",e)??"main",r=await this.config__get_regex(`branch\\.${t}\\.+`,e,{local:!0});let s,o;if(r){let e=/^branch\..+\.remote\s(.+)$/m.exec(r);null!=e&&(s=e[1]),e=/^branch\..+\.merge\srefs\/heads\/(.+)$/m.exec(r),null!=e&&(o=e[1])}return[`${t}${s&&o?`\n${s}/${o}`:""}`,void 0]}if(tt.headNotABranch.test(r)){const i=await this.log__recent(e,t);if(void 0===i)return;return[`(HEAD detached at ${(0,m.zL)(i)})`,i]}return void it(i,e)}}async rev_parse__git_dir(e){const t=await this.git({cwd:e,errors:d.Ignore},"rev-parse","--git-dir","--git-common-dir");if(0===t.length)return;let[i,r]=t.split("\n").map((e=>e.trimStart()));return(0,k.YP)(i)||(i=(0,k.RQ)(e,i)),i=(0,k.AH)(i),r?((0,k.YP)(r)||(r=(0,k.RQ)(e,r)),r=(0,k.AH)(r),{path:i,commonPath:r!==i?r:void 0}):{path:i}}async rev_parse__show_toplevel(e){let t;if(!r.workspace.isTrusted)try{if((0,n.accessSync)((0,k.RQ)(e,"HEAD")),t=await this.git({cwd:e,errors:d.Throw,configs:["-C",e]},"rev-parse","--show-cdup"),""===t.trim())return Pe.Yd.log(`Skipping (untrusted workspace); bare clone repository detected in '${e}'`),Ye}catch{}try{return t=await this.git({cwd:e,errors:d.Throw},"rev-parse","--show-toplevel"),0===t.length?Ye:[!0,(0,k.AH)(t.trimStart().replace(/[\r|\n]+$/,""))]}catch(i){if(i instanceof p.q6)return Ye;const s=/^fatal: detected dubious ownership in repository at '([^']+)'[\s\S]*git config --global --add safe\.directory '?([^'\n]+)'?$/m.exec(i.stderr);if(3===s?.length)return Pe.Yd.log(`Skipping; unsafe repository detected in '${s[1]}'; run 'git config --global --add safe.directory ${s[2]}' to allow it`),[!1];const o=/this operation must be run in a work tree/.test(i.stderr);if(o&&r.workspace.isTrusted&&(t=await this.git({cwd:e,errors:d.Ignore},"rev-parse","--is-bare-repository"),"true"===t.trim()&&(t=await this.git({cwd:e,errors:d.Ignore},"rev-parse","--git-common-dir"),t=t.trim(),t.length)))return[!0,(0,k.AH)(("."===t?e:t).trimStart().replace(/[\r|\n]+$/,""))];if(o||"ENOENT"===i.code){let t=!o&&await Ge(e);if(!t){do{const i=(0,k.XX)(e);if(i===e||0===i.length)return Ye;e=i,t=await Ge(e)}while(!t);return this.rev_parse__show_toplevel(e)}}return Ye}}async rev_parse__verify(e,t,i){const r=["rev-parse","--verify"];await this.isAtLeastVersion("2.30")&&r.push("--end-of-options");const s=await this.git({cwd:e,errors:d.Ignore},...r,i?`${t}:./${i}`:`${t}^{commit}`);return 0===s.length?void 0:s.trim()}async show(e,t,i,r={}){const[s,o]=(0,k.uo)(t,e,!0);if((0,m.rD)(i)&&(i=":"),(0,m.l3)(i))throw new Error(`ref=${i} is uncommitted`);const n={configs:ze,cwd:o,encoding:r.encoding??"utf8",errors:d.Throw},a=i.endsWith(":")?`${i}./${s}`:`${i}:./${s}`;try{return await this.git(n,"show","--textconv",a,"--")}catch(s){const o=s?.toString()??"";if(":"===i&&et.badRevision.test(o))return this.show(e,t,"HEAD:",r);if(et.badRevision.test(o)||tt.notFound.test(o)||tt.foundButNotInRevision.test(o))return;return it(s,n.cwd)}}show2(e,t,...i){return this.git({cwd:e,cancellation:t?.cancellation,configs:t?.configs??ze},"show",...i,...i.includes("--")?Ye:["--"])}show__diff(e,t,i,r,{similarityThreshold:s}={}){const o=["show","-M"+(null==s?"":`${s}%`),"--format=","--minimal","-U0",i,"--",t];return null!=r&&0!==r.length&&o.push(r),this.git({cwd:e},...o)}show__name_status(e,t,i){return this.git({cwd:e},"show","--name-status","--format=","-z",i,"--",t)}show_ref__tags(e){return this.git({cwd:e,errors:d.Ignore},"show-ref","--tags")}stash__apply(e,t,i){return t?this.git({cwd:e},"stash",i?"pop":"apply",t):Promise.resolve(void 0)}async stash__rename(e,t,i,r,s){return await this.stash__delete(e,t,i),this.git({cwd:e},"stash","store","-m",s?`On ${s}: ${r}`:r,i)}async stash__delete(e,t,i){if(t){if(i){const r=await this.git({cwd:e,errors:d.Ignore},"show","--format=%H","--no-patch",t);if(r?.trim()!==i)throw new Error("Unable to delete stash; mismatch with stash number")}return this.git({cwd:e},"stash","drop",t)}}stash__list(e,{args:t,similarityThreshold:i}){return null==t&&(t=["--name-status"]),this.git({cwd:e},"stash","list",...t,"-M"+(null==i?"":`${i}%`))}async stash__push(e,t,{includeUntracked:i,keepIndex:r,onlyStaged:s,pathspecs:o,stdin:n}={}){const a=["stash","push"];if((i||null!=o&&0!==o.length)&&a.push("-u"),r&&a.push("-k"),s){if(!await this.isAtLeastVersion("2.35"))throw new Error("Git version 2.35 or higher is required for --staged");a.push("--staged")}if(t&&a.push("-m",t),n&&null!=o&&0!==o.length)await this.git({cwd:e,stdin:o.join("\0")},...a,"--pathspec-from-file=-","--pathspec-file-nul");else{a.push("--"),null!=o&&0!==o.length&&a.push(...o);try{await this.git({cwd:e},...a)}catch(e){if(e instanceof RunError&&e.stdout.includes("Saved working directory and index state")&&e.stderr.includes("Cannot remove worktree changes"))throw new p.s8(p.g1.ConflictingStagedAndUnstagedLines);throw e}}}async status(e,t=1,{similarityThreshold:i}={}){const r=["status",t>=2?`--porcelain=v${t}`:"--porcelain","--branch","-u"];return await this.isAtLeastVersion("2.18")&&r.push("--find-renames"+(null==i?"":`=${i}%`)),this.git({cwd:e,configs:Je,env:{GIT_OPTIONAL_LOCKS:"0"}},...r,"--")}async status__file(e,t,i=1,{similarityThreshold:r}={}){const[s,o]=(0,k.uo)(t,e,!0),n=["status",i>=2?`--porcelain=v${i}`:"--porcelain"];return await this.isAtLeastVersion("2.18")&&n.push("--find-renames"+(null==r?"":`=${r}%`)),this.git({cwd:o,configs:Je,env:{GIT_OPTIONAL_LOCKS:"0"}},...n,"--",s)}symbolic_ref(e,t){return this.git({cwd:e},"symbolic-ref","--short",t)}tag(e){return this.git({cwd:e},"tag","-l",`--format=${GitTagParser.defaultFormat}`)}worktree__add(e,t,{commitish:i,createBranch:r,detach:s,force:o}={}){const n=["worktree","add"];return o&&n.push("--force"),r&&n.push("-b",r),s&&n.push("--detach"),n.push(t),i&&n.push(i),this.git({cwd:e},...n)}worktree__list(e){return this.git({cwd:e},"worktree","list","--porcelain")}worktree__remove(e,t,{force:i}={}){const r=["worktree","remove"];return i&&r.push("--force"),r.push(t),this.git({cwd:e,errors:d.Throw},...r)}async readDotGitFile(e,t,i){try{const s=await r.workspace.fs.readFile(r.Uri.joinPath(e.uri,...t));let o=Ze.decode(s);if(o=i?.trim??1?o.trim():o,i?.numeric){const e=Number.parseInt(o,10);return isNaN(e)?void 0:e}return o}catch(e){if(i?.throw)throw e;return}}async runGitCommandViaTerminal(e,t,i,o){const n=(0,De.UH)(),a=await this.getLocation(),c=(0,k.AH)(a.path??"git"),l=s.D.get("terminal.overrideGitEditor")?`-c "core.editor=${(0,Re._L)()}" `:"",h=i.map((e=>e.startsWith("#")||/['();$|>&<]/.test(e)?`"${e}"`:e));let u;if(c.includes(" ")){const i=r.env.shell;Pe.Yd.debug(n,`• git path '${c}' contains spaces, detected shell: '${i}'`),u=`${(xe?/(pwsh|powershell)\.exe/i:/pwsh/i).test(i)?"&":""} "${c}" -C "${e}" ${l}${t} ${h.join(" ")}`}else u=`${c} -C "${e}" ${l}${t} ${h.join(" ")}`;Pe.Yd.log(n,`• '${u}'`),this.logGitCommand(`[TERM] ${u}`,0);const d=(null==_e&&(_e=r.window.createTerminal(Te),Fe=r.window.onDidCloseTerminal((e=>{e.name===Te&&(_e=void 0,Fe?.dispose(),Fe=void 0)})),Ma.instance.context.subscriptions.push(Fe)),_e);d.show(!1),d.sendText(u,o?.execute??!1)}_gitOutput;logGitCommand(e,t,i){if(!Pe.Yd.enabled("debug")&&!Pe.Yd.isDebugging)return;const s=t>Se.O;Pe.Yd.isDebugging&&(null!=i?console.error(Pe.Yd.timestamp,"[GitLens (Git)]",e??"",i):s?console.warn(Pe.Yd.timestamp,"[GitLens (Git)]",e??""):console.log(Pe.Yd.timestamp,"[GitLens (Git)]",e??"")),null==this._gitOutput&&(this._gitOutput=r.window.createOutputChannel("GitLens (Git)")),this._gitOutput.appendLine(`${Pe.Yd.timestamp} [${s?"*":" "}${t.toString().padStart(6)}ms] ${e}${null!=i?`\n\n${i.toString()}`:""}`)}}function rt(e){return new RegExp(`(?:^\0*|\0\0)${e}\0`)}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Ve(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&He(t,i,o)})([(0,g.cM)()],Git.prototype,"runGitCommandViaTerminal",1);var st=i(2037),ot=i.n(st),nt=i(3951),at=i(3309),ct=i(7338),lt=i(8388),ht=i(3148),ut=i(8887),dt=i(7462),pt=i(1719),mt=i(3050),gt=i(6503),ft=i(3646),wt=i(827),vt=Object.defineProperty,yt=Object.getOwnPropertyDescriptor;const bt=class _GitBlameParser{static parse(e,t,i,r){if(!t)return;const s=new Map,o=new Map,n=[];let a,c,l,h;for(l of(0,P.UM)(t))if(h=l.split(" "),!(h.length<2))if([c]=h,null!=a)switch(c){case"author":a.sha===D.CL?a.author="You":a.author=l.slice(c.length+1).trim();break;case"author-mail":{if(a.sha===D.CL){a.authorEmail=r?.email;continue}a.authorEmail=l.slice(c.length+1).trim();const e=a.authorEmail.indexOf("<");if(e>=0){const t=a.authorEmail.indexOf(">",e);a.authorEmail=t>e?a.authorEmail.substring(e+1,t):a.authorEmail.substring(e+1)}break}case"author-time":a.authorDate=h[1];break;case"author-tz":a.authorTimeZone=h[1];break;case"committer":(0,m.l3)(a.sha)?a.committer="You":a.committer=l.slice(c.length+1).trim();break;case"committer-mail":{if((0,m.l3)(a.sha)){a.committerEmail=r?.email;continue}a.committerEmail=l.slice(c.length+1).trim();const e=a.committerEmail.indexOf("<");if(e>=0){const t=a.committerEmail.indexOf(">",e);a.committerEmail=t>e?a.committerEmail.substring(e+1,t):a.committerEmail.substring(e+1)}break}case"committer-time":a.committerDate=h[1];break;case"committer-tz":a.committerTimeZone=h[1];break;case"summary":a.summary=l.slice(c.length+1).trim();break;case"previous":a.previousSha=h[1],a.previousPath=h.slice(2).join(" ");break;case"filename":a.path=l.slice(c.length+1),_GitBlameParser.parseEntry(e,a,i,o,s,n,r),a=void 0}else a={sha:c,originalLine:parseInt(h[1],10),line:parseInt(h[2],10),lineCount:parseInt(h[3],10)};for(const[,e]of o){if(!e.author.name)continue;const t=s.get(e.author.name);if(null==t)return;t.lineCount+=e.lines.length}return{repoPath:i,authors:new Map([...s.entries()].sort(((e,t)=>t[1].lineCount-e[1].lineCount))),commits:o,lines:n}}static parseEntry(e,t,i,r,s,o,n){let a=r.get(t.sha);if(null==a){if(null!=t.author){null==n||null==n.name&&null==n.email||null!=n.name&&n.name!==t.author||null!=n.email&&n.email!==t.authorEmail||(t.author="You");let e=s.get(t.author);null==e&&(e={name:t.author,lineCount:0},s.set(t.author,e))}a=new S.aM(e,i,t.sha,new S._j(t.author,t.authorEmail,new Date(1e3*t.authorDate)),new S._j(t.committer,t.committerEmail,new Date(1e3*t.committerDate)),t.summary,[],void 0,new R.K8(i,t.path,R.NV.Modified,t.previousPath&&t.previousPath!==t.path?t.previousPath:void 0,t.previousSha),void 0,[]),r.set(t.sha,a)}for(let e=0,i=t.lineCount;e<i;e++){const i={sha:t.sha,previousSha:a.file.previousSha,originalLine:t.originalLine+e,line:t.line+e};a.lines.push(i),o[i.line-1]=i}}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?yt(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&vt(t,i,o)})([(0,g.fF)({args:!1,singleLine:!0})],bt,"parse",1);let Ct=bt;var At=i(6398);class GitDiffHunk{constructor(e,t,i){this.contents=e,this.current=t,this.previous=i}get lines(){return this.parseHunk().lines}get state(){return this.parseHunk().state}parsedHunk;parseHunk(){return null==this.parsedHunk&&(this.parsedHunk=function(e){const t=(0,At.k)("parseDiffHunk",{log:!1,logLevel:"debug"}),i=e.current.position.start,r=e.previous.position.start,s=i>r?new Array(i-r).fill(void 0,0,i-r):[],o=r>i?new Array(r-i).fill(void 0,0,r-i):[];let n,a,c=0;for(const t of(0,P.UM)(e.contents))switch(t[0]){case"+":n=!0,s.push({line:` ${t.substring(1)}`,state:"added"}),c>0?c--:o.push(void 0);break;case"-":a=!0,c++,o.push({line:` ${t.substring(1)}`,state:"removed"});break;default:for(;c>0;)c--,s.push(void 0);s.push({line:t,state:"unchanged"}),o.push({line:t,state:"unchanged"})}for(;c>0;)c--,s.push(void 0);const l=[];for(let t=0;t<Math.max(s.length,o.length);t++)l.push({hunk:e,current:s[t],previous:o[t]});return t?.stop({suffix:` parsed ${(0,P._6)("line",l.length)}`}),{lines:l,state:n&&a?"changed":n?"added":"removed"}}(this)),this.parsedHunk}}const kt=/(\d+)\s+files? changed(?:,\s+(\d+)\s+insertions?\(\+\))?(?:,\s+(\d+)\s+deletions?\(-\))?/,Pt=/^@@ -([\d]+)(?:,([\d]+))? \+([\d]+)(?:,([\d]+))? @@(?:.*?)\n([\s\S]*?)(?=^@@)/gm;function St(e,t=!1){if(!e)return;const i=(0,At.k)("parseFileDiff",{log:!1,logLevel:"debug"}),r=[];let s,o,n,a,c,l;for(;;){if(l=Pt.exec(`${e}\n@@`),null==l)break;[,s,o,n,a,c]=l,o=Number(o)||0,s=Number(s)||0,a=Number(a)||0,n=Number(n)||0,r.push(new GitDiffHunk(` ${c}`.substr(1),{count:0===a?1:a,position:{start:n,end:n+(a>0?a-1:0)}},{count:0===o?1:o,position:{start:s,end:s+(o>0?o-1:0)}}))}if(i?.stop({suffix:` parsed ${(0,P._6)("hunk",r.length)}`}),!r.length)return;return{contents:t?e:void 0,hunks:r}}function Dt(e,t){if(!e)return;const i=(0,At.k)("parseDiffNameStatusFiles",{log:!1,logLevel:"debug"}),r=[];let s;const o=e.split("\0");for(let e=0;e<o.length-1;e++)s=o[e][0],"."===s&&(s="?"),r.push({status:s,path:o[++e],originalPath:s.startsWith("R")||s.startsWith("C")?o[++e]:void 0,repoPath:t});return i?.stop({suffix:` parsed ${(0,P._6)("file",r.length)}`}),r}var Rt=Object.defineProperty,$t=Object.getOwnPropertyDescriptor,_t=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?$t(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Rt(t,i,o),o};const Ft=/(?:ahead ([0-9]+))/,Tt=/(?:behind ([0-9]+))/;class GitStatusParser{static parse(e,t,i){if(!e)return;const r=e.split("\n").filter((e=>Boolean(e)));return 0!==r.length?i<2?this.parseV1(r,t):this.parseV2(r,t):void 0}static parseV1(e,t){let i;const r=[],s={ahead:0,behind:0};let o,n=-1;for(;++n<e.length;){const a=e[n];if(a.startsWith("##")){const e=a.split(" ");if([i,o]=e[1].split("..."),e.length>2){const t=e.slice(2).join(" "),i=Ft.exec(t);s.ahead=null==i?0:Number(i[1])||0;const r=Tt.exec(t);s.behind=null==r?0:Number(r[1])||0}}else{const e=a.substring(0,2),i=a.substring(3);if(e.startsWith("R")||e.startsWith("C")){const[s,o]=i.replace(/"/g,"").split("->");r.push(this.parseStatusFile(t,e,o.trim(),s.trim()))}else r.push(this.parseStatusFile(t,e,i))}}return new wt.Hk((0,k.AH)(t),i??"","",r,s,o)}static parseV2(e,t){let i;const r=[];let s;const o={ahead:0,behind:0};let n,a=-1;for(;++a<e.length;){const c=e[a];if(c.startsWith("#")){const e=c.split(" ");switch(e[1]){case"branch.oid":s=e[2];break;case"branch.head":i=e[2];break;case"branch.upstream":n=e[2];break;case"branch.ab":o.ahead=Number(e[2].substring(1)),o.behind=Number(e[3].substring(1))}}else{const e=c.split(" ");switch(e[0][0]){case"1":r.push(this.parseStatusFile(t,e[1],e.slice(8).join(" ")));break;case"2":{const i=e.slice(9).join(" ").split("\t");r.push(this.parseStatusFile(t,e[1],i[0],i[1]));break}case"u":r.push(this.parseStatusFile(t,e[1],e.slice(10).join(" ")));break;case"?":r.push(this.parseStatusFile(t,"??",e.slice(1).join(" ")))}}}return new wt.Hk((0,k.AH)(t),i??"",s??"",r,o,n)}static parseStatusFile(e,t,i,r){let s,o=t.startsWith(".")?void 0:t[0].trim();return null!=o&&0!==o.length||(o=void 0),t.length>1&&(s="."!==t[1]?t[1].trim():void 0,null!=s&&0!==s.length||(s=void 0)),new wt.JB(e,o,s,i,r)}}_t([(0,g.fF)({args:!1,singleLine:!0})],GitStatusParser,"parse",1),_t([(0,g.fF)({args:!1,singleLine:!0})],GitStatusParser,"parseV1",1),_t([(0,g.fF)({args:!1,singleLine:!0})],GitStatusParser,"parseV2",1);var xt=Object.defineProperty,It=Object.getOwnPropertyDescriptor;const Ot=/(?:.+?)\s+(.+?)\s+(.+?)\s+(.+?)\s+(.+)/gm;class GitTreeParser{static parse(e){if(!e)return;const t=[];let i,r,s,o,n;for(;;){if(n=Ot.exec(e),null==n)break;[,i,r,s,o]=n,t.push({commitSha:null==r||0===r.length?"":` ${r}`.substr(1),path:null==o||0===o.length?"":` ${o}`.substr(1),size:Number(s)||0,type:null==i||0===i.length?"":` ${i}`.substr(1)})}return t}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?It(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&xt(t,i,o)})([(0,g.fF)({args:!1,singleLine:!0})],GitTreeParser,"parse",1);var Bt=i(2674),Et=Object.defineProperty,Wt=Object.getOwnPropertyDescriptor;class GitWorktreeParser{static parse(e,t){if(!e)return[];null!=t&&(t=(0,k.AH)(t));const i=[];let s,o,n,a,c,l,h,u=!0;for(o of(0,P.UM)(e))if(n=o.indexOf(" "),-1===n?(a=o,c=""):(a=o.substring(0,n),c=o.substring(n+1)),0!==a.length||null==s)switch(null==s&&(s={}),a){case"worktree":s.path=c;break;case"bare":s.bare=!0;break;case"HEAD":s.sha=c;break;case"branch":s.branch=c.substr(11);break;case"detached":s.detached=!0;break;case"locked":[,l]=c.split(" ",2),s.locked=l?.trim()||!0;break;case"prunable":[,h]=c.split(" ",2),s.prunable=h?.trim()||!0}else i.push(new Bt.e(u,s.bare?"bare":s.detached?"detached":"branch",t,r.Uri.file(s.path),s.locked??!1,s.prunable??!1,s.sha,s.branch)),s=void 0,u=!1;return i}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Wt(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&Et(t,i,o)})([(0,g.fF)({args:!1,singleLine:!0})],GitWorktreeParser,"parse",1);var Nt=i(7552),Mt=i(6934),Ut=i(7925),Lt=i(2226),Gt=i(5432),Ht=i(9796),Vt=i(7469),Yt=i(1526),Qt=i(9701),qt=i(6700);class UnableToFindGitError extends Error{constructor(e){super("Unable to find git"),this.original=e,Error.captureStackTrace?.(this,UnableToFindGitError)}}class InvalidGitConfigError extends Error{constructor(e){super("Invalid Git configuration"),this.original=e,Error.captureStackTrace?.(this,InvalidGitConfigError)}}async function jt(e){const t=(0,At.k)(`findSpecificGit(${e})`,{logLevel:"debug"});let i;try{i=await Le(e,["--version"],"utf8")}catch(e){if(t?.stop({message:` ${u.NE.Dot} Unable to find git: ${e}`}),/bad config/i.test(e.message))throw new InvalidGitConfigError(e);throw e}if(!e||"git"===e){const r=Me(e,["--version"]).cmd;try{i=await Le(r,["--version"],"utf8")}catch(e){if(t?.stop({message:` ${u.NE.Dot} Unable to find git: ${e}`}),/bad config/i.test(e.message))throw new InvalidGitConfigError(e);throw e}e=r}const r=i.trim().replace(/^git version /,"").trim();return t?.stop({message:` ${u.NE.Dot} Found ${r} in ${e}; ${i}`}),{path:e,version:r}}function zt(e){return null==e||0===e.length?Promise.reject(new UnableToFindGitError):jt((0,a.join)(e,"Git","cmd","git.exe"))}async function Kt(e,t=!0){try{if(null==e||"string"==typeof e)return await jt(e??"git");try{return(0,Vt.Yj)(...e.map((e=>jt(e))))}catch(e){throw new UnableToFindGitError(e)}}catch(e){if(!t)return Promise.reject(e instanceof InvalidGitConfigError||e instanceof UnableToFindGitError?e:new UnableToFindGitError(e));try{switch(l.platform){case"darwin":return await async function(){try{const e=(await Le("which",["git"],"utf8")).trim();if("/usr/bin/git"!==e)return jt(e);try{return await Le("xcode-select",["-p"],"utf8"),jt(e)}catch(t){return 2===t.code?Promise.reject(new UnableToFindGitError(t)):jt(e)}}catch(e){return Promise.reject(e instanceof InvalidGitConfigError||e instanceof UnableToFindGitError?e:new UnableToFindGitError(e))}}();case"win32":return await zt(l.env.ProgramW6432).then(null,(()=>zt(l.env["ProgramFiles(x86)"]))).then(null,(()=>zt(l.env.ProgramFiles))).then(null,(()=>jt("git")));default:return Promise.reject(new UnableToFindGitError)}}catch(e){return Promise.reject(e instanceof InvalidGitConfigError||e instanceof UnableToFindGitError?e:new UnableToFindGitError(e))}}}var Jt=Object.defineProperty,Zt=Object.getOwnPropertyDescriptor,Xt=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Zt(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Jt(t,i,o),o};const ei=Object.freeze([]),ti=Promise.resolve(void 0),ii=Object.freeze({values:[]}),ri={doesNotExist:/no such file or directory/i},si=/(?<=^\/?)([a-zA-Z])(?=:\/)/,oi=/^user\.(name|email) (.*)$/gm,ni=/(.+)\s<(.+)>/,ai=/(?:(?:(?<wip>WIP) on|On) (?<onref>[^/](?!.*\/\.)(?!.*\.\.)(?!.*\/\/)(?!.*@\{)[^\000-\037\177 ~^:?*[\\]+[^./]):\s*)?(?<summary>.*)$/s,ci=["merge","pull"];class LocalGitProvider{constructor(e,t){this.container=e,this.git=t,this.git.setLocator(this.ensureGit.bind(this)),this._disposables.push(s.D.onDidChange((e=>{s.D.changed(e,"remotes")&&this.resetCaches("remotes")}),this),this.container.events.on("git:cache:reset",(e=>e.data.repoPath?this.resetCache(e.data.repoPath,...e.data.caches??ei):this.resetCaches(...e.data.caches??ei))))}descriptor={id:"git",name:"Git",virtual:!1};supportedSchemes=new Set([u.sN.File,u.sN.Git,u.sN.GitLens,u.sN.PRs]);_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeRepository=new r.EventEmitter;get onDidChangeRepository(){return this._onDidChangeRepository.event}_onDidCloseRepository=new r.EventEmitter;get onDidCloseRepository(){return this._onDidCloseRepository.event}_onDidOpenRepository=new r.EventEmitter;get onDidOpenRepository(){return this._onDidOpenRepository.event}_branchesCache=new Map;_contributorsCache=new Map;_mergeStatusCache=new Map;_rebaseStatusCache=new Map;_remotesCache=new Map;_repoInfoCache=new Map;_stashesCache=new Map;_tagsCache=new Map;_trackedPaths=new Yt.bM;_disposables=[];dispose(){r.Disposable.from(...this._disposables).dispose()}get useCaching(){return s.D.get("advanced.caching.enabled")}onRepositoryChanged(e,t){if(t.changed(ft.I6.Config,ft.du.Any)&&this._repoInfoCache.delete(e.path),t.changed(ft.I6.Heads,ft.I6.Remotes,ft.du.Any)&&(this._branchesCache.delete(e.path),this._contributorsCache.delete(e.path),this._contributorsCache.delete(`stats|${e.path}`)),t.changed(ft.I6.Remotes,ft.I6.RemoteProviders,ft.du.Any)){hi([this._remotesCache.get(e.path)]),this._remotesCache.delete(e.path)}t.changed(ft.I6.Index,ft.I6.Unknown,ft.du.Any)&&this._trackedPaths.clear(),t.changed(ft.I6.Merge,ft.du.Any)&&this._mergeStatusCache.delete(e.path),t.changed(ft.I6.Rebase,ft.du.Any)&&this._rebaseStatusCache.delete(e.path),t.changed(ft.I6.Stash,ft.du.Any)&&this._stashesCache.delete(e.path),t.changed(ft.I6.Tags,ft.du.Any)&&this._tagsCache.delete(e.path),this._onDidChangeRepository.fire(t)}_gitLocator;async ensureGit(){return null==this._gitLocator&&(this._gitLocator=this.findGit()),this._gitLocator}async findGit(){const e=(0,De.UH)();if(!s.D.getAny("git.enabled",null,!0))throw Pe.Yd.log(e,'Built-in Git is disabled ("git.enabled": false)'),(0,Ut.EZ)(),new UnableToFindGitError;const t=this.getScmGitApi();(async function(){const i=await t;if(null!=i){if(s.D.get("experimental.nativeGit"))for(const t of Object.values(i.git))if(null!=t&&"object"==typeof t&&"git"in t)for(const i of Object.values(t.git))if(null!=i&&"object"==typeof i&&"GIT_ASKPASS"in i){Pe.Yd.debug(e,"Found built-in Git env"),this.git.setEnv(i);break}this._disposables.push(i.onDidCloseRepository((0,Ht.Ds)((e=>{this.container.deactivating||this._onDidCloseRepository.fire({uri:e.rootUri})}),1e3)),i.onDidOpenRepository((e=>this._onDidOpenRepository.fire({uri:e.rootUri}))));for(const e of i.repositories)this._onDidOpenRepository.fire({uri:e.rootUri})}}).call(this);const i=s.D.getAny("git.path")??this.container.storage.getWorkspace("gitPath"),r=(0,h.a)(),o=Kt(i),n=t.then((e=>{const t=e?.git.path;if(!t)return o;if(null!=i)if("string"==typeof i){if(t===i)return o}else if(i.includes(t))return o;return Kt(t,!1)})),a=await(0,Vt.Yj)(o,n);return setTimeout((()=>{this.container.storage.storeWorkspace("gitPath",a.path)}),1e3),null!=e?e.exitDetails=` ${u.NE.Dot} Git (${a.version}) found in ${"git"===a.path?"PATH":a.path}`:Pe.Yd.log(e,`Git (${a.version}) found in ${"git"===a.path?"PATH":a.path} [${(0,P.qk)(r)}ms]`),-1===(0,$e.qu)((0,$e.mL)(a.version),(0,$e.mL)("2.7.2"))&&(Pe.Yd.log(e,`Git version (${a.version}) is outdated`),(0,Ut.PS)(a.version,"2.7.2")),a}async discoverRepositories(e,t){if(e.scheme!==u.sN.File)return[];try{const i=s.D.getAny("git.autoRepositoryDetection")??!0,o=r.workspace.getWorkspaceFolder(e);if(null==o&&!t?.silent)return[];if(await this.ensureGit(),t?.cancellation?.isCancellationRequested)return[];const n=await this.repositorySearch(o??e,t?.depth??(!1===i||"openEditors"===i?0:void 0),t?.cancellation,t?.silent);if(!t?.silent&&(!0===i||"subFolders"===i))for(const e of n)this.openScmRepository(e.uri);return!t?.silent&&n.length>0&&this._trackedPaths.clear(),n}catch(e){if(e instanceof InvalidGitConfigError)(0,Ut.p1)();else if(e instanceof UnableToFindGitError)(0,Ut.Lw)();else{const i=e?.message??"";i&&!t?.silent&&r.window.showErrorMessage(`Unable to initialize Git; ${i}`)}throw e}}openRepository(e,t,i,s,o){o||this.openScmRepository(t);const n=this.toCanonicalMap.get((0,k.M)(t));return null!=n?[new ft._j(this.container,this.onRepositoryChanged.bind(this),this.descriptor,e??r.workspace.getWorkspaceFolder(t),t,i,s??!r.window.state.focused,o),new ft._j(this.container,this.onRepositoryChanged.bind(this),this.descriptor,e??r.workspace.getWorkspaceFolder(n),n,i,s??!r.window.state.focused,!0)]:[new ft._j(this.container,this.onRepositoryChanged.bind(this),this.descriptor,e??r.workspace.getWorkspaceFolder(t),t,i,s??!r.window.state.focused,o)]}openRepositoryInitWatcher(){const e=r.workspace.createFileSystemWatcher("**/.git",!1,!0,!0);return{onDidCreate:e.onDidCreate,dispose:()=>{e.dispose()}}}_supportedFeatures=new Map;async supports(e){let t=this._supportedFeatures.get(e);if(null!=t)return t;switch(e){case ut.A.Worktrees:return t=await this.git.isAtLeastVersion("2.17.0"),this._supportedFeatures.set(e,t),t;case ut.A.StashOnlyStaged:return t=await this.git.isAtLeastVersion("2.35.0"),this._supportedFeatures.set(e,t),t;default:return!0}}async visibility(e){const t=await this.getRemotes(e,{sort:!0});if(0===t.length)return["local",void 0];let i=!0;for await(const e of(0,Vt.rX)(t.map((e=>this.getRemoteVisibility(e)))))if("fulfilled"===e.status){if("public"===e.value[0])return["public",(0,mt.Ym)(e.value[1])];"local"!==e.value[0]&&(i=!1)}return i?["local",void 0]:["private",(0,mt.Ym)(t)]}_pendingRemoteVisibility=new Map;async getRemoteVisibility(e){const t=(0,De.UH)();let i;switch(e.provider?.id){case"github":case"gitlab":case"bitbucket":case"azure-devops":case"gitea":case"gerrit":case"google-source":if(i=e.provider.url({type:gt.J.Repo}),null==i)return["private",e];break;default:{if(i=e.url,!i.includes("git@"))return(0,k.tE)(i)?["private",e]:["local",e];const[t,r]=i.split("@")[1].split(":");if(!t||!r)return["private",e];i=`https://${t}/${r}`}}let r=this._pendingRemoteVisibility.get(i);if(null==r){const e=new AbortController;let t;r=(0,at.he)(i,{method:"HEAD",agent:(0,at.Nx)(),signal:e.signal}).then((e=>(clearTimeout(t),e))),t=setTimeout((()=>e.abort()),3e4),this._pendingRemoteVisibility.set(i,r)}try{const i=await r;if(i.ok)return["public",e];Pe.Yd.debug(t,`Response=${i.status}`)}catch(e){Pe.Yd.error(e,t)}finally{this._pendingRemoteVisibility.delete(i)}return["private",e]}async repositorySearch(e,t,i,o){const n=(0,De.UH)();let a,c;e instanceof r.Uri?(c=e,a=r.workspace.getWorkspaceFolder(c)):c=e.uri,t=t??s.D.get("advanced.repositorySearchDepth",c)??s.D.getAny("git.repositoryScanMaxDepth",c,1),Pe.Yd.log(n,`searching (depth=${t})...`);const l=[];let h,u;const d=await this.findRepositoryUri(c,!0);if(null!=d){h=(0,k.AH)(d.fsPath);const e=this.toCanonicalMap.get((0,k.M)(d));null!=e&&(u=(0,k.AH)(e.fsPath)),Pe.Yd.log(n,`found root repository in '${d.fsPath}'`),l.push(...this.openRepository(a,d,!0,void 0,o))}if(t<=0||i?.isCancellationRequested)return l;const p=new Set(s.D.getAny("git.repositoryScanIgnoredFolders",c,[]));for(let[e,t]of Object.entries({...s.D.getAny("files.exclude",c,{}),...s.D.getAny("search.exclude",c,{})}))t&&(e.includes("*.")||(e.startsWith("**/")&&(e=e.substring(3)),p.add(e)));let m;try{m=await this.repositorySearchCore(c.fsPath,t,p,i)}catch(e){const t=e?.toString()??"";return ri.doesNotExist.test(t)?Pe.Yd.log(n,"FAILED"+(t?` Error: ${t}`:"")):Pe.Yd.error(e,n,"FAILED"),l}for(let e of m){e=(0,k.XX)(e);const t=(0,k.AH)(e);if(ct.IJ&&(t===h||null!=u&&t===u)||(0,P.qq)(t,h)||null!=u&&(0,P.qq)(t,u))continue;Pe.Yd.log(n,`searching in '${e}'...`),Pe.Yd.debug(n,`normalizedRepoPath=${t}, rootPath=${h}, canonicalRootPath=${u}`);const i=await this.findRepositoryUri(r.Uri.file(e),!0);null!=i&&(Pe.Yd.log(n,`found repository in '${i.fsPath}'`),l.push(...this.openRepository(a,i,!1,void 0,o)))}return l}repositorySearchCore(e,t,i,r,s=[]){const o=(0,De.UH)();return r?.isCancellationRequested?Promise.resolve(s):new Promise(((c,l)=>{(0,n.readdir)(e,{withFileTypes:!0},(async(n,h)=>{if(null!=n)return void l(n);if(0===h.length)return void c(s);let u;for(u of(t--,h)){if(r?.isCancellationRequested)break;if(".git"===u.name)s.push((0,a.resolve)(e,u.name));else if(t>=0&&u.isDirectory()&&!i.has(u.name))try{await this.repositorySearchCore((0,a.resolve)(e,u.name),t,i,r,s)}catch(e){Pe.Yd.error(e,o,"FAILED")}}c(s)}))}))}canHandlePathOrUri(e,t){if(this.supportedSchemes.has(e))return(0,k.M)(t)}getAbsoluteUri(e,t){if("string"==typeof t)if((0,k.tE)(t))t=r.Uri.parse(t,!0);else{if(!(0,k.YP)(t))throw r.window.showErrorMessage(`Unable to get absolute uri between ${"string"==typeof e?e:e.toString(!0)} and ${t}; Base path '${t}' must be an absolute path`),new Error(`Base path '${t}' must be an absolute path`);t=r.Uri.file(t)}if("string"==typeof e){const i=(0,k.AH)(e);if(!(0,k.YP)(i))return r.Uri.joinPath(t,i)}const i=this.getRelativePath(e,t);return r.Uri.joinPath(t,i)}async getBestRevisionUri(e,t,i){if(i!==D.Ii){if(!i||(0,m.l3)(i)&&!(0,m.rD)(i)){let i=await this.git.ls_files(e,t);return null!=i?this.getAbsoluteUri(t,e):(i=await this.git.ls_files(e,t,{untracked:!0}),null!=i?this.getAbsoluteUri(t,e):void 0)}return(0,m.rD)(i)?this.getScmGitUri(t,e):this.getRevisionUri(e,t,i)}}getRelativePath(e,t){if("string"==typeof t)if((0,k.tE)(t))t=r.Uri.parse(t,!0);else{if(!(0,k.YP)(t))throw r.window.showErrorMessage(`Unable to get relative path between ${"string"==typeof e?e:e.toString(!0)} and ${t}; Base path '${t}' must be an absolute path`),new Error(`Base path '${t}' must be an absolute path`);t=r.Uri.file(t)}if("string"==typeof e)if((0,k.tE)(e))e=r.Uri.parse(e,!0);else{if(!(0,k.YP)(e))return(0,k.AH)(e);e=r.Uri.file(e)}const i=(0,k.Gf)(t.fsPath,e.fsPath);return(0,k.AH)(i)}getRevisionUri(e,t,i){if((0,m.l3)(i))return(0,m.rD)(i)?this.getScmGitUri(t,e):this.getAbsoluteUri(t,e);47!==(t=(0,k.AH)(this.getAbsoluteUri(t,e).fsPath)).charCodeAt(0)&&(t=`/${t}`);const s={ref:i,repoPath:(0,k.AH)(e)};return r.Uri.from({scheme:u.sN.GitLens,authority:(0,dt.Tg)(s),path:t,query:i?JSON.stringify({ref:(0,m.zL)(i)}):void 0})}async getWorkingUri(e,t){let i,r,o=this.getRelativePath(t,e);for(;;){if(i=await this.git.ls_files(e,o),null!=i){o=(0,P.pW)(i,"\n")[0];break}const t=s.D.get("advanced");if(r=await this.git.log__file_recent(e,o,{ordering:t.commitOrdering,similarityThreshold:t.similarityThreshold}),null==r)return;if(i=await this.git.log__file(e,".",r,{argsOrFormat:se.simpleFormat,fileMode:"simple",filters:["R","C","D"],limit:1,ordering:t.commitOrdering}),null==i||0===i.length)break;const[n,a,c]=se.parseSimpleRenamed(i,o);if("D"===c&&null!=a)return;if(null==n||null==a)break;o=a}return t=this.getAbsoluteUri(o,e),await Ge(t.fsPath)?t:void 0}async addRemote(e,t,i,r){await this.git.remote__add(e,t,i,r),this.container.events.fire("git:cache:reset",{repoPath:e,caches:["remotes"]})}async pruneRemote(e,t){await this.git.remote__prune(e,t),this.container.events.fire("git:cache:reset",{repoPath:e,caches:["remotes"]})}async removeRemote(e,t){await this.git.remote__remove(e,t),this.container.events.fire("git:cache:reset",{repoPath:e,caches:["remotes"]})}async applyChangesToWorkingFile(e,t,i){const s=(0,De.UH)();if(null==(t=t??e.sha)||null==e.repoPath)return;null==i&&(i=t,t=`${t}^`);const[o,n]=(0,k.uo)(e,e.repoPath);let a;try{a=await this.git.diff(n,o,t,i),await this.git.apply(n,a)}catch(e){const t=e?.toString()??"";if(a&&/patch does not apply/i.test(t)){const t=await r.window.showWarningMessage("Unable to apply changes cleanly. Retry and allow conflicts?",{title:"Yes"},{title:"No",isCloseAffordance:!0});if(null==t||"Yes"!==t.title)return;if("Yes"===t.title)try{return void await this.git.apply(n,a,{allowConflicts:!0})}catch(t){e=t}}Pe.Yd.error(e,s),(0,Ut.W8)("Unable to apply changes")}}async checkout(e,t,i){const r=(0,De.UH)();try{await this.git.checkout(e,t,i),this.container.events.fire("git:cache:reset",{repoPath:e,caches:["branches","status"]})}catch(e){const i=e?.toString()??"";if(/overwritten by checkout/i.test(i))return void(0,Ut.W8)(`Unable to checkout '${t}'. Please commit or stash your changes before switching branches`);Pe.Yd.error(e,r),(0,Ut.W8)(`Unable to checkout '${t}'`)}}async clone(e,t){const i=(0,De.UH)();try{return this.git.clone(e,t)}catch(t){Pe.Yd.error(t,i),(0,Ut.W8)(`Unable to clone '${e}'`)}}resetCache(e,...t){if((0===t.length||t.includes("branches"))&&this._branchesCache.delete(e),(0===t.length||t.includes("contributors"))&&this._contributorsCache.delete(e),0===t.length||t.includes("remotes")){hi([this._remotesCache.get(e)]),this._remotesCache.delete(e)}(0===t.length||t.includes("stashes"))&&this._stashesCache.delete(e),(0===t.length||t.includes("status"))&&(this._mergeStatusCache.delete(e),this._rebaseStatusCache.delete(e)),(0===t.length||t.includes("tags"))&&this._tagsCache.delete(e),0===t.length&&(this._trackedPaths.delete(e),this._repoInfoCache.delete(e))}resetCaches(...e){(0===e.length||e.includes("branches"))&&this._branchesCache.clear(),(0===e.length||e.includes("contributors"))&&this._contributorsCache.clear(),(0===e.length||e.includes("remotes"))&&(hi([...this._remotesCache.values()]),this._remotesCache.clear()),(0===e.length||e.includes("stashes"))&&this._stashesCache.clear(),(0===e.length||e.includes("status"))&&(this._mergeStatusCache.clear(),this._rebaseStatusCache.clear()),(0===e.length||e.includes("tags"))&&this._tagsCache.clear(),0===e.length&&(this._trackedPaths.clear(),this._repoInfoCache.clear())}async excludeIgnoredUris(e,t){const i=new Map(t.map((e=>[(0,k.AH)(e.fsPath),e]))),r=await this.git.check_ignore(e,...i.keys());if(null==r)return t;const s=r.split("\0").filter((e=>Boolean(e)));if(0===s.length)return t;for(const e of s)i.delete(e);return[...i.values()]}async fetch(e,t){const i=(0,De.UH)(),{branch:s,...o}=t??{};try{if((0,m.UR)(s)){const[i,r]=(0,f.$q)(s);if(null==r)return;await this.git.fetch(e,{branch:i,remote:r,upstream:(0,m.Gn)(s),pull:t?.pull})}else await this.git.fetch(e,o);this.container.events.fire("git:cache:reset",{repoPath:e})}catch(e){if(Pe.Yd.error(e,i),!p.kp.is(e))throw e;r.window.showErrorMessage(e.message)}}async push(e,t){const i=(0,De.UH)();let s=t?.branch;if(!(0,m.UR)(s)&&(s=await this.getBranch(e),null==s))return;const[o,n]=(0,f.$q)(s);if(null!=t?.publish||null!=n||null!=s.upstream)try{await this.git.push(e,{branch:o,remote:t?.publish?t.publish.remote:n,upstream:(0,m.Gn)(s),force:t?.force,publish:null!=t?.publish}),this.container.events.fire("git:cache:reset",{repoPath:e})}catch(e){if(Pe.Yd.error(e,i),!p.FD.is(e))throw e;r.window.showErrorMessage(e.message)}}async pull(e,t){const i=(0,De.UH)();let s=t?.branch;if(!(0,m.UR)(s)&&(s=await this.getBranch(e),null==s))return;const[o,n]=(0,f.$q)(s);if(null!=n||null!=s.upstream)try{await this.git.pull(e,{branch:o,remote:n,rebase:t?.rebase,tags:t?.tags}),this.container.events.fire("git:cache:reset",{repoPath:e})}catch(e){if(Pe.Yd.error(e,i),!p.wG.is(e))throw e;r.window.showErrorMessage(e.message)}}toCanonicalMap=new Map;fromCanonicalMap=new Map;unsafePaths=new Set;async findRepositoryUri(e,t){const i=(0,De.UH)();let s;try{if(null==t){t=((await r.workspace.fs.stat(e)).type&r.FileType.Directory)===r.FileType.Directory}let o;if(t||(e=r.Uri.joinPath(e,"..")),[o,s]=await this.git.rev_parse__show_toplevel(e.fsPath),o?this.unsafePaths.delete(e.fsPath):!1===o&&this.unsafePaths.add(e.fsPath),!s)return;const a=r.Uri.file(s);if(ct.ED&&0!==a.authority.length&&0===e.authority.length){const t=si.exec(e.path);if(null!=t){const[,e]=t;try{const t=await new Promise((t=>n.realpath.native(`${e}:\\`,{encoding:"utf8"},((e,i)=>t(null!=e?void 0:i)))));if(null!=t)return s=(0,k.AH)(a.fsPath.replace(t,`${e.toLowerCase()}:${t.endsWith("\\")?"\\":""}`)),r.Uri.file(s)}catch{}}return r.Uri.file((0,k.AH)(e.fsPath))}if(null==this.toCanonicalMap.get(s)){let t;[s,t]=await new Promise((t=>{(0,n.realpath)(e.fsPath,{encoding:"utf8"},((r,o)=>{if(null!=r)return Pe.Yd.debug(i,`fs.realpath failed; repoPath=${s}`),void t([s,void 0]);if((0,P.qq)(e.fsPath,o))return Pe.Yd.debug(i,`No symlink detected; repoPath=${s}`),void t([s,void 0]);let n=(0,k.AH)(o);const a=(0,k.B9)(`${s}/`,`${n}/`,"/"),c=(0,k.AH)(e.fsPath);n=a<n.length-1?c.substring(0,c.length-(n.length-a)):c,Pe.Yd.debug(i,`Symlink detected; repoPath=${s}, path=${e.fsPath}, resolvedPath=${o}`),t([s,n])}))})),null!=t&&(this.toCanonicalMap.set(s,r.Uri.file(t)),this.fromCanonicalMap.set(t,r.Uri.file(s)))}return s?r.Uri.file(s):void 0}catch(e){return void Pe.Yd.error(e,i)}}getAheadBehindCommitCount(e,t){return this.git.rev_list__left_right(e,t)}async getBlame(e,t){const i=(0,De.UH)();if(t?.isDirty)return this.getBlameContents(e,t.getText());let r="blame";null!=e.sha&&(r+=`:${e.sha}`);const s=await this.container.tracker.getOrAdd(t??e);if(this.useCaching){if(null!=s.state){const e=s.state.getBlame(r);if(null!=e)return Pe.Yd.debug(i,`Cache hit: '${r}'`),e.item}Pe.Yd.debug(i,`Cache miss: '${r}'`),null==s.state&&(s.state=new qt.p)}const o=this.getBlameCore(e,s,r,i);if(null!=s.state){Pe.Yd.debug(i,`Cache add: '${r}'`);const e={item:o};s.state.setBlame(r,e)}return o}async getBlameCore(e,t,i,r){const o=await this.isTrackedPrivate(e);if(null==o)return Pe.Yd.log(r,`Skipping blame; '${e.fsPath}' is not tracked`),ti;const[n,a]=o;try{const t=await this.git.blame(a,n,e.sha,{args:s.D.get("advanced.blame.customArguments"),ignoreWhitespace:s.D.get("blame.ignoreWhitespace")});return Ct.parse(this.container,t,a,await this.getCurrentUser(a))}catch(e){if(null!=t.state){const s=e?.toString()??"";Pe.Yd.debug(r,`Cache replace (with empty promise): '${i}'`);const o={item:ti,errorMessage:s};return t.state.setBlame(i,o),t.setBlameFailure(),ti}return}}async getBlameContents(e,t){const i=(0,De.UH)(),r=`blame:${(0,nt.FB)(t)}`,s=await this.container.tracker.getOrAdd(e);if(this.useCaching){if(null!=s.state){const e=s.state.getBlame(r);if(null!=e)return Pe.Yd.debug(i,`Cache hit: ${r}`),e.item}Pe.Yd.debug(i,`Cache miss: ${r}`),null==s.state&&(s.state=new qt.p)}const o=this.getBlameContentsCore(e,t,s,r,i);if(null!=s.state){Pe.Yd.debug(i,`Cache add: '${r}'`);const e={item:o};s.state.setBlame(r,e)}return o}async getBlameContentsCore(e,t,i,r,o){const n=await this.isTrackedPrivate(e);if(null==n)return Pe.Yd.log(o,`Skipping blame; '${e.fsPath}' is not tracked`),ti;const[a,c]=n;try{const e=await this.git.blame__contents(c,a,t,{args:s.D.get("advanced.blame.customArguments"),correlationKey:`:${r}`,ignoreWhitespace:s.D.get("blame.ignoreWhitespace")});return Ct.parse(this.container,e,c,await this.getCurrentUser(c))}catch(e){if(null!=i.state){const t=e?.toString()??"";Pe.Yd.debug(o,`Cache replace (with empty promise): '${r}'`);const s={item:ti,errorMessage:t};return i.state.setBlame(r,s),i.setBlameFailure(),ti}return}}async getBlameForLine(e,t,i,r){if(i?.isDirty)return this.getBlameForLineContents(e,t,i.getText(),r);if(!r?.forceSingleLine&&this.useCaching){const r=await this.getBlame(e,i);if(null==r)return;let s=r.lines[t];if(null==s){if(r.lines.length!==t)return;s=r.lines[t-1]}const o=r.commits.get(s.sha);if(null==o)return;return{author:{...r.authors.get(o.author.name),lineCount:o.lines.length},commit:o,line:s}}const o=t+1,[n,a]=(0,k.uo)(e,e.repoPath);try{const i=await this.git.blame(a,n,e.sha,{args:s.D.get("advanced.blame.customArguments"),ignoreWhitespace:s.D.get("blame.ignoreWhitespace"),startLine:o,endLine:o}),r=Ct.parse(this.container,i,a,await this.getCurrentUser(a));if(null==r)return;return{author:(0,ke.Ps)(r.authors.values()),commit:(0,ke.Ps)(r.commits.values()),line:r.lines[t]}}catch{return}}async getBlameForLineContents(e,t,i,r){if(!r?.forceSingleLine&&this.useCaching){const r=await this.getBlameContents(e,i);if(null==r)return;let s=r.lines[t];if(null==s){if(r.lines.length!==t)return;s=r.lines[t-1]}const o=r.commits.get(s.sha);if(null==o)return;return{author:{...r.authors.get(o.author.name),lineCount:o.lines.length},commit:o,line:s}}const o=t+1,[n,a]=(0,k.uo)(e,e.repoPath);try{const e=await this.git.blame__contents(a,n,i,{args:s.D.get("advanced.blame.customArguments"),ignoreWhitespace:s.D.get("blame.ignoreWhitespace"),startLine:o,endLine:o}),r=Ct.parse(this.container,e,a,await this.getCurrentUser(a));if(null==r)return;return{author:(0,ke.Ps)(r.authors.values()),commit:(0,ke.Ps)(r.commits.values()),line:r.lines[t]}}catch{return}}async getBlameForRange(e,t){const i=await this.getBlame(e);if(null!=i)return this.getBlameRange(i,e,t)}async getBlameForRangeContents(e,t,i){const r=await this.getBlameContents(e,i);if(null!=r)return this.getBlameRange(r,e,t)}getBlameRange(e,t,i){if(0===e.lines.length)return{allLines:e.lines,...e};if(0===i.start.line&&i.end.line===e.lines.length-1)return{allLines:e.lines,...e};const r=e.lines.slice(i.start.line,i.end.line+1),s=new Set(r.map((e=>e.sha))),o=i.start.line+1,n=i.end.line+1,a=new Map,c=new Map;for(const t of e.commits.values()){if(!s.has(t.sha))continue;const e=t.with({lines:t.lines.filter((e=>e.line>=o&&e.line<=n))});c.set(t.sha,e);let i=a.get(e.author.name);null==i&&(i={name:e.author.name,lineCount:0},a.set(i.name,i)),i.lineCount+=e.lines.length}const l=new Map([...a.entries()].sort(((e,t)=>t[1].lineCount-e[1].lineCount)));return{repoPath:t.repoPath,authors:l,commits:c,lines:r,allLines:e.lines}}async getBranch(e){let{values:[t]}=await this.getBranches(e,{filter:e=>e.current});if(null!=t)return t;const i=s.D.get("advanced.commitOrdering"),r=await this.git.rev_parse__currentBranch(e,i);if(null==r)return;const[o,n]=r[0].split("\n");if((0,f.uz)(o)){const[s,a]=await Promise.allSettled([this.getRebaseStatus(e),this.git.log__recent_committerdate(e,i)]),c=(0,Vt.Sb)(a);t=new f.XI(this.container,e,(0,Vt.Sb)(s)?.incoming.name??o,!1,!0,null!=c?new Date(1e3*Number(c)):void 0,r[1],n?{name:n,missing:!1}:void 0,void 0,void 0,void 0,null!=s)}return t}async getBranches(e,t){if(null==e)return ii;let i=this.useCaching?this._branchesCache.get(e):void 0;if(null==i){async function o(){try{const t=await this.git.for_each_ref__branch(e,{all:!0});if(null==t||0===t.length){let t;const i=s.D.get("advanced.commitOrdering"),r=await this.git.rev_parse__currentBranch(e,i);if(null!=r){const[s,o]=r[0].split("\n"),[n,a]=await Promise.all([(0,f.uz)(s)?this.getRebaseStatus(e):void 0,this.git.log__recent_committerdate(e,i)]);t=new f.XI(this.container,e,n?.incoming.name??s,!1,!0,null!=a?new Date(1e3*Number(a)):void 0,r[1],{name:o,missing:!1},void 0,void 0,void 0,null!=n)}return null!=t?{values:[t]}:ii}return{values:GitBranchParser.parse(this.container,t,e)}}catch(t){return this._branchesCache.delete(e),ii}}i=o.call(this),this.useCaching&&null==t?.cursor&&this._branchesCache.set(e,i)}let r=await i;return null!=t?.filter&&(r={...r,values:r.values.filter(t.filter)}),t?.sort&&(0,f.YF)(r.values,"boolean"==typeof t.sort?void 0:t.sort),r}async getChangedFilesCount(e,t){const i=await this.git.diff__shortstat(e,t);if(i)return function(e){if(!e)return;const t=(0,At.k)("parseDiffShortStat",{log:!1,logLevel:"debug"}),i=kt.exec(e);if(null==i)return;const[,r,s,o]=i,n={changedFiles:null==r?0:parseInt(r,10),additions:null==s?0:parseInt(s,10),deletions:null==o?0:parseInt(o,10)};return t?.stop({suffix:` parsed ${(0,P._6)("file",n.changedFiles)}, +${n.additions} -${n.deletions}`}),n}(i)}async getCommit(e,t){const i=await this.getLog(e,{limit:2,ref:t});if(null!=i)return i.commits.get(t)??(0,ke.Ps)(i.commits.values())}async getCommitBranches(e,t,i,r){if(null!=i){const r=await this.git.branchOrTag__containsOrPointsAt(e,t,{type:"branch",mode:"contains",name:i});return r?[r?.trim()]:[]}const s=await this.git.branchOrTag__containsOrPointsAt(e,t,{type:"branch",...r});return s?(0,A.DZ)(s.split("\n"),(e=>e.trim()||void 0)):[]}getCommitCount(e,t){return this.git.rev_list__count(e,t)}async getCommitForFile(e,t,i){const r=(0,De.UH)(),[s,o]=(0,k.uo)(t,e);try{const e=await this.getLogForFile(o,s,{limit:2,ref:i?.ref,range:i?.range});if(null==e)return;let t;if(i?.ref){if(null==e.commits.get(i.ref)&&!i?.firstIfNotFound&&((0,m.D3)(i.ref)||(0,m.l3)(i.ref)))return}return t??(0,ke.Ps)(e.commits.values())}catch(e){return void Pe.Yd.error(e,r)}}async getCommitsForGraph(e,t,i){const r=i?.limit??s.D.get("graph.defaultItemLimit")??5e3,o=s.D.get("graph.pageItemLimit")??1e3,n=s.D.get("graph.commitOrdering",void 0,"date"),a=i?.include?.stats,c=i?.include?.stats&&!a?(null==K&&(K=ie({sha:"%H",author:"%aN",authorEmail:"%aE",authorDate:"%at",committerDate:"%ct",parents:"%P",tips:"%D",message:"%B"})),K):(null==z&&(z=ee({sha:"%H",author:"%aN",authorEmail:"%aE",authorDate:"%at",committerDate:"%ct",parents:"%P",tips:"%D",message:"%B"})),z);const l=(null==Z&&(Z=te("%H")),Z),h=(null==J&&(J=ie({sha:"%H"})),J),[u,d,p,g,w]=await Promise.allSettled([this.git.log2(e,void 0,...l.arguments,"-n1",i?.ref??"HEAD"),this.getStash(e),this.getBranches(e),this.getRemotes(e),this.getCurrentUser(e)]),v=(0,Vt.Sb)(p)?.values,y=null!=v?new Map(v.map((e=>[e.name,e]))):new Map,b=v?.find((e=>e.current)),C=b?.upstream?.name,A=(0,Vt.Sb)(w),k=(0,Vt.Sb)(g),P=null!=k?new Map(k.map((e=>[e.name,e]))):new Map,S=(0,ke.Ps)(l.parse((0,Vt.Sb)(u)??"")),D=new Map;let R;const _=(0,Vt.Sb)(d);null!=_&&0!==_.commits.size&&(R=(0,ke.v_)((0,ke.UI)(_.commits.values(),(e=>e.sha.substring(0,9))),"\n"));const F=s.D.get("graph.avatars",void 0,!0),T=new Map,x=new Set,I=new Set,O=new Map;let B=0,E=0,W=0;return async function r(s,l,u){const d=B;let p;E++;let g,w=s;for(;;){const t=[...c.arguments,`--${n}-order`,"--all"];let r;if(u?.skip&&t.push(`--skip=${u.skip}`),l)[r,s]=await this.git.logStreamTo(e,l,s,R?{stdin:R}:void 0,...t);else if(t.push(`-n${w+1}`),r=await this.git.log2(e,R?{stdin:R}:void 0,...t),u&&!rt(u.sha).test(r)){if(g===r.length)return{repoPath:e,avatars:T,ids:x,includes:i?.include,branches:y,remotes:P,downstreams:D,rows:[]};g=r.length,w=2*(0===w?o:w),u.skip-=Math.floor(.1*u.skip);continue}if(!r)return{repoPath:e,avatars:T,ids:x,includes:i?.include,branches:y,remotes:P,downstreams:D,rows:[]};p=r,0!==s&&(s=w);break}const v=[];let b,k,S,N,M,U,L,G,H;const V=new Map;let Y,Q,q,j,z,K,J,Z,X,ee,te,ie,re,se,oe,ne,ae=!1,ce=!1,le=0;const he=c.parse(p);for(const i of he)if(le++,!x.has(i.sha)&&(B++,!O.has(i.sha))){if(x.add(i.sha),Q=[],j=[],K=[],L={},ae=!1,i.tips){for(ne of(V.clear(),i.tips.split(", ")))if("refs/stash"!==ne)if(ne.startsWith("tag: "))oe=ne.substring(5),se=(0,we.YU)(e,oe),U={webviewItem:"gitlens:tag",webviewItemValue:{type:"tag",ref:(0,m.xB)(oe,e,{id:se,refType:"tag",name:oe})}},z={id:se,name:oe,annotated:!0,context:(0,Qt.BH)(U)},K.push(z);else if(ae=ne.startsWith("HEAD"),ae&&(I.add(i.sha),"HEAD"!==ne&&(ne=ne.substring(8))),te=(0,f.Lo)(ne),te&&(X=P.get(te),null!=X)){if(M=(0,f.S3)(ne),"HEAD"===M)continue;ee=(0,f.Vx)(e,!0,ne),k=((F?X.provider?.avatarUri:void 0)??(0,mt.dM)(this.container,X,t))?.toString(!0),U={webviewItem:"gitlens:branch+remote",webviewItemValue:{type:"branch",ref:(0,m.xB)(ne,e,{id:ee,refType:"branch",name:ne,remote:!0,upstream:{name:X.name,missing:!1}})}},q={id:ee,name:M,owner:X.name,url:X.url,avatarUrl:k,context:(0,Qt.BH)(U),current:ne===C,hostingServiceType:X.provider?.id},j.push(q),G=V.get(M),null==G&&(G={remotes:[]},V.set(M,G)),null==G.remotes&&(G.remotes=[]),G.remotes.push(U.webviewItemValue.ref)}else{if(S=y.get(ne),N=S?.id??(0,f.Vx)(e,!1,ne),U={webviewItem:`gitlens:branch${ae?"+current":""}${null!=S?.upstream?"+tracking":""}`,webviewItemValue:{type:"branch",ref:(0,m.xB)(ne,e,{id:N,refType:"branch",name:ne,remote:!1,upstream:S?.upstream})}},Y={id:N,name:ne,isCurrentHead:ae,context:(0,Qt.BH)(U),upstream:null!=S?.upstream?{name:S.upstream.name,id:(0,f.Vx)(e,!0,S.upstream.name)}:void 0},Q.push(Y),null!=S?.upstream?.name){let e=D.get(S.upstream.name);null==e&&(e=[],D.set(S.upstream.name,e)),e.push(ne)}G=V.get(ne),null==G&&(G={},V.set(ne,G)),ae&&(G.head=!0),G.local=U.webviewItemValue.ref}for([H,G]of V)null!=G.remotes&&(null!=G.local&&G.remotes.length>0||G.remotes.length>1)&&(null==L.refGroups&&(L.refGroups={}),L.refGroups[H]=(0,Qt.BH)({webviewItemGroup:"gitlens:refGroup"+(G.head?"+current":""),webviewItemGroupValue:{type:"refGroup",refs:null!=G.local?[G.local,...G.remotes]:G.remotes}}))}if(ie=_?.commits.get(i.sha),Z=i.parents?i.parents.split(" "):[],I.has(i.sha))for(J of Z)I.add(J);null!=ie&&Z.length>1&&(O.set(Z[1],i.sha),O.set(Z[2],i.sha),Z.splice(1,2)),null!=ie||T.has(i.authorEmail)||(b=(0,lt.x4)(i.authorEmail),null!=b&&T.set(i.authorEmail,b.toString(!0))),ce=(0,$.o)(A,i.author,i.authorEmail),null!=ie?L.row=(0,Qt.BH)({webviewItem:"gitlens:stash",webviewItemValue:{type:"stash",ref:(0,m.xB)(i.sha,e,{refType:"stash",name:ie.name,number:ie.number})}}):(L.row=(0,Qt.BH)({webviewItem:`gitlens:commit${ae?"+HEAD":""}${I.has(i.sha)?"+current":""}`,webviewItemValue:{type:"commit",ref:(0,m.xB)(i.sha,e,{refType:"revision",message:i.message})}}),L.avatar=(0,Qt.BH)({webviewItem:"gitlens:contributor"+(ce?"+current":""),webviewItemValue:{type:"contributor",repoPath:e,name:i.author,email:i.authorEmail,current:ce}})),v.push({sha:i.sha,parents:Z,author:ce?"You":i.author,email:i.authorEmail,date:1e3*Number("author-date"===n?i.authorDate:i.committerDate),message:(0,ht.X)(i.message.trim()),type:null!=ie?"stash-node":Z.length>1?"merge-node":"commit-node",heads:Q,remotes:j,tags:K,contexts:L}),null!=i.stats&&(null==re&&(re=new Map),re.set(i.sha,i.stats))}const ue=u?.sha,de=(0,ke.Z$)(x);let pe;if(u=null!=de?{sha:de,skip:B-E}:void 0,a){null==re&&(re=new Map),W++;pe={isLoaded:()=>0===W,promise:new Promise((async t=>{try{const t=[...h.arguments];0===d?t.push(`-n${B}`):t.push("-n"+(B-d),`--skip=${d}`),t.push(`--${n}-order`,"--all");const i=await this.git.log2(e,R?{stdin:R}:void 0,...t);if(i){const e=h.parse(i);for(const t of e)re.set(t.sha,t.stats)}}finally{W--,t()}}))}}return{repoPath:e,avatars:T,ids:x,includes:i?.include,remappedIds:O,branches:y,remotes:P,downstreams:D,rows:v,id:l,rowsStats:re,rowsStatsDeferred:pe,paging:{limit:0===s?le:s,startingCursor:ue,hasMore:0!==s&&le>s},more:async(e,t)=>r.call(this,e,t,u)}}.call(this,r,S)}async getCommitTags(e,t,i){const r=await this.git.branchOrTag__containsOrPointsAt(e,t,{type:"tag",...i});return r?(0,A.DZ)(r.split("\n"),(e=>e.trim()||void 0)):[]}getConfig(e,t){return this.git.config__get(t,e)}setConfig(e,t,i){return this.git.config__set(t,i,e)}async getContributors(e,t){if(null==e)return[];const i=t?.stats?`stats|${e}`:e;let r=this.useCaching?this._contributorsCache.get(i):void 0;if(null==r){async function s(){try{e=(0,k.AH)(e);const i=await this.getCurrentUser(e),s=(r=t?.stats,r?(null==j&&(j=ie({sha:"%H",author:"%aN",email:"%aE",date:"%at"})),j):(null==q&&(q=ee({sha:"%H",author:"%aN",email:"%aE",date:"%at"})),q)),o=await this.git.log(e,t?.ref,{all:t?.all,argsOrFormat:s.arguments}),n=new Map,a=s.parse(o);for(const t of a){const r=`${t.author}|${t.email}`;let s=n.get(r);if(null==s)s=new pt.V(e,t.author,t.email,1,new Date(1e3*Number(t.date)),(0,$.o)(i,t.author,t.email),t.stats),n.set(r,s);else{s.count++;const e=new Date(1e3*Number(t.date));e>s.date&&(s.date=e)}}return[...n.values()]}catch(e){return this._contributorsCache.delete(i),[]}var r}r=s.call(this),this.useCaching&&this._contributorsCache.set(i,r)}return r}async getCurrentUser(e){if(!e)return;const t=(0,De.UH)(),i=this._repoInfoCache.get(e);let r=i?.user;if(null!=r)return r;if(null!==r){r={name:void 0,email:void 0};try{const t=await this.git.config__get_regex("^user\\.",e,{local:!0});if(t){let e,i,s;for(;;){if(s=oi.exec(t),null==s)break;[,e,i]=s,r[e]=` ${i}`.substr(1)}}else{if(r.name=l.env.GIT_AUTHOR_NAME||l.env.GIT_COMMITTER_NAME||(0,st.userInfo)()?.username||void 0,!r.name)return void this._repoInfoCache.set(e,{...i,user:null});r.email=l.env.GIT_AUTHOR_EMAIL||l.env.GIT_COMMITTER_EMAIL||l.env.EMAIL||`${r.name}@${(0,st.hostname)()}`}const s=`${r.name} <${r.email}>`,o=await this.git.check_mailmap(e,s);if(null!=o&&0!==o.length&&s!==o){const e=ni.exec(o);null!=e&&([,r.name,r.email]=e)}return this._repoInfoCache.set(e,{...i,user:r}),r}catch(r){return Pe.Yd.error(r,t),void this._repoInfoCache.set(e,{...i,user:null})}}}async getDefaultBranchName(e,t){if(null!=e){if(!t)try{const t=await this.git.symbolic_ref(e,"HEAD");if(null!=t)return t.trim()}catch{}t=t??"origin";try{const i=await this.git.ls_remote__HEAD(e,t);if(null==i)return;const r=/ref:\s(\S+)\s+HEAD/m.exec(i);if(null==r)return;const[,s]=r;return s.substr(11)}catch{return}}}async getDiff(e,t,i,r){const s=[`-U${r?.context??3}`];t===D.CL?i="HEAD":t===D.pw?(s.push("--staged"),null!=i?s.push(i):i="HEAD"):null==i?""===t||"HEAD"===t.toUpperCase()?(i="HEAD",s.push(i)):(i=t,s.push(`${t}^`,i)):s.push(t,i);const o=await this.git.diff2(e,void 0,...s);if(!o)return;return{baseSha:i,contents:o}}async getDiffForFile(e,t,i){const r=(0,De.UH)();let s="diff";null!=t&&(s+=`:${t}`),null!=i&&(s+=`:${i}`);const o=await this.container.tracker.getOrAdd(e);if(this.useCaching){if(null!=o.state){const e=o.state.getDiff(s);if(null!=e)return Pe.Yd.debug(r,`Cache hit: '${s}'`),e.item}Pe.Yd.debug(r,`Cache miss: '${s}'`),null==o.state&&(o.state=new qt.p)}const n=await li(e),a=this.getDiffForFileCore(e.repoPath,e.fsPath,t,i,{encoding:n},o,s,r);if(null!=o.state){Pe.Yd.debug(r,`Cache add: '${s}'`);const e={item:a};o.state.setDiff(s,e)}return a}async getDiffForFileCore(e,t,i,r,o,n,a,c){const[l,h]=(0,k.uo)(t,e);try{const e=await this.git.diff(h,l,i,r,{...o,filters:["M"],linesOfContext:0,renames:!0,similarityThreshold:s.D.get("advanced.similarityThreshold")});return St(e)}catch(e){if(null!=n.state){const t=e?.toString()??"";Pe.Yd.debug(c,`Cache replace (with empty promise): '${a}'`);const i={item:ti,errorMessage:t};return n.state.setDiff(a,i),ti}return}}async getDiffForFileContents(e,t,i){const r=(0,De.UH)(),s=`diff:${(0,nt.FB)(i)}`,o=await this.container.tracker.getOrAdd(e);if(this.useCaching){if(null!=o.state){const e=o.state.getDiff(s);if(null!=e)return Pe.Yd.debug(r,`Cache hit: ${s}`),e.item}Pe.Yd.debug(r,`Cache miss: ${s}`),null==o.state&&(o.state=new qt.p)}const n=await li(e),a=this.getDiffForFileContentsCore(e.repoPath,e.fsPath,t,i,{encoding:n},o,s,r);if(null!=o.state){Pe.Yd.debug(r,`Cache add: '${s}'`);const e={item:a};o.state.setDiff(s,e)}return a}async getDiffForFileContentsCore(e,t,i,r,o,n,a,c){const[l,h]=(0,k.uo)(t,e);try{const e=await this.git.diff__contents(h,l,i,r,{...o,filters:["M"],similarityThreshold:s.D.get("advanced.similarityThreshold")});return St(e)}catch(e){if(null!=n.state){const t=e?.toString()??"";Pe.Yd.debug(c,`Cache replace (with empty promise): '${a}'`);const i={item:ti,errorMessage:t};return n.state.setDiff(a,i),ti}return}}async getDiffForLine(e,t,i,r){try{const s=await this.getDiffForFile(e,i,r);if(null==s)return;const o=t+1,n=s.hunks.find((e=>e.current.position.start<=o&&e.current.position.end>=o));if(null==n)return;return n.lines[o-Math.min(n.current.position.start,n.previous.position.start)]}catch(e){return}}async getDiffStatus(e,t,i,r){try{const o=await this.git.diff__name_status(e,t,i,{similarityThreshold:s.D.get("advanced.similarityThreshold"),...r});if(!o)return;const n=Dt(o,e);return null==n||0===n.length?void 0:n}catch(e){return}}async getFileStatusForCommit(e,t,i){if(i===D.Ii||(0,m.l3)(i))return;const[r,s]=(0,k.uo)(t,e),o=await this.git.show__name_status(s,r,i);if(!o)return;const n=Dt(o,e);return null!=n&&0!==n.length?n[0]:void 0}async getFirstCommitSha(e){const t=await this.git.rev_list(e,"HEAD",{maxParents:0});return t?.[0]}async getGitDir(e){const t=this._repoInfoCache.get(e);if(null!=t?.gitDir)return t.gitDir;const i=await this.git.rev_parse__git_dir(e);let s;return s=null!=i?{uri:r.Uri.file(i.path),commonUri:null!=i.commonPath?r.Uri.file(i.commonPath):void 0}:{uri:this.getAbsoluteUri(".git",e)},this._repoInfoCache.set(e,{...t,gitDir:s}),s}async getLastFetchedTimestamp(e){try{const t=await this.getGitDir(e),i=await r.workspace.fs.stat(r.Uri.joinPath(t.uri,"FETCH_HEAD"));if(i.size>0)return i.mtime}catch{}}async getLog(e,t){const i=(0,De.UH)();try{const i=t?.limit??s.D.get("advanced.maxListItems")??0,r=null==t?.merges||t.merges,o=t?.ordering??s.D.get("advanced.commitOrdering"),n=s.D.get("advanced.similarityThreshold"),a=[`--format=${t?.all?se.allFormat:se.defaultFormat}`,"-M"+(null==n?"":`${n}%`),"-m"];let c;null!==t?.status&&a.push(`--${t?.status??"name-status"}`,"--full-history"),t?.all&&a.push("--all"),r||a.push("--first-parent"),o&&a.push(`--${o}-order`),t?.authors?.length&&a.push("--use-mailmap",...t.authors.map((e=>`--author=^${e.name} <${e.email}>$`))),t?.since&&(c=!0,a.push(`--since="${t.since}"`)),t?.until&&(c=!0,a.push(`--until="${t.until}"`)),t?.extraArgs?.length&&(t.extraArgs.some((e=>e.startsWith("-n")||e.startsWith("--until=")||e.startsWith("--since=")))&&(c=!0),a.push(...t.extraArgs)),i&&(c=void 0,a.push(`-n${i+1}`));const l=await this.git.log2(e,{configs:Ke,ref:t?.ref,stdin:t?.stdin},...a),h=se.parse(this.container,l,Q.Log,e,void 0,t?.ref,await this.getCurrentUser(e),i,!1,void 0,void 0,c);if(null!=h&&(h.query=i=>this.getLog(e,{...t,limit:i}),h.hasMore)){let e;if(null!=t){let i;({extraArgs:i,...e}=t)}h.more=this.getLogMoreFn(h,e)}return h}catch(e){return void Pe.Yd.error(e,i)}}async getLogRefsOnly(e,t){const i=(0,De.UH)(),r=t?.limit??s.D.get("advanced.maxListItems")??0;try{const i=te("%H"),o=await this.git.log(e,t?.ref,{authors:t?.authors,argsOrFormat:i.arguments,limit:r,merges:null==t?.merges||t.merges,similarityThreshold:s.D.get("advanced.similarityThreshold"),since:t?.since,ordering:t?.ordering??s.D.get("advanced.commitOrdering")});return new Set(i.parse(o))}catch(e){return void Pe.Yd.error(e,i)}}getLogMoreFn(e,t){return async i=>{const r=null!=i&&"object"==typeof i?i.until:void 0;let o="number"==typeof i?i:void 0;if(r&&(0,ke.G)(e.commits.values(),(e=>e.ref===r)))return e;if(o=o??s.D.get("advanced.maxSearchItems")??0,(0,m.yk)(e.sha)){const i=await this.getLog(e.repoPath,{...t,limit:0===o?0:(t?.limit??0)+o});return i??{...e,hasMore:!1,more:void 0}}const n=(0,ke.Z$)(e.commits.values()),a=n?.ref;let c,l;if(t?.all){const e=n?.committer.date;c=null!=e?Math.ceil(e.getTime()/1e3)+1:void 0}let h=null==r?o:0;for(;;){const i=await this.getLog(e.repoPath,{...t,limit:h,...c?{until:c,extraArgs:["--boundary"]}:{ref:null==r?`${a}^`:`${r}^..${a}^`}});if(null==i)return{...e,hasMore:!1,more:void 0};const s=e.commits.size,n=new Map([...e.commits,...i.commits]);if(s===n.size&&0!==h){if(l===i.commits.size)return{...e,hasMore:!1,more:void 0};l=i.commits.size,h*=2;continue}null!=c&&null!=a&&i.commits.has(a);const u={repoPath:e.repoPath,commits:n,sha:e.sha,range:void 0,count:n.size,limit:null==r?(e.limit??0)+o:void 0,hasMore:null!=r||i.hasMore,startingCursor:(0,ke.Z$)(e.commits)?.[0],endingCursor:i.endingCursor,pagedCommits:()=>{for(const t of e.commits.keys())i.commits.delete(t);return i.commits},query:i=>this.getLog(e.repoPath,{...t,limit:i})};return u.hasMore&&(u.more=this.getLogMoreFn(u,t)),u}}}async getLogForFile(e,t,i){if(null==e)return;const r=(0,De.UH)(),o=this.getRelativePath(t,e);if(null!=e&&e===o)throw new Error(`File name cannot match the repository path; path=${o}`);const n={reverse:!1,...i};null==n.renames&&(n.renames=s.D.get("advanced.fileHistoryFollowsRenames")),null==n.merges&&(n.merges=s.D.get("advanced.fileHistoryShowMergeCommits"));let a="log";null!=n.ref&&(a+=`:${n.ref}`),null==n.all&&(n.all=s.D.get("advanced.fileHistoryShowAllBranches")),n.all&&(a+=":all"),n.limit=n.limit??s.D.get("advanced.maxListItems")??0,n.limit&&(a+=`:n${n.limit}`),n.merges&&(a+=":merges"),n.renames&&(a+=":follow"),n.reverse&&(a+=":reverse"),n.since&&(a+=`:since=${n.since}`),n.skip&&(a+=`:skip${n.skip}`);const c=await this.container.tracker.getOrAdd(dt.YY.fromFile(o,e,n.ref));if(!n.force&&this.useCaching&&null==n.range){if(null!=c.state){const i=c.state.getLog(a);if(null!=i)return Pe.Yd.debug(r,`Cache hit: '${a}'`),i.item;if(null!=n.ref||null!=n.limit&&0!==n.limit){const i=c.state.getLog(`log${n.renames?":follow":""}${n.reverse?":reverse":""}`);if(null!=i){if(null==n.ref)return Pe.Yd.debug(r,`Cache hit: ~'${a}'`),i.item;Pe.Yd.debug(r,`Cache ?: '${a}'`);let s=await i.item;if(null!=s&&!s.hasMore&&s.commits.has(n.ref)){Pe.Yd.debug(r,`Cache hit: '${a}'`);let i=!0,o=0;const c=new Map((0,ke.DZ)(s.commits.entries(),(([e,t])=>{if(i){if(e!==n?.ref)return;i=!1}if(o++,!(null!=n?.limit&&o>n.limit))return[e,t]}))),l={...n};return s={...s,limit:l.limit,count:c.size,commits:c,query:i=>this.getLogForFile(e,t,{...l,limit:i})},s}}}}Pe.Yd.debug(r,`Cache miss: '${a}'`),null==c.state&&(c.state=new qt.p)}const l=this.getLogForFileCore(e,o,n,c,a,r);if(null!=c.state&&null==n.range){Pe.Yd.debug(r,`Cache add: '${a}'`);const e={item:l};c.state.setLog(a,e)}return l}async getLogForFileCore(e,t,{ref:i,range:o,...n},a,c,l){const h=await this.isTrackedPrivate(t,e,i);if(null==h)return Pe.Yd.log(l,`Skipping blame; '${t}' is not tracked`),ti;const[u,d]=h;try{null!=o&&o.start.line>o.end.line&&(o=new r.Range(o.end,o.start));const a=await this.git.log__file(d,u,i,{ordering:s.D.get("advanced.commitOrdering"),...n,startLine:null==o?void 0:o.start.line+1,endLine:null==o?void 0:o.end.line+1}),c=se.parse(this.container,a,(0,k.Mh)(u)?Q.Log:Q.LogFile,d,u,i,await this.getCurrentUser(d),n.limit,n.reverse??!1,o);if(null!=c){const r={...n,ref:i,range:o};c.query=i=>this.getLogForFile(e,t,{...r,limit:i}),c.hasMore&&(c.more=this.getLogForFileMoreFn(c,t,r))}return c}catch(e){if(null!=a.state&&null==o&&!n.reverse){const t=e?.toString()??"";Pe.Yd.debug(l,`Cache replace (with empty promise): '${c}'`);const i={item:ti,errorMessage:t};return a.state.setLog(c,i),ti}return}}getLogForFileMoreFn(e,t,i){return async r=>{const o=null!=r&&"object"==typeof r?r.until:void 0;let n="number"==typeof r?r:void 0;if(o&&(0,ke.G)(e.commits.values(),(e=>e.ref===o)))return e;n=n??s.D.get("advanced.maxSearchItems")??0;const a=(0,ke.Z$)(e.commits.values())?.ref,c=await this.getLogForFile(e.repoPath,t,{...i,limit:null==o?n:0,ref:i.all?void 0:null==o?`${a}^`:`${o}^..${a}^`,skip:i.all?e.count:void 0});if(null==c)return{...e,hasMore:!1,more:void 0};const l=new Map([...e.commits,...c.commits]),h={repoPath:e.repoPath,commits:l,sha:e.sha,range:e.range,count:l.size,limit:null==o?(e.limit??0)+n:void 0,hasMore:null!=o||c.hasMore,query:r=>this.getLogForFile(e.repoPath,t,{...i,limit:r})};if(i.renames){const e=(0,ke.sE)(c.commits.values(),(e=>Boolean(e.file?.originalPath)&&e.file?.originalPath!==t));t=e?.file?.originalPath??t}return h.hasMore&&(h.more=this.getLogForFileMoreFn(h,t,i)),h}}async getMergeBase(e,t,i,r){const s=(0,De.UH)();try{const s=await this.git.merge_base(e,t,i,r);if(null==s)return;return s.split("\n")[0].trim()||void 0}catch(e){return void Pe.Yd.error(e,s)}}async getMergeStatus(e){let t=this.useCaching?this._mergeStatusCache.get(e):void 0;if(null==t){async function i(){const t=await this.git.rev_parse__verify(e,"MERGE_HEAD");if(null==t)return;const[i,r,s]=await Promise.allSettled([this.getBranch(e),this.getMergeBase(e,"MERGE_HEAD","HEAD"),this.getCommitBranches(e,"MERGE_HEAD",void 0,{all:!0,mode:"pointsAt"})]),o=(0,Vt.Sb)(i),n=(0,Vt.Sb)(r),a=(0,Vt.Sb)(s);return{type:"merge",repoPath:e,mergeBase:n,HEAD:(0,m.xB)(t,e,{refType:"revision"}),current:(0,m.LB)(o),incoming:1===a?.length?(0,m.xB)(a[0],e,{refType:"branch",name:a[0],remote:!1}):void 0}}t=i.call(this),this.useCaching&&this._mergeStatusCache.set(e,t)}return t}async getRebaseStatus(e){let t=this.useCaching?this._rebaseStatusCache.get(e):void 0;if(null==t){async function i(){const t=await this.getGitDir(e),[i,r]=await Promise.allSettled([this.git.readDotGitFile(t,["rebase-merge","head-name"]),this.git.readDotGitFile(t,["rebase-apply","head-name"])]),s=(0,Vt.Sb)(i),o=(0,Vt.Sb)(r);let n=o??s;if(null==n)return;const a=null!=o?"rebase-apply":"rebase-merge",[c,l,h,u,d,p]=await Promise.allSettled([this.git.rev_parse__verify(e,"REBASE_HEAD"),this.git.readDotGitFile(t,[a,"orig-head"]),this.git.readDotGitFile(t,[a,"onto"]),this.git.readDotGitFile(t,[a,"msgnum"],{numeric:!0}),this.git.readDotGitFile(t,[a,"end"],{numeric:!0}),this.git.readDotGitFile(t,[a,"message"],{throw:!0}).catch((()=>this.git.readDotGitFile(t,[a,"message-squashed"])))]),g=(0,Vt.Sb)(l),f=(0,Vt.Sb)(h);if(null==g||null==f)return;let w;const v=(0,Vt.Sb)(c);w=null!=v?await this.getMergeBase(e,v,"HEAD"):await this.getMergeBase(e,f,g),n.startsWith("refs/heads/")&&(n=n.substr(11).trim());const[y,b]=await Promise.allSettled([this.getCommitBranches(e,f,void 0,{all:!0,mode:"pointsAt"}),this.getCommitTags(e,f,{mode:"pointsAt"})]),C=(0,Vt.Sb)(y),A=(0,Vt.Sb)(b);let k;if(null!=C)for(const t of C)if(!t.startsWith("(no branch, rebasing")){k=(0,m.xB)(t,e,{refType:"branch",name:t,remote:!1});break}if(null==k&&null!=A)for(const t of A)if(!t.startsWith("(no branch, rebasing")){k=(0,m.xB)(t,e,{refType:"tag",name:t});break}return{type:"rebase",repoPath:e,mergeBase:w,HEAD:(0,m.xB)(v??g,e,{refType:"revision"}),onto:(0,m.xB)(f,e,{refType:"revision"}),current:k,incoming:(0,m.xB)(n,e,{refType:"branch",name:n,remote:!1}),steps:{current:{number:(0,Vt.Sb)(u)??0,commit:null!=v?(0,m.xB)(v,e,{refType:"revision",message:(0,Vt.Sb)(p)}):void 0},total:(0,Vt.Sb)(d)??0}}}t=i.call(this),this.useCaching&&this._rebaseStatusCache.set(e,t)}return t}async getNextComparisonUris(e,t,i,r=0){if(!i)return;const s=this.getRelativePath(t,e);if((0,m.rD)(i))return{current:dt.YY.fromFile(s,e,i),next:dt.YY.fromFile(s,e,void 0)};const o=await this.getNextUri(e,t,i,r);if(null==o){const r=await this.getStatusForFile(e,t);return null!=r&&null!=r.indexStatus?{current:dt.YY.fromFile(s,e,i),next:dt.YY.fromFile(s,e,D.pw)}:{current:dt.YY.fromFile(s,e,i),next:dt.YY.fromFile(s,e,void 0)}}return{current:0===r?dt.YY.fromFile(s,e,i):await this.getNextUri(e,t,i,r-1),next:o}}async getNextUri(e,t,i,r=0){if(!i||(0,m.rD)(i))return;let o;i===D.Ii&&(i=void 0,o=["A"]);const n=this.getRelativePath(t,e);let a=await this.git.log__file(e,n,i,{argsOrFormat:se.simpleFormat,fileMode:"simple",filters:o,limit:r+1,ordering:s.D.get("advanced.commitOrdering"),reverse:!0});if(null==a||0===a.length)return;const[c,l,h]=se.parseSimple(a,r);if("D"===h){if(a=await this.git.log__file(e,".",c,{argsOrFormat:se.simpleFormat,fileMode:"simple",filters:["R","C"],limit:1,ordering:s.D.get("advanced.commitOrdering")}),null==a||0===a.length)return dt.YY.fromFile(l??n,e,c);const[t,i]=se.parseSimpleRenamed(a,l??n);return dt.YY.fromFile(i??l??n,e,t??c??D.Ii)}return dt.YY.fromFile(l??n,e,c)}async getOldestUnpushedRefForFile(e,t){const[i,r]=(0,k.uo)(t,e),o=await this.git.log__file(r,i,"@{u}..",{argsOrFormat:["-z","--format=%H"],fileMode:"none",ordering:s.D.get("advanced.commitOrdering"),renames:!0});if(!o)return;const n=o.lastIndexOf("\0",o.length-2);return-1===n?void 0:o.slice(n+1,o.length-2)}async getPreviousComparisonUris(e,t,i,r=0){if(i===D.Ii)return;const s=this.getRelativePath(t,e);if(i){if((0,m.rD)(i)){const o=0===r?dt.YY.fromFile(s,e,i):await this.getPreviousUri(e,t,void 0,r-1);if(null==o||o.sha===D.Ii)return;return{current:o,previous:await this.getPreviousUri(e,t,void 0,r)}}}else{const o=await this.getStatusForFile(e,t);if(null!=o){if(null!=o.indexStatus)return null==o.workingTreeStatus&&r++,0===r?{current:dt.YY.fromFile(s,e,void 0),previous:dt.YY.fromFile(s,e,D.pw)}:{current:dt.YY.fromFile(s,e,D.pw),previous:await this.getPreviousUri(e,t,i,r-1)};if(null!=o.workingTreeStatus&&0===r)return{current:dt.YY.fromFile(s,e,void 0),previous:await this.getPreviousUri(e,t,void 0,r)}}else 0===r&&r++}const o=0===r?dt.YY.fromFile(s,e,i):await this.getPreviousUri(e,t,i,r-1);return null!=o&&o.sha!==D.Ii?{current:o,previous:await this.getPreviousUri(e,t,i,r)}:void 0}async getPreviousComparisonUrisForLine(e,t,i,s,o=0){if(s===D.Ii)return;let n,a=this.getRelativePath(t,e);if(s){if((0,m.rD)(s)){const r=0===o?dt.YY.fromFile(a,e,s):await this.getPreviousUri(e,t,void 0,o-1,i);if(r.sha===D.Ii)return;return{current:r,previous:await this.getPreviousUri(e,t,void 0,o,i),line:i}}const r=new dt.YY(t,{repoPath:e,sha:s}),c=await this.getBlameForLine(r,i);if(null==c)return;s=c.commit.sha,a=c.commit.file?.path??c.commit.file?.originalPath??a,t=this.getAbsoluteUri(a,e),i=c.line.originalLine-1,0===o&&c.commit.file?.previousSha&&(n=dt.YY.fromFile(a,e,c.commit.file.previousSha))}else{const c=new dt.YY(t,e),l=await r.workspace.openTextDocument(t),h=l.isDirty?await this.getBlameForLineContents(c,i,l.getText()):await this.getBlameForLine(c,i);if(null==h)return;if(h.commit.isUncommitted){if(l.isDirty){const r=await this.getStatusForFile(e,t);return null!=r&&null!=r.indexStatus?{current:dt.YY.fromFile(a,e,void 0),previous:dt.YY.fromFile(a,e,D.pw),line:i}:{current:dt.YY.fromFile(a,e,void 0),previous:await this.getPreviousUri(e,t,void 0,o,i),line:i}}let r=await this.getDiffForLine(c,i,void 0);null==r&&(r=await this.getDiffForLine(c,i,void 0,D.pw),null!=r?s=D.pw:o++)}else s=h.commit.sha,a=h.commit.file?.path??h.commit.file?.originalPath??a,t=this.getAbsoluteUri(a,e),i=h.line.originalLine-1,0===o&&h.commit.file?.previousSha&&(n=dt.YY.fromFile(a,e,h.commit.file.previousSha))}const c=0===o?dt.YY.fromFile(a,e,s):await this.getPreviousUri(e,t,s,o-1,i);return c.sha!==D.Ii?{current:c,previous:n??await this.getPreviousUri(e,t,s,o,i),line:i}:void 0}async getPreviousUri(e,t,i,r=0,o){if(i===D.Ii)return;const n=(0,De.UH)();i===D.CL&&(i=void 0);const a=this.getRelativePath(t,e);let c;try{c=await this.git.log__file(e,a,i,{argsOrFormat:se.simpleFormat,fileMode:"simple",limit:r+2,ordering:s.D.get("advanced.commitOrdering"),startLine:null!=o?o+1:void 0})}catch(r){const o=r?.toString()??"";if((null==i||(0,m.rD)(i))&&et.invalidLineCount.test(o)){if(null==i){const i=await this.getStatusForFile(e,t);if(null!=i?.indexStatus)return dt.YY.fromFile(a,e,D.pw)}return i=await this.git.log__file_recent(e,a,{ordering:s.D.get("advanced.commitOrdering")}),dt.YY.fromFile(a,e,i??D.Ii)}throw Pe.Yd.error(r,n),r}if(null==c||0===c.length)return;const[l,h]=se.parseSimple(c,r,i);return null==i||i!==l?dt.YY.fromFile(h??a,e,l??D.Ii):void 0}async getIncomingActivity(e,t){const i=(0,De.UH)(),r=t?.limit??s.D.get("advanced.maxListItems")??0;try{const i=await this.git.reflog(e,{ordering:s.D.get("advanced.commitOrdering"),...t,limit:100*r});if(null==i)return;const o=GitReflogParser.parse(i,e,ci,r,100*r);return o?.hasMore&&(o.more=this.getReflogMoreFn(o,t)),o}catch(e){return void Pe.Yd.error(e,i)}}getReflogMoreFn(e,t){return async i=>{i=i??s.D.get("advanced.maxSearchItems")??0;const r=await this.getIncomingActivity(e.repoPath,{...t,limit:i,skip:e.total});if(null==r)return{...e,hasMore:!1,more:void 0};const o={repoPath:e.repoPath,records:[...e.records,...r.records],count:e.count+r.count,total:e.total+r.total,limit:(e.limit??0)+i,hasMore:r.hasMore};return o.hasMore&&(o.more=this.getReflogMoreFn(o,t)),o}}async getRemotes(e,t){if(null==e)return[];const i=(0,De.UH)();let r=this.useCaching?this._remotesCache.get(e):void 0;if(null==r){async function n(){const t=(0,Nt.v)(s.D.get("remotes",this.container.git.getRepository(e)?.folder?.uri??null));try{const i=await this.git.remote(e),r=fe.Ww.parse(i,e,(0,Nt.B)(this.container,t));return r??[]}catch(t){return this._remotesCache.delete(e),Pe.Yd.error(t,i),[]}}r=n.call(this),this.useCaching&&this._remotesCache.set(e,r)}const o=await r;return t?.sort&&mt.ss.sort(o),o}getRevisionContent(e,t,i){const[r,s]=(0,k.uo)(t,e);return this.git.show(s,r,i,{encoding:"buffer"})}async getStash(e){if(null==e)return;let t=this.useCaching?this._stashesCache.get(e):void 0;if(void 0===t){const i=function(e){let t="%x00";const i=[];for(const r in e)i.push(r),t+=`%x00${e[r]}`;return{arguments:["-z",`--format=${t}`,"--name-status"],parse:function*(e){const t=(0,P.UM)(e,"\0\0\0");let r,s,o;for(const e of t){r={},s=[],o=(0,P.UM)(e,"\0"),o.next(),o.next();let t,n=0;for(;t=o.next(),!t.done;)if(n<i.length)r[i[n++]]=t.value;else{const e={status:t.value.trim(),path:void 0};t=o.next(),e.path=t.value,(e.status.startsWith("R")||e.status.startsWith("C"))&&(t=o.next(),e.originalPath=t.value),s.push(e)}r.files=s,yield r}}}}({sha:"%H",date:"%at",committedDate:"%ct",parents:"%P",stashName:"%gd",summary:"%gs"}),r=await this.git.stash__list(e,{args:i.arguments,similarityThreshold:s.D.get("advanced.similarityThreshold")}),o=new Map,n=i.parse(r);for(const t of n){let i,r,s;const n=ai.exec(t.summary);null!=n?.groups?(i=n.groups.onref,r=n.groups.summary.trim(),s=0===r.length?"WIP":n.groups.wip?`WIP: ${r}`:r):s=t.summary.trim(),o.set(t.sha,new S.aM(this.container,e,t.sha,new S._j("You",void 0,new Date(1e3*t.date)),new S._j("You",void 0,new Date(1e3*t.committedDate)),s.split("\n",1)[0]??"",t.parents.split(" "),s,t.files?.map((t=>new R.K8(e,t.path,t.status,t.originalPath)))??[],void 0,[],void 0,t.stashName,i))}t={repoPath:e,commits:o},this.useCaching&&this._stashesCache.set(e,t??null)}return t??void 0}async getStatusForFile(e,t){const i=await this.git.isAtLeastVersion("2.11")?2:1,[r,o]=(0,k.uo)(t,e),n=await this.git.status__file(o,r,i,{similarityThreshold:s.D.get("advanced.similarityThreshold")}),a=GitStatusParser.parse(n,o,i);return a?.files?.[0]}async getStatusForFiles(e,t){const i=await this.git.isAtLeastVersion("2.11")?2:1,[r,o]=(0,k.uo)(t,e),n=await this.git.status__file(o,r,i,{similarityThreshold:s.D.get("advanced.similarityThreshold")}),a=GitStatusParser.parse(n,o,i);return a?.files??[]}async getStatusForRepo(e){if(null==e)return;const t=await this.git.isAtLeastVersion("2.11")?2:1,i=await this.git.status(e,t,{similarityThreshold:s.D.get("advanced.similarityThreshold")}),r=GitStatusParser.parse(i,e,t);if(r?.detached){const t=await this.getRebaseStatus(e);if(null!=t)return new wt.Hk(e,t.incoming.name,r.sha,r.files,r.state,r.upstream,!0)}return r}async getTags(e,t){if(null==e)return ii;let i=this.useCaching?this._tagsCache.get(e):void 0;if(null==i){async function s(){try{const t=await this.git.tag(e);return{values:GitTagParser.parse(t,e)??[]}}catch(t){return this._tagsCache.delete(e),ii}}i=s.call(this),this.useCaching&&this._tagsCache.set(e,i)}let r=await i;return null!=t?.filter&&(r={...r,values:r.values.filter(t.filter)}),t?.sort&&(0,we.Pj)(r.values,"boolean"==typeof t.sort?void 0:t.sort),r}async getTreeEntryForRevision(e,t,i){if(null==e||!t)return;const[r,s]=(0,k.uo)(t,e),o=await this.git.ls_tree(s,i,r),n=GitTreeParser.parse(o);return n?.length?n[0]:void 0}async getTreeForRevision(e,t){if(null==e)return[];const i=await this.git.ls_tree(e,t);return GitTreeParser.parse(i)??[]}async hasBranchOrTag(e,t){const[{values:i},{values:r}]=await Promise.all([this.getBranches(e,{filter:t?.filter?.branches,sort:!1}),this.getTags(e,{filter:t?.filter?.tags,sort:!1})]);return 0!==i.length||0!==r.length}async hasCommitBeenPushed(e,t){return null!=e&&this.git.merge_base__is_ancestor(e,t,"@{u}")}hasUnsafeRepositories(){return 0!==this.unsafePaths.size}isTrackable(e){return this.supportedSchemes.has(e.scheme)}async isTracked(e){return null!=await this.isTrackedPrivate(e)}async isTrackedPrivate(e,t,i){let s,o;if("string"==typeof e){if(i===D.Ii)return;o=this.container.git.getRepository(r.Uri.file(e)),t=t||o?.path,[s,t]=(0,k.uo)(e,t)}else{if(!this.isTrackable(e))return;if(e instanceof dt.YY&&(i=e.sha)===D.Ii)return;o=this.container.git.getRepository(e),t=t||o?.path,[s,t]=(0,k.uo)(e,t)}const n=t?`${t}/${s}`:s;let a=n;a=`${i??""}:${a.startsWith("/")?a:`/${a}`}`;let c=this._trackedPaths.get(a);return null!=c||(c=this.isTrackedCore(n,s,t??"",i,o),this._trackedPaths.set(a,c),c=await c,this._trackedPaths.set(a,c)),c}async isTrackedCore(e,t,i,s,o){if(s===D.Ii)return;const n=(0,De.UH)();try{for(;;){i||([t,i]=(0,k.uo)(e,"",!0));let n=Boolean(await this.git.ls_files(i,t));if(n)return[t,i];if(i){const[i,s]=(0,k.uo)(e,"",!0);if(i!==t&&(n=Boolean(await this.git.ls_files(s,i)),n))return null!=(o=await this.container.git.getOrOpenRepository(r.Uri.file(e),{detectNested:!0}))?(0,k.uo)(e,o.path):[i,s]}if(n||!s||(0,m.l3)(s)||(n=Boolean(await this.git.ls_files(i,t,{ref:s})),n||(n=Boolean(await this.git.ls_files(i,t,{ref:`${s}^`})))),!n){if(null!=o){const s=t.indexOf("/");if(s<0||s===t.length-1)return;const n=await this.container.git.getOrOpenRepository(r.Uri.file(e),{detectNested:!0});if(null!=n&&n!==o){[t,i]=(0,k.uo)(e,o.path),o=void 0;continue}}return}return[t,i]}}catch(e){return void Pe.Yd.error(e,n)}}async getDiffTool(e){return await this.git.config__get("diff.guitool",e,{local:!0})??this.git.config__get("diff.tool",e,{local:!0})}async openDiffTool(e,t,i){const o=(0,De.UH)(),[n,a]=(0,k.uo)(t,e);try{let e=i?.tool;if(!e){const t=(0,De.UH)();if(e=s.D.get("advanced.externalDiffTool")||await this.getDiffTool(a),null==e)throw new Error("No diff tool found");Pe.Yd.log(t,`Using tool=${e}`)}await this.git.difftool(a,n,e,i)}catch(e){const t=e?.toString()??"";if("No diff tool found"===t||/Unknown .+? tool/.test(t)){const e="View Git Docs";return void(await r.window.showWarningMessage("Unable to open changes because the specified diff tool cannot be found or no Git diff tool is configured",e)===e&&r.env.openExternal(r.Uri.parse("https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool")))}Pe.Yd.error(e,o),(0,Ut.W8)("Unable to open compare")}}async openDirectoryCompare(e,t,i,o){const n=(0,De.UH)();try{if(!o){const t=(0,De.UH)();if(null==(o=s.D.get("advanced.externalDirectoryDiffTool")||await this.getDiffTool(e)))throw new Error("No diff tool found");Pe.Yd.log(t,`Using tool=${o}`)}await this.git.difftool__dir_diff(e,o,t,i)}catch(e){const t=e?.toString()??"";if("No diff tool found"===t||/Unknown .+? tool/.test(t)){const e="View Git Docs";return void(await r.window.showWarningMessage("Unable to open directory compare because the specified diff tool cannot be found or no Git diff tool is configured",e)===e&&r.env.openExternal(r.Uri.parse("https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool")))}Pe.Yd.error(e,n),(0,Ut.W8)("Unable to open directory compare")}}async resolveReference(e,t,i,r){if(!t||t===D.Ii||null==i&&(0,m.D3)(t)||null!=i&&(0,m.l3)(t))return t;if(null==i)return!r?.force&&!(0,m.yo)(t)||t.endsWith("^3")?t:await this.git.rev_parse__verify(e,t)??t;const s=this.getRelativePath(i,e);let o;null!=r?.timeout&&(o=new Lt.Ac(r.timeout));const[n,a]=await Promise.allSettled([this.git.rev_parse__verify(e,t,s),this.git.log__file_recent(e,s,{ref:t,cancellation:o?.token})]);if(null==(0,Vt.Sb)(n))return D.Ii;const c=(0,Vt.Sb)(a),l=o?.token.isCancellationRequested;return o?.dispose(),l?t:c??t}async richSearchCommits(e,t,i){t={matchAll:!1,matchCase:!1,matchRegex:!0,...t};try{const r=i?.limit??s.D.get("advanced.maxSearchItems")??0,o=s.D.get("advanced.similarityThreshold"),n=await this.getCurrentUser(e),{args:a,files:c,shas:l}=(0,Mt.vx)(t,n);let h,u;if(a.push("-M"+(null==o?"":`${o}%`),"--"),0!==c.length&&a.push(...c),null==l){const t=await this.getStash(e);if(t?.commits.size){h=new Map;for(const e of t.commits.values()){h.set(e.sha,e);for(const t of e.parents)h.set(t,e)}u=(0,ke.v_)((0,ke.UI)(t.commits.values(),(e=>e.sha.substring(0,9))),"\n")}}const d=await this.git.log__search(e,l?.size?void 0:a,{ordering:s.D.get("advanced.commitOrdering"),...i,limit:r,shas:l,stdin:u}),p=se.parse(this.container,d,Q.Log,e,void 0,void 0,n,r,!1,void 0,h);if(null!=p){let r=function(e){return async o=>{o=o??s.D.get("advanced.maxSearchItems")??0;const n=await this.richSearchCommits(e.repoPath,t,{...i,limit:o,skip:e.count});if(null==n)return{...e,hasMore:!1,more:void 0};const a=new Map([...e.commits,...n.commits]),c={repoPath:e.repoPath,commits:a,sha:e.sha,range:e.range,count:a.size,limit:(e.limit??0)+o,hasMore:n.hasMore,query:r=>this.richSearchCommits(e.repoPath,t,{...i,limit:r})};return c.hasMore&&(c.more=r.call(this,c)),c}};p.query=r=>this.richSearchCommits(e,t,{...i,limit:r}),p.hasMore&&(p.more=r.call(this,p))}return p}catch(e){return}}async searchCommits(e,t,i){t={matchAll:!1,matchCase:!1,matchRegex:!0,...t};const r=(0,Mt.FL)(t);try{const o=(null==X&&(X=ee({sha:"%H",authorDate:"%at",committerDate:"%ct"})),X),n=t.query.includes("@me")?await this.getCurrentUser(e):void 0,{args:a,files:c,shas:l}=(0,Mt.vx)(t,n);if(l?.size){const b=await this.git.show2(e,{cancellation:i?.cancellation},"-s",...o.arguments,...l.values(),...a,"--");let C=0;const A=new Map((0,ke.UI)(o.parse(b),(e=>[e.sha,{i:C++,date:1e3*Number("author-date"===i?.ordering?e.authorDate:e.committerDate)}])));return{repoPath:e,query:t,comparisonKey:r,results:A}}const h=i?.limit??s.D.get("advanced.maxSearchItems")??0,u=s.D.get("advanced.similarityThreshold"),m=await this.getStash(e);let g;m?.commits.size&&(g=(0,ke.v_)((0,ke.UI)(m.commits.values(),(e=>e.sha.substring(0,9))),"\n"));const f=[...o.arguments,"-M"+(null==u?"":`${u}%`),"--use-mailmap"],w=new Map;let v=0;async function y(s,n){if(i?.cancellation?.isCancellationRequested)return{repoPath:e,query:t,comparisonKey:r,results:w};let l;try{l=await this.git.log2(e,{cancellation:i?.cancellation,configs:["-C",e,...ze],errors:d.Throw,stdin:g},...f,...a,...i?.ordering?[`--${i.ordering}-order`]:ei,...s?[`-n${s+1}`]:ei,...n?.skip?[`--skip=${n.skip}`]:ei,"--",...c)}catch(s){if(s instanceof CancelledRunError||i?.cancellation?.isCancellationRequested)return{repoPath:e,query:t,comparisonKey:r,results:w};throw new p.l0(s)}if(i?.cancellation?.isCancellationRequested)return{repoPath:e,query:t,comparisonKey:r,results:w};let h=v;for(const e of o.parse(l))w.has(e.sha)?s--:w.set(e.sha,{i:v++,date:1e3*Number("author-date"===i?.ordering?e.authorDate:e.committerDate)});h=v-h;const u=(0,ke.Z$)(w)?.[0];return n=null!=u?{sha:u,skip:v}:void 0,{repoPath:e,query:t,comparisonKey:r,results:w,paging:0!==s&&h>s?{limit:s,hasMore:!0}:void 0,more:async e=>y.call(this,e,n)}}return y.call(this,h)}catch(k){if(k instanceof p.l0)throw k;throw new p.l0(k)}}async runGitCommandViaTerminal(e,t,i,r){await this.git.runGitCommandViaTerminal(e,t,i,r)}validateBranchOrTagName(e,t){return this.git.check_ref_format(t,e)}async validateReference(e,t){return null!=t&&0!==t.length&&(!(t!==D.Ii&&!(0,m.l3)(t))||null!=await this.git.rev_parse__verify(e,t))}async stageFile(e,t){await this.git.add(e,"string"==typeof t?t:(0,k.uo)(t,e)[0])}async stageDirectory(e,t){await this.git.add(e,"string"==typeof t?t:(0,k.uo)(t,e)[0])}async unstageFile(e,t){await this.git.reset(e,"string"==typeof t?t:(0,k.uo)(t,e)[0])}async unstageDirectory(e,t){await this.git.reset(e,"string"==typeof t?t:(0,k.uo)(t,e)[0])}async stashApply(e,t,i){try{await this.git.stash__apply(e,t,Boolean(i?.deleteAfter))}catch(e){if(e instanceof Error){const t=e.message??"";if(t.includes("Your local changes to the following files would be overwritten by merge"))throw new p.ef(p.bk.WorkingChanges,e);if(t.includes("Auto-merging")&&t.includes("CONFLICT")||e instanceof RunError&&(e.stdout.includes("Auto-merging")&&e.stdout.includes("CONFLICT")||e.stdout.includes("needs merge")))return void r.window.showInformationMessage("Stash applied with conflicts");throw new p.ef(`Unable to apply stash — ${t.trim().replace(/\n+?/g,"; ")}`,e)}throw new p.ef(`Unable to apply stash — ${String(e)}`,e)}}async stashDelete(e,t,i){await this.git.stash__delete(e,t,i),this.container.events.fire("git:cache:reset",{repoPath:e,caches:["stashes"]})}async stashRename(e,t,i,r,s){await this.git.stash__rename(e,t,i,r,s),this.container.events.fire("git:cache:reset",{repoPath:e,caches:["stashes"]})}async stashSave(e,t,i,r){if(null==i)return await this.git.stash__push(e,t,r),void this.container.events.fire("git:cache:reset",{repoPath:e,caches:["stashes","status"]});await this.ensureGitVersion("2.13.2","Stashing individual files"," Please retry by stashing everything or install a more recent version of Git and try again.");const s=i.map((t=>`./${(0,k.uo)(t,e)[0]}`)),o="2.30.0",n=await this.git.isAtLeastVersion(o);!n&&(0,A.IP)(s)>3e4&&await this.ensureGitVersion(o,`Stashing so many files (${s.length}) at once`," Please retry by stashing fewer files or install a more recent version of Git and try again."),await this.git.stash__push(e,t,{...r,pathspecs:s,stdin:n}),this.container.events.fire("git:cache:reset",{repoPath:e,caches:["stashes"]})}async createWorktree(e,t,i){const r=(0,De.UH)();try{await this.git.worktree__add(e,t,i),i?.createBranch&&this.container.events.fire("git:cache:reset",{repoPath:e,caches:["branches"]})}catch(e){Pe.Yd.error(e,r);const t=String(e);if(et.alreadyCheckedOut.test(t))throw new p.P6(p.hK.AlreadyCheckedOut,e);if(et.alreadyExists.test(t))throw new p.P6(p.hK.AlreadyExists,e);throw new p.P6(void 0,e)}}async getWorktrees(e){await this.ensureGitVersion("2.7.6","Displaying worktrees"," Please install a more recent version of Git and try again.");const t=await this.git.worktree__list(e);return GitWorktreeParser.parse(t,e)}async getWorktreesDefaultUri(e){let t=s.D.get("worktrees.defaultLocation");if(null==t)return;t.startsWith("~")&&(t=(0,k.RQ)((0,st.homedir)(),t.slice(1)));const i=this.container.git.getRepository(e)?.folder;return t=(0,P.sX)(t,{userHome:(0,st.homedir)(),workspaceFolder:i?.uri.fsPath,workspaceFolderBasename:i?.name}),this.getAbsoluteUri(t,e)}async deleteWorktree(e,t,i){const r=(0,De.UH)();await this.ensureGitVersion("2.17.0","Deleting worktrees"," Please install a more recent version of Git and try again.");try{await this.git.worktree__remove(e,t,i)}catch(e){Pe.Yd.error(e,r);const t=String(e);if(et.mainWorkingTree.test(t))throw new p.Nk(p.xe.MainWorkingTree,e);if(et.uncommittedChanges.test(t))throw new p.Nk(p.xe.HasChanges,e);throw new p.Nk(void 0,e)}}_scmGitApi;async getScmGitApi(){return this._scmGitApi??(this._scmGitApi=this.getScmGitApiCore())}async getScmGitApiCore(){try{const e=r.extensions.getExtension("vscode.git");if(null==e)return;const t=e.isActive?e.exports:await e.activate();return t?.getAPI(1)}catch{return}}getScmGitUri(e,t){const i=this.fromCanonicalMap.get(t),s=this.getAbsoluteUri(e,i??t);return r.Uri.from({scheme:u.sN.Git,path:s.path,query:JSON.stringify({path:s.fsPath,ref:"~"})})}async getOpenScmRepositories(){const e=(0,De.UH)();try{const e=await this.getScmGitApi();return e?.repositories??[]}catch(t){return Pe.Yd.error(t,e),[]}}async getScmRepository(e){const t=(0,De.UH)();try{const t=await this.getScmGitApi();return t?.getRepository(r.Uri.file(e))??void 0}catch(e){return void Pe.Yd.error(e,t)}}async getOrOpenScmRepository(e){const t=(0,De.UH)();try{const t=await this.getScmGitApi();return null!=t?.openRepository?await(t?.openRepository?.(r.Uri.file(e)))??void 0:t?.getRepository(r.Uri.file(e))??void 0}catch(e){return void Pe.Yd.error(e,t)}}async openScmRepository(e){const t=(0,De.UH)();try{const t=await this.getScmGitApi();return await(t?.openRepository?.(e))??void 0}catch(e){return void Pe.Yd.error(e,t)}}async ensureGitVersion(e,t,i){if(!await this.git.isAtLeastVersion(e))throw new Error(`${t} requires a newer version of Git (>= ${e}) than is currently installed (${await this.git.version()}).${i}`)}}async function li(e){const t=s.D.getAny("files.encoding",e);if(null==t||"utf8"===t)return"utf8";return(0,(await i.e(429).then(i.t.bind(i,4914,23))).encodingExists)(t)?t:"utf8"}async function hi(e){const t=await Promise.allSettled(e);for(const e of t)for(const t of(0,Vt.Sb)(e)??[])t.hasRichIntegration()&&t.provider?.dispose()}Xt([(0,g.cM)()],LocalGitProvider.prototype,"findGit",1),Xt([(0,g.fF)({exit:!0})],LocalGitProvider.prototype,"discoverRepositories",1),Xt([(0,g.fF)({exit:!0})],LocalGitProvider.prototype,"openRepository",1),Xt([(0,g.fF)()],LocalGitProvider.prototype,"openRepositoryInitWatcher",1),Xt([(0,g.fF)({exit:e=>`returned ${e[0]}`})],LocalGitProvider.prototype,"visibility",1),Xt([(0,g.fF)({args:{0:e=>e.url},exit:e=>`returned ${e[0]}`})],LocalGitProvider.prototype,"getRemoteVisibility",1),Xt([(0,g.cM)({args:!1,singleLine:!0,prefix:(e,t)=>`${e.prefix}(${(t instanceof r.Uri?t:t.uri).fsPath})`,exit:e=>`returned ${e.length} repositories ${0!==e.length?Pe.Yd.toLoggable(e):""}`})],LocalGitProvider.prototype,"repositorySearch",1),Xt([(0,g.fF)({args:{2:!1,3:!1},exit:!0})],LocalGitProvider.prototype,"repositorySearchCore",1),Xt([(0,g.cM)({exit:!0})],LocalGitProvider.prototype,"getBestRevisionUri",1),Xt([(0,g.cM)({exit:!0})],LocalGitProvider.prototype,"getWorkingUri",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"addRemote",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"pruneRemote",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"removeRemote",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"applyChangesToWorkingFile",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"checkout",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"clone",1),Xt([(0,g.cM)({singleLine:!0})],LocalGitProvider.prototype,"resetCache",1),Xt([(0,g.cM)({singleLine:!0})],LocalGitProvider.prototype,"resetCaches",1),Xt([(0,g.cM)({args:{1:e=>e.length}})],LocalGitProvider.prototype,"excludeIgnoredUris",1),Xt([(0,Gt.H)(),(0,g.cM)()],LocalGitProvider.prototype,"fetch",1),Xt([(0,Gt.H)(),(0,g.cM)()],LocalGitProvider.prototype,"push",1),Xt([(0,Gt.H)(),(0,g.cM)()],LocalGitProvider.prototype,"pull",1),Xt([(0,Gt.H)(),(0,g.fF)()],LocalGitProvider.prototype,"findRepositoryUri",1),Xt([(0,g.cM)({args:{1:e=>e.join(",")}})],LocalGitProvider.prototype,"getAheadBehindCommitCount",1),Xt([(0,Gt.H)(((e,t)=>`${e.toString()}|${t?.isDirty}`)),(0,g.cM)({args:{1:e=>e?.isDirty}})],LocalGitProvider.prototype,"getBlame",1),Xt([(0,g.cM)({args:{1:"<contents>"}})],LocalGitProvider.prototype,"getBlameContents",1),Xt([(0,Gt.H)(((e,t,i,r)=>`${e.toString()}|${t}|${i?.isDirty}|${r?.forceSingleLine}`)),(0,g.cM)({args:{2:e=>e?.isDirty}})],LocalGitProvider.prototype,"getBlameForLine",1),Xt([(0,g.cM)({args:{2:"<contents>"}})],LocalGitProvider.prototype,"getBlameForLineContents",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getBlameForRange",1),Xt([(0,g.cM)({args:{2:"<contents>"}})],LocalGitProvider.prototype,"getBlameForRangeContents",1),Xt([(0,g.cM)({args:{0:"<blame>"}})],LocalGitProvider.prototype,"getBlameRange",1),Xt([(0,Gt.H)(),(0,g.cM)()],LocalGitProvider.prototype,"getBranch",1),Xt([(0,g.cM)({args:{1:!1}})],LocalGitProvider.prototype,"getBranches",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getChangedFilesCount",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getCommit",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getCommitBranches",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getCommitCount",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getCommitForFile",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getCommitsForGraph",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getCommitTags",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getContributors",1),Xt([(0,Gt.H)(),(0,g.cM)()],LocalGitProvider.prototype,"getCurrentUser",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getDefaultBranchName",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getDiff",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getDiffForFile",1),Xt([(0,g.cM)({args:{1:"<contents>"}})],LocalGitProvider.prototype,"getDiffForFileContents",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getDiffForLine",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getDiffStatus",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getFileStatusForCommit",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getFirstCommitSha",1),Xt([(0,Gt.H)(),(0,g.fF)()],LocalGitProvider.prototype,"getGitDir",1),Xt([(0,g.fF)()],LocalGitProvider.prototype,"getLastFetchedTimestamp",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getLog",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getLogRefsOnly",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getLogForFile",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getMergeBase",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getMergeStatus",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getRebaseStatus",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getNextComparisonUris",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getNextUri",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getOldestUnpushedRefForFile",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getPreviousComparisonUris",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getPreviousComparisonUrisForLine",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getPreviousUri",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getIncomingActivity",1),Xt([(0,g.cM)({args:{1:!1}})],LocalGitProvider.prototype,"getRemotes",1),Xt([(0,Gt.H)(),(0,g.cM)()],LocalGitProvider.prototype,"getRevisionContent",1),Xt([(0,Gt.H)(),(0,g.cM)()],LocalGitProvider.prototype,"getStash",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getStatusForFile",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getStatusForFiles",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getStatusForRepo",1),Xt([(0,g.cM)({args:{1:!1}})],LocalGitProvider.prototype,"getTags",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getTreeEntryForRevision",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getTreeForRevision",1),Xt([(0,g.cM)({args:{1:!1}})],LocalGitProvider.prototype,"hasBranchOrTag",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"hasCommitBeenPushed",1),Xt([(0,g.cM)({exit:e=>`returned ${Boolean(e)}`})],LocalGitProvider.prototype,"isTrackedPrivate",1),Xt([(0,g.fF)()],LocalGitProvider.prototype,"isTrackedCore",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getDiffTool",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"openDiffTool",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"openDirectoryCompare",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"resolveReference",1),Xt([(0,g.cM)({args:{1:e=>`[${e.matchAll?"A":""}${e.matchCase?"C":""}${e.matchRegex?"R":""}]: ${e.query.length>500?`${e.query.substring(0,500)}...`:e.query}`}})],LocalGitProvider.prototype,"richSearchCommits",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"searchCommits",1),Xt([(0,g.cM)({args:{2:!1}})],LocalGitProvider.prototype,"runGitCommandViaTerminal",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"validateBranchOrTagName",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"validateReference",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"stageFile",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"stageDirectory",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"unstageFile",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"unstageDirectory",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"stashApply",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"stashDelete",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"stashRename",1),Xt([(0,g.cM)({args:{2:e=>e?.length}})],LocalGitProvider.prototype,"stashSave",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"createWorktree",1),Xt([(0,Gt.H)(),(0,g.cM)()],LocalGitProvider.prototype,"getWorktrees",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getWorktreesDefaultUri",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"deleteWorktree",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getScmGitApiCore",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getOpenScmRepositories",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getScmRepository",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"getOrOpenScmRepository",1),Xt([(0,g.cM)()],LocalGitProvider.prototype,"openScmRepository",1);class VslsGit extends Git{constructor(e){super(),this.localGit=e}async git(e,...t){if(e.local)return e.cwd="",this.localGit.git(e,...t);const i=await Ma.instance.vsls.guest();if(null==i)throw new Error("No guest");return i.git(e,...t)}async gitSpawn(e,...t){throw new Error("Git spawn not supported in Live Share")}async logStreamTo(e,t,i,r,...s){const o=await Ma.instance.vsls.guest();if(null==o)throw new Error("No guest");return o.gitLogStreamTo(e,t,i,r,...s)}}class VslsGitProvider extends LocalGitProvider{descriptor={id:"vsls",name:"Live Share",virtual:!1};supportedSchemes=new Set([u.sN.Vsls,u.sN.VslsScc]);async discoverRepositories(e){if(!this.supportedSchemes.has(e.scheme))return[];const t=(0,De.UH)();try{const t=await this.container.vsls.guest(),i=await(t?.getRepositoriesForUri(e));return null==i||0===i.length?[]:i.flatMap((e=>this.openRepository(void 0,r.Uri.parse(e.folderUri,!0),e.root,void 0,e.closed)))}catch(e){return Pe.Yd.error(e,t),[]}}canHandlePathOrUri(e,t){const i=super.canHandlePathOrUri(e,t);return null!=i?`${e}:${i}`:void 0}getAbsoluteUri(e,t){e=(0,k.IC)(e);const i=("string"!=typeof t?t.scheme:void 0)??("string"!=typeof e?e.scheme:void 0)??u.sN.Vsls;return super.getAbsoluteUri(e,t).with({scheme:i})}async findRepositoryUri(e,t){const i=(0,De.UH)();let s;try{if(null==t){t=((await r.workspace.fs.stat(e)).type&r.FileType.Directory)===r.FileType.Directory}let i;if(t||(e=r.Uri.joinPath(e,"..")),[i,s]=await this.git.rev_parse__show_toplevel(e.fsPath),i?this.unsafePaths.delete(e.fsPath):this.unsafePaths.add(e.fsPath),!s)return;return s?r.Uri.parse(s,!0):void 0}catch(e){return void Pe.Yd.error(e,i)}}getLastFetchedTimestamp(e){return Promise.resolve(void 0)}}const ui=".gk";async function di(){const e=mi();let t;for(;;){try{t=await r.workspace.fs.stat(e)}catch{break}if((new Date).getTime()-t.ctime>3e4)break;await(0,Vt.Dc)(100)}try{await r.workspace.fs.writeFile(e,new Uint8Array(0))}catch(e){return Pe.Yd.error(e,"acquireSharedFolderWriteLock"),!1}return!0}async function pi(){try{const e=mi();await r.workspace.fs.delete(e)}catch(e){return Pe.Yd.error(e,"releaseSharedFolderWriteLock"),!1}return!0}function mi(){return r.Uri.file(c().join(ot().homedir(),ui,"lockfile"))}function gi(){return r.Uri.file(c().join(ot().homedir(),ui,"repoMapping.json"))}function fi(){return r.Uri.file(c().join(ot().homedir(),ui,"cloudWorkspaces.json"))}class RepositoryLocalPathMappingProvider{constructor(e){this.container=e}dispose(){}_localRepoDataMap=void 0;async ensureLocalRepoDataMap(){null==this._localRepoDataMap&&await this.loadLocalRepoDataMap()}async getLocalRepoDataMap(){return await this.ensureLocalRepoDataMap(),this._localRepoDataMap??{}}async getLocalRepoPaths(e){const t=[];if(null!=e.remoteUrl){const i=await this._getLocalRepoPaths(e.remoteUrl);null!=i&&t.push(...i)}if(null!=e.repoInfo){const{provider:i,owner:r,repoName:s}=e.repoInfo;if(null!=i&&null!=r&&null!=s){const e=await this._getLocalRepoPaths(`${i}/${r}/${s}`);null!=e&&t.push(...e)}}return t}async _getLocalRepoPaths(e){const t=await this.getLocalRepoDataMap();return t[e]?.paths}async loadLocalRepoDataMap(){const e=gi();try{const t=await r.workspace.fs.readFile(e);this._localRepoDataMap=JSON.parse(t.toString())??{}}catch(e){Pe.Yd.error(e,"loadLocalRepoDataMap")}}async writeLocalRepoPath(e,t){if(null!=e.remoteUrl&&await this._writeLocalRepoPath(e.remoteUrl,t),null!=e.repoInfo?.provider&&null!=e.repoInfo?.owner&&null!=e.repoInfo?.repoName){const{provider:i,owner:r,repoName:s}=e.repoInfo,o=`${i}/${r}/${s}`;await this._writeLocalRepoPath(o,t)}}async _writeLocalRepoPath(e,t){if(!await di())return;await this.loadLocalRepoDataMap(),null==this._localRepoDataMap&&(this._localRepoDataMap={}),null==this._localRepoDataMap[e]?this._localRepoDataMap[e]={paths:[t]}:null==this._localRepoDataMap[e].paths?this._localRepoDataMap[e].paths=[t]:this._localRepoDataMap[e].paths.includes(t)||this._localRepoDataMap[e].paths.push(t);const i=gi(),s=new Uint8Array(Buffer.from(JSON.stringify(this._localRepoDataMap)));try{await r.workspace.fs.writeFile(i,s)}catch(e){Pe.Yd.error(e,"writeLocalRepoPath")}await pi()}}class WorkspacesLocalPathMappingProvider{_cloudWorkspacePathMap=void 0;async ensureCloudWorkspacePathMap(){null==this._cloudWorkspacePathMap&&await this.loadCloudWorkspacePathMap()}async getCloudWorkspacePathMap(){return await this.ensureCloudWorkspacePathMap(),this._cloudWorkspacePathMap??{}}async loadCloudWorkspacePathMap(){const e=fi();try{const t=await r.workspace.fs.readFile(e);this._cloudWorkspacePathMap=JSON.parse(t.toString())?.workspaces??{}}catch(e){Pe.Yd.error(e,"loadCloudWorkspacePathMap")}}async getCloudWorkspaceRepoPath(e,t){const i=await this.getCloudWorkspacePathMap();return i[e]?.repoPaths?.[t]}async getCloudWorkspaceCodeWorkspacePath(e){const t=await this.getCloudWorkspacePathMap();return t[e]?.externalLinks?.[".code-workspace"]}async removeCloudWorkspaceCodeWorkspaceFilePath(e){if(!await di())return;if(await this.loadCloudWorkspacePathMap(),null==this._cloudWorkspacePathMap?.[e]?.externalLinks?.[".code-workspace"])return;delete this._cloudWorkspacePathMap[e].externalLinks[".code-workspace"];const t=fi(),i=new Uint8Array(Buffer.from(JSON.stringify({workspaces:this._cloudWorkspacePathMap})));try{await r.workspace.fs.writeFile(t,i)}catch(e){Pe.Yd.error(e,"writeCloudWorkspaceCodeWorkspaceFilePathToMap")}await pi()}async confirmCloudWorkspaceCodeWorkspaceFilePath(e){const t=await this.getCloudWorkspacePathMap(),i=t[e]?.externalLinks?.[".code-workspace"];if(null==i)return!1;try{return await r.workspace.fs.stat(r.Uri.file(i)),!0}catch{return!1}}async writeCloudWorkspaceRepoDiskPathToMap(e,t,i){if(!await di())return;await this.loadCloudWorkspacePathMap(),null==this._cloudWorkspacePathMap&&(this._cloudWorkspacePathMap={}),null==this._cloudWorkspacePathMap[e]&&(this._cloudWorkspacePathMap[e]={repoPaths:{},externalLinks:{}}),null==this._cloudWorkspacePathMap[e].repoPaths&&(this._cloudWorkspacePathMap[e].repoPaths={}),this._cloudWorkspacePathMap[e].repoPaths[t]=i;const s=fi(),o=new Uint8Array(Buffer.from(JSON.stringify({workspaces:this._cloudWorkspacePathMap})));try{await r.workspace.fs.writeFile(s,o)}catch(e){Pe.Yd.error(e,"writeCloudWorkspaceRepoDiskPathToMap")}await pi()}async writeCloudWorkspaceCodeWorkspaceFilePathToMap(e,t){if(!await di())return;await this.loadCloudWorkspacePathMap(),null==this._cloudWorkspacePathMap&&(this._cloudWorkspacePathMap={}),null==this._cloudWorkspacePathMap[e]&&(this._cloudWorkspacePathMap[e]={repoPaths:{},externalLinks:{}}),null==this._cloudWorkspacePathMap[e].externalLinks&&(this._cloudWorkspacePathMap[e].externalLinks={}),this._cloudWorkspacePathMap[e].externalLinks[".code-workspace"]=t;const i=fi(),s=new Uint8Array(Buffer.from(JSON.stringify({workspaces:this._cloudWorkspacePathMap})));try{await r.workspace.fs.writeFile(i,s)}catch(e){Pe.Yd.error(e,"writeCloudWorkspaceCodeWorkspaceFilePathToMap")}await pi()}async getLocalWorkspaceData(){let e,t;try{if(e=r.Uri.file(c().join(ot().homedir(),ui,"localWorkspaces.json")),t=await r.workspace.fs.readFile(e),t?.length)return JSON.parse(t.toString())}catch(i){try{if(e=r.Uri.file(c().join(ot().homedir(),("windows"===(0,ct.Xf)()?"/AppData/Roaming/":"")+".gitkraken","workspaces","workspaces.json")),t=await r.workspace.fs.readFile(e),t?.length)return JSON.parse(t.toString())}catch(e){Pe.Yd.error(e,"getLocalWorkspaceData")}}return{workspaces:{}}}async writeCodeWorkspaceFile(e,t,i){let s,o;try{o=await r.workspace.fs.readFile(e),s=JSON.parse(o.toString())}catch(e){s={folders:[],settings:{}}}s.folders=t.map((e=>({path:e}))),null!=i?.workspaceId&&(s.settings["gitkraken.workspaceId"]=i.workspaceId),null!=i?.workspaceAutoAddSetting&&(s.settings["gitkraken.workspaceAutoAddSetting"]=i.workspaceAutoAddSetting);const n=new Uint8Array(Buffer.from(JSON.stringify(s)));try{await r.workspace.fs.writeFile(e,n),null!=i?.workspaceId&&await this.writeCloudWorkspaceCodeWorkspaceFilePathToMap(i.workspaceId,e.fsPath)}catch(e){return Pe.Yd.error(e,"writeCodeWorkspaceFile"),!1}return!0}async updateCodeWorkspaceFileSettings(e,t){let i,s;try{s=await r.workspace.fs.readFile(e),i=JSON.parse(s.toString())}catch(e){return!1}null!=t.workspaceAutoAddSetting&&(i.settings["gitkraken.workspaceAutoAddSetting"]=t.workspaceAutoAddSetting);const o=new Uint8Array(Buffer.from(JSON.stringify(i)));try{await r.workspace.fs.writeFile(e,o)}catch(e){return Pe.Yd.error(e,"updateCodeWorkspaceFileSettings"),!1}return!0}}let wi;function vi(){return null==wi&&(wi=new Git),wi}class AnthropicProvider{constructor(e){this.container=e}id="anthropic";name="Anthropic";get model(){return s.D.get("ai.experimental.anthropic.model")||"claude-v1"}dispose(){}async generateCommitMessage(e,t){const i=await yi(this.container.storage);if(null==i)return;const o=this.model,n=bi(o),a=e.substring(0,n);e.length>n&&r.window.showWarningMessage(`The diff of the staged changes had to be truncated to ${n} characters to fit within the Anthropic's limits.`);let c=s.D.get("experimental.generateCommitMessagePrompt");c.endsWith(".")||(c+=".");let l="\n\nHuman: You are an AI programming assistant tasked with writing a meaningful commit message by summarizing code changes.\n- Follow the user's instructions carefully & to the letter!\n- Don't repeat yourself or make anything up!\n- Minimize any other prose.";l+=`\n${c}\n- Avoid phrases like "this commit", "this change", etc.`,l+="\n\nAssistant: OK",t?.context&&(l+=`\n\nHuman: Use "${t.context}" to help craft the commit message.\n\nAssistant: OK`),l+=`\n\nHuman: Write a meaningful commit message for the following code changes:\n\n${a}`,l+="\n\nAssistant:";const h={model:o,prompt:l,stream:!1,max_tokens_to_sample:5e3,stop_sequences:["\n\nHuman:"]},u=await this.fetch(i,h);if(!u.ok){let e;try{e=await u.json()}catch{}throw new Error(`Unable to generate commit message: (${this.name}:${u.status}) ${e?.error.message||u.statusText})`)}return(await u.json()).completion.trim()}async explainChanges(e,t){const i=await yi(this.container.storage);if(null==i)return;const s=this.model,o=bi(s),n=t.substring(0,o);t.length>o&&r.window.showWarningMessage(`The diff of the commit changes had to be truncated to ${o} characters to fit within the OpenAI's limits.`);let a="\n\nHuman: You are an AI programming assistant tasked with providing an easy to understand but detailed explanation of a commit by summarizing the code changes while also using the commit message as additional context and framing.\nDon't make anything up!";a+=`\nUse the following user-provided commit message, which should provide some explanation to why these changes where made, when attempting to generate the rich explanation:\n\n${e}`,a+="\n\nAssistant: OK",a+=`\n\nHuman: Explain the following code changes:\n\n${n}`,a+="\n\nAssistant:";const c={model:s,prompt:a,stream:!1,max_tokens_to_sample:5e3,stop_sequences:["\n\nHuman:"]},l=await this.fetch(i,c);if(!l.ok){let e;try{e=await l.json()}catch{}throw new Error(`Unable to explain commit: (${this.name}:${l.status}) ${e?.error.message||l.statusText})`)}return(await l.json()).completion.trim()}fetch(e,t){return(0,at.he)("https://api.anthropic.com/v1/complete",{headers:{Accept:"application/json",Authorization:`Bearer ${e}`,"Content-Type":"application/json","X-API-Key":e,"anthropic-version":"2023-06-01"},method:"POST",body:JSON.stringify(t)})}}async function yi(e){let t=await e.getSecret("gitlens.anthropic.key");if(!t){const i=r.window.createInputBox();i.ignoreFocusOut=!0;const s=[];try{const e={iconPath:new r.ThemeIcon("link-external"),tooltip:"Open the Anthropic API Key Page"};t=await new Promise((t=>{s.push(i.onDidHide((()=>t(void 0))),i.onDidChangeValue((e=>{!e||/(?:sk-)?[a-zA-Z0-9-_]{32,}/.test(e)?i.validationMessage=void 0:i.validationMessage="Please enter a valid Anthropic API key"})),i.onDidAccept((()=>{const e=i.value.trim();e&&/(?:sk-)?[a-zA-Z0-9-_]{32,}/.test(e)?t(e):i.validationMessage="Please enter a valid Anthropic API key"})),i.onDidTriggerButton((t=>{t===e&&r.env.openExternal(r.Uri.parse("https://console.anthropic.com/account/keys"))}))),i.password=!0,i.title="Connect to Anthropic",i.placeholder="Please enter your Anthropic API key to use this feature",i.prompt=(0,Re.gn)("input-prompt-links")?'Enter your [Anthropic API Key](https://console.anthropic.com/account/keys "Get your Anthropic API key")':"Enter your Anthropic API Key",i.buttons=[e],i.show()}))}finally{i.dispose(),s.forEach((e=>{e.dispose()}))}if(!t)return;e.storeSecret("gitlens.anthropic.key",t)}return t}function bi(e){return"claude-2"===e||"claude-v1-100k"===e||"claude-instant-v1-100k"===e?135e3:12e3}class OpenAIProvider{constructor(e){this.container=e}id="openai";name="OpenAI";get model(){return s.D.get("ai.experimental.openai.model")||"gpt-3.5-turbo"}dispose(){}get url(){return s.D.get("ai.experimental.openai.url")??"https://api.openai.com/v1/chat/completions"}async generateCommitMessage(e,t){const i=await Ci(this.container.storage);if(null==i)return;const o=this.model,n=Ai(o),a=e.substring(0,n);e.length>n&&r.window.showWarningMessage(`The diff of the staged changes had to be truncated to ${n} characters to fit within the OpenAI's limits.`);let c=s.D.get("experimental.generateCommitMessagePrompt");c.endsWith(".")||(c+=".");const l={model:o,messages:[{role:"system",content:"You are an AI programming assistant tasked with writing a meaningful commit message by summarizing code changes.\n\n- Follow the user's instructions carefully & to the letter!\n- Don't repeat yourself or make anything up!\n- Minimize any other prose."},{role:"user",content:`${c}\n- Avoid phrases like "this commit", "this change", etc.`}]};t?.context&&l.messages.push({role:"user",content:`Use "${t.context}" to help craft the commit message.`}),l.messages.push({role:"user",content:`Write a meaningful commit message for the following code changes:\n\n${a}`});const h=await this.fetch(i,l);if(!h.ok){if(429===h.status)throw new Error(`Unable to generate commit message: (${this.name}:${h.status}) Too many requests (rate limit exceeded) or your API key is associated with an expired trial`);throw new Error(`Unable to generate commit message: (${this.name}:${h.status}) ${h.statusText}`)}return(await h.json()).choices[0].message.content.trim()}async explainChanges(e,t){const i=await Ci(this.container.storage);if(null==i)return;const s=this.model,o=Ai(s),n=t.substring(0,o);t.length>o&&r.window.showWarningMessage(`The diff of the commit changes had to be truncated to ${o} characters to fit within the OpenAI's limits.`);const a={model:s,messages:[{role:"system",content:"You are an AI programming assistant tasked with providing an easy to understand but detailed explanation of a commit by summarizing the code changes while also using the commit message as additional context and framing.\n\n- Don't make anything up!"},{role:"user",content:`Use the following user-provided commit message, which should provide some explanation to why these changes where made, when attempting to generate the rich explanation:\n\n${e}`},{role:"assistant",content:"OK"},{role:"user",content:`Explain the following code changes:\n\n${n}`}]},c=await this.fetch(i,a);if(!c.ok){if(404===c.status)throw new Error(`Unable to explain commit: Your API key doesn't seem to have access to the selected '${s}' model`);if(429===c.status)throw new Error(`Unable to explain commit: (${this.name}:${c.status}) Too many requests (rate limit exceeded) or your API key is associated with an expired trial`);throw new Error(`Unable to explain commit: (${this.name}:${c.status}) ${c.statusText}`)}return(await c.json()).choices[0].message.content.trim()}fetch(e,t){const i=this.url,r=i.includes(".azure.com");return(0,at.he)(i,{headers:{Accept:"application/json","Content-Type":"application/json",...r?{"api-key":e}:{Authorization:`Bearer ${e}`}},method:"POST",body:JSON.stringify(t)})}}async function Ci(e){let t=await e.getSecret("gitlens.openai.key");if(!t){const i=r.window.createInputBox();i.ignoreFocusOut=!0;const s=[];try{const e={iconPath:new r.ThemeIcon("link-external"),tooltip:"Open the OpenAI API Key Page"};t=await new Promise((t=>{s.push(i.onDidHide((()=>t(void 0))),i.onDidChangeValue((e=>{!e||/(?:sk-)?[a-zA-Z0-9]{32,}/.test(e)?i.validationMessage=void 0:i.validationMessage="Please enter a valid OpenAI API key"})),i.onDidAccept((()=>{const e=i.value.trim();e&&/(?:sk-)?[a-zA-Z0-9]{32,}/.test(e)?t(e):i.validationMessage="Please enter a valid OpenAI API key"})),i.onDidTriggerButton((t=>{t===e&&r.env.openExternal(r.Uri.parse("https://platform.openai.com/account/api-keys"))}))),i.password=!0,i.title="Connect to OpenAI",i.placeholder="Please enter your OpenAI API key to use this feature",i.prompt=(0,Re.gn)("input-prompt-links")?'Enter your [OpenAI API Key](https://platform.openai.com/account/api-keys "Get your OpenAI API key")':"Enter your OpenAI API Key",i.buttons=[e],i.show()}))}finally{i.dispose(),s.forEach((e=>{e.dispose()}))}if(!t)return;e.storeSecret("gitlens.openai.key",t)}return t}function Ai(e){switch(e){case"gpt-4-32k":case"gpt-4-32k-0613":return 43e3;case"gpt-3.5-turbo-16k":return 21e3;default:return 12e3}}class AIProviderService{constructor(e){this.container=e}_provider;get provider(){const e=s.D.get("ai.experimental.provider");return e===this._provider?.id||(this._provider?.dispose(),this._provider="anthropic"===e?new AnthropicProvider(this.container):new OpenAIProvider(this.container)),this._provider}dispose(){this._provider?.dispose()}get providerId(){return this.provider?.id}async generateCommitMessage(e,t){const i=(0,ft.uC)(e)?e:this.container.git.getRepository(e);if(null==i)throw new Error("Unable to find repository");const s=await this.container.git.getDiff(i.uri,D.pw);if(null==s)throw new Error("No staged changes to generate a commit message from.");const o=this.provider;if(await ki(o,this.container.storage))return null!=t?.progress?r.window.withProgress(t.progress,(async()=>o.generateCommitMessage(s.contents,{context:t?.context}))):o.generateCommitMessage(s.contents,{context:t?.context})}async explainCommit(e,t,i){let s;if("string"==typeof e||e instanceof r.Uri){if("string"!=typeof t||!t)throw new Error("Invalid arguments provided");s=await this.container.git.getCommit(e,t)}else{if("string"==typeof t)throw new Error("Invalid arguments provided");s=(0,S.f_)(e)?e:await this.container.git.getCommit(e.repoPath,e.ref),i=t}if(null==s)throw new Error("Unable to find commit");const o=await this.container.git.getDiff(s.repoPath,s.sha);if(null==o)throw new Error("No changes found to explain.");const n=this.provider;if(await ki(n,this.container.storage))return s.hasFullDetails()||(await s.ensureFullDetails(),(0,S.yp)(s)),null!=i?.progress?r.window.withProgress(i.progress,(async()=>n.explainChanges(s.message,o.contents))):n.explainChanges(s.message,o.contents)}reset(){const{providerId:e}=this;null!=e&&(this.container.storage.deleteSecret(`gitlens.${e}.key`),this.container.storage.delete(`confirm:ai:tos:${e}`),this.container.storage.deleteWorkspace(`confirm:ai:tos:${e}`))}}async function ki(e,t){if(t.get(`confirm:ai:tos:${e.id}`,!1)||t.getWorkspace(`confirm:ai:tos:${e.id}`,!1))return!0;const i={title:"Yes"},s={title:"Always for this Workspace"},o={title:"Always"},n=await r.window.showInformationMessage(`This GitLens experimental feature requires sending a diff of the code changes to ${e.name}. This may contain sensitive information.\n\nDo you want to continue?`,{modal:!0},i,s,o,{title:"No",isCloseAffordance:!0});return n===i||(n===s?(t.storeWorkspace(`confirm:ai:tos:${e.id}`,!0),!0):n===o&&(t.store(`confirm:ai:tos:${e.id}`,!0),!0))}var Pi=i(3139),Si=i(623),Di=i(9338),Ri=i(1062),$i=i(2185),_i=i(248),Fi=Object.defineProperty,Ti=Object.getOwnPropertyDescriptor,xi=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Ti(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Fi(t,i,o),o};const Ii=r.window.createTextEditorDecorationType({after:{margin:"0 0 0 3em",textDecoration:"none"},rangeBehavior:r.DecorationRangeBehavior.ClosedOpen}),Oi=2**30;class LineAnnotationController{constructor(e){this.container=e,this._disposable=r.Disposable.from((0,$i.IH)(e.onReady)(this.onReady,this),s.D.onDidChange(this.onConfigurationChanged,this),e.fileAnnotations.onDidToggleAnnotations(this.onFileAnnotationsToggled,this),e.richRemoteProviders.onAfterDidChangeConnectionState((0,Ht.Ds)((()=>{this.refresh(r.window.activeTextEditor)}),250)))}_cancellation;_disposable;_editor;_enabled=!1;dispose(){this.clearAnnotations(this._editor),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){s.D.changed(e,"currentLine")&&(s.D.changed(e,"currentLine.enabled")&&(s.D.get("currentLine.enabled")?(this._enabled=!0,this.resume()):(this._enabled=!1,this.setLineTracker(!1))),this.refresh(r.window.activeTextEditor))}_suspended=!1;get suspended(){return!this._enabled||this._suspended}resume(){return this.setLineTracker(!0),!!this._suspended&&(this._suspended=!1,!0)}suspend(){return this.setLineTracker(!1),!this._suspended&&(this._suspended=!0,!0)}onActiveLinesChanged(e){e.pending||void 0===e.selections?this.clear(e.editor):this.refresh(e.editor)}onFileAnnotationsToggled(){this.refresh(r.window.activeTextEditor)}clear(e){this._cancellation?.cancel(),this._editor!==e&&null!=this._editor&&this.clearAnnotations(this._editor),this.clearAnnotations(e)}async toggle(e){this._enabled=!(this._enabled&&!this.suspended),this._enabled?this.resume()&&await this.refresh(e):this.suspend()&&await this.refresh(e)}clearAnnotations(e){void 0!==e&&!0!==e._disposed&&e.setDecorations(Ii,[])}getPullRequestsForLines(e,t){const i=new Map;if(0===t.size)return i;const r=this.container.git.getBestRemoteWithRichProvider(e);for(const[,e]of t){if(e.commit.isUncommitted)continue;let t=i.get(e.commit.ref);null==t&&(t=r.then((t=>e.commit.getAssociatedPullRequest(t))),i.set(e.commit.ref,t))}return i}async refresh(e){if(null==e&&null==this._editor)return;const t=(0,De.UH)(),i=this.container.lineTracker.selections;if(null==e||null==i||!(0,Re.PH)(e))return(0,De.lH)(t,` ${u.NE.Dot} Skipped because there is no valid editor or no valid selections`),void this.clear(this._editor);this._editor!==e&&(this.clear(this._editor),this._editor=e);const o=s.D.get("currentLine");if(this.suspended)return(0,De.lH)(t,` ${u.NE.Dot} Skipped because the controller is suspended`),void this.clear(e);const n=await this.container.tracker.getOrAdd(e.document);if(!n.isBlameable&&this.suspended)return null!=t&&(t.exitDetails=` ${u.NE.Dot} Skipped because the ${this.suspended?"controller is suspended":`document(${n.uri.toString(!0)}) is not blameable`}`),void this.clear(e);if(null==e.document||!this.container.lineTracker.includes(i))return void(null!=t&&(t.exitDetails=` ${u.NE.Dot} Skipped because the ${null==e.document?"editor is gone":`selection(s)=${i.map((e=>`[${e.anchor}-${e.active}]`)).join()} are no longer current`}`));null!=t&&(t.exitDetails=` ${u.NE.Dot} selection(s)=${i.map((e=>`[${e.anchor}-${e.active}]`)).join()}`);const a=new Map,c=new Map;for(const e of i){const i=this.container.lineTracker.getState(e.active);null!=i?.commit?(null!=i.commit.message||a.has(i.commit.ref)||a.set(i.commit.ref,i.commit.ensureFullDetails()),c.set(e.active,i)):Pe.Yd.debug(t,`Line ${e.active} returned no commit`)}const l=n.uri.repoPath;let h;if(e.document.uri.scheme===u.sN.Vsls||e.document.uri.scheme===u.sN.VslsScc){const e=s.D.get("hovers");h={autolinks:e.autolinks.enabled,dateFormat:s.D.get("defaultDateFormat"),format:e.detailsMarkdownFormat,pullRequests:e.pullRequests.enabled}}const d=null!=l&&o.pullRequests.enabled&&Di.i.has(o.format,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState");this._cancellation?.cancel(),this._cancellation=new r.CancellationTokenSource;const p=this._cancellation.token,m=Di.i.has(o.format,"tips")?this.container.git.getBranchesAndTagsTipsFn(l):void 0;async function g(e,t,i,a,l){const d=[];for(const[p,m]of c){const c=m.commit;if(null==c||c.isUncommitted&&""===o.uncommittedChangesFormat)continue;const g=a?.get(c.ref),f=(0,_i.sV)(c,c.isUncommitted?o.uncommittedChangesFormat??o.format:o.format,{dateFormat:null===o.dateFormat?s.D.get("defaultDateFormat"):o.dateFormat,getBranchAndTagTips:i,pullRequest:g?.value,pullRequestPendingMessage:`PR ${u.NE.Ellipsis}`},o.scrollable);f.range=t.document.validateRange(new r.Range(p,Oi,p,Oi)),null!=h&&(f.hoverMessage=await(0,Ri.nN)(e,c,n.uri,p,{...h,pullRequest:g?.value,timeout:l})),d.push(f)}t.setDecorations(Ii,d)}const f=d?await(0,Lt.T0)(this.getPullRequestsForLines(l,c),!0,p,100,(async i=>{if("timedout"!==i.reason||p.isCancellationRequested||e!==this._editor)return;Pe.Yd.debug(t,`${u.NE.Dot} pull request queries took too long (over 100 ms)`);const[r,s]=await Promise.allSettled([m,i.value]);if(p.isCancellationRequested||e!==this._editor)return;const o=(0,Vt.Sb)(s),n=(0,Vt.Sb)(r);Pe.Yd.debug(t,`${u.NE.Dot} pull request queries completed; updating...`),g(this.container,e,n,o)})):void 0,[w]=await Promise.allSettled([m,...a.values()]);p.isCancellationRequested||await g(this.container,e,(0,Vt.Sb)(w),f,100)}setLineTracker(e){e?this.container.lineTracker.subscribed(this)||this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this)):this.container.lineTracker.unsubscribe(this)}}xi([(0,g.cM)()],LineAnnotationController.prototype,"resume",1),xi([(0,g.cM)()],LineAnnotationController.prototype,"suspend",1),xi([(0,g.fF)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map((e=>`[${e.anchor}-${e.active}]`)).join(",")}, pending=${Boolean(e.pending)}, reason=${e.reason}`}})],LineAnnotationController.prototype,"onActiveLinesChanged",1),xi([(0,g.fF)({args:!1,singleLine:!0})],LineAnnotationController.prototype,"clear",1),xi([(0,g.cM)({args:!1})],LineAnnotationController.prototype,"toggle",1),xi([(0,g.fF)({args:!1})],LineAnnotationController.prototype,"refresh",1);var Bi=i(8294);class CacheProvider{_cache=new Map;constructor(e){}dispose(){this._cache.clear()}delete(e,t){this._cache.delete(`${e}:${t}`)}get(e,t,i,r){const s=this._cache.get(`${e}:${t}`);if(null==s||null!=s.expiresAt&&s.expiresAt>0&&s.expiresAt<Date.now()||null!=s.etag&&s.etag!==i){const{value:s,expiresAt:o}=r();return this.set(e,t,s,i,o)?.value}return s.value}getIssueOrPullRequest(e,t,i){const{key:r,etag:s}=Wi(t);return this.get("issuesOrPrsById",`id:${e}:${r}`,s,i)}getPullRequestForBranch(e,t,i){const{key:r,etag:s}=Wi(t);return this.get("prByBranch",`branch:${e}:${r}`,s,this.wrapPullRequestCacheable(i,r,s))}getPullRequestForSha(e,t,i){const{key:r,etag:s}=Wi(t);return this.get("prsBySha",`sha:${e}:${r}`,s,this.wrapPullRequestCacheable(i,r,s))}getRepositoryDefaultBranch(e,t){const{key:i,etag:r}=Wi(e);return this.get("defaultBranch",`repo:${i}`,r,t)}getRepositoryMetadata(e,t){const{key:i,etag:r}=Wi(e);return this.get("repoMetadata",`repo:${i}`,r,t)}set(e,t,i,r,s){let o;return(0,Vt.tI)(i)?(i.then((i=>{this.set(e,t,i,r,s)}),(()=>{this.delete(e,t)})),o={value:i,etag:r}):o={value:i,etag:r,expiresAt:s??Ei(e,i)},this._cache.set(`${e}:${t}`,o),o}wrapPullRequestCacheable(e,t,i){return()=>{const r=e();return(0,Vt.tI)(r.value)&&r.value.then((e=>{null!=e&&this.set("issuesOrPrsById",`id:${e.id}:${t}`,e,i)})),r}}}function Ei(e,t){const i=Date.now(),r=i+36e5;switch(e){case"defaultBranch":case"repoMetadata":return 0;case"issuesOrPrsById":{if(null==t)return 0;const e=t;if(!e.closed)return r;return i+60*(i-(e.closedDate??e.date).getTime()>12096e5?12:1)*60*1e3}case"prByBranch":case"prsBySha":{if(null==t)return"prByBranch"===e?r:0;const s=t;if("opened"===s.state)return r;return i+60*(i-(s.closedDate??s.mergedDate??s.date).getTime()>12096e5?12:1)*60*1e3}default:return null==t?0:r}}function Wi(e){return{key:e.remoteKey,etag:e.hasRichIntegration()?`${e.remoteKey}:${e.maybeConnected??!1}`:e.remoteKey}}var Ni=i(2061);class GitCodeLensController{constructor(e){this.container=e,this._disposable=r.Disposable.from((0,$i.IH)(e.onReady)(this.onReady,this),s.D.onDidChange(this.onConfigurationChanged,this))}_canToggle=!1;_disposable;_provider;_providerDisposable;dispose(){this._providerDisposable?.dispose(),this._disposable?.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){if(s.D.changed(e,["codeLens","defaultDateFormat","defaultDateSource","defaultDateStyle"])){null!=e&&Pe.Yd.log("CodeLens config changed; resetting CodeLens provider");const t=s.D.get("codeLens");t.enabled&&(t.recentChange.enabled||t.authors.enabled)?this.ensureProvider():(this._providerDisposable?.dispose(),this._provider=void 0),this._canToggle=t.recentChange.enabled||t.authors.enabled,(0,Ni.v)("gitlens:disabledToggleCodeLens",!this._canToggle)}}onBlameStateChanged(e){null!=this._provider&&e.blameable&&(Pe.Yd.log("Blame state changed; resetting CodeLens provider"),this._provider.reset("saved"))}onDirtyIdleTriggered(e){if(null==this._provider||!e.document.isBlameable)return;const t=s.D.get("advanced.blame.sizeThresholdAfterEdit");t>0&&e.document.lineCount>t||(Pe.Yd.log("Dirty idle triggered; resetting CodeLens provider"),this._provider.reset("idle"))}toggleCodeLens(){if(this._canToggle){if(Pe.Yd.log("toggleCodeLens()"),null!=this._provider)return this._providerDisposable?.dispose(),void(this._provider=void 0);this.ensureProvider()}}async ensureProvider(){if(null!=this._provider)return void this._provider.reset();this._providerDisposable?.dispose();const{GitCodeLensProvider:e}=await i.e(477).then(i.bind(i,5183));this._provider=new e(this.container),this._providerDisposable=r.Disposable.from(r.languages.registerCodeLensProvider(e.selector,this._provider),this.container.tracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.container.tracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this))}}var Mi=i(2540);const Ui=new Set(["commit:selected","file:selected"]),Li=new Map;class EventBus{_emitter=new r.EventEmitter;dispose(){this._emitter.dispose()}fire(e,t,i){(function(e){return Ui.has(e)})(e)&&Li.set(e,t),this._emitter.fire({name:e,data:t,source:i?.source})}fireAsync(e,t,i){queueMicrotask((()=>this.fire(e,t,i)))}getCachedEventArgs(e){return Li.get(e)}on(e,t,i,r){return this._emitter.event((function(r){e===r.name&&t.call(i,r)}),i,r)}}const Gi={done:!0,value:void 0};class StringIterator{_value="";_pos=0;reset(e){return this._value=e,this._pos=0,this}next(){return this._pos+=1,this}hasNext(){return this._pos<this._value.length-1}cmp(e){return e.charCodeAt(0)-this._value.charCodeAt(this._pos)}value(){return this._value[this._pos]}}class PathIterator{constructor(e=!0,t=!0){this._splitOnBackslash=e,this._caseSensitive=t}_value;_from;_to;reset(e){return this._value=e.replace(/\\$|\/$/,""),this._from=0,this._to=0,this.next()}hasNext(){return this._to<this._value.length}next(){this._from=this._to;let e=!0;for(;this._to<this._value.length;this._to++){const t=this._value.charCodeAt(this._to);if(t===u.mN.Slash||this._splitOnBackslash&&t===u.mN.Backslash){if(!e)break;this._from++}else e=!1}return this}cmp(e){return this._caseSensitive?(0,P.TT)(e,this._value,0,e.length,this._from,this._to):(0,P.j_)(e,this._value,0,e.length,this._from,this._to)}value(){return this._value.substring(this._from,this._to)}}class TernarySearchTreeNode{segment;value;key;left;mid;right;isEmpty(){return!(this.left||this.mid||this.right||this.value)}}class TernarySearchTree{static forPaths(){return new TernarySearchTree(new PathIterator)}static forStrings(){return new TernarySearchTree(new StringIterator)}_iter;_root;constructor(e){this._iter=e}clear(){this._root=void 0}set(e,t){const i=this._iter.reset(e);let r;for(this._root||(this._root=new TernarySearchTreeNode,this._root.segment=i.value()),r=this._root;;){const e=i.cmp(r.segment);if(e>0)r.left||(r.left=new TernarySearchTreeNode,r.left.segment=i.value()),r=r.left;else if(e<0)r.right||(r.right=new TernarySearchTreeNode,r.right.segment=i.value()),r=r.right;else{if(!i.hasNext())break;i.next(),r.mid||(r.mid=new TernarySearchTreeNode,r.mid.segment=i.value()),r=r.mid}}const s=r.value;return r.value=t,r.key=e,s}get(e){return this._getNode(e)?.value}_getNode(e){const t=this._iter.reset(e);let i=this._root;for(;i;){const e=t.cmp(i.segment);if(e>0)i=i.left;else if(e<0)i=i.right;else{if(!t.hasNext())break;t.next(),i=i.mid}}return i}has(e){const t=this._getNode(e);return!(void 0===t?.value&&void 0===t?.mid)}delete(e){this._delete(e,!1)}deleteSuperstr(e){this._delete(e,!0)}_delete(e,t){const i=this._iter.reset(e),r=[];let s=this._root;for(;s;){const e=i.cmp(s.segment);if(e>0)r.push([1,s]),s=s.left;else if(e<0)r.push([-1,s]),s=s.right;else{if(!i.hasNext()){for(t?(s.left=void 0,s.mid=void 0,s.right=void 0):s.value=void 0;r.length>0&&s.isEmpty();){const[e,t]=r.pop();switch(e){case 1:t.left=void 0;break;case 0:t.mid=void 0;break;case-1:t.right=void 0}s=t}break}i.next(),r.push([0,s]),s=s.mid}}}findSubstr(e){const t=this._iter.reset(e);let i,r=this._root;for(;r;){const e=t.cmp(r.segment);if(e>0)r=r.left;else if(e<0)r=r.right;else{if(!t.hasNext())break;t.next(),i=r.value||i,r=r.mid}}return r?.value||i}findSuperstr(e,t=!1){const i=this._iter.reset(e);let r=this._root;for(;r;){const e=i.cmp(r.segment);if(e>0)r=r.left;else if(e<0)r=r.right;else{if(!i.hasNext()){if(!r.mid)return;return r=r.mid,{[Symbol.iterator]:()=>this._nodeIterator(r,t)}}i.next(),r=r.mid}}}_nodeIterator(e,t=!1){let i,r,s;return{next:()=>(s||(s=[],r=0,this._forEach(e,(e=>s.push(e)),t)),r>=s.length?Gi:(i?i.value=s[r++]:i={done:!1,value:s[r++]},i))}}forEach(e){this._forEach(this._root,e)}_forEach(e,t,i=!1){void 0!==e&&(this._forEach(e.left,t,i),e.value&&t(e.value,e.key),i||this._forEach(e.mid,t,i),this._forEach(e.right,t,i))}any(){return void 0!==this._root&&!this._root.isEmpty()}count(e){return void 0===this._root||this._root.isEmpty()?0:(0,ke.QX)(this.entries(),void 0===e?void 0:([,t])=>e(t))}entries(){return this._iterator(this._root)}values(){return(0,ke.UI)(this.entries(),(([,e])=>e))}highlander(){if(void 0===this._root||this._root.isEmpty())return;const e=this.entries();let t,i,r=0;for(;t=e.next(),!t.done;)if(i=t.value,r++,r>1)return;return i}some(e){return void 0!==this._root&&!this._root.isEmpty()&&(0,ke.G)(this.entries(),(([,t])=>e(t)))}*[Symbol.iterator](){yield*this._iterator(this._root)}*_iterator(e){e&&(yield*this._iterator(e.left),e.value&&(yield[e.key,e.value]),yield*this._iterator(e.mid),yield*this._iterator(e.right))}}var Hi=Object.defineProperty,Vi=Object.getOwnPropertyDescriptor,Yi=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Vi(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Hi(t,i,o),o};const Qi=new Uint8Array(0);function qi(e){const t=(0,dt.uy)(e)?e:dt.YY.fromRevisionUri(e);return{path:t.relativePath,ref:t.sha,repoPath:t.repoPath}}class GitFileSystemProvider{constructor(e){this.container=e,this._disposable=r.Disposable.from(r.workspace.registerFileSystemProvider(u.sN.GitLens,this,{isCaseSensitive:ct.IJ,isReadonly:!0}))}_disposable;_searchTreeMap=new Map;dispose(){this._disposable.dispose()}_onDidChangeFile=new r.EventEmitter;get onDidChangeFile(){return this._onDidChangeFile.event}copy(e,t,i){throw r.FileSystemError.NoPermissions(e)}createDirectory(e){throw r.FileSystemError.NoPermissions(e)}delete(e,t){throw r.FileSystemError.NoPermissions(e)}async readDirectory(e){const{path:t,ref:i,repoPath:s}=qi(e),o=await this.getTree(t,i,s);if(void 0===o)throw r.FileSystemError.FileNotFound(e);return[...(0,ke.UI)(o,(e=>[null!=t&&0!==t.length?(0,k.AH)((0,k.Gf)(t,e.path)):e.path,ji(e.type)]))]}async readFile(e){const{path:t,ref:i,repoPath:r}=qi(e);if(i===D.Ii)return Qi;const s=await this.container.git.getRevisionContent(r,t,i);return null!=s?s:Qi}rename(e,t,i){throw r.FileSystemError.NoPermissions(e)}async stat(e){const{path:t,ref:i,repoPath:s}=qi(e);if(i===D.Ii)return{type:r.FileType.File,size:0,ctime:0,mtime:0};let o;const n=this._searchTreeMap.get(i);if(void 0!==n)o=(await n).get(`/~/${t}`);else{if(null==t||0===t.length){if(void 0===await this.getTree(t,i,s))throw r.FileSystemError.FileNotFound(e);return{type:r.FileType.Directory,size:0,ctime:0,mtime:0}}o=await this.container.git.getTreeEntryForRevision(s,t,i)}if(void 0===o)throw r.FileSystemError.FileNotFound(e);return{type:ji(o.type),size:o.size,ctime:0,mtime:0}}watch(){return{dispose:()=>{}}}writeFile(e){throw r.FileSystemError.NoPermissions(e)}async createSearchTree(e,t){const i=TernarySearchTree.forPaths(),r=await this.container.git.getTreeForRevision(t,e);i.set("~",{commitSha:"",path:"~",size:0,type:"tree"});for(const e of r)i.set(`~/${e.path}`,e);return i}getOrCreateSearchTree(e,t){let i=this._searchTreeMap.get(e);return void 0===i&&(i=this.createSearchTree(e,t),this._searchTreeMap.set(e,i)),i}async getTree(e,t,i){return(await this.getOrCreateSearchTree(t,i)).findSuperstr(`/~/${e}`,!0)}}function ji(e){switch(e){case"blob":return r.FileType.File;case"tree":return r.FileType.Directory;default:return r.FileType.Unknown}}Yi([(0,g.fF)()],GitFileSystemProvider.prototype,"readDirectory",1),Yi([(0,g.fF)()],GitFileSystemProvider.prototype,"readFile",1),Yi([(0,g.fF)()],GitFileSystemProvider.prototype,"stat",1);var zi=i(4575),Ki=i(2133),Ji=i(4968),Zi=i(9529),Xi=Object.defineProperty,er=Object.getOwnPropertyDescriptor,tr=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?er(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Xi(t,i,o),o};const ir=Object.freeze([]),rr=Object.freeze({dispose:()=>{}}),sr=new Map([["master",100],["main",15],["default",10],["develop",5],["development",1]]);class GitProviderService{constructor(e){this.container=e,this._disposable=r.Disposable.from(e.subscription.onDidChange(this.onSubscriptionChanged,this),r.window.onDidChangeWindowState(this.onWindowStateChanged,this),r.workspace.onDidChangeWorkspaceFolders(this.onWorkspaceFoldersChanged,this),s.D.onDidChange(this.onConfigurationChanged,this),e.richRemoteProviders.onAfterDidChangeConnectionState((e=>{"connected"===e.reason&&(0,lt.E3)("failed"),this.resetCaches("providers"),this.updateContext()})),r.workspace.isTrusted?rr:r.workspace.onDidGrantWorkspaceTrust((()=>{r.workspace.isTrusted&&r.workspace.workspaceFolders?.length&&this.discoverRepositories(r.workspace.workspaceFolders,{force:!0})})),...this.registerCommands()),this.container.BranchDateFormatting.reset(),this.container.CommitDateFormatting.reset(),this.container.CommitShaFormatting.reset(),this.container.PullRequestDateFormatting.reset(),this.updateContext()}_onDidChangeProviders=new r.EventEmitter;get onDidChangeProviders(){return this._onDidChangeProviders.event}fireProvidersChanged(e,t){this.container.telemetry.enabled&&(this.container.telemetry.setGlobalAttributes({"providers.count":this._providers.size,"providers.ids":(0,ke.v_)(this._providers.keys(),",")}),this.container.telemetry.sendEvent("providers/changed",{"providers.added":e?.length??0,"providers.removed":t?.length??0})),this._etag=Date.now(),this._onDidChangeProviders.fire({added:e??[],removed:t??[],etag:this._etag})}_onDidChangeRepositories=new r.EventEmitter;get onDidChangeRepositories(){return this._onDidChangeRepositories.event}fireRepositoriesChanged(e,t){if(this.container.telemetry.enabled){const i=this.openRepositories.map((e=>e.uri.scheme));this.container.telemetry.setGlobalAttributes({"repositories.count":i.length,"repositories.schemes":(0,A.h8)(i,",")}),this.container.telemetry.sendEvent("repositories/changed",{"repositories.added":e?.length??0,"repositories.removed":t?.length??0})}this._etag=Date.now(),this._accessCache.clear(),this._reposVisibilityCache=void 0,this._onDidChangeRepositories.fire({added:e??[],removed:t??[],etag:this._etag}),e?.length&&this.container.telemetry.enabled&&setTimeout((async()=>{for(const t of e){const e=new Set,i=await t.getRemotes();for(const t of i)e.add(t.provider?.id??"unknown");this.container.telemetry.sendEvent("repository/opened",{"repository.id":t.idHash,"repository.scheme":t.uri.scheme,"repository.closed":t.closed,"repository.folder.scheme":t.folder?.uri.scheme,"repository.provider.id":t.provider.id,"repository.remoteProviders":(0,ke.v_)(e,",")})}}),0)}_onDidChangeRepository=new r.EventEmitter;get onDidChangeRepository(){return this._onDidChangeRepository.event}supportedSchemes=new Set;_bestRemotesCache=new Map;_disposable;_pendingRepositories=new Map;_providers=new Map;_repositories=new Ki.x8;_visitedPaths=new Yt.u$;dispose(){this._disposable.dispose(),this._providers.clear(),this._repositories.forEach((e=>e.dispose())),this._repositories.clear()}_etag=0;get etag(){return this._etag}onConfigurationChanged(e){(s.D.changed(e,"defaultDateFormat")||s.D.changed(e,"defaultDateSource")||s.D.changed(e,"defaultDateStyle"))&&(this.container.BranchDateFormatting.reset(),this.container.CommitDateFormatting.reset(),this.container.PullRequestDateFormatting.reset()),s.D.changed(e,"advanced.abbreviatedShaLength")&&this.container.CommitShaFormatting.reset(),s.D.changed(e,"views.contributors.showAllBranches")&&this.resetCaches("contributors"),null!=e&&s.D.changed(e,"integrations.enabled")&&this.updateContext()}registerCommands(){return[(0,Zi.xR)("gitlens.plus.resetRepositoryAccess",(()=>this.clearAllRepoVisibilityCaches())),(0,Zi.xR)("gitlens.plus.refreshRepositoryAccess",(()=>this.clearAllOpenRepoVisibilityCaches()))]}onSubscriptionChanged(e){this._accessCache.clear(),this._subscription=e.current}onWindowStateChanged(e){e.focused?this._repositories.forEach((e=>e.resume())):this._repositories.forEach((e=>e.suspend()))}onWorkspaceFoldersChanged(e){if(this.container.telemetry.enabled){const e=r.workspace.workspaceFolders?.map((e=>e.uri.scheme));this.container.telemetry.setGlobalAttributes({"folders.count":e?.length??0,"folders.schemes":null!=e?(0,A.h8)(e,", "):""})}if(e.added.length&&this.discoverRepositories(e.added),e.removed.length){const t=[];for(const i of e.removed){const e=this._repositories.getClosest(i.uri);null!=e&&(this._repositories.remove(e.uri,!1),t.push(e))}t.length&&(this.updateContext(),queueMicrotask((()=>{this.fireRepositoriesChanged([],t),t.forEach((e=>e.dispose()))})))}}get hasProviders(){return 0!==this._providers.size}get registeredProviders(){return[...(0,ke.UI)(this._providers.values(),(e=>({...e.descriptor})))]}get openRepositories(){if(0===this.repositoryCount)return ir;const e=[...(0,ke.hX)(this.repositories,(e=>!e.closed))];return 0===e.length?e:ft._j.sort(e)}get openRepositoryCount(){return 0===this.repositoryCount?0:(0,ke.QX)(this.repositories,(e=>!e.closed))}get repositories(){return this._repositories.values()}get repositoryCount(){return this._repositories.count}get highlander(){return 1===this.repositoryCount?(0,ke.Ps)(this._repositories.values()):void 0}register(e,t){if(e!==t.descriptor.id)throw new Error(`Id '${e}' must match provider id '${t.descriptor.id}'`);if(this._providers.has(e))throw new Error(`Provider '${e}' has already been registered`);this._providers.set(e,t);for(const e of t.supportedSchemes)this.supportedSchemes.add(e);const i=[],s=t.openRepositoryInitWatcher?.();null!=s&&i.push(s,s.onDidCreate((e=>{const t=r.workspace.getWorkspaceFolder(e);null!=t&&this.discoverRepositories([t],{force:!0})})));const o=r.Disposable.from(t,...i,t.onDidChange((()=>{const{workspaceFolders:e}=r.workspace;e?.length&&this.discoverRepositories(e,{force:!0})})),t.onDidChangeRepository((async e=>{if(e.changed(ft.I6.Remotes,ft.I6.RemoteProviders,ft.du.Any)&&this._bestRemotesCache.clear(),e.changed(ft.I6.Closed,ft.du.Any)?(this.updateContext(),queueMicrotask((()=>this.fireRepositoriesChanged([],[e.repository])))):e.changed(ft.I6.Opened,ft.du.Any)&&(this.updateContext(),queueMicrotask((()=>this.fireRepositoriesChanged([e.repository],[])))),e.changed(ft.I6.Remotes,ft.du.Any)){const i=await t.getRemotes(e.repository.path),r=this.getVisibilityInfoFromCache(e.repository.path);null!=r&&this.checkVisibilityCachedRemotes(e.repository.path,r,i)}this._onDidChangeRepository.fire(e)})),t.onDidCloseRepository((e=>{const t=this._repositories.get(e.uri);null!=t&&(t.closed=!0)})),t.onDidOpenRepository((e=>{const t=this._repositories.get(e.uri);null!=t?t.closed=!1:this.getOrOpenRepository(e.uri)})));return this.fireProvidersChanged([t]),this._initializing||this.onWorkspaceFoldersChanged({added:r.workspace.workspaceFolders??[],removed:[]}),{dispose:()=>{o.dispose(),this._providers.delete(e);const i=[];for(const t of[...this._repositories.values()])t?.provider.id===e&&(this._repositories.remove(t.uri,!1),i.push(t));const{deactivating:r}=this.container;r||this.updateContext(),i.length&&queueMicrotask((()=>{r||this.fireRepositoriesChanged([],i),i.forEach((e=>e.dispose()))})),r||this.fireProvidersChanged([],[t])}}}_initializing=!0;async registrationComplete(){const e=(0,De.UH)();this._initializing=!1;let{workspaceFolders:t}=r.workspace;t?.length?(await this.discoverRepositories(t),0===this.repositoryCount&&ct.$L&&setTimeout((()=>{({workspaceFolders:t}=r.workspace),t?.length&&this.discoverRepositories(t,{force:!0})}),1e3)):this.updateContext();const i=s.D.getAny("git.autoRepositoryDetection");this.container.telemetry.enabled&&setTimeout((()=>this.container.telemetry.sendEvent("providers/registrationComplete",{"config.git.autoRepositoryDetection":i})),0),(0,De.lH)(e,` ${u.NE.Dot} workspaceFolders=${t?.length}, git.autoRepositoryDetection=${i}`)}getOpenProviders(){return[...this.getOpenRepositoriesByProvider().keys()].map((e=>this._providers.get(e)))}getOpenRepositories(e){return(0,ke.hX)(this.repositories,(t=>!t.closed&&(null==e||e===t.provider.id)))}getOpenRepositoriesByProvider(){const e=[...(0,ke.hX)(this.repositories,(e=>!e.closed))];return 0===e.length?new Map:(0,A.XI)(e,(e=>e.provider.id))}hasOpenRepositories(e){return(0,ke.G)(this.repositories,(t=>!t.closed&&(null==e||e===t.provider.id)))}_discoveredWorkspaceFolders=new Map;_isDiscoveringRepositories;get isDiscoveringRepositories(){return this._isDiscoveringRepositories}async discoverRepositories(e,t){null!=this._isDiscoveringRepositories&&(await this._isDiscoveringRepositories,this._isDiscoveringRepositories=void 0);const i=(0,Vt.PQ)();this._isDiscoveringRepositories=i.promise;try{const i=[];for(const r of e){if(!t?.force&&this._discoveredWorkspaceFolders.has(r))continue;const e=this.discoverRepositoriesCore(r);i.push(e),this._discoveredWorkspaceFolders.set(r,e)}if(0===i.length)return;const r=await Promise.allSettled(i),s=(0,ke.VS)((0,ke.hX)(r,(e=>"fulfilled"===e.status)),(e=>e.value)),o=[];for(const e of s)this._repositories.add(e),e.closed||o.push(e);this.updateContext(),o.length&&queueMicrotask((()=>this.fireRepositoriesChanged(o)))}finally{queueMicrotask((()=>i.fulfill(this._etag)))}}async discoverRepositoriesCore(e){const{provider:t}=this.getProvider(e.uri);try{return await t.discoverRepositories(e.uri)}catch(i){return this._discoveredWorkspaceFolders.delete(e),Pe.Yd.error(i,`${t.descriptor.name} Provider(${t.descriptor.id}) failed discovering repositories in ${e.uri.toString(!0)}`),[]}}async findRepositories(e,t){const{provider:i}=this.getProvider(e);return i.discoverRepositories(e,t)}_subscription;async getSubscription(){return this._subscription??(this._subscription=await this.container.subscription.getSubscription())}_accessCache=new Map;async access(e,t){if(null==t){let i=this._accessCache.get(void 0);return null==i&&(i=this.accessCore(e,t),this._accessCache.set(void 0,i)),i}const{path:i}=this.getProvider(t),r=i;let s=this._accessCache.get(r);return null==s&&(s=this.accessCore(e,t),this._accessCache.set(r,s)),s}async accessCore(e,t){const i=await this.getSubscription();this.container.telemetry.enabled&&queueMicrotask((()=>{this.visibility()}));const r=i.plan.effective.id;if((0,Ji.aG)(r))return{allowed:!1!==i.account?.verified,subscription:{current:i}};function s(e,t=!1){const{path:r}=this.getProvider(e);let s=t?void 0:this._accessCache.get(r);return null==s&&(s=this.visibility(e).then((e=>"private"===e?{allowed:!1,subscription:{current:i,required:Ji.Cx.Pro},visibility:e}:{allowed:!0,subscription:{current:i},visibility:e}),(()=>({allowed:!0,subscription:{current:i}}))),this._accessCache.set(r,s)),s}if(null==t){const e=this.openRepositories;if(0===e.length)return{allowed:!1,subscription:{current:i}};if(1===e.length)return s.call(this,e[0].path);switch(await this.visibility()){case"private":return{allowed:!1,subscription:{current:i,required:Ji.Cx.Pro},visibility:"private"};case"mixed":return{allowed:"mixed",subscription:{current:i,required:Ji.Cx.Pro}};default:return{allowed:!0,subscription:{current:i},visibility:"public"}}}return s.call(this,t,!0)}async ensureAccess(e,t){const{allowed:i,subscription:r}=await this.access(e,t);if(!1===i)throw new zi.$y(r.current,r.required)}supports(e,t){const{provider:i}=this.getProvider(e);return i.supports(t)}_reposVisibilityCache;_repoVisibilityCache;ensureRepoVisibilityCache(){if(null==this._repoVisibilityCache){const e=this.container.storage.get("repoVisibility")?.map((([e,t])=>[e,{visibility:t.visibility,timestamp:t.timestamp,remotesHash:t.remotesHash}]));this._repoVisibilityCache=new Map(e)}}clearRepoVisibilityCache(e){if(null==e)this._repoVisibilityCache=void 0,this.container.storage.delete("repoVisibility");else{e?.forEach((e=>this._repoVisibilityCache?.delete(e)));const t=Array.from(this._repoVisibilityCache?.entries()??[]);0===t.length?this.container.storage.delete("repoVisibility"):this.container.storage.store("repoVisibility",t)}}getVisibilityInfoFromCache(e){this.ensureRepoVisibilityCache();const t=this._repoVisibilityCache?.get(e);if(null==t)return;if(!(Date.now()-t.timestamp>2592e6))return t;this.clearRepoVisibilityCache([e])}checkVisibilityCachedRemotes(e,t,i){if(null==t)return!0;if("public"===t.visibility){if(0==i.length||!i.some((e=>e.remoteKey===t.remotesHash)))return this.clearRepoVisibilityCache([e]),!1}else if("private"===t.visibility){if((0,mt.Ym)(i)!==t.remotesHash)return this.clearRepoVisibilityCache([e]),!1}return!0}updateVisibilityCache(e,t){this.ensureRepoVisibilityCache(),this._repoVisibilityCache?.set(e,t),this.container.storage.store("repoVisibility",Array.from(this._repoVisibilityCache.entries()))}clearAllRepoVisibilityCaches(){this.clearRepoVisibilityCache()}clearAllOpenRepoVisibilityCaches(){const e=this.openRepositories.map((e=>this.getProvider(e.path).path));this.clearRepoVisibilityCache(e)}async visibility(e){if(null==e){let e=this._reposVisibilityCache;return null==e&&(e=await this.visibilityCore(),this.container.telemetry.enabled&&(this.container.telemetry.setGlobalAttribute("repositories.visibility",e),this.container.telemetry.sendEvent("repositories/visibility")),this._reposVisibilityCache=e),e}const{path:t}=this.getProvider(e);let i=this.getVisibilityInfoFromCache(t)?.visibility;return null==i&&(i=await this.visibilityCore(e),this.container.telemetry.enabled&&setTimeout((()=>{const t=this.getRepository(e);this.container.telemetry.sendEvent("repository/visibility",{"repository.visibility":i,"repository.id":t?.idHash,"repository.scheme":t?.uri.scheme,"repository.closed":t?.closed,"repository.folder.scheme":t?.folder?.uri.scheme,"repository.provider.id":t?.provider.id})}),0)),i}async visibilityCore(e){async function t(e){const{provider:t,path:i}=this.getProvider(e),r=await t.getRemotes(i,{sort:!0}),s=this.getVisibilityInfoFromCache(i);if(null==s||!this.checkVisibilityCachedRemotes(i,s,r)){const[e,r]=await t.visibility(i);return"local"!==e&&this.updateVisibilityCache(i,{visibility:e,timestamp:Date.now(),remotesHash:r}),e}return s.visibility}if(null==e){const e=this.openRepositories;if(0===e.length)return"private";if(1===e.length)return t.call(this,e[0].path);let i=!1,r=!1,s=!1;for await(const o of(0,Vt.rX)(e.map((e=>t.call(this,e.path)))))if("fulfilled"===o.status)if("public"===o.value){if(s||r)return"mixed";i=!0}else if("local"===o.value){if(i||r)return"mixed";s=!0}else if("private"===o.value){if(i||s)return"mixed";r=!0}return i?"public":s?"local":"private"}return t.call(this,e)}_context={enabled:!1,disabled:!1};async setEnabledContext(e){let t=!e;if(!e&&this._initializing&&(t=!this.container.storage.getWorkspace("assumeRepositoriesOnStartup")),this.container.telemetry.setGlobalAttribute("enabled",e),this._context.enabled===e&&this._context.disabled===t)return;const i=[];this._context.enabled!==e&&(this._context.enabled=e,i.push((0,Ni.v)("gitlens:enabled",e))),this._context.disabled!==t&&(this._context.disabled=t,i.push((0,Ni.v)("gitlens:disabled",t))),await Promise.allSettled(i),this._initializing||this.container.storage.storeWorkspace("assumeRepositoriesOnStartup",e).catch()}_sendProviderContextTelemetryDebounced;updateContext(){if(this.container.deactivating)return;const e=this.openRepositoryCount,t=0!==e;this.setEnabledContext(t),this._initializing||(this.container.telemetry.setGlobalAttributes({enabled:t,"repositories.count":e}),t&&(async function(){const e=s.D.get("integrations.enabled"),i=this.container.telemetry.enabled,r=new Set;let o=!1,n=!1,a=!1;if(t)for(const t of this._repositories.values()){if(i){const e=await t.getRemotes();for(const t of e)r.add(t.provider?.id??"unknown")}if(!a&&e&&(a=await t.hasRichRemote(!0),a&&(n=!0,o=!0)),!n&&e&&(n=await t.hasRichRemote(),n&&(o=!0)),o||(o=await t.hasRemotes()),o&&(n&&a||!e))break}i&&(this.container.telemetry.setGlobalAttributes({"repositories.hasRemotes":o,"repositories.hasRichRemotes":n,"repositories.hasConnectedRemotes":a,"repositories.remoteProviders":(0,ke.v_)(r,",")}),null==this._sendProviderContextTelemetryDebounced&&(this._sendProviderContextTelemetryDebounced=(0,Ht.Ds)((()=>this.container.telemetry.sendEvent("providers/context")),2500)),this._sendProviderContextTelemetryDebounced()),await Promise.allSettled([(0,Ni.v)("gitlens:hasRemotes",o),(0,Ni.v)("gitlens:hasRichRemotes",n),(0,Ni.v)("gitlens:hasConnectedRemotes",a)])}.call(this),this._providers.forEach((e=>e.updateContext?.()))))}getProvider(e){if(null==e||"string"!=typeof e&&!this.supportedSchemes.has(e.scheme))throw new zi.MO(e);let t;"string"==typeof e?t=(0,k.UG)(e)??u.sN.File:({scheme:t}=e);const i=new Set;for(const r of this._providers.values()){const s=r.canHandlePathOrUri(t,e);null!=s&&i.add({provider:r,path:s})}if(0===i.size)throw new zi.MO(e);if(i.size>1)for(const e of i)if(this.hasOpenRepositories(e.provider.descriptor.id))return e;return(0,ke.Ps)(i)}getAbsoluteUri(e,t){if(null==t)return"string"==typeof e?(0,k.tE)(e)?r.Uri.parse(e,!0):r.Uri.file(e):e;if("string"!=typeof t&&"string"==typeof e){const i=(0,k.AH)(e);if(!(0,k.YP)(i))return r.Uri.joinPath(t,i)}const{provider:i}=this.getProvider(t);return i.getAbsoluteUri(e,t)}async getBestRevisionUri(e,t,i){if(null==e||i===D.Ii)return;const{provider:r,path:s}=this.getProvider(e);return r.getBestRevisionUri(s,r.getRelativePath(t,s),i)}getRelativePath(e,t){const{provider:i}=this.getProvider(e instanceof r.Uri?e:t);return i.getRelativePath(e,t)}getRevisionUri(e,t,i){let r,s;"string"==typeof e?(s=e,r="string"==typeof t?t:t?.originalPath??t?.path??""):(s=e.sha,i=e.repoPath,r=(0,k.M)(e));const{provider:o,path:n}=this.getProvider(i);return o.getRevisionUri(n,o.getRelativePath(r,n),s)}getWorkingUri(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getWorkingUri(r,t)}addRemote(e,t,i,r){const{provider:s,path:o}=this.getProvider(e);return s.addRemote(o,t,i,r)}pruneRemote(e,t){const{provider:i,path:r}=this.getProvider(e);return i.pruneRemote(r,t)}removeRemote(e,t){const{provider:i,path:r}=this.getProvider(e);return i.removeRemote(r,t)}applyChangesToWorkingFile(e,t,i){const{provider:r}=this.getProvider(e);return r.applyChangesToWorkingFile(e,t,i)}checkout(e,t,i){const{provider:r,path:s}=this.getProvider(e);return r.checkout(s,t,i)}async clone(e,t){const{provider:i}=this.getProvider(t);return i.clone?.(e,t)}resetCaches(...e){(0===e.length||e.includes("providers"))&&this._bestRemotesCache.clear(),this.container.events.fire("git:cache:reset",{caches:e})}excludeIgnoredUris(e,t){const{provider:i,path:r}=this.getProvider(e);return i.excludeIgnoredUris(r,t)}fetch(e,t){const{provider:i,path:r}=this.getProvider(e);return i.fetch(r,t)}async fetchAll(e,t){null==e&&(e=this.openRepositories),0!==e.length&&(1!==e.length?await r.window.withProgress({location:r.ProgressLocation.Notification,title:`Fetching ${e.length} repositories`},(()=>Promise.all(e.map((e=>e.fetch({progress:!1,...t})))))):await e[0].fetch(t))}pull(e,t){const{provider:i,path:r}=this.getProvider(e);return i.pull(r,t)}async pullAll(e,t){null==e&&(e=this.openRepositories),0!==e.length&&(1!==e.length?await r.window.withProgress({location:r.ProgressLocation.Notification,title:`Pulling ${e.length} repositories`},(()=>Promise.all(e.map((e=>e.pull({progress:!1,...t})))))):await e[0].pull(t))}push(e,t){const{provider:i,path:r}=this.getProvider(e);return i.push(r,t)}async pushAll(e,t){null==e&&(e=this.openRepositories),0!==e.length&&(1!==e.length?await r.window.withProgress({location:r.ProgressLocation.Notification,title:`Pushing ${e.length} repositories`},(()=>Promise.all(e.map((e=>e.push({progress:!1,...t})))))):await e[0].push(t))}getAheadBehindCommitCount(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getAheadBehindCommitCount(r,t)}async getBlame(e,t){const{provider:i}=this.getProvider(e);return i.getBlame(e,t)}async getBlameContents(e,t){const{provider:i}=this.getProvider(e);return i.getBlameContents(e,t)}async getBlameForLine(e,t,i,r){const{provider:s}=this.getProvider(e);return s.getBlameForLine(e,t,i,r)}async getBlameForLineContents(e,t,i,r){const{provider:s}=this.getProvider(e);return s.getBlameForLineContents(e,t,i,r)}async getBlameForRange(e,t){const{provider:i}=this.getProvider(e);return i.getBlameForRange(e,t)}async getBlameForRangeContents(e,t,i){const{provider:r}=this.getProvider(e);return r.getBlameForRangeContents(e,t,i)}getBlameRange(e,t,i){const{provider:r}=this.getProvider(t);return r.getBlameRange(e,t,i)}async getBranch(e){if(null==e)return;const{provider:t,path:i}=this.getProvider(e);return t.getBranch(i)}async getBranchAheadRange(e){if(e.state.ahead>0)return(0,m.oI)(e.upstream?.name,e.ref);if(null==e.upstream){const{values:t}=await this.getBranches(e.repoPath,{filter:e=>sr.has(e.name)});if(t.length>0){let i;for(const e of t){const t=sr.get(e.name);if((null==i||i.weight<t)&&(i={weight:t,branch:e}),100===i.weight)break}const r=i.branch.upstream?.name??i.branch.ref;if(r!==e.ref)return(0,m.oI)(r,e.ref)}}}async getBranches(e,t){if(null==e)return{values:[]};const{provider:i,path:r}=this.getProvider(e);return i.getBranches(r,t)}async getBranchesAndTagsTipsFn(e,t){const[i,r]=await Promise.allSettled([this.getBranches(e),this.getTags(e)]),s=(0,Vt.Sb)(i)?.values??[],o=(0,Vt.Sb)(r)?.values??[],n=(0,A.Qy)(s.concat(o),(e=>e.sha),(e=>{if(t){if(e.name===t)return;if("branch"===e.refType&&e.getNameWithoutRemote()===t)return{name:e.name,compactName:e.getRemoteName(),type:e.refType}}return{name:e.name,compactName:void 0,type:e.refType}}));return(e,t)=>{const i=n.get(e);if(null!=i&&0!==i.length){if(!t?.compact)return i.map((e=>`${t?.icons?("tag"===e.type?"$(tag)":"$(git-branch)")+" ":""}${e.name}`)).join(", ");if(i.length>1){const[e]=i;return`${t?.icons?("tag"===e.type?"$(tag)":"$(git-branch)")+" ":""}${e.compactName??e.name}, ${u.NE.Ellipsis}`}return i.map((e=>`${t?.icons?("tag"===e.type?"$(tag)":"$(git-branch)")+" ":""}${e.compactName??e.name}`)).join(", ")}}}getChangedFilesCount(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getChangedFilesCount(r,t)}async getCommit(e,t){const{provider:i,path:r}=this.getProvider(e);if(t===D.CL||t===D.pw){const i=new Date,s=await this.getCurrentUser(e);return new S.aM(this.container,r,t,new S._j("You",s?.email??void 0,i),new S._j("You",s?.email??void 0,i),"Uncommitted changes",[],"Uncommitted changes",void 0,void 0,[])}return i.getCommit(r,t)}getCommitBranches(e,t,i,r){const{provider:s,path:o}=this.getProvider(e);return s.getCommitBranches(o,t,i,r)}getCommitCount(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getCommitCount(r,t)}async getCommitForFile(e,t,i){if(null==e)return;const{provider:r,path:s}=this.getProvider(e);return r.getCommitForFile(s,t,i)}getCommitsForGraph(e,t,i){const{provider:r,path:s}=this.getProvider(e);return r.getCommitsForGraph(s,t,i)}getCommitTags(e,t,i){const{provider:r,path:s}=this.getProvider(e);return r.getCommitTags(s,t,i)}async getConfig(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getConfig?.(r,t)}async setConfig(e,t,i){const{provider:r,path:s}=this.getProvider(e);return r.setConfig?.(s,t,i)}async getContributors(e,t){if(null==e)return[];const{provider:i,path:r}=this.getProvider(e);return i.getContributors(r,t)}getCurrentUser(e){const{provider:t,path:i}=this.getProvider(e);return t.getCurrentUser(i)}async getDefaultBranchName(e,t){if(null==e)return;const{provider:i,path:r}=this.getProvider(e);return i.getDefaultBranchName(r,t)}async getDiff(e,t,i,r){const{provider:s,path:o}=this.getProvider(e);return s.getDiff?.(o,t,i,r)}getDiffForFile(e,t,i){const{provider:r}=this.getProvider(e);return r.getDiffForFile(e,t,i)}getDiffForFileContents(e,t,i){const{provider:r}=this.getProvider(e);return r.getDiffForFileContents(e,t,i)}getDiffForLine(e,t,i,r){const{provider:s}=this.getProvider(e);return s.getDiffForLine(e,t,i,r)}getDiffStatus(e,t,i,r){const{provider:s,path:o}=this.getProvider(e);return s.getDiffStatus(o,t,i,r)}async getFileStatusForCommit(e,t,i){if(i===D.Ii||(0,m.l3)(i))return;const{provider:r,path:s}=this.getProvider(e);return r.getFileStatusForCommit(s,t,i)}getGitDir(e){const{provider:t,path:i}=this.getProvider(e);return Promise.resolve(t.getGitDir?.(i))}getLastFetchedTimestamp(e){const{provider:t,path:i}=this.getProvider(e);return t.getLastFetchedTimestamp(i)}async getLog(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getLog(r,t)}async getLogRefsOnly(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getLogRefsOnly(r,t)}async getLogForFile(e,t,i){if(null==e)return;const{provider:r,path:s}=this.getProvider(e);return r.getLogForFile(s,t,i)}async getMergeBase(e,t,i,r){const{provider:s,path:o}=this.getProvider(e);return s.getMergeBase(o,t,i,r)}async getMergeStatus(e){const{provider:t,path:i}=this.getProvider(e);return t.getMergeStatus(i)}async getRebaseStatus(e){const{provider:t,path:i}=this.getProvider(e);return t.getRebaseStatus(i)}getNextComparisonUris(e,t,i,r=0){if(!i)return Promise.resolve(void 0);const{provider:s,path:o}=this.getProvider(e);return s.getNextComparisonUris(o,t,i,r)}async getOldestUnpushedRefForFile(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getOldestUnpushedRefForFile(r,t)}getPreviousComparisonUris(e,t,i,r=0){if(i===D.Ii)return Promise.resolve(void 0);const{provider:s,path:o}=this.getProvider(e);return s.getPreviousComparisonUris(o,t,i,r)}getPreviousComparisonUrisForLine(e,t,i,r,s=0){if(r===D.Ii)return Promise.resolve(void 0);const{provider:o,path:n}=this.getProvider(e);return o.getPreviousComparisonUrisForLine(n,t,i,r,s)}async getMyPullRequests(e,t){let i,r;if(mt.ss.is(e)){if(({provider:i}=e),!i?.hasRichIntegration())return}else i=e;null!=t&&({timeout:r,...t}=t);let s=i.searchMyPullRequests();if(null==s||!(0,Vt.tI)(s))return s;null!=r&&r>0&&(s=(0,Vt.HO)(s,r));try{return await s}catch(e){if(e instanceof Vt.PK)throw e;return}}async getMyIssues(e,t){let i,r;if(mt.ss.is(e)){if(({provider:i}=e),!i?.hasRichIntegration())return}else i=e;null!=t&&({timeout:r,...t}=t);let s=i.searchMyIssues();if(null==s||!(0,Vt.tI)(s))return s;null!=r&&r>0&&(s=(0,Vt.HO)(s,r));try{return await s}catch(e){if(e instanceof Vt.PK)throw e;return}}async getIncomingActivity(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getIncomingActivity(r,t)}async getBestRemoteWithProvider(e,t){return(await this.getBestRemotesWithProviders(e,t))[0]}async getBestRemotesWithProviders(e,t){if(null==e)return[];"string"==typeof e&&(e=this.getAbsoluteUri(e));const i=(0,Ki.YW)(e);let r=this._bestRemotesCache.get(i);if(null==r){async function s(){const i=await this.getRemotesWithProviders(e,{sort:!0},t);if(0===i.length)return[];if(1===i.length)return[...i];if(t?.isCancellationRequested)throw new zi.FU;const r=i.find((e=>e.default))?.name,s=(await this.getBranch(i[0].repoPath))?.getRemoteName(),o=[];let n=!1;for(const e of i){let i;switch(e.name){case r:i=1e3;break;case s:i=6;break;case"upstream":i=5;break;case"origin":i=4;break;default:i=0}if(i>0&&i<1e3&&!n){const r=e.provider;if(r.hasRichIntegration()&&(r.maybeConnected||void 0===r.maybeConnected&&r.shouldConnect&&await r.isConnected())){if(t?.isCancellationRequested)throw new zi.FU;const e=await r.getRepositoryMetadata(t);if(t?.isCancellationRequested)throw new zi.FU;null!=e&&(i+=e.isFork?-3:3,n=!e.isFork)}}o.push([i,e])}return o.sort((([e,t],[i,r])=>0===i&&0===e?(0,P.dm)(t.name,r.name):i-e)),o.map((e=>e[1]))}r=s.call(this),this._bestRemotesCache.set(i,r)}return[...await r]}async getBestRemoteWithRichProvider(e,t,i){const r=await this.getBestRemotesWithProviders(e,i),s=t?.includeDisconnected??!1;for(const e of r)if(e.hasRichIntegration()){if(s||!0===e.provider.maybeConnected)return e;if(void 0===e.provider.maybeConnected&&e.default&&await e.provider.isConnected())return e}}async getRemotes(e,t,i){if(null==e)return[];const{provider:r,path:s}=this.getProvider(e);return r.getRemotes(s,t)}async getRemotesWithProviders(e,t,i){return(await this.getRemotes(e,t,i)).filter((e=>null!=e.provider))}async getRemotesWithRichProviders(e,t,i){return(await this.getRemotes(e,t,i)).filter((e=>e.hasRichIntegration()))}getBestRepository(e,t){const i=this.repositoryCount;if(0!==i){if(1===i)return this.highlander;if(null!=e&&e instanceof r.Uri){const t=this.getRepository(e);if(null!=t)return t;e=void 0}return(null!=(t=e??t??r.window.activeTextEditor)?this.getRepository(t.document.uri):void 0)??this.highlander}}getBestRepositoryOrFirst(e,t){const i=this.repositoryCount;if(0!==i){if(1===i)return(0,ke.Ps)(this._repositories.values());if(null!=e&&e instanceof r.Uri){const t=this.getRepository(e);if(null!=t)return t;e=void 0}return(null!=(t=e??t??r.window.activeTextEditor)?this.getRepository(t.document.uri):void 0)??(0,ke.Ps)(this._repositories.values())}}async getOrOpenRepository(e,t){if(null==e)return;const i=(0,De.UH)();let o;if("string"==typeof e){if(!e)return;o=this.getAbsoluteUri(e)}else o=e;const n=(0,k.M)(o);let a,c;a=this.getRepository(o),null==a&&null!=this._isDiscoveringRepositories&&(await this._isDiscoveringRepositories,a=this.getRepository(o));if(t?.detectNested??s.D.get("detectNestedRepositories",o)){if(!t?.force&&this._visitedPaths.has(n))return a;if(((await r.workspace.fs.stat(o)).type&r.FileType.Directory)!==r.FileType.Directory&&(o=r.Uri.joinPath(o,".."),!t?.force&&this._visitedPaths.has((0,k.M)(o))))return a;c=!0}else if(null!=a)return a;const l=(0,Ki.YW)(o);let h=this._pendingRepositories.get(l);if(null==h){async function u(){const{provider:e}=this.getProvider(o),r=await e.findRepositoryUri(o,c);if(this._visitedPaths.set(n),null==r)return;let h;if(0!==this._repositories.count){if(a=this._repositories.get(r),null!=a)return a;h=this._repositories.getClosest(e.getAbsoluteUri(o,r))}const u=s.D.getAny("git.autoRepositoryDetection")??!0,d=t?.closeOnOpen??(!0!==u&&"openEditors"!==u);Pe.Yd.log(i,`Repository found in '${r.toString(!0)}'`);const p=e.openRepository(h?.folder,r,!1,void 0,d),m=[];for(const e of p)this._repositories.add(e),e.closed||m.push(e);return this._pendingRepositories.delete(l),this.updateContext(),m.length&&queueMicrotask((()=>this.fireRepositoriesChanged(m))),a=1===p.length?p[0]:this.getRepository(o),a}h=u.call(this),this._pendingRepositories.set(l,h)}return h}async getOrOpenRepositoryForEditor(e){return null==(e=e??r.window.activeTextEditor)?this.highlander:this.getOrOpenRepository(e.document.uri)}getRepository(e){if(0!==this.repositoryCount&&null!=e){if("string"==typeof e){if(!e)return;return this._repositories.getClosest(this.getAbsoluteUri(e))}return this._repositories.getClosest(e)}}async getLocalInfoFromRemoteUri(e,t){for(const i of this.openRepositories)for(const r of await i.getRemotes()){const s=await(r?.provider?.getLocalInfoFromRemoteUri(i,e,t));if(null!=s)return s}}async getStash(e){if(null==e)return;const{provider:t,path:i}=this.getProvider(e);return t.getStash(i)}async getStatusForFile(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getStatusForFile(r,t)}async getStatusForFiles(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getStatusForFiles(r,t)}async getStatusForRepo(e){if(null==e)return;const{provider:t,path:i}=this.getProvider(e);return t.getStatusForRepo(i)}async getTags(e,t){if(null==e)return{values:[]};const{provider:i,path:r}=this.getProvider(e);return i.getTags(r,t)}async getTreeEntryForRevision(e,t,i){if(null==e||!t)return;const{provider:r,path:s}=this.getProvider(e);return r.getTreeEntryForRevision(s,r.getRelativePath(t,s),i)}async getTreeForRevision(e,t){if(null==e)return[];const{provider:i,path:r}=this.getProvider(e);return i.getTreeForRevision(r,t)}getRevisionContent(e,t,i){const{provider:r,path:s}=this.getProvider(e);return r.getRevisionContent(s,t,i)}async getFirstCommitSha(e){const{provider:t,path:i}=this.getProvider(e);try{return await(t.getFirstCommitSha?.(i))}catch{return}}getUniqueRepositoryId(e){return this.getFirstCommitSha(e)}async hasBranchOrTag(e,t){if(null==e)return!1;const{provider:i,path:r}=this.getProvider(e);return i.hasBranchOrTag(r,t)}async hasCommitBeenPushed(e,t){if(null==e)return!1;const{provider:i,path:r}=this.getProvider(e);return i.hasCommitBeenPushed(r,t)}async hasRemotes(e){if(null==e)return!1;const t=this.getRepository(e);return null!=t&&t.hasRemotes()}async hasTrackingBranch(e){if(null==e)return!1;const t=this.getRepository(e);return null!=t&&t.hasUpstreamBranch()}hasUnsafeRepositories(){for(const e of this._providers.values())if(e.hasUnsafeRepositories?.())return!0;return!1}isRepositoryForEditor(e,t){return null!=(t=t??r.window.activeTextEditor)&&e===this.getRepository(t.document.uri)}isTrackable(e){if(!this.supportedSchemes.has(e.scheme))return!1;const{provider:t}=this.getProvider(e);return t.isTrackable(e)}async isTracked(e){if(!this.supportedSchemes.has(e.scheme))return!1;const{provider:t}=this.getProvider(e);return t.isTracked(e)}async getDiffTool(e){if(null==e)return;const{provider:t,path:i}=this.getProvider(e);return t.getDiffTool(i)}async openDiffTool(e,t,i){const{provider:r,path:s}=this.getProvider(e);return r.openDiffTool(s,t,i)}async openDirectoryCompare(e,t,i,r){const{provider:s,path:o}=this.getProvider(e);return s.openDirectoryCompare(o,t,i,r)}async resolveReference(e,t,i,r){if(null!=i&&(0,m.j$)(t)&&(t="HEAD"),!t||t===D.Ii||null==i&&(0,m.D3)(t)||null!=i&&(0,m.l3)(t))return t;const{provider:s,path:o}=this.getProvider(e);return s.resolveReference(o,t,i,r)}async richSearchCommits(e,t,i){const{provider:r,path:s}=this.getProvider(e);return r.richSearchCommits(s,t,i)}searchCommits(e,t,i){const{provider:r,path:s}=this.getProvider(e);return r.searchCommits(s,t,i)}async runGitCommandViaTerminal(e,t,i,r){const{provider:s,path:o}=this.getProvider(e);return s.runGitCommandViaTerminal?.(o,t,i,r)}validateBranchOrTagName(e,t){const{provider:i,path:r}=this.getProvider(e);return i.validateBranchOrTagName(r,t)}async validateReference(e,t){if(null==t||0===t.length)return!1;if(t===D.Ii||(0,m.l3)(t))return!0;const{provider:i,path:r}=this.getProvider(e);return i.validateReference(r,t)}stageFile(e,t){const{provider:i,path:r}=this.getProvider(e);return i.stageFile(r,t)}stageDirectory(e,t){const{provider:i,path:r}=this.getProvider(e);return i.stageDirectory(r,t)}unstageFile(e,t){const{provider:i,path:r}=this.getProvider(e);return i.unstageFile(r,t)}unstageDirectory(e,t){const{provider:i,path:r}=this.getProvider(e);return i.unstageDirectory(r,t)}async stashApply(e,t,i){const{provider:r,path:s}=this.getProvider(e);return r.stashApply?.(s,t,i)}async stashDelete(e,t,i){const{provider:r,path:s}=this.getProvider(e);return r.stashDelete?.(s,t,i)}async stashRename(e,t,i,r,s){const{provider:o,path:n}=this.getProvider(e);return o.stashRename?.(n,t,i,r,s)}async stashSave(e,t,i,r){const{provider:s,path:o}=this.getProvider(e);return s.stashSave?.(o,t,i,r)}createWorktree(e,t,i){const{provider:r,path:s}=this.getProvider(e);return Promise.resolve(r.createWorktree?.(s,t,i))}async getWorktree(e,t){const{provider:i,path:r}=this.getProvider(e);return(await(i.getWorktrees?.(r))??[]).find(t)}async getWorktrees(e){const{provider:t,path:i}=this.getProvider(e);return await(t.getWorktrees?.(i))??[]}async getWorktreesDefaultUri(e){const{provider:t,path:i}=this.getProvider(e);let s=await(t.getWorktreesDefaultUri?.(i));return null!=s||(s=this.getRepository(i)?.uri,null!=s&&(s=r.Uri.joinPath(s,".."))),s}deleteWorktree(e,t,i){const{provider:r,path:s}=this.getProvider(e);return Promise.resolve(r.deleteWorktree?.(s,t,i))}async getOpenScmRepositories(){const e=await Promise.allSettled([...this._providers.values()].map((e=>e.getOpenScmRepositories())));return[...(0,ke.VS)((0,ke.hX)(e,(e=>"fulfilled"===e.status)),(e=>e.value))]}getScmRepository(e){const{provider:t,path:i}=this.getProvider(e);return t.getScmRepository(i)}getOrOpenScmRepository(e){const{provider:t,path:i}=this.getProvider(e);return t.getOrOpenScmRepository(i)}}tr([(0,g.fF)()],GitProviderService.prototype,"onSubscriptionChanged",1),tr([(0,g.fF)({args:{0:e=>`focused=${e.focused}`}})],GitProviderService.prototype,"onWindowStateChanged",1),tr([(0,g.fF)({args:{0:e=>`added=${e.added.length}, removed=${e.removed.length}`},singleLine:!0})],GitProviderService.prototype,"onWorkspaceFoldersChanged",1),tr([(0,g.cM)({args:{1:!1},singleLine:!0})],GitProviderService.prototype,"register",1),tr([(0,g.cM)({singleLine:!0})],GitProviderService.prototype,"registrationComplete",1),tr([(0,g.cM)({args:{0:e=>e.length}})],GitProviderService.prototype,"discoverRepositories",1),tr([(0,g.fF)({exit:!0})],GitProviderService.prototype,"discoverRepositoriesCore",1),tr([(0,g.cM)()],GitProviderService.prototype,"findRepositories",1),tr([(0,g.fF)({exit:!0})],GitProviderService.prototype,"access",1),tr([(0,g.fF)({exit:!0})],GitProviderService.prototype,"accessCore",1),tr([(0,g.fF)({exit:!0})],GitProviderService.prototype,"supports",1),tr([(0,g.fF)({exit:e=>`returned ${e?.visibility}`})],GitProviderService.prototype,"getVisibilityInfoFromCache",1),tr([(0,g.fF)()],GitProviderService.prototype,"clearAllRepoVisibilityCaches",1),tr([(0,g.fF)()],GitProviderService.prototype,"clearAllOpenRepoVisibilityCaches",1),tr([(0,g.fF)({exit:!0})],GitProviderService.prototype,"visibility",1),tr([(0,g.fF)({exit:!0})],GitProviderService.prototype,"visibilityCore",1),tr([(0,g.fF)()],GitProviderService.prototype,"setEnabledContext",1),tr([(0,g.cM)()],GitProviderService.prototype,"getBestRevisionUri",1),tr([(0,g.cM)()],GitProviderService.prototype,"getRevisionUri",1),tr([(0,g.cM)()],GitProviderService.prototype,"getWorkingUri",1),tr([(0,g.cM)()],GitProviderService.prototype,"addRemote",1),tr([(0,g.cM)()],GitProviderService.prototype,"pruneRemote",1),tr([(0,g.cM)()],GitProviderService.prototype,"removeRemote",1),tr([(0,g.cM)()],GitProviderService.prototype,"applyChangesToWorkingFile",1),tr([(0,g.cM)()],GitProviderService.prototype,"checkout",1),tr([(0,g.cM)()],GitProviderService.prototype,"clone",1),tr([(0,g.cM)({singleLine:!0})],GitProviderService.prototype,"resetCaches",1),tr([(0,g.cM)({args:{1:e=>e.length}})],GitProviderService.prototype,"excludeIgnoredUris",1),tr([(0,Gt.H)(),(0,g.cM)()],GitProviderService.prototype,"fetch",1),tr([(0,Gt.H)(((e,t)=>`${null==e?"":e.map((e=>e.id)).join(",")}|${JSON.stringify(t)}`)),(0,g.cM)({args:{0:e=>e?.map((e=>e.name)).join(", ")}})],GitProviderService.prototype,"fetchAll",1),tr([(0,Gt.H)(),(0,g.cM)()],GitProviderService.prototype,"pull",1),tr([(0,Gt.H)(((e,t)=>`${null==e?"":e.map((e=>e.id)).join(",")}|${JSON.stringify(t)}`)),(0,g.cM)({args:{0:e=>e?.map((e=>e.name)).join(", ")}})],GitProviderService.prototype,"pullAll",1),tr([(0,Gt.H)(),(0,g.cM)()],GitProviderService.prototype,"push",1),tr([(0,Gt.H)((e=>`${null==e?"":e.map((e=>e.id)).join(",")}`)),(0,g.cM)({args:{0:e=>e?.map((e=>e.name)).join(", ")}})],GitProviderService.prototype,"pushAll",1),tr([(0,g.cM)({args:{1:e=>e.join(",")}})],GitProviderService.prototype,"getAheadBehindCommitCount",1),tr([(0,g.cM)({args:{1:e=>e?.isDirty}})],GitProviderService.prototype,"getBlame",1),tr([(0,g.cM)({args:{1:"<contents>"}})],GitProviderService.prototype,"getBlameContents",1),tr([(0,g.cM)({args:{2:e=>e?.isDirty}})],GitProviderService.prototype,"getBlameForLine",1),tr([(0,g.cM)({args:{2:"<contents>"}})],GitProviderService.prototype,"getBlameForLineContents",1),tr([(0,g.cM)()],GitProviderService.prototype,"getBlameForRange",1),tr([(0,g.cM)({args:{2:"<contents>"}})],GitProviderService.prototype,"getBlameForRangeContents",1),tr([(0,g.cM)({args:{0:"<blame>"}})],GitProviderService.prototype,"getBlameRange",1),tr([(0,g.cM)()],GitProviderService.prototype,"getBranch",1),tr([(0,g.cM)({args:{0:e=>e.name}})],GitProviderService.prototype,"getBranchAheadRange",1),tr([(0,g.cM)({args:{1:!1}})],GitProviderService.prototype,"getBranches",1),tr([(0,g.cM)()],GitProviderService.prototype,"getBranchesAndTagsTipsFn",1),tr([(0,g.cM)()],GitProviderService.prototype,"getChangedFilesCount",1),tr([(0,g.cM)()],GitProviderService.prototype,"getCommit",1),tr([(0,g.cM)()],GitProviderService.prototype,"getCommitBranches",1),tr([(0,g.cM)()],GitProviderService.prototype,"getCommitCount",1),tr([(0,g.cM)()],GitProviderService.prototype,"getCommitForFile",1),tr([(0,g.cM)()],GitProviderService.prototype,"getCommitsForGraph",1),tr([(0,g.cM)()],GitProviderService.prototype,"getCommitTags",1),tr([(0,g.cM)()],GitProviderService.prototype,"getConfig",1),tr([(0,g.cM)()],GitProviderService.prototype,"setConfig",1),tr([(0,g.cM)()],GitProviderService.prototype,"getContributors",1),tr([(0,Gt.H)(),(0,g.cM)()],GitProviderService.prototype,"getCurrentUser",1),tr([(0,g.cM)()],GitProviderService.prototype,"getDefaultBranchName",1),tr([(0,g.cM)()],GitProviderService.prototype,"getDiff",1),tr([(0,g.cM)()],GitProviderService.prototype,"getDiffForFile",1),tr([(0,g.cM)({args:{1:"<contents>"}})],GitProviderService.prototype,"getDiffForFileContents",1),tr([(0,g.cM)()],GitProviderService.prototype,"getDiffForLine",1),tr([(0,g.cM)()],GitProviderService.prototype,"getDiffStatus",1),tr([(0,g.cM)()],GitProviderService.prototype,"getFileStatusForCommit",1),tr([(0,g.fF)()],GitProviderService.prototype,"getGitDir",1),tr([(0,g.fF)()],GitProviderService.prototype,"getLastFetchedTimestamp",1),tr([(0,g.cM)()],GitProviderService.prototype,"getLog",1),tr([(0,g.cM)()],GitProviderService.prototype,"getLogRefsOnly",1),tr([(0,g.cM)()],GitProviderService.prototype,"getLogForFile",1),tr([(0,g.cM)()],GitProviderService.prototype,"getMergeBase",1),tr([(0,Gt.H)(),(0,g.cM)()],GitProviderService.prototype,"getMergeStatus",1),tr([(0,Gt.H)(),(0,g.cM)()],GitProviderService.prototype,"getRebaseStatus",1),tr([(0,g.cM)()],GitProviderService.prototype,"getNextComparisonUris",1),tr([(0,g.cM)()],GitProviderService.prototype,"getOldestUnpushedRefForFile",1),tr([(0,g.cM)()],GitProviderService.prototype,"getPreviousComparisonUris",1),tr([(0,g.cM)()],GitProviderService.prototype,"getPreviousComparisonUrisForLine",1),tr([(0,g.fF)({args:{0:e=>e.name}})],GitProviderService.prototype,"getMyPullRequests",1),tr([(0,g.fF)({args:{0:e=>e.name}})],GitProviderService.prototype,"getMyIssues",1),tr([(0,g.cM)()],GitProviderService.prototype,"getIncomingActivity",1),tr([(0,g.cM)()],GitProviderService.prototype,"getBestRemoteWithProvider",1),tr([(0,g.cM)()],GitProviderService.prototype,"getBestRemotesWithProviders",1),tr([(0,g.cM)()],GitProviderService.prototype,"getBestRemoteWithRichProvider",1),tr([(0,g.cM)()],GitProviderService.prototype,"getRemotes",1),tr([(0,g.cM)()],GitProviderService.prototype,"getRemotesWithProviders",1),tr([(0,g.cM)()],GitProviderService.prototype,"getRemotesWithRichProviders",1),tr([(0,g.cM)({exit:!0})],GitProviderService.prototype,"getBestRepository",1),tr([(0,g.cM)({exit:!0})],GitProviderService.prototype,"getBestRepositoryOrFirst",1),tr([(0,g.cM)({exit:!0})],GitProviderService.prototype,"getOrOpenRepository",1),tr([(0,g.cM)({args:{0:e=>null!=e?`TextEditor(${Pe.Yd.toLoggable(e.document.uri)})`:void 0}})],GitProviderService.prototype,"getOrOpenRepositoryForEditor",1),tr([(0,g.cM)({exit:!0})],GitProviderService.prototype,"getRepository",1),tr([(0,Gt.H)(),(0,g.cM)()],GitProviderService.prototype,"getStash",1),tr([(0,g.cM)()],GitProviderService.prototype,"getStatusForFile",1),tr([(0,g.cM)()],GitProviderService.prototype,"getStatusForFiles",1),tr([(0,g.cM)()],GitProviderService.prototype,"getStatusForRepo",1),tr([(0,g.cM)({args:{1:!1}})],GitProviderService.prototype,"getTags",1),tr([(0,g.cM)()],GitProviderService.prototype,"getTreeEntryForRevision",1),tr([(0,g.cM)()],GitProviderService.prototype,"getTreeForRevision",1),tr([(0,Gt.H)(),(0,g.cM)()],GitProviderService.prototype,"getRevisionContent",1),tr([(0,g.cM)()],GitProviderService.prototype,"getFirstCommitSha",1),tr([(0,g.cM)()],GitProviderService.prototype,"getUniqueRepositoryId",1),tr([(0,g.cM)({args:{1:!1}})],GitProviderService.prototype,"hasBranchOrTag",1),tr([(0,g.cM)({args:{1:!1}})],GitProviderService.prototype,"hasCommitBeenPushed",1),tr([(0,g.cM)()],GitProviderService.prototype,"hasRemotes",1),tr([(0,g.cM)()],GitProviderService.prototype,"hasTrackingBranch",1),tr([(0,g.cM)()],GitProviderService.prototype,"hasUnsafeRepositories",1),tr([(0,g.cM)({args:{0:e=>e.uri.toString(!0),1:e=>null!=e?`TextEditor(${Pe.Yd.toLoggable(e.document.uri)})`:void 0}})],GitProviderService.prototype,"isRepositoryForEditor",1),tr([(0,g.cM)()],GitProviderService.prototype,"getDiffTool",1),tr([(0,g.cM)()],GitProviderService.prototype,"openDiffTool",1),tr([(0,g.cM)()],GitProviderService.prototype,"openDirectoryCompare",1),tr([(0,Gt.H)(),(0,g.cM)()],GitProviderService.prototype,"resolveReference",1),tr([(0,g.cM)({args:{1:e=>`[${e.matchAll?"A":""}${e.matchCase?"C":""}${e.matchRegex?"R":""}]: ${e.query.length>500?`${e.query.substring(0,500)}...`:e.query}`}})],GitProviderService.prototype,"richSearchCommits",1),tr([(0,g.cM)()],GitProviderService.prototype,"searchCommits",1),tr([(0,g.cM)({args:!1})],GitProviderService.prototype,"runGitCommandViaTerminal",1),tr([(0,g.cM)()],GitProviderService.prototype,"validateBranchOrTagName",1),tr([(0,g.cM)()],GitProviderService.prototype,"validateReference",1),tr([(0,g.cM)()],GitProviderService.prototype,"stageFile",1),tr([(0,g.cM)()],GitProviderService.prototype,"stageDirectory",1),tr([(0,g.cM)()],GitProviderService.prototype,"unstageFile",1),tr([(0,g.cM)()],GitProviderService.prototype,"unstageDirectory",1),tr([(0,g.cM)()],GitProviderService.prototype,"stashApply",1),tr([(0,g.cM)()],GitProviderService.prototype,"stashDelete",1),tr([(0,g.cM)()],GitProviderService.prototype,"stashRename",1),tr([(0,g.cM)({args:{2:e=>e?.length}})],GitProviderService.prototype,"stashSave",1),tr([(0,g.cM)()],GitProviderService.prototype,"createWorktree",1),tr([(0,g.cM)()],GitProviderService.prototype,"getWorktree",1),tr([(0,g.cM)()],GitProviderService.prototype,"getWorktrees",1),tr([(0,g.cM)()],GitProviderService.prototype,"getWorktreesDefaultUri",1),tr([(0,g.cM)()],GitProviderService.prototype,"deleteWorktree",1),tr([(0,g.cM)()],GitProviderService.prototype,"getOpenScmRepositories",1),tr([(0,g.cM)()],GitProviderService.prototype,"getScmRepository",1),tr([(0,g.cM)()],GitProviderService.prototype,"getOrOpenScmRepository",1);var or=i(2075),nr=i(5542);class RichRemoteProviderService{constructor(e){this.container=e}_onDidChangeConnectionState=new r.EventEmitter;get onDidChangeConnectionState(){return this._onDidChangeConnectionState.event}_onAfterDidChangeConnectionState=new r.EventEmitter;get onAfterDidChangeConnectionState(){return this._onAfterDidChangeConnectionState.event}_connectedCache=new Set;connected(e){this._connectedCache.has(e)||(this._connectedCache.add(e),this.container.telemetry.sendEvent("remoteProviders/connected",{"remoteProviders.key":e}),this._onDidChangeConnectionState.fire({key:e,reason:"connected"}),setTimeout((()=>this._onAfterDidChangeConnectionState.fire({key:e,reason:"connected"})),250))}disconnected(e){this._connectedCache.delete(e),this.container.telemetry.sendEvent("remoteProviders/disconnected",{"remoteProviders.key":e}),this._onDidChangeConnectionState.fire({key:e,reason:"disconnected"}),setTimeout((()=>this._onAfterDidChangeConnectionState.fire({key:e,reason:"disconnected"})),250)}isConnected(e){return null==e?0!==this._connectedCache.size:this._connectedCache.has(e)}}var ar=i(4298),cr=Object.defineProperty,lr=Object.getOwnPropertyDescriptor,hr=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?lr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&cr(t,i,o),o};const ur=2**30;class LineHoverController{constructor(e){this.container=e,this._disposable=r.Disposable.from((0,$i.IH)(e.onReady)(this.onReady,this),s.D.onDidChange(this.onConfigurationChanged,this))}_disposable;_hoverProviderDisposable;_uri;dispose(){this.unregister(),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){if(!s.D.changed(e,"hovers.enabled")&&!s.D.changed(e,"hovers.currentLine.enabled"))return;const t=s.D.get("hovers");t.enabled&&t.currentLine.enabled?(this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this)),this.register(r.window.activeTextEditor)):(this.container.lineTracker.unsubscribe(this),this.unregister())}onActiveLinesChanged(e){e.pending||(null!=e.editor&&null!=e.selections?this.isRegistered(e.editor?.document.uri)||this.register(e.editor):this.unregister())}async provideDetailsHover(e,t,i){if(!this.container.lineTracker.includes(t.line))return;const o=this.container.lineTracker.getState(t.line),n=o?.commit;if(null==n)return;const a=s.D.get("hovers");if(a.annotations.details){if("blame"===await this.container.fileAnnotations.getAnnotationType(r.window.activeTextEditor))return}const c="line"===a.currentLine.over;if(!c&&this.container.lineAnnotations.suspended)return;const l=e.validateRange(new r.Range(t.line,c?t.character:ur,t.line,ur));if(!c&&l.start.character!==t.character)return;let h=t.line;const u=h+1;h=(n.lines.find((e=>e.line===u))??n.lines[0]).originalLine-1;const d=await this.container.tracker.get(e);if(null==d||i.isCancellationRequested)return;const p=await(0,Ri.nN)(this.container,n,d.uri,h,{autolinks:a.autolinks.enabled,cancellation:i,dateFormat:s.D.get("defaultDateFormat"),format:a.detailsMarkdownFormat,pullRequests:a.pullRequests.enabled,timeout:250})??"Cancelled";return new r.Hover(p,l)}async provideChangesHover(e,t,i){if(!this.container.lineTracker.includes(t.line))return;const o=this.container.lineTracker.getState(t.line),n=o?.commit;if(null==n)return;const a=s.D.get("hovers");if(a.annotations.changes){if("blame"===await this.container.fileAnnotations.getAnnotationType(r.window.activeTextEditor))return}const c="line"===a.currentLine.over;if(!c&&this.container.lineAnnotations.suspended)return;const l=e.validateRange(new r.Range(t.line,c?t.character:ur,t.line,ur));if(!c&&l.start.character!==t.character)return;const h=await this.container.tracker.get(e);if(null==h)return;const u=await(0,Ri.jw)(this.container,n,h.uri,t.line,h.document);return null!=u?new r.Hover(u,l):void 0}isRegistered(e){return null!=this._hoverProviderDisposable&&ar.n.equals(this._uri,e)}register(e){if(this.unregister(),null==e)return;const t=s.D.get("hovers");if(!t.enabled||!t.currentLine.enabled||!t.currentLine.details&&!t.currentLine.changes)return;this._uri=e.document.uri;const i=[];t.currentLine.changes&&i.push(r.languages.registerHoverProvider({pattern:this._uri.fsPath},{provideHover:this.provideChangesHover.bind(this)})),t.currentLine.details&&i.push(r.languages.registerHoverProvider({pattern:this._uri.fsPath},{provideHover:this.provideDetailsHover.bind(this)})),this._hoverProviderDisposable=r.Disposable.from(...i)}unregister(){this._uri=void 0,null!=this._hoverProviderDisposable&&(this._hoverProviderDisposable.dispose(),this._hoverProviderDisposable=void 0)}}hr([(0,g.fF)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map((e=>`[${e.anchor}-${e.active}]`)).join(",")}, pending=${Boolean(e.pending)}, reason=${e.reason}`}})],LineHoverController.prototype,"onActiveLinesChanged",1),hr([(0,g.fF)({args:{0:e=>Pe.Yd.toLoggable(e.uri),1:e=>`${e.line}:${e.character}`,2:!1}})],LineHoverController.prototype,"provideDetailsHover",1),hr([(0,g.fF)({args:{0:e=>Pe.Yd.toLoggable(e.uri),1:e=>`${e.line}:${e.character}`,2:!1}})],LineHoverController.prototype,"provideChangesHover",1);var dr=Object.defineProperty,pr=Object.getOwnPropertyDescriptor,mr=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?pr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&dr(t,i,o),o};class FocusService{constructor(e,t){this.container=e,this.connection=t}dispose(){}async delete(e,t){const i=(0,De.UH)();try{const i=await this.connection.fetchGkDevApi(`v1/enrich-items/${e}`,{method:"DELETE"});if(!i.ok)throw new Error(`Unable to ${t} item '${e}':  (${i.status}) ${i.statusText}`)}catch(e){throw Pe.Yd.error(e,i),e}}async get(e){const t=(0,De.UH)();try{const t=await this.connection.fetchGkDevApi("v1/enrich-items",{method:"GET"}),i=await t.json();return null==e?i.data:i.data.filter((t=>t.type===e))}catch(e){if(e instanceof Error&&"Authentication required"===e.message)return[];throw Pe.Yd.error(e,t),e}}getPins(){return this.get("pin")}getSnoozed(){return this.get("snooze")}async pinItem(e){const t=(0,De.UH)();try{if(!await async function(e,t){for(;;){const i=await t.subscription.getSubscription();if(!1===i.account?.verified){const i={title:"Resend Verification"},s={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${e}\n\nYou must verify your email before you can continue.`,{modal:!0},i,s)===i&&await t.subscription.resendVerification())continue;return!1}if(null!=i.account)break;const s={title:"Sign In / Sign Up"},o={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${e}\n\nGain access to our developer productivity and collaboration services.`,{modal:!0},s,o)!==s||!await t.subscription.loginOrSignUp())return!1}return!0}("Pinning requires an account",this.container))throw new Error("Unable to pin item: account required");const t={provider:e.remote.provider.id,entityType:e.type,entityId:e.id,entityUrl:e.url},i=await this.connection.fetchGkDevApi("v1/enrich-items/pin",{method:"POST",body:JSON.stringify(t)});if(!i.ok)throw new Error(`Unable to pin item '${t.provider}|${t.entityUrl}#${e.id}':  (${i.status}) ${i.statusText}`);return(await i.json()).data}catch(e){throw Pe.Yd.error(e,t),e}}unpinItem(e){return this.delete(e,"unpin")}async snoozeItem(e){const t=(0,De.UH)();try{if(!await async function(e,t){for(;;){const i=await t.subscription.getSubscription();if(!1===i.account?.verified){const i={title:"Resend Verification"},s={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${e}\n\nYou must verify your email before you can continue.`,{modal:!0},i,s)===i&&await t.subscription.resendVerification())continue;return!1}const s=i.plan.effective.id;if((0,Ji.aG)(s))break;if(null==i.account){const i={title:"Start Free GitKraken Trial"},s={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${e}\n\nTry our developer productivity and collaboration services free for 7 days.`,{modal:!0},i,s)===i&&await t.subscription.loginOrSignUp())continue}else{const i={title:"Upgrade to Pro"},s={title:"Cancel",isCloseAffordance:!0};await r.window.showWarningMessage(`${e}\n\nContinue to use our developer productivity and collaboration services.`,{modal:!0},i,s)===i&&t.subscription.purchase()}return!1}return!0}("Snoozing requires a trial or paid plan",this.container))throw new Error("Unable to snooze item: subscription required");const t={provider:e.remote.provider.id,entityType:e.type,entityId:e.id,entityUrl:e.url},i=await this.connection.fetchGkDevApi("v1/enrich-items/snooze",{method:"POST",body:JSON.stringify(t)});if(!i.ok)throw new Error(`Unable to snooze item '${t.provider}|${t.entityUrl}#${e.id}':  (${i.status}) ${i.statusText}`);return(await i.json()).data}catch(e){throw Pe.Yd.error(e,t),e}}unsnoozeItem(e){return this.delete(e,"unsnooze")}}mr([(0,g.cM)()],FocusService.prototype,"get",1),mr([(0,g.cM)()],FocusService.prototype,"getPins",1),mr([(0,g.cM)()],FocusService.prototype,"getSnoozed",1),mr([(0,g.cM)({args:{0:e=>`${e.id} (${e.remote.provider.name} ${e.type})`}})],FocusService.prototype,"pinItem",1),mr([(0,g.cM)()],FocusService.prototype,"unpinItem",1),mr([(0,g.cM)({args:{0:e=>`${e.id} (${e.remote.provider.name} ${e.type})`}})],FocusService.prototype,"snoozeItem",1),mr([(0,g.cM)()],FocusService.prototype,"unsnoozeItem",1);var gr=Object.defineProperty,fr=Object.getOwnPropertyDescriptor,wr=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?fr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&gr(t,i,o),o};const vr="did-authenticate";class AuthenticationConnection{constructor(e,t){this.container=e,this.connection=t}_cancellationSource;_deferredCodeExchanges=new Map;_pendingStates=new Map;_statusBarItem;dispose(){}abort(){return null==this._cancellationSource?Promise.resolve():(this._cancellationSource.cancel(),new Promise((e=>setTimeout(e,50))))}async getAccountInfo(e){const t=(0,De.UH)();let i;try{i=await this.connection.fetchApi("user",void 0,e)}catch(e){throw Pe.Yd.error(e,t),e}if(!i.ok)throw Pe.Yd.error(void 0,`Getting account info failed: (${i.status}) ${i.statusText}`),new Error(i.statusText);const r=await i.json();return{id:r.id,accountName:r.username}}async login(e,t){this.updateStatusBarItem(!0);const i=(0,nt.Vj)(),s=this._pendingStates.get(t)??[];this._pendingStates.set(t,[...s,i]);const o=await r.env.asExternalUri(r.Uri.parse(`${r.env.uriScheme}://${this.container.context.extension.id}/${vr}?gkstate=${i}`)),n=this.connection.getAccountsUri("register",`${e.includes("gitlens")?"referrer=gitlens&":""}pass-token=true&return-url=${encodeURIComponent(o.toString())}`);await r.env.openExternal(n);let a=this._deferredCodeExchanges.get(t);return null==a&&(a=(0,$i.ue)(this.container.uri.onDidReceiveAuthenticationUri,this.getUriHandlerDeferredExecutor(t)),this._deferredCodeExchanges.set(t,a)),null!=this._cancellationSource&&(this._cancellationSource.cancel(),this._cancellationSource=void 0),this._cancellationSource=new r.CancellationTokenSource,this.openCompletionInputFallback(this._cancellationSource.token),Promise.race([a.promise,new Promise(((e,t)=>this._cancellationSource?.token.onCancellationRequested((()=>t("Cancelled"))))),new Promise(((e,t)=>setTimeout(t,12e4,"Cancelled")))]).finally((()=>{this._cancellationSource?.cancel(),this._cancellationSource=void 0,this._pendingStates.delete(t),a?.cancel(),this._deferredCodeExchanges.delete(t),this.updateStatusBarItem(!1)}))}async openCompletionInputFallback(e){const t=r.window.createInputBox();t.ignoreFocusOut=!0;const i=[];try{if(e.isCancellationRequested)return;const s=await new Promise((s=>{i.push(e.onCancellationRequested((()=>t.hide())),t.onDidHide((()=>s(void 0))),t.onDidChangeValue((e=>{if(e){try{const i=r.Uri.parse(e.trim());if(i.scheme&&"file"!==i.scheme)return void(t.validationMessage=void 0)}catch{}t.validationMessage="Please enter a valid authorization URL"}else t.validationMessage=void 0})),t.onDidAccept((()=>s(r.Uri.parse(t.value.trim()))))),t.title="GitKraken Sign In",t.placeholder="Please enter the provided authorization URL",t.prompt="If the auto-redirect fails, paste the authorization URL",t.show()}));null!=s&&this.container.uri.handleUri(s)}finally{t.dispose(),i.forEach((e=>{e.dispose()}))}}getUriHandlerDeferredExecutor(e){return(t,i,r)=>{const s=new URLSearchParams(t.query),o=this._pendingStates.get(e),n=s.get("gkstate");if(null==o||!n||!o.includes(n))return void Pe.Yd.log("State not found in accepted state. Skipping this execution...");const a=s.get("access-token"),c=s.get("code"),l=a??c;null==l?r("Token not returned"):i(l)}}updateStatusBarItem(e){e&&null==this._statusBarItem&&(this._statusBarItem=r.window.createStatusBarItem("gitlens.plus.signIn",r.StatusBarAlignment.Left),this._statusBarItem.name="GitKraken Sign in",this._statusBarItem.text="Signing in to GitKraken...",this._statusBarItem.show()),e||null==this._statusBarItem||(this._statusBarItem.dispose(),this._statusBarItem=void 0)}}wr([(0,g.fF)({args:!1})],AuthenticationConnection.prototype,"getAccountInfo",1),wr([(0,g.fF)()],AuthenticationConnection.prototype,"login",1);var yr=Object.defineProperty,br=Object.getOwnPropertyDescriptor,Cr=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?br(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&yr(t,i,o),o};const Ar="gitlens+",kr=["gitlens"];class AccountAuthenticationProvider{constructor(e,t){this.container=e,this._authConnection=new AuthenticationConnection(e,t),this._sessionsPromise=this.getSessionsFromStorage(),this._disposable=r.Disposable.from(this._authConnection,r.authentication.registerAuthenticationProvider(Ar,"GitKraken: GitLens",this,{supportsMultipleAccounts:!1}),this.container.storage.onDidChangeSecrets((()=>this.checkForUpdates())))}_onDidChangeSessions=new r.EventEmitter;get onDidChangeSessions(){return this._onDidChangeSessions.event}_disposable;_authConnection;_sessionsPromise;dispose(){this._disposable.dispose()}get secretStorageKey(){return`gitlens.plus.auth:${this.container.env}`}abort(){return this._authConnection.abort()}async createSession(e){const t=(0,De.UH)(),i=Pr(e=e.sort());try{const t=await this._authConnection.login(e,i),r=await this.createSessionForToken(t,e),s=await this._sessionsPromise,o=s.findIndex((e=>e.id===r.id||Pr(e.scopes)===i));return o>-1?s.splice(o,1,r):s.push(r),await this.storeSessions(s),this._onDidChangeSessions.fire({added:[r],removed:[],changed:[]}),r}catch(e){if("Cancelled"===e)throw e;throw Pe.Yd.error(e,t),r.window.showErrorMessage(`Unable to sign in to GitKraken: ${e}`),e}}async getSessions(e){const t=(0,De.UH)();e=e?.sort();const i=Pr(e),r=await this._sessionsPromise,s=null!=e?r.filter((e=>Pr(e.scopes)===i)):r;return(0,De.lH)(t,` • Found ${s.length} sessions`),s}async removeSession(e){const t=(0,De.UH)();try{const t=await this._sessionsPromise,i=t.findIndex((t=>t.id===e));if(-1===i)return void Pe.Yd.log(`Unable to remove session ${e}; Not found`);const r=t[i];t.splice(i,1),await this.storeSessions(t),this._onDidChangeSessions.fire({added:[],removed:[r],changed:[]})}catch(e){throw Pe.Yd.error(e,t),r.window.showErrorMessage(`Unable to sign out of GitKraken: ${e}`),e}}async removeSessionsByScopes(e){const t=(0,De.UH)();try{e=e?.sort();const t=Pr(e),i=[];let r=0;const s=await this._sessionsPromise;for(const e of s)Pr(e.scopes)===t?(s.splice(r,1),i.push(e)):r++;if(0===i.length)return;await this.storeSessions(s),this._onDidChangeSessions.fire({added:[],removed:i,changed:[]})}catch(e){throw Pe.Yd.error(e,t),r.window.showErrorMessage(`Unable to sign out of GitKraken: ${e}`),e}}async checkForUpdates(){const e=await this._sessionsPromise;this._sessionsPromise=this.getSessionsFromStorage();const t=await this._sessionsPromise,i=[],r=[];for(const r of t)e.some((e=>e.id===r.id))||i.push(r);for(const i of e)t.some((e=>e.id===i.id))||r.push(i);(i.length||r.length)&&(Pe.Yd.debug(`Firing sessions changed event; added=${i.length}, removed=${r.length}`),this._onDidChangeSessions.fire({added:i,removed:r,changed:[]}))}async createSessionForToken(e,t){const i=await this._authConnection.getAccountInfo(e);return{id:(0,nt.Vj)(),accessToken:e,account:{label:i.accountName,id:i.id},scopes:t}}async getSessionsFromStorage(){let e;try{const t=await this.container.storage.getSecret(this.secretStorageKey);if(!t||"[]"===t)return[];try{e=JSON.parse(t)}catch(e){try{await this.container.storage.deleteSecret(this.secretStorageKey)}catch{}throw e}}catch(e){return Pe.Yd.error(e,"Unable to read sessions from storage"),[]}const t=e.map((async e=>{const t=Pr(e.scopes);let i;if(Pe.Yd.debug(`Read session from storage with scopes=${t}`),null==e.account)try{i=await this._authConnection.getAccountInfo(e.accessToken),Pe.Yd.debug(`Verified session with scopes=${t}`)}catch(e){if("Unauthorized"===e.message)return}return{id:e.id,account:{label:null!=e.account?e.account.label??e.account.displayName??"<unknown>":i?.accountName??"<unknown>",id:e.account?.id??i?.id??"<unknown>"},scopes:e.scopes,accessToken:e.accessToken}})),i=(await Promise.allSettled(t)).filter((e=>"fulfilled"===e.status)).map((e=>e.value)).filter((e=>Boolean(e)));return Pe.Yd.debug(`Found ${i.length} verified sessions`),i.length!==e.length&&await this.storeSessions(i),i}async storeSessions(e){try{this._sessionsPromise=Promise.resolve(e),await this.container.storage.storeSecret(this.secretStorageKey,JSON.stringify(e))}catch(t){Pe.Yd.error(t,`Unable to store ${e.length} sessions`)}}}function Pr(e){return e?.join("|")}Cr([(0,g.fF)()],AccountAuthenticationProvider.prototype,"createSession",1),Cr([(0,g.fF)()],AccountAuthenticationProvider.prototype,"getSessions",1),Cr([(0,g.fF)()],AccountAuthenticationProvider.prototype,"removeSession",1),Cr([(0,g.fF)()],AccountAuthenticationProvider.prototype,"removeSessionsByScopes",1);var Sr=Object.defineProperty,Dr=Object.getOwnPropertyDescriptor,Rr=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Dr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Sr(t,i,o),o};class ServerConnection{constructor(e){this.container=e}dispose(){}get accountsUri(){return"staging"===this.container.env?r.Uri.parse("https://stagingapp.gitkraken.com"):"dev"===this.container.env?r.Uri.parse("https://devapp.gitkraken.com"):r.Uri.parse("https://app.gitkraken.com")}getAccountsUri(e,t){let i=null!=e?r.Uri.joinPath(this.accountsUri,e):this.accountsUri;return null!=t&&(i=i.with({query:t})),i}get baseApiUri(){return"staging"===this.container.env?r.Uri.parse("https://stagingapi.gitkraken.com"):"dev"===this.container.env?r.Uri.parse("https://devapi.gitkraken.com"):r.Uri.parse("https://api.gitkraken.com")}getApiUrl(...e){return r.Uri.joinPath(this.baseApiUri,...e).toString()}get baseGkDevApiUri(){return"staging"===this.container.env?r.Uri.parse("https://staging-api.gitkraken.dev"):"dev"===this.container.env?r.Uri.parse("https://dev-api.gitkraken.dev"):r.Uri.parse("https://api.gitkraken.dev")}getGkDevApiUrl(...e){return r.Uri.joinPath(this.baseGkDevApiUri,...e).toString()}get siteUri(){const{env:e}=this.container;return"staging"===e?r.Uri.parse("https://staging.gitkraken.com"):"dev"===e?r.Uri.parse("https://dev.gitkraken.com"):r.Uri.parse("https://gitkraken.com")}getSiteUri(e,t){let i=null!=e?r.Uri.joinPath(this.siteUri,e):this.siteUri;return null!=t&&(i=i.with({query:t})),i}get userAgent(){return"Visual-Studio-Code-GitLens"}async fetch(e,t,i){const r=(0,De.UH)();try{i??=await this.getAccessToken();const r={agent:(0,at.Nx)(),...t,headers:{Authorization:`Bearer ${i}`,"User-Agent":this.userAgent,"Content-Type":"application/json",...t?.headers}};return await(0,at.he)(e,r)}catch(e){throw Pe.Yd.error(e,r),e}}async fetchApi(e,t,i){return this.fetch(this.getApiUrl(e),t,i)}async fetchApiGraphQL(e,t,i){return this.fetchApi(e,{method:"POST",...i,body:JSON.stringify(t)})}async fetchGkDevApi(e,t,i){return this.fetch(this.getGkDevApiUrl(e),t,i)}async getAccessToken(){const e=await this.container.subscription.getAuthenticationSession();if(null!=e)return e.accessToken;throw new Error("Authentication required")}}Rr([(0,ne.H)()],ServerConnection.prototype,"accountsUri",1),Rr([(0,ne.H)()],ServerConnection.prototype,"baseApiUri",1),Rr([(0,ne.H)()],ServerConnection.prototype,"baseGkDevApiUri",1),Rr([(0,ne.H)()],ServerConnection.prototype,"siteUri",1),Rr([(0,ne.H)()],ServerConnection.prototype,"userAgent",1);var $r=Object.defineProperty,_r=Object.getOwnPropertyDescriptor,Fr=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?_r(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&$r(t,i,o),o};class IntegrationAuthenticationService{constructor(e){this.container=e}providers=new Map;dispose(){this.providers.clear()}registerProvider(e,t){if(this.providers.has(e))throw new Error(`Provider with id ${e} already registered`);return this.providers.set(e,t),{dispose:()=>this.providers.delete(e)}}hasProvider(e){return this.providers.has(e)}async createSession(e,t){const i=this.providers.get(e);if(null==i)throw new Error(`Provider with id ${e} not registered`);const r=await(i?.createSession(t));if(null==r)return;const s=this.getSecretKey(e,i.getSessionId(t));return await this.container.storage.storeSecret(s,JSON.stringify(r)),r}async getSession(e,t,i){const r=this.providers.get(e);if(null==r)throw new Error(`Provider with id ${e} not registered`);const s=this.getSecretKey(e,r.getSessionId(t));let o;i?.forceNewSession&&await this.container.storage.deleteSecret(s);try{const e=await this.container.storage.getSecret(s);e&&(o=JSON.parse(e))}catch(e){try{await this.container.storage.deleteSecret(s)}catch{}if(!i?.createIfNeeded)throw e}return i?.createIfNeeded&&null==o?this.createSession(e,t):o}async deleteSession(e,t){const i=this.providers.get(e);if(null==i)throw new Error(`Provider with id ${e} not registered`);const r=this.getSecretKey(e,i.getSessionId(t));await this.container.storage.deleteSecret(r)}getSecretKey(e,t){return`gitlens.integration.auth:${e}|${t}`}}Fr([(0,g.fF)()],IntegrationAuthenticationService.prototype,"createSession",1),Fr([(0,g.fF)()],IntegrationAuthenticationService.prototype,"getSession",1),Fr([(0,g.fF)()],IntegrationAuthenticationService.prototype,"deleteSession",1);var Tr=i(9967),xr=i(2215),Ir=Object.defineProperty,Or=Object.getOwnPropertyDescriptor,Br=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Or(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Ir(t,i,o),o};class SubscriptionService{constructor(e,t,i){this.container=e,this.connection=t,this._disposable=r.Disposable.from((0,Ht.IH)(e.onReady)(this.onReady,this),this.container.accountAuthentication.onDidChangeSessions((e=>setTimeout((()=>this.onAuthenticationChanged(e)),0)),this),s.D.onDidChange((e=>{s.D.changed(e,"plusFeatures")&&this.updateContext()})));const o=this.getStoredSubscription();null!=o&&(0,$e.L5)(i,"< 14.0")&&(o.previewTrial=void 0),this.changeSubscription(o,{silent:!0}),setTimeout((()=>{this.ensureSession(!1)}),1e4)}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}_disposable;_subscription;_statusBarSubscription;_validationTimer;dispose(){this._statusBarSubscription?.dispose(),this._disposable.dispose()}async onAuthenticationChanged(e){let t=this._session;if(null==t&&null!=this._sessionPromise&&(t=await this._sessionPromise),null!=t&&e.removed?.some((e=>e.id===t.id)))return this._session=void 0,this._sessionPromise=void 0,void this.logout();const i=e.added?.[0]??e.changed?.[0];null!=i&&(i.id===t?.id&&i.accessToken===t?.accessToken||(this._session=t,this.validate({force:!0})))}_etag=0;get etag(){return this._etag}onReady(){this._disposable=r.Disposable.from(this._disposable,this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),...this.registerCommands()),this.updateContext()}onRepositoriesChanged(e){this.updateContext()}registerCommands(){return this.container.viewCommands,[(0,Zi.xR)(u.Gh.PlusLoginOrSignUp,(()=>this.loginOrSignUp())),(0,Zi.xR)(u.Gh.PlusLogout,(()=>this.logout())),(0,Zi.xR)(u.Gh.PlusStartPreviewTrial,(()=>this.startPreviewTrial())),(0,Zi.xR)(u.Gh.PlusManage,(()=>this.manage())),(0,Zi.xR)(u.Gh.PlusPurchase,(()=>this.purchase())),(0,Zi.xR)(u.Gh.PlusResendVerification,(()=>this.resendVerification())),(0,Zi.xR)(u.Gh.PlusValidate,(()=>this.validate({force:!0}))),(0,Zi.xR)(u.Gh.PlusShowPlans,(()=>this.showPlans())),(0,Zi.xR)(u.Gh.PlusHide,(()=>s.D.updateEffective("plusFeatures.enabled",!1))),(0,Zi.xR)(u.Gh.PlusRestore,(()=>s.D.updateEffective("plusFeatures.enabled",!0))),(0,Zi.xR)("gitlens.plus.reset",(()=>this.logout(!0)))]}async getAuthenticationSession(e=!1){return this.ensureSession(e)}async getSubscription(e=!1){const t=this.ensureSession(!1);return e||await t,this._subscription}async learnAboutPreviewOrTrial(){const e=await this.getSubscription();e.state===Ji.jc.FreeInPreviewTrial?(0,Re.lN)(this.container.context.extension.id,"gitlens.welcome","gitlens.welcome.preview",!1):e.state===Ji.jc.FreePlusInTrial&&(0,Re.lN)(this.container.context.extension.id,"gitlens.welcome","gitlens.welcome.trial",!1)}async loginOrSignUp(){if(!await(0,xr.C)())return!1;await this.container.accountAuthentication.abort(),this.showAccountView();const e=await this.ensureSession(!0),t=Boolean(e);if(t){const{account:e,plan:{actual:t,effective:i}}=this._subscription;if(!1===e?.verified){const e={title:"Resend Verification",isCloseAffordance:!0},t={title:"Cancel"};await r.window.showInformationMessage(`You must verify your email before you can access ${i.name}.`,e,t)===e&&this.resendVerification()}else if((0,Ji.dz)(this._subscription)){const e=(0,Ji.PY)(this._subscription,"days"),t={title:"OK",isCloseAffordance:!0},s={title:"Learn More"};await r.window.showInformationMessage(`Welcome to ${i.name} (Trial). You can now try Pro features on privately hosted repos for ${(0,P._6)("more day",e??0)}.`,{modal:!0},t,s)===s&&this.learnAboutPreviewOrTrial()}else(0,Ji.ww)(this._subscription)?r.window.showInformationMessage(`Welcome to ${t.name}. You can now use Pro features on privately hosted repos.`,"OK"):r.window.showInformationMessage(`Welcome to ${t.name}. You can use Pro features on local & publicly hosted repos.`,"OK")}return t}async logout(e=!1){return this.logoutCore(e)}async logoutCore(e=!1){this._lastValidatedDate=void 0,null!=this._validationTimer&&(clearInterval(this._validationTimer),this._validationTimer=void 0),await this.container.accountAuthentication.abort(),this._sessionPromise=void 0,null!=this._session?(this.container.accountAuthentication.removeSession(this._session.id),this._session=void 0):this.container.accountAuthentication.removeSessionsByScopes(kr),e&&this.container.debugging?this.changeSubscription(void 0):this.changeSubscription({...this._subscription,plan:{actual:(0,Ji.fV)(Ji.Cx.Free,!1,0,void 0,null!=this._subscription.plan?.actual?.startedOn?new Date(this._subscription.plan.actual.startedOn):void 0),effective:(0,Ji.fV)(Ji.Cx.Free,!1,0,void 0,null!=this._subscription.plan?.effective?.startedOn?new Date(this._subscription.plan.actual.startedOn):void 0)},account:void 0})}manage(){r.env.openExternal(this.connection.getAccountsUri())}async purchase(){await(0,xr.C)()&&(null==this._subscription.account?this.showPlans():r.env.openExternal(this.connection.getAccountsUri("subscription","product=gitlens&license=PRO")),await this.showAccountView())}async resendVerification(){if(this._subscription.account?.verified)return!0;const e=(0,De.UH)();this.showAccountView(!0);const t=await this.ensureSession(!1);if(null==t)return!1;try{const i=await this.connection.fetchApi("resend-email",{method:"POST",body:JSON.stringify({id:t.account.id})},t.accessToken);if(!i.ok)return Pe.Yd.error("",e,`Unable to resend verification email; status=(${i.status}): ${i.statusText}`),r.window.showErrorMessage(`Unable to resend verification email; Status: ${i.statusText}`,"OK"),!1;const s={title:"Recheck"},o={title:"Cancel"};if(await r.window.showInformationMessage("Once you have verified your email address, click 'Recheck'.",s,o)===s)return await this.validate({force:!0}),!0}catch(t){Pe.Yd.error(t,e),r.window.showErrorMessage("Unable to resend verification email","OK")}return!1}async showAccountView(e=!1){e&&!s.D.get("plusFeatures.enabled",void 0,!0)||this.container.accountView.visible||await(0,Zi.P0)(u.Gh.ShowAccountView)}showPlans(){r.env.openExternal(this.connection.getSiteUri("gitlens/pricing"))}async startPreviewTrial(e){if(!await(0,xr.C)())return;let{plan:t,previewTrial:i}=this._subscription;if(null!=i){if(this.showAccountView(),!e&&t.effective.id===Ji.Cx.Free){const e={title:"Start Free GitKraken Trial",isCloseAffordance:!0},t={title:"Cancel"};await r.window.showInformationMessage("Your 3-day Pro preview has ended, start a free GitKraken trial to get an additional 7 days.\n\n✨ A trial or paid plan is required to use Pro features on privately hosted repos.",{modal:!0},e,t)===e&&this.loginOrSignUp()}return}if((0,Ji._n)(this._subscription))return;const s=new Date;let o,n=new Date(s);this.container.debugging?(n=(0,oe.IH)(n,{minutes:1}),o=0):(n.setHours(23,59,59,999),n=(0,oe.IH)(n,{days:3}),o=3),i={startedOn:s.toISOString(),expiresOn:n.toISOString()},this.changeSubscription({...this._subscription,plan:{...this._subscription.plan,effective:(0,Ji.fV)(Ji.Cx.Pro,!1,0,void 0,s,n)},previewTrial:i}),e||setTimeout((async()=>{const e={title:"Learn More"};await r.window.showInformationMessage(`You can now preview Pro features for ${(0,P._6)("day",o)}. After which, you can start a free GitKraken trial for an additional 7 days.`,{title:"OK",isCloseAffordance:!0},e)===e&&this.learnAboutPreviewOrTrial()}),1)}async validate(e){const t=(0,De.UH)(),i=await this.ensureSession(!1);if(null!=i)try{await this.checkInAndValidate(i,e)}catch(e){Pe.Yd.error(e,t)}else this.changeSubscription(this._subscription)}_lastValidatedDate;async checkInAndValidate(e,t){if(!t?.force&&null!=this._lastValidatedDate&&Date.now()-this._lastValidatedDate.getTime()<432e5&&!(0,Ji.Z1)(this._subscription))return;if(!t?.showSlowProgress)return this.checkInAndValidateCore(e);const i=this.checkInAndValidateCore(e);await Promise.race([i,new Promise((e=>setTimeout(e,3e3,!0)))])&&await r.window.withProgress({location:r.ProgressLocation.Notification,title:"Validating your GitKraken account..."},(()=>i))}async checkInAndValidateCore(e){const t=(0,De.UH)();this._lastValidatedDate=void 0;try{const t={id:e.account.id,platform:(0,ct.Xf)(),gitlensVersion:this.container.version,machineId:r.env.machineId,sessionId:r.env.sessionId,vscodeEdition:r.env.appName,vscodeHost:r.env.appHost,vscodeVersion:r.version,previewStartedOn:this._subscription.previewTrial?.startedOn,previewExpiresOn:this._subscription.previewTrial?.expiresOn},i=await this.connection.fetchApi("gitlens/checkin",{method:"POST",body:JSON.stringify(t)},e.accessToken);if(!i.ok)throw new zi.dt("Unable to validate account",void 0,i.status,i.statusText);const s=await i.json();this.validateSubscription(s)}catch(e){if(Pe.Yd.error(e,t),e instanceof zi.dt)throw e;throw new zi.dt("Unable to validate account",e)}finally{this.startDailyValidationTimer()}}startDailyValidationTimer(){null!=this._validationTimer&&clearInterval(this._validationTimer),this._validationTimer=setInterval((()=>{null!=this._lastValidatedDate&&this._lastValidatedDate.getDate()===(new Date).getDate()||this.ensureSession(!1,!0)}),216e5)}validateSubscription(e){const t={id:e.user.id,name:e.user.name,email:e.user.email,verified:"activated"===e.user.status,createdOn:e.user.createdDate,organizationIds:e.orgIds??[]},i=Object.entries(e.licenses.effectiveLicenses),r=Object.entries(e.licenses.paidLicenses);let s,o;if(r.length>0){r.length>1&&r.sort(((e,t)=>(0,Ji.kU)(Wr(t[0]))+Mr(t[1].latestStatus)-((0,Ji.kU)(Wr(e[0]))+Mr(e[1].latestStatus))));const[e,t]=r[0];s=(0,Ji.fV)(Wr(e),Nr(e),t.reactivationCount??0,t.organizationId,new Date(t.latestStartDate),new Date(t.latestEndDate),"cancelled"===t.latestStatus)}if(null==s&&(s=(0,Ji.fV)(Ji.Cx.FreePlus,!1,0,void 0,null!=e.user.firstGitLensCheckIn?new Date(e.user.firstGitLensCheckIn):null!=e.user.createdDate?new Date(e.user.createdDate):void 0)),i.length>0){i.length>1&&i.sort(((e,t)=>(0,Ji.kU)(Wr(t[0]))+Mr(t[1].latestStatus)-((0,Ji.kU)(Wr(e[0]))+Mr(e[1].latestStatus))));const[e,t]=i[0];o=(0,Ji.fV)(Wr(e),Nr(e),t.reactivationCount??0,t.organizationId,new Date(t.latestStartDate),new Date(t.latestEndDate),"cancelled"===t.latestStatus)}(null==o||(0,Ji.kU)(s.id)>=(0,Ji.kU)(o.id))&&(o={...s}),this._lastValidatedDate=new Date,this.changeSubscription({...this._subscription,plan:{actual:s,effective:o},account:t},{store:!0})}_sessionPromise;_session;async ensureSession(e,t){if(null!=this._sessionPromise&&void 0===this._session&&await this._sessionPromise,!t&&null!=this._session)return this._session;if(null===this._session&&!e)return;void 0===this._sessionPromise&&(this._sessionPromise=this.getOrCreateSession(e).then((e=>(this._session=e,this._sessionPromise=void 0,this._session)),(()=>(this._session=null,this._sessionPromise=void 0,this._session))));return await this._sessionPromise??void 0}async getOrCreateSession(e){const t=(0,De.UH)();let i;try{i=await r.authentication.getSession(Ar,kr,{createIfNone:e,silent:!e})}catch(e){if(i=null,e instanceof Error&&e.message.includes("User did not consent"))return Pe.Yd.debug(t,"User declined authentication"),await this.logoutCore(),null;Pe.Yd.error(e,t)}if(null==i)return Pe.Yd.debug(t,"No valid session was found"),await this.logoutCore(),i??null;try{await this.checkInAndValidate(i,{showSlowProgress:e,force:e})}catch(s){if(Pe.Yd.error(s,t),this.container.telemetry.sendEvent("account/validation/failed",{"account.id":i.account.id,exception:String(s),code:s.original?.code,statusCode:s.statusCode}),Pe.Yd.debug(t,`Account validation failed (${s.statusCode??s.original?.code})`),s instanceof zi.dt){const t=i.account.label;if("ENOTFOUND"!==s.original?.code&&null!=s.statusCode&&s.statusCode<500&&s.statusCode>=400){if(i=null,await this.logoutCore(),e){const e=401===s.statusCode;queueMicrotask((async()=>{const i={title:"Retry Sign In"};await r.window.showErrorMessage(`Unable to sign in to your (${t}) GitKraken account. Please try again. If this issue persists, please contact support.${e?"":` Error=${s.message}`}`,i)===i&&this.loginOrSignUp()}))}}else i=i??null}}return i}changeSubscription(e,t){null==e&&(e={plan:{actual:(0,Ji.fV)(Ji.Cx.Free,!1,0,void 0),effective:(0,Ji.fV)(Ji.Cx.Free,!1,0,void 0)},account:void 0,state:Ji.jc.Free}),(0,Ji.Z1)(e)&&(e={...e,plan:{...e.plan,effective:e.plan.actual}}),!(0,Ji.ww)(e)&&null!=e.previewTrial&&((0,Ji.EE)(e.previewTrial.expiresOn)??0)>0&&(e={...e,plan:{...e.plan,effective:(0,Ji.fV)(Ji.Cx.Pro,!1,0,void 0,new Date(e.previewTrial.startedOn),new Date(e.previewTrial.expiresOn))}}),e.state=(0,Ji.RE)(e);const i=this._subscription,r=null!=i&&JSON.stringify(i)===JSON.stringify(e);r?t?.store&&this.storeSubscription(e):(queueMicrotask((()=>{let t=Er(e);this.container.telemetry.setGlobalAttributes(t),t={...t,...r?{}:Er(i,"previous")},this.container.telemetry.sendEvent(null==i?"subscription":"subscription/changed",t)})),this.storeSubscription(e),this._subscription=e,this._etag=Date.now(),t?.silent||(this.updateContext(),null!=i&&this._onDidChange.fire({current:e,previous:i,etag:this._etag})))}getStoredSubscription(){const e=this.container.storage.get("premium:subscription");let t,i;return null!=e?.data?(({lastValidatedAt:t,...i}=e.data),this._lastValidatedDate=null!=t?new Date(t):void 0):i=void 0,null!=i&&(i.plan.actual.name=(0,Ji.tL)(i.plan.actual.id),i.plan.effective.name=(0,Ji.tL)(i.plan.effective.id)),i}async storeSubscription(e){return this.container.storage.store("premium:subscription",{v:1,data:{...e,lastValidatedAt:this._lastValidatedDate?.getTime()}})}_cancellationSource;_updateAccessContextDebounced;updateContext(){this._updateAccessContextDebounced?.cancel(),null==this._updateAccessContextDebounced&&(this._updateAccessContextDebounced=(0,Ht.Ds)(this.updateAccessContext.bind(this),500)),null!=this._cancellationSource&&this._cancellationSource.cancel(),this._cancellationSource=new r.CancellationTokenSource,this._updateAccessContextDebounced(this._cancellationSource.token),this.updateStatusBar();const{plan:{actual:e},state:t}=this._subscription;(0,Ni.v)("gitlens:plus",e.id!=Ji.Cx.Free?e.id:void 0),(0,Ni.v)("gitlens:plus:state",t)}async updateAccessContext(e){let t=!1;if(0!==this.container.git.repositoryCount&&(({allowed:t}=await this.container.git.access()),e.isCancellationRequested))return;const i=s.D.get("plusFeatures.enabled")??!0;let r;if(!i&&"mixed"===t){r=[];for(const t of this.container.git.repositories){if(t.closed)continue;const i=await this.container.git.access(void 0,t.uri);if(e.isCancellationRequested)return;i.allowed||r.push(t.uri.toString())}}(0,Ni.v)("gitlens:plus:enabled",Boolean(t)||i),(0,Ni.v)("gitlens:plus:required",!1===t),(0,Ni.v)("gitlens:plus:disallowedRepos",r)}updateStatusBar(){const{account:e,plan:{effective:t},state:i}=this._subscription;if(t.id===Ji.Cx.Free)return this._statusBarSubscription?.dispose(),void(this._statusBarSubscription=void 0);const s=(0,Ji.dz)(this._subscription);if(!s&&!1!==e?.verified)return this._statusBarSubscription?.dispose(),void(this._statusBarSubscription=void 0);if(null==this._statusBarSubscription&&(this._statusBarSubscription=r.window.createStatusBarItem("gitlens.plus.subscription",r.StatusBarAlignment.Left,1)),this._statusBarSubscription.name="GitKraken Subscription",this._statusBarSubscription.command=u.Gh.ShowAccountView,!1===e?.verified)this._statusBarSubscription.text=`$(warning) ${t.name} (Unverified)`,this._statusBarSubscription.backgroundColor=new r.ThemeColor("statusBarItem.warningBackground"),this._statusBarSubscription.tooltip=new r.MarkdownString(s?`**Please verify your email**\n\nYou must verify your email before you can start your **${t.name}** trial.\n\nClick for details`:"**Please verify your email**\n\nYou must verify your email before you can use Pro features on privately hosted repos.\n\nClick for details",!0);else{const e=(0,Ji.PY)(this._subscription,"days"),s=i===Ji.jc.FreePlusInTrial&&t.trialReactivationCount>0;this._statusBarSubscription.text=`${t.name} (Trial)`,this._statusBarSubscription.tooltip=new r.MarkdownString((s?`[See what's new](https://help.gitkraken.com/gitlens/gitlens-release-notes-current/) with\n\t\t\t${(0,P._6)("day",e??0,{infix:" more "})}\n\t\t\tin your **${t.name}** trial.`:`You have ${(0,P._6)("day",e??0)} remaining in your **${t.name}** trial.`)+" Once your trial ends, you'll need a paid plan to continue using ✨ features.\n\nTry our\n\t\t\t[other developer tools](https://www.gitkraken.com/suite) also included in your trial.",!0)}this._statusBarSubscription.show()}}function Er(e,t){return null==e?{}:{...(0,Tr.xH)(e.account,{arrays:"join",prefix:(t?`${t}.`:"")+"account",skipPaths:["name","email"],skipNulls:!0,stringify:!0}),...(0,Tr.xH)(e.plan,{prefix:(t?`${t}.`:"")+"subscription",skipPaths:["actual.name","effective.name"],skipNulls:!0,stringify:!0}),...(0,Tr.xH)(e.previewTrial,{prefix:(t?`${t}.`:"")+"subscription.previewTrial",skipPaths:["actual.name","effective.name"],skipNulls:!0,stringify:!0}),"subscription.state":e.state}}function Wr(e){switch(e){case"gitlens-pro":case"bundle-pro":return Ji.Cx.Pro;case"gitlens-teams":case"bundle-teams":return Ji.Cx.Teams;case"gitlens-hosted-enterprise":case"gitlens-self-hosted-enterprise":case"gitlens-standalone-enterprise":case"bundle-hosted-enterprise":case"bundle-self-hosted-enterprise":case"bundle-standalone-enterprise":return Ji.Cx.Enterprise;default:return Ji.Cx.FreePlus}}function Nr(e){switch(e){case"bundle-pro":case"bundle-teams":case"bundle-hosted-enterprise":case"bundle-self-hosted-enterprise":case"bundle-standalone-enterprise":return!0;default:return!1}}function Mr(e){switch(e){case"active":return 100;case"expired":case"cancelled":return-100;case"in_trial":case"trial":return 1;case"canceled":case"non_renewing":return 0}}function Ur(e,t){return r.Disposable.from((0,Zi.xR)(u.Gh.ShowGraph,((...e)=>"panel"===s.D.get("graph.layout")?(0,Zi.P0)(u.Gh.ShowGraphView,...e):(0,Zi.P0)(u.Gh.ShowGraphPage,...e))),(0,Zi.xR)("gitlens.graph.switchToEditorLayout",(async()=>{await s.D.updateEffective("graph.layout","editor"),queueMicrotask((()=>{(0,Zi.P0)(u.Gh.ShowGraphPage)}))})),(0,Zi.xR)("gitlens.graph.switchToPanelLayout",(async()=>{await s.D.updateEffective("graph.layout","panel"),queueMicrotask((async()=>{await(0,Zi.dO)("gitlens.views.graph.resetViewLocation"),await(0,Zi.dO)("gitlens.views.graphDetails.resetViewLocation"),(0,Zi.P0)(u.Gh.ShowGraphView)}))})),(0,Zi.xR)(u.Gh.ToggleGraph,((...e)=>{(0,Ni.fw)("gitlens:webviewView:graph:visible")?(0,Zi.dO)("workbench.action.closePanel"):(0,Zi.P0)(u.Gh.ShowGraphView,...e)})),(0,Zi.xR)(u.Gh.ToggleMaximizedGraph,((...e)=>{(0,Ni.fw)("gitlens:webviewView:graph:visible")||(0,Zi.P0)(u.Gh.ShowGraphView,...e),(0,Zi.dO)("workbench.action.toggleMaximizedPanel")})),(0,Zi.xR)(u.Gh.ShowInCommitGraph,(i=>{const r="preserveFocus"in i&&(i.preserveFocus??!1);"panel"===s.D.get("graph.layout")?e.graphView.show({preserveFocus:r},i):t.show({preserveFocus:r},i)})),(0,Zi.xR)(u.Gh.ShowInCommitGraphView,(t=>{const i="preserveFocus"in t&&(t.preserveFocus??!1);e.graphView.show({preserveFocus:i},t)})))}Br([(0,g.fF)()],SubscriptionService.prototype,"learnAboutPreviewOrTrial",1),Br([(0,g.cM)()],SubscriptionService.prototype,"loginOrSignUp",1),Br([(0,g.cM)()],SubscriptionService.prototype,"logout",1),Br([(0,g.cM)()],SubscriptionService.prototype,"manage",1),Br([(0,g.cM)()],SubscriptionService.prototype,"purchase",1),Br([(0,Gt.H)(),(0,g.cM)()],SubscriptionService.prototype,"resendVerification",1),Br([(0,g.cM)()],SubscriptionService.prototype,"showAccountView",1),Br([(0,Gt.H)(),(0,g.cM)()],SubscriptionService.prototype,"startPreviewTrial",1),Br([(0,Gt.H)(),(0,g.cM)()],SubscriptionService.prototype,"validate",1),Br([(0,Gt.H)((e=>e.account.id))],SubscriptionService.prototype,"checkInAndValidate",1),Br([(0,g.fF)({args:{0:e=>e?.account.label}})],SubscriptionService.prototype,"checkInAndValidateCore",1),Br([(0,g.fF)()],SubscriptionService.prototype,"validateSubscription",1),Br([(0,Gt.H)(),(0,g.fF)()],SubscriptionService.prototype,"ensureSession",1),Br([(0,g.fF)()],SubscriptionService.prototype,"getOrCreateSession",1),Br([(0,g.fF)()],SubscriptionService.prototype,"changeSubscription",1);class GraphStatusBarController{_disposable;_statusBarItem;constructor(e){this._disposable=r.Disposable.from(s.D.onDidChange(this.onConfigurationChanged,this),e.subscription.onDidChange(this.onSubscriptionChanged,this),(0,Ht.IH)(e.onReady)((()=>queueMicrotask((()=>this.updateStatusBar())))),(0,Ni.ve)((e=>{"gitlens:enabled"!==e&&"gitlens:plus:enabled"!==e||this.updateStatusBar()})),{dispose:()=>this._statusBarItem?.dispose()})}dispose(){this._disposable.dispose()}onConfigurationChanged(e){(s.D.changed(e,"graph.statusBar.enabled")||s.D.changed(e,"plusFeatures.enabled"))&&this.updateStatusBar()}onSubscriptionChanged(e){this.updateStatusBar()}updateStatusBar(){s.D.get("graph.statusBar.enabled")&&(0,Ni.fw)("gitlens:enabled")&&(0,xr.L)()?(null==this._statusBarItem&&(this._statusBarItem=r.window.createStatusBarItem("gitlens.graph",r.StatusBarAlignment.Left,9997),this._statusBarItem.name="GitLens Commit Graph",this._statusBarItem.command=u.Gh.ShowGraph,this._statusBarItem.text="$(gitlens-graph)",this._statusBarItem.tooltip=new r.MarkdownString("Visualize commits on the Commit Graph ✨"),this._statusBarItem.accessibilityInformation={label:"Show the GitLens Commit Graph"}),this._statusBarItem.show()):(this._statusBarItem?.dispose(),this._statusBarItem=void 0)}}var Lr=i(635),Gr=i(1907),Hr=Object.defineProperty,Vr=Object.getOwnPropertyDescriptor,Yr=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Vr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Hr(t,i,o),o};class WorkspacesApi{constructor(e,t){this.container=e,this.connection=t}async getWorkspace(e,t){let i;if(t?.includeRepositories){let e=`(first: ${t?.repoCount??Gr.CL}`;t?.repoPage&&(e+=`, page: ${t.repoPage}`),e+=")",i=`\n\t\t\t\tprovider_data {\n\t\t\t\t\trepositories ${e} {\n\t\t\t\t\t\ttotal_count\n\t\t\t\t\t\tpage_info {\n\t\t\t\t\t\t\tend_cursor\n\t\t\t\t\t\t\thas_next_page\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnodes {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\trepository_id\n\t\t\t\t\t\t\tprovider\n\t\t\t\t\t\t\tprovider_project_name\n\t\t\t\t\t\t\tprovider_organization_id\n\t\t\t\t\t\t\tprovider_organization_name\n\t\t\t\t\t\t\turl\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t`}const r=`\n\t\t\tquery getWorkspace {\n\t\t\t\tproject(id: "${e}") { ${`\n\t\t\tid\n\t\t\tdescription\n\t\t\tname\n\t\t\torganization {\n\t\t\t\tid\n\t\t\t}\n\t\t\tprovider\n\t\t\tazure_organization_id\n\t\t\tazure_project\n\t\t\trepo_relation\n\t\t\t${i??""}\n\t\t`} }\n\t\t\t}\n\t\t`,s=await this.fetch({query:r});if(!s.ok)throw Pe.Yd.error(void 0,`Getting workspace failed: (${s.status}) ${s.statusText}`),new Error(s.statusText);return await s.json()}async getWorkspaces(e){let t;if(e?.includeRepositories){let i=`(first: ${e?.repoCount??Gr.CL}`;e?.repoPage&&(i+=`, page: ${e.repoPage}`),i+=")",t=`\n\t\t\t\tprovider_data {\n\t\t\t\t\trepositories ${i} {\n\t\t\t\t\t\ttotal_count\n\t\t\t\t\t\tpage_info {\n\t\t\t\t\t\t\tend_cursor\n\t\t\t\t\t\t\thas_next_page\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnodes {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\trepository_id\n\t\t\t\t\t\t\tprovider\n\t\t\t\t\t\t\tprovider_project_name\n\t\t\t\t\t\t\tprovider_organization_id\n\t\t\t\t\t\t\tprovider_organization_name\n\t\t\t\t\t\t\turl\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t`}const i=`\n\t\t\ttotal_count\n\t\t\tpage_info {\n\t\t\t\tend_cursor\n\t\t\t\thas_next_page\n\t\t\t}\n\t\t\tnodes {\n\t\t\t\tid\n\t\t\t\tdescription\n\t\t\t\tname\n\t\t\t\torganization {\n\t\t\t\t\tid\n\t\t\t\t}\n\t\t\t\tprovider\n\t\t\t\tazure_organization_id\n\t\t\t\tazure_project\n\t\t\t\trepo_relation\n\t\t\t\t${t??""}\n\t\t\t}\n\t\t`;let r=`(first: ${e?.count??Gr.U1}`;e?.cursor?r+=`, after: "${e.cursor}"`:e?.page&&(r+=`, page: ${e.page}`),r+=")";let s="query getWorkpaces {";if(s+=`memberProjects: projects ${r} { ${i} }`,null==e?.cursor&&e?.includeOrganizations){const t=(await this.container.subscription.getSubscription())?.account?.organizationIds??[];for(const r of t){let t=`(first: ${e?.count??Gr.U1}`;e?.page&&(t+=`, page: ${e.page}`),t+=`, organization_id: "${r}")`,s+=`organizationProjects_${r}: projects ${t} { ${i} }`}}s+="}";const o=await this.fetch({query:s});if(!o.ok)throw Pe.Yd.error(void 0,`Getting workspaces failed: (${o.status}) ${o.statusText}`),new Error(o.statusText);const n=new Set,a=await o.json();if(null==a?.data)return;let c;for(const e of Object.values(a.data))if(null!=e)if(null==c){c={data:{projects:e}};for(const t of e.nodes)n.add(t.id)}else for(const t of e.nodes)n.has(t.id)||(n.add(t.id),c.data.projects.nodes.push(t));return null!=c&&(c.data.projects.total_count=n.size),c}async getWorkspaceRepositories(e,t){let i=`(first: ${t?.count??Gr.CL}`;t?.cursor?i+=`, after: "${t.cursor}"`:t?.page&&(i+=`, page: ${t.page}`),i+=")";const r=await this.fetch({query:`\n\t\t\t\t\tquery getWorkspaceRepos {\n\t\t\t\t\t\tproject (id: "${e}") {\n\t\t\t\t\t\t\tprovider_data {\n\t\t\t\t\t\t\t\trepositories ${i} {\n\t\t\t\t\t\t\t\t\ttotal_count\n\t\t\t\t\t\t\t\t\tpage_info {\n\t\t\t\t\t\t\t\t\t\tend_cursor\n\t\t\t\t\t\t\t\t\t\thas_next_page\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tnodes {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\trepository_id\n\t\t\t\t\t\t\t\t\t\tprovider\n\t\t\t\t\t\t\t\t\t\tprovider_project_name\n\t\t\t\t\t\t\t\t\t\tprovider_organization_id\n\t\t\t\t\t\t\t\t\t\tprovider_organization_name\n\t\t\t\t\t\t\t\t\t\turl\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`});if(!r.ok)throw Pe.Yd.error(void 0,`Getting workspace repos failed: (${r.status}) ${r.statusText}`),new Error(r.statusText);return await r.json()}async createWorkspace(e){if(!e.name||!e.description||!e.provider)return;if(!(e.provider!==Gr.Xu.Azure||e.azureOrganizationName&&e.azureProjectName))return;if((e.provider===Gr.Xu.GitHubEnterprise||e.provider===Gr.Xu.GitLabSelfHosted)&&!e.hostUrl)return;const t=await this.fetch({query:`\n\t\t\t\t\tmutation createWorkspace {\n\t\t\t\t\t\tcreate_project(\n\t\t\t\t\t\t\tinput: {\n\t\t\t\t\t\t  \t\ttype: GK_PROJECT\n\t\t\t\t\t\t  \t\tname: "${e.name}"\n\t\t\t\t\t\t  \t\tdescription: "${e.description}"\n\t\t\t\t\t\t  \t\tprovider: ${e.provider}\n\t\t\t\t\t\t\t\t${e.hostUrl?`host_url: "${e.hostUrl}"`:""}\n\t\t\t\t\t\t\t\t${e.azureOrganizationName?`azure_organization_id: "${e.azureOrganizationName}"`:""}\n\t\t\t\t\t\t\t\t${e.azureProjectName?`azure_project: "${e.azureProjectName}"`:""}\n\t\t\t\t\t\t  \t\tprofile_id: "shared-services"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tdescription,\n\t\t\t\t\t\t\torganization {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprovider\n\t\t\t\t\t\t\tazure_organization_id\n\t\t\t\t\t\t\tazure_project\n\t\t\t\t\t\t\trepo_relation\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`});if(!t.ok)throw Pe.Yd.error(void 0,`Creating workspace failed: (${t.status}) ${t.statusText}`),new Error(t.statusText);return await t.json()}async deleteWorkspace(e){const t=await this.fetch({query:`\n\t\t\t\t\tmutation deleteWorkspace {\n\t\t\t\t\t\tdelete_project(\n\t\t\t\t\t\t\tid: "${e}"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`});if(!t.ok)throw Pe.Yd.error(void 0,`Deleting workspace failed: (${t.status}) ${t.statusText}`),new Error(t.statusText);const i=await t.json();if(i?.errors?.some((e=>e.message.includes("permission")))){const e="Adding repositories to workspace failed: you do not have permission to delete this workspace";throw Pe.Yd.error(void 0,e),new Error(e)}return i}async addReposToWorkspace(e,t){if(0===t.length)return;let i="[";i+=t.map((e=>`{ provider_organization_id: "${e.owner}", name: "${e.repoName}" }`)).join(","),i+="]";let r=1;const s=t.map((e=>`Repository${r++}: repository(provider_organization_id: "${e.owner}", name: "${e.repoName}") {\n\t\t\tid\n\t\t\tname\n\t\t\trepository_id\n\t\t\tprovider\n\t\t\tprovider_project_name\n\t\t\tprovider_organization_id\n\t\t\tprovider_organization_name\n\t\t\turl\n\t\t}`)).join(","),o=await this.fetch({query:`\n\t\t\t\t\tmutation addReposToWorkspace {\n\t\t\t\t\t\tadd_repositories_to_project(\n\t\t\t\t\t\t\tinput: {\n\t\t\t\t\t\t\t\tproject_id: "${e}",\n\t\t\t\t\t\t\t\trepositories: ${i}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tprovider_data {\n\t\t\t\t\t\t\t\t${s}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`});if(!o.ok)throw Pe.Yd.error(void 0,`Adding repositories to workspace failed: (${o.status}) ${o.statusText}`),new Error(o.statusText);const n=await o.json();if(n?.errors?.some((e=>e.message.includes("permission")))){const e="Adding repositories to workspace failed: you do not have permission to add repositories to this workspace";throw Pe.Yd.error(void 0,e),new Error(e)}return n}async removeReposFromWorkspace(e,t){if(0===t.length)return;let i="[";i+=t.map((e=>`{ provider_organization_id: "${e.owner}", name: "${e.repoName}" }`)).join(","),i+="]";const r=await this.fetch({query:`\n\t\t\t\t\tmutation removeReposFromWorkspace {\n\t\t\t\t\t\tremove_repositories_from_project(\n\t\t\t\t\t\t\tinput: {\n\t\t\t\t\t\t\t\tproject_id: "${e}",\n\t\t\t\t\t\t\t\trepositories: ${i}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`});if(!r.ok)throw Pe.Yd.error(void 0,`Removing repositories from workspace failed: (${r.status}) ${r.statusText}`),new Error(r.statusText);const s=await r.json();if(s?.errors?.some((e=>e.message.includes("permission")))){const e="Adding repositories to workspace failed: you do not have permission to remove repositories from this workspace";throw Pe.Yd.error(void 0,e),new Error(e)}return s}async fetch(e,t){return this.connection.fetchApiGraphQL("api/projects/graphql",e,t)}}Yr([(0,g.cM)()],WorkspacesApi.prototype,"getWorkspace",1),Yr([(0,g.cM)()],WorkspacesApi.prototype,"getWorkspaces",1),Yr([(0,g.cM)()],WorkspacesApi.prototype,"getWorkspaceRepositories",1),Yr([(0,g.cM)()],WorkspacesApi.prototype,"createWorkspace",1),Yr([(0,g.cM)()],WorkspacesApi.prototype,"deleteWorkspace",1),Yr([(0,g.cM)()],WorkspacesApi.prototype,"addReposToWorkspace",1),Yr([(0,g.cM)()],WorkspacesApi.prototype,"removeReposFromWorkspace",1);var Qr=Object.defineProperty,qr=Object.getOwnPropertyDescriptor,jr=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?qr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Qr(t,i,o),o};class WorkspacesService{constructor(e,t){this.container=e,this.connection=t,this._workspacesApi=new WorkspacesApi(this.container,this.connection),this._workspacesPathProvider=new WorkspacesLocalPathMappingProvider,this._currentWorkspaceId=Kr(),this._currentWorkspaceAutoAddSetting=r.workspace.getConfiguration("gitkraken")?.get("workspaceAutoAddSetting")??"disabled",this._disposable=r.Disposable.from(e.subscription.onDidChange(this.onSubscriptionChanged,this))}_onDidResetWorkspaces=new r.EventEmitter;get onDidResetWorkspaces(){return this._onDidResetWorkspaces.event}_cloudWorkspaces;_disposable;_localWorkspaces;_workspacesApi;_workspacesPathProvider;_currentWorkspaceId;_currentWorkspaceAutoAddSetting="disabled";_currentWorkspace;dispose(){this._disposable.dispose()}get currentWorkspaceId(){return this._currentWorkspaceId}get currentWorkspace(){return this._currentWorkspace}onSubscriptionChanged(e){null!=e.current.account&&e.current.account.id===e.previous?.account?.id&&e.current.state===e.previous?.state||this.resetWorkspaces({cloud:!0})}async loadCloudWorkspaces(e=!1){const t=await this.container.subscription.getSubscription();if(null==t?.account)return{cloudWorkspaces:void 0,cloudWorkspaceInfo:"Please sign in to use cloud workspaces."};const i=[];let r;try{const t=await this._workspacesApi.getWorkspaces({includeRepositories:!e,includeOrganizations:!0});r=t?.data?.projects?.nodes}catch{return{cloudWorkspaces:void 0,cloudWorkspaceInfo:"Failed to load cloud workspaces."}}let s=0;const o=t.state===Ji.jc.FreeInPreviewTrial||t.state===Ji.jc.FreePlusInTrial||t.state===Ji.jc.Paid;if(r?.length)for(const t of r){const r=await this._workspacesPathProvider.getCloudWorkspaceCodeWorkspacePath(t.id);if(!o&&t.organization?.id){s+=1;continue}const n=t.provider_data?.repositories?.nodes;let a=null!=n?n.map((e=>({...e,workspaceId:t.id}))):n;null!=a||e||(a=[]),i.push(new Gr.CH(this.container,t.id,t.name,t.organization?.id,t.provider,t.repo_relation,null!=this._currentWorkspaceId&&this._currentWorkspaceId===t.id,t.provider===Gr._N.Azure?{organizationId:t.azure_organization_id??void 0,project:t.azure_project??void 0}:void 0,a,r))}return{cloudWorkspaces:i,cloudWorkspaceInfo:s>0?`${s} shared workspaces hidden - upgrade to GitKraken Pro to access.`:void 0}}async loadLocalWorkspaces(){const e=[],t=(await this._workspacesPathProvider.getLocalWorkspaceData())?.workspaces||{};for(const i of Object.values(t))e.push(new Gr.qP(this.container,i.localId,i.name,i.repositories.map((e=>({localPath:e.localPath,name:e.localPath.split(/[\\/]/).pop()??"unknown",workspaceId:i.localId}))),null!=this._currentWorkspaceId&&this._currentWorkspaceId===i.localId));return{localWorkspaces:e,localWorkspaceInfo:void 0}}getCloudWorkspace(e){return this._cloudWorkspaces?.find((t=>t.id===e))}getLocalWorkspace(e){return this._localWorkspaces?.find((t=>t.id===e))}async getWorkspaces(e){const t={cloudWorkspaces:[],localWorkspaces:[],cloudWorkspaceInfo:void 0,localWorkspaceInfo:void 0};if(null==this._cloudWorkspaces||e?.force){const i=await this.loadCloudWorkspaces(e?.excludeRepositories);this._cloudWorkspaces=i.cloudWorkspaces,t.cloudWorkspaceInfo=i.cloudWorkspaceInfo}if(null==this._localWorkspaces||e?.force){const e=await this.loadLocalWorkspaces();this._localWorkspaces=e.localWorkspaces,t.localWorkspaceInfo=e.localWorkspaceInfo}const i=[...this._cloudWorkspaces??[],...this._localWorkspaces??[]].find((e=>e.current));return null!=i&&(this._currentWorkspaceId=i.id,this._currentWorkspace=i),t.cloudWorkspaces=this._cloudWorkspaces??[],t.localWorkspaces=this._localWorkspaces??[],t}async getCloudWorkspaceRepositories(e){const t=await this._workspacesApi.getWorkspaceRepositories(e),i=t?.data?.project?.provider_data?.repositories?.nodes;return i?.map((t=>({...t,workspaceId:e})))??[]}async addMissingCurrentWorkspaceRepos(e){if(null==this._currentWorkspaceId)return;let t=[...this._cloudWorkspaces??[],...this._localWorkspaces??[]].find((e=>e.current));if(null==t)try{const e=await this._workspacesApi.getWorkspace(this._currentWorkspaceId,{includeRepositories:!0});if(null==e?.data?.project)return;const i=e.data.project.provider_data?.repositories?.nodes,s=null!=i?i.map((t=>({...t,workspaceId:e.data.project.id}))):[];t=new Gr.CH(this.container,e.data.project.id,e.data.project.name,e.data.project.organization?.id,e.data.project.provider,e.data.project.repo_relation,!0,e.data.project.provider===Gr._N.Azure?{organizationId:e.data.project.azure_organization_id??void 0,project:e.data.project.azure_project??void 0}:void 0,s,r.workspace.workspaceFile?.fsPath)}catch{return}if(!e?.force&&"disabled"===this._currentWorkspaceAutoAddSetting||!t?.current)return;if(this._currentWorkspace=t,!(await t.getRepositoryDescriptors())?.length)return;const i=[...(await this.resolveWorkspaceRepositoriesByName(t,{resolveFromPath:!0,usePathMapping:!0})).values()].map((e=>e.repository)),s=new Map;for(const e of this.container.git.openRepositories)s.set(e.id,e);const o=i.filter((e=>!s.has(e.id)));if(0===o.length)return void(e?.force&&r.window.showInformationMessage("No new repositories found to add.",{modal:!0}));let n=[];if(!e?.force&&"prompt"===this._currentWorkspaceAutoAddSetting){const e={title:"Add..."},t={title:"Change Auto-Add Behavior..."},i={title:"Cancel",isCloseAffordance:!0},s=await r.window.showInformationMessage("New repositories found in the linked GitKraken workspace. Would you like to add them to the current VS Code workspace?",e,t,i);if(null==s||s===i)return;if(s===t)return void this.chooseCodeWorkspaceAutoAddSetting({current:!0})}if(e?.force||"prompt"===this._currentWorkspaceAutoAddSetting){const e=await(0,Lr.rf)("Add Repositories to Workspace","Choose which repositories to add to the current workspace",o);if(0===e.length)return;n=e.map((e=>e.repoPath))}else n=o.map((e=>e.path));if(0===n.length)return;const a=r.workspace.workspaceFolders?.length??0;r.window.withProgress({location:r.ProgressLocation.Notification,title:"Adding new repositories from linked cloud workspace...",cancellable:!1},(()=>new Promise((e=>{r.workspace.updateWorkspaceFolders(a,0,...n.map((e=>({uri:r.Uri.file(e)})))),e(!0)}))))}resetWorkspaces(e){(e?.cloud??1)&&(this._cloudWorkspaces=void 0),(e?.local??1)&&(this._localWorkspaces=void 0),this._onDidResetWorkspaces.fire()}async getCloudWorkspaceRepoPath(e,t){return this._workspacesPathProvider.getCloudWorkspaceRepoPath(e,t)}async updateCloudWorkspaceRepoLocalPath(e,t,i){await this._workspacesPathProvider.writeCloudWorkspaceRepoDiskPathToMap(e,t,i)}async getRepositoriesInParentFolder(e){const t=(await r.window.showOpenDialog({title:"Choose a folder containing repositories for this workspace",canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1}))?.[0];if(null!=t&&!e?.isCancellationRequested)try{return this.container.git.findRepositories(t,{cancellation:e,depth:1,silent:!0})}catch(e){return}}async locateAllCloudWorkspaceRepos(e,t){const i=this.getCloudWorkspace(e);if(null==i)return;const r=await i.getRepositoryDescriptors();if(null==r||0===r.length)return;const s=await this.getRepositoriesInParentFolder(t);if(null!=s&&0!==s.length&&!t?.isCancellationRequested)for(const i of(await this.resolveWorkspaceRepositoriesByName(e,{cancellation:t,repositories:s})).values())if(await this.locateWorkspaceRepo(e,i.descriptor,i.repository),t?.isCancellationRequested)return}async locateWorkspaceRepo(e,t,i){let s;if(null==i||i instanceof r.Uri){let e=i;if(null==e&&(e=(await r.window.showOpenDialog({title:`Choose a location for ${t.name}`,canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1}))?.[0]),null==e)return;if(s=await this.container.git.getOrOpenRepository(e,{closeOnOpen:!0,detectNested:!1}),null==s)return}else s=i;const o=s.uri.fsPath,n=await s.getRemotes(),a=[];for(const e of n){const t=e.provider?.url({type:gt.J.Repo});null!=t&&a.push(t)}for(const e of a)await this.container.repositoryPathMapping.writeLocalRepoPath({remoteUrl:e},o);const c=this.getCloudWorkspace(e)??this.getLocalWorkspace(e);let l;null==l&&"cloud"===c?.type&&(l=c.provider),null!=t.id&&null!=t.url&&null!=l&&(await this.container.repositoryPathMapping.writeLocalRepoPath({remoteUrl:t.url,repoInfo:{provider:l,owner:t.provider_organization_id,repoName:t.name}},o),await this.updateCloudWorkspaceRepoLocalPath(e,t.id,o))}async createCloudWorkspace(e){const t=r.window.createInputBox();t.title="Create Cloud Workspace";const i=r.window.createQuickPick();i.title="Create Cloud Workspace";const s={GitHub:Gr.Xu.GitHub,"GitHub Enterprise":Gr.Xu.GitHubEnterprise};t.ignoreFocusOut=!0;const o=[];let n,a,c,l,h,u;if(null!=e?.repos&&e.repos.length>0){for(const t of e.repos){if(0===(await t.getRemotes({filter:e=>"github.com"===e.domain})).length)return void await r.window.showErrorMessage("Only GitHub is supported for this operation. Please ensure all open repositories are hosted on GitHub.",{modal:!0})}u=Gr.Xu.GitHub}try{if(n=await new Promise((e=>{o.push(t.onDidHide((()=>e(void 0))),t.onDidAccept((()=>{const i=t.value.trim();i?e(i):t.validationMessage="Please enter a non-empty name for the workspace"}))),t.placeholder="Please enter a name for the new workspace",t.prompt="Enter your workspace name",t.show()})),!n)return;if(a=await new Promise((e=>{o.push(t.onDidHide((()=>e(void 0))),t.onDidAccept((()=>{const i=t.value.trim();i?e(i):t.validationMessage="Please enter a non-empty description for the workspace"}))),t.value="",t.title="Create Workspace",t.placeholder="Please enter a description for the new workspace",t.prompt="Enter your workspace description",t.show()})),!a)return;if(null==u&&(u=await new Promise((e=>{o.push(i.onDidHide((()=>e(void 0))),i.onDidAccept((()=>{0!==i.activeItems.length&&e(s[i.activeItems[0].label])}))),i.placeholder="Please select a provider for the new workspace",i.items=Object.keys(s).map((e=>({label:e}))),i.canSelectMany=!1,i.show()}))),!u)return;if((u==Gr.Xu.GitHubEnterprise||u==Gr.Xu.GitLabSelfHosted)&&(c=await new Promise((e=>{o.push(t.onDidHide((()=>e(void 0))),t.onDidAccept((()=>{const i=t.value.trim();i?e(i):t.validationMessage="Please enter a non-empty host URL for the workspace"}))),t.value="",t.placeholder="Please enter a host URL for the new workspace",t.prompt="Enter your workspace host URL",t.show()})),!c))return;if(u==Gr.Xu.Azure){if(l=await new Promise((e=>{o.push(t.onDidHide((()=>e(void 0))),t.onDidAccept((()=>{const i=t.value.trim();i?e(i):t.validationMessage="Please enter a non-empty organization name for the workspace"}))),t.value="",t.placeholder="Please enter an organization name for the new workspace",t.prompt="Enter your workspace organization name",t.show()})),!l)return;if(h=await new Promise((e=>{o.push(t.onDidHide((()=>e(void 0))),t.onDidAccept((()=>{const i=t.value.trim();i?e(i):t.validationMessage="Please enter a non-empty project name for the workspace"}))),t.value="",t.placeholder="Please enter a project name for the new workspace",t.prompt="Enter your workspace project name",t.show()})),!h)return}}finally{t.dispose(),i.dispose(),o.forEach((e=>{e.dispose()}))}const d={name:n,description:a,provider:u,hostUrl:c,azureOrganizationName:l,azureProjectName:h};let p;try{const e=await this._workspacesApi.createWorkspace(d);p=e?.data?.create_project}catch{return}if(null!=p){null==this._cloudWorkspaces&&(this._cloudWorkspaces=[]);const t=await this._workspacesPathProvider.getCloudWorkspaceCodeWorkspacePath(p.id);this._cloudWorkspaces?.push(new Gr.CH(this.container,p.id,p.name,p.organization?.id,p.provider,p.repo_relation,null!=this._currentWorkspaceId&&this._currentWorkspaceId===p.id,p.provider===Gr._N.Azure?{organizationId:p.azure_organization_id??void 0,project:p.azure_project??void 0}:void 0,[],t));const i=this.getCloudWorkspace(p.id);null!=i&&await this.addCloudWorkspaceRepos(i.id,{repos:e?.repos,suppressNotifications:!0})}}async deleteCloudWorkspace(e){const t=await r.window.showWarningMessage("Are you sure you want to delete this workspace? This cannot be undone.",{modal:!0},{title:"Confirm"},{title:"Cancel",isCloseAffordance:!0});if(null!=t&&"Cancel"!=t.title)try{const t=await this._workspacesApi.deleteWorkspace(e);t?.data?.delete_project?.id===e&&(this._cloudWorkspaces=this._cloudWorkspaces?.filter((t=>t.id!==e)))}catch(e){r.window.showErrorMessage(e.message)}}async filterReposForProvider(e,t){const i=[];for(const r of e){(await r.getRemotes({filter:e=>e.provider?.id===Gr.Jv[t]})).length&&i.push(r)}return i}async filterReposForCloudWorkspace(e,t){const i=this.getCloudWorkspace(t)??this.getLocalWorkspace(t);if(null==i)return e;const r=[...(await i.getRepositoriesByName()).values()].map((e=>e.repository));return e.filter((e=>!r.find((t=>t.id===e.id))))}async addCloudWorkspaceRepos(e,t){const i=this.getCloudWorkspace(e);if(null==i)return;const s=[];let o=t?.repos;if(!t?.repos){let s=await this.filterReposForProvider(this.container.git.openRepositories,i.provider);s=await this.filterReposForCloudWorkspace(s,e);const n=[{label:"Choose repositories from a folder",description:void 0,choice:Gr.Pv.ParentFolder}];s.length>0&&n.unshift({label:"Choose repositories from the current window",description:void 0,choice:Gr.Pv.CurrentWindow}),n[0].picked=!0;const a=await r.window.showQuickPick(n,{placeHolder:"Choose repositories from the current window or a folder",ignoreFocusOut:!0});if(null==a)return;a.choice===Gr.Pv.ParentFolder&&await r.window.withProgress({location:r.ProgressLocation.Notification,title:"Finding repositories to add to the workspace...",cancellable:!0},(async(o,n)=>{const a=await this.getRepositoriesInParentFolder(n);null!=a&&(0!==a.length?n.isCancellationRequested||(s=await this.filterReposForProvider(a,i.provider),0!==s.length?n.isCancellationRequested||(s=await this.filterReposForCloudWorkspace(s,e),0===s.length&&(t?.suppressNotifications||r.window.showInformationMessage("All possible repositories are already in this workspace.",{modal:!0}))):t?.suppressNotifications||r.window.showInformationMessage(`No matching repositories found for provider ${i.provider}.`,{modal:!0})):t?.suppressNotifications||r.window.showInformationMessage("No repositories found in the chosen folder.",{modal:!0}))}));const c=await(0,Lr.rf)("Add Repositories to Workspace","Choose which repositories to add to the workspace",s);if(0===c.length)return;o=c.map((e=>e.repoPath))}if(null==o)return;for(const e of o){const t=e instanceof ft._j?e:await this.container.git.getOrOpenRepository(r.Uri.file(e),{closeOnOpen:!0});if(null==t)continue;const i=zr(await t.getRemote("origin")||(await t.getRemotes())?.[0]);null!=i&&s.push({owner:i.owner,repoName:i.repoName,repo:t,url:i.url})}if(0===s.length)return;let n=[];const a=new Set((await i.getRepositoryDescriptors()).map((e=>e.id)));await r.window.withProgress({location:r.ProgressLocation.Notification,title:`Adding repositories to workspace ${i.name}...`,cancellable:!1},(async()=>{try{const t=await this._workspacesApi.addReposToWorkspace(e,s.map((e=>({owner:e.owner,repoName:e.repoName}))));if(null==t?.data.add_repositories_to_project)return;n=Object.values(t.data.add_repositories_to_project.provider_data).filter((e=>null!=e)).map((t=>({...t,workspaceId:e})))}catch(e){return void r.window.showErrorMessage(e.message)}n.length>0&&i.addRepositories(n),n.length<s.length&&(n=(await i.getRepositoryDescriptors({force:!0})).filter((e=>!a.has(e.id))));for(const{repo:t,repoName:i,url:r}of s){const s=n.find((e=>e.name.toLowerCase()===i||e.url===r));null!=s&&await this.locateWorkspaceRepo(e,s,t)}}))}async removeCloudWorkspaceRepo(e,t){const i=this.getCloudWorkspace(e);if(null==i)return;const s=await r.window.showWarningMessage(`Are you sure you want to remove ${t.name} from this workspace? This cannot be undone.`,{modal:!0},{title:"Confirm"},{title:"Cancel",isCloseAffordance:!0});if(null!=s&&"Cancel"!=s.title)try{const r=await this._workspacesApi.removeReposFromWorkspace(e,[{owner:t.provider_organization_id,repoName:t.name}]);if(null==r?.data.remove_repositories_from_project)return;i.removeRepositories([t.name])}catch(e){r.window.showErrorMessage(e.message)}}async resolveWorkspaceRepositoriesByName(e,t){const i=new Map,s=e instanceof Gr.CH||e instanceof Gr.qP?e:this.getLocalWorkspace(e)??this.getCloudWorkspace(e);if(null==s)return i;const o=await s.getRepositoryDescriptors();if(null==o||0===o.length)return i;const n=t?.repositories??this.container.git.repositories,a=new Map,c=new Map;for(const e of n){if(t?.cancellation?.isCancellationRequested)break;if(c.set((0,k.AH)(e.uri.fsPath.toLowerCase()),e),s instanceof Gr.CH){const t=await e.getRemotes();for(const i of t){const t=zr(i);null!=t&&a.set(`${t.provider}/${t.owner}/${t.repoName}`,e)}}}for(const e of o){let s=null,o=null;null==e.id?s=e.localPath:!0===t?.usePathMapping&&(s=await this.getMappedPathForCloudWorkspaceRepoDescriptor(e)),null!=s&&(o=c.get((0,k.AH)(s.toLowerCase()))),null==o&&null!=e.id&&null!=e.provider&&(o=a.get(`${e.provider.toLowerCase()}/${e.provider_organization_id.toLowerCase()}/${e.name.toLowerCase()}`)),null!=s&&null==o&&!0===t?.resolveFromPath&&(o=await this.container.git.getOrOpenRepository(r.Uri.file(s),{closeOnOpen:!0,force:!0})),null!=o&&i.set(e.name,{descriptor:e,repository:o})}return i}async saveAsCodeWorkspaceFile(e){const t=this.getCloudWorkspace(e)??this.getLocalWorkspace(e);if(null==t)return;const i=await t.getRepositoryDescriptors();if(null==i)return;const s=await t.getRepositoriesByName();if(0===s.size)return void r.window.showErrorMessage("No repositories in this workspace could be found locally. Please locate at least one repository.",{modal:!0});const o=[];for(const e of s.values()){const t=e.repository;t.virtual||o.push(t.uri.fsPath)}if(o.length<i.length){const e=await r.window.showWarningMessage("Some repositories in this workspace could not be located locally. Do you want to continue?",{modal:!0},{title:"Continue"},{title:"Cancel",isCloseAffordance:!0});if(null==e||"Cancel"==e.title)return}const n=await r.window.showSaveDialog({defaultUri:r.Uri.file(`${t.name}.code-workspace`),filters:{"Code Workspace":["code-workspace"]},title:"Choose a location for the new code workspace file"});if(null==n)return;const a=await this.chooseCodeWorkspaceAutoAddSetting();if(!await this._workspacesPathProvider.writeCodeWorkspaceFile(n,o,{workspaceId:e,workspaceAutoAddSetting:a}))return void r.window.showErrorMessage("Could not create the new workspace file. Check logs for details");t.setLocalPath(n.fsPath);const c={title:"Cancel",isCloseAffordance:!0},l=await r.window.showInformationMessage(`Workspace file created for ${t.name}. Would you like to open it now?`,{modal:!0},{title:"Open in New Window",location:"newWindow"},{title:"Open in Current Window",location:"currentWindow"},c);null!=l&&l!==c&&this.openCodeWorkspaceFile(e,{location:l.location})}async chooseCodeWorkspaceAutoAddSetting(e){if(e?.current&&(null==r.workspace.workspaceFile||null==this._currentWorkspaceId||null==this._currentWorkspaceAutoAddSetting))return"disabled";const t=e?.current?this._currentWorkspaceAutoAddSetting:"disabled",i=[{label:"Add on Workspace (Window) Open",description:"enabled"===this._currentWorkspaceAutoAddSetting?"current":void 0,option:"enabled"},{label:"Prompt on Workspace (Window) Open",description:"prompt"===this._currentWorkspaceAutoAddSetting?"current":void 0,option:"prompt"},{label:"Never",description:"disabled"===this._currentWorkspaceAutoAddSetting?"current":void 0,option:"disabled"}],s=await r.window.showQuickPick(i,{placeHolder:"Choose the behavior of automatically adding missing repositories to the current VS Code workspace",title:"Linked Workspace: Automatically Add Repositories"});if(null==s?.option)return t;const o=s.option;if(e?.current&&null!=r.workspace.workspaceFile){if(!await this._workspacesPathProvider.updateCodeWorkspaceFileSettings(r.workspace.workspaceFile,{workspaceAutoAddSetting:o}))return this._currentWorkspaceAutoAddSetting;this._currentWorkspaceAutoAddSetting=o}return o}async openCodeWorkspaceFile(e,t){const i=this.getCloudWorkspace(e)??this.getLocalWorkspace(e);if(null==i)return;if(null==i.localPath){const t=await r.window.showInformationMessage(`The workspace file for ${i.name} has not been created. Would you like to create it now?`,{modal:!0},{title:"Create"},{title:"Cancel",isCloseAffordance:!0});if(null==t||"Cancel"==t.title)return;return void this.saveAsCodeWorkspaceFile(e)}let s="currentWindow"===t?.location?"currentWindow":"newWindow";if(!t?.location){const e=await r.window.showInformationMessage(`How would you like to open the workspace file for ${i.name}?`,{modal:!0},{title:"Open in New Window",location:"newWindow"},{title:"Open in Current Window",location:"currentWindow"},{title:"Cancel",isCloseAffordance:!0});if(null==e||"Cancel"==e.title)return;s=e.location??"newWindow"}if(!await this._workspacesPathProvider.confirmCloudWorkspaceCodeWorkspaceFilePath(i.id)){await this._workspacesPathProvider.removeCloudWorkspaceCodeWorkspaceFilePath(i.id),i.setLocalPath(void 0);const e=await r.window.showInformationMessage(`The workspace file for ${i.name} could not be found. Would you like to locate it now?`,{modal:!0},{title:"Locate"},{title:"Cancel",isCloseAffordance:!0});if("Locate"!==e?.title)return;const t=(await r.window.showOpenDialog({defaultUri:r.Uri.file(i.localPath),canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{"Code Workspace":["code-workspace"]},title:"Locate the workspace file"}))?.[0]?.fsPath;if(null==t)return;await this._workspacesPathProvider.writeCloudWorkspaceCodeWorkspaceFilePathToMap(i.id,t),i.setLocalPath(t)}(0,Re.ic)(r.Uri.file(i.localPath),{location:s})}async getMappedPathForCloudWorkspaceRepoDescriptor(e){let t=await this.getCloudWorkspaceRepoPath(e.workspaceId,e.id);return null==t&&(t=(await this.container.repositoryPathMapping.getLocalRepoPaths({remoteUrl:e.url??void 0,repoInfo:{repoName:e.name,provider:e.provider??void 0,owner:e.provider_organization_id}}))?.[0]),t}}function zr(e){if(null==e.provider?.owner)return;const t=e.provider.path.split("/").pop();return null!=t?{provider:e.provider.id.toLowerCase(),owner:e.provider.owner.toLowerCase(),repoName:t.toLowerCase(),url:e.provider.url({type:gt.J.Repo})}:void 0}function Kr(){return r.workspace.getConfiguration("gitkraken")?.get("workspaceId")}jr([(0,g.cM)()],WorkspacesService.prototype,"getWorkspaces",1),jr([(0,g.cM)()],WorkspacesService.prototype,"addMissingCurrentWorkspaceRepos",1),jr([(0,g.cM)()],WorkspacesService.prototype,"resetWorkspaces",1),jr([(0,g.cM)({args:{1:!1,2:!1}})],WorkspacesService.prototype,"locateWorkspaceRepo",1),jr([(0,g.cM)({args:!1})],WorkspacesService.prototype,"createCloudWorkspace",1),jr([(0,g.cM)()],WorkspacesService.prototype,"deleteCloudWorkspace",1),jr([(0,g.cM)({args:{1:!1}})],WorkspacesService.prototype,"addCloudWorkspaceRepos",1),jr([(0,g.cM)({args:{1:!1}})],WorkspacesService.prototype,"removeCloudWorkspaceRepo",1),jr([(0,g.cM)({args:{1:!1}})],WorkspacesService.prototype,"resolveWorkspaceRepositoriesByName",1),jr([(0,g.cM)()],WorkspacesService.prototype,"saveAsCodeWorkspaceFile",1),jr([(0,g.cM)()],WorkspacesService.prototype,"chooseCodeWorkspaceAutoAddSetting",1),jr([(0,g.cM)()],WorkspacesService.prototype,"openCodeWorkspaceFile",1);var Jr=Object.defineProperty,Zr=Object.getOwnPropertyDescriptor,Xr=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Zr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Jr(t,i,o),o};class StatusBarController{constructor(e){this.container=e,this._disposable=r.Disposable.from((0,$i.IH)(e.onReady)(this.onReady,this),s.D.onDidChange(this.onConfigurationChanged,this))}_cancellation;_disposable;_selectedSha;_statusBarBlame;_statusBarMode;dispose(){this.clearBlame(),this._statusBarBlame?.dispose(),this._statusBarMode?.dispose(),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){if(s.D.changed(e,"mode")){const t=s.D.get("mode.statusBar.enabled")?this.container.mode:void 0;if(t?.statusBarItemName){const i="left"!==s.D.get("mode.statusBar.alignment")?r.StatusBarAlignment.Right:r.StatusBarAlignment.Left;s.D.changed(e,"mode.statusBar.alignment")&&this._statusBarMode?.alignment!==i&&(this._statusBarMode?.dispose(),this._statusBarMode=void 0),this._statusBarMode=this._statusBarMode??r.window.createStatusBarItem("gitlens.mode",i,i===r.StatusBarAlignment.Right?999:1),this._statusBarMode.name="GitLens Modes",this._statusBarMode.command=u.Gh.SwitchMode,this._statusBarMode.text=t.statusBarItemName,this._statusBarMode.tooltip=new r.MarkdownString(`**${t.statusBarItemName}** ${u.NE.Dash} ${t.description}\n\n---\n\nClick to Switch GitLens Modes`,!0),this._statusBarMode.accessibilityInformation={label:`GitLens Mode: ${t.statusBarItemName}\nClick to Switch GitLens Modes`},this._statusBarMode.show()}else this._statusBarMode?.dispose(),this._statusBarMode=void 0}if(s.D.changed(e,"statusBar"))if(s.D.get("statusBar.enabled")){const t="left"!==s.D.get("statusBar.alignment")?r.StatusBarAlignment.Right:r.StatusBarAlignment.Left;s.D.changed(e,"statusBar.alignment")&&this._statusBarBlame?.alignment!==t&&(this._statusBarBlame?.dispose(),this._statusBarBlame=void 0),this._statusBarBlame=this._statusBarBlame??r.window.createStatusBarItem("gitlens.blame",t,t===r.StatusBarAlignment.Right?1e3:0),this._statusBarBlame.name="GitLens Current Line Blame",this._statusBarBlame.command=s.D.get("statusBar.command"),s.D.changed(e,"statusBar.enabled")&&this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this))}else s.D.changed(e,"statusBar.enabled")&&(this.container.lineTracker.unsubscribe(this),this._statusBarBlame?.dispose(),this._statusBarBlame=void 0)}onActiveLinesChanged(e){let t=!(s.D.get("statusBar.reduceFlicker")&&"selection"===e.reason&&(e.pending||null!=e.selections));if(!e.pending&&null!=e.selections){const i=this.container.lineTracker.getState(e.selections[0].active);if(null!=i?.commit)return void this.updateBlame(e.editor,i);t=!0}t?this.clearBlame():this._statusBarBlame?.text.startsWith("$(git-commit)")&&(this._statusBarBlame.text=`$(watch)${this._statusBarBlame.text.substring(13)}`)}clearBlame(){this._selectedSha=void 0,this._cancellation?.cancel(),this._statusBarBlame?.hide()}async updateBlame(e,t){const i=s.D.get("statusBar");if(!i.enabled||null==this._statusBarBlame||!(0,Re.PH)(e))return this._cancellation?.cancel(),void(this._selectedSha=void 0);const{commit:o}=t;if(null==o)return void this._cancellation?.cancel();if(this._selectedSha===o.sha&&!o.isUncommitted)return void(this._statusBarBlame?.text.startsWith("$(watch)")&&(this._statusBarBlame.text=`$(git-commit)${this._statusBarBlame.text.substring(8)}`));const n=(0,De.UH)();this._selectedSha=o.sha,this._cancellation?.cancel(),this._cancellation=new r.CancellationTokenSource;const a=this._cancellation.token;let c;switch(i.command){case Mi.ef.CopyRemoteCommitUrl:c="Click to Copy Remote Commit URL";break;case Mi.ef.CopyRemoteFileUrl:this._statusBarBlame.command=u.Gh.CopyRemoteFileUrl,c="Click to Copy Remote File Revision URL";break;case Mi.ef.DiffWithPrevious:this._statusBarBlame.command=u.Gh.DiffLineWithPrevious,c="Click to Open Line Changes with Previous Revision";break;case Mi.ef.DiffWithWorking:this._statusBarBlame.command=u.Gh.DiffLineWithWorking,c="Click to Open Line Changes with Working File";break;case Mi.ef.OpenCommitOnRemote:c="Click to Open Commit on Remote";break;case Mi.ef.OpenFileOnRemote:c="Click to Open Revision on Remote";break;case Mi.ef.RevealCommitInView:c="Click to Reveal Commit in the Side Bar";break;case Mi.ef.ShowCommitsInView:c="Click to Search for Commit";break;case Mi.ef.ShowQuickCommitDetails:c="Click to Show Commit";break;case Mi.ef.ShowQuickCommitFileDetails:c="Click to Show Commit (file)";break;case Mi.ef.ShowQuickCurrentBranchHistory:c="Click to Show Branch History";break;case Mi.ef.ShowQuickFileHistory:c="Click to Show File History";break;case Mi.ef.ToggleCodeLens:c="Click to Toggle Git CodeLens";break;case Mi.ef.ToggleFileBlame:c="Click to Toggle File Blame";break;case Mi.ef.ToggleFileChanges:null!=o.file&&(this._statusBarBlame.command=(0,Zi._N)({title:"Toggle File Changes",command:u.Gh.ToggleFileChanges,arguments:[o.file.uri,{type:"changes",context:{sha:o.sha,only:!1,selection:!1}}]})),c="Click to Toggle File Changes";break;case Mi.ef.ToggleFileChangesOnly:null!=o.file&&(this._statusBarBlame.command=(0,Zi._N)({title:"Toggle File Changes",command:u.Gh.ToggleFileChanges,arguments:[o.file.uri,{type:"changes",context:{sha:o.sha,only:!0,selection:!1}}]})),c="Click to Toggle File Changes";break;case Mi.ef.ToggleFileHeatmap:c="Click to Toggle File Heatmap"}this._statusBarBlame.tooltip=new r.MarkdownString(`Loading... \n\n---\n\n${c}`),this._statusBarBlame.accessibilityInformation={label:`${this._statusBarBlame.text}\n${c}`};const l=await this.container.git.getBestRemotesWithProviders(o.repoPath),[h]=l,d=s.D.get("defaultDateFormat"),p=Di.i.has(i.format,"tips")||Di.i.has(i.tooltipFormat,"tips")?this.container.git.getBranchesAndTagsTipsFn(o.repoPath):void 0,m=!o.isUncommitted&&h?.hasRichIntegration()&&i.pullRequests.enabled&&(Di.i.has(i.format,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState")||Di.i.has(i.tooltipFormat,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState"));function g(e,t,r){e.text=`$(git-commit) ${Di.i.fromTemplate(i.format,o,{dateFormat:null===i.dateFormat?d:i.dateFormat,getBranchAndTagTips:t,messageTruncateAtNewLine:!0,pullRequest:r,pullRequestPendingMessage:"PR $(watch)",remotes:l})}`,e.accessibilityInformation={label:`${e.text}\n${c}`}}async function f(e,t,r,s){return(0,Ri.nN)(e,o,o.getGitUri(),o.lines[0].line,{autolinks:!0,cancellation:a,dateFormat:d,format:i.tooltipFormat,getBranchAndTagTips:t,pullRequest:r,pullRequests:m&&null!=r,remotes:l,timeout:s})}let w;if(m){const e=100;w=await(0,Lt.Zo)(o.getAssociatedPullRequest(h),a,e,(async t=>{if("timedout"!==t.reason||null==this._statusBarBlame)return;Pe.Yd.debug(n,`${u.NE.Dot} pull request query took too long (over ${e} ms)`);const[i,r]=await Promise.allSettled([p,t.value]);if(a.isCancellationRequested||null==this._statusBarBlame)return;const s=(0,Vt.Sb)(r),o=(0,Vt.Sb)(i);Pe.Yd.debug(n,`${u.NE.Dot} pull request query completed; updating...`),g(this._statusBarBlame,o,s);const l=await f(this.container,o,s);null!=l&&(this._statusBarBlame.tooltip=l.appendMarkdown(`\n\n---\n\n${c}`))}))}const v=null!=p?await p:void 0;if(a.isCancellationRequested)return;g(this._statusBarBlame,v,w?.value),this._statusBarBlame.show();const y=await(0,Lt.Zo)(f(this.container,v,w?.value,20),a,100,(async e=>{if("timedout"!==e.reason||null==this._statusBarBlame)return;const t=await e.value;null!=t&&(this._statusBarBlame.tooltip=t.appendMarkdown(`\n\n---\n\n${c}`))}));a.isCancellationRequested||y.paused||null==y.value||(this._statusBarBlame.tooltip=y.value.appendMarkdown(`\n\n---\n\n${c}`))}}Xr([(0,g.fF)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map((e=>`[${e.anchor}-${e.active}]`)).join(",")}, pending=${Boolean(e.pending)}, reason=${e.reason}`}})],StatusBarController.prototype,"onActiveLinesChanged",1),Xr([(0,g.fF)({args:{0:!1,1:e=>e.commit?.sha}})],StatusBarController.prototype,"updateBlame",1);var es=Object.defineProperty,ts=Object.getOwnPropertyDescriptor,is=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?ts(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&es(t,i,o),o};const rs=Object.create(null),ss=[];class KeyboardScope{_mapping;constructor(e){this._mapping=e;for(const e in this._mapping)this._mapping[e]=this._mapping[e]??rs;ss.push(this._mapping)}async dispose(){const e=ss.indexOf(this._mapping),t=(0,De.UH)();(0,De.lH)(t,` • index=${e}`),e===ss.length-1?(ss.pop(),await this.updateKeyCommandsContext(ss[ss.length-1])):ss.splice(e,1)}_paused=!0;get paused(){return this._paused}async clearKeyCommand(e){const t=(0,De.UH)(),i=ss[ss.length-1];i===this._mapping&&null!=i[e]?(i[e]=void 0,await(0,Ni.v)(`${u.m1}:key:${e}`,!1)):(0,De.lH)(t," • skipped")}async pause(e){if(this._paused)return;this._paused=!0;const t=Object.keys(this._mapping).reduce(((t,i)=>(t[i]=null==e||e.includes(i)?void 0:this._mapping[i],t)),Object.create(null));await this.updateKeyCommandsContext(t)}async resume(){this._paused&&(this._paused=!1,await this.updateKeyCommandsContext(this._mapping))}async start(){await this.resume()}async setKeyCommand(e,t){const i=(0,De.UH)(),r=ss[ss.length-1];if(r!==this._mapping)return void(0,De.lH)(i," • skipped");const s=Boolean(r[e]);r[e]=t,s||await(0,Ni.v)(`${u.m1}:key:${e}`,!0)}async updateKeyCommandsContext(e){await Promise.all(u.XP.map((t=>(0,Ni.v)(`${u.m1}:key:${t}`,Boolean(e?.[t])))))}}is([(0,g.cM)({args:!1,prefix:e=>`${e.prefix}[${ss.length}]`})],KeyboardScope.prototype,"dispose",1),is([(0,g.cM)({args:!1,prefix:(e,t)=>`${e.prefix}[${ss.length}](${t})`})],KeyboardScope.prototype,"clearKeyCommand",1),is([(0,g.cM)({args:!1,prefix:e=>`${e.prefix}(paused=${e.instance._paused})`})],KeyboardScope.prototype,"pause",1),is([(0,g.cM)({args:!1,prefix:e=>`${e.prefix}(paused=${e.instance._paused})`})],KeyboardScope.prototype,"resume",1),is([(0,g.cM)({args:!1,prefix:(e,t)=>`${e.prefix}[${ss.length}](${t})`})],KeyboardScope.prototype,"setKeyCommand",1);class Keyboard{_disposable;constructor(){const e=u.XP.map((e=>(0,Zi.xR)(`${u.m1}.key.${e}`,(()=>this.execute(e)),this)));this._disposable=r.Disposable.from(...e)}dispose(){this._disposable.dispose()}createScope(e){return new KeyboardScope({...e})}async beginScope(e){const t=this.createScope(e);return await t.start(),t}async execute(e){const t=(0,De.UH)();if(ss.length)try{let i=ss[ss.length-1][e];if("function"==typeof i&&(i=await i()),"function"!=typeof i?.onDidPressKey)return void(0,De.lH)(t," • skipped, no callback");await i.onDidPressKey(e)}catch(e){Pe.Yd.error(e,t)}else(0,De.lH)(t," • skipped, no mappings")}}is([(0,g.cM)({args:!1,prefix:(e,t)=>`${e.prefix}[${ss.length}](${void 0===t?"":Object.keys(t).join(",")})`})],Keyboard.prototype,"createScope",1),is([(0,g.cM)({args:!1,prefix:(e,t)=>`${e.prefix}[${ss.length}](${void 0===t?"":Object.keys(t).join(",")})`})],Keyboard.prototype,"beginScope",1),is([(0,g.cM)()],Keyboard.prototype,"execute",1);class TelemetryService{constructor(e){this.container=e,e.context.subscriptions.push(s.D.onDidChange((t=>{s.D.changed(t,"telemetry.enabled")&&this.ensureTelemetry(e)})),r.env.onDidChangeTelemetryEnabled((()=>this.ensureTelemetry(e)))),this.ensureTelemetry(e)}_enabled=!1;get enabled(){return this._enabled}provider;globalAttributes=new Map;eventQueue=[];dispose(){this.provider?.dispose(),this.provider=void 0}_initializationTimer;ensureTelemetry(e){if(this._enabled=r.env.isTelemetryEnabled&&s.D.get("telemetry.enabled",void 0,!0),!this._enabled)return null!=this._initializationTimer&&(clearTimeout(this._initializationTimer),this._initializationTimer=void 0),this.eventQueue.length=0,this.provider?.dispose(),void(this.provider=void 0);null==this._initializationTimer&&(this._initializationTimer=setTimeout((()=>this.initializeTelemetry(e)),7500))}async initializeTelemetry(e){if(null!=this._initializationTimer&&(clearTimeout(this._initializationTimer),this._initializationTimer=void 0),this.provider=new((await i.e(913).then(i.bind(i,4987))).OpenTelemetryProvider)({env:e.env,extensionId:e.id,extensionVersion:e.version,machineId:r.env.machineId,sessionId:r.env.sessionId,language:r.env.language,platform:(0,ct.Xf)(),vscodeEdition:r.env.appName,vscodeHost:r.env.appHost,vscodeRemoteName:r.env.remoteName??"",vscodeShell:r.env.shell,vscodeUIKind:String(r.env.uiKind),vscodeVersion:r.version},(0,at.Nx)(),e.debugging),this.eventQueue.length){const e=[...this.eventQueue];this.eventQueue.length=0;for(const{type:t,name:i,data:r,global:s}of e)"sendEvent"===t&&(this.provider.setGlobalAttributes(s),this.provider.sendEvent(i,os(r)))}this.provider.setGlobalAttributes(this.globalAttributes)}sendEvent(e,t,i,r){this._enabled&&(null!=this.provider?this.provider.sendEvent(e,os(t),i,r):this.eventQueue.push({type:"sendEvent",name:e,data:t,global:new Map([...this.globalAttributes]),startTime:i??Date.now(),endTime:r??Date.now()}))}startEvent(e,t,i){if(this._enabled){if(null!=this.provider){const r=this.provider.startEvent(e,os(t),i);return{dispose:()=>r?.end()}}return i=i??Date.now(),{dispose:()=>this.sendEvent(e,t,i,Date.now())}}}setGlobalAttribute(e,t){null==t?this.globalAttributes.delete(e):this.globalAttributes.set(e,t),this.provider?.setGlobalAttributes(this.globalAttributes)}setGlobalAttributes(e){for(const[t,i]of Object.entries(e))null==i?this.globalAttributes.delete(t):this.globalAttributes.set(t,i);this.provider?.setGlobalAttributes(this.globalAttributes)}deleteGlobalAttribute(e){this.globalAttributes.delete(e),this.provider?.setGlobalAttributes(this.globalAttributes)}}function os(e){if(null==e)return;const t=Object.create(null);for(const[i,r]of Object.entries(e))null!=r&&(t[i]=r);return t}class UsageTracker{constructor(e,t){this.container=e,this.storage=t}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}dispose(){}get(e){return this.storage.get("usages")?.[e]}async reset(e){let t=this.storage.get("usages");if(null!=t){if(null==e)return await this.storage.delete("usages"),void this._onDidChange.fire(void 0);t=(0,Tr.iC)(t,e,void 0),await this.storage.store("usages",t),this._onDidChange.fire({key:e,usage:void 0})}}async track(e){let t=this.storage.get("usages");null==t&&(t=Object.create(null));const i=Date.now();let r=t[e];null==r?(r={count:0,firstUsedAt:i,lastUsedAt:i},t[e]=r):(r.count!==Number.MAX_SAFE_INTEGER&&r.count++,r.lastUsedAt=i),this.container.telemetry.sendEvent("usage/track",{"usage.key":e,"usage.count":r.count}),await this.storage.store("usages",t),this._onDidChange.fire({key:e,usage:r})}}const ns=/\b(g(?:it)?\b\s*)\b(branch|checkout|cherry-pick|fetch|grep|log|merge|pull|push|rebase|reset|revert|show|stash|status|tag)\b/gi,as=/\b((?!.*\/\.)(?!.*\.\.)(?!.*\/\/)(?!.*@\{)[^\000-\037\177 ,~^:?*[\\]+[^ ./])\b/gi,cs=/^[0-9a-f]{7,40}\.\.\.?[0-9a-f]{7,40}$/,ls=/^[0-9a-f]{7,40}$/;class GitTerminalLinkProvider{constructor(e){this.container=e,this.disposable=r.window.registerTerminalLinkProvider(this)}disposable;dispose(){this.disposable.dispose()}async provideTerminalLinks(e){if(0===e.line.trim().length)return[];const t=this.container.git.highlander?.path;if(!t)return[];const i=s.D.get("terminalLinks.showDetailsView"),r=[];let o,n;const a=new RegExp(as,as.flags),c=new RegExp(ns,ns.flags);let l;for(;;){if(l=c.exec(e.line),null!=l){const[e,t,i]=l,s={startIndex:l.index+t.length,length:i.length,tooltip:"Open in Git Command Palette",command:{command:u.Gh.GitCommands,args:{command:i}}};r.push(s)}if(l=a.exec(e.line),null==l)break;const[s,h]=l;if("HEAD"===h.toUpperCase()){const e={startIndex:l.index,length:h.length,tooltip:"Show HEAD",command:{command:u.Gh.ShowQuickBranchHistory,args:{branch:"HEAD",repoPath:t}}};r.push(e);continue}void 0===o&&(o=await this.container.git.getBranches(t));let d=o.values.find((e=>e.name===h));if(null==d&&(d=o.values.find((e=>(0,f.S3)(e.name)===h))),null!=d){const e={startIndex:l.index,length:h.length,tooltip:"Show Branch",command:{command:u.Gh.ShowQuickBranchHistory,args:{repoPath:t,branch:d.name}}};r.push(e);continue}void 0===n&&(n=await this.container.git.getTags(t));const p=n.values.find((e=>e.name===h));if(null==p){if(ls.test(h)){if(await this.container.git.validateReference(t,h)){const e={startIndex:l.index,length:h.length,tooltip:"Show Commit",command:i?{command:u.Gh.ShowInDetailsView,args:{repoPath:t,refs:[h]}}:{command:u.Gh.ShowQuickCommit,args:{repoPath:t,sha:h}}};r.push(e)}}else if(cs.test(h)){const e={startIndex:l.index,length:h.length,tooltip:"Show Commits",command:{command:u.Gh.GitCommands,args:{command:"log",state:{repo:t,reference:(0,m.xB)(h,t,{refType:"revision"})}}}};r.push(e)}}else{const e={startIndex:l.index,length:h.length,tooltip:"Show Tag",command:{command:u.Gh.ShowQuickBranchHistory,args:{repoPath:t,tag:p.name}}};r.push(e)}}return r}handleTerminalLink(e){r.commands.executeCommand(e.command.command,e.command.args)}}var hs=Object.defineProperty,us=Object.getOwnPropertyDescriptor,ds=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?us(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&hs(t,i,o),o};class LineTracker{_onDidChangeActiveLines=new r.EventEmitter;get onDidChangeActiveLines(){return this._onDidChangeActiveLines.event}_disposable;_editor;_state=new Map;dispose(){for(const e of this._subscriptions.keys())this.unsubscribe(e)}onActiveTextEditorChanged(e){e!==this._editor&&(null==e||(0,Re.PH)(e))&&(this._editor=e,this._selections=ms(e?.selections),this.notifyLinesChanged("editor"))}onTextEditorSelectionChanged(e){if(this._editor!==e.textEditor&&!(0,Re.PH)(e.textEditor))return;const t=ms(e.selections);this._editor===e.textEditor&&this.includes(t)||(this._editor=e.textEditor,this._selections=t,this.notifyLinesChanged(this._editor===e.textEditor?"selection":"editor"))}getState(e){return this._state.get(e)}resetState(e){null==e?this._state.clear():this._state.delete(e)}setState(e,t){this._state.set(e,t)}_selections;get selections(){return this._selections}includes(e,t){if("number"!=typeof e)return ps(e,this._selections);if(null==this._selections||0===this._selections.length)return!1;const i=e,r=t?.activeOnly??!0;for(const e of this._selections)if(i===e.active||!r&&(e.anchor>=i&&i>=e.active||e.active>=i&&i>=e.anchor))return!0;return!1}refresh(){this.notifyLinesChanged("editor")}_subscriptions=new Map;subscribed(e){return this._subscriptions.has(e)}subscribe(e,t){const i=(0,De.UH)(),s={dispose:()=>this.unsubscribe(e)},o=0===this._subscriptions.size;let n=this._subscriptions.get(e);return null==n?(n=[t],this._subscriptions.set(e,n)):n.push(t),o&&(Pe.Yd.debug(i,"Starting line tracker..."),this._disposable=r.Disposable.from(r.window.onDidChangeActiveTextEditor((0,Ht.Ds)(this.onActiveTextEditorChanged,0),this),r.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this),this.onStart?.()??{dispose:()=>{}}),queueMicrotask((()=>this.onActiveTextEditorChanged(r.window.activeTextEditor)))),s}unsubscribe(e){const t=this._subscriptions.get(e);if(null!=t){this._subscriptions.delete(e);for(const e of t)e.dispose();0===this._subscriptions.size&&(this._fireLinesChangedDebounced?.cancel(),this._disposable?.dispose(),this._disposable=void 0)}}_suspended=!1;get suspended(){return this._suspended}resume(e){(e?.force||this._suspended)&&(this._suspended=!1,this.onResume?.(),this.notifyLinesChanged("editor"))}suspend(e){!e?.force&&this._suspended||(this._suspended=!0,this.onSuspend?.(),this.notifyLinesChanged("editor"))}fireLinesChanged(e){this._onDidChangeActiveLines.fire(e)}_fireLinesChangedDebounced;notifyLinesChanged(e){"editor"===e&&this.resetState();const t={editor:this._editor,selections:this.selections,reason:e};null!=t.selections?(null==this._fireLinesChangedDebounced&&(this._fireLinesChangedDebounced=(0,Ht.Ds)((e=>{e.editor===r.window.activeTextEditor&&ps(e.selections,ms(e.editor?.selections))&&this.fireLinesChanged(e)}),250)),this._fireLinesChangedDebounced.pending?.()||this.fireLinesChanged({...t,pending:!0}),this._fireLinesChangedDebounced(t)):queueMicrotask((()=>{t.editor===r.window.activeTextEditor&&(this._fireLinesChangedDebounced?.cancel(),this.fireLinesChanged(t))}))}}function ps(e,t){if(null==e&&null==t)return!0;if(null==e||null==t||e.length!==t.length)return!1;let i;return e.every(((e,r)=>(i=t[r],e.active===i.active&&e.anchor===i.anchor)))}function ms(e){return e?.map((e=>({active:e.active.line,anchor:e.anchor.line})))}ds([(0,g.fF)({args:!1})],LineTracker.prototype,"subscribe",1),ds([(0,g.fF)({args:!1})],LineTracker.prototype,"unsubscribe",1),ds([(0,g.fF)()],LineTracker.prototype,"resume",1),ds([(0,g.fF)()],LineTracker.prototype,"suspend",1);var gs=Object.defineProperty,fs=Object.getOwnPropertyDescriptor,ws=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?fs(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&gs(t,i,o),o};class GitLineTracker extends LineTracker{constructor(e){super(),this.container=e}async fireLinesChanged(e){let t=!1;this.suspended||e.pending||null==e.selections||null==e.editor||(t=await this.updateState(e.selections,e.editor)),super.fireLinesChanged(t?e:{...e,selections:void 0,suspended:this.suspended})}_subscriptionOnlyWhenActive;onStart(){return this.onResume(),r.Disposable.from({dispose:()=>this.onSuspend()},this.container.tracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.container.tracker.onDidChangeDirtyState(this.onDirtyStateChanged,this),this.container.tracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this))}onResume(){null==this._subscriptionOnlyWhenActive&&(this._subscriptionOnlyWhenActive=this.container.tracker.onDidChangeContent(this.onContentChanged,this))}onSuspend(){this._subscriptionOnlyWhenActive?.dispose(),this._subscriptionOnlyWhenActive=void 0}onBlameStateChanged(e){this.notifyLinesChanged("editor")}onContentChanged(e){e.contentChanges.some((e=>this.selections?.some((t=>e.range.end.line>=t.active&&t.active>=e.range.start.line||e.range.start.line>=t.active&&t.active>=e.range.end.line))))&&this.notifyLinesChanged("editor")}onDirtyIdleTriggered(e){const t=s.D.get("advanced.blame.sizeThresholdAfterEdit");t>0&&e.document.lineCount>t||this.resume()}onDirtyStateChanged(e){e.dirty?this.suspend():this.resume({force:!0})}async updateState(e,t){const i=(0,De.UH)();if(!this.includes(e))return(0,De.lH)(i,` ${u.NE.Dot} lines no longer match`),!1;const r=await this.container.tracker.getOrAdd(t.document);if(!r.isBlameable)return(0,De.lH)(i,` ${u.NE.Dot} document is not blameable`),!1;if(1===e.length){const s=await this.container.git.getBlameForLine(r.uri,e[0].active,t?.document);if(null==s)return(0,De.lH)(i,` ${u.NE.Dot} blame failed`),!1;null!=s.commit&&s.commit.file,this.setState(s.line.line-1,{commit:s.commit})}else{const s=await this.container.git.getBlame(r.uri,t.document);if(null==s)return(0,De.lH)(i,` ${u.NE.Dot} blame failed`),!1;for(const t of e){const e=s.lines[t.active],i=s.commits.get(e.sha);null!=i&&i.file,null==i?this.resetState(t.active):this.setState(t.active,{commit:i})}}return this.includes(e)?r.isBlameable?(t.document.isDirty&&r.setForceDirtyStateChangeOnNextDocumentChange(),!0):((0,De.lH)(i,` ${u.NE.Dot} document is not blameable`),!1):((0,De.lH)(i,` ${u.NE.Dot} lines no longer match`),!1)}}ws([(0,g.fF)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}, blameable=${e.blameable}`}})],GitLineTracker.prototype,"onBlameStateChanged",1),ws([(0,g.fF)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}`}})],GitLineTracker.prototype,"onContentChanged",1),ws([(0,g.fF)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}`}})],GitLineTracker.prototype,"onDirtyIdleTriggered",1),ws([(0,g.fF)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}, dirty=${e.dirty}`}})],GitLineTracker.prototype,"onDirtyStateChanged",1),ws([(0,g.fF)({args:{0:e=>e?.map((e=>e.active)).join(","),1:e=>e.document.uri.toString(!0)},exit:!0})],GitLineTracker.prototype,"updateState",1);var vs=i(4043);class DeepLinkService{constructor(e){this.container=e,this._context={state:vs.mg.Idle},this._disposables.push(e.uri.onDidReceiveUri((async e=>{const t=(0,vs.lX)(e);if(null!=t&&this._context.state===vs.mg.Idle){if(this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories,!t.type||!t.mainId&&!t.remoteUrl&&!t.repoPath)return r.window.showErrorMessage("Unable to resolve link"),void Pe.Yd.warn(`Unable to resolve link - missing basic properties: ${e.toString()}`);if(!Object.values(vs._n).includes(t.type))return r.window.showErrorMessage("Unable to resolve link"),void Pe.Yd.warn(`Unable to resolve link - unknown link type: ${e.toString()}`);if(t.type!==vs._n.Repository&&null==t.targetId&&null==t.mainId)return r.window.showErrorMessage("Unable to resolve link"),void Pe.Yd.warn(`Unable to resolve link - no main/target id provided: ${e.toString()}`);if(t.type===vs._n.Comparison&&null==t.secondaryTargetId)return r.window.showErrorMessage("Unable to resolve link"),void Pe.Yd.warn(`Unable to resolve link - no secondary target id provided: ${e.toString()}`);this.setContextFromDeepLink(t,e.toString()),await this.processDeepLink()}})));const t=this.container.storage.get("deepLinks:pending");null!=t&&(this.container.storage.delete("deepLinks:pending"),this.processPendingDeepLink(t))}_disposables=[];_context;_onDeepLinkProgressUpdated=new r.EventEmitter;dispose(){r.Disposable.from(...this._disposables).dispose()}resetContext(){this._context={state:vs.mg.Idle,url:void 0,mainId:void 0,repo:void 0,remoteUrl:void 0,remote:void 0,secondaryRemote:void 0,repoPath:void 0,targetId:void 0,secondaryTargetId:void 0,secondaryRemoteUrl:void 0,targetType:void 0,targetSha:void 0}}setContextFromDeepLink(e,t){this._context={...this._context,mainId:e.mainId,targetType:e.type,url:t,remoteUrl:e.remoteUrl,repoPath:e.repoPath,targetId:e.targetId,secondaryTargetId:e.secondaryTargetId,secondaryRemoteUrl:e.secondaryRemoteUrl}}async processPendingDeepLink(e){if(null==e.url)return;const t=(0,vs.lX)(r.Uri.parse(e.url));if(null==t)return;this._context={state:vs.mg.CloneOrAddRepo},this.setContextFromDeepLink(t,e.url);let i=vs.WA.OpenRepo;if(this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories,null!=e.repoPath){const t=r.Uri.parse(e.repoPath);try{const e=await this.container.git.getOrOpenRepository(t,{detectNested:!1});null!=e&&(this._context.repo=e,i=vs.WA.RepoOpened)}catch{}}queueMicrotask((()=>{this.processDeepLink(i)}))}async getShaForBranch(e){const{repo:t,remote:i,secondaryRemote:r}=this._context;if(!t)return;let s=e;null==i||s.startsWith(`${i.name}/`)?null==r||s.startsWith(`${r.name}/`)||(s=`${r.name}/${s}`):s=`${i.name}/${s}`;let o=await t.getBranch(s);if(null!=o?.sha)return o.sha;if(e.includes(":")){const[i,r]=e.split(":");if(null!=i&&null!=s){const[e,n]=i.split("/");if(null!=e&&null!=n){const i=await t.getRemotes();for(const n of i)if(n.provider?.owner===e&&(s=`${n.name}/${r}`,o=await t.getBranch(s),null!=o?.sha))return o.sha}}}return o=await t.getBranch(e),null!=o?.sha?o.sha:void 0}async getShaForTag(e){const{repo:t}=this._context;if(!t)return;const i=await t.getTag(e);return null!=i?.sha?i.sha:void 0}async getShaForCommit(e){const{repo:t}=this._context;if(t)return await this.container.git.validateReference(t.path,e)?e:void 0}async getShasForComparison(e,t){const i=await this.getComparisonRefSha(e);if(null==i)return;const r=await this.getComparisonRefSha(t);return null!=r?[i,r]:void 0}async getComparisonRefSha(e){if(""===e)return e;if((0,m.D3)(e))return this.getShaForCommit(e);const t=e.toLocaleLowerCase();if(!t.startsWith("refs/tags/")&&!t.startsWith("tags/")){const t=await this.getShaForBranch(e);if(null!=t)return t}const i=await this.getShaForTag(e);return null!=i?i:this.getShaForCommit(e)}async getShasForTargets(){const{repo:e,targetType:t,targetId:i,secondaryTargetId:r}=this._context;if(null!=e&&t!==vs._n.Repository&&null!=i){if(t===vs._n.Branch)return this.getShaForBranch(i);if(t===vs._n.Tag)return this.getShaForTag(i);if(t===vs._n.Commit)return this.getShaForCommit(i);if(t===vs._n.Comparison){if(null==r)return;return this.getShasForComparison(i,r)}}}async showOpenTypePrompt(e){const t=[{title:"Open Folder",action:"folder"},{title:"Open Workspace",action:"workspace"}];null!=this._context.remoteUrl&&t.push({title:"Clone",action:"clone"}),e?.includeCurrent&&t.push({title:"Use Current Window",action:"current"}),t.push({title:"Cancel",isCloseAffordance:!0});const i=await r.window.showInformationMessage(e?.customMessage??"No matching repository found. Please choose an option.",{modal:!0},...t);return i?.action}async showOpenLocationPrompt(e){const t=[{title:"Open",action:"currentWindow"},{title:"Open in New Window",action:"newWindow"}];"workspace"!==e&&t.push({title:"Add to Workspace",action:"addToWorkspace"}),t.push({title:"Cancel",isCloseAffordance:!0});const i=await r.window.showInformationMessage(`Please choose an option to open the repository ${"clone"===e?"after cloning":e}.`,{modal:!0},...t);return i?.action}async showFetchPrompt(){const e=await r.window.showInformationMessage("The link target(s) couldn't be found. Would you like to fetch from the remote?",{modal:!0},{title:"Fetch",action:!0},{title:"Cancel",isCloseAffordance:!0});return e?.action||!1}async showAddRemotePrompt(e,t){let i;const s=await r.window.showInformationMessage(`Unable to find a remote for '${e}'. Would you like to add a new remote?`,{modal:!0},{title:"Yes"},{title:"No",isCloseAffordance:!0});return"Yes"!==s?.title||(i=await r.window.showInputBox({prompt:"Enter a name for the remote",validateInput:e=>e?t.includes(e)?"A remote with that name already exists":void 0:"A name is required"})),i}async processDeepLink(e=vs.WA.DeepLinkEventFired){let t="",i=e;if(i===vs.WA.DeepLinkCancelled&&this._context.state===vs.mg.Idle)return;let s=[];const{targetType:o}=this._context;for(queueMicrotask((()=>{r.window.withProgress({cancellable:!0,location:r.ProgressLocation.Notification,title:`Opening ${(0,vs.$k)(o??vs._n.Repository)} link...`},((e,t)=>(e.report({increment:0}),new Promise((i=>{t.onCancellationRequested((()=>{queueMicrotask((()=>this.processDeepLink(vs.WA.DeepLinkCancelled))),i()})),this._onDeepLinkProgressUpdated.event((({message:t,increment:r})=>{e.report({message:t,increment:r}),100===r&&i()}))})))))}));;){this._context.state=vs.eT[this._context.state][i];const{state:e,mainId:o,repo:n,url:a,remoteUrl:c,secondaryRemoteUrl:l,remote:h,secondaryRemote:d,repoPath:p,targetId:g,secondaryTargetId:f,targetSha:w,secondaryTargetSha:v,targetType:y}=this._context;switch(this._onDeepLinkProgressUpdated.fire(vs.gn[e]),e){case vs.mg.Idle:return i===vs.WA.DeepLinkErrored&&(r.window.showErrorMessage("Unable to resolve link"),Pe.Yd.warn(`Unable to resolve link - ${t}: ${a}`)),void this.resetContext();case vs.mg.TypeMatch:if(y===vs._n.Workspace)i=vs.WA.LinkIsWorkspaceType;else i=vs.WA.LinkIsRepoType;break;case vs.mg.RepoMatch:case vs.mg.AddedRepoMatch:{if(!o&&!c&&!p){i=vs.WA.DeepLinkErrored,t="No repository id, remote url or path was provided.";break}let r="",n="";null!=c&&([,r,n]=(0,fe.Sk)(c));for(const e of this.container.git.repositories){if(null!=p&&(0,k.AH)(e.path.toLowerCase())===(0,k.AH)(p.toLowerCase())){this._context.repo=e,i=vs.WA.RepoMatched;break}if(null!=r&&null!=n){const t=await e.getRemotes({filter:e=>e.matches(r,n)});if(t.length>0){this._context.repo=e,this._context.remote=t[0],i=vs.WA.RepoMatched;break}}if(null!=o&&"-"!==o&&await this.container.git.validateReference(e.path,o)){this._context.repo=e,i=vs.WA.RepoMatched;break}}if(!this._context.repo&&e===vs.mg.RepoMatch&&(s=await this.container.repositoryPathMapping.getLocalRepoPaths({remoteUrl:c}),s.length>0)){for(const e of this.container.git.repositories)if(s.some((t=>(0,k.AH)(e.path.toLowerCase())===(0,k.AH)(t.toLowerCase())))){this._context.repo=e,i=vs.WA.RepoMatched;break}if(null==this._context.repo){i=vs.WA.RepoMatchedInLocalMapping;break}}this._context.repo||(e===vs.mg.RepoMatch?i=vs.WA.RepoMatchFailed:(i=vs.WA.DeepLinkErrored,t="No matching repository found."));break}case vs.mg.CloneOrAddRepo:{if(!o&&!c&&!p){i=vs.WA.DeepLinkErrored,t="Missing repository id, remote url and path.";break}let e,n,a;if(s.length>0){if(e=await r.window.showQuickPick([...s,"Choose a different location"],{placeHolder:"Matching repository found. Choose a location to open it."}),null==e){i=vs.WA.DeepLinkCancelled;break}"Choose a different location"!==e&&(a=r.Uri.file(e),n="folder")}if(null==n&&(n=await this.showOpenTypePrompt({customMessage:"Choose a different location"===e?"Please choose an option to open the repository":void 0})),!n){i=vs.WA.DeepLinkCancelled;break}const l=await this.showOpenLocationPrompt(n);if(!l){i=vs.WA.DeepLinkCancelled;break}if(null==a&&(a=(await r.window.showOpenDialog({title:`Choose a ${"workspace"===n?"workspace":"folder"} to ${"clone"===n?"clone the repository to":"open the repository"}`,canSelectFiles:"workspace"===n,canSelectFolders:"workspace"!==n,canSelectMany:!1,..."workspace"===n&&{filters:{Workspaces:["code-workspace"]}}}))?.[0]),!a){i=vs.WA.DeepLinkCancelled;break}if(null!=a&&null!=c&&"clone"===n){let e;try{e=await r.window.withProgress({location:r.ProgressLocation.Notification,title:`Cloning repository for link: ${this._context.url}}`},(async()=>this.container.git.clone(c,a?.fsPath??"")))}catch{i=vs.WA.DeepLinkErrored,t="Unable to clone repository";break}if(!e){i=vs.WA.DeepLinkErrored,t="Unable to clone repository";break}a=r.Uri.file(e)}if("current"!==n&&"workspace"!==n&&!s.includes(a.fsPath)){const e=await this.container.git.getOrOpenRepository(a,{closeOnOpen:!0,detectNested:!1});null!=e&&await this.container.repositoryPathMapping.writeLocalRepoPath({remoteUrl:c},e.uri.fsPath)}"addToWorkspace"===l&&(r.workspace.workspaceFolders?.length||0)>1?i=vs.WA.OpenRepo:(await this.container.storage.store("deepLinks:pending",{url:this._context.url,repoPath:a.toString()}),i=vs.WA.DeepLinkStored),(0,Re.ic)(a,{location:l});break}case vs.mg.OpeningRepo:return void this._disposables.push((0,$i.IH)(this.container.git.onDidChangeRepositories)((()=>{queueMicrotask((()=>this.processDeepLink(vs.WA.RepoAdded)))})));case vs.mg.RemoteMatch:if(p&&n&&!c&&!l){i=vs.WA.RemoteMatchUnneeded;break}if(!n||!c&&!l){i=vs.WA.DeepLinkErrored,t="Missing repository or remote url.";break}if(c&&!h){const e=await n.getRemotes({filter:e=>e.url===c});e.length>0&&(this._context.remote=e[0])}if(l&&!d){const e=await n.getRemotes({filter:e=>e.url===l});e.length>0&&(this._context.secondaryRemote=e[0])}i=c&&!this._context.remote||l&&!this._context.secondaryRemote?vs.WA.RemoteMatchFailed:vs.WA.RemoteMatched;break;case vs.mg.AddRemote:{if(!n||!c&&!l){i=vs.WA.DeepLinkErrored,t="Missing repository or remote url.";break}let e,r;if(c&&!h&&(e=await this.showAddRemotePrompt(c,(await n.getRemotes()).map((e=>e.name))),e)){try{await n.addRemote(e,c,{fetch:!0})}catch{i=vs.WA.DeepLinkErrored,t="Failed to add remote.";break}if([this._context.remote]=await n.getRemotes({filter:e=>e.url===c}),!this._context.remote){i=vs.WA.DeepLinkErrored,t="Failed to add remote.";break}}if(l&&!d&&(r=await this.showAddRemotePrompt(l,(await n.getRemotes()).map((e=>e.name))),r)){try{await n.addRemote(r,l,{fetch:!0})}catch{i=vs.WA.DeepLinkErrored,t="Failed to add remote.";break}if([this._context.secondaryRemote]=await n.getRemotes({filter:e=>e.url===l}),!this._context.secondaryRemote){i=vs.WA.DeepLinkErrored,t="Failed to add remote.";break}}this._context.secondaryRemote&&!this._context.remote&&(this._context.remote=this._context.secondaryRemote),e||r?this._context.remote||(i=vs.WA.DeepLinkErrored,t="Failed to add remote."):i=vs.WA.DeepLinkCancelled,i=vs.WA.RemoteAdded;break}case vs.mg.TargetMatch:case vs.mg.FetchedTargetMatch:if(!n||!y){i=vs.WA.DeepLinkErrored,t="Missing repository or target type.";break}if(y===vs._n.Repository){i=vs.WA.TargetMatched;break}if(y===vs._n.Comparison?[this._context.targetSha,this._context.secondaryTargetSha]=await this.getShasForTargets()??[]:this._context.targetSha=await this.getShasForTargets(),null==this._context.targetSha||null==this._context.secondaryTargetSha&&y===vs._n.Comparison){e===vs.mg.TargetMatch&&null!=h?i=vs.WA.TargetMatchFailed:(i=vs.WA.DeepLinkErrored,t=`No matching ${null==w?"target":"secondary target"} found.`);break}i=y===vs._n.Comparison?vs.WA.TargetsMatched:vs.WA.TargetMatched;break;case vs.mg.Fetch:if(!n||!h){i=vs.WA.DeepLinkErrored,t="Missing repository or remote.";break}if(!await this.showFetchPrompt()){i=vs.WA.DeepLinkCancelled;break}try{await n.fetch({remote:h.name,progress:!0})}catch{i=vs.WA.DeepLinkErrored,t="Error fetching remote.";break}if(d&&d.name!==h.name)try{await n.fetch({remote:d.name,progress:!0})}catch{}i=vs.WA.TargetFetched;break;case vs.mg.OpenGraph:if(!n||!y){i=vs.WA.DeepLinkErrored,t="Missing repository or target type.";break}if(y===vs._n.Repository){await(0,Zi.P0)(u.Gh.ShowInCommitGraph,n),i=vs.WA.DeepLinkResolved;break}if(!w){i=vs.WA.DeepLinkErrored,t=`Cannot find target ${y} in repo.`;break}await(0,Zi.P0)(u.Gh.ShowInCommitGraph,{ref:(0,m.xB)(w,n.path)}),i=vs.WA.DeepLinkResolved;break;case vs.mg.OpenComparison:if(!n){i=vs.WA.DeepLinkErrored,t="Missing repository.";break}if(null==g||null==f||null==w||null==v){i=vs.WA.DeepLinkErrored,t="Missing target or secondary target.";break}await this.container.searchAndCompareView.compare(n.path,""===f||(0,m.D3)(f)?f:{label:f,ref:v},""===g||(0,m.D3)(g)?g:{label:g,ref:w}),i=vs.WA.DeepLinkResolved;break;case vs.mg.OpenWorkspace:if(!o){i=vs.WA.DeepLinkErrored,t="Missing workspace id.";break}await this.container.workspacesView.revealWorkspaceNode(o,{select:!0,focus:!0,expand:!0}),i=vs.WA.DeepLinkResolved;break;default:i=vs.WA.DeepLinkErrored,t="Unknown state."}}}async copyDeepLinkUrl(e,t,i,s){const o=await("string"==typeof e?null!=t?this.generateDeepLinkUrl(e,t,i,s):this.generateDeepLinkUrl(e):this.generateDeepLinkUrl(e,t));await r.env.clipboard.writeText(o.toString())}async generateDeepLinkUrl(e,t,i,o){let n,a,c;const l=s.D.get("deepLinks.schemeOverride"),h=l?!0===l?r.env.uriScheme:l:"vscode";let u="";if("dev"===this.container.env?u="dev.":"staging"===this.container.env&&(u="staging."),null==t&&"string"==typeof e)return new URL(`https://${u}gitkraken.dev/link/workspaces/${e}`);const d="string"!=typeof e?e.repoPath:e,p=await this.container.git.getUniqueRepositoryId(d)??"-";if("string"!=typeof e)switch(e.refType){case"branch":n=vs._n.Branch,a=e.remote?(0,f.S3)(e.name):e.name;break;case"revision":n=vs._n.Commit,a=e.ref;break;case"tag":n=vs._n.Tag,a=e.name}let m;null!=i&&null!=o&&(n=vs._n.Comparison,a=i.label??i.ref,c=o.label??o.ref),m=n===vs._n.Comparison?`/${n}/${c}...${a}`:null!=n&&n!==vs._n.Repository?`/${n}/${a}`:"";const g=new URL(`${h}://${this.container.context.extension.id}/link/${vs._n.Repository}/${p}${m}`);null!=t&&g.searchParams.set("url",t);return new URL(`https://${u}gitkraken.dev/link/${encodeURIComponent(Buffer.from(g.href).toString("base64"))}`)}}var ys=Object.defineProperty,bs=Object.getOwnPropertyDescriptor;class UriService{constructor(e){this.container=e,this._disposable=r.window.registerUriHandler(this)}_disposable;_onDidReceiveAuthenticationUri=new r.EventEmitter;get onDidReceiveAuthenticationUri(){return this._onDidReceiveAuthenticationUri.event}_onDidReceiveUri=new r.EventEmitter;get onDidReceiveUri(){return this._onDidReceiveUri.event}dispose(){this._disposable.dispose()}handleUri(e){const[,t]=e.path.split("/");t!==vr?this._onDidReceiveUri.fire(e):this._onDidReceiveAuthenticationUri.fire(e)}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?bs(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&ys(t,i,o)})([(0,g.cM)({args:{0:e=>e.with({query:""}).toString(!0)}})],UriService.prototype,"handleUri",1);var Cs=i(4481),As=i(6586),ks=i(6922);class BranchTrackingStatusFilesNode extends ks.Re{constructor(e,t,i,r,s){super(dt.YY.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.status=r,this.direction=s,this.updateContext({branch:i,branchStatus:r,branchStatusUpstreamType:s}),this._uniqueId=(0,ks.tO)("tracking-status-files",this.context)}get repoPath(){return this.status.repoPath}async getChildren(){const e=await this.view.container.git.getLog(this.repoPath,{limit:0,ref:(0,m.oI)(this.status.upstream,this.branch.ref,"behind"===this.direction?"...":"..")});let t;null!=e?(await Promise.allSettled((0,ke.UI)((0,ke.hX)(e.commits.values(),(e=>null==e.files)),(e=>e.ensureFullDetails()))),t=[...(0,ke.VS)(e.commits.values(),(e=>e.files?.map((t=>({...t,commit:e})))??[]))]):t=[],t.sort(((e,t)=>t.commit.date.getTime()-e.commit.date.getTime()));const i=(0,A.vM)(t,(e=>e.path));let r=Object.values(i).map((e=>new As.q(this.view,this,e[e.length-1],this.repoPath,e.map((e=>e.commit)),this.direction)));if("list"!==this.view.config.files.layout){const e=(0,A.Mo)(r,(e=>e.uri.relativePath.split("/")),((...e)=>(0,k.AH)((0,k.RQ)(...e))),this.view.config.files.compact);r=new Cs.Y(this.view,this,e,this.repoPath,"",void 0,!1).getChildren()}else r.sort(((e,t)=>e.priority-t.priority||(0,P.dm)(e.label,t.label)));return r}async getTreeItem(){const e=await this.view.container.git.getChangedFilesCount(this.repoPath,`${this.status.upstream}${"behind"===this.direction?"..":"..."}`),t=e?.changedFiles??0,i=`${(0,P._6)("file",t)} changed`,s=new r.TreeItem(i,r.TreeItemCollapsibleState.Collapsed);return s.id=this.id,s.contextValue=ks.Td.BranchStatusFiles,s}}var Ps=i(2925),Ss=i(21),Ds=i(4741),Rs=Object.defineProperty,$s=Object.getOwnPropertyDescriptor,_s=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?$s(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Rs(t,i,o),o};class BranchTrackingStatusNode extends ks.Re{constructor(e,t,i,r,s,o=!1,n){super(dt.YY.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.status=r,this.upstreamType=s,this.root=o,this.options=n,this.updateContext({branch:i,branchStatus:r,branchStatusUpstreamType:s,root:o}),this._uniqueId=(0,ks.tO)("tracking-status",this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}get repoPath(){return this.uri.repoPath}async getChildren(){if("same"===this.upstreamType||"none"===this.upstreamType)return[];const e=await this.getLog();if(null==e)return[];let t;if("ahead"===this.upstreamType){t=[...e.commits.values()];const i=t[t.length-1];if(null==await i.getPreviousSha()){const e=await this.view.container.git.getLog(this.uri.repoPath,{limit:2,ref:i.sha});null!=e&&(t[t.length-1]=(0,ke.Ps)(e.commits.values()))}}else t=e.commits.values();const i=[];let r=!0;return!this.options?.showAheadCommits&&"ahead"===this.upstreamType&&this.status.upstream&&this.status.state.ahead>0?(r=!1,i.push(...await new BranchTrackingStatusFilesNode(this.view,this,this.branch,this.status,this.upstreamType).getChildren())):(i.push(...(0,Ds.E)((0,ke.UI)(t,(e=>new Ps.D(this.view,this,e,"ahead"===this.upstreamType,this.branch))),this,1)),e.hasMore&&i.push(new Ss.Gd(this.view,this,i[i.length-1]))),r&&i.unshift(new BranchTrackingStatusFilesNode(this.view,this,this.branch,this.status,this.upstreamType)),i}async getTreeItem(){let e,t,i,s,o,n,a=0;if("none"!==this.upstreamType){const e=this.view.container.git.getRepository(this.repoPath);a=await(e?.getLastFetched())??0}switch(this.upstreamType){case"ahead":{const a=await this.branch.getRemote();e=`Changes to push to ${a?.name??(0,f.Lo)(this.status.upstream)}${a?.provider?.name?` on ${a?.provider.name}`:""}`,t=(0,P._6)("commit",this.status.state.ahead),n=`Branch $(git-branch) ${this.branch.name} is ${(0,P._6)("commit",this.status.state.ahead,{infix:"$(arrow-up) "})} ahead of $(git-branch) ${this.status.upstream}${a?.provider?.name?` on ${a.provider.name}`:""}`,i=r.TreeItemCollapsibleState.Collapsed,s=this.root?ks.Td.StatusAheadOfUpstream:ks.Td.BranchStatusAheadOfUpstream,o=new r.ThemeIcon("cloud-upload",new r.ThemeColor("gitlens.unpublishedChangesIconColor"));break}case"behind":{const a=await this.branch.getRemote();e=`Changes to pull from ${a?.name??(0,f.Lo)(this.status.upstream)}${a?.provider?.name?` on ${a.provider.name}`:""}`,t=(0,P._6)("commit",this.status.state.behind),n=`Branch $(git-branch) ${this.branch.name} is ${(0,P._6)("commit",this.status.state.behind,{infix:"$(arrow-down) "})} behind $(git-branch) ${this.status.upstream}${a?.provider?.name?` on ${a.provider.name}`:""}`,i=r.TreeItemCollapsibleState.Collapsed,s=this.root?ks.Td.StatusBehindUpstream:ks.Td.BranchStatusBehindUpstream,o=new r.ThemeIcon("cloud-download",new r.ThemeColor("gitlens.unpulledChangesIconColor"));break}case"same":{const c=await this.branch.getRemote();e=`Up to date with ${c?.name??(0,f.Lo)(this.status.upstream)}${c?.provider?.name?` on ${c.provider.name}`:""}`,t=a?`Last fetched ${(0,oe.Zh)(new Date(a))}`:"",n=`Branch $(git-branch) ${this.branch.name} is up to date with $(git-branch) ${this.status.upstream}${c?.provider?.name?` on ${c.provider.name}`:""}`,i=r.TreeItemCollapsibleState.None,s=this.root?ks.Td.StatusSameAsUpstream:ks.Td.BranchStatusSameAsUpstream,o=new r.ThemeIcon("cloud");break}case"none":{const t=await this.view.container.git.getRemotesWithProviders(this.branch.repoPath),a=mt.ss.getHighlanderProviders(t),c=a?.length?a[0].name:void 0;e=`Publish ${this.branch.name} to ${c??"a remote"}`,n=`Branch $(git-branch) ${this.branch.name} hasn't been published to ${c??"a remote"}`,i=r.TreeItemCollapsibleState.None,s=this.root?ks.Td.StatusNoUpstream:ks.Td.BranchStatusNoUpstream,o=new r.ThemeIcon("cloud-upload",t.length?new r.ThemeColor("gitlens.unpublishedChangesIconColor"):void 0);break}}const c=new r.TreeItem(e,i);c.id=this.id,c.contextValue=s,c.description=t,a&&(n+=`\n\nLast fetched ${(0,oe.Zh)(new Date(a))}`),c.iconPath=o;const l=new r.MarkdownString(n,!0);return l.supportHtml=!0,l.isTrusted=!0,c.tooltip=l,c}refresh(e){e&&(this._log=void 0)}_log;async getLog(){if("same"!==this.upstreamType&&"none"!==this.upstreamType){if(null==this._log){const e="ahead"===this.upstreamType?(0,m.oI)(this.status.upstream,this.status.ref):(0,m.oI)(this.status.ref,this.status.upstream);this._log=await this.view.container.git.getLog(this.uri.repoPath,{limit:this.limit??this.view.config.defaultItemLimit,ref:e})}return this._log}}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await r.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}}_s([(0,Gt.H)(),(0,g.fF)()],BranchTrackingStatusNode.prototype,"refresh",1),_s([(0,Gt.H)()],BranchTrackingStatusNode.prototype,"loadMore",1);var Fs=i(9729),Ts=i(3636),xs=i(5538),Is=i(5988),Os=i(812),Bs=Object.defineProperty,Es=Object.getOwnPropertyDescriptor,Ws=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Es(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Bs(t,i,o),o};class CompareBranchNode extends ks.CF{constructor(e,t,i,r,s,o=!1){super(e,t,i),this.parent=i,this.branch=r,this.showComparison=s,this.root=o,this.updateContext({branch:r,root:o,storedComparisonId:this.getStorageId()}),this._uniqueId=(0,ks.tO)("compare-branch",this.context),this.loadCompareWith()}_children;_compareWith;etag(){return 0}get ahead(){return{ref1:this._compareWith?.ref||"HEAD",ref2:this.branch.ref}}get behind(){return{ref1:this.branch.ref,ref2:this._compareWith?.ref||"HEAD"}}get repoPath(){return this.branch.repoPath}subscribe(){return this.view.onDidChangeNodesCheckedState(this.onNodesCheckedStateChanged,this)}onNodesCheckedStateChanged(e){const t=(0,xs.iS)(this.getStorageId());e.items.some((([e])=>e.id?.startsWith(t)))&&this.storeCompareWith(!1)}async getChildren(){if(null==this._compareWith)return[];if(null==this._children){const e=this.ahead,t=this.behind,i=await this.view.container.git.getAheadBehindCommitCount(this.branch.repoPath,[(0,m.oI)(t.ref1,t.ref2,"...")]),r=await this.view.container.git.getMergeBase(this.repoPath,t.ref1,t.ref2,{forkPoint:!0})??await this.view.container.git.getMergeBase(this.repoPath,t.ref1,t.ref2);this._children=[new Is.J(this.view,this,this.repoPath,"Behind",{query:this.getCommitsQuery((0,m.oI)(t.ref1,t.ref2,"..")),comparison:t,direction:"behind",files:{ref1:this.compareWithWorkingTree?"":r??t.ref1,ref2:t.ref2,query:this.getBehindFilesQuery.bind(this)}},{description:(0,P._6)("commit",i?.behind??0),expand:!1}),new Is.J(this.view,this,this.repoPath,"Ahead",{query:this.getCommitsQuery((0,m.oI)(e.ref1,this.compareWithWorkingTree?"":e.ref2,"..")),comparison:e,direction:"ahead",files:{ref1:r??e.ref1,ref2:this.compareWithWorkingTree?"":e.ref2,query:this.getAheadFilesQuery.bind(this)}},{description:(0,P._6)("commit",i?.ahead??0),expand:!1}),new Os.V(this.view,this,this.repoPath,this._compareWith.ref||"HEAD",this.compareWithWorkingTree?"":this.branch.ref,this.getFilesQuery.bind(this),void 0,{expand:!1})]}return this._children}getTreeItem(){let e,t,i;null==this._compareWith?(t=`Compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with <branch, tag, or ref>`,e=r.TreeItemCollapsibleState.None,i=`Click to compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with a branch, tag, or ref`):(t=`Compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with ${(0,m.zL)(this._compareWith.ref,{strings:{working:"Working Tree"}})}`,e=r.TreeItemCollapsibleState.Collapsed);const s=new r.TreeItem(t,e);return s.id=this.id,s.contextValue=`${ks.Td.CompareBranch}${this.branch.current?"+current":""}+${this.comparisonType}${null==this._compareWith?"":"+comparing"}${this.root?"+root":""}`,null==this._compareWith&&(s.command={title:`Compare ${this.branch.name}${this.compareWithWorkingTree?" (working)":""} with${u.NE.Ellipsis}`,command:"gitlens.views.editNode",arguments:[this]}),s.iconPath=new r.ThemeIcon("git-compare"),s.tooltip=i,s}async clear(){this._compareWith=void 0,await this.updateCompareWith(void 0),this._children=void 0,this.view.triggerNodeChange(this)}async edit(){await this.compareWith()}refresh(){this._children=void 0,this.loadCompareWith()}async setComparisonType(e){null!=this._compareWith?await this.updateCompareWith({...this._compareWith,type:e,checkedFiles:void 0}):this.showComparison=e,this._children=void 0,this.view.triggerNodeChange(this)}get comparisonType(){return this._compareWith?.type??this.showComparison}get compareWithWorkingTree(){return"working"===this.comparisonType}async compareWith(){const e=await(0,Ts.V)(this.branch.repoPath,`Compare ${this.branch.name}${this.compareWithWorkingTree?" (working)":""} with`,"Choose a reference to compare with",{allowEnteringRefs:!0,picked:this.branch.ref,sort:{branches:{current:!0},tags:{}}});null==e||e instanceof Fs.$w||(await this.updateCompareWith({ref:e.ref,notation:void 0,type:this.comparisonType}),this._children=void 0,this.view.triggerNodeChange(this))}async getAheadFilesQuery(){const e=(0,m.oI)(this._compareWith?.ref||"HEAD",this.branch.ref||"HEAD","..."),[t,i,r,s]=await Promise.allSettled([this.view.container.git.getDiffStatus(this.repoPath,e),this.compareWithWorkingTree?this.view.container.git.getDiffStatus(this.repoPath,"HEAD"):void 0,this.view.container.git.getChangedFilesCount(this.repoPath,e),this.compareWithWorkingTree?this.view.container.git.getChangedFilesCount(this.repoPath,"HEAD"):void 0]);let o=(0,Vt.Sb)(t)??[],n=(0,Vt.Sb)(r);if(this.compareWithWorkingTree){const e=(0,Vt.Sb)(i);if(null!=e)if(0===o.length)o=e;else for(const t of e){const e=o.findIndex((e=>e.path===t.path));-1!==e?o.splice(e,1,t):o.push(t)}const t=(0,Vt.Sb)(s);null!=t&&(n=null==n?t:{additions:n.additions+t.additions,deletions:n.deletions+t.deletions,changedFiles:o.length,approximated:!0})}return{label:`${(0,P._6)("file",o.length,{zero:"No"})} changed`,files:o,stats:n}}async getBehindFilesQuery(){const e=(0,m.oI)(this.branch.ref,this._compareWith?.ref||"HEAD","..."),[t,i]=await Promise.allSettled([this.view.container.git.getDiffStatus(this.repoPath,e),this.view.container.git.getChangedFilesCount(this.repoPath,e)]),r=(0,Vt.Sb)(t)??[];return{label:`${(0,P._6)("file",r.length,{zero:"No"})} changed`,files:r,stats:(0,Vt.Sb)(i)}}getCommitsQuery(e){const t=this.repoPath;return async i=>{const r=await this.view.container.git.getLog(t,{limit:i,ref:e}),s={log:r,hasMore:r?.hasMore??!0};return s.hasMore&&(s.more=async e=>{s.log=await(s.log?.more?.(e))??s.log,s.hasMore=s.log?.hasMore??!0}),s}}async getFilesQuery(){let e;e=this._compareWith?.ref?this.compareWithWorkingTree?this._compareWith.ref:`${this._compareWith.ref}..${this.branch.ref}`:this.branch.ref;const[t,i]=await Promise.allSettled([this.view.container.git.getDiffStatus(this.repoPath,e),this.view.container.git.getChangedFilesCount(this.repoPath,e)]),r=(0,Vt.Sb)(t)??[];return{label:`${(0,P._6)("file",r.length,{zero:"No"})} changed`,files:r,stats:(0,Vt.Sb)(i)}}getStorageId(){return`${this.branch.id}${this.branch.current?"+current":""}`}loadCompareWith(){const e=this.view.container.storage.getWorkspace("branch:comparisons"),t=this.getStorageId(),i=e?.[t];null!=i&&"string"==typeof i?this._compareWith={ref:i,notation:void 0,type:this.showComparison}:(this._compareWith=i,null!=i&&(0,xs.k7)(this.view,i.checkedFiles))}async storeCompareWith(e){const t=this.getStorageId();e&&(0,xs.vK)(this.view,t);let i=this.view.container.storage.getWorkspace("branch:comparisons");if(null==i){if(null==this._compareWith)return;i=Object.create(null)}if(null!=this._compareWith){const e=(0,xs.uL)(this.view,t);this._compareWith.checkedFiles=e,i[t]={...this._compareWith}}else{if(null==i[t])return;const{[t]:e,...r}=i;i=r}await this.view.container.storage.storeWorkspace("branch:comparisons",i)}async updateCompareWith(e){this._compareWith=e,await this.storeCompareWith(!0)}}Ws([(0,g.cM)()],CompareBranchNode.prototype,"clear",1),Ws([(0,g.cM)()],CompareBranchNode.prototype,"edit",1),Ws([(0,Gt.H)(),(0,g.fF)()],CompareBranchNode.prototype,"refresh",1),Ws([(0,g.cM)()],CompareBranchNode.prototype,"setComparisonType",1);var Ns=i(6373),Ms=i(7692),Us=i(4167);class MergeConflictFileNode extends ks.Te{constructor(e,t,i,r){super(dt.YY.fromFile(i,r.repoPath,r.HEAD.ref),e,t,i),this.status=r}toClipboard(){return this.fileName}get baseUri(){return dt.YY.fromFile(this.file,this.status.repoPath,this.status.mergeBase??"HEAD")}get fileName(){return this.file.path}getChildren(){return[new Ms.l(this.view,this,this.status,this.file),new Us.w(this.view,this,this.status,this.file)]}getTreeItem(){const e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.Collapsed);e.description=this.description,e.contextValue=`${ks.Td.File}+conflicted`;const t=Ns.o.fromTemplate("${file}${ • changesDetail}${\\\\\ndirectory}${\n\nstatus}${ (originalPath)} in Index (staged)",this.file),i=new r.MarkdownString(t,!0);return i.isTrusted=!0,i.supportHtml=!0,e.tooltip=i,e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),e.iconPath=r.ThemeIcon.File,e.command=this.getCommand(),this._label=void 0,this._description=void 0,e}_description;get description(){return null==this._description&&(this._description=Ns.o.fromTemplate(this.view.config.formats.files.description,this.file,{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return null==this._folderName&&(this._folderName=(0,k.Fd)(this.uri.relativePath)),this._folderName}_label;get label(){return null==this._label&&(this._label=Ns.o.fromTemplate(this.view.config.formats.files.label,this.file,{relativePath:this.relativePath})),this._label}get priority(){return 0}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getCommand(){return(0,Zi.j$)("vscode.open","Open File",this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),{preserveFocus:!0,preview:!0})}}class MergeConflictFilesNode extends ks.Re{constructor(e,t,i,r){super(dt.YY.fromRepoPath(i.repoPath),e,t),this.parent=t,this.status=i,this.conflicts=r}get repoPath(){return this.uri.repoPath}getChildren(){let e=this.conflicts.map((e=>new MergeConflictFileNode(this.view,this,e,this.status)));if("list"!==this.view.config.files.layout){const t=(0,A.Mo)(e,(e=>e.uri.relativePath.split("/")),((...e)=>(0,k.AH)((0,k.RQ)(...e))),this.view.config.files.compact);e=new Cs.Y(this.view,this,t,this.repoPath,"",void 0).getChildren()}else e.sort(((e,t)=>(0,P.dm)(e.label,t.label)));return e}getTreeItem(){return new r.TreeItem((0,P._6)("conflict",this.conflicts.length),r.TreeItemCollapsibleState.Expanded)}}class MergeStatusNode extends ks.Re{constructor(e,t,i,r,s,o){super(dt.YY.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.mergeStatus=r,this.status=s,this.root=o,this.updateContext({branch:i,root:o,status:"merging"}),this._uniqueId=(0,ks.tO)("merge-status",this.context)}get repoPath(){return this.uri.repoPath}getChildren(){return this.status?.hasConflicts?[new MergeConflictFilesNode(this.view,this,this.mergeStatus,this.status.conflicts)]:[]}getTreeItem(){const e=!0===this.status?.hasConflicts,t=new r.TreeItem(`${e?"Resolve conflicts before merging":"Merging"} ${null!=this.mergeStatus.incoming?`${(0,m.Wh)(this.mergeStatus.incoming,{expand:!1,icon:!1})} `:""}into ${(0,m.Wh)(this.mergeStatus.current,{expand:!1,icon:!1})}`,e?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.None);t.id=this.id,t.contextValue=ks.Td.Merge,t.description=e?(0,P._6)("conflict",this.status.conflicts.length):void 0,t.iconPath=e?new r.ThemeIcon("warning",new r.ThemeColor("gitlens.decorations.statusMergingOrRebasingConflictForegroundColor")):new r.ThemeIcon("warning",new r.ThemeColor("gitlens.decorations.statusMergingOrRebasingForegroundColor"));const i=new r.MarkdownString(`Merging ${null!=this.mergeStatus.incoming?(0,m.Wh)(this.mergeStatus.incoming,{label:!1}):""}into ${(0,m.Wh)(this.mergeStatus.current,{label:!1})}${e?`\n\nResolve ${(0,P._6)("conflict",this.status.conflicts.length)} before continuing`:""}`,!0);return i.supportHtml=!0,i.isTrusted=!0,t.tooltip=i,t}}var Ls=i(2060);class RebaseCommitNode extends Ps.D{async getTreeItem(){const e=new r.TreeItem(`Paused at commit ${this.commit.shortSha}`,this._options.expand?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=`${ks.Td.Commit}+rebase`,e.description=Di.i.fromTemplate("${message}",this.commit,{messageTruncateAtNewLine:!0}),e.iconPath=new r.ThemeIcon("debug-pause"),e}getTooltipTemplate(){return`Rebase paused at ${super.getTooltipTemplate()}`}}class RebaseStatusNode extends ks.Re{constructor(e,t,i,r,s,o){super(dt.YY.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.rebaseStatus=r,this.status=s,this.root=o,this.updateContext({branch:i,root:o,status:"rebasing"}),this._uniqueId=(0,ks.tO)("merge-status",this.context)}get repoPath(){return this.uri.repoPath}async getChildren(){const e=[],t=this.rebaseStatus.steps.current.commit;if(null!=t){const i=null!=t?await this.view.container.git.getCommit(this.rebaseStatus.repoPath,t.ref):void 0;null!=i&&e.push(new RebaseCommitNode(this.view,this,i))}return this.status?.hasConflicts&&e.push(new MergeConflictFilesNode(this.view,this,this.rebaseStatus,this.status.conflicts)),e}getTreeItem(){const e=this.rebaseStatus.steps.total>0,t=e&&null!=this.rebaseStatus.steps.current.commit,i=!0===this.status?.hasConflicts,s=new r.TreeItem(`${i?"Resolve conflicts to continue rebasing":e?"Rebasing":"Pending rebase of"} ${null!=this.rebaseStatus.incoming?`${(0,m.Wh)(this.rebaseStatus.incoming,{expand:!1,icon:!1})}`:""} onto ${(0,m.Wh)(this.rebaseStatus.current??this.rebaseStatus.onto,{expand:!1,icon:!1})}${e?` (${this.rebaseStatus.steps.current.number}/${this.rebaseStatus.steps.total})`:""}`,t?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.None);s.id=this.id,s.contextValue=ks.Td.Rebase,s.description=i?(0,P._6)("conflict",this.status.conflicts.length):void 0,s.iconPath=i?new r.ThemeIcon("warning",new r.ThemeColor("gitlens.decorations.statusMergingOrRebasingConflictForegroundColor")):new r.ThemeIcon("warning",new r.ThemeColor("gitlens.decorations.statusMergingOrRebasingForegroundColor"));const o=new r.MarkdownString(`${e?"Rebasing":"Pending rebase of"} ${null!=this.rebaseStatus.incoming?(0,m.Wh)(this.rebaseStatus.incoming,{label:!1}):""} onto ${(0,m.Wh)(this.rebaseStatus.current??this.rebaseStatus.onto,{label:!1})}${e?`\n\nPaused at step ${this.rebaseStatus.steps.current.number} of ${this.rebaseStatus.steps.total}${i?`\\\nResolve ${(0,P._6)("conflict",this.status.conflicts.length)} before continuing`:""}`:""}`,!0);return o.supportHtml=!0,o.isTrusted=!0,s.tooltip=o,s.resourceUri=r.Uri.parse("gitlens-view://status/rebasing"+(i?"/conflicts":"")),s}async openEditor(){const e=r.Uri.joinPath(this.uri,".git","rebase-merge","git-rebase-todo");await(0,Zi.dO)("vscode.openWith",e,"gitlens.rebase",{preview:!1})}}var Gs=Object.defineProperty,Hs=Object.getOwnPropertyDescriptor,Vs=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Hs(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Gs(t,i,o),o};class BranchNode extends ks.bT{constructor(e,t,i,r,s,o,n){super(e,t,i),this.parent=i,this.repo=r,this.branch=s,this.root=o,this.updateContext({repository:r,branch:s,root:o}),this._uniqueId=(0,ks.tO)("branch",this.context),this.limit=this.view.getNodeLastKnownLimit(this),this.options={expanded:!1,limitCommits:!1,showAsCommits:!1,showComparison:!1,showCurrent:!this.root,showStatus:!0,showTracking:!this.root,...n}}limit;options;splatted=!0;get id(){return this._uniqueId}toClipboard(){return this.branch.name}compacted=!1;get current(){return this.branch.current}get label(){if(this.options.showAsCommits)return"Commits";const e=this.branch.getNameWithoutRemote();return`${"tree"!==this.view.config.branches?.layout||this.compacted||this.root||this.current||this.branch.detached||this.branch.starred?e:this.branch.getBasename()}${this.branch.rebasing?" (Rebasing)":""}`}get ref(){return this.branch}get treeHierarchy(){return this.root||this.current||this.branch.detached||this.branch.starred?[this.branch.name]:this.branch.getNameWithoutRemote().split("/")}_children;async getChildren(){if(null==this._children){const e=this.branch;let t,i;if(this.view.config.pullRequests.enabled&&this.view.config.pullRequests.showForBranches&&(null!=e.upstream||e.remote)&&(0,Ni.fw)("gitlens:hasConnectedRemotes")&&(i=this.getState("pullRequest"),void 0===i&&void 0===this.getState("pendingPullRequest"))){t=(0,Vt.PQ)();const i=this.getAssociatedPullRequest(e,this.root?{include:["opened","merged"]}:void 0);queueMicrotask((async()=>{await(t?.promise);let r=!1;const s=setTimeout((()=>{r=!0,this.view.triggerNodeChange(this)}),250),o=await i;clearTimeout(s),null!=o&&null!=this._children&&this._children.splice(this._children[0]instanceof CompareBranchNode?1:0,0,new Ls.Z(this.view,this,o,e)),(r||null!=o)&&this.view.triggerNodeChange(this.root?this.parent??this:this)}))}const[r,s,o,n,a,c]=await Promise.allSettled([this.getLog(),this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath,e.name),this.options.showStatus&&e.current?this.view.container.git.getStatusForRepo(this.uri.repoPath):void 0,this.options.showStatus&&e.current?this.view.container.git.getMergeStatus(this.uri.repoPath):void 0,this.options.showStatus?this.view.container.git.getRebaseStatus(this.uri.repoPath):void 0,e.remote?void 0:this.view.container.git.getBranchAheadRange(e).then((e=>e?this.view.container.git.getLogRefsOnly(this.uri.repoPath,{limit:0,ref:e}):void 0))]),l=(0,Vt.Sb)(r);if(null==l)return[new Ss.AE(this.view,this,"No commits could be found.")];const h=[];!1!==this.options.showComparison&&"remotes"!==this.view.type&&h.push(new CompareBranchNode(this.uri,this.view,this,e,this.options.showComparison,this.splatted)),null!=i&&h.push(new Ls.Z(this.view,this,i,e));const d=(0,Vt.Sb)(o),p=(0,Vt.Sb)(n),m=(0,Vt.Sb)(a);if(this.options.showStatus&&null!=p)h.push(new MergeStatusNode(this.view,this,e,p,d??await this.view.container.git.getStatusForRepo(this.uri.repoPath),this.root));else if(this.options.showStatus&&null!=m&&(e.current||e.name===m.incoming.name))h.push(new RebaseStatusNode(this.view,this,e,m,d??await this.view.container.git.getStatusForRepo(this.uri.repoPath),this.root));else if(this.options.showTracking){const t={ref:e.ref,repoPath:e.repoPath,state:e.state,upstream:e.upstream?.name};null!=e.upstream?!this.root||t.state.behind||t.state.ahead?(t.state.behind&&h.push(new BranchTrackingStatusNode(this.view,this,e,t,"behind",this.root)),t.state.ahead&&h.push(new BranchTrackingStatusNode(this.view,this,e,t,"ahead",this.root))):h.push(new BranchTrackingStatusNode(this.view,this,e,t,"same",this.root)):h.push(new BranchTrackingStatusNode(this.view,this,e,t,"none",this.root))}0!==h.length&&h.push(new Ss.AE(this.view,this,"",u.NE.Dash.repeat(2),""));const g=(0,Vt.Sb)(c),f=(0,Vt.Sb)(s);h.push(...(0,Ds.E)((0,ke.UI)(l.commits.values(),(t=>new Ps.D(this.view,this,t,g?.has(t.ref),e,f))),this)),l.hasMore&&h.push(new Ss.Gd(this.view,this,h[h.length-1],{getCount:()=>this.view.container.git.getCommitCount(e.repoPath,e.name)})),this._children=h,setTimeout((()=>t?.fulfill()),1)}return this._children}async getTreeItem(){this.splatted=!1;let e,t,i=`${this.current?"Current branch":"Branch"} $(git-branch) ${this.branch.getNameWithoutRemote()}${this.branch.rebasing?" (Rebasing)":""}`,s=ks.Td.Branch;this.current&&(s+="+current"),this.branch.remote&&(s+="+remote"),this.branch.starred&&(s+="+starred"),null==this.branch.upstream||this.branch.upstream.missing||(s+="+tracking"),this.options.showAsCommits&&(s+="+commits"),this.repo.closed&&(s+="+closed");let o="";if(!this.branch.remote)if(null!=this.branch.upstream){let n=u.NE.Dash;const a=await this.branch.getRemote();if(this.branch.upstream.missing)n=u.NE.Warning;else if(null!=a){let e,t;for(const{type:i}of a.urls)if("fetch"===i){if(e=!0,t)break}else if("push"===i&&(t=!0,e))break;e&&t?n=u.NE.ArrowsRightLeft:t?n=u.NE.ArrowRight:e&&(n=u.NE.ArrowLeft)}t=this.options.showAsCommits?`${this.branch.getTrackingStatus({suffix:(0,P.vk)(u.NE.Dot,1,1)})}${this.branch.getNameWithoutRemote()}${this.branch.rebasing?" (Rebasing)":""}${(0,P.vk)(n,2,2)}${this.branch.upstream.name}`:`${this.branch.getTrackingStatus({suffix:`${u.NE.Space} `})}${n}${u.NE.Space} ${this.branch.upstream.name}`,i+=` is ${this.branch.getTrackingStatus({empty:this.branch.upstream.missing?`missing upstream $(git-branch) ${this.branch.upstream.name}`:`up to date with $(git-branch)  ${this.branch.upstream.name}${a?.provider?.name?` on ${a.provider.name}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${this.branch.upstream.name}${a?.provider?.name?` on ${a.provider.name}`:""}`})}`,(this.branch.state.ahead||this.branch.state.behind)&&(this.branch.state.ahead&&(s+="+ahead",e=new r.ThemeColor("gitlens.unpublishedChangesIconColor"),o="-green"),this.branch.state.behind&&(s+="+behind",e=new r.ThemeColor("gitlens.unpulledChangesIconColor"),o=this.branch.state.ahead?"-yellow":"-red"))}else{const e=mt.ss.getHighlanderProviders(await this.view.container.git.getRemotesWithProviders(this.branch.repoPath));i+=` hasn't been published to ${(e?.length?e[0].name:void 0)??"a remote"}`}null!=this.branch.date&&(t=`${t?`${t}${(0,P.vk)(u.NE.Dot,2,2)}`:""}${this.branch.formattedDate}`,i+=`\n\nLast commit ${this.branch.formatDateFromNow()} (${this.branch.formatDate(this.view.container.BranchDateFormatting.dateFormat)})`),i=new r.MarkdownString(i,!0),i.supportHtml=!0,i.isTrusted=!0,this.branch.starred&&i.appendMarkdown("\\\n$(star-full) Favorited");const n=this.getState("pendingPullRequest");null!=n&&i.appendMarkdown(`\n\n$(loading~spin) Loading associated pull request${u.NE.Ellipsis}`);const a=new r.TreeItem(this.label,this.options.expanded?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);return a.id=this.id,a.contextValue=s,a.description=t,a.iconPath=null!=n?new r.ThemeIcon("loading~spin"):this.options.showAsCommits?new r.ThemeIcon("git-commit",e):{dark:this.view.container.context.asAbsolutePath(`images/dark/icon-branch${o}.svg`),light:this.view.container.context.asAbsolutePath(`images/light/icon-branch${o}.svg`)},a.tooltip=i,a.resourceUri=r.Uri.parse(`gitlens-view://branch/status/${await this.branch.getStatus()}${this.options.showCurrent&&this.current?"/current":""}`),a}async star(){await this.branch.star(),this.view.refresh(!0)}async unstar(){await this.branch.unstar(),this.view.refresh(!0)}refresh(e){this._children=void 0,e&&(this._log=void 0,this.deleteState())}async getAssociatedPullRequest(e,t){let i=this.getState("pullRequest");if(void 0!==i)return Promise.resolve(i??void 0);let r=this.getState("pendingPullRequest");return r??(r=e.getAssociatedPullRequest(t),this.storeState("pendingPullRequest",r),i=await r,this.storeState("pullRequest",i??null),this.deleteState("pendingPullRequest"),i)}_log;async getLog(){if(null==this._log){let e=this.limit??(this.root&&!this.options.limitCommits?this.view.config.pageItemLimit:this.view.config.defaultItemLimit);0!==e&&this.branch.state.ahead>e&&(e=Math.min(this.branch.state.ahead+1,2*e)),this._log=await this.view.container.git.getLog(this.uri.repoPath,{limit:e,ref:this.ref.ref,authors:this.options?.authors})}return this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await r.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this._children=void 0,this.triggerChange(!1)))}}Vs([(0,g.cM)()],BranchNode.prototype,"star",1),Vs([(0,g.cM)()],BranchNode.prototype,"unstar",1),Vs([(0,Gt.H)(),(0,g.fF)()],BranchNode.prototype,"refresh",1),Vs([(0,Gt.H)()],BranchNode.prototype,"loadMore",1);class BranchOrTagFolderNode extends ks.Re{constructor(e,t,i,r,s,o,n,a=!1){super(dt.YY.fromRepoPath(s),e,t),this.parent=t,this.type=i,this.root=r,this.repoPath=s,this.folderName=o,this.relativePath=n,this._expanded=a,this._uniqueId=(0,ks.tO)(`${i}-folder+${n??o}`,this.context)}get id(){return this._uniqueId}toClipboard(){return this.folderName}getChildren(){if(void 0===this.root.descendants||void 0===this.root.children)return[];const e=[];for(const t of this.root.children.values())if(void 0!==t.value)t.value.parent=this.folderName?this:this.parent,e.push(t.value);else{const i=t.descendants?.some((e=>e instanceof BranchNode&&e.current));e.push(new BranchOrTagFolderNode(this.view,this.folderName?this:this.parent,this.type,t,this.repoPath,t.name,t.relativePath,i))}return e}getTreeItem(){const e=new r.TreeItem(this.label,this._expanded?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=ks.Td.Folder,e.iconPath=r.ThemeIcon.Folder,e.tooltip=this.label,e}get label(){return this.folderName}}var Ys=Object.defineProperty,Qs=Object.getOwnPropertyDescriptor;class BranchesNode extends ks.Re{constructor(e,t,i,r){super(e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,ks.tO)("branches",this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}_children;async getChildren(){if(null==this._children){const e=await this.repo.getBranches({filter:e=>!e.remote,sort:{current:!1}});if(0===e.values.length)return[new Ss.AE(this.view,this,"No branches could be found.")];const t=e.values.map((e=>new BranchNode(dt.YY.fromRepoPath(this.uri.repoPath,e.ref),this.view,this,this.repo,e,!1,{showComparison:"repositories"===this.view.type?this.view.config.branches.showBranchComparison:this.view.config.showBranchComparison})));if("list"===this.view.config.branches.layout)return t;const i=(0,A.Mo)(t,(e=>e.treeHierarchy),((...e)=>e.join("/")),this.view.config.files.compact,(e=>(e.compacted=!0,!0))),r=new BranchOrTagFolderNode(this.view,this,"branch",i,this.repo.path,"",void 0);this._children=r.getChildren()}return this._children}async getTreeItem(){const e=new r.TreeItem("Branches",r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=ks.Td.Branches,await this.repo.hasRemotes()&&(e.contextValue+="+remotes"),this.repo.closed&&(e.contextValue+="+closed"),e.iconPath=new r.ThemeIcon("git-branch"),e}refresh(){this._children=void 0}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Qs(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&Ys(t,i,o)})([(0,Gt.H)(),(0,g.fF)()],BranchesNode.prototype,"refresh",1);var qs=Object.defineProperty,js=Object.getOwnPropertyDescriptor,zs=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?js(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&qs(t,i,o),o};class ViewBase{constructor(e,t,i,o){if(this.container=e,this.type=t,this.name=i,this.trackingFeature=o,this.disposables.push((0,$i.IH)(e.onReady)(this.onReady,this)),this.container.debugging||s.D.get("debug")){let e=function(e,t,i){null==e.tooltip&&(e.tooltip=new r.MarkdownString(null!=e.label&&"string"!=typeof e.label?e.label.label:e.label??"")),"string"==typeof e.tooltip?e.tooltip=`${e.tooltip}\n\n---\ncontext: ${e.contextValue}\nnode: ${t.toString()}${null!=i?`\nparent: ${i.toString()}`:""}`:e.tooltip.appendMarkdown(`\n\n---\n\ncontext: \`${e.contextValue}\`\\\nnode: \`${t.toString()}\`${null!=i?`\\\nparent: \`${i.toString()}\``:""}`)};const t=this.getTreeItem;this.getTreeItem=async function(i){const r=await t.apply(this,[i]);return null==i.resolveTreeItem&&e(r,i,i.getParent()),r};const i=this.resolveTreeItem;this.resolveTreeItem=async function(t,r){return t=await i.apply(this,[t,r]),e(t,r,r.getParent()),t}}this.disposables.push(...this.registerCommands())}get id(){return`gitlens.views.${this.type}`}_onDidInitialize=new r.EventEmitter;initialized=!1;_onDidChangeTreeData=new r.EventEmitter;get onDidChangeTreeData(){return this._onDidChangeTreeData.event}_onDidChangeSelection=new r.EventEmitter;get onDidChangeSelection(){return this._onDidChangeSelection.event}_onDidChangeVisibility=new r.EventEmitter;get onDidChangeVisibility(){return this._onDidChangeVisibility.event}_onDidChangeNodeCollapsibleState=new r.EventEmitter;get onDidChangeNodeCollapsibleState(){return this._onDidChangeNodeCollapsibleState.event}_onDidChangeNodesCheckedState=new r.EventEmitter;get onDidChangeNodesCheckedState(){return this._onDidChangeNodesCheckedState.event}disposables=[];root;tree;_lastKnownLimits=new Map;dispose(){this._nodeState?.dispose(),this._nodeState=void 0,r.Disposable.from(...this.disposables).dispose()}onReady(){this.initialize({canSelectMany:this.canSelectMany,showCollapseAll:this.showCollapseAll}),queueMicrotask((()=>this.onConfigurationChanged()))}get canReveal(){return!0}get canSelectMany(){return this.container.prereleaseOrDebugging&&s.D.get("views.experimental.multiSelect.enabled",void 0,!1)}_nodeState;get nodeState(){return null==this._nodeState&&(this._nodeState=new ViewNodeState),this._nodeState}get showCollapseAll(){return!0}filterConfigurationChanged(e){if(!s.D.changed(e,"views"))return!1;if(s.D.changed(e,`views.${this.configKey}`))return!0;for(const t of Mi.TA)if(s.D.changed(e,`views.${t}`))return!0;return!1}get badge(){return this.tree?.badge}set badge(e){null!=this.tree&&(this.tree.badge=e)}_title;get title(){return this._title}set title(e){this._title=e,null!=this.tree&&(this.tree.title=e)}_description;get description(){return this._description}set description(e){this._description=e,null!=this.tree&&(this.tree.description=e)}_message;get message(){return this._message}set message(e){this._message=e,null!=this.tree&&(this.tree.message=e)}getQualifiedCommand(e){return`gitlens.views.${this.type}.${e}`}onConfigurationChanged(e){null!=e&&null!=this.root&&this.refresh(!0)}initialize(e={}){this.tree=r.window.createTreeView(this.id,{...e,treeDataProvider:this}),this.disposables.push(s.D.onDidChange((e=>{this.filterConfigurationChanged(e)&&(this._config=void 0,this.onConfigurationChanged(e))}),this),this.tree,this.tree.onDidChangeSelection((0,Ht.Ds)(this.onSelectionChanged,250),this),this.tree.onDidChangeVisibility((0,Ht.Ds)(this.onVisibilityChanged,250),this),this.tree.onDidChangeCheckboxState(this.onCheckboxStateChanged,this),this.tree.onDidCollapseElement(this.onElementCollapsed,this),this.tree.onDidExpandElement(this.onElementExpanded,this)),null!=this._title?this.tree.title=this._title:this._title=this.tree.title,null!=this._description&&(this.tree.description=this._description),null!=this._message&&(this.tree.message=this._message)}ensureRoot(e=!1){return(null==this.root||e)&&(this.root=this.getRoot()),this.root}getChildren(e){if(null!=e)return e.getChildren();const t=this.ensureRoot().getChildren();return this.initialized||((0,Vt.tI)(t)?t.then((()=>{this.initialized||(this.initialized=!0,setTimeout((()=>this._onDidInitialize.fire()),1))})):(this.initialized=!0,setTimeout((()=>this._onDidInitialize.fire()),1))),t}getParent(e){return e.getParent()}getTreeItem(e){return e.getTreeItem()}resolveTreeItem(e,t){return t.resolveTreeItem?.(e)??e}onElementCollapsed(e){this._onDidChangeNodeCollapsibleState.fire({...e,state:r.TreeItemCollapsibleState.Collapsed})}onElementExpanded(e){this._onDidChangeNodeCollapsibleState.fire({...e,state:r.TreeItemCollapsibleState.Expanded})}onCheckboxStateChanged(e){try{for(const[t,i]of e.items){if(null==t.id)throw new Error("Id is required for checkboxes");t.storeState("checked",i,!0)}}finally{this._onDidChangeNodesCheckedState.fire(e)}}onSelectionChanged(e){this._onDidChangeSelection.fire(e)}onVisibilityChanged(e){e.visible&&this.container.usage.track(`${this.trackingFeature}:shown`),this._onDidChangeVisibility.fire(e)}get activeSelection(){if(null!=this.tree&&null!=this.root)return this.tree.selection[0]}get selection(){return null==this.tree||null==this.root?[]:this.tree.selection}get visible(){return this.tree?.visible??!1}async findNode(e,{allowPaging:t=!1,canTraverse:i,maxDepth:r=2,token:s}={}){const o=(0,De.UH)();async function n(){try{return await this.findNodeCoreBFS(e,this.ensureRoot(),t,i,r,s)}catch(e){return void Pe.Yd.error(e,o)}}return this.initialized?n.call(this):(this.show({preserveFocus:!0}),new Promise((e=>(0,$i.IH)(this._onDidInitialize.event)((()=>e(n.call(this))),this))))}async findNodeCoreBFS(e,t,i,r,o,n){const a=[t,void 0],c=s.D.get("advanced.maxListItems");let l,h,u,d=0;for(;a.length>1;){if(n?.isCancellationRequested)return;if(l=a.shift(),null!=l){if(e(l))return l;if(null!=r){const e=r(l);if((0,Vt.tI)(e)){if(!await e)continue}else if(!e)continue}if(h=await l.getChildren(),0!==h.length){for(;null!=l&&!(0,ks.On)(l);)l=await(l.getSplattedChild?.());if(null!=l&&(0,ks.On)(l)){let t=h.find(e);if(null!=t)return t;if(i&&l.hasMore)for(;;){if(n?.isCancellationRequested)return;if(await this.loadMoreNodeChildren(l,c),u=await(0,Vt.HO)(Promise.resolve(l.getChildren()),n??6e4,{onDidCancel:e=>e([])}),t=u.find(e),null!=t)return t;if(!l.hasMore)break}}else a.push(...h)}}else if(d++,a.push(void 0),d>o)break}}async ensureRevealNode(e,t){const i=[];let r=e;for(;null!=r;)i.push(r),r=r.getParent();i.length>1&&i.pop();for(const e of i.reverse())try{await this.reveal(e,t)}catch{}}async refresh(e=!1){e&&this.nodeState.reset(),await(this.root?.refresh?.(e)),this.triggerNodeChange()}async refreshNode(e,t=!1,i=!1){const r=await(e.refresh?.(t));(i||!0!==r)&&this.triggerNodeChange(e)}async reveal(e,t){if(null!=this.tree)try{await this.tree.reveal(e,t)}catch(e){Pe.Yd.error(e)}}async show(e){const t=(0,De.UH)();try{await(0,Zi.dO)(`${this.id}.focus`,e)}catch(e){Pe.Yd.error(e,t)}}getNodeLastKnownLimit(e){return this._lastKnownLimits.get(e.id)}async loadMoreNodeChildren(e,t,i,r){null!=i&&await this.reveal(i,{select:!0}),await e.loadMore(t,r),this._lastKnownLimits.set(e.id,e.limit)}resetNodeLastKnownLimit(e){this._lastKnownLimits.delete(e.id)}triggerNodeChange(e){this._onDidChangeTreeData.fire(null!=e&&e!==this.root?e:void 0)}_config;get config(){if(null==this._config){const e={...s.D.get("views")};for(const t of Mi.S4)delete e[t];this._config={...e,...s.D.get("views")[this.configKey]}}return this._config}}zs([(0,g.cM)({args:{0:"<function>",1:e=>`options=${JSON.stringify({...e,canTraverse:void 0,token:void 0})}`}})],ViewBase.prototype,"findNode",1),zs([(0,g.fF)()],ViewBase.prototype,"refresh",1),zs([(0,g.fF)({args:{0:e=>e.toString()}})],ViewBase.prototype,"refreshNode",1),zs([(0,g.cM)({args:{0:e=>e.toString()}})],ViewBase.prototype,"reveal",1),zs([(0,g.cM)()],ViewBase.prototype,"show",1),zs([(0,g.fF)({args:{0:e=>e.toString(),2:e=>e?.toString()}})],ViewBase.prototype,"loadMoreNodeChildren",1),zs([(0,g.fF)({args:{0:e=>e.toString()},singleLine:!0})],ViewBase.prototype,"resetNodeLastKnownLimit",1),zs([(0,g.fF)({args:{0:e=>e?.toString()}})],ViewBase.prototype,"triggerNodeChange",1);class ViewNodeState{_store;_stickyStore;dispose(){this.reset(),this._stickyStore?.clear(),this._stickyStore=void 0}reset(){this._store?.clear(),this._store=void 0}delete(e,t){for(const i of[this._store,this._stickyStore])if(null!=i)for(const[r,s]of i)r.startsWith(e)&&s.delete(t)}deleteState(e,t){null==t?(this._store?.delete(e),this._stickyStore?.delete(e)):(this._store?.get(e)?.delete(t),this._stickyStore?.get(e)?.delete(t))}get(e,t){const i=new Map;for(const r of[this._store,this._stickyStore])if(null!=r)for(const[s,o]of r)s.startsWith(e)&&o.has(t)&&i.set(s,o.get(t));return i}getState(e,t){return this._stickyStore?.get(e)?.get(t)??this._store?.get(e)?.get(t)}storeState(e,t,i,r){let s;r?(null==this._stickyStore&&(this._stickyStore=new Map),s=this._stickyStore):(null==this._store&&(this._store=new Map),s=this._store);const o=s.get(e);null!=o?o.set(t,i):s.set(e,new Map([[t,i]]))}}var Ks=i(9311),Js=i(3401),Zs=i(6897),Xs=i(7445),eo=i(4155),to=i(8834),io=i(252),ro=i(6713),so=i(5025),oo=i(2601),no=Object.defineProperty,ao=Object.getOwnPropertyDescriptor,co=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?ao(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&no(t,i,o),o};class ContributorNode extends ks.Re{constructor(e,t,i,r,s){super(e,t,i),this.parent=i,this.contributor=r,this._options=s,this.updateContext({contributor:r}),this._uniqueId=(0,ks.tO)("contributor",this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}toClipboard(){return`${this.contributor.name}${this.contributor.email?` <${this.contributor.email}>`:""}`}get repoPath(){return this.contributor.repoPath}async getChildren(){const e=await this.getLog();if(null==e)return[new Ss.AE(this.view,this,"No commits could be found.")];const t=await this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath),i=[...(0,Ds.E)((0,ke.UI)(e.commits.values(),(e=>new Ps.D(this.view,this,e,void 0,void 0,t))),this)];return e.hasMore&&i.push(new Ss.Gd(this.view,this,i[i.length-1])),i}async getTreeItem(){const e=this._options?.presence?.get(this.contributor.email),t=new r.TreeItem(this.contributor.current?`${this.contributor.label} (you)`:this.contributor.label,r.TreeItemCollapsibleState.Collapsed);let i,o;if(t.id=this.id,t.contextValue=this.contributor.current?`${ks.Td.Contributor}+current`:ks.Td.Contributor,t.description=`${null!=e&&"offline"!==e.status?`${e.statusText} ${u.NE.Space}${u.NE.Dot}${u.NE.Space} `:""}${null!=this.contributor.date?`${this.contributor.formatDateFromNow()}, `:""}${(0,P._6)("commit",this.contributor.count)}`,this.view.config.avatars){const t=s.D.get("hovers.avatarSize");if(i=await this.contributor.getAvatarUri({defaultStyle:s.D.get("defaultGravatarsStyle"),size:t}),null!=e){const r=`${this.contributor.count?"You are":`${this.contributor.label} is`} ${"dnd"===e.status?"in ":""}${e.statusText.toLocaleLowerCase()}`;o=`![${r}](${i.toString(!0)}|width=${t},height=${t} "${r}")![${r}](${(0,lt.TU)(e.status)} "${r}")`}else o=`![${this.contributor.label}](${i.toString(!0)}|width=${t},height=${t} "${this.contributor.label}")`}const n=new Intl.NumberFormat,a=null!=this.contributor.stats?`\\\n${(0,P._6)("file",this.contributor.stats.files,{format:n.format})} changed, ${(0,P._6)("addition",this.contributor.stats.additions,{format:n.format})}, ${(0,P._6)("deletion",this.contributor.stats.deletions,{format:n.format})}`:"",c=this.contributor.email?`__[${this.contributor.name}](mailto:${this.contributor.email} "Email ${this.contributor.label} (${this.contributor.email})")__`:`__${this.contributor.label}__`,l=null!=this.contributor.date?`Last commit ${this.contributor.formatDateFromNow()} (${this.contributor.formatDate()})\\\n`:"",h=new r.MarkdownString(`${null!=o?o:""} &nbsp;${c} \n\n${l}${(0,P._6)("commit",this.contributor.count,{format:n.format})}${a}`);return h.supportHtml=!0,h.isTrusted=!0,t.tooltip=h,t.iconPath=i,t}refresh(e){e&&(this._log=void 0)}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.getLog(this.uri.repoPath,{all:this._options?.all,ref:this._options?.ref,limit:this.limit??this.view.config.defaultItemLimit,authors:[{name:this.contributor.name,email:this.contributor.email,username:this.contributor.username,id:this.contributor.id}]})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await r.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}}co([(0,Gt.H)(),(0,g.fF)()],ContributorNode.prototype,"refresh",1),co([(0,Gt.H)()],ContributorNode.prototype,"loadMore",1);var lo=Object.defineProperty,ho=Object.getOwnPropertyDescriptor,uo=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?ho(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&lo(t,i,o),o};class FileHistoryTrackerNode extends ks.CF{_base;_child;splatted=!0;constructor(e){super(dt.Wj,e)}dispose(){super.dispose(),this.resetChild()}resetChild(){null!=this._child&&(this._child.dispose(),this._child=void 0)}async getChildren(){if(null==this._child){if(!this.hasUri)return this.view.description=void 0,this.view.message="There are no editors open that can provide file history information.",[];this.view.message=void 0;const e={...this.uri,repoPath:this.uri.repoPath,sha:this._base??this.uri.sha},t=new dt.YY(this.uri,e);let i,s=!1;try{((await r.workspace.fs.stat(this.uri)).type&r.FileType.Directory)===r.FileType.Directory&&(s=!0)}catch{}this.view.title=s?"Folder History":"File History",e.sha&&"HEAD"!==e.sha?(0,m.D3)(e.sha)||({values:[i]}=await this.view.container.git.getBranches(this.uri.repoPath,{filter:t=>t.name===e.sha})):i=await this.view.container.git.getBranch(this.uri.repoPath),this._child=new FileHistoryNode(t,this.view,this,s,i)}return this._child.getChildren()}getTreeItem(){this.splatted=!1;const e=new r.TreeItem("File History",r.TreeItemCollapsibleState.Expanded);return e.contextValue=ks.Td.ActiveFileHistory,e}get followingEditor(){return this.canSubscribe}get hasUri(){return this._uri!=dt.Wj&&null!=this._uri.repoPath}async changeBase(){const e=await(0,Ts.V)(this.uri.repoPath,"Change File History Base","Choose a reference to set as the new base",{allowEnteringRefs:!0,picked:this._base,sort:{branches:{current:!0},tags:{}}});if(null!=e){if((0,m.UR)(e)){const t=await this.view.container.git.getBranch(this.uri.repoPath);this._base=t?.name===e.name?void 0:e.ref}else this._base=e.ref;null!=this._child&&(this.setUri(),await this.triggerChange())}}async refresh(e=!1){const t=(0,De.UH)();if(!this.canSubscribe)return!1;e&&(null!=this._uri&&this._uri!==dt.Wj&&await this.view.container.tracker.resetCache(this._uri,"log"),this.reset());const i=r.window.activeTextEditor;if(null==i||!this.view.container.git.isTrackable(i.document.uri))return!!(!this.hasUri||this.view.container.git.isTrackable(this.uri)&&r.window.visibleTextEditors.some((e=>e.document?.uri.path===this.uri.path)))||(this.reset(),(0,De.lH)(t,`, uri=${Pe.Yd.toLoggable(this._uri)}`),!1);if(i.document.uri.path===this.uri.path)return(0,De.lH)(t,`, uri=${Pe.Yd.toLoggable(this._uri)}`),!0;let s,o=await dt.YY.fromUri(i.document.uri);if(null!=o.sha){const e=await this.view.container.git.getWorkingUri(o.repoPath,o);null!=e&&(s=e)}return!(!this.hasUri||!ar.n.equals(s??o,this.uri))||(null!=s&&(o=await dt.YY.fromUri(s)),null==o.repoPath?this.reset():(this.setUri(o),this.resetChild()),(0,De.lH)(t,`, uri=${Pe.Yd.toLoggable(this._uri)}`),!1)}reset(){this.setUri(),this.resetChild()}setEditorFollowing(e){e&&this.setUri(),this.canSubscribe=e,e||this.triggerChange()}async showHistoryForUri(e){this.setUri(e),await this.triggerChange()}subscribe(){return r.Disposable.from(r.window.onDidChangeActiveTextEditor((0,Ht.Ds)(this.onActiveEditorChanged,250),this))}etag(){return 0}_triggerChangeDebounced;onActiveEditorChanged(e){if(null==e&&(0,Re.pt)(this._uri))return null==this._triggerChangeDebounced&&(this._triggerChangeDebounced=(0,Ht.Ds)((()=>this.triggerChange()),1500)),void this._triggerChangeDebounced();this.triggerChange()}setUri(e){this._uri=e??dt.Wj,(0,Ni.v)("gitlens:views:fileHistory:canPin",this.hasUri)}}uo([(0,g.fF)()],FileHistoryTrackerNode.prototype,"resetChild",1),uo([(0,Gt.H)(),(0,g.cM)()],FileHistoryTrackerNode.prototype,"changeBase",1),uo([(0,Gt.H)(),(0,g.fF)({exit:!0})],FileHistoryTrackerNode.prototype,"refresh",1),uo([(0,g.cM)()],FileHistoryTrackerNode.prototype,"setEditorFollowing",1),uo([(0,g.cM)()],FileHistoryTrackerNode.prototype,"showHistoryForUri",1),uo([(0,g.fF)()],FileHistoryTrackerNode.prototype,"subscribe",1),uo([(0,g.fF)({args:!1})],FileHistoryTrackerNode.prototype,"onActiveEditorChanged",1);var po=i(9719),mo=Object.defineProperty,go=Object.getOwnPropertyDescriptor,fo=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?go(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&mo(t,i,o),o};class FileHistoryNode extends ks.CF{constructor(e,t,i,r,s){super(e,t,i),this.parent=i,this.folder=r,this.branch=s,null!=s&&this.updateContext({branch:s}),this._uniqueId=(0,ks.tO)(`file-history+${e.toString()}`,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;splatted=!0;get id(){return this._uniqueId}toClipboard(){return this.uri.fileName}async getChildren(){this.view.description=`${this.label}${this.parent instanceof FileHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`;const e=[];if(null==this.uri.repoPath)return e;const t=null!=this.branch?await this.view.container.git.getBranchAheadRange(this.branch):void 0,[i,r,s,o,n]=await Promise.all([this.getLog(),null==this.uri.sha?this.view.container.git.getStatusForFiles(this.uri.repoPath,this.getPathOrGlob()):void 0,null==this.uri.sha?this.view.container.git.getCurrentUser(this.uri.repoPath):void 0,null!=this.branch?this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath,this.branch.name):void 0,t?this.view.container.git.getLogRefsOnly(this.uri.repoPath,{limit:0,ref:t}):void 0]);if(r?.length)if(this.folder){const t=(0,ke.UI)((0,ke.uw)((0,ke.VS)(r,(e=>e.getPseudoCommits(this.view.container,s))),(e=>e.sha),((e,t)=>e.with({files:{files:[...e.files,...t.files]}}))),(e=>new Ps.D(this.view,this,e)));e.push(...t)}else{const[t]=r,i=t.getPseudoCommits(this.view.container,s);i.length&&e.push(...i.map((e=>new po.m(this.view,this,t,e))))}return null!=i&&(e.push(...(0,Ds.E)((0,ke.DZ)(i.commits.values(),(e=>this.folder?new Ps.D(this.view,this,e,n?.has(e.ref),this.branch,void 0,{expand:!1}):null!=e.file?new po.m(this.view,this,e.file,e,{branch:this.branch,getBranchAndTagTips:o,unpublished:n?.has(e.ref)}):void 0)),this)),i.hasMore&&e.push(new Ss.Gd(this.view,this,e[e.length-1]))),0===e.length?[new Ss.AE(this.view,this,"No file history could be found.")]:e}getTreeItem(){this.splatted=!1;const e=this.label,t=new r.TreeItem(e,r.TreeItemCollapsibleState.Expanded);return t.contextValue=ks.Td.FileHistory,t.description=this.uri.directory,t.tooltip=`History of ${this.uri.fileName}\n${this.uri.directory}/${null==this.uri.sha?"":`\n\n${this.uri.sha}`}`,this.view.description=`${e}${this.parent instanceof FileHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`,t}get label(){return this.folder&&""===this.uri.fileName?`${(0,k.EZ)(this.uri.path)}${this.uri.sha?` ${this.uri.sha===D.Ii?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`:`${this.uri.fileName}${this.uri.sha?` ${this.uri.sha===D.Ii?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`}subscribe(){const e=this.view.container.git.getRepository(this.uri);if(null==e)return;return r.Disposable.from(e.onDidChange(this.onRepositoryChanged,this),e.onDidChangeFileSystem(this.onFileSystemChanged,this),e.startWatchingFileSystem(),s.D.onDidChange((e=>{s.D.changed(e,"advanced.fileHistoryFollowsRenames")&&this.view.resetNodeLastKnownLimit(this)})))}etag(){return Date.now()}onRepositoryChanged(e){e.changed(ft.I6.Index,ft.I6.Heads,ft.I6.Remotes,ft.I6.RemoteProviders,ft.I6.Status,ft.I6.Unknown,ft.du.Any)&&(Pe.Yd.debug(`FileHistoryNode.onRepositoryChanged(${e.toString()}); triggering node refresh`),this.triggerChange(!0))}onFileSystemChanged(e){if(this.folder){if(!e.uris.some((e=>e.fsPath.startsWith(this.uri.fsPath))))return}else if(!e.uris.some((e=>e.toString()===this.uri.toString())))return;Pe.Yd.debug(`FileHistoryNode.onFileSystemChanged(${this.uri.toString(!0)}); triggering node refresh`),this.triggerChange(!0)}refresh(e){e&&(this._log=void 0)}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.getLogForFile(this.uri.repoPath,this.getPathOrGlob(),{limit:this.limit??this.view.config.pageItemLimit,ref:this.uri.sha})),this._log}getPathOrGlob(){return this.folder?r.Uri.joinPath(this.uri,"*"):this.uri}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await r.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1,this.splatted)))}}fo([(0,g.fF)()],FileHistoryNode.prototype,"subscribe",1),fo([(0,Gt.H)(),(0,g.fF)()],FileHistoryNode.prototype,"refresh",1),fo([(0,ne.H)()],FileHistoryNode.prototype,"getPathOrGlob",1),fo([(0,Gt.H)()],FileHistoryNode.prototype,"loadMore",1);var wo=Object.defineProperty,vo=Object.getOwnPropertyDescriptor,yo=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?vo(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&wo(t,i,o),o};class LineHistoryTrackerNode extends ks.CF{_base;_child;_editorContents;_selection;splatted=!0;constructor(e){super(dt.Wj,e)}dispose(){super.dispose(),this.resetChild()}resetChild(){null!=this._child&&(this._child.dispose(),this._child=void 0)}async getChildren(){if(null==this._child){if(!this.hasUri)return this.view.description=void 0,this.view.message="There are no editors open that can provide line history information.",[];if(null==this._selection)return this.view.description=void 0,this.view.message="There was no selection provided for line history.",this.view.description=`${this.uri.fileName}${this.uri.sha?` ${this.uri.sha===D.Ii?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}${this.followingEditor?"":" (pinned)"}`,[];this.view.message=void 0;const e={...this.uri,repoPath:this.uri.repoPath,sha:this.uri.sha??this._base},t=new dt.YY(this.uri,e);let i;e.sha&&"HEAD"!==e.sha?(0,m.D3)(e.sha)||({values:[i]}=await this.view.container.git.getBranches(this.uri.repoPath,{filter:t=>t.name===e.sha})):i=await this.view.container.git.getBranch(this.uri.repoPath),this._child=new LineHistoryNode(t,this.view,this,i,this._selection,this._editorContents)}return this._child.getChildren()}getTreeItem(){this.splatted=!1;const e=new r.TreeItem("Line History",r.TreeItemCollapsibleState.Expanded);return e.contextValue=ks.Td.ActiveLineHistory,this.ensureSubscription(),e}get followingEditor(){return this.canSubscribe}get hasUri(){return this._uri!=dt.Wj&&null!=this._uri.repoPath}async changeBase(){const e=await(0,Ts.V)(this.uri.repoPath,"Change Line History Base","Choose a reference to set as the new base",{allowEnteringRefs:!0,picked:this._base,sort:{branches:{current:!0},tags:{}}});if(null!=e){if((0,m.UR)(e)){const t=await this.view.container.git.getBranch(this.uri.repoPath);this._base=t?.name===e.name?void 0:e.ref}else this._base=e.ref;null!=this._child&&(this.setUri(),await this.triggerChange())}}async refresh(e=!1){const t=(0,De.UH)();if(!this.canSubscribe)return!1;e&&(null!=this._uri&&this._uri!==dt.Wj&&await this.view.container.tracker.resetCache(this._uri,"log"),this.reset());const i=r.window.activeTextEditor;if(null==i||!this.view.container.git.isTrackable(i.document.uri))return!!(!this.hasUri||this.view.container.git.isTrackable(this.uri)&&r.window.visibleTextEditors.some((e=>e.document?.uri.path===this.uri.path)))||(this.reset(),(0,De.lH)(t,`, uri=${Pe.Yd.toLoggable(this._uri)}`),!1);if(i.document.uri.path===this.uri.path&&null!=this._selection&&i.selection.isEqual(this._selection))return(0,De.lH)(t,`, uri=${Pe.Yd.toLoggable(this._uri)}`),!0;const s=await dt.YY.fromUri(i.document.uri);return!!(this.hasUri&&ar.n.equals(s,this.uri)&&null!=this._selection&&i.selection.isEqual(this._selection))||(null==s.repoPath?this.reset():(this.setUri(s),this._editorContents=i.document.isDirty?i.document.getText():void 0,this._selection=i.selection,this.resetChild()),(0,De.lH)(t,`, uri=${Pe.Yd.toLoggable(this._uri)}`),!1)}reset(){this.setUri(),this._editorContents=void 0,this._selection=void 0,this.resetChild()}setEditorFollowing(e){this.canSubscribe=e}subscribe(){if(this.view.container.lineTracker.subscribed(this))return;const e=(0,Ht.Ds)(this.onActiveLinesChanged.bind(this),250);return this.view.container.lineTracker.subscribe(this,this.view.container.lineTracker.onDidChangeActiveLines((t=>{t.pending||e(t)})))}etag(){return 0}onActiveLinesChanged(e){this.triggerChange()}setUri(e){this._uri=e??dt.Wj,(0,Ni.v)("gitlens:views:fileHistory:canPin",this.hasUri)}}yo([(0,g.fF)()],LineHistoryTrackerNode.prototype,"resetChild",1),yo([(0,Gt.H)(),(0,g.cM)()],LineHistoryTrackerNode.prototype,"changeBase",1),yo([(0,Gt.H)(),(0,g.fF)({exit:!0})],LineHistoryTrackerNode.prototype,"refresh",1),yo([(0,g.cM)()],LineHistoryTrackerNode.prototype,"setEditorFollowing",1),yo([(0,g.fF)()],LineHistoryTrackerNode.prototype,"subscribe",1),yo([(0,g.fF)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map((e=>`[${e.anchor}-${e.active}]`)).join(",")}, pending=${Boolean(e.pending)}, reason=${e.reason}`}})],LineHistoryTrackerNode.prototype,"onActiveLinesChanged",1);var bo=Object.defineProperty,Co=Object.getOwnPropertyDescriptor,Ao=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Co(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&bo(t,i,o),o};class LineHistoryNode extends ks.CF{constructor(e,t,i,r,s,o){super(e,t,i),this.parent=i,this.branch=r,this.selection=s,this.editorContents=o,null!=r&&this.updateContext({branch:r}),this._uniqueId=(0,ks.tO)(`file-history+${e.toString()}+[${s.start.line},${s.start.character}-${s.end.line},${s.end.character}]`,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;splatted=!0;get id(){return this._uniqueId}toClipboard(){return this.uri.fileName}async getChildren(){this.view.description=`${this.label}${this.parent instanceof LineHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`;const e=[];if(null==this.uri.repoPath)return e;let t=this.selection;const i=null!=this.branch?await this.view.container.git.getBranchAheadRange(this.branch):void 0,[s,o,n,a]=await Promise.all([this.getLog(t),null==this.uri.sha||(0,m.l3)(this.uri.sha)?this.editorContents?await this.view.container.git.getBlameForRangeContents(this.uri,t,this.editorContents):await this.view.container.git.getBlameForRange(this.uri,t):void 0,null!=this.branch?this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath,this.branch.name):void 0,i?this.view.container.git.getLogRefsOnly(this.uri.repoPath,{limit:0,ref:i}):void 0]);if(null!=o)for(const i of o.commits.values()){if(!i.isUncommitted)continue;const s=o.lines[0],n=o.lines[o.lines.length-1],a=t.active.line===s.line-1;t=new r.Selection((a?n:s).originalLine-1,t.anchor.character,(a?s:n).originalLine-1,t.active.character);const c=await this.view.container.git.getStatusForFile(this.uri.repoPath,this.uri);if(null!=c){const r={conflictStatus:c?.conflictStatus,path:i.file?.path??"",indexStatus:c?.indexStatus,originalPath:i.file?.originalPath,repoPath:this.uri.repoPath,status:c?.status??R.NV.Modified,workingTreeStatus:c?.workingTreeStatus},s=await this.view.container.git.getCurrentUser(this.uri.repoPath),o=c?.getPseudoCommits(this.view.container,s);if(null!=o)for(const i of o.reverse())e.unshift(new po.m(this.view,this,r,i,{selection:t}))}break}return null!=s&&(e.push(...(0,Ds.E)((0,ke.DZ)(s.commits.values(),(e=>null!=e.file?new po.m(this.view,this,e.file,e,{branch:this.branch,getBranchAndTagTips:n,selection:t,unpublished:a?.has(e.ref)}):void 0)),this)),s.hasMore&&e.push(new Ss.Gd(this.view,this,e[e.length-1]))),0===e.length?[new Ss.AE(this.view,this,"No line history could be found.")]:e}getTreeItem(){this.splatted=!1;const e=this.label,t=new r.TreeItem(e,r.TreeItemCollapsibleState.Expanded);return t.contextValue=ks.Td.LineHistory,t.description=this.uri.directory,t.tooltip=`History of ${this.uri.fileName}${this.lines}\n${this.uri.directory}/${null==this.uri.sha?"":`\n\n${this.uri.sha}`}`,this.view.description=`${e}${this.parent instanceof LineHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`,t}get label(){return`${this.uri.fileName}${this.lines}${this.uri.sha?` ${this.uri.sha===D.Ii?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`}get lines(){return this.selection.isSingleLine?`:${this.selection.start.line+1}`:`:${this.selection.start.line+1}-${this.selection.end.line+1}`}subscribe(){const e=this.view.container.git.getRepository(this.uri);if(null==e)return;return r.Disposable.from(e.onDidChange(this.onRepositoryChanged,this),e.onDidChangeFileSystem(this.onFileSystemChanged,this),e.startWatchingFileSystem())}etag(){return Date.now()}onRepositoryChanged(e){e.changed(ft.I6.Index,ft.I6.Heads,ft.I6.Remotes,ft.I6.RemoteProviders,ft.I6.Status,ft.I6.Unknown,ft.du.Any)&&(Pe.Yd.debug(`LineHistoryNode.onRepositoryChanged(${e.toString()}); triggering node refresh`),this.triggerChange(!0))}onFileSystemChanged(e){e.uris.some((e=>e.toString()===this.uri.toString()))&&(Pe.Yd.debug(`LineHistoryNode.onFileSystemChanged(${this.uri.toString(!0)}); triggering node refresh`),this.triggerChange(!0))}refresh(e){e&&(this._log=void 0)}_log;async getLog(e){return null==this._log&&(this._log=await this.view.container.git.getLogForFile(this.uri.repoPath,this.uri,{all:!1,limit:this.limit??this.view.config.pageItemLimit,range:e??this.selection,ref:this.uri.sha,renames:!1})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await r.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1,this.splatted)))}}Ao([(0,ne.H)()],LineHistoryNode.prototype,"lines",1),Ao([(0,g.fF)()],LineHistoryNode.prototype,"subscribe",1),Ao([(0,Gt.H)(),(0,g.fF)()],LineHistoryNode.prototype,"refresh",1),Ao([(0,Gt.H)()],LineHistoryNode.prototype,"loadMore",1);var ko=Object.defineProperty,Po=Object.getOwnPropertyDescriptor;class RemoteNode extends ks.Re{constructor(e,t,i,r,s){super(e,t,i),this.parent=i,this.repo=r,this.remote=s,this.updateContext({repository:r,remote:s}),this._uniqueId=(0,ks.tO)("remote",this.context)}get id(){return this._uniqueId}toClipboard(){return this.remote.name}get repoPath(){return this.repo.path}async getChildren(){const e=await this.repo.getBranches({filter:e=>e.remote&&e.name.startsWith(this.remote.name),sort:!0});if(0===e.values.length)return[new Ss.AE(this.view,this,"No branches could be found.")];const t=e.values.map((e=>new BranchNode(dt.YY.fromRepoPath(this.uri.repoPath,e.ref),this.view,this,this.repo,e,!1,{showComparison:!1,showTracking:!1})));if("list"===this.view.config.branches.layout)return t;const i=(0,A.Mo)(t,(e=>e.treeHierarchy),((...e)=>e.join("/")),this.view.config.files.compact,(e=>(e.compacted=!0,!0)));return new BranchOrTagFolderNode(this.view,this,"remote-branch",i,this.repo.path,"",void 0).getChildren()}async getTreeItem(){const e=new r.TreeItem(this.remote.name,r.TreeItemCollapsibleState.Collapsed);if(e.id=this.id,e.description=(0,mt.jv)(this.remote),null!=this.remote.provider){const{provider:t}=this.remote;if(e.iconPath=null!=t.avatarUri&&this.view.config.avatars?t.avatarUri:"remote"===t.icon?new r.ThemeIcon("cloud"):{dark:this.view.container.context.asAbsolutePath(`images/dark/icon-${t.icon}.svg`),light:this.view.container.context.asAbsolutePath(`images/light/icon-${t.icon}.svg`)},t.hasRichIntegration()){const i=t.maybeConnected??await t.isConnected();e.contextValue=`${ks.Td.Remote}${i?"+connected":"+disconnected"}`,e.tooltip=`${this.remote.name} (${t.name} ${u.NE.Dash} ${i?"connected":"not connected"})\n${t.displayPath}\n`}else e.contextValue=ks.Td.Remote,e.tooltip=`${this.remote.name} (${t.name})\n${t.displayPath}\n`}else e.contextValue=ks.Td.Remote,e.iconPath=new r.ThemeIcon("cloud"),e.tooltip=`${this.remote.name} (${this.remote.domain})\n${this.remote.path}\n`;this.remote.default&&(e.contextValue+="+default",e.resourceUri=r.Uri.parse("gitlens-view://remote/default"));for(const{type:t,url:i}of this.remote.urls)e.tooltip+=`\n${i} (${t})`;return e}async setAsDefault(e=!0){await this.remote.setAsDefault(e),this.triggerChange()}}function So(e,t){let i,r=!1;return"boolean"==typeof e?r=e:i=e,(e,s,o)=>{let n;if("function"==typeof o.value&&(n=o.value),null==n)throw new Error("Not supported");o.value=function(...e){if(r){const r=e[e.length-1];i=null!=r&&"number"==typeof r?r:t}const s=n?.apply(this,e);return null==i||i<1||!(0,Vt.tI)(s)?s:(0,Vt.HO)(s,i,{onDidCancel:e=>e(void 0)})}}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Po(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&ko(t,i,o)})([(0,g.cM)()],RemoteNode.prototype,"setAsDefault",1);var Do=Object.defineProperty,Ro=Object.getOwnPropertyDescriptor,$o=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Ro(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Do(t,i,o),o};class ContributorsNode extends ks.Re{constructor(e,t,i,r){super(e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,ks.tO)("contributors",this.context)}splatted=!0;get id(){return this._uniqueId}get repoPath(){return this.repo.path}_children;async getChildren(){if(null==this._children){const e=s.D.get("views.contributors.showAllBranches");let t;if(!e)try{const e=await this.view.container.git.getBranch(this.uri.repoPath);null==e?.upstream?.name||e.upstream.missing||(t="@{u}")}catch{}const i=s.D.get("views.contributors.showStatistics"),r=await this.repo.getContributors({all:e,ref:t,stats:i});if(0===r.length)return[new Ss.AE(this.view,this,"No contributors could be found.")];pt.V.sort(r);const o=await this.maybeGetPresenceMap(r);this._children=r.map((i=>new ContributorNode(this.uri,this.view,this,i,{all:e,ref:t,presence:o})))}return this._children}getTreeItem(){this.splatted=!1;const e=new r.TreeItem("Contributors",r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=ks.Td.Contributors,e.iconPath=new r.ThemeIcon("organization"),e}updateAvatar(e){if(null!=this._children)for(const t of this._children)t.contributor.email===e&&t.triggerChange()}refresh(){this._children=void 0}async maybeGetPresenceMap(e){const t=e.find((e=>e.current))?.email;if(null!=t)return this.view.container.vsls.getContactsPresence([t])}}$o([(0,Gt.H)(),(0,g.fF)()],ContributorsNode.prototype,"refresh",1),$o([(0,g.fF)({args:!1}),So(250)],ContributorsNode.prototype,"maybeGetPresenceMap",1);var _o=Object.defineProperty,Fo=Object.getOwnPropertyDescriptor,To=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Fo(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&_o(t,i,o),o};class ReflogRecordNode extends ks.Re{constructor(e,t,i){super(dt.YY.fromRepoPath(i.repoPath),e,t),this.record=i,this.updateContext({reflog:i}),this._uniqueId=(0,ks.tO)("reflog-record",this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}async getChildren(){const e=await this.getLog();if(void 0===e)return[new Ss.AE(this.view,this,"No commits could be found.")];const t=[...(0,ke.UI)(e.commits.values(),(e=>new Ps.D(this.view,this,e)))];return e.hasMore&&t.push(new Ss.Gd(this.view,this,t[t.length-1])),t}getTreeItem(){const e=new r.TreeItem(`${this.record.command}${this.record.commandArgs?` ${this.record.commandArgs}`:""}`,r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.description=`${0===this.record.HEAD.length?"":`${this.record.HEAD} ${u.NE.Space}${u.NE.Dot}${u.NE.Space} `}${this.record.formattedDate}`,e.contextValue=ks.Td.ReflogRecord,e.tooltip=`${0===this.record.HEAD.length?"":`${this.record.HEAD}\n`}${this.record.command}${this.record.commandArgs?` ${this.record.commandArgs}`:""}${this.record.details?` (${this.record.details})`:""}\n${this.record.formatDateFromNow()} (${this.record.formatDate()})\n${this.record.previousShortSha} ${u.NE.Space}${u.NE.ArrowRight}${u.NE.Space} ${this.record.shortSha}`,e}refresh(e){e&&(this._log=void 0)}_log;async getLog(){if(void 0===this._log){const e=`${this.record.previousSha}..${this.record.sha}`;this._log=await this.view.container.git.getLog(this.uri.repoPath,{limit:this.limit??this.view.config.defaultItemLimit,ref:e})}return this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await r.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));void 0!==t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}}To([(0,Gt.H)(),(0,g.fF)()],ReflogRecordNode.prototype,"refresh",1),To([(0,Gt.H)()],ReflogRecordNode.prototype,"loadMore",1);var xo=Object.defineProperty,Io=Object.getOwnPropertyDescriptor;class ReflogNode extends ks.Re{constructor(e,t,i,r){super(e,t,i),this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,ks.tO)("reflog",this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}_children;async getChildren(){if(void 0===this._children){const e=[],t=await this.getReflog();if(void 0===t||0===t.records.length)return[new Ss.AE(this.view,this,"No activity could be found.")];e.push(...t.records.map((e=>new ReflogRecordNode(this.view,this,e)))),t.hasMore&&e.push(new Ss.Gd(this.view,this,e[e.length-1])),this._children=e}return this._children}getTreeItem(){const e=new r.TreeItem("Incoming Activity",r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=ks.Td.Reflog,e.description="experimental",e.iconPath={dark:this.view.container.context.asAbsolutePath("images/dark/icon-activity.svg"),light:this.view.container.context.asAbsolutePath("images/light/icon-activity.svg")},e}refresh(e){this._children=void 0,e&&(this._reflog=void 0)}_reflog;async getReflog(){return void 0===this._reflog&&(this._reflog=await this.view.container.git.getIncomingActivity(this.repo.path,{all:!0,limit:this.limit??this.view.config.defaultItemLimit})),this._reflog}get hasMore(){return this._reflog?.hasMore??!0}async loadMore(e){let t=await this.getReflog();void 0!==t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._reflog!==t&&(this._reflog=t,this.limit=t?.count,this.triggerChange(!1)))}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Io(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&xo(t,i,o)})([(0,Gt.H)(),(0,g.fF)()],ReflogNode.prototype,"refresh",1);var Oo=Object.defineProperty,Bo=Object.getOwnPropertyDescriptor;class RemotesNode extends ks.Re{constructor(e,t,i,r){super(e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,ks.tO)("remotes",this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}_children;async getChildren(){if(null==this._children){const e=await this.repo.getRemotes({sort:!0});if(0===e.length)return[new Ss.AE(this.view,this,"No remotes could be found")];this._children=e.map((e=>new RemoteNode(this.uri,this.view,this,this.repo,e)))}return this._children}getTreeItem(){const e=new r.TreeItem("Remotes",r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=ks.Td.Remotes,e.iconPath=new r.ThemeIcon("cloud"),e}refresh(){this._children=void 0}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Bo(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&Oo(t,i,o)})([(0,Gt.H)(),(0,g.fF)()],RemotesNode.prototype,"refresh",1);var Eo=i(1101),Wo=Object.defineProperty,No=Object.getOwnPropertyDescriptor;class StashesNode extends ks.Re{constructor(e,t,i,r){super(e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,ks.tO)("stashes",this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}_children;async getChildren(){if(null==this._children){const e=await this.repo.getStash();if(null==e)return[new Ss.AE(this.view,this,"No stashes could be found.")];this._children=[...(0,ke.UI)(e.commits.values(),(e=>new Eo.i(this.view,this,e)))]}return this._children}getTreeItem(){const e=new r.TreeItem("Stashes",r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=ks.Td.Stashes,e.iconPath=new r.ThemeIcon("gitlens-stashes"),e}refresh(){this._children=void 0}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?No(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&Wo(t,i,o)})([(0,Gt.H)(),(0,g.fF)()],StashesNode.prototype,"refresh",1);class StatusFilesNode extends ks.Re{constructor(e,t,i,r){super(dt.YY.fromRepoPath(i.repoPath),e,t),this.parent=t,this.status=i,this.range=r,this._uniqueId=(0,ks.tO)("status-files",this.context)}get id(){return this._uniqueId}get repoPath(){return this.status.repoPath}async getChildren(){let e=[];const t=this.repoPath;let i;null!=this.range&&(i=await this.view.container.git.getLog(t,{limit:0,ref:this.range}),null!=i&&(await Promise.allSettled((0,ke.UI)((0,ke.hX)(i.commits.values(),(e=>null==e.files)),(e=>e.ensureFullDetails()))),e=[...(0,ke.VS)(i.commits.values(),(e=>e.files?.map((t=>({...t,commit:e})))??[]))])),"worktrees"!==this.view.type&&!this.view.config.includeWorkingTree||0===this.status.files.length||e.unshift(...(0,ke.VS)(this.status.files,(e=>(0,ke.UI)(e.getPseudoCommits(this.view.container,void 0),(t=>this.getFileWithPseudoCommit(e,t)))))),e.sort(((e,t)=>t.commit.date.getTime()-e.commit.date.getTime()));const r=(0,A.vM)(e,(e=>e.path));let s=Object.values(r).map((e=>new As.q(this.view,this,e[e.length-1],t,e.map((e=>e.commit)))));if("list"!==this.view.config.files.layout){const e=(0,A.Mo)(s,(e=>e.uri.relativePath.split("/")),((...e)=>(0,k.AH)((0,k.RQ)(...e))),this.view.config.files.compact);s=new Cs.Y(this.view,this,e,t,"",void 0,!0).getChildren()}else s.sort(((e,t)=>e.priority-t.priority||(0,P.dm)(e.label,t.label)));return s}async getTreeItem(){let e="worktrees"===this.view.type||this.view.config.includeWorkingTree?this.status.files.length:0;if(null!=this.range&&null!=this.status.upstream&&this.status.state.ahead>0)if(e>0){const t=await this.view.container.git.getDiffStatus(this.repoPath,`${this.status.upstream}...`);if(null!=t){const i=new Set;for(const e of this.status.files)i.add(e.path);for(const e of t)i.add(e.path);e=i.size}}else{const t=await this.view.container.git.getChangedFilesCount(this.repoPath,`${this.status.upstream}...`);null!=t?e+=t.changedFiles:e=-1}const t=-1===e?"?? files changed":`${(0,P._6)("file",e)} changed`,i=new r.TreeItem(t,r.TreeItemCollapsibleState.Collapsed);return i.id=this.id,i.contextValue=ks.Td.StatusFiles,i.iconPath={dark:this.view.container.context.asAbsolutePath("images/dark/icon-diff.svg"),light:this.view.container.context.asAbsolutePath("images/light/icon-diff.svg")},i}getFileWithPseudoCommit(e,t){return{status:e.status,repoPath:e.repoPath,indexStatus:e.indexStatus,workingTreeStatus:e.workingTreeStatus,path:e.path,originalPath:e.originalPath,commit:t}}}var Mo=Object.defineProperty,Uo=Object.getOwnPropertyDescriptor,Lo=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Uo(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Mo(t,i,o),o};class TagNode extends ks.bT{constructor(e,t,i,r){super(e,t,i),this.parent=i,this.tag=r,this.updateContext({tag:r}),this._uniqueId=(0,ks.tO)("tag",this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}toClipboard(){return this.tag.name}get label(){return"tree"===this.view.config.branches.layout?this.tag.getBasename():this.tag.name}get ref(){return this.tag}async getChildren(){const e=await this.getLog();if(null==e)return[new Ss.AE(this.view,this,"No commits could be found.")];const t=await this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath,this.tag.name),i=[...(0,Ds.E)((0,ke.UI)(e.commits.values(),(e=>new Ps.D(this.view,this,e,void 0,void 0,t))),this)];return e.hasMore&&i.push(new Ss.Gd(this.view,this,i[i.length-1],{getCount:()=>this.view.container.git.getCommitCount(this.tag.repoPath,this.tag.name)})),i}getTreeItem(){const e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=ks.Td.Tag,e.description=(0,ht.X)(this.tag.message),e.tooltip=`${this.tag.name}${(0,P.vk)(u.NE.Dash,2,2)}${(0,m.zL)(this.tag.sha,{force:!0})}${null!=this.tag.date?`\n${this.tag.formatDateFromNow()} (${this.tag.formatDate(this.view.container.TagDateFormatting.dateFormat)})`:""}\n\n${(0,ht.X)(this.tag.message)}${null!=this.tag.commitDate&&this.tag.date!==this.tag.commitDate?`\n${this.tag.formatCommitDateFromNow()} (${this.tag.formatCommitDate(this.view.container.TagDateFormatting.dateFormat)})`:""}`,e}refresh(e){e&&(this._log=void 0)}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.getLog(this.uri.repoPath,{limit:this.limit??this.view.config.defaultItemLimit,ref:this.tag.name})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await r.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}}Lo([(0,Gt.H)(),(0,g.fF)()],TagNode.prototype,"refresh",1),Lo([(0,Gt.H)()],TagNode.prototype,"loadMore",1);var Go=Object.defineProperty,Ho=Object.getOwnPropertyDescriptor;class TagsNode extends ks.Re{constructor(e,t,i,r){super(e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,ks.tO)("tags",this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}_children;async getChildren(){if(null==this._children){const e=await this.repo.getTags({sort:!0});if(0===e.values.length)return[new Ss.AE(this.view,this,"No tags could be found.")];const t=e.values.map((e=>new TagNode(dt.YY.fromRepoPath(this.uri.repoPath,e.ref),this.view,this,e)));if("list"===this.view.config.branches.layout)return t;const i=(0,A.Mo)(t,(e=>e.tag.name.split("/")),((...e)=>e.join("/")),this.view.config.files.compact),r=new BranchOrTagFolderNode(this.view,this,"tag",i,this.repo.path,"",void 0);this._children=r.getChildren()}return this._children}getTreeItem(){const e=new r.TreeItem("Tags",r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=ks.Td.Tags,e.iconPath=new r.ThemeIcon("tag"),e}refresh(){this._children=void 0}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Ho(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&Go(t,i,o)})([(0,Gt.H)(),(0,g.fF)()],TagsNode.prototype,"refresh",1);class UncommittedFileNode extends ks.Te{constructor(e,t,i,r){super(dt.YY.fromFile(r,i),e,t,r)}toClipboard(){return this.path}get path(){return this.file.path}getChildren(){return[]}getTreeItem(){const e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.None);e.contextValue=ks.Td.File,e.description=this.description,e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath);const t=(0,R.tK)(this.file.status);return e.iconPath={dark:this.view.container.context.asAbsolutePath((0,k.RQ)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,k.RQ)("images","light",t))},e.tooltip=Ns.o.fromTemplate("${file}\n${directory}/\n\n${status}${ (originalPath)}",this.file),e.command=this.getCommand(),this._label=void 0,this._description=void 0,e}_description;get description(){return null==this._description&&(this._description=Ns.o.fromTemplate(this.view.config.formats.files.description,{...this.file},{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return null==this._folderName&&(this._folderName=(0,k.XX)(this.uri.relativePath)),this._folderName}_label;get label(){return null==this._label&&(this._label=Ns.o.fromTemplate("${file}",{...this.file},{relativePath:this.relativePath})),this._label}get priority(){return 0}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getCommand(){const e={uri:dt.YY.fromFile(this.file,this.repoPath),line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:u.Gh.DiffWithPrevious,arguments:[void 0,e]}}}class UncommittedFilesNode extends ks.Re{constructor(e,t,i,r){super(dt.YY.fromRepoPath(i.repoPath),e,t),this.parent=t,this.status=i,this.range=r,this._uniqueId=(0,ks.tO)("uncommitted-files",this.context)}get id(){return this._uniqueId}get repoPath(){return this.status.repoPath}getChildren(){const e=this.repoPath,t=[...(0,ke.VS)(this.status.files,(e=>e.getPseudoCommits(this.view.container,void 0).map((t=>({status:e.status,repoPath:e.repoPath,indexStatus:e.indexStatus,workingTreeStatus:e.workingTreeStatus,path:e.path,originalPath:e.originalPath,commit:t})))))];t.sort(((e,t)=>t.commit.date.getTime()-e.commit.date.getTime()));const i=(0,A.vM)(t,(e=>e.path));let r=Object.values(i).map((t=>new UncommittedFileNode(this.view,this,e,t[t.length-1])));if("list"!==this.view.config.files.layout){const t=(0,A.Mo)(r,(e=>e.uri.relativePath.split("/")),((...e)=>(0,k.AH)((0,k.RQ)(...e))),this.view.config.files.compact);r=new Cs.Y(this.view,this,t,e,"",void 0,!0).getChildren()}else r.sort(((e,t)=>e.priority-t.priority||e.label.localeCompare(t.label,void 0,{numeric:!0,sensitivity:"base"})));return r}getTreeItem(){const e=new r.TreeItem("Uncommitted changes",r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=ks.Td.UncommittedFiles,e.iconPath=new r.ThemeIcon("folder"),e}}var Vo=Object.defineProperty,Yo=Object.getOwnPropertyDescriptor,Qo=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Yo(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Vo(t,i,o),o};class WorktreeNode extends ks.Re{constructor(e,t,i,r){super(e,t,i),this.parent=i,this.worktree=r,this.updateContext({worktree:r}),this._uniqueId=(0,ks.tO)("worktree",this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;_branch;get id(){return this._uniqueId}toClipboard(){return this.worktree.uri.fsPath}get repoPath(){return this.uri.repoPath}_children;async getChildren(){if(null==this._children){const e=this._branch;let t,i;if(null!=e&&this.view.config.pullRequests.enabled&&this.view.config.pullRequests.showForBranches&&(null!=e.upstream||e.remote)&&(0,Ni.fw)("gitlens:hasConnectedRemotes")&&(i=this.getState("pullRequest"),void 0===i&&void 0===this.getState("pendingPullRequest"))){t=(0,Vt.PQ)();const i=this.getAssociatedPullRequest(e,{include:["opened","merged"]});queueMicrotask((async()=>{await(t?.promise);let r=!1;const s=setTimeout((()=>{r=!0,this.view.triggerNodeChange(this)}),250),o=await i;clearTimeout(s),null!=o&&null!=this._children&&this._children.splice(this._children[0]instanceof CompareBranchNode?1:0,0,new Ls.Z(this.view,this,o,e)),(r||null!=o)&&this.view.triggerNodeChange(this)}))}const[r,s,o,n]=await Promise.allSettled([this.getLog(),this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath),this.worktree.getStatus(),null==e||e.remote?void 0:this.view.container.git.getBranchAheadRange(e).then((e=>e?this.view.container.git.getLogRefsOnly(this.uri.repoPath,{limit:0,ref:e}):void 0))]),a=(0,Vt.Sb)(r);if(null==a)return[new Ss.AE(this.view,this,"No commits could be found.")];const c=[];null!=e&&!1!==this.view.config.showBranchComparison&&c.push(new CompareBranchNode(this.uri,this.view,this,e,this.view.config.showBranchComparison,this.splatted)),null!=e&&null!=i&&c.push(new Ls.Z(this.view,this,i,e));const l=(0,Vt.Sb)(n),h=(0,Vt.Sb)(s);c.push(...(0,Ds.E)((0,ke.UI)(a.commits.values(),(t=>new Ps.D(this.view,this,t,l?.has(t.ref),e,h))),this)),a.hasMore&&c.push(new Ss.Gd(this.view,this,c[c.length-1]));const u=(0,Vt.Sb)(o);u?.hasChanges&&c.unshift(new UncommittedFilesNode(this.view,this,u,void 0)),this._children=c,t?.fulfill()}return this._children}async getTreeItem(){this.splatted=!1;let e="";const t=new r.MarkdownString("",!0);let i,s=!1;const o=this.worktree.main||this.worktree.opened?`${(0,P.vk)(u.NE.Dash,2,2)} ${this.worktree.main?"_Main"+(this.worktree.opened?", Active_":"_"):this.worktree.opened?"_Active_":""} `:"";let n=!1;switch(this.worktree.type){case"bare":i=new r.ThemeIcon("folder"),t.appendMarkdown(`${this.worktree.main?"$(pass) ":""}Bare Worktree${o}\\\n\`${this.worktree.friendlyPath}\``);break;case"branch":{const[a,c]=await Promise.allSettled([this.worktree.getBranch(),this.worktree.getStatus()]),l=(0,Vt.Sb)(a),h=(0,Vt.Sb)(c);if(this._branch=l,t.appendMarkdown(`${this.worktree.main?"$(pass) ":""}Worktree for Branch $(git-branch) ${l?.getNameWithoutRemote()??this.worktree.branch}${o}\\\n\`${this.worktree.friendlyPath}\``),i=new r.ThemeIcon("git-branch"),null!=h?(s=h.hasChanges,t.appendMarkdown(`\n\n${h.getFormattedDiffStatus({prefix:"Has Uncommitted Changes\\\n",empty:"No Uncommitted Changes",expand:!0})}`)):"rejected"===c.status&&(Pe.Yd.error(c.reason,"Worktree status failed"),n=!0),null!=l&&(t.appendMarkdown(`\n\nBranch $(git-branch) ${l.getNameWithoutRemote()}`),!l.remote))if(null!=l.upstream){let i=u.NE.Dash;const r=await l.getRemote();if(l.upstream.missing)i=u.NE.Warning;else if(null!=r){let e,t;for(const{type:i}of r.urls)if("fetch"===i){if(e=!0,t)break}else if("push"===i&&(t=!0,e))break;e&&t?i=u.NE.ArrowsRightLeft:t?i=u.NE.ArrowRight:e&&(i=u.NE.ArrowLeft)}e=`${l.getTrackingStatus({empty:(0,P.vk)(i,0,2),suffix:(0,P.vk)(i,2,2)})}${l.upstream.name}`,t.appendMarkdown(` is ${l.getTrackingStatus({empty:l.upstream.missing?`missing upstream $(git-branch) ${l.upstream.name}`:`up to date with $(git-branch)  ${l.upstream.name}${r?.provider?.name?` on ${r.provider.name}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${l.upstream.name}${r?.provider?.name?` on ${r.provider.name}`:""}`})}`)}else{const e=mt.ss.getHighlanderProviderName(await this.view.container.git.getRemotesWithProviders(l.repoPath));t.appendMarkdown(` hasn't been published to ${e??"a remote"}`)}break}case"detached":{let e;i=new r.ThemeIcon("git-commit"),t.appendMarkdown(`${this.worktree.main?"$(pass) ":""}Detached Worktree at $(git-commit) ${(0,m.zL)(this.worktree.sha)}${o}\\\n\`${this.worktree.friendlyPath}\``);try{e=await this.worktree.getStatus()}catch(e){Pe.Yd.error(e,"Worktree status failed"),n=!0}null!=e&&(s=e.hasChanges,t.appendMarkdown(`\n\n${e.getFormattedDiffStatus({prefix:"Has Uncommitted Changes",empty:"No Uncommitted Changes",expand:!0})}`));break}}const a=this.getState("pendingPullRequest");null!=a&&t.appendMarkdown(`\n\n$(loading~spin) Loading associated pull request${u.NE.Ellipsis}`),n&&t.appendMarkdown(`\n\n${u.NE.Warning} Unable to locate worktree path`);const c=new r.TreeItem(this.worktree.name,r.TreeItemCollapsibleState.Collapsed);return c.id=this.id,c.description=e,c.contextValue=`${ks.Td.Worktree}${this.worktree.main?"+main":""}${this.worktree.opened?"+active":""}`,c.iconPath=null!=a?new r.ThemeIcon("loading~spin"):this.worktree.opened?new r.ThemeIcon("check"):i,c.tooltip=t,c.resourceUri=n?r.Uri.parse("gitlens-view://worktree/missing"):s?r.Uri.parse("gitlens-view://worktree/changes"):void 0,c}refresh(e){this._children=void 0,e&&(this._log=void 0,this.deleteState())}async getAssociatedPullRequest(e,t){let i=this.getState("pullRequest");if(void 0!==i)return Promise.resolve(i??void 0);let r=this.getState("pendingPullRequest");return r??(r=e.getAssociatedPullRequest(t),this.storeState("pendingPullRequest",r),i=await r,this.storeState("pullRequest",i??null),this.deleteState("pendingPullRequest"),i)}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.getLog(this.uri.repoPath,{ref:this.worktree.sha,limit:this.limit??this.view.config.defaultItemLimit})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await r.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this._children=void 0,this.triggerChange(!1)))}}Qo([(0,Gt.H)(),(0,g.fF)()],WorktreeNode.prototype,"refresh",1),Qo([(0,Gt.H)()],WorktreeNode.prototype,"loadMore",1);var qo=Object.defineProperty,jo=Object.getOwnPropertyDescriptor;class WorktreesNode extends ks.Re{constructor(e,t,i,r){super(e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,ks.tO)("worktrees",this.context)}_children;get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this._children){if(!(await this.repo.access(ut.x.Worktrees)).allowed)return[];const e=await this.repo.getWorktrees();if(0===e.length)return[new Ss.AE(this.view,this,"No worktrees could be found.")];this._children=e.map((e=>new WorktreeNode(this.uri,this.view,this,e)))}return this._children}async getTreeItem(){const e=await this.repo.access(ut.x.Worktrees),t=new r.TreeItem("Worktrees",e.allowed?r.TreeItemCollapsibleState.Collapsed:r.TreeItemCollapsibleState.None);return t.id=this.id,t.contextValue=ks.Td.Worktrees,t.description=e.allowed?void 0:` ${u.NE.Warning}  Requires a trial or paid plan for use on privately hosted repos`,t.iconPath=new r.ThemeIcon("folder-opened"),t}refresh(){this._children=void 0}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?jo(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&qo(t,i,o)})([(0,Gt.H)(),(0,g.fF)()],WorktreesNode.prototype,"refresh",1);var zo=Object.defineProperty,Ko=Object.getOwnPropertyDescriptor,Jo=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Ko(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&zo(t,i,o),o};class RepositoryNode extends ks.CF{constructor(e,t,i,r,s){super(e,t,i),this.repo=r,this.updateContext({...s,repository:this.repo}),this._uniqueId=(0,ks.tO)("repository",this.context),this._status=this.repo.getStatus()}_children;_status;get id(){return this._uniqueId}toClipboard(){return this.repo.path}get repoPath(){return this.repo.path}get workspace(){return this.context.workspace}get wsRepositoryDescriptor(){return this.context.wsRepositoryDescriptor}async getChildren(){if(void 0===this._children){const e=[],t=await this._status;if(null!=t){const i=new f.XI(this.view.container,t.repoPath,t.branch,!1,!0,void 0,t.sha,t.upstream?{name:t.upstream,missing:!1}:void 0,t.state.ahead,t.state.behind,t.detached,t.rebasing);!1!==this.view.config.showBranchComparison&&e.push(new CompareBranchNode(this.uri,this.view,this,i,this.view.config.showBranchComparison,!0));const[r,s]=await Promise.all([this.view.container.git.getMergeStatus(t.repoPath),this.view.container.git.getRebaseStatus(t.repoPath)]);if(null!=r?e.push(new MergeStatusNode(this.view,this,i,r,t,!0)):null!=s?e.push(new RebaseStatusNode(this.view,this,i,s,t,!0)):this.view.config.showUpstreamStatus&&(t.upstream?t.state.behind||t.state.ahead?(t.state.behind&&e.push(new BranchTrackingStatusNode(this.view,this,i,t,"behind",!0)),t.state.ahead&&e.push(new BranchTrackingStatusNode(this.view,this,i,t,"ahead",!0,{showAheadCommits:!0}))):e.push(new BranchTrackingStatusNode(this.view,this,i,t,"same",!0)):e.push(new BranchTrackingStatusNode(this.view,this,i,t,"none",!0))),this.view.config.includeWorkingTree&&0!==t.files.length){const i=void 0;e.push(new StatusFilesNode(this.view,this,t,i))}0===e.length||this.view.config.compact||e.push(new Ss.AE(this.view,this,"",u.NE.Dash.repeat(2),"")),this.view.config.showCommits&&e.push(new BranchNode(this.uri,this.view,this,this.repo,i,!0,{showAsCommits:!0,showComparison:!1,showCurrent:!1,showStatus:!1,showTracking:!1}))}this.view.config.showBranches&&e.push(new BranchesNode(this.uri,this.view,this,this.repo)),this.view.config.showRemotes&&e.push(new RemotesNode(this.uri,this.view,this,this.repo)),this.view.config.showStashes&&await this.repo.supports(ut.A.Stashes)&&e.push(new StashesNode(this.uri,this.view,this,this.repo)),this.view.config.showTags&&e.push(new TagsNode(this.uri,this.view,this,this.repo)),this.view.config.showWorktrees&&await this.repo.supports(ut.A.Worktrees)&&e.push(new WorktreesNode(this.uri,this.view,this,this.repo)),this.view.config.showContributors&&e.push(new ContributorsNode(this.uri,this.view,this,this.repo)),this.view.config.showIncomingActivity&&!this.repo.provider.virtual&&e.push(new ReflogNode(this.uri,this.view,this,this.repo)),this._children=e}return this._children}async getTreeItem(){const e=this.repo.formattedName??this.uri.repoPath??"",t=await(this.repo?.getLastFetched())??0;let i,s=`${this.repo.formattedName??this.uri.repoPath??""}${t?`${(0,P.vk)(u.NE.Dash,2,2)}Last fetched ${ft._j.formatLastFetched(t,!1)}`:""}${this.repo.formattedName?`\\\n${this.uri.repoPath}`:""}`,o="";const{workspace:n}=this.context;let a,c=ks.Td.Repository;this.repo.starred&&(c+="+starred"),null!=n&&(c+="+workspace","cloud"===n.type?c+="+cloud":"local"===n.type&&(c+="+local")),this.repo.closed?(c+="+closed",a=""):a="-solid",this.repo.virtual&&(c+="+virtual",a="-cloud");const l=await this._status;if(null!=l){s+=`\n\nCurrent branch $(git-branch) ${l.branch}${l.rebasing?" (Rebasing)":""}`,this.view.config.includeWorkingTree&&0!==l.files.length&&(o=l.getFormattedDiffStatus({compact:!0,prefix:(0,P.vk)(u.NE.Dot,1,1)}));let e;if(i=`${l.getUpstreamStatus({suffix:(0,P.vk)(u.NE.Dot,1,1)})}${l.branch}${l.rebasing?" (Rebasing)":""}${o}`,null!=l.upstream){const t=mt.ss.getHighlanderProviders(await this.view.container.git.getRemotesWithProviders(l.repoPath));e=t?.length?t[0].name:void 0}else{const t=await l.getRemote();e=t?.provider?.name}a+=o?"-blue":"",null!=l.upstream&&(s+=` is ${l.getUpstreamStatus({empty:`up to date with $(git-branch) ${l.upstream}${e?` on ${e}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${l.upstream}${e?` on ${e}`:""}`})}`,l.state.behind&&(c+="+behind",a+="-red"),l.state.ahead&&(a+=l.state.behind?"-yellow":"-green",c+="+ahead")),o&&(s+=`\n\nWorking tree has uncommitted changes${l.getFormattedDiffStatus({expand:!0,prefix:"\n",separator:"\n"})}`)}null!=n&&(s+=`\n\nRepository is ${this.repo.closed?"not ":""}open in the current window`);const h=new r.TreeItem(e,null!=n||"workspaces"===this.view.type?r.TreeItemCollapsibleState.Collapsed:r.TreeItemCollapsibleState.Expanded);h.id=this.id,h.contextValue=c,h.description=`${i??""}${t?`${(0,P.vk)(u.NE.Dot,1,1)}Last fetched ${ft._j.formatLastFetched(t)}`:""}`,h.iconPath={dark:this.view.container.context.asAbsolutePath(`images/dark/icon-repo${a}.svg`),light:this.view.container.context.asAbsolutePath(`images/light/icon-repo${a}.svg`)},null==n||this.repo.closed||(h.resourceUri=r.Uri.parse("gitlens-view://workspaces/repository/open"));const d=new r.MarkdownString(s,!0);return d.supportHtml=!0,d.isTrusted=!0,h.tooltip=d,h}fetch(e={}){return this.repo.fetch(e)}pull(e={}){return this.repo.pull(e)}push(e={}){return this.repo.push(e)}async refresh(e=!1){e&&(this._status=this.repo.getStatus(),this._children=void 0),await this.ensureSubscription()}async star(){await this.repo.star(),this.parent.triggerChange()}async unstar(){await this.repo.unstar(),this.parent.triggerChange()}async subscribe(){const e=await(this.repo?.getLastFetched())??0,t=[this.repo.onDidChange(this.onRepositoryChanged,this)],i=ft._j.getLastFetchedUpdateInterval(e);return 0!==e&&i>0&&t.push((0,Ht.DH)((()=>{i!==ft._j.getLastFetchedUpdateInterval(e)&&this.resetSubscription(),this.splatted?this.view.triggerNodeChange(this.parent??this):this.view.triggerNodeChange(this)}),i)),this.view.config.includeWorkingTree&&t.push(this.repo.onDidChangeFileSystem(this.onFileSystemChanged,this),this.repo.startWatchingFileSystem()),r.Disposable.from(...t)}etag(){return this.repo.etag}async onFileSystemChanged(e){if(this._status=this.repo.getStatus(),void 0!==this._children){const e=await this._status;let t=this._children.findIndex((e=>e instanceof StatusFilesNode));if(void 0===e||!e.state.ahead&&0===e.files.length)-1!==t&&this._children.splice(t,1);else{let i=1;-1===t&&(t=(0,A.qr)(this._children,(e=>e instanceof BranchTrackingStatusNode||e instanceof BranchNode)),i=0,t++);const r=void 0;this._children.splice(t,i,new StatusFilesNode(this.view,this,e,r))}}this.triggerChange(!1)}onRepositoryChanged(e){if(e.changed(ft.I6.Closed,ft.du.Any))this.dispose();else if(null==this._children||e.changed(ft.I6.Config,ft.I6.Index,ft.I6.Heads,ft.I6.Opened,ft.I6.Status,ft.I6.Unknown,ft.du.Any))this.triggerChange(!0);else{if(e.changed(ft.I6.Remotes,ft.I6.RemoteProviders,ft.du.Any)){const e=this._children.find((e=>e instanceof RemotesNode));null!=e&&this.view.triggerNodeChange(e)}if(e.changed(ft.I6.Stash,ft.du.Any)){const e=this._children.find((e=>e instanceof StashesNode));null!=e&&this.view.triggerNodeChange(e)}if(e.changed(ft.I6.Tags,ft.du.Any)){const e=this._children.find((e=>e instanceof TagsNode));null!=e&&this.view.triggerNodeChange(e)}}}}Jo([(0,g.cM)()],RepositoryNode.prototype,"fetch",1),Jo([(0,g.cM)()],RepositoryNode.prototype,"pull",1),Jo([(0,g.cM)()],RepositoryNode.prototype,"push",1),Jo([(0,Gt.H)(),(0,g.fF)()],RepositoryNode.prototype,"refresh",1),Jo([(0,g.cM)()],RepositoryNode.prototype,"star",1),Jo([(0,g.cM)()],RepositoryNode.prototype,"unstar",1),Jo([(0,g.fF)()],RepositoryNode.prototype,"subscribe",1),Jo([(0,g.fF)({args:{0:e=>`{ repository: ${e.repository?.name??""}, uris(${e.uris.length}): [${e.uris.slice(0,1).map((e=>e.fsPath)).join(", ")}${e.uris.length>1?", ...":""}] }`}})],RepositoryNode.prototype,"onFileSystemChanged",1),Jo([(0,g.fF)({args:{0:e=>e.toString()}})],RepositoryNode.prototype,"onRepositoryChanged",1);var Zo=i(202),Xo=i(2758),en=Object.defineProperty,tn=Object.getOwnPropertyDescriptor,rn=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?tn(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&en(t,i,o),o};function sn(e,t,i,r=1){return(0,Zi.xR)(e,((...e)=>{if(0!==r){let[s,o,...n]=e;if(s instanceof ks.Re&&Array.isArray(o)&&o[0]instanceof ks.Re)return o=o.filter((e=>e?.constructor===s.constructor)),2===r?t.apply(i,[s,o,...n]):(0,Ht.df)(t,o.map((e=>[e,...n])),i)}return t.apply(i,e)}),i)}class ViewCommands{constructor(e){this.container=e,sn("gitlens.views.clearNode",(e=>(0,ks.kr)(e)&&e.clear()),this),(0,Zi.xR)(u.Gh.ViewsCopy,(async(e,t)=>{if(0===(t=Array.isArray(t)?t:null!=e?[e]:[]).length)return;const i=t.map((e=>e.toClipboard?.())).filter((e=>Boolean(e))).join("\n");await r.env.clipboard.writeText(i)}),this),sn("gitlens.views.dismissNode",(e=>(0,ks.kP)(e.view)&&e.view.dismissNode(e)),this),sn("gitlens.views.editNode",(e=>(0,ks.LD)(e)&&e.edit()),this),sn("gitlens.views.expandNode",(e=>e.view.reveal(e,{select:!1,focus:!1,expand:3})),this),sn("gitlens.views.loadMoreChildren",(e=>e.loadMore()),this),sn("gitlens.views.loadAllChildren",(e=>e.loadAll()),this),sn("gitlens.views.refreshNode",((e,t)=>(null==t&&(0,ks.On)(e)&&(e.limit=void 0,e.view.resetNodeLastKnownLimit(e)),e.view.refreshNode(e,t??!0))),this),sn("gitlens.views.setShowRelativeDateMarkersOn",(()=>this.setShowRelativeDateMarkers(!0)),this),sn("gitlens.views.setShowRelativeDateMarkersOff",(()=>this.setShowRelativeDateMarkers(!1)),this),sn("gitlens.views.fetch",this.fetch,this),sn("gitlens.views.publishBranch",this.publishBranch,this),sn("gitlens.views.publishRepository",this.publishRepository,this),sn("gitlens.views.pull",this.pull,this),sn("gitlens.views.push",this.push,this),sn("gitlens.views.pushWithForce",(e=>this.push(e,!0)),this),sn("gitlens.views.closeRepository",this.closeRepository,this),sn("gitlens.views.setAsDefault",this.setAsDefault,this),sn("gitlens.views.unsetAsDefault",this.unsetAsDefault,this),sn("gitlens.views.openInTerminal",this.openInTerminal,this),sn("gitlens.views.star",this.star,this),sn("gitlens.views.unstar",this.unstar,this),sn("gitlens.views.browseRepoAtRevision",this.browseRepoAtRevision,this),sn("gitlens.views.browseRepoAtRevisionInNewWindow",(e=>this.browseRepoAtRevision(e,{openInNewWindow:!0})),this),sn("gitlens.views.browseRepoBeforeRevision",(e=>this.browseRepoAtRevision(e,{before:!0})),this),sn("gitlens.views.browseRepoBeforeRevisionInNewWindow",(e=>this.browseRepoAtRevision(e,{before:!0,openInNewWindow:!0})),this),sn("gitlens.views.addAuthors",this.addAuthors,this),sn("gitlens.views.addAuthor",this.addAuthor,this),sn("gitlens.views.openChanges",this.openChanges,this),sn("gitlens.views.openChangesWithWorking",this.openChangesWithWorking,this),sn("gitlens.views.openPreviousChangesWithWorking",this.openPreviousChangesWithWorking,this),sn("gitlens.views.openFile",this.openFile,this),sn("gitlens.views.openFileRevision",this.openRevision,this),sn("gitlens.views.openChangedFiles",this.openFiles,this),sn("gitlens.views.openChangedFileDiffs",this.openAllChanges,this),sn("gitlens.views.openChangedFileDiffsWithWorking",this.openAllChangesWithWorking,this),sn("gitlens.views.openChangedFileRevisions",this.openRevisions,this),sn("gitlens.views.applyChanges",this.applyChanges,this),sn("gitlens.views.highlightChanges",this.highlightChanges,this),sn("gitlens.views.highlightRevisionChanges",this.highlightRevisionChanges,this),sn("gitlens.views.restore",this.restore,this),sn("gitlens.views.switchToAnotherBranch",this.switch,this),sn("gitlens.views.switchToBranch",this.switchTo,this),sn("gitlens.views.switchToCommit",this.switchTo,this),sn("gitlens.views.switchToTag",this.switchTo,this),sn("gitlens.views.addRemote",this.addRemote,this),sn("gitlens.views.pruneRemote",this.pruneRemote,this),sn("gitlens.views.removeRemote",this.removeRemote,this),sn("gitlens.views.stageDirectory",this.stageDirectory,this),sn("gitlens.views.stageFile",this.stageFile,this),sn("gitlens.views.unstageDirectory",this.unstageDirectory,this),sn("gitlens.views.unstageFile",this.unstageFile,this),sn("gitlens.views.compareAncestryWithWorking",this.compareAncestryWithWorking,this),sn("gitlens.views.compareWithHead",this.compareHeadWith,this),sn("gitlens.views.compareWithUpstream",this.compareWithUpstream,this),sn("gitlens.views.compareWithSelected",this.compareWithSelected,this),sn("gitlens.views.selectForCompare",this.selectForCompare,this),sn("gitlens.views.compareFileWithSelected",this.compareFileWithSelected,this),sn("gitlens.views.selectFileForCompare",this.selectFileForCompare,this),sn("gitlens.views.compareWithWorking",this.compareWorkingWith,this),sn("gitlens.views.setBranchComparisonToWorking",(e=>this.setBranchComparison(e,"working")),this),sn("gitlens.views.setBranchComparisonToBranch",(e=>this.setBranchComparison(e,"branch")),this),sn("gitlens.views.cherryPick",this.cherryPick,this,2),sn("gitlens.views.title.createBranch",(()=>this.createBranch())),sn("gitlens.views.createBranch",this.createBranch,this),sn("gitlens.views.deleteBranch",this.deleteBranch,this),sn("gitlens.views.renameBranch",this.renameBranch,this),sn("gitlens.views.title.applyStash",(()=>this.applyStash())),sn("gitlens.views.stash.delete",this.deleteStash,this,2),sn("gitlens.views.stash.rename",this.renameStash,this),sn("gitlens.views.title.createTag",(()=>this.createTag())),sn("gitlens.views.createTag",this.createTag,this),sn("gitlens.views.deleteTag",this.deleteTag,this),sn("gitlens.views.mergeBranchInto",this.merge,this),sn("gitlens.views.pushToCommit",this.pushToCommit,this),sn("gitlens.views.rebaseOntoBranch",this.rebase,this),sn("gitlens.views.rebaseOntoUpstream",this.rebaseToRemote,this),sn("gitlens.views.rebaseOntoCommit",this.rebase,this),sn("gitlens.views.resetCommit",this.resetCommit,this),sn("gitlens.views.resetToCommit",this.resetToCommit,this),sn("gitlens.views.resetToTip",this.resetToTip,this),sn("gitlens.views.revert",this.revert,this),sn("gitlens.views.undoCommit",this.undoCommit,this),sn("gitlens.views.createPullRequest",this.createPullRequest,this),sn("gitlens.views.openPullRequest",this.openPullRequest,this),sn("gitlens.views.title.createWorktree",(()=>this.createWorktree())),sn("gitlens.views.createWorktree",this.createWorktree,this),sn("gitlens.views.deleteWorktree",this.deleteWorktree,this),sn("gitlens.views.openWorktree",this.openWorktree,this),sn("gitlens.views.revealRepositoryInExplorer",this.revealRepositoryInExplorer,this),sn("gitlens.views.revealWorktreeInExplorer",this.revealWorktreeInExplorer,this),sn("gitlens.views.openWorktreeInNewWindow",(e=>this.openWorktree(e,{location:"newWindow"})),this)}addAuthors(e){return Xs.q((0,ks.pp)(e))}addAuthor(e){return e instanceof ContributorNode?Xs.q(e.repoPath,e.contributor.current?void 0:e.contributor):Promise.resolve()}addRemote(e){return eo.IH((0,ks.pp)(e))}applyChanges(e){return e instanceof ks.RW?e instanceof Zo.C?Zs.zb(e.file,(0,m.xB)(e.ref1,e.repoPath),(0,m.xB)(e.ref2,e.repoPath)):null==e.ref||"HEAD"===e.ref.ref?Promise.resolve():Zs.zb(e.file,e.ref):Promise.resolve()}applyStash(){return io.nn()}browseRepoAtRevision(e,t){return e instanceof ks.bT||e instanceof ks.RW?(0,Ks.g)(e.uri,{before:t?.before,openInNewWindow:t?.openInNewWindow}):Promise.resolve()}cherryPick(e,t){return e instanceof Ps.D?null!=t&&0!==t.length?to.QP(e.repoPath,t.map((e=>e.ref))):to.QP(e.repoPath,e.ref):Promise.resolve()}closeRepository(e){(e instanceof RepositoryNode||e instanceof ks.vb)&&(e.repo.closed=!0)}async createBranch(e){let t=e instanceof ks.bT||e instanceof ks.RW?e?.ref:e instanceof BranchTrackingStatusNode?e.branch:void 0;if(null==t){t=await this.container.git.getBranch(e?.repoPath??this.container.git.getBestRepository()?.uri)}return Js.Ue(e?.repoPath,t)}async createPullRequest(e){if(!(e instanceof BranchNode||e instanceof BranchTrackingStatusNode))return Promise.resolve();const t=await e.branch.getRemote();return(0,Zi.SI)("createPullRequest",{repoPath:e.repoPath,remote:null!=t?{name:t.name,provider:null!=t.provider?{id:t.provider.id,name:t.provider.name,domain:t.provider.domain}:void 0,url:t.url}:void 0,branch:{name:e.branch.name,upstream:e.branch.upstream?.name,isRemote:e.branch.remote}})}async createTag(e){let t=e instanceof ks.bT||e instanceof ks.RW?e?.ref:e instanceof BranchTrackingStatusNode?e.branch:void 0;if(null==t){t=await this.container.git.getBranch(e?.repoPath??this.container.git.getBestRepository()?.uri)}return ro.Ue(e?.repoPath,t)}async createWorktree(e){if(e instanceof WorktreesNode&&(e=void 0),null==e||e instanceof BranchNode)return so.Ue(e?.repoPath,void 0,e?.ref)}deleteBranch(e){return e instanceof BranchNode?Js.Od(e.repoPath,e.branch):Promise.resolve()}deleteStash(e,t){if(!(e instanceof Eo.i))return Promise.resolve();if(null!=t&&0!==t.length){const e=t.sort(((e,t)=>parseInt(t.commit.number,10)-parseInt(e.commit.number,10)));return(0,Ht.df)(io.Cw,e.map((e=>[e.repoPath,e.commit])),this)}return io.Cw(e.repoPath,e.commit)}renameStash(e){return e instanceof Eo.i?io.PQ(e.repoPath,e.commit):Promise.resolve()}deleteTag(e){return e instanceof TagNode?ro.Od(e.repoPath,e.tag):Promise.resolve()}async deleteWorktree(e){if(e instanceof WorktreeNode)return so.Od(e.repoPath,e.worktree.uri)}fetch(e){return e instanceof RepositoryNode||e instanceof ks.vb?to.he(e.repo):e instanceof RemoteNode?eo.he(e.remote.repoPath,e.remote.name):e instanceof BranchNode||e instanceof BranchTrackingStatusNode?to.he(e.repoPath,e.root?void 0:e.branch):Promise.resolve()}async highlightChanges(e){(e instanceof oo.R||e instanceof Xo.y||e instanceof po.m||e instanceof Zo.C)&&(await this.openFile(e,{preserveFocus:!0,preview:!0}),await this.container.fileAnnotations.toggle(r.window.activeTextEditor,"changes",{sha:e.ref.ref},!0))}async highlightRevisionChanges(e){(e instanceof oo.R||e instanceof Xo.y||e instanceof po.m||e instanceof Zo.C)&&(await this.openFile(e,{preserveFocus:!0,preview:!0}),await this.container.fileAnnotations.toggle(r.window.activeTextEditor,"changes",{sha:e.ref.ref,only:!0},!0))}merge(e){return e instanceof BranchNode||e instanceof TagNode?to.TS(e.repoPath,e instanceof BranchNode?e.branch:e.tag):Promise.resolve()}openInTerminal(e){return e instanceof RepositoryNode||e instanceof ks.vb?(0,Zi.dO)("openInTerminal",r.Uri.file(e.repo.path)):Promise.resolve()}openPullRequest(e){return e instanceof Ls.Z?(0,Zi.SI)("openPullRequest",{repoPath:e.uri.repoPath,provider:{id:e.pullRequest.provider.id,name:e.pullRequest.provider.name,domain:e.pullRequest.provider.domain},pullRequest:{id:e.pullRequest.id,url:e.pullRequest.url}}):Promise.resolve()}openWorktree(e,t){e instanceof WorktreeNode&&(0,Re.ic)(e.worktree.uri,t)}pruneRemote(e){return e instanceof RemoteNode?eo.Qs(e.remote.repoPath,e.remote.name):Promise.resolve()}async removeRemote(e){return e instanceof RemoteNode?eo.Od(e.remote.repoPath,e.remote.name):Promise.resolve()}publishBranch(e){return e instanceof BranchNode||e instanceof BranchTrackingStatusNode?to.VF(e.repoPath,void 0,e.branch):Promise.resolve()}publishRepository(e){return e instanceof BranchNode||e instanceof BranchTrackingStatusNode?(0,Zi.Zv)("git.publish",r.Uri.file(e.repoPath)):Promise.resolve()}pull(e){return e instanceof RepositoryNode||e instanceof ks.vb?to.X4(e.repo):e instanceof BranchNode||e instanceof BranchTrackingStatusNode?to.X4(e.repoPath,e.root?void 0:e.branch):Promise.resolve()}push(e,t){return e instanceof RepositoryNode||e instanceof ks.vb?to.VF(e.repo,t):e instanceof BranchNode||e instanceof BranchTrackingStatusNode?to.VF(e.repoPath,t,e.root?void 0:e.branch):e instanceof Ps.D||e instanceof po.m?e.isTip?to.VF(e.repoPath,t):this.pushToCommit(e):Promise.resolve()}pushToCommit(e){return e instanceof Ps.D||e instanceof po.m?to.VF(e.repoPath,!1,e.commit):Promise.resolve()}rebase(e){return e instanceof BranchNode||e instanceof Ps.D||e instanceof po.m||e instanceof TagNode?to.DW(e.repoPath,e.ref):Promise.resolve()}rebaseToRemote(e){if(!(e instanceof BranchNode||e instanceof BranchTrackingStatusNode))return Promise.resolve();const t=e instanceof BranchNode?e.branch.upstream?.name:e.status.upstream;return null==t?Promise.resolve():to.DW(e.repoPath,(0,m.xB)(t,e.repoPath,{refType:"branch",name:t,remote:!0}))}renameBranch(e){return e instanceof BranchNode?Js.PQ(e.repoPath,e.branch):Promise.resolve()}resetCommit(e){return e instanceof Ps.D||e instanceof po.m?to.mc(e.repoPath,(0,m.xB)(`${e.ref.ref}^`,e.ref.repoPath,{refType:"revision",name:`${e.ref.name}^`,message:e.ref.message})):Promise.resolve()}resetToCommit(e){return e instanceof Ps.D||e instanceof po.m?to.mc(e.repoPath,e.ref):Promise.resolve()}resetToTip(e){return e instanceof BranchNode?to.mc(e.repoPath,(0,m.xB)(e.ref.ref,e.repoPath,{refType:"revision",name:e.ref.name})):Promise.resolve()}restore(e){return e instanceof ks.RW?Zs.Hl(e.file,e.ref):Promise.resolve()}revealRepositoryInExplorer(e){if(e instanceof RepositoryNode)return to.qM(e.repo)}revealWorktreeInExplorer(e){if(e instanceof WorktreeNode)return so.qM(e.worktree)}revert(e){return e instanceof Ps.D||e instanceof po.m?to.CU(e.repoPath,e.ref):Promise.resolve()}setAsDefault(e){return e instanceof RemoteNode?e.setAsDefault():Promise.resolve()}setBranchComparison(e,t){if(e instanceof CompareBranchNode)return e.setComparisonType(t)}setShowRelativeDateMarkers(e){return s.D.updateEffective("views.showRelativeDateMarkers",e)}async stageFile(e){(e instanceof oo.R||e instanceof po.m||e instanceof As.q)&&(await this.container.git.stageFile(e.repoPath,e.file.path),e.triggerChange())}async stageDirectory(e){e instanceof Cs.Y&&e.relativePath&&(await this.container.git.stageDirectory(e.repoPath,e.relativePath),e.triggerChange())}star(e){return e instanceof BranchNode||e instanceof RepositoryNode||e instanceof ks.vb?e.star():Promise.resolve()}switch(e){return to.gu((0,ks.pp)(e))}switchTo(e){return e instanceof ks.bT?to.gu(e.repoPath,e instanceof BranchNode&&e.branch.current?void 0:e.ref):to.gu((0,ks.pp)(e))}async undoCommit(e){if(!(e instanceof Ps.D||e instanceof po.m))return;const t=await this.container.git.getOrOpenScmRepository(e.repoPath),i=await(t?.getCommit("HEAD"));i?.hash===e.ref.ref?await(0,Zi.Zv)("git.undoCommit",e.repoPath):r.window.showWarningMessage(`Commit ${(0,m.Wh)(e.ref,{capitalize:!0,icon:!1})} cannot be undone, because it is no longer the most recent commit.`)}unsetAsDefault(e){return e instanceof RemoteNode?e.setAsDefault(!1):Promise.resolve()}async unstageFile(e){(e instanceof oo.R||e instanceof po.m||e instanceof As.q)&&(await this.container.git.unstageFile(e.repoPath,e.file.path),e.triggerChange())}async unstageDirectory(e){e instanceof Cs.Y&&e.relativePath&&(await this.container.git.unstageDirectory(e.repoPath,e.relativePath),e.triggerChange())}unstar(e){return e instanceof BranchNode||e instanceof RepositoryNode||e instanceof ks.vb?e.unstar():Promise.resolve()}compareHeadWith(e){return e instanceof ks.bT||e instanceof ks.RW?e instanceof ks.RW?this.compareFileWith(e.repoPath,e.uri,e.ref.ref,void 0,"HEAD"):this.container.searchAndCompareView.compare(e.repoPath,"HEAD",e.ref):Promise.resolve()}compareWithUpstream(e){return e instanceof BranchNode?null==e.branch.upstream?Promise.resolve():this.container.searchAndCompareView.compare(e.repoPath,e.ref,e.branch.upstream.name):Promise.resolve()}compareWorkingWith(e){return e instanceof ks.bT||e instanceof ks.RW?e instanceof ks.RW?this.compareFileWith(e.repoPath,e.uri,e.ref.ref,void 0,""):this.container.searchAndCompareView.compare(e.repoPath,"",e.ref):Promise.resolve()}async compareAncestryWithWorking(e){if(!(e instanceof BranchNode))return;const t=await this.container.git.getBranch(e.repoPath);if(null==t)return;const i=await this.container.git.getMergeBase(e.repoPath,t.ref,e.ref.ref);return null!=i?this.container.searchAndCompareView.compare(e.repoPath,{ref:i,label:`ancestry with ${e.ref.ref} (${(0,m.zL)(i)})`},""):void 0}compareWithSelected(e){(e instanceof ks.bT||e instanceof ks.RW)&&this.container.searchAndCompareView.compareWithSelected(e.repoPath,e.ref)}selectForCompare(e){(e instanceof ks.bT||e instanceof ks.RW)&&this.container.searchAndCompareView.selectForCompare(e.repoPath,e.ref)}async compareFileWith(e,t,i,r,s){return null==r&&(r=await this.container.git.getWorkingUri(e,t)),(0,Zi.P0)(u.Gh.DiffWith,{repoPath:e,lhs:{sha:i,uri:t},rhs:{sha:s,uri:r??t}})}compareFileWithSelected(e){if(null==this._selectedFile||!(e instanceof ks.RW)||null==e.ref)return Promise.resolve();if(this._selectedFile.repoPath!==e.repoPath)return this.selectFileForCompare(e),Promise.resolve();const t=this._selectedFile;return this._selectedFile=void 0,(0,Ni.v)("gitlens:views:canCompare:file",!1),this.compareFileWith(t.repoPath,t.uri,t.ref,e.uri,e.ref.ref)}_selectedFile;selectFileForCompare(e){e instanceof ks.RW&&null!=e.ref&&(this._selectedFile={ref:e.ref.ref,repoPath:e.repoPath,uri:e.uri},(0,Ni.v)("gitlens:views:canCompare:file",!0))}async openAllChanges(e,t){if(e instanceof Ps.D||e instanceof Eo.i||e instanceof Os.V){if(e instanceof Os.V){const{files:i}=await e.getFilesQueryResults();if(null==i||0===i.length)return;return Zs.Gp(i,{repoPath:e.repoPath,ref1:e.ref1,ref2:e.ref2},t)}return Zs.Gp(e.commit,t)}}openChanges(e){if(!(e instanceof ks.RW||e instanceof MergeConflictFileNode||e instanceof As.q))return;if(e instanceof MergeConflictFileNode)return void(0,Zi.P0)(u.Gh.DiffWith,{lhs:{sha:e.status.HEAD.ref,uri:dt.YY.fromFile(e.file,e.repoPath,void 0,!0)},rhs:{sha:"HEAD",uri:dt.YY.fromFile(e.file,e.repoPath)},repoPath:e.repoPath,line:0,showOptions:{preserveFocus:!1,preview:!1}});const t=e.getCommand();if(null!=t?.arguments)switch(t.command){case u.Gh.DiffWith:{const[e]=t.arguments;e.showOptions.preview=!1,(0,Zi.P0)(t.command,e);break}case u.Gh.DiffWithPrevious:{const[,e]=t.arguments;e.showOptions.preview=!1,(0,Zi.b2)(t.command,void 0,e);break}default:throw new Error(`Unexpected command: ${t.command}`)}}async openAllChangesWithWorking(e,t){if(e instanceof Ps.D||e instanceof Eo.i||e instanceof Os.V){if(e instanceof Os.V){const{files:i}=await e.getFilesQueryResults();if(null==i||0===i.length)return;return Zs.Ou(i,{repoPath:e.repoPath,ref:e.ref1||e.ref2},t)}return Zs.Ou(e.commit,t)}}async openChangesWithWorking(e){if(!(e instanceof ks.RW||e instanceof MergeConflictFileNode||e instanceof As.q))return Promise.resolve();if(e instanceof As.q)return(0,Zi.b2)(u.Gh.DiffWithWorking,void 0,{uri:e.uri,showOptions:{preserveFocus:!0,preview:!0}});if(e instanceof MergeConflictFileNode)return(0,Zi.b2)(u.Gh.DiffWithWorking,void 0,{uri:e.baseUri,showOptions:{preserveFocus:!0,preview:!0}});if(e instanceof po.m&&e.commit.file?.hasConflicts){const t=await e.getConflictBaseUri();if(null!=t)return(0,Zi.b2)(u.Gh.DiffWithWorking,void 0,{uri:t,showOptions:{preserveFocus:!0,preview:!0}})}return Zs.ce(e.file,{repoPath:e.repoPath,ref:e.ref.ref})}async openPreviousChangesWithWorking(e){return e instanceof ks.RW?Zs.ce(e.file,{repoPath:e.repoPath,ref:`${e.ref.ref}^`}):Promise.resolve()}openFile(e,t){return e instanceof ks.RW||e instanceof MergeConflictFileNode||e instanceof As.q||e instanceof FileHistoryNode||e instanceof LineHistoryNode?Zs.ZB(e.uri,{preserveFocus:!0,preview:!1,...t}):Promise.resolve()}async openFiles(e){if(e instanceof Ps.D||e instanceof Eo.i||e instanceof Os.V){if(e instanceof Os.V){const{files:t}=await e.getFilesQueryResults();if(null==t||0===t.length)return;return Zs.aE(t,e.repoPath,e.ref1||e.ref2)}return Zs.aE(e.commit)}}async openRevision(e,t){if(!(e instanceof oo.R||e instanceof po.m||e instanceof Zo.C||e instanceof Xo.y||e instanceof MergeConflictFileNode||e instanceof As.q))return Promise.resolve();let i=(t={showOptions:{preserveFocus:!0,preview:!1},...t}).revisionUri;return null==i&&(i=e instanceof Zo.C||e instanceof MergeConflictFileNode?this.container.git.getRevisionUri(e.uri):"D"===e.commit.file?.status?this.container.git.getRevisionUri(await e.commit.getPreviousSha()??D.Ii,e.commit.file.path,e.commit.repoPath):this.container.git.getRevisionUri(e.uri)),Zs.YS(i,t.showOptions??{preserveFocus:!0,preview:!1})}async openRevisions(e,t){if(e instanceof Ps.D||e instanceof Eo.i||e instanceof Os.V){if(e instanceof Os.V){const{files:t}=await e.getFilesQueryResults();if(null==t||0===t.length)return;return Zs.Dh(t,e.repoPath,e.ref1,e.ref2)}return Zs.Dh(e.commit)}}}rn([(0,g.fF)()],ViewCommands.prototype,"addAuthors",1),rn([(0,g.fF)()],ViewCommands.prototype,"addAuthor",1),rn([(0,g.fF)()],ViewCommands.prototype,"addRemote",1),rn([(0,g.fF)()],ViewCommands.prototype,"applyChanges",1),rn([(0,g.fF)()],ViewCommands.prototype,"applyStash",1),rn([(0,g.fF)()],ViewCommands.prototype,"browseRepoAtRevision",1),rn([(0,g.fF)()],ViewCommands.prototype,"cherryPick",1),rn([(0,g.fF)()],ViewCommands.prototype,"closeRepository",1),rn([(0,g.fF)()],ViewCommands.prototype,"createBranch",1),rn([(0,g.fF)()],ViewCommands.prototype,"createPullRequest",1),rn([(0,g.fF)()],ViewCommands.prototype,"createTag",1),rn([(0,g.fF)()],ViewCommands.prototype,"createWorktree",1),rn([(0,g.fF)()],ViewCommands.prototype,"deleteBranch",1),rn([(0,g.fF)()],ViewCommands.prototype,"deleteStash",1),rn([(0,g.fF)()],ViewCommands.prototype,"renameStash",1),rn([(0,g.fF)()],ViewCommands.prototype,"deleteTag",1),rn([(0,g.fF)()],ViewCommands.prototype,"deleteWorktree",1),rn([(0,g.fF)()],ViewCommands.prototype,"fetch",1),rn([(0,g.fF)()],ViewCommands.prototype,"highlightChanges",1),rn([(0,g.fF)()],ViewCommands.prototype,"highlightRevisionChanges",1),rn([(0,g.fF)()],ViewCommands.prototype,"merge",1),rn([(0,g.fF)()],ViewCommands.prototype,"openInTerminal",1),rn([(0,g.fF)()],ViewCommands.prototype,"openPullRequest",1),rn([(0,g.fF)()],ViewCommands.prototype,"openWorktree",1),rn([(0,g.fF)()],ViewCommands.prototype,"pruneRemote",1),rn([(0,g.fF)()],ViewCommands.prototype,"removeRemote",1),rn([(0,g.fF)()],ViewCommands.prototype,"publishBranch",1),rn([(0,g.fF)()],ViewCommands.prototype,"publishRepository",1),rn([(0,g.fF)()],ViewCommands.prototype,"pull",1),rn([(0,g.fF)()],ViewCommands.prototype,"push",1),rn([(0,g.fF)()],ViewCommands.prototype,"pushToCommit",1),rn([(0,g.fF)()],ViewCommands.prototype,"rebase",1),rn([(0,g.fF)()],ViewCommands.prototype,"rebaseToRemote",1),rn([(0,g.fF)()],ViewCommands.prototype,"renameBranch",1),rn([(0,g.fF)()],ViewCommands.prototype,"resetCommit",1),rn([(0,g.fF)()],ViewCommands.prototype,"resetToCommit",1),rn([(0,g.fF)()],ViewCommands.prototype,"resetToTip",1),rn([(0,g.fF)()],ViewCommands.prototype,"restore",1),rn([(0,g.fF)()],ViewCommands.prototype,"revealRepositoryInExplorer",1),rn([(0,g.fF)()],ViewCommands.prototype,"revealWorktreeInExplorer",1),rn([(0,g.fF)()],ViewCommands.prototype,"revert",1),rn([(0,g.fF)()],ViewCommands.prototype,"setAsDefault",1),rn([(0,g.fF)()],ViewCommands.prototype,"setBranchComparison",1),rn([(0,g.fF)()],ViewCommands.prototype,"setShowRelativeDateMarkers",1),rn([(0,g.fF)()],ViewCommands.prototype,"stageFile",1),rn([(0,g.fF)()],ViewCommands.prototype,"stageDirectory",1),rn([(0,g.fF)()],ViewCommands.prototype,"star",1),rn([(0,g.fF)()],ViewCommands.prototype,"switch",1),rn([(0,g.fF)()],ViewCommands.prototype,"switchTo",1),rn([(0,g.fF)()],ViewCommands.prototype,"undoCommit",1),rn([(0,g.fF)()],ViewCommands.prototype,"unsetAsDefault",1),rn([(0,g.fF)()],ViewCommands.prototype,"unstageFile",1),rn([(0,g.fF)()],ViewCommands.prototype,"unstageDirectory",1),rn([(0,g.fF)()],ViewCommands.prototype,"unstar",1),rn([(0,g.fF)()],ViewCommands.prototype,"compareHeadWith",1),rn([(0,g.fF)()],ViewCommands.prototype,"compareWithUpstream",1),rn([(0,g.fF)()],ViewCommands.prototype,"compareWorkingWith",1),rn([(0,g.fF)()],ViewCommands.prototype,"compareAncestryWithWorking",1),rn([(0,g.fF)()],ViewCommands.prototype,"compareWithSelected",1),rn([(0,g.fF)()],ViewCommands.prototype,"selectForCompare",1),rn([(0,g.fF)()],ViewCommands.prototype,"compareFileWithSelected",1),rn([(0,g.fF)()],ViewCommands.prototype,"selectFileForCompare",1),rn([(0,g.fF)()],ViewCommands.prototype,"openAllChanges",1),rn([(0,g.fF)()],ViewCommands.prototype,"openChanges",1),rn([(0,g.fF)()],ViewCommands.prototype,"openAllChangesWithWorking",1),rn([(0,g.fF)()],ViewCommands.prototype,"openChangesWithWorking",1),rn([(0,g.fF)()],ViewCommands.prototype,"openPreviousChangesWithWorking",1),rn([(0,g.fF)()],ViewCommands.prototype,"openFile",1),rn([(0,g.fF)()],ViewCommands.prototype,"openFiles",1),rn([(0,g.fF)()],ViewCommands.prototype,"openRevision",1),rn([(0,g.fF)()],ViewCommands.prototype,"openRevisions",1);var on=Object.defineProperty,nn=Object.getOwnPropertyDescriptor,an=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nn(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&on(t,i,o),o};class BranchesRepositoryNode extends ks.vb{async getChildren(){return null==this.child&&(this.child=new BranchesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(ft.I6.Config,ft.I6.Heads,ft.I6.Index,ft.I6.Remotes,ft.I6.RemoteProviders,ft.I6.Status,ft.I6.Unknown,ft.du.Any)}}class BranchesViewNode extends ks.FZ{async getChildren(){if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No branches could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new BranchesRepositoryNode(dt.YY.fromRepoPath(e.path),this.view,this,e,t)))}if(1===this.children.length){const[e]=this.children,t=await e.repo.getBranches({filter:e=>!e.remote});return 0===t.values.length?(this.view.message="No branches could be found.",this.view.title="Branches",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Branches (${t.values.length})`,e.getChildren())}return this.view.title="Branches",this.children}getTreeItem(){return new r.TreeItem("Branches",r.TreeItemCollapsibleState.Expanded)}}class BranchesView extends ViewBase{configKey="branches";constructor(e){super(e,"branches","Branches","branchesView")}get canReveal(){return this.config.reveal||!s.D.get("views.repositories.showBranches")}getRoot(){return new BranchesViewNode(this)}registerCommands(){return this.container.viewCommands,[sn(this.getQualifiedCommand("copy"),(()=>(0,Zi.P0)(u.Gh.ViewsCopy,this.activeSelection,this.selection)),this),sn(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("branches"),this.refresh(!0))),this),sn(this.getQualifiedCommand("setLayoutToList"),(()=>this.setLayout("list")),this),sn(this.getQualifiedCommand("setLayoutToTree"),(()=>this.setLayout("tree")),this),sn(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout("auto")),this),sn(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout("list")),this),sn(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout("tree")),this),sn(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),sn(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),sn(this.getQualifiedCommand("setShowBranchComparisonOn"),(()=>this.setShowBranchComparison(!0)),this),sn(this.getQualifiedCommand("setShowBranchComparisonOff"),(()=>this.setShowBranchComparison(!1)),this),sn(this.getQualifiedCommand("setShowBranchPullRequestOn"),(()=>this.setShowBranchPullRequest(!0)),this),sn(this.getQualifiedCommand("setShowBranchPullRequestOff"),(()=>this.setShowBranchPullRequest(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||s.D.changed(e,"defaultDateFormat")||s.D.changed(e,"defaultDateLocale")||s.D.changed(e,"defaultDateShortFormat")||s.D.changed(e,"defaultDateSource")||s.D.changed(e,"defaultDateStyle")||s.D.changed(e,"defaultGravatarsStyle")||s.D.changed(e,"defaultTimeFormat")||s.D.changed(e,"sortBranchesBy"))}findBranch(e,t){if(e.remote)return;const{repoPath:i}=e;return this.findNode((t=>t.branch?.ref===e.ref),{allowPaging:!0,maxDepth:4,canTraverse:e=>e instanceof BranchesViewNode||(e instanceof BranchesRepositoryNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}async findCommit(e,t){const{repoPath:i}=e,r=await this.container.git.getCommitBranches(e.repoPath,e.ref,void 0,(0,S.f_)(e)?{commitDate:e.committer.date}:void 0);if(0!==r.length)return this.findNode((t=>t.commit?.ref===e.ref),{allowPaging:!0,maxDepth:5,canTraverse:async t=>t instanceof BranchesViewNode||(t instanceof BranchesRepositoryNode||t instanceof BranchOrTagFolderNode?t.repoPath===i:!!(t instanceof BranchNode&&t.repoPath===i&&r.includes(t.branch.name))&&(await t.loadMore({until:e.ref}),!0)),token:t})}revealBranch(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,m.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,r)=>{const s=await this.findBranch(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s}))}async revealCommit(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,m.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,r)=>{const s=await this.findCommit(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s}))}async revealRepository(e,t){const i=await this.findNode((t=>t instanceof ks.vb&&t.repoPath===e),{maxDepth:1,canTraverse:e=>e instanceof BranchesViewNode||e instanceof ks.vb});return void 0!==i&&await this.reveal(i,t),i}setLayout(e){return s.D.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return s.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return s.D.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return s.D.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"branch")}async setShowBranchPullRequest(e){await s.D.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await s.D.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}}an([(0,Gt.H)((()=>""))],BranchesView.prototype,"revealBranch",1),an([(0,Gt.H)((()=>""))],BranchesView.prototype,"revealCommit",1),an([(0,Gt.H)((()=>""))],BranchesView.prototype,"revealRepository",1);var cn=Object.defineProperty,ln=Object.getOwnPropertyDescriptor,hn=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?ln(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&cn(t,i,o),o};class CommitsRepositoryNode extends ks.vb{async getChildren(){if(null==this.child){const e=await this.repo.getBranch();if(null==e)return this.view.message="No commits could be found.",[];let t;if(this.view.message=void 0,this.view.state.myCommitsOnly){const e=await this.view.container.git.getCurrentUser(this.repo.path);null!=e&&(t=[{name:e.name,email:e.email,username:e.username,id:e.id}])}this.child=new BranchNode(this.uri,this.view,this.splatted?this.parent??this:this,this.repo,e,!0,{expanded:!0,limitCommits:!this.splatted,showComparison:this.view.config.showBranchComparison,showCurrent:!1,showTracking:!0,authors:t})}return this.child.getChildren()}async refresh(e=!1){e?this.child=void 0:this.parent?.triggerChange(!1),await this.ensureSubscription()}async subscribe(){const e=await(this.repo?.getLastFetched())??0,t=ft._j.getLastFetchedUpdateInterval(e);return 0!==e&&t>0?r.Disposable.from(await super.subscribe(),(0,Ht.DH)((()=>{t!==ft._j.getLastFetchedUpdateInterval(e)&&this.resetSubscription(),this.splatted?this.view.triggerNodeChange(this.parent??this):this.view.triggerNodeChange(this)}),t)):super.subscribe()}changed(e){return e.changed(ft.I6.Config,ft.I6.Heads,ft.I6.Index,ft.I6.Remotes,ft.I6.RemoteProviders,ft.I6.Status,ft.I6.Unknown,ft.du.Any)}}hn([(0,Gt.H)(),(0,g.fF)()],CommitsRepositoryNode.prototype,"refresh",1),hn([(0,g.fF)()],CommitsRepositoryNode.prototype,"subscribe",1);class CommitsViewNode extends ks.FZ{async getChildren(){if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No commits could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new CommitsRepositoryNode(dt.YY.fromRepoPath(e.path),this.view,this,e,t,{showBranchAndLastFetched:!0})))}const e=s.D.get("plusFeatures.enabled")&&null==this.view.container.usage.get("graphView:shown")&&null==this.view.container.usage.get("graphWebview:shown")?new Ss.$h(this.view,this,(0,Zi.fA)(u.Gh.ShowGraph,"Show Commit Graph"),"Visualize commits on the Commit Graph ✨",void 0,"Visualize commits on the Commit Graph ✨",new r.ThemeIcon("gitlens-graph")):void 0;if(1===this.children.length){const[t]=this.children,i=await t.repo.getBranch();if(null!=i){const e=await t.repo.getLastFetched()??0,r=i.getTrackingStatus();this.view.description=`${r?`${r} ${u.NE.Dot} `:""}${i.name}${i.rebasing?" (Rebasing)":""}${e?` ${u.NE.Dot} Last fetched ${ft._j.formatLastFetched(e)}`:""}`}return null==e?t.getChildren():[e,...await t.getChildren()]}return null==e?this.children:[e,...this.children]}getTreeItem(){return new r.TreeItem("Commits",r.TreeItemCollapsibleState.Expanded)}}class CommitsView extends ViewBase{configKey="commits";constructor(e){super(e,"commits","Commits","commitsView"),this.disposables.push(e.usage.onDidChange(this.onUsageChanged,this))}onUsageChanged(e){null!=e&&"graphView:shown"!==e.key&&"graphWebview:shown"!==e.key||this.refresh()}get canReveal(){return this.config.reveal||!s.D.get("views.repositories.showCommits")}_state={};get state(){return this._state}getRoot(){return new CommitsViewNode(this)}registerCommands(){return this.container.viewCommands,[sn(this.getQualifiedCommand("copy"),(()=>(0,Zi.P0)(u.Gh.ViewsCopy,this.activeSelection,this.selection)),this),sn(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("branches","status","tags"),this.refresh(!0))),this),sn(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout("auto")),this),sn(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout("list")),this),sn(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout("tree")),this),sn(this.getQualifiedCommand("setMyCommitsOnlyOn"),(()=>this.setMyCommitsOnly(!0)),this),sn(this.getQualifiedCommand("setMyCommitsOnlyOff"),(()=>this.setMyCommitsOnly(!1)),this),sn(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),sn(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),sn(this.getQualifiedCommand("setShowBranchComparisonOn"),(()=>this.setShowBranchComparison(!0)),this),sn(this.getQualifiedCommand("setShowBranchComparisonOff"),(()=>this.setShowBranchComparison(!1)),this),sn(this.getQualifiedCommand("setShowBranchPullRequestOn"),(()=>this.setShowBranchPullRequest(!0)),this),sn(this.getQualifiedCommand("setShowBranchPullRequestOff"),(()=>this.setShowBranchPullRequest(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||s.D.changed(e,"defaultDateFormat")||s.D.changed(e,"defaultDateLocale")||s.D.changed(e,"defaultDateShortFormat")||s.D.changed(e,"defaultDateSource")||s.D.changed(e,"defaultDateStyle")||s.D.changed(e,"defaultGravatarsStyle")||s.D.changed(e,"defaultTimeFormat")||s.D.changed(e,"plusFeatures.enabled"))}onSelectionChanged(e){super.onSelectionChanged(e),this.notifySelections()}onVisibilityChanged(e){super.onVisibilityChanged(e),e.visible&&this.notifySelections()}notifySelections(){const e=this.selection?.[0];null!=e&&((e instanceof Ps.D||e instanceof po.m||e instanceof oo.R)&&this.container.events.fire("commit:selected",{commit:e.commit,interaction:"passive",preserveFocus:!0,preserveVisibility:!0},{source:this.id}),(e instanceof po.m||e instanceof oo.R)&&this.container.events.fire("file:selected",{uri:e.uri,preserveFocus:!0,preserveVisibility:!0},{source:this.id}))}async findCommit(e,t){const{repoPath:i}=e,r=await this.container.git.getBranch(e.repoPath);if(null==r)return;return(await this.container.git.getCommitBranches(e.repoPath,e.ref,r.name,{commitDate:(0,S.f_)(e)?e.committer.date:void 0})).length?this.findNode((t=>t.commit?.ref===e.ref),{allowPaging:!0,maxDepth:2,canTraverse:async t=>{if(t instanceof CommitsViewNode){let i=await(t.getSplattedChild?.());return i instanceof CommitsRepositoryNode&&(i=await(i.getSplattedChild?.()),i instanceof BranchNode&&await i.loadMore({until:e.ref})),!0}if(t instanceof CommitsRepositoryNode&&t.repoPath===i){const i=await(t.getSplattedChild?.());if(i instanceof BranchNode)return await i.loadMore({until:e.ref}),!0}return t instanceof BranchTrackingStatusNode&&t.repoPath===i},token:t}):void 0}async revealCommit(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,m.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,r)=>{const s=await this.findCommit(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s}))}async revealRepository(e,t){const i=await this.findNode((t=>t instanceof ks.vb&&t.repoPath===e),{maxDepth:1,canTraverse:e=>e instanceof CommitsViewNode||e instanceof ks.vb});return void 0!==i&&await this.reveal(i,t),i}setFilesLayout(e){return s.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setMyCommitsOnly(e){(0,Ni.v)("gitlens:views:commits:myCommitsOnly",e),this.state.myCommitsOnly=e,this.refresh(!0)}setShowAvatars(e){return s.D.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return s.D.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"working")}async setShowBranchPullRequest(e){await s.D.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await s.D.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}}hn([(0,Gt.H)((()=>""))],CommitsView.prototype,"revealCommit",1),hn([(0,Gt.H)((()=>""))],CommitsView.prototype,"revealRepository",1);var un=Object.defineProperty,dn=Object.getOwnPropertyDescriptor,pn=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?dn(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&un(t,i,o),o};class ContributorsRepositoryNode extends ks.vb{async getChildren(){return null==this.child&&(this.child=new ContributorsNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}async subscribe(){return r.Disposable.from(await super.subscribe(),(0,lt.cL)((e=>this.child?.updateAvatar(e.email))))}changed(e){return e.changed(ft.I6.Config,ft.I6.Heads,ft.I6.Remotes,ft.I6.Unknown,ft.du.Any)}}pn([(0,g.fF)()],ContributorsRepositoryNode.prototype,"subscribe",1);class ContributorsViewNode extends ks.FZ{async getChildren(){if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No contributors could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new ContributorsRepositoryNode(dt.YY.fromRepoPath(e.path),this.view,this,e,t)))}if(1===this.children.length){const[e]=this.children,t=await e.getChildren();return 0===t.length?(this.view.message="No contributors could be found.",this.view.title="Contributors",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Contributors (${t.length})`,t)}return this.view.title="Contributors",this.children}getTreeItem(){return new r.TreeItem("Contributors",r.TreeItemCollapsibleState.Expanded)}}class ContributorsView extends ViewBase{configKey="contributors";constructor(e){super(e,"contributors","Contributors","contributorsView")}get canReveal(){return this.config.reveal||!s.D.get("views.repositories.showContributors")}getRoot(){return new ContributorsViewNode(this)}registerCommands(){return this.container.viewCommands,[sn(this.getQualifiedCommand("copy"),(()=>(0,Zi.P0)(u.Gh.ViewsCopy,this.activeSelection,this.selection)),this),sn(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("contributors"),this.refresh(!0))),this),sn(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout("auto")),this),sn(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout("list")),this),sn(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout("tree")),this),sn(this.getQualifiedCommand("setShowAllBranchesOn"),(()=>this.setShowAllBranches(!0)),this),sn(this.getQualifiedCommand("setShowAllBranchesOff"),(()=>this.setShowAllBranches(!1)),this),sn(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),sn(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),sn(this.getQualifiedCommand("setShowStatisticsOn"),(()=>this.setShowStatistics(!0)),this),sn(this.getQualifiedCommand("setShowStatisticsOff"),(()=>this.setShowStatistics(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||s.D.changed(e,"defaultDateFormat")||s.D.changed(e,"defaultDateLocale")||s.D.changed(e,"defaultDateShortFormat")||s.D.changed(e,"defaultDateSource")||s.D.changed(e,"defaultDateStyle")||s.D.changed(e,"defaultGravatarsStyle")||s.D.changed(e,"defaultTimeFormat")||s.D.changed(e,"sortContributorsBy"))}findContributor(e,t){const{repoPath:i,username:r,email:s,name:o}=e;return this.findNode((e=>e instanceof ContributorNode&&e.contributor.username===r&&e.contributor.email===s&&e.contributor.name===o),{maxDepth:2,canTraverse:e=>e instanceof ContributorsViewNode||e instanceof ContributorsRepositoryNode&&e.repoPath===i,token:t})}async revealRepository(e,t){const i=await this.findNode((t=>t instanceof ks.vb&&t.repoPath===e),{maxDepth:1,canTraverse:e=>e instanceof ContributorsViewNode||e instanceof ks.vb});return void 0!==i&&await this.reveal(i,t),i}async revealContributor(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing contributor '${e.name}' in the side bar...`,cancellable:!0},(async(i,r)=>{const s=await this.findContributor(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s}))}setFilesLayout(e){return s.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAllBranches(e){return s.D.updateEffective(`views.${this.configKey}.showAllBranches`,e)}setShowAvatars(e){return s.D.updateEffective(`views.${this.configKey}.avatars`,e)}setShowStatistics(e){return s.D.updateEffective(`views.${this.configKey}.showStatistics`,e)}}pn([(0,Gt.H)((()=>""))],ContributorsView.prototype,"revealRepository",1),pn([(0,Gt.H)((()=>""))],ContributorsView.prototype,"revealContributor",1);const mn=" (pinned)";class FileHistoryView extends ViewBase{configKey="fileHistory";_followCursor=!1;_followEditor=!0;constructor(e){super(e,"fileHistory","File History","fileHistoryView"),(0,Ni.v)("gitlens:views:fileHistory:cursorFollowing",this._followCursor),(0,Ni.v)("gitlens:views:fileHistory:editorFollowing",this._followEditor)}get showCollapseAll(){return!1}getRoot(){return this._followCursor?new LineHistoryTrackerNode(this):new FileHistoryTrackerNode(this)}registerCommands(){return this.container.viewCommands,[sn(this.getQualifiedCommand("copy"),(()=>(0,Zi.P0)(u.Gh.ViewsCopy,this.activeSelection,this.selection)),this),sn(this.getQualifiedCommand("refresh"),(()=>this.refresh(!0)),this),sn(this.getQualifiedCommand("changeBase"),(()=>this.changeBase()),this),sn(this.getQualifiedCommand("setCursorFollowingOn"),(()=>this.setCursorFollowing(!0)),this),sn(this.getQualifiedCommand("setCursorFollowingOff"),(()=>this.setCursorFollowing(!1)),this),sn(this.getQualifiedCommand("setEditorFollowingOn"),(()=>this.setEditorFollowing(!0)),this),sn(this.getQualifiedCommand("setEditorFollowingOff"),(()=>this.setEditorFollowing(!1)),this),sn(this.getQualifiedCommand("setRenameFollowingOn"),(()=>this.setRenameFollowing(!0)),this),sn(this.getQualifiedCommand("setRenameFollowingOff"),(()=>this.setRenameFollowing(!1)),this),sn(this.getQualifiedCommand("setShowAllBranchesOn"),(()=>this.setShowAllBranches(!0)),this),sn(this.getQualifiedCommand("setShowAllBranchesOff"),(()=>this.setShowAllBranches(!1)),this),sn(this.getQualifiedCommand("setShowMergeCommitsOn"),(()=>this.setShowMergeCommits(!0)),this),sn(this.getQualifiedCommand("setShowMergeCommitsOff"),(()=>this.setShowMergeCommits(!1)),this),sn(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),sn(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||s.D.changed(e,"defaultDateFormat")||s.D.changed(e,"defaultDateLocale")||s.D.changed(e,"defaultDateShortFormat")||s.D.changed(e,"defaultDateSource")||s.D.changed(e,"defaultDateStyle")||s.D.changed(e,"defaultGravatarsStyle")||s.D.changed(e,"defaultTimeFormat")||s.D.changed(e,"advanced.fileHistoryFollowsRenames")||s.D.changed(e,"advanced.fileHistoryShowAllBranches")||s.D.changed(e,"advanced.fileHistoryShowMergeCommits"))}async showHistoryForUri(e){this.setCursorFollowing(!1);const t=this.ensureRoot(!0);return t instanceof FileHistoryTrackerNode&&(await t.showHistoryForUri(e),this.setEditorFollowing(!1)),this.show()}changeBase(){this.root?.changeBase()}setCursorFollowing(e){const t=!this._followEditor&&this.root?.hasUri?this.root.uri:void 0;this._followCursor=e,(0,Ni.v)("gitlens:views:fileHistory:cursorFollowing",e),this.title=this._followCursor?"Line History":"File History";const i=this.ensureRoot(!0);null!=t&&i.setUri(t),i.setEditorFollowing(this._followEditor),i.ensureSubscription(),this.refresh(!0)}setEditorFollowing(e){const t=this.ensureRoot();t.hasUri&&(this._followEditor=e,(0,Ni.v)("gitlens:views:fileHistory:editorFollowing",e),t.setEditorFollowing(e),this.description?.endsWith(mn)?e&&(this.description=this.description.substr(0,this.description.length-9)):e||null==this.description||(this.description+=mn),e&&(t.ensureSubscription(),this.refresh(!0)))}setRenameFollowing(e){return s.D.updateEffective("advanced.fileHistoryFollowsRenames",e)}setShowAllBranches(e){return s.D.updateEffective("advanced.fileHistoryShowAllBranches",e)}setShowMergeCommits(e){return s.D.updateEffective("advanced.fileHistoryShowMergeCommits",e)}setShowAvatars(e){return s.D.updateEffective(`views.${this.configKey}.avatars`,e)}}const gn=" (pinned)";class LineHistoryView extends ViewBase{configKey="lineHistory";constructor(e){super(e,"lineHistory","Line History","lineHistoryView"),(0,Ni.v)("gitlens:views:lineHistory:editorFollowing",!0)}get showCollapseAll(){return!1}getRoot(){return new LineHistoryTrackerNode(this)}registerCommands(){return this.container.viewCommands,[sn(this.getQualifiedCommand("copy"),(()=>(0,Zi.P0)(u.Gh.ViewsCopy,this.activeSelection,this.selection)),this),sn(this.getQualifiedCommand("refresh"),(()=>this.refresh(!0)),this),sn(this.getQualifiedCommand("changeBase"),(()=>this.changeBase()),this),sn(this.getQualifiedCommand("setEditorFollowingOn"),(()=>this.setEditorFollowing(!0)),this),sn(this.getQualifiedCommand("setEditorFollowingOff"),(()=>this.setEditorFollowing(!1)),this),sn(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),sn(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||s.D.changed(e,"defaultDateFormat")||s.D.changed(e,"defaultDateLocale")||s.D.changed(e,"defaultDateShortFormat")||s.D.changed(e,"defaultDateSource")||s.D.changed(e,"defaultDateStyle")||s.D.changed(e,"defaultGravatarsStyle")||s.D.changed(e,"defaultTimeFormat"))}changeBase(){this.root?.changeBase()}setEditorFollowing(e){const t=this.ensureRoot();t.hasUri&&((0,Ni.v)("gitlens:views:lineHistory:editorFollowing",e),this.root?.setEditorFollowing(e),this.description?.endsWith(gn)?e&&(this.description=this.description.substr(0,this.description.length-9)):e||null==this.description||(this.description+=gn),e&&(t.ensureSubscription(),this.refresh(!0)))}setShowAvatars(e){return s.D.updateEffective(`views.${this.configKey}.avatars`,e)}}var fn=Object.defineProperty,wn=Object.getOwnPropertyDescriptor,vn=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?wn(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&fn(t,i,o),o};class RemotesRepositoryNode extends ks.vb{async getChildren(){return null==this.child&&(this.child=new RemotesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(ft.I6.Config,ft.I6.Remotes,ft.I6.RemoteProviders,ft.I6.Unknown,ft.du.Any)}}class RemotesViewNode extends ks.FZ{async getChildren(){if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No remotes could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new RemotesRepositoryNode(dt.YY.fromRepoPath(e.path),this.view,this,e,t)))}if(1===this.children.length){const[e]=this.children,t=await e.repo.getRemotes();return 0===t.length?(this.view.message="No remotes could be found.",this.view.title="Remotes",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Remotes (${t.length})`,e.getChildren())}return this.view.title="Remotes",this.children}getTreeItem(){return new r.TreeItem("Remotes",r.TreeItemCollapsibleState.Expanded)}}class RemotesView extends ViewBase{configKey="remotes";constructor(e){super(e,"remotes","Remotes","remotesView")}get canReveal(){return this.config.reveal||!s.D.get("views.repositories.showRemotes")}getRoot(){return new RemotesViewNode(this)}registerCommands(){return this.container.viewCommands,[sn(this.getQualifiedCommand("copy"),(()=>(0,Zi.P0)(u.Gh.ViewsCopy,this.activeSelection,this.selection)),this),sn(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("branches","remotes"),this.refresh(!0))),this),sn(this.getQualifiedCommand("setLayoutToList"),(()=>this.setLayout("list")),this),sn(this.getQualifiedCommand("setLayoutToTree"),(()=>this.setLayout("tree")),this),sn(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout("auto")),this),sn(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout("list")),this),sn(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout("tree")),this),sn(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),sn(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),sn(this.getQualifiedCommand("setShowBranchPullRequestOn"),(()=>this.setShowBranchPullRequest(!0)),this),sn(this.getQualifiedCommand("setShowBranchPullRequestOff"),(()=>this.setShowBranchPullRequest(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||s.D.changed(e,"defaultDateFormat")||s.D.changed(e,"defaultDateLocale")||s.D.changed(e,"defaultDateShortFormat")||s.D.changed(e,"defaultDateSource")||s.D.changed(e,"defaultDateStyle")||s.D.changed(e,"defaultGravatarsStyle")||s.D.changed(e,"defaultTimeFormat")||s.D.changed(e,"integrations.enabled")||s.D.changed(e,"sortBranchesBy"))}findBranch(e,t){if(!e.remote)return;const{repoPath:i}=e;return this.findNode((t=>t.branch?.ref===e.ref),{allowPaging:!0,maxDepth:5,canTraverse:t=>t instanceof RemotesViewNode||(t instanceof RemotesRepositoryNode||t instanceof BranchOrTagFolderNode?t.repoPath===i:t instanceof RemoteNode&&(t.repoPath===i&&t.remote.name===(0,f.Lo)(e.name))),token:t})}async findCommit(e,t){const{repoPath:i}=e,r=await this.container.git.getCommitBranches(e.repoPath,e.ref,void 0,(0,S.f_)(e)?{commitDate:e.committer.date,remotes:!0}:{remotes:!0});if(0===r.length)return;const s=r.map((e=>e.split("/",1)[0]));return this.findNode((t=>t.commit?.ref===e.ref),{allowPaging:!0,maxDepth:6,canTraverse:e=>e instanceof RemotesViewNode||(e instanceof RemotesRepositoryNode||e instanceof BranchOrTagFolderNode?e.repoPath===i:e instanceof RemoteNode?e.repoPath===i&&s.includes(e.remote.name):e instanceof BranchNode?e.repoPath===i&&r.includes(e.branch.name):(e instanceof RepositoryNode||e instanceof RemotesNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i),token:t})}findRemote(e,t){const{repoPath:i}=e;return this.findNode((t=>t.remote?.name===e.name),{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof RemotesViewNode||e instanceof RemotesRepositoryNode&&e.repoPath===i,token:t})}revealBranch(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,m.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,r)=>{const s=await this.findBranch(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s}))}async revealCommit(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,m.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,r)=>{const s=await this.findCommit(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s}))}revealRemote(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing remote '${e.name}' in the side bar...`,cancellable:!0},(async(i,r)=>{const s=await this.findRemote(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s}))}async revealRepository(e,t){const i=await this.findNode((t=>t instanceof ks.vb&&t.repoPath===e),{maxDepth:1,canTraverse:e=>e instanceof RemotesViewNode||e instanceof ks.vb});return void 0!==i&&await this.reveal(i,t),i}setLayout(e){return s.D.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return s.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return s.D.updateEffective(`views.${this.configKey}.avatars`,e)}async setShowBranchPullRequest(e){await s.D.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await s.D.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}}vn([(0,Gt.H)((()=>""))],RemotesView.prototype,"revealBranch",1),vn([(0,Gt.H)((()=>""))],RemotesView.prototype,"revealCommit",1),vn([(0,Gt.H)((()=>""))],RemotesView.prototype,"revealRemote",1),vn([(0,Gt.H)((()=>""))],RemotesView.prototype,"revealRepository",1);var yn=Object.defineProperty,bn=Object.getOwnPropertyDescriptor,Cn=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?bn(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&yn(t,i,o),o};class RepositoriesNode extends ks.CF{_children;constructor(e){super(dt.Wj,e)}dispose(){super.dispose(),this.resetChildren()}resetChildren(){if(null!=this._children){for(const e of this._children)"dispose"in e&&e.dispose();this._children=void 0}}getChildren(){if(null==this._children){const e=this.view.container.git.openRepositories;if(0===e.length)return[new Ss.AE(this.view,this,"No repositories could be found.")];this._children=e.map((e=>new RepositoryNode(dt.YY.fromRepoPath(e.path),this.view,this,e)))}return this._children}getTreeItem(){const e="workspaces"===this.view.type,t=e&&null!=this.view.container.workspaces.currentWorkspaceId,i=t&&null!=this.view.container.workspaces.currentWorkspace,s=new r.TreeItem(e?"Current Window":"Repositories",e?r.TreeItemCollapsibleState.Collapsed:r.TreeItemCollapsibleState.Expanded);e&&(s.description=r.workspace.name??r.workspace.workspaceFolders?.[0]?.name??"");let o=ks.Td.Repositories;return e&&(o+="+workspaces"),t&&(o+="+linked"),i&&(o+="+current",s.resourceUri=r.Uri.parse("gitlens-view://workspaces/workspace/current")),s.contextValue=o,s}async refresh(e=!1){if(null==this._children)return;if(e)return this.resetChildren(),await this.unsubscribe(),void this.ensureSubscription();const t=this.view.container.git.openRepositories;if(0===t.length&&(null==this._children||0===this._children.length))return;if(0===t.length)return void(this._children=[new Ss.AE(this.view,this,"No repositories could be found.")]);const i=[];for(const e of t){const t=e.id,r=this._children.find((e=>e.repo.id===t));null!=r?(i.push(r),r.refresh()):i.push(new RepositoryNode(dt.YY.fromRepoPath(e.path),this.view,this,e))}for(const e of this._children)i.includes(e)||e.dispose();this._children=i,this.ensureSubscription()}subscribe(){const e=[this.view.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this)];return this.view.config.autoReveal&&e.push(r.window.onDidChangeActiveTextEditor((0,Ht.Ds)(this.onActiveEditorChanged,500),this)),r.Disposable.from(...e)}etag(){return(0,Ht.NX)(this.view.container.git.etag,this.view.container.subscription.etag)}onActiveEditorChanged(e){if(null!=e&&null!=this._children&&1!==this._children.length)try{const t=e.document.uri,i=this._children.find((e=>e instanceof RepositoryNode&&e.repo.containsUri(t)));if(null==i)return;let r=0===this.view.selection.length?void 0:this.view.selection[0];for(;null!=r;){if(r===i)return;r=r.getParent()}this.view.reveal(i,{expand:!0})}catch(e){Pe.Yd.error(e)}}onRepositoriesChanged(e){this.triggerChange(!0)}}Cn([(0,g.fF)()],RepositoriesNode.prototype,"resetChildren",1),Cn([(0,Gt.H)(),(0,g.fF)()],RepositoriesNode.prototype,"refresh",1),Cn([(0,g.fF)()],RepositoriesNode.prototype,"subscribe",1),Cn([(0,g.fF)({args:!1})],RepositoriesNode.prototype,"onActiveEditorChanged",1),Cn([(0,g.fF)()],RepositoriesNode.prototype,"onRepositoriesChanged",1);var An=Object.defineProperty,kn=Object.getOwnPropertyDescriptor,Pn=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?kn(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&An(t,i,o),o};class RepositoriesView extends ViewBase{configKey="repositories";constructor(e){super(e,"repositories","Repositories","repositoriesView")}_onDidChangeAutoRefresh=new r.EventEmitter;get onDidChangeAutoRefresh(){return this._onDidChangeAutoRefresh.event}get canSelectMany(){return!1}getRoot(){return new RepositoriesNode(this)}registerCommands(){return this.container.viewCommands,[sn(this.getQualifiedCommand("copy"),(()=>(0,Zi.P0)(u.Gh.ViewsCopy,this.activeSelection,this.selection)),this),sn(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("branches","contributors","remotes","stashes","status","tags"),this.refresh(!0))),this),sn(this.getQualifiedCommand("setBranchesLayoutToList"),(()=>this.setBranchesLayout("list")),this),sn(this.getQualifiedCommand("setBranchesLayoutToTree"),(()=>this.setBranchesLayout("tree")),this),sn(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout("auto")),this),sn(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout("list")),this),sn(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout("tree")),this),sn(this.getQualifiedCommand("setAutoRefreshToOn"),(()=>this.setAutoRefresh(s.D.get("views.repositories.autoRefresh"),!0)),this),sn(this.getQualifiedCommand("setAutoRefreshToOff"),(()=>this.setAutoRefresh(s.D.get("views.repositories.autoRefresh"),!1)),this),sn(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),sn(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),sn(this.getQualifiedCommand("setShowBranchComparisonOn"),(()=>this.setShowBranchComparison(!0)),this),sn(this.getQualifiedCommand("setShowBranchComparisonOff"),(()=>this.setShowBranchComparison(!1)),this),sn(this.getQualifiedCommand("setBranchesShowBranchComparisonOn"),(()=>this.setBranchShowBranchComparison(!0)),this),sn(this.getQualifiedCommand("setBranchesShowBranchComparisonOff"),(()=>this.setBranchShowBranchComparison(!1)),this),sn(this.getQualifiedCommand("setShowBranchesOn"),(()=>this.toggleSection("showBranches",!0)),this),sn(this.getQualifiedCommand("setShowBranchesOff"),(()=>this.toggleSection("showBranches",!1)),this),sn(this.getQualifiedCommand("setShowCommitsOn"),(()=>this.toggleSection("showCommits",!0)),this),sn(this.getQualifiedCommand("setShowCommitsOff"),(()=>this.toggleSection("showCommits",!1)),this),sn(this.getQualifiedCommand("setShowContributorsOn"),(()=>this.toggleSection("showContributors",!0)),this),sn(this.getQualifiedCommand("setShowContributorsOff"),(()=>this.toggleSection("showContributors",!1)),this),sn(this.getQualifiedCommand("setShowRemotesOn"),(()=>this.toggleSection("showRemotes",!0)),this),sn(this.getQualifiedCommand("setShowRemotesOff"),(()=>this.toggleSection("showRemotes",!1)),this),sn(this.getQualifiedCommand("setShowStashesOn"),(()=>this.toggleSection("showStashes",!0)),this),sn(this.getQualifiedCommand("setShowStashesOff"),(()=>this.toggleSection("showStashes",!1)),this),sn(this.getQualifiedCommand("setShowTagsOn"),(()=>this.toggleSection("showTags",!0)),this),sn(this.getQualifiedCommand("setShowTagsOff"),(()=>this.toggleSection("showTags",!1)),this),sn(this.getQualifiedCommand("setShowWorktreesOn"),(()=>this.toggleSection("showWorktrees",!0)),this),sn(this.getQualifiedCommand("setShowWorktreesOff"),(()=>this.toggleSection("showWorktrees",!1)),this),sn(this.getQualifiedCommand("setShowUpstreamStatusOn"),(()=>this.toggleSection("showUpstreamStatus",!0)),this),sn(this.getQualifiedCommand("setShowUpstreamStatusOff"),(()=>this.toggleSection("showUpstreamStatus",!1)),this),sn(this.getQualifiedCommand("setShowSectionOff"),(e=>this.toggleSectionByNode(e,!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||s.D.changed(e,"defaultDateFormat")||s.D.changed(e,"defaultDateLocale")||s.D.changed(e,"defaultDateShortFormat")||s.D.changed(e,"defaultDateSource")||s.D.changed(e,"defaultDateStyle")||s.D.changed(e,"defaultGravatarsStyle")||s.D.changed(e,"defaultTimeFormat")||s.D.changed(e,"sortBranchesBy")||s.D.changed(e,"sortContributorsBy")||s.D.changed(e,"sortTagsBy"))}onConfigurationChanged(e){s.D.changed(e,`views.${this.configKey}.autoRefresh`)&&this.setAutoRefresh(s.D.get("views.repositories.autoRefresh")),super.onConfigurationChanged(e)}get autoRefresh(){return this.config.autoRefresh&&this.container.storage.getWorkspace("views:repositories:autoRefresh",!0)}findBranch(e,t){const{repoPath:i}=e;return e.remote?this.findNode((t=>t.branch?.ref===e.ref),{allowPaging:!0,maxDepth:6,canTraverse:t=>t instanceof RepositoriesNode||(t instanceof RemoteNode?t.repoPath===i&&(e.remote&&t.remote.name===(0,f.Lo)(e.name)):(t instanceof RepositoryNode||t instanceof BranchesNode||t instanceof RemotesNode||t instanceof BranchOrTagFolderNode)&&t.repoPath===i),token:t}):this.findNode((t=>t.branch?.ref===e.ref),{allowPaging:!0,maxDepth:5,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof BranchesNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}async findCommit(e,t){const{repoPath:i}=e;let r=await this.container.git.getCommitBranches(e.repoPath,e.ref,void 0,(0,S.f_)(e)?{commitDate:e.committer.date}:void 0);if(0!==r.length)return this.findNode((t=>t.commit?.ref===e.ref),{allowPaging:!0,maxDepth:6,canTraverse:async t=>t instanceof RepositoriesNode||(t instanceof RepositoryNode||t instanceof BranchesNode||t instanceof BranchOrTagFolderNode?t.repoPath===i:!!(t instanceof BranchNode&&t.repoPath===i&&r.includes(t.branch.name))&&(await t.loadMore({until:e.ref}),!0)),token:t});if(r=await this.container.git.getCommitBranches(e.repoPath,e.ref,void 0,(0,S.f_)(e)?{commitDate:e.committer.date,remotes:!0}:{remotes:!0}),0===r.length)return;const s=r.map((e=>e.split("/",1)[0]));return this.findNode((t=>t.commit?.ref===e.ref),{allowPaging:!0,maxDepth:8,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RemoteNode?e.repoPath===i&&s.includes(e.remote.name):e instanceof BranchNode?e.repoPath===i&&r.includes(e.branch.name):(e instanceof RepositoryNode||e instanceof RemotesNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i),token:t})}findContributor(e,t){const{repoPath:i,username:r,email:s,name:o}=e;return this.findNode((e=>e instanceof ContributorNode&&e.contributor.username===r&&e.contributor.email===s&&e.contributor.name===o),{maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof ContributorsNode)&&e.repoPath===i,token:t})}findRemote(e,t){const{repoPath:i}=e;return this.findNode((t=>t.remote?.name===e.name),{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof RemotesNode)&&e.repoPath===i,token:t})}findStash(e,t){const{repoPath:i}=e;return this.findNode((t=>t.commit?.ref===e.ref),{maxDepth:3,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof StashesNode)&&e.repoPath===i,token:t})}findTag(e,t){const{repoPath:i}=e;return this.findNode((t=>t.tag?.ref===e.ref),{allowPaging:!0,maxDepth:5,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof TagsNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}findWorktree(e,t){const{repoPath:i,uri:r}=e,s=r.toString();return this.findNode((t=>t instanceof WorktreeNode&&e.uri.toString()===s),{maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof WorktreesNode)&&e.repoPath===i,token:t})}revealBranch(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,m.Wh)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},(async(i,r)=>{const s=await this.findBranch(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s}))}async revealBranches(e,t){const i=await this.findNode((t=>t instanceof BranchesNode&&t.repoPath===e),{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}async revealCommit(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,m.Wh)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},(async(i,r)=>{const s=await this.findCommit(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s}))}async revealContributor(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing contributor '${e.name} in the Repositories view...`,cancellable:!0},(async(i,r)=>{const s=await this.findContributor(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s}))}revealRemote(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing remote '${e.name}' in the side bar...`,cancellable:!0},(async(i,r)=>{const s=await this.findRemote(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s}))}async revealRepository(e,t){const i=await this.findNode((t=>t instanceof RepositoryNode&&t.repoPath===e),{maxDepth:1,canTraverse:e=>e instanceof RepositoriesNode});return void 0!==i&&await this.reveal(i,t),i}async revealStash(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,m.Wh)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},(async(i,r)=>{const s=await this.findStash(e,r);return void 0!==s&&await this.reveal(s,t),s}))}async revealStashes(e,t){const i=await this.findNode((t=>t instanceof StashesNode&&t.repoPath===e),{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}revealTag(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,m.Wh)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},(async(i,r)=>{const s=await this.findTag(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s}))}async revealTags(e,t){const i=await this.findNode((t=>t instanceof TagsNode&&t.repoPath===e),{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}revealWorktree(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing worktree '${e.name}' in the side bar...`,cancellable:!0},(async(i,r)=>{const s=await this.findWorktree(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s}))}async revealWorktrees(e,t){const i=await this.findNode((t=>t instanceof WorktreesNode&&t.repoPath===e),{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}async setAutoRefresh(e,t){e&&(void 0===t?t=this.container.storage.getWorkspace("views:repositories:autoRefresh",!0):await this.container.storage.storeWorkspace("views:repositories:autoRefresh",t)),(0,Ni.v)("gitlens:views:repositories:autoRefresh",e&&t),this._onDidChangeAutoRefresh.fire()}setBranchesLayout(e){return s.D.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return s.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return s.D.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return s.D.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"working")}setBranchShowBranchComparison(e){return s.D.updateEffective(`views.${this.configKey}.branches.showBranchComparison`,!!e&&"branch")}toggleSection(e,t){return s.D.updateEffective(`views.${this.configKey}.${e}`,t)}toggleSectionByNode(e,t){return e instanceof BranchesNode?s.D.updateEffective(`views.${this.configKey}.showBranches`,t):e instanceof BranchNode?s.D.updateEffective(`views.${this.configKey}.showCommits`,t):e instanceof BranchTrackingStatusNode?s.D.updateEffective(`views.${this.configKey}.showUpstreamStatus`,t):e instanceof CompareBranchNode?this.setShowBranchComparison(t):e instanceof ContributorsNode?s.D.updateEffective(`views.${this.configKey}.showContributors`,t):e instanceof ReflogNode?s.D.updateEffective(`views.${this.configKey}.showIncomingActivity`,t):e instanceof RemotesNode?s.D.updateEffective(`views.${this.configKey}.showRemotes`,t):e instanceof StashesNode?s.D.updateEffective(`views.${this.configKey}.showStashes`,t):e instanceof TagsNode?s.D.updateEffective(`views.${this.configKey}.showTags`,t):e instanceof WorktreesNode?s.D.updateEffective(`views.${this.configKey}.showWorktrees`,t):Promise.resolve()}}Pn([(0,Gt.H)((()=>""))],RepositoriesView.prototype,"revealBranch",1),Pn([(0,Gt.H)((()=>""))],RepositoriesView.prototype,"revealBranches",1),Pn([(0,Gt.H)((()=>""))],RepositoriesView.prototype,"revealCommit",1),Pn([(0,Gt.H)((()=>""))],RepositoriesView.prototype,"revealContributor",1),Pn([(0,Gt.H)((()=>""))],RepositoriesView.prototype,"revealRemote",1),Pn([(0,Gt.H)((()=>""))],RepositoriesView.prototype,"revealRepository",1),Pn([(0,Gt.H)((()=>""))],RepositoriesView.prototype,"revealStash",1),Pn([(0,Gt.H)((()=>""))],RepositoriesView.prototype,"revealStashes",1),Pn([(0,Gt.H)((()=>""))],RepositoriesView.prototype,"revealTag",1),Pn([(0,Gt.H)((()=>""))],RepositoriesView.prototype,"revealTags",1),Pn([(0,Gt.H)((()=>""))],RepositoriesView.prototype,"revealWorktree",1),Pn([(0,Gt.H)((()=>""))],RepositoriesView.prototype,"revealWorktrees",1);class ComparePickerNode extends ks.Re{constructor(e,t,i){super(dt.Wj,e,t),this.selectedRef=i}order=Date.now();getChildren(){return[]}getTreeItem(){const e=this.selectedRef,t=e?.repoPath;let i,s;if(void 0!==t&&this.view.container.git.repositoryCount>1){const e=this.view.container.git.getRepository(t);i=e?.formattedName??t}return null==e?(s=new r.TreeItem("Compare <branch, tag, or ref> with <branch, tag, or ref>",r.TreeItemCollapsibleState.None),s.contextValue=ks.Td.ComparePicker,s.description=i,s.tooltip=`Click to select or enter a reference for compare${u.NE.Ellipsis}`,s.command={title:`Compare${u.NE.Ellipsis}`,command:this.view.getQualifiedCommand("selectForCompare")}):(s=new r.TreeItem(`Compare ${e.label} with <branch, tag, or ref>`,r.TreeItemCollapsibleState.None),s.contextValue=ks.Td.ComparePickerWithRef,s.description=i,s.tooltip=`Click to compare ${e.label} with${u.NE.Ellipsis}`,s.command={title:`Compare ${e.label} with${u.NE.Ellipsis}`,command:this.view.getQualifiedCommand("compareWithSelected")}),s}}var Sn=i(4655),Dn=Object.defineProperty,Rn=Object.getOwnPropertyDescriptor,$n=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Rn(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Dn(t,i,o),o};class SearchAndCompareViewNode extends ks.Re{splatted=!0;comparePicker;constructor(e){super(dt.Wj,e)}_children;get children(){if(null==this._children){this._children=[];const e=this.view.getStoredNodes();0!==e.length&&this._children.push(...e)}return this._children}getChildren(){const e=this.children;return 0===e.length?[]:e.sort(((e,t)=>t.order-e.order))}getTreeItem(){this.splatted=!1;const e=new r.TreeItem("SearchAndCompare",r.TreeItemCollapsibleState.Expanded);return e.contextValue=ks.Td.SearchAndCompare,e}addOrReplace(e){const t=this.children;t.includes(e)||(t.push(e),this.view.triggerNodeChange())}async clear(){0!==this.children.length&&(this.removeComparePicker(!0),this._children.length=0,await this.view.clearStorage(),this.view.triggerNodeChange())}dismiss(e){if(e===this.comparePicker)return void this.removeComparePicker();(e instanceof xs.fc||e instanceof Sn.V)&&e.dismiss();const t=this.children;if(0===t.length)return;const i=t.indexOf(e);-1!==i&&(t.splice(i,1),this.view.triggerNodeChange())}async refresh(e=!1){const t=this.children;if(0===t.length)return;const i=[...(0,A.DZ)(t,(t=>{const i=t.refresh?.(e);return(0,Vt.tI)(i)?i:void 0}))];await Promise.allSettled(i)}async compareWithSelected(e,t){const i=this.comparePicker?.selectedRef;if(null!=i){if(null==e)e=i.repoPath;else if(e!==i.repoPath)return void this.selectForCompare(e,t);if(null==t){const r=await(0,Ts.V)(e,`Compare ${this.getRefName(i.ref)} with`,"Choose a reference to compare with",{allowEnteringRefs:!0,picked:"string"==typeof i.ref?i.ref:i.ref.ref,include:Ts.H.BranchesAndTags|Ts.H.HEAD,sort:{branches:{current:!0}}});if(null==r)return void(null!=this.comparePicker&&(await this.view.show(),await this.view.reveal(this.comparePicker,{focus:!0,select:!0})));t=r.ref}this.removeComparePicker(),await this.view.compare(e,i.ref,t)}}async selectForCompare(e,t,i){if(null==e&&(e=(await(0,Lr.vJ)("Compare"))?.path),null==e)return;this.removeComparePicker(!0);let r,s=i?.prompt??!1;if(null==t){const i=await(0,Ts.V)(e,"Compare","Choose a reference to compare",{allowEnteringRefs:{ranges:!0},include:Ts.H.BranchesAndTags|Ts.H.HEAD|Ts.H.WorkingTree,sort:{branches:{current:!0},tags:{}}});if(null==i)return void await this.triggerChange();if(t=i.ref,(0,m.yk)(t)){const e=(0,m.t6)(t);null!=e&&(t=e.ref1||"HEAD",r=e.ref2||"HEAD")}s=!0}this.comparePicker=new ComparePickerNode(this.view,this,{label:this.getRefName(t),repoPath:e,ref:t}),this.children.unshift(this.comparePicker),(0,Ni.v)("gitlens:views:canCompare",!0),await this.triggerChange(),await this.view.reveal(this.comparePicker,{focus:!1,select:!0}),s&&await this.compareWithSelected(e,r)}getRefName(e){return"string"==typeof e?(0,m.zL)(e,{strings:{working:"Working Tree"}}):e.label??(0,m.zL)(e.ref)}removeComparePicker(e=!1){if((0,Ni.v)("gitlens:views:canCompare",!1),null!=this.comparePicker){const t=this.children,i=t.indexOf(this.comparePicker);-1!==i&&(t.splice(i,1),e||this.triggerChange()),this.comparePicker=void 0}}}$n([(0,g.cM)()],SearchAndCompareViewNode.prototype,"clear",1),$n([(0,g.cM)({args:{0:e=>e.toString()}})],SearchAndCompareViewNode.prototype,"dismiss",1),$n([(0,Gt.H)(),(0,g.fF)()],SearchAndCompareViewNode.prototype,"refresh",1);class SearchAndCompareView extends ViewBase{configKey="searchAndCompare";constructor(e){super(e,"searchAndCompare","Search & Compare","searchAndCompareView")}getRoot(){return new SearchAndCompareViewNode(this)}registerCommands(){return this.container.viewCommands,[sn(this.getQualifiedCommand("clear"),(()=>{this.clear()}),this),sn(this.getQualifiedCommand("copy"),(()=>(0,Zi.P0)(u.Gh.ViewsCopy,this.activeSelection,this.selection)),this),sn(this.getQualifiedCommand("refresh"),(()=>this.refresh(!0)),this),sn(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout("auto")),this),sn(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout("list")),this),sn(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout("tree")),this),sn(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),sn(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),sn(this.getQualifiedCommand("swapComparison"),this.swapComparison,this),sn(this.getQualifiedCommand("selectForCompare"),(()=>this.selectForCompare())),sn(this.getQualifiedCommand("compareWithSelected"),this.compareWithSelected,this),sn(this.getQualifiedCommand("setFilesFilterOnLeft"),(e=>this.setFilesFilter(e,Os.W.Left)),this),sn(this.getQualifiedCommand("setFilesFilterOnRight"),(e=>this.setFilesFilter(e,Os.W.Right)),this),sn(this.getQualifiedCommand("setFilesFilterOff"),(e=>this.setFilesFilter(e,void 0)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||s.D.changed(e,"defaultDateFormat")||s.D.changed(e,"defaultDateLocale")||s.D.changed(e,"defaultDateShortFormat")||s.D.changed(e,"defaultDateSource")||s.D.changed(e,"defaultDateStyle")||s.D.changed(e,"defaultGravatarsStyle")||s.D.changed(e,"defaultTimeFormat"))}clear(){return this.root?.clear()}dismissNode(e){null!=this.root&&(e instanceof ComparePickerNode||e instanceof xs.fc||e instanceof Sn.V)&&this.root.dismiss(e)}compare(e,t,i){return this.addResults(new xs.fc(this,this.ensureRoot(),e,"string"==typeof t?{ref:t}:t,"string"==typeof i?{ref:i}:i))}compareWithSelected(e,t){this.ensureRoot().compareWithSelected(e,t)}selectForCompare(e,t,i){this.ensureRoot().selectForCompare(e,t,i)}async search(e,t,{label:i,reveal:r},s,o){this.visible||await this.show();const n={label:`Search results ${"string"==typeof i?i:i.label}`,queryLabel:i};null==o?await this.addResults(new Sn.V(this,this.root,e,t,n,s),r):await o.edit({pattern:t,labels:n,log:s})}getStoredNodes(){const e=this.container.storage.getWorkspace("views:searchAndCompare:pinned");if(null==e)return[];const t=this.ensureRoot();return Object.entries(e).sort((([,e],[,t])=>(t.timestamp??0)-(e.timestamp??0))).map((([,e])=>"comparison"===e.type?((0,xs.k7)(this,e.checkedFiles),new xs.fc(this,t,e.path,{label:e.ref1.label,ref:e.ref1.ref??e.ref1.name??e.ref1.sha},{label:e.ref2.label,ref:e.ref2.ref??e.ref2.name??e.ref2.sha},e.timestamp)):new Sn.V(this,t,e.path,(0,Mt.uP)(e.search),e.labels,void 0,e.timestamp)))}clearStorage(){return this.container.storage.deleteWorkspace("views:searchAndCompare:pinned")}async updateStorage(e,t,i=!1){let r=this.container.storage.getWorkspace("views:searchAndCompare:pinned");r=(0,Tr.iC)(r,e,t),await this.container.storage.storeWorkspace("views:searchAndCompare:pinned",r),i||this.triggerNodeChange(this.ensureRoot())}async revealRepository(e,t){const i=await this.findNode((t=>t instanceof ks.vb&&t.repoPath===e),{maxDepth:1,canTraverse:e=>e instanceof SearchAndCompareViewNode||e instanceof ks.vb});return void 0!==i&&await this.reveal(i,t),i}async addResults(e,t={expand:!0,focus:!0,select:!0}){this.visible||await this.show();this.ensureRoot().addOrReplace(e),queueMicrotask((()=>this.reveal(e,t)))}setFilesLayout(e){return s.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return s.D.updateEffective(`views.${this.configKey}.avatars`,e)}setFilesFilter(e,t){e instanceof Os.V&&(e.filter=t)}swapComparison(e){if(e instanceof xs.fc)return e.swap()}}$n([(0,Gt.H)((()=>""))],SearchAndCompareView.prototype,"revealRepository",1);var _n=Object.defineProperty,Fn=Object.getOwnPropertyDescriptor,Tn=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Fn(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&_n(t,i,o),o};class StashesRepositoryNode extends ks.vb{async getChildren(){return null==this.child&&(this.child=new StashesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(ft.I6.Stash,ft.I6.Unknown,ft.du.Any)}}class StashesViewNode extends ks.FZ{async getChildren(){if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No stashes could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new StashesRepositoryNode(dt.YY.fromRepoPath(e.path),this.view,this,e,t)))}if(1===this.children.length){const[e]=this.children,t=await e.repo.getStash();return null==t||0===t.commits.size?(this.view.message="No stashes could be found.",this.view.title="Stashes",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Stashes (${t.commits.size})`,e.getChildren())}return this.view.title="Stashes",this.children}getTreeItem(){return new r.TreeItem("Stashes",r.TreeItemCollapsibleState.Expanded)}}class StashesView extends ViewBase{configKey="stashes";constructor(e){super(e,"stashes","Stashes","stashesView")}get canReveal(){return this.config.reveal||!s.D.get("views.repositories.showStashes")}getRoot(){return new StashesViewNode(this)}registerCommands(){return this.container.viewCommands,[sn(this.getQualifiedCommand("copy"),(()=>(0,Zi.P0)(u.Gh.ViewsCopy,this.activeSelection,this.selection)),this),sn(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("stashes"),this.refresh(!0))),this),sn(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout("auto")),this),sn(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout("list")),this),sn(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout("tree")),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||s.D.changed(e,"defaultDateFormat")||s.D.changed(e,"defaultDateLocale")||s.D.changed(e,"defaultDateShortFormat")||s.D.changed(e,"defaultDateSource")||s.D.changed(e,"defaultDateStyle")||s.D.changed(e,"defaultGravatarsStyle")||s.D.changed(e,"defaultTimeFormat"))}onSelectionChanged(e){super.onSelectionChanged(e),this.notifySelections()}onVisibilityChanged(e){super.onVisibilityChanged(e),e.visible&&this.notifySelections()}notifySelections(){const e=this.selection?.[0];null!=e&&((e instanceof Eo.i||e instanceof Xo.y)&&this.container.events.fire("commit:selected",{commit:e.commit,interaction:"passive",preserveFocus:!0,preserveVisibility:!0},{source:this.id}),e instanceof Xo.y&&this.container.events.fire("file:selected",{uri:e.uri,preserveFocus:!0,preserveVisibility:!0},{source:this.id}))}findStash(e,t){const{repoPath:i}=e;return this.findNode((t=>t.commit?.ref===e.ref),{maxDepth:2,canTraverse:e=>e instanceof StashesViewNode||e instanceof StashesRepositoryNode&&e.repoPath===i,token:t})}async revealRepository(e,t){const i=await this.findNode((t=>t instanceof ks.vb&&t.repoPath===e),{maxDepth:1,canTraverse:e=>e instanceof StashesViewNode||e instanceof ks.vb});return void 0!==i&&await this.reveal(i,t),i}async revealStash(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,m.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,r)=>{const s=await this.findStash(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s}))}setFilesLayout(e){return s.D.updateEffective(`views.${this.configKey}.files.layout`,e)}}Tn([(0,Gt.H)((()=>""))],StashesView.prototype,"revealRepository",1),Tn([(0,Gt.H)((()=>""))],StashesView.prototype,"revealStash",1);var xn=Object.defineProperty,In=Object.getOwnPropertyDescriptor,On=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?In(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&xn(t,i,o),o};class TagsRepositoryNode extends ks.vb{async getChildren(){return null==this.child&&(this.child=new TagsNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(ft.I6.Tags,ft.I6.Unknown,ft.du.Any)}}class TagsViewNode extends ks.FZ{async getChildren(){if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No tags could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new TagsRepositoryNode(dt.YY.fromRepoPath(e.path),this.view,this,e,t)))}if(1===this.children.length){const[e]=this.children,t=await e.repo.getTags();return 0===t.values.length?(this.view.message="No tags could be found.",this.view.title="Tags",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Tags (${t.values.length})`,e.getChildren())}return this.view.title="Tags",this.children}getTreeItem(){return new r.TreeItem("Tags",r.TreeItemCollapsibleState.Expanded)}}class TagsView extends ViewBase{configKey="tags";constructor(e){super(e,"tags","Tags","tagsView")}get canReveal(){return this.config.reveal||!s.D.get("views.repositories.showTags")}getRoot(){return new TagsViewNode(this)}registerCommands(){return this.container.viewCommands,[sn(this.getQualifiedCommand("copy"),(()=>(0,Zi.P0)(u.Gh.ViewsCopy,this.activeSelection,this.selection)),this),sn(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("tags"),this.refresh(!0))),this),sn(this.getQualifiedCommand("setLayoutToList"),(()=>this.setLayout("list")),this),sn(this.getQualifiedCommand("setLayoutToTree"),(()=>this.setLayout("tree")),this),sn(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout("auto")),this),sn(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout("list")),this),sn(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout("tree")),this),sn(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),sn(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||s.D.changed(e,"defaultDateFormat")||s.D.changed(e,"defaultDateLocale")||s.D.changed(e,"defaultDateShortFormat")||s.D.changed(e,"defaultDateSource")||s.D.changed(e,"defaultDateStyle")||s.D.changed(e,"defaultGravatarsStyle")||s.D.changed(e,"defaultTimeFormat")||s.D.changed(e,"sortTagsBy"))}findTag(e,t){const{repoPath:i}=e;return this.findNode((t=>t.tag?.ref===e.ref),{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof TagsViewNode||(e instanceof TagsRepositoryNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}async revealRepository(e,t){const i=await this.findNode((t=>t instanceof ks.vb&&t.repoPath===e),{maxDepth:1,canTraverse:e=>e instanceof TagsViewNode||e instanceof ks.vb});return void 0!==i&&await this.reveal(i,t),i}revealTag(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,m.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,r)=>{const s=await this.findTag(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s}))}setLayout(e){return s.D.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return s.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return s.D.updateEffective(`views.${this.configKey}.avatars`,e)}}On([(0,Gt.H)((()=>""))],TagsView.prototype,"revealRepository",1),On([(0,Gt.H)((()=>""))],TagsView.prototype,"revealTag",1);var Bn=i(4398);class ViewFileDecorationProvider{_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}disposable;constructor(){this.disposable=r.Disposable.from(r.window.registerFileDecorationProvider({provideFileDecoration:(e,t)=>{if("gitlens-view"===e.scheme)switch(e.authority){case"branch":return this.provideBranchCurrentDecoration(e,t);case"remote":return this.provideRemoteDefaultDecoration(e,t);case"status":return this.provideStatusDecoration(e,t);case"workspaces":return this.provideWorkspaceDecoration(e,t);default:return}}}),r.window.registerFileDecorationProvider(this))}dispose(){this.disposable.dispose()}provideWorkspaceDecoration(e,t){const[,i,s]=e.path.split("/");if("repository"===i){if("open"===s)return{badge:"●",color:new r.ThemeColor("gitlens.decorations.workspaceRepoOpenForegroundColor"),tooltip:""};if("missing"===s)return{badge:"?",color:new r.ThemeColor("gitlens.decorations.workspaceRepoMissingForegroundColor"),tooltip:""}}if("workspace"===i&&"current"===s)return{badge:"●",color:new r.ThemeColor("gitlens.decorations.workspaceCurrentForegroundColor"),tooltip:""}}provideFileDecoration(e,t){if(e.scheme===u.sN.Git){const t=(0,Bn.h)(e);null!=t?.decoration&&(e=r.Uri.parse(t?.decoration))}if("gitlens-view"===e.scheme)switch(e.authority){case"branch":return this.provideBranchStatusDecoration(e,t);case"commit-file":return this.provideCommitFileStatusDecoration(e,t)}}provideCommitFileStatusDecoration(e,t){const[,,i]=e.path.split("/");switch(i){case"!":return{badge:"I",color:new r.ThemeColor("gitlens.decorations.ignoredForegroundColor"),tooltip:"Ignored"};case"?":return{badge:"U",color:new r.ThemeColor("gitlens.decorations.untrackedForegroundColor"),tooltip:"Untracked"};case"A":return{badge:"A",color:new r.ThemeColor("gitlens.decorations.addedForegroundColor"),tooltip:"Added"};case"C":return{badge:"C",color:new r.ThemeColor("gitlens.decorations.copiedForegroundColor"),tooltip:"Copied"};case"D":return{badge:"D",color:new r.ThemeColor("gitlens.decorations.deletedForegroundColor"),tooltip:"Deleted"};case"M":return{badge:"M",tooltip:"Modified"};case"R":return{badge:"R",color:new r.ThemeColor("gitlens.decorations.renamedForegroundColor"),tooltip:"Renamed"};default:return}}provideBranchStatusDecoration(e,t){const[,,i]=e.path.split("/");switch(i){case"ahead":return{badge:"▲",color:new r.ThemeColor("gitlens.decorations.branchAheadForegroundColor"),tooltip:"Ahead"};case"behind":return{badge:"▼",color:new r.ThemeColor("gitlens.decorations.branchBehindForegroundColor"),tooltip:"Behind"};case"diverged":return{badge:"▼▲",color:new r.ThemeColor("gitlens.decorations.branchDivergedForegroundColor"),tooltip:"Diverged"};case"missingUpstream":return{badge:"!",color:new r.ThemeColor("gitlens.decorations.branchMissingUpstreamForegroundColor"),tooltip:"Missing Upstream"};case"upToDate":return{badge:"",color:new r.ThemeColor("gitlens.decorations.branchUpToDateForegroundColor"),tooltip:"Up to Date"};case"unpublished":return{badge:"▲+",color:new r.ThemeColor("gitlens.decorations.branchUnpublishedForegroundColor"),tooltip:"Unpublished"};default:return}}provideBranchCurrentDecoration(e,t){const[,,i,s]=e.path.split("/");if(!s)return;let o;switch(i){case"ahead":o=new r.ThemeColor("gitlens.decorations.branchAheadForegroundColor");break;case"behind":o=new r.ThemeColor("gitlens.decorations.branchBehindForegroundColor");break;case"diverged":o=new r.ThemeColor("gitlens.decorations.branchDivergedForegroundColor");break;case"upToDate":o=new r.ThemeColor("gitlens.decorations.branchUpToDateForegroundColor");break;case"unpublished":o=new r.ThemeColor("gitlens.decorations.branchUnpublishedForegroundColor")}return{badge:u.NE.Check,color:o,tooltip:"Current Branch"}}provideRemoteDefaultDecoration(e,t){const[,i]=e.path.split("/");if(i)return{badge:u.NE.Check,tooltip:"Default Remote"}}provideStatusDecoration(e,t){const[,i,s]=e.path.split("/");if("rebasing"===i)return s?{badge:"!",color:new r.ThemeColor("gitlens.decorations.statusMergingOrRebasingConflictForegroundColor")}:{color:new r.ThemeColor("gitlens.decorations.statusMergingOrRebasingForegroundColor")}}}class WorkspaceMissingRepositoryNode extends ks.Re{constructor(e,t,i,r){super(dt.Wj,e,t),this.workspace=i,this.wsRepositoryDescriptor=r,this.updateContext({wsRepositoryDescriptor:r}),this._uniqueId=(0,ks.tO)("missing-workspace-repository",this.context)}get id(){return this._uniqueId}toClipboard(){return this.name}get name(){return this.wsRepositoryDescriptor.name}get workspaceId(){return this.wsRepositoryDescriptor.workspaceId}getChildren(){return[]}getTreeItem(){const e=new r.TreeItem(this.name,r.TreeItemCollapsibleState.None);return e.id=this.id,e.description="missing",e.tooltip=new r.MarkdownString(`${this.name}\n\nRepository could not be found`),e.contextValue=ks.Td.WorkspaceMissingRepository,e.iconPath=new r.ThemeIcon("question",new r.ThemeColor("gitlens.decorations.workspaceRepoMissingForegroundColor")),e.resourceUri=r.Uri.parse("gitlens-view://workspaces/repository/missing"),e}}var En=Object.defineProperty,Wn=Object.getOwnPropertyDescriptor,Nn=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Wn(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&En(t,i,o),o};class WorkspaceNode extends ks.CF{constructor(e,t,i,r){super(e,t,i),this.parent=i,this.workspace=r,this.updateContext({workspace:r}),this._uniqueId=(0,ks.tO)("workspace",this.context)}dispose(){super.dispose(),this.resetChildren()}resetChildren(){if(null!=this._children){for(const e of this._children)"dispose"in e&&e.dispose();this._children=void 0}}get id(){return this._uniqueId}toClipboard(){return this.workspace.name}_children;async getChildren(){if(null==this._children){this._children=[];try{const e=await this.workspace.getRepositoryDescriptors();if(null==e||0===e.length)return this._children.push(new Ss.$h(this.view,this,(0,Zi.fA)("gitlens.views.workspaces.addRepos","Add Repositories...",this),"No repositories")),this._children;const t=await this.workspace.getRepositoriesByName({force:!0});for(const i of e){const e=t.get(i.name)?.repository;e?this._children.push(new RepositoryNode(dt.YY.fromRepoPath(e.path),this.view,this,e,this.getNewContext({wsRepositoryDescriptor:i}))):this._children.push(new WorkspaceMissingRepositoryNode(this.view,this,this.workspace,i))}}catch(e){return[new Ss.AE(this.view,this,"Failed to load repositories")]}}return this._children}async getTreeItem(){const e=new r.TreeItem(this.workspace.name,r.TreeItemCollapsibleState.Collapsed),t="cloud"===this.workspace.type;let i=`${ks.Td.Workspace}`;e.resourceUri=void 0;const s=[];return i+=t?"+cloud":"+local",this.workspace.current&&(i+="+current",s.push("current"),e.resourceUri=r.Uri.parse("gitlens-view://workspaces/workspace/current")),null!=this.workspace.localPath&&(i+="+hasPath"),0===(await this.workspace.getRepositoryDescriptors())?.length&&(i+="+empty"),e.id=this.id,e.contextValue=i,e.iconPath=new r.ThemeIcon("cloud"==this.workspace.type?"cloud":"folder"),e.tooltip=`${this.workspace.name}\n${t?"Cloud Workspace "+(this.workspace.shared?"(Shared)":""):"Local Workspace"}${t&&null!=this.workspace.provider?`\nProvider: ${this.workspace.provider}`:""}`,t&&null!=this.workspace.organizationId&&s.push("shared"),e.description=s.join(", "),e}refresh(e=!1){null!=this._children&&e&&this.resetChildren()}etag(){return this.view.container.git.etag}subscribe(){return r.Disposable.from(this.view.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this))}onRepositoriesChanged(e){this.triggerChange(!0)}}Nn([(0,Gt.H)(),(0,g.fF)()],WorkspaceNode.prototype,"refresh",1),Nn([(0,g.fF)()],WorkspaceNode.prototype,"subscribe",1);var Mn=Object.defineProperty,Un=Object.getOwnPropertyDescriptor;class WorkspacesViewNode extends ks.Re{_children;async getChildren(){if(null==this._children){const e=[],{cloudWorkspaces:t,cloudWorkspaceInfo:i,localWorkspaces:r,localWorkspaceInfo:s}=await this.view.container.workspaces.getWorkspaces();if(t.length||r.length){e.push(new RepositoriesNode(this.view));for(const i of t)e.push(new WorkspaceNode(this.uri,this.view,this,i));null!=i&&e.push(new Ss.AE(this.view,this,i));for(const t of r)e.push(new WorkspaceNode(this.uri,this.view,this,t));0===t.length&&null==i&&e.push(new Ss.AE(this.view,this,"No cloud workspaces found.")),null!=s&&e.push(new Ss.AE(this.view,this,s))}this._children=e}return this._children}getTreeItem(){return new r.TreeItem("Workspaces",r.TreeItemCollapsibleState.Expanded)}refresh(){if(null!=this._children){if(this._children.length)for(const e of this._children)"dispose"in e&&e.dispose();this._children=void 0}}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Un(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&Mn(t,i,o)})([(0,Gt.H)(),(0,g.fF)()],WorkspacesViewNode.prototype,"refresh",1);class WorkspacesView extends ViewBase{configKey="repositories";_disposable;constructor(e){super(e,"workspaces","Workspaces","workspaceView"),this.description="PREVIEW  ☁️",this.disposables.push(e.workspaces.onDidResetWorkspaces((()=>{this.refresh(!0)})))}dispose(){this._disposable?.dispose(),super.dispose()}get canSelectMany(){return!1}getRoot(){return new WorkspacesViewNode(dt.Wj,this)}async show(e){if(await(0,xr.C)())return super.show(e)}async findWorkspaceNode(e,t){return this.findNode((t=>t.workspace?.id===e),{allowPaging:!1,maxDepth:2,canTraverse:e=>e instanceof WorkspacesViewNode,token:t})}async revealWorkspaceNode(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing workspace ${e} in the side bar...`,cancellable:!0},(async(i,r)=>{const s=await this.findWorkspaceNode(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s}))}registerCommands(){return this.container.viewCommands,[sn(this.getQualifiedCommand("info"),(()=>r.env.openExternal(r.Uri.parse("https://help.gitkraken.com/gitlens/side-bar/#workspaces-☁%ef%b8%8f"))),this),sn(this.getQualifiedCommand("copy"),(()=>(0,Zi.P0)(u.Gh.ViewsCopy,this.activeSelection,this.selection)),this),sn(this.getQualifiedCommand("refresh"),(()=>{this.container.workspaces.resetWorkspaces()}),this),sn(this.getQualifiedCommand("addRepos"),(async e=>{await this.container.workspaces.addCloudWorkspaceRepos(e.workspace.id),e.getParent()?.triggerChange(!0)})),sn(this.getQualifiedCommand("addReposFromLinked"),(async e=>{await this.container.workspaces.addMissingCurrentWorkspaceRepos({force:!0}),e.getParent()?.triggerChange(!0)})),sn(this.getQualifiedCommand("convert"),(async e=>{const t=[];for(const i of e.getChildren())i instanceof RepositoryNode&&t.push(i.repo);0!==t.length&&(await this.container.workspaces.createCloudWorkspace({repos:t}),this.ensureRoot().triggerChange(!0))}),this),sn(this.getQualifiedCommand("create"),(async()=>{await this.container.workspaces.createCloudWorkspace(),this.ensureRoot().triggerChange(!0)}),this),sn(this.getQualifiedCommand("createLocal"),(async e=>{await this.container.workspaces.saveAsCodeWorkspaceFile(e.workspace.id),this.ensureRoot().triggerChange(!0)}),this),sn(this.getQualifiedCommand("openLocal"),(async e=>{await this.container.workspaces.openCodeWorkspaceFile(e.workspace.id,{location:"currentWindow"}),this.ensureRoot().triggerChange(!0)}),this),sn(this.getQualifiedCommand("openLocalNewWindow"),(async e=>{await this.container.workspaces.openCodeWorkspaceFile(e.workspace.id,{location:"newWindow"})}),this),sn(this.getQualifiedCommand("changeAutoAddSetting"),(async()=>{await this.container.workspaces.chooseCodeWorkspaceAutoAddSetting({current:!0})}),this),sn(this.getQualifiedCommand("delete"),(async e=>{await this.container.workspaces.deleteCloudWorkspace(e.workspace.id),e.getParent()?.triggerChange(!0)}),this),sn(this.getQualifiedCommand("locateAllRepos"),(async e=>{"cloud"===e.workspace.type&&(await r.window.withProgress({location:r.ProgressLocation.Notification,title:`Locating Repositories for '${e.workspace.name}'...`,cancellable:!0},((t,i)=>this.container.workspaces.locateAllCloudWorkspaceRepos(e.workspace.id,i))),e.triggerChange(!0))}),this),sn(this.getQualifiedCommand("repo.locate"),(async e=>{const t=e.wsRepositoryDescriptor;null!=t&&null!=e.workspace?.id&&(await this.container.workspaces.locateWorkspaceRepo(e.workspace.id,t),e.getParent()?.triggerChange(!0))}),this),sn(this.getQualifiedCommand("repo.openInNewWindow"),(e=>{const t=e.getParent();null!=t&&t instanceof WorkspaceNode&&(0,Re.ic)(e.repo.uri,{location:"newWindow"})}),this),sn(this.getQualifiedCommand("repo.open"),(e=>{const t=e.getParent();null!=t&&t instanceof WorkspaceNode&&(0,Re.ic)(e.repo.uri,{location:"currentWindow"})}),this),sn(this.getQualifiedCommand("repo.addToWindow"),(e=>{const t=e.getParent();null!=t&&t instanceof WorkspaceNode&&(0,Re.ic)(e.repo.uri,{location:"addToWorkspace"})}),this),sn(this.getQualifiedCommand("repo.remove"),(async e=>{const t=e.wsRepositoryDescriptor;null!=t?.id&&null!=e.workspace?.id&&(await this.container.workspaces.removeCloudWorkspaceRepo(e.workspace.id,t),e.getParent()?.getParent()?.triggerChange(!0))}))]}}var Ln=Object.defineProperty,Gn=Object.getOwnPropertyDescriptor,Hn=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Gn(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Ln(t,i,o),o};class WorktreesRepositoryNode extends ks.vb{getChildren(){return null==this.child&&(this.child=new WorktreesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(ft.I6.Config,ft.I6.Worktrees,ft.I6.Unknown,ft.du.Any)}}class WorktreesViewNode extends ks.FZ{async getChildren(){if(!1===(await this.view.container.git.access(ut.x.Worktrees)).allowed)return[];if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No worktrees could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new WorktreesRepositoryNode(dt.YY.fromRepoPath(e.path),this.view,this,e,t)))}if(1===this.children.length){const[e]=this.children,t=await e.getChildren();return t.length<=1?(this.view.message=void 0,this.view.title="Worktrees",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Worktrees (${t.length})`,t)}return this.view.title="Worktrees",this.children}getTreeItem(){return new r.TreeItem("Worktrees",r.TreeItemCollapsibleState.Expanded)}}class WorktreesView extends ViewBase{configKey="worktrees";constructor(e){super(e,"worktrees","Worktrees","workspaceView"),this.disposables.push(r.window.registerFileDecorationProvider({provideFileDecoration:(e,t)=>{if("gitlens-view"!==e.scheme||"worktree"!==e.authority)return;const[,i]=e.path.split("/");switch(i){case"changes":return{badge:"●",color:new r.ThemeColor("gitlens.decorations.worktreeHasUncommittedChangesForegroundColor"),tooltip:"Has Uncommitted Changes"};case"missing":return{badge:u.NE.Warning,color:new r.ThemeColor("gitlens.decorations.worktreeMissingForegroundColor"),tooltip:""};default:return}}})),this.description="✨"}get canReveal(){return this.config.reveal||!s.D.get("views.repositories.showWorktrees")}async show(e){if(await(0,xr.C)())return super.show(e)}getRoot(){return new WorktreesViewNode(this)}registerCommands(){return this.container.viewCommands,[sn(this.getQualifiedCommand("copy"),(()=>(0,Zi.P0)(u.Gh.ViewsCopy,this.activeSelection,this.selection)),this),sn(this.getQualifiedCommand("refresh"),(async()=>this.refresh(!0)),this),sn(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout("auto")),this),sn(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout("list")),this),sn(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout("tree")),this),sn(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),sn(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),sn(this.getQualifiedCommand("setShowBranchComparisonOn"),(()=>this.setShowBranchComparison(!0)),this),sn(this.getQualifiedCommand("setShowBranchComparisonOff"),(()=>this.setShowBranchComparison(!1)),this),sn(this.getQualifiedCommand("setShowBranchPullRequestOn"),(()=>this.setShowBranchPullRequest(!0)),this),sn(this.getQualifiedCommand("setShowBranchPullRequestOff"),(()=>this.setShowBranchPullRequest(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||s.D.changed(e,"defaultDateFormat")||s.D.changed(e,"defaultDateLocale")||s.D.changed(e,"defaultDateShortFormat")||s.D.changed(e,"defaultDateSource")||s.D.changed(e,"defaultDateStyle")||s.D.changed(e,"defaultGravatarsStyle")||s.D.changed(e,"defaultTimeFormat"))}findWorktree(e,t){const{repoPath:i,uri:r}=e,s=r.toString();return this.findNode((t=>t instanceof WorktreeNode&&e.uri.toString()===s),{maxDepth:2,canTraverse:e=>e instanceof WorktreesViewNode||e instanceof WorktreesRepositoryNode&&e.repoPath===i,token:t})}async revealRepository(e,t){const i=await this.findNode((t=>t instanceof ks.vb&&t.repoPath===e),{maxDepth:1,canTraverse:e=>e instanceof WorktreesViewNode||e instanceof ks.vb});return void 0!==i&&await this.reveal(i,t),i}revealWorktree(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing worktree '${e.name}' in the side bar...`,cancellable:!0},(async(i,r)=>{const s=await this.findWorktree(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s}))}setFilesLayout(e){return s.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return s.D.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return s.D.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"branch")}async setShowBranchPullRequest(e){await s.D.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await s.D.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}}Hn([(0,Gt.H)((()=>""))],WorktreesView.prototype,"revealRepository",1),Hn([(0,Gt.H)((()=>""))],WorktreesView.prototype,"revealWorktree",1);class RequestType{constructor(e){this.name=e}}const Vn=new RequestType("git"),Yn=new RequestType("git/logStreamTo"),Qn=new RequestType("repositories/inFolder");var qn=Object.defineProperty,jn=Object.getOwnPropertyDescriptor,zn=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?jn(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&qn(t,i,o),o};const Kn=()=>!0,Jn=new Map([["blame",Kn],["branch",e=>"--contains"===e[1]],["cat-file",Kn],["check-mailmap",Kn],["check-ref-format",Kn],["config",e=>"--get"===e[1]||"--get-regex"===e[1]],["diff",Kn],["difftool",Kn],["for-each-ref",Kn],["log",Kn],["ls-files",Kn],["ls-tree",Kn],["merge-base",Kn],["remote",e=>"-v"===e[1]||"get-url"===e[1]],["rev-list",Kn],["rev-parse",Kn],["show",Kn],["show-ref",Kn],["stash",e=>"list"===e[1]],["status",Kn],["symbolic-ref",Kn],["tag",e=>"-l"===e[1]],["worktree",e=>"list"===e[1]]]),Zn=/^[/|\\]/,Xn=class _VslsHostService{constructor(e,t,i){this._api=e,this._service=t,this.container=i,t.onDidChangeIsServiceAvailable(this.onAvailabilityChanged.bind(this)),this._disposable=r.Disposable.from(r.workspace.onDidChangeWorkspaceFolders(this.onWorkspaceFoldersChanged,this)),this.onRequest(Vn,this.onGitCommandRequest.bind(this)),this.onRequest(Yn,this.onGitLogStreamToCommandRequest.bind(this)),this.onRequest(Qn,this.onGetRepositoriesForUriRequest.bind(this)),this.onWorkspaceFoldersChanged()}static ServiceId="proxy";static async share(e,t){const i=await e.shareService(this.ServiceId);if(null==i)throw new Error("Failed to share host service");return new _VslsHostService(e,i,t)}_disposable;_localPathsRegex;_localToSharedPaths=new Map;_sharedPathsRegex;_sharedToLocalPaths=new Map;dispose(){this._disposable.dispose(),this._api.unshareService(_VslsHostService.ServiceId)}onRequest(e,t){this._service.onRequest(e.name,(function(e,i){let r;for(const t of e)if("object"==typeof t&&"__type"in t){r=t;break}return t(r??e[0],i)}))}onAvailabilityChanged(e){}onWorkspaceFoldersChanged(e){if(null==r.workspace.workspaceFolders||0===r.workspace.workspaceFolders.length)return;const t=(0,De.UH)();let i,s;this._localToSharedPaths.clear(),this._sharedToLocalPaths.clear();for(const e of r.workspace.workspaceFolders)i=(0,k.AH)(e.uri.fsPath),s=(0,k.AH)(this.convertLocalUriToShared(e.uri).toString()),Pe.Yd.debug(t,`shared='${s}' ↔ local='${i}'`),this._localToSharedPaths.set(i,s),this._sharedToLocalPaths.set(s,i);let o=(0,ke.v_)(this._sharedToLocalPaths.values(),"|");o=o.replace(/(\/|\\)/g,"[\\\\/|\\\\]"),this._localPathsRegex=new RegExp(`(${o})`,"gi");let n=(0,ke.v_)(this._localToSharedPaths.values(),"|");n=n.replace(/(\/|\\)/g,"[\\\\/|\\\\]"),this._sharedPathsRegex=new RegExp(`^(${n})`,"i")}async onGitCommandRequest(e,t){const i=Jn.get(e.args[0]);if(null==i||!i(e.args))throw new Error(`Git ${e.args[0]} command is not allowed`);const{options:r,args:s}=e,[o,n]=this.convertGitCommandCwd(r.cwd);r.cwd=o;let a=await function(e,...t){return vi().git(e,...t)}(r,...this.convertGitCommandArgs(s,n));return"string"==typeof a?(null!=this._localPathsRegex&&a.length>0&&(a=a.replace(this._localPathsRegex,((e,t)=>{const i=this._localToSharedPaths.get((0,k.AH)(t));return null!=i?i:t}))),{data:a}):{data:a.toString("binary"),isBuffer:!0}}async onGitLogStreamToCommandRequest(e,t){const{options:i,args:r}=e,[s,o]=this.convertGitCommandCwd(e.repoPath);let[n,a]=await function(e,t,i,r,...s){return vi().logStreamTo(e,t,i,r,...s)}(s,e.sha,e.limit,i,...this.convertGitCommandArgs(r,o));return null!=this._localPathsRegex&&n.length>0&&(n=n.map((e=>e.replace(this._localPathsRegex,((e,t)=>{const i=this._localToSharedPaths.get((0,k.AH)(t));return null!=i?i:t}))))),{data:n,count:a}}async onGetRepositoriesForUriRequest(e,t){const i=[],s=this.convertSharedUriToLocal(r.Uri.parse(e.folderUri,!0)),o=this.container.git.getRepository(s);if(null!=o){const e=this.convertLocalUriToShared(o.uri);i.push({folderUri:e.toString(),root:o.root,closed:o.closed})}return{repositories:i}}convertLocalUriToShared(e){const t=(0,De.UH)();let i=this._api.convertLocalUriToShared(e);Pe.Yd.debug(t,`LiveShare.convertLocalUriToShared(${e.toString(!0)}) returned ${i.toString(!0)}`);const s=e.path;let o=i.path;if(i.authority.length>0&&(o=`/${i.authority}${o}`),new RegExp(`${s}$`,"i").test(o))if(o.length===s.length){const t=r.workspace.getWorkspaceFolder(e);i=i.with({authority:"",path:`/~${t.index}`})}else i=i.with({authority:"",path:o.substr(0,o.length-s.length)});else if(!o.startsWith("/~")){const t=r.workspace.getWorkspaceFolder(e);i=i.with({authority:"",path:`/~${t.index}${o}`})}return i}convertGitCommandCwd(e){let t=!1;if(null!=e&&e.length>0&&null!=this._sharedToLocalPaths)if(this._sharedPathsRegex?.test(e))e=(0,k.AH)(e).replace(this._sharedPathsRegex,((e,i)=>{t||(t="/~0"===i);const r=this._sharedToLocalPaths.get(i);return null!=r?r:i}));else if(Zn.test(e)){const i=this._sharedToLocalPaths.get("vsls:/~0");null!=i&&(t=!0,e=(0,k.AH)(this.container.git.getAbsoluteUri(e,i).fsPath))}return[e,t]}convertGitCommandArgs(e,t){let i=!1,r=-1;for(const s of e)r++,"--"!==s?i&&"string"==typeof s&&(t&&Zn.test(s[0])&&e.splice(r,1,s.substr(1)),this._sharedPathsRegex?.test(s)&&e.splice(r,1,(0,k.AH)(s).replace(this._sharedPathsRegex,((e,t)=>{const i=this._sharedToLocalPaths.get(t);return null!=i?i:t})))):i=!0;return e}convertSharedUriToLocal(e){(0,k.tD)(e.path)&&(e=e.with({path:`${e.path}/`}));const t=this._api.convertSharedUriToLocal(e);let i=t.path;const r=e.path;return i.endsWith(r)&&(i=i.substr(0,i.length-r.length)),47===i.charCodeAt(i.length-1)&&(i=i.slice(0,-1)),t.with({path:i})}};zn([(0,g.cM)()],Xn.prototype,"onAvailabilityChanged",1),zn([(0,g.fF)()],Xn.prototype,"onWorkspaceFoldersChanged",1),zn([(0,g.cM)()],Xn.prototype,"onGitCommandRequest",1),zn([(0,g.cM)()],Xn.prototype,"onGitLogStreamToCommandRequest",1),zn([(0,g.cM)()],Xn.prototype,"onGetRepositoriesForUriRequest",1),zn([(0,g.fF)({exit:!0})],Xn.prototype,"convertLocalUriToShared",1),zn([(0,g.cM)()],Xn,"share",1);let ea=Xn;var ta=Object.defineProperty,ia=Object.getOwnPropertyDescriptor,ra=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?ia(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ta(t,i,o),o};const sa=class _VslsGuestService{constructor(e,t,i){this._api=e,this._service=t,this.container=i,t.onDidChangeIsServiceAvailable(this.onAvailabilityChanged.bind(this)),this.onAvailabilityChanged(t.isServiceAvailable)}static async connect(e,t){const i=(0,De.UH)();try{const i=await e.getSharedService(ea.ServiceId);if(null==i)throw new Error("Failed to connect to host service");return new _VslsGuestService(e,i,t)}catch(e){return void Pe.Yd.error(e,i)}}dispose(){}onAvailabilityChanged(e){e?this.container.git.setEnabledContext(!0):(this.container.git.setEnabledContext(!1),r.window.showWarningMessage("GitLens features will be unavailable. Unable to connect to the host GitLens service. The host may have disabled GitLens guest access or may not have GitLens installed."))}async git(e,...t){const i=await this.sendRequest(Vn,{__type:"gitlens",options:e,args:t});return i.isBuffer?Buffer.from(i.data,"binary"):i.data}async gitLogStreamTo(e,t,i,r,...s){const o=await this.sendRequest(Yn,{__type:"gitlens",repoPath:e,sha:t,limit:i,options:r,args:s});return[o.data,o.count]}async getRepositoriesForUri(e){return(await this.sendRequest(Qn,{__type:"gitlens",folderUri:e.toString()})).repositories}sendRequest(e,t,i){return this._service.request(e.name,[t],i)}};ra([(0,g.cM)()],sa.prototype,"onAvailabilityChanged",1),ra([(0,g.cM)()],sa.prototype,"git",1),ra([(0,g.cM)()],sa.prototype,"gitLogStreamTo",1),ra([(0,g.cM)()],sa.prototype,"getRepositoriesForUri",1),ra([(0,g.fF)()],sa.prototype,"sendRequest",1),ra([(0,g.cM)()],sa,"connect",1);let oa=sa;var na=Object.defineProperty,aa=Object.getOwnPropertyDescriptor,ca=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?aa(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&na(t,i,o),o};function la(e){switch(e){case"available":return{status:"online",statusText:"Available"};case"away":return{status:"away",statusText:"Away"};case"busy":return{status:"busy",statusText:"Busy"};case"doNotDisturb":return{status:"dnd",statusText:"DND"};default:return{status:"offline",statusText:"Offline"}}}class VslsController{constructor(e){this.container=e,this._ready=(0,Vt.PQ)(),this._disposable=r.Disposable.from((0,$i.IH)(e.onReady)(this.onReady,this))}_api;_disposable;_guest;_host;_ready;dispose(){this._ready.fulfill(),this._disposable.dispose(),this._host?.dispose(),this._guest?.dispose()}onReady(){this.initialize()}async initialize(){r.workspace.workspaceFolders?.some((e=>e.uri.scheme===u.sN.Vsls))&&this.setReadonly(!0);try{this._api=this.getLiveShareApi();const e=await this._api;if(null==e)return(0,Ni.v)("gitlens:vsls",!1),void this._ready.fulfill();(0,Ni.v)("gitlens:vsls",!0),this._disposable=r.Disposable.from(this._disposable,e.onDidChangeSession((t=>this.onLiveShareSessionChanged(e,t)),this)),this.onLiveShareSessionChanged(e,{session:e.session})}catch(e){Pe.Yd.error(e)}}async onLiveShareSessionChanged(e,t){switch(this._host?.dispose(),this._host=void 0,this._guest?.dispose(),this._guest=void 0,t.session.role){case 1:this.setReadonly(!1),(0,Ni.v)("gitlens:vsls","host"),s.D.get("liveshare.allowGuestAccess")&&(this._host=await ea.share(e,this.container)),this._ready.fulfill();break;case 2:this.setReadonly(!0),(0,Ni.v)("gitlens:vsls","guest"),this._guest=await oa.connect(e,this.container),this._ready.fulfill();break;default:this.setReadonly(!1),(0,Ni.v)("gitlens:vsls",!0),this._ready.pending||(this._ready=(0,Vt.PQ)())}}async getLiveShareApi(){try{const e=r.extensions.getExtension("ms-vsliveshare.vsliveshare");if(null!=e){const t=e.isActive?e.exports:await e.activate();return await t.getApi("1.0.4753")??void 0}}catch(e){Pe.Yd.error(e)}}_readonly=!1;get readonly(){return this._readonly}setReadonly(e){this._readonly=e,(0,Ni.v)("gitlens:readonly",!!e||void 0)}async guest(){return null!=this._guest||await this._ready.promise,this._guest}async getContact(e){if(null==e)return;const t=await this._api;if(null==t)return;return(await t.getContacts([e])).contacts[e]}async getContacts(e){const t=await this._api;if(null==t)return;const i=await t.getContacts(e);return Object.values(i.contacts)}async getContactPresence(e){const t=await this.getContact(e);if(null!=t)return la(t.status)}async getContactsPresence(e){const t=await this.getContacts(e);if(null!=t)return new Map(Object.values(t).map((e=>[e.email,la(e.status)])))}maybeGetPresence(e){return this.getContactPresence(e)}async invite(e){if(null==e)return;const t=await this.getContact(e);return null!=t?t.invite():void 0}async startSession(){const e=await this._api;if(null!=e)return e.share()}}ca([(0,g.fF)()],VslsController.prototype,"getContact",1),ca([(0,g.fF)({args:{0:e=>e.length}})],VslsController.prototype,"getContacts",1),ca([(0,g.fF)()],VslsController.prototype,"getContactPresence",1),ca([(0,g.fF)({args:{0:e=>e.length}})],VslsController.prototype,"getContactsPresence",1),ca([(0,g.fF)(),So(250)],VslsController.prototype,"maybeGetPresence",1);var ha=i(1676),ua=i(5798),da=i(6260);const pa=new ua.ke("rebase/abort"),ma=new ua.ke("rebase/disable"),ga=new ua.ke("rebase/search"),fa=new ua.ke("rebase/start"),wa=new ua.ke("rebase/switch"),va=new ua.ke("rebase/reorder"),ya=new ua.ke("rebase/change/entry"),ba=new ua.ke("rebase/move/entry"),Ca=new ua.ke("rebase/selection/update"),Aa=new ua.jH("rebase/didChange");var ka=Object.defineProperty,Pa=Object.getOwnPropertyDescriptor,Sa=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Pa(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ka(t,i,o),o};const Da=2**30,Ra=new TextDecoder("utf8");let $a=0;let _a=0;const Fa=/^\s?#\s?Rebase\s([0-9a-f]+)(?:..([0-9a-f]+))?\sonto\s([0-9a-f]+)\s.*$/im,Ta=/^\s?(p|pick|r|reword|e|edit|s|squash|f|fixup|d|drop)\s([0-9a-f]+?)\s(.*)$/gm,xa=new Map([["p","pick"],["pick","pick"],["r","reword"],["reword","reword"],["e","edit"],["edit","edit"],["s","squash"],["squash","squash"],["f","fixup"],["fixup","fixup"],["d","drop"],["drop","drop"]]);class RebaseEditorProvider{constructor(e){this.container=e,this._disposable=r.Disposable.from(r.window.registerCustomEditorProvider("gitlens.rebase",this,{supportsMultipleEditorsPerDocument:!1,webviewOptions:{enableFindWidget:!0,retainContextWhenHidden:!0}})),this.ascending="asc"===s.D.get("rebaseEditor.ordering")}_disposable;ascending=!1;dispose(){this._disposable.dispose()}get contextKeyPrefix(){return"gitlens:webview:rebase"}get enabled(){const e=s.D.inspectAny("workbench.editorAssociations")?.globalValue;if(null==e||0===e.length)return!0;if(Array.isArray(e)){const t=e.find((e=>"git-rebase-todo"===e.filenamePattern));return null==t||"gitlens.rebase"===t.viewType}const t=e["git-rebase-todo"];return null==t||"gitlens.rebase"===t}_disableAfterNextUse=!1;async enableForNextUse(){this.enabled||(await this.setEnabled(!0),this._disableAfterNextUse=!0)}async setEnabled(e){this._disableAfterNextUse=!1;const t=s.D.inspectAny("workbench.editorAssociations");let i=t?.globalValue;if(Array.isArray(i)&&(i=i.reduce(((e,t)=>(e[t.filenamePattern]=t.viewType,e)),Object.create(null))),null==i){if(e)return;i={"git-rebase-todo":"default"}}else i["git-rebase-todo"]=e?"gitlens.rebase":"default";await s.D.updateAny("workbench.editorAssociations",i,r.ConfigurationTarget.Global)}async resolveCustomTextEditor(e,t,i){this.container.usage.track("rebaseEditor:shown");const s=(0,k.AH)(r.Uri.joinPath(e.uri,"..","..","..").fsPath),o=this.container.git.getRepository(s),n=[],a={dispose:()=>{r.Disposable.from(...n).dispose()},id:(_a===Da?_a=1:_a++,_a),subscriptions:n,document:e,panel:t,repoPath:o?.path??s,firstSelection:!0};n.push(t.onDidDispose((()=>{(0,da.qW)(this.contextKeyPrefix),r.Disposable.from(...n).dispose()})),t.onDidChangeViewState((e=>this.onViewStateChanged(a,e))),t.webview.onDidReceiveMessage((e=>this.onMessageReceived(a,e))),r.workspace.onDidChangeTextDocument((t=>{0!==t.contentChanges.length&&t.document.uri.toString()===e.uri.toString()&&this.updateState(a,!0)})),r.workspace.onDidSaveTextDocument((t=>{t.uri.toString()===e.uri.toString()&&this.updateState(a,!0)}))),null!=o&&n.push(o.onDidChange((e=>{e.changed(ft.I6.Rebase,ft.du.Any)&&this.updateState(a)}))),t.webview.options={enableCommandUris:!0,enableScripts:!0},t.webview.html=await this.getHtml(a),this._disableAfterNextUse&&(this._disableAfterNextUse=!1,this.setEnabled(!1))}onViewFocusChanged(e){(0,da.Db)(this.contextKeyPrefix,e.focused,e.focused,e.inputFocused)}onViewStateChanged(e,t){const{active:i,visible:r}=t.webviewPanel;r?(0,da.Db)(this.contextKeyPrefix,i):(0,da.qW)(this.contextKeyPrefix),e.pendingChange&&this.updateState(e)}async parseState(e){if(void 0===e.branchName){const t=await this.container.git.getBranch(e.repoPath);e.branchName=t?.name??null}const t=await async function(e,t,i){const r=t.document.getText(),o=Ia(r);let[,,,n]=Fa.exec(r)??["","",""];null!=t.authors&&null!=t.commits||await async function(e,t,i,r){t.commits=[],t.authors=new Map;const s=await e.git.richSearchCommits(t.repoPath,{query:`${i?`#:${i} `:""}${(0,ke.v_)((0,ke.UI)(r,(e=>`#:${e.sha}`))," ")}`},{limit:0});if(null!=s)for(const e of s.commits.values())if(t.commits.push(e),t.authors.has(e.author.name)||t.authors.set(e.author.name,{author:e.author.name,avatarUrl:(await e.getAvatarUri()).toString(!0),email:e.author.email}),!t.authors.has(e.committer.name)){const i=await e.committer.getAvatarUri(e);t.authors.set(e.committer.name,{author:e.committer.name,avatarUrl:i.toString(!0),email:e.committer.email})}}(e,t,n,o);const a=s.D.get("defaultDateFormat"),c=ha.C.getMarkdownCommandArgs("${commit}",t.repoPath),l=n?t.commits?.find((e=>e.sha.startsWith(n))):void 0;let h;for(const e of o)h=t.commits?.find((t=>t.sha.startsWith(e.sha))),null!=h&&(h.sha===l?.sha&&(n=""),e.commit={sha:h.sha,author:h.author.name,committer:h.committer.name,date:h.formatDate(a),dateFromNow:h.formatDateFromNow(),message:(0,ht.X)(h.message??h.summary)});return{webviewId:"gitlens.rebase",timestamp:Date.now(),branch:t.branchName??"",onto:n?{sha:n,commit:null!=l?{sha:l.sha,author:l.author.name,committer:l.committer.name,date:l.formatDate(a),dateFromNow:l.formatDateFromNow(),message:(0,ht.X)(l.message||"root")}:void 0}:void 0,entries:o,authors:null!=t.authors?Object.fromEntries(t.authors):{},commands:{commit:c},ascending:i}}(this.container,e,this.ascending);return t}async postMessage(e,t){try{const i=await e.panel.webview.postMessage(t);return e.pendingChange=!i,i}catch(t){return Pe.Yd.error(t),e.pendingChange=!0,!1}}onMessageReceived(e,t){switch(t.method){case ua.W2.method:(0,ua.mq)(ua.W2,t,(e=>{this.onViewFocusChanged(e)}));break;case pa.method:(0,ua.mq)(pa,t,(()=>this.abort(e)));break;case ma.method:(0,ua.mq)(ma,t,(()=>this.disable(e)));break;case ga.method:(0,ua.mq)(ga,t,(()=>(0,Zi.dO)("editor.action.webvieweditor.showFind")));break;case fa.method:(0,ua.mq)(fa,t,(()=>this.rebase(e)));break;case wa.method:(0,ua.mq)(wa,t,(()=>this.switchToText(e)));break;case va.method:(0,ua.mq)(va,t,(t=>this.swapOrdering(t,e)));break;case ya.method:(0,ua.mq)(ya,t,(t=>this.onEntryChanged(e,t)));break;case ba.method:(0,ua.mq)(ba,t,(t=>this.onEntryMoved(e,t)));break;case Ca.method:(0,ua.mq)(Ca,t,(t=>this.onSelectionChanged(e,t)))}}async onEntryChanged(e,t){const i=Ia(e.document),s=i.find((e=>e.sha===t.sha));if(null==s)return;const o=e.document.positionAt(s.index),n=e.document.validateRange(new r.Range(new r.Position(o.line,0),new r.Position(o.line,Da)));let a=t.action;const c=new r.WorkspaceEdit,l=[...i];l.splice(i.indexOf(s),1,{...s,action:t.action});let h=!1;for(const e of l)"squash"===e.action||"fixup"===e.action?h=!0:h&&"drop"!==e.action&&(h=!1);if(h){const t=l[l.length-1];if(s.sha===t.sha)a="pick";else{const i=e.document.positionAt(t.index),s=e.document.validateRange(new r.Range(new r.Position(i.line,0),new r.Position(i.line,Da)));c.replace(e.document.uri,s,`pick ${t.sha} ${t.message}`)}}c.replace(e.document.uri,n,`${a} ${s.sha} ${s.message}`),await r.workspace.applyEdit(c)}async onEntryMoved(e,t){const i=Ia(e.document),s=i.find((e=>e.sha===t.sha));if(null==s)return;const o=i.findIndex((e=>e.sha===t.sha));let n;if(t.relative){if(-1===t.to&&0===o||1===t.to&&o===i.length-1)return;n=o+t.to}else{if(o===t.to)return;n=t.to}const a=i[n];let c=e.document.positionAt(a.index).line;n<o&&c++;const l=e.document.positionAt(s.index),h=e.document.validateRange(new r.Range(new r.Position(l.line,0),new r.Position(l.line+1,0))),u=[...i];u.splice(o,1),u.splice(n,0,s);let d=!1;for(const e of u)"squash"===e.action||"fixup"===e.action?d=!0:d&&"drop"!==e.action&&(d=!1);const p=new r.WorkspaceEdit;let m=s.action;if(d){const t=u[u.length-1];if(s.sha===t.sha)m="pick";else{const i=e.document.positionAt(t.index),s=e.document.validateRange(new r.Range(new r.Position(i.line,0),new r.Position(i.line,Da)));p.replace(e.document.uri,s,`pick ${t.sha} ${t.message}`)}}p.delete(e.document.uri,h),p.insert(e.document.uri,new r.Position(c,0),`${m} ${s.sha} ${s.message}\n`),await r.workspace.applyEdit(p)}onSelectionChanged(e,t){null==e.fireSelectionChangedDebounced&&(e.fireSelectionChangedDebounced=(0,Ht.Ds)(this.fireSelectionChanged.bind(this),250)),e.fireSelectionChangedDebounced(e,t.sha)}fireSelectionChanged(e,t){if(null==t)return;const i=s.D.get("rebaseEditor.showDetailsView");t=e.commits?.find((e=>e.sha.startsWith(t)))?.sha??t,this.container.events.fire("commit:selected",{commit:(0,m.xB)(t,e.repoPath,{refType:"revision"}),interaction:"passive",preserveFocus:!0,preserveVisibility:e.firstSelection?!1===i:"selection"!==i},{source:"gitlens.rebase"}),e.firstSelection=!1}updateState(e,t=!1){if(t)return e.notifyDidChangeStateDebounced?.cancel(),void this.notifyDidChangeState(e);null==e.notifyDidChangeStateDebounced&&(e.notifyDidChangeStateDebounced=(0,Ht.Ds)(this.notifyDidChangeState.bind(this),250)),e.notifyDidChangeStateDebounced(e)}async notifyDidChangeState(e){if(!e.panel.visible)return void(e.pendingChange=!0);const t=await this.parseState(e);this.postMessage(e,{id:($a===Da?$a=1:$a++,`host:${$a}`),method:Aa.method,params:{state:t}})}async abort(e){e.dispose();const t=new r.WorkspaceEdit;t.replace(e.document.uri,new r.Range(0,0,e.document.lineCount,0),""),await r.workspace.applyEdit(t),await e.document.save(),e.panel.dispose()}async disable(e){await this.abort(e),await this.setEnabled(!1)}async rebase(e){e.dispose(),await e.document.save(),e.panel.dispose()}swapOrdering(e,t){this.ascending=e.ascending??!1,s.D.updateEffective("rebaseEditor.ordering",this.ascending?"asc":"desc"),this.updateState(t,!0)}switchToText(e){(0,Ut.QP)(),(0,Zi.dO)("vscode.open",e.document.uri,{override:!1,preview:!1})}async getHtml(e){const t=r.Uri.joinPath(this.container.context.extensionUri,"dist","webviews"),i=r.Uri.joinPath(t,"rebase.html"),[s,o]=await Promise.all([r.workspace.fs.readFile(i),this.parseState(e)]);return(0,da.Q5)(Ra.decode(s),"gitlens.rebase",e.panel.webview.cspSource,(0,nt.Vu)(),e.panel.webview.asWebviewUri(this.container.context.extensionUri).toString(),e.panel.webview.asWebviewUri(t).toString(),"editor",o)}}function Ia(e){const t="string"==typeof e?e:e.getText(),i=[];let r,s,o,n;for(;;){if(r=Ta.exec(t),null==r)break;[,s,o,n]=r,i.push({index:r.index,action:xa.get(s)??"pick",sha:` ${o}`.substr(1),message:null==n||0===n.length?"":` ${n}`.substr(1)})}return i.reverse()}Sa([(0,g.fF)({args:{0:e=>e.uri.toString(!0)}})],RebaseEditorProvider.prototype,"resolveCustomTextEditor",1),Sa([(0,g.fF)({args:{0:e=>`focused=${e.focused}, inputFocused=${e.inputFocused}`}})],RebaseEditorProvider.prototype,"onViewFocusChanged",1),Sa([(0,g.fF)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`,1:e=>`active=${e.webviewPanel.active}, visible=${e.webviewPanel.visible}`}})],RebaseEditorProvider.prototype,"onViewStateChanged",1),Sa([(0,g.fF)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`}})],RebaseEditorProvider.prototype,"updateState",1),Sa([(0,g.fF)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`}})],RebaseEditorProvider.prototype,"notifyDidChangeState",1),Sa([(0,g.cM)({args:!1})],RebaseEditorProvider.prototype,"abort",1),Sa([(0,g.cM)({args:!1})],RebaseEditorProvider.prototype,"disable",1),Sa([(0,g.cM)({args:!1})],RebaseEditorProvider.prototype,"rebase",1),Sa([(0,g.cM)({args:!1})],RebaseEditorProvider.prototype,"swapOrdering",1),Sa([(0,g.cM)({args:!1})],RebaseEditorProvider.prototype,"switchToText",1);var Oa=i(620);var Ba=Object.defineProperty,Ea=Object.getOwnPropertyDescriptor,Wa=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Ea(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Ba(t,i,o),o};const Na=class _Container{static#e;static#t=new Proxy({},{get:function(e,t){if(null!=_Container.#e)return _Container.#e[t];if("config"===t)return s.D.getAll();throw new Error("Container is not initialized")}});static create(e,t,i,r,s){if(null!=_Container.#e)throw new Error("Container is already initialized");return _Container.#e=new _Container(e,t,i,r,s),_Container.#e}static get instance(){return _Container.#e??_Container.#t}_onReady=new r.EventEmitter;get onReady(){return this._onReady.event}BranchDateFormatting={dateFormat:void 0,dateStyle:void 0,reset:()=>{this.BranchDateFormatting.dateFormat=s.D.get("defaultDateFormat"),this.BranchDateFormatting.dateStyle=s.D.get("defaultDateStyle")}};CommitDateFormatting={dateFormat:null,dateSource:"authored",dateStyle:"relative",reset:()=>{this.CommitDateFormatting.dateFormat=s.D.get("defaultDateFormat"),this.CommitDateFormatting.dateSource=s.D.get("defaultDateSource"),this.CommitDateFormatting.dateStyle=s.D.get("defaultDateStyle")}};CommitShaFormatting={length:7,reset:()=>{this.CommitShaFormatting.length=Math.max(5,s.D.get("advanced.abbreviatedShaLength"))}};PullRequestDateFormatting={dateFormat:null,dateStyle:"relative",reset:()=>{this.PullRequestDateFormatting.dateFormat=s.D.get("defaultDateFormat"),this.PullRequestDateFormatting.dateStyle=s.D.get("defaultDateStyle")}};TagDateFormatting={dateFormat:null,dateStyle:"relative",reset:()=>{this.TagDateFormatting.dateFormat=s.D.get("defaultDateFormat"),this.TagDateFormatting.dateStyle=s.D.get("defaultDateStyle")}};_connection;_disposables;_terminalLinks;_webviews;constructor(e,t,o,n,a){this._context=e,this._prerelease=o,this._version=n,this.ensureModeApplied(),this._disposables=[this._storage=t,this._telemetry=new TelemetryService(this),this._usage=new UsageTracker(this,t),s.D.onDidChangeAny(this.onAnyConfigurationChanged,this)],this._disposables.push(this._connection=new ServerConnection(this)),this._disposables.push(this._accountAuthentication=new AccountAuthenticationProvider(this,this._connection)),this._disposables.push(this._subscription=new SubscriptionService(this,this._connection,a)),this._disposables.push(this._git=new GitProviderService(this)),this._disposables.push(new GitFileSystemProvider(this)),this._disposables.push(this._uri=new UriService(this)),this._disposables.push(this._deepLinks=new DeepLinkService(this)),this._disposables.push(this._actionRunners=new Bi.AR(this)),this._disposables.push(this._tracker=new qt.r(this)),this._disposables.push(this._lineTracker=new GitLineTracker(this)),this._disposables.push(this._keyboard=new Keyboard),this._disposables.push(this._vsls=new VslsController(this)),this._disposables.push(this._eventBus=new EventBus),this._disposables.push(this._fileAnnotationController=new Si.f(this)),this._disposables.push(this._lineAnnotationController=new LineAnnotationController(this)),this._disposables.push(this._lineHoverController=new LineHoverController(this)),this._disposables.push(this._statusBarController=new StatusBarController(this)),this._disposables.push(this._codeLensController=new GitCodeLensController(this)),this._disposables.push(this._webviews=new Oa.V(this)),this._disposables.push(this._webviews.registerWebviewPanel(u.Gh.ShowTimelinePage,{id:"gitlens.timeline",fileName:"timeline.html",iconPath:"images/gitlens-icon.png",title:"Visual File History",contextKeyPrefix:"gitlens:webview:timeline",trackingFeature:"timelineWebview",plusFeature:!0,column:r.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!1,enableFindWidget:!1}},(async(e,t)=>{const{TimelineWebviewProvider:r}=await i.e(831).then(i.bind(i,9042));return new r(e,t)}))),this._disposables.push(this._timelineView=function(e){return e.registerWebviewView({id:"gitlens.views.timeline",fileName:"timeline.html",title:"Visual File History",contextKeyPrefix:"gitlens:webviewView:timeline",trackingFeature:"timelineView",plusFeature:!0,webviewHostOptions:{retainContextWhenHidden:!1}},(async(e,t)=>{const{TimelineWebviewProvider:r}=await i.e(831).then(i.bind(i,9042));return new r(e,t)}))}(this._webviews)),this._disposables.push(this._graphPanel=function(e){return e.registerWebviewPanel(u.Gh.ShowGraphPage,{id:"gitlens.graph",fileName:"graph.html",iconPath:"images/gitlens-icon.png",title:"Commit Graph",contextKeyPrefix:"gitlens:webview:graph",trackingFeature:"graphWebview",plusFeature:!0,column:r.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!0,enableFindWidget:!1}},(async(e,t)=>{const{GraphWebviewProvider:r}=await i.e(786).then(i.bind(i,1302));return new r(e,t)}))}(this._webviews)),this._disposables.push(Ur(this,this._graphPanel)),this._disposables.push(this._graphView=function(e){return e.registerWebviewView({id:"gitlens.views.graph",fileName:"graph.html",title:"Commit Graph",contextKeyPrefix:"gitlens:webviewView:graph",trackingFeature:"graphView",plusFeature:!0,webviewHostOptions:{retainContextWhenHidden:!0}},(async(e,t)=>{const{GraphWebviewProvider:r}=await i.e(786).then(i.bind(i,1302));return new r(e,t)}))}(this._webviews)),this._disposables.push(new GraphStatusBarController(this));const c=function(e){return e.registerWebviewPanel(u.Gh.ShowSettingsPage,{id:"gitlens.settings",fileName:"settings.html",iconPath:"images/gitlens-icon.png",title:"GitLens Settings",contextKeyPrefix:"gitlens:webview:settings",trackingFeature:"settingsWebview",plusFeature:!1,column:r.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!1,enableFindWidget:!0}},(async(e,t)=>{const{SettingsWebviewProvider:r}=await i.e(571).then(i.bind(i,5596));return new r(e,t)}))}(this._webviews);var l;this._disposables.push(c),this._disposables.push(function(e){return r.Disposable.from(...[u.Gh.ShowSettingsPageAndJumpToBranchesView,u.Gh.ShowSettingsPageAndJumpToCommitsView,u.Gh.ShowSettingsPageAndJumpToContributorsView,u.Gh.ShowSettingsPageAndJumpToFileHistoryView,u.Gh.ShowSettingsPageAndJumpToLineHistoryView,u.Gh.ShowSettingsPageAndJumpToRemotesView,u.Gh.ShowSettingsPageAndJumpToRepositoriesView,u.Gh.ShowSettingsPageAndJumpToSearchAndCompareView,u.Gh.ShowSettingsPageAndJumpToStashesView,u.Gh.ShowSettingsPageAndJumpToTagsView,u.Gh.ShowSettingsPageAndJumpToWorkTreesView,u.Gh.ShowSettingsPageAndJumpToViews,u.Gh.ShowSettingsPageAndJumpToCommitGraph,u.Gh.ShowSettingsPageAndJumpToAutolinks].map((t=>{let i;const r=/.*?#(.*)/.exec(t);return null!=r&&([,i]=r),(0,Zi.xR)(t,((...t)=>{e.show(void 0,i,...t)}))})))}(c)),this._disposables.push(function(e){return e.registerWebviewPanel(u.Gh.ShowWelcomePage,{id:"gitlens.welcome",fileName:"welcome.html",iconPath:"images/gitlens-icon.png",title:"Welcome to GitLens",contextKeyPrefix:"gitlens:webview:welcome",trackingFeature:"welcomeWebview",plusFeature:!1,column:r.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!1,enableFindWidget:!0}},(async(e,t)=>{const{WelcomeWebviewProvider:r}=await i.e(773).then(i.bind(i,5140));return new r(e,t)}))}(this._webviews)),this._disposables.push(this._rebaseEditor=new RebaseEditorProvider(this)),this._disposables.push(function(e){return e.registerWebviewPanel(u.Gh.ShowFocusPage,{id:"gitlens.focus",fileName:"focus.html",iconPath:"images/gitlens-icon.png",title:"Focus View",contextKeyPrefix:"gitlens:webview:focus",trackingFeature:"focusWebview",plusFeature:!0,column:r.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!0,enableFindWidget:!0}},(async(e,t)=>{const{FocusWebviewProvider:r}=await i.e(521).then(i.bind(i,1629));return new r(e,t)}))}(this._webviews)),this._disposables.push(new ViewFileDecorationProvider),this._disposables.push(this._repositoriesView=new RepositoriesView(this)),this._disposables.push(this._commitDetailsView=function(e){return e.registerWebviewView({id:"gitlens.views.commitDetails",fileName:"commitDetails.html",title:"Commit Details",contextKeyPrefix:"gitlens:webviewView:commitDetails",trackingFeature:"commitDetailsView",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!1}},(async(e,t)=>{const{CommitDetailsWebviewProvider:r}=await i.e(10).then(i.bind(i,9206));return new r(e,t,{attachedTo:"default"})}))}(this._webviews)),this._disposables.push(this._graphDetailsView=function(e){return e.registerWebviewView({id:"gitlens.views.graphDetails",fileName:"commitDetails.html",title:"Commit Graph Details",contextKeyPrefix:"gitlens:webviewView:graphDetails",trackingFeature:"graphDetailsView",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!1}},(async(e,t)=>{const{CommitDetailsWebviewProvider:r}=await i.e(10).then(i.bind(i,9206));return new r(e,t,{attachedTo:"graph"})}))}(this._webviews)),this._disposables.push(this._commitsView=new CommitsView(this)),this._disposables.push(this._fileHistoryView=new FileHistoryView(this)),this._disposables.push(this._lineHistoryView=new LineHistoryView(this)),this._disposables.push(this._branchesView=new BranchesView(this)),this._disposables.push(this._remotesView=new RemotesView(this)),this._disposables.push(this._stashesView=new StashesView(this)),this._disposables.push(this._tagsView=new TagsView(this)),this._disposables.push(this._worktreesView=new WorktreesView(this)),this._disposables.push(this._contributorsView=new ContributorsView(this)),this._disposables.push(this._searchAndCompareView=new SearchAndCompareView(this)),this._disposables.push(this._workspacesView=new WorkspacesView(this)),this._disposables.push(this._homeView=function(e){return e.registerWebviewView({id:"gitlens.views.home",fileName:"home.html",title:"Home",contextKeyPrefix:"gitlens:webviewView:home",trackingFeature:"homeView",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!1}},(async(e,t)=>{const{HomeWebviewProvider:r}=await i.e(177).then(i.bind(i,2384));return new r(e,t)}))}(this._webviews)),this._disposables.push(this._accountView=function(e){return e.registerWebviewView({id:"gitlens.views.account",fileName:"account.html",title:"GitKraken Account",contextKeyPrefix:"gitlens:webviewView:account",trackingFeature:"accountView",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!1}},(async(e,t)=>{const{AccountWebviewProvider:r}=await i.e(809).then(i.bind(i,420));return new r(e,t)}))}(this._webviews)),s.D.get("terminalLinks.enabled")&&this._disposables.push(this._terminalLinks=new GitTerminalLinkProvider(this)),this._disposables.push(s.D.onDidChange((e=>{s.D.changed(e,"terminalLinks.enabled")&&(this._terminalLinks?.dispose(),s.D.get("terminalLinks.enabled")&&this._disposables.push(this._terminalLinks=new GitTerminalLinkProvider(this)))}))),e.subscriptions.push({dispose:()=>this._disposables.reverse().forEach((e=>{e.dispose()}))}),l=this,null!=Kr()&&setTimeout((()=>l.workspaces.addMissingCurrentWorkspaceRepos()),1e4)}deactivate(){this._deactivating=!0}_deactivating=!1;get deactivating(){return this._deactivating}_ready=!1;async ready(){if(this._ready)throw new Error("Container is already ready");this._ready=!0,await this.registerGitProviders(),queueMicrotask((()=>this._onReady.fire()))}async registerGitProviders(){const e=await async function(e){const t=vi(),r=[new LocalGitProvider(e,t),new VslsGitProvider(e,new VslsGit(t))];if(s.D.get("virtualRepositories.enabled")){const t=(await i.e(457).then(i.bind(i,5168))).GitHubGitProvider;r.push(new t(e))}return r}(this);for(const t of e)this._disposables.push(this._git.register(t.descriptor.id,t));this._git.registrationComplete()}onAnyConfigurationChanged(e){s.D.changedAny(e,u.m1)&&(this._mode=void 0,s.D.changed(e,"outputLevel")&&(Pe.Yd.logLevel=(0,Mi.oE)(s.D.get("outputLevel"))),s.D.changed(e,"defaultGravatarsStyle")&&(0,lt.Wr)(s.D.get("defaultGravatarsStyle")),s.D.changed(e,"mode")&&this.ensureModeApplied())}_accountAuthentication;get accountAuthentication(){return this._accountAuthentication}_actionRunners;get actionRunners(){return this._actionRunners}_ai;get ai(){return null==this._ai&&this._disposables.push(this._ai=new AIProviderService(this)),this._ai}_autolinks;get autolinks(){return null==this._autolinks&&this._disposables.push(this._autolinks=new Pi.P(this)),this._autolinks}_branchesView;get branchesView(){return this._branchesView}_cache;get cache(){return null==this._cache&&this._disposables.push(this._cache=new CacheProvider(this)),this._cache}_codeLensController;get codeLens(){return this._codeLensController}_commitsView;get commitsView(){return this._commitsView}_commitDetailsView;get commitDetailsView(){return this._commitDetailsView}_context;get context(){return this._context}_contributorsView;get contributorsView(){return this._contributorsView}get debugging(){return this._context.extensionMode===r.ExtensionMode.Development}get env(){if(this.prereleaseOrDebugging){const e=s.D.getAny("gitkraken.env");if("dev"===e)return"dev";if("staging"===e)return"staging"}return"production"}_eventBus;get events(){return this._eventBus}_fileAnnotationController;get fileAnnotations(){return this._fileAnnotationController}_fileHistoryView;get fileHistoryView(){return this._fileHistoryView}_git;get git(){return this._git}_uri;get uri(){return this._uri}_deepLinks;get deepLinks(){return this._deepLinks}_focus;get focus(){return null==this._focus&&this._disposables.push(this._focus=new FocusService(this,new ServerConnection(this))),this._focus}_github;get github(){return null==this._github&&(this._github=this._loadGitHubApi()),this._github}async _loadGitHubApi(){try{const e=new((await i.e(457).then(i.bind(i,3548))).GitHubApi)(this);return this._disposables.push(e),e}catch(e){return void Pe.Yd.error(e)}}_gitlab;get gitlab(){return null==this._gitlab&&(this._gitlab=this._loadGitLabApi()),this._gitlab}async _loadGitLabApi(){try{const e=new((await i.e(449).then(i.bind(i,2142))).GitLabApi)(this);return this._disposables.push(e),e}catch(e){return void Pe.Yd.error(e)}}_graphDetailsView;get graphDetailsView(){return this._graphDetailsView}_graphPanel;_graphView;get graphView(){return this._graphView}_homeView;get homeView(){return this._homeView}_accountView;get accountView(){return this._accountView}get id(){return this._context.extension.id}_integrationAuthentication;get integrationAuthentication(){return null==this._integrationAuthentication&&this._disposables.push(this._integrationAuthentication=new IntegrationAuthenticationService(this),new or.z4(this),new nr.h(this)),this._integrationAuthentication}_keyboard;get keyboard(){return this._keyboard}_lineAnnotationController;get lineAnnotations(){return this._lineAnnotationController}_lineHistoryView;get lineHistoryView(){return this._lineHistoryView}_lineHoverController;get lineHovers(){return this._lineHoverController}_lineTracker;get lineTracker(){return this._lineTracker}_prerelease;get prerelease(){return this._prerelease}get prereleaseOrDebugging(){return this._prerelease||this.debugging}_rebaseEditor;get rebaseEditor(){return this._rebaseEditor}_remotesView;get remotesView(){return this._remotesView}_repositoriesView;get repositoriesView(){return this._repositoriesView}_repositoryPathMapping;get repositoryPathMapping(){return null==this._repositoryPathMapping&&this._disposables.push(this._repositoryPathMapping=new RepositoryLocalPathMappingProvider(this)),this._repositoryPathMapping}_richRemoteProviders;get richRemoteProviders(){return null==this._richRemoteProviders&&(this._richRemoteProviders=new RichRemoteProviderService(this)),this._richRemoteProviders}_searchAndCompareView;get searchAndCompareView(){return this._searchAndCompareView}_stashesView;get stashesView(){return this._stashesView}_statusBarController;get statusBar(){return this._statusBarController}_storage;get storage(){return this._storage}_subscription;get subscription(){return this._subscription}_tagsView;get tagsView(){return this._tagsView}_telemetry;get telemetry(){return this._telemetry}_timelineView;get timelineView(){return this._timelineView}_tracker;get tracker(){return this._tracker}_usage;get usage(){return this._usage}_version;get version(){return this._version}_viewCommands;get viewCommands(){return null==this._viewCommands&&(this._viewCommands=new ViewCommands(this)),this._viewCommands}_vsls;get vsls(){return this._vsls}_workspaces;get workspaces(){return null==this._workspaces&&this._disposables.push(this._workspaces=new WorkspacesService(this,this._connection)),this._workspaces}_workspacesView;get workspacesView(){return this._workspacesView}_worktreesView;get worktreesView(){return this._worktreesView}_mode;get mode(){return null==this._mode&&(this._mode=s.D.get("modes")?.[s.D.get("mode.active")]),this._mode}ensureModeApplied(){const e=this.mode;if(null!=e){if(null!=e.annotations){let t;switch(e.annotations){case"blame":t=u.Gh.ToggleFileBlame;break;case"changes":t=u.Gh.ToggleFileChanges;break;case"heatmap":t=u.Gh.ToggleFileHeatmap}if(null!=t){const i={type:e.annotations,on:!0};setTimeout(Zi.P0,50,t,i)}}s.D.applyOverrides({get:(t,i)=>{if(null!=e.annotations){if(s.D.matches(`${e.annotations}.toggleMode`,t,i))return i="window";if(s.D.matches(e.annotations,t,i))return i.toggleMode="window",i}for(const r of["codeLens","currentLine","hovers","statusBar"])if(null!=e[r]){if(s.D.matches(`${r}.enabled`,t,i))return i=e[r];if(s.D.matches(r,t,i))return i.enabled=e[r],i}return i},getAll:t=>(null!=e.annotations&&(t[e.annotations].toggleMode="window"),null!=e.codeLens&&(t.codeLens.enabled=e.codeLens),null!=e.currentLine&&(t.currentLine.enabled=e.currentLine),null!=e.hovers&&(t.hovers.enabled=e.hovers),null!=e.statusBar&&(t.statusBar.enabled=e.statusBar),t),onDidChange:e=>{if(!s.D.changed(e,["mode","modes"]))return e;const t=e.affectsConfiguration;return{...e,affectsConfiguration:(e,i)=>!!/^gitlens\.(?:modes?|blame|changes|heatmap|codeLens|currentLine|hovers|statusBar)\b/.test(e)||t(e,i)}}})}else s.D.clearOverrides()}};Wa([(0,g.cM)()],Na.prototype,"registerGitProviders",1),Wa([(0,ne.H)()],Na.prototype,"debugging",1),Wa([(0,ne.H)()],Na.prototype,"env",1),Wa([(0,ne.H)()],Na.prototype,"id",1),Wa([(0,ne.H)()],Na.prototype,"prereleaseOrDebugging",1);let Ma=Na;function Ua(e){return e instanceof Ma}},3148:(e,t,i)=>{i.d(t,{X:()=>a});const r="";var s=i(4627);const o=/:([-+_a-z0-9]+):/g;let n;function a(e){return null==n&&(n=JSON.parse((0,s.QC)(r))),e.replace(o,((e,t)=>n[t]||e))}},3951:(e,t,i)=>{i.d(t,{Vu:()=>s,FB:()=>o,Vj:()=>n});const r=require("crypto");function s(){return(0,r.randomBytes)(16).toString("base64")}function o(e,t="hex"){return(0,r.createHash)("md5").update(e).digest(t)}function n(){return(0,r.randomUUID)()}},3309:(e,t,i)=>{i.d(t,{he:()=>K,Nx:()=>X,a_:()=>ee});var r=i(7282),s=i(7310),o=i(6018),n=i(2781),a=i(3685),c=i(8897),l=i(5687),h=i(5206);const u=n.Readable,d=Symbol("buffer"),p=Symbol("type");class Blob{constructor(){this[p]="";const e=arguments[0],t=arguments[1],i=[];let r=0;if(e){const t=e,s=Number(t.length);for(let e=0;e<s;e++){const s=t[e];let o;o=s instanceof Buffer?s:ArrayBuffer.isView(s)?Buffer.from(s.buffer,s.byteOffset,s.byteLength):s instanceof ArrayBuffer?Buffer.from(s):s instanceof Blob?s[d]:Buffer.from("string"==typeof s?s:String(s)),r+=o.length,i.push(o)}}this[d]=Buffer.concat(i);let s=t&&void 0!==t.type&&String(t.type).toLowerCase();s&&!/[^\u0020-\u007E]/.test(s)&&(this[p]=s)}get size(){return this[d].length}get type(){return this[p]}text(){return Promise.resolve(this[d].toString())}arrayBuffer(){const e=this[d],t=e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength);return Promise.resolve(t)}stream(){const e=new u;return e._read=function(){},e.push(this[d]),e.push(null),e}toString(){return"[object Blob]"}slice(){const e=this.size,t=arguments[0],i=arguments[1];let r,s;r=void 0===t?0:t<0?Math.max(e+t,0):Math.min(t,e),s=void 0===i?e:i<0?Math.max(e+i,0):Math.min(i,e);const o=Math.max(s-r,0),n=this[d].slice(r,r+o),a=new Blob([],{type:arguments[2]});return a[d]=n,a}}function m(e,t,i){Error.call(this,e),this.message=e,this.type=t,i&&(this.code=this.errno=i.code),Error.captureStackTrace(this,this.constructor)}let g;Object.defineProperties(Blob.prototype,{size:{enumerable:!0},type:{enumerable:!0},slice:{enumerable:!0}}),Object.defineProperty(Blob.prototype,Symbol.toStringTag,{value:"Blob",writable:!1,enumerable:!1,configurable:!0}),m.prototype=Object.create(Error.prototype),m.prototype.constructor=m,m.prototype.name="FetchError";try{g=require("encoding").convert}catch(e){}const f=Symbol("Body internals"),w=n.PassThrough;function v(e){var t=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=i.size;let s=void 0===r?0:r;var o=i.timeout;let a=void 0===o?0:o;null==e?e=null:b(e)?e=Buffer.from(e.toString()):C(e)||Buffer.isBuffer(e)||("[object ArrayBuffer]"===Object.prototype.toString.call(e)?e=Buffer.from(e):ArrayBuffer.isView(e)?e=Buffer.from(e.buffer,e.byteOffset,e.byteLength):e instanceof n||(e=Buffer.from(String(e)))),this[f]={body:e,disturbed:!1,error:null},this.size=s,this.timeout=a,e instanceof n&&e.on("error",(function(e){const i="AbortError"===e.name?e:new m(`Invalid response body while trying to fetch ${t.url}: ${e.message}`,"system",e);t[f].error=i}))}function y(){var e=this;if(this[f].disturbed)return v.Promise.reject(new TypeError(`body used already for: ${this.url}`));if(this[f].disturbed=!0,this[f].error)return v.Promise.reject(this[f].error);let t=this.body;if(null===t)return v.Promise.resolve(Buffer.alloc(0));if(C(t)&&(t=t.stream()),Buffer.isBuffer(t))return v.Promise.resolve(t);if(!(t instanceof n))return v.Promise.resolve(Buffer.alloc(0));let i=[],r=0,s=!1;return new v.Promise((function(o,n){let a;e.timeout&&(a=setTimeout((function(){s=!0,n(new m(`Response timeout while trying to fetch ${e.url} (over ${e.timeout}ms)`,"body-timeout"))}),e.timeout)),t.on("error",(function(t){"AbortError"===t.name?(s=!0,n(t)):n(new m(`Invalid response body while trying to fetch ${e.url}: ${t.message}`,"system",t))})),t.on("data",(function(t){if(!s&&null!==t){if(e.size&&r+t.length>e.size)return s=!0,void n(new m(`content size at ${e.url} over limit: ${e.size}`,"max-size"));r+=t.length,i.push(t)}})),t.on("end",(function(){if(!s){clearTimeout(a);try{o(Buffer.concat(i,r))}catch(t){n(new m(`Could not create Buffer from response body for ${e.url}: ${t.message}`,"system",t))}}}))}))}function b(e){return"object"==typeof e&&"function"==typeof e.append&&"function"==typeof e.delete&&"function"==typeof e.get&&"function"==typeof e.getAll&&"function"==typeof e.has&&"function"==typeof e.set&&("URLSearchParams"===e.constructor.name||"[object URLSearchParams]"===Object.prototype.toString.call(e)||"function"==typeof e.sort)}function C(e){return"object"==typeof e&&"function"==typeof e.arrayBuffer&&"string"==typeof e.type&&"function"==typeof e.stream&&"function"==typeof e.constructor&&"string"==typeof e.constructor.name&&/^(Blob|File)$/.test(e.constructor.name)&&/^(Blob|File)$/.test(e[Symbol.toStringTag])}function A(e){let t,i,r=e.body;if(e.bodyUsed)throw new Error("cannot clone body after it is used");return r instanceof n&&"function"!=typeof r.getBoundary&&(t=new w,i=new w,r.pipe(t),r.pipe(i),e[f].body=t,r=i),r}function k(e){return null===e?null:"string"==typeof e?"text/plain;charset=UTF-8":b(e)?"application/x-www-form-urlencoded;charset=UTF-8":C(e)?e.type||null:Buffer.isBuffer(e)||"[object ArrayBuffer]"===Object.prototype.toString.call(e)||ArrayBuffer.isView(e)?null:"function"==typeof e.getBoundary?`multipart/form-data;boundary=${e.getBoundary()}`:e instanceof n?null:"text/plain;charset=UTF-8"}function P(e){const t=e.body;return null===t?0:C(t)?t.size:Buffer.isBuffer(t)?t.length:t&&"function"==typeof t.getLengthSync&&(t._lengthRetrievers&&0==t._lengthRetrievers.length||t.hasKnownLength&&t.hasKnownLength())?t.getLengthSync():null}v.prototype={get body(){return this[f].body},get bodyUsed(){return this[f].disturbed},arrayBuffer(){return y.call(this).then((function(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}))},blob(){let e=this.headers&&this.headers.get("content-type")||"";return y.call(this).then((function(t){return Object.assign(new Blob([],{type:e.toLowerCase()}),{[d]:t})}))},json(){var e=this;return y.call(this).then((function(t){try{return JSON.parse(t.toString())}catch(t){return v.Promise.reject(new m(`invalid json response body at ${e.url} reason: ${t.message}`,"invalid-json"))}}))},text(){return y.call(this).then((function(e){return e.toString()}))},buffer(){return y.call(this)},textConverted(){var e=this;return y.call(this).then((function(t){return function(e,t){if("function"!=typeof g)throw new Error("The package `encoding` must be installed to use the textConverted() function");const i=t.get("content-type");let r,s,o="utf-8";i&&(r=/charset=([^;]*)/i.exec(i));s=e.slice(0,1024).toString(),!r&&s&&(r=/<meta.+?charset=(['"])(.+?)\1/i.exec(s));!r&&s&&(r=/<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(s),r||(r=/<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(s),r&&r.pop()),r&&(r=/charset=(.*)/i.exec(r.pop())));!r&&s&&(r=/<\?xml.+?encoding=(['"])(.+?)\1/i.exec(s));r&&(o=r.pop(),"gb2312"!==o&&"gbk"!==o||(o="gb18030"));return g(e,"UTF-8",o).toString()}(t,e.headers)}))}},Object.defineProperties(v.prototype,{body:{enumerable:!0},bodyUsed:{enumerable:!0},arrayBuffer:{enumerable:!0},blob:{enumerable:!0},json:{enumerable:!0},text:{enumerable:!0}}),v.mixIn=function(e){for(const t of Object.getOwnPropertyNames(v.prototype))if(!(t in e)){const i=Object.getOwnPropertyDescriptor(v.prototype,t);Object.defineProperty(e,t,i)}},v.Promise=global.Promise;const S=/[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/,D=/[^\t\x20-\x7e\x80-\xff]/;function R(e){if(e=`${e}`,S.test(e)||""===e)throw new TypeError(`${e} is not a legal HTTP header name`)}function $(e){if(e=`${e}`,D.test(e))throw new TypeError(`${e} is not a legal HTTP header value`)}function _(e,t){t=t.toLowerCase();for(const i in e)if(i.toLowerCase()===t)return i}const F=Symbol("map");class Headers{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;if(this[F]=Object.create(null),e instanceof Headers){const t=e.raw(),i=Object.keys(t);for(const e of i)for(const i of t[e])this.append(e,i)}else if(null==e);else{if("object"!=typeof e)throw new TypeError("Provided initializer must be an object");{const t=e[Symbol.iterator];if(null!=t){if("function"!=typeof t)throw new TypeError("Header pairs must be iterable");const i=[];for(const t of e){if("object"!=typeof t||"function"!=typeof t[Symbol.iterator])throw new TypeError("Each header pair must be iterable");i.push(Array.from(t))}for(const e of i){if(2!==e.length)throw new TypeError("Each header pair must be a name/value tuple");this.append(e[0],e[1])}}else for(const t of Object.keys(e)){const i=e[t];this.append(t,i)}}}}get(e){R(e=`${e}`);const t=_(this[F],e);return void 0===t?null:this[F][t].join(", ")}forEach(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,i=T(this),r=0;for(;r<i.length;){var s=i[r];const o=s[0],n=s[1];e.call(t,n,o,this),i=T(this),r++}}set(e,t){t=`${t}`,R(e=`${e}`),$(t);const i=_(this[F],e);this[F][void 0!==i?i:e]=[t]}append(e,t){t=`${t}`,R(e=`${e}`),$(t);const i=_(this[F],e);void 0!==i?this[F][i].push(t):this[F][e]=[t]}has(e){return R(e=`${e}`),void 0!==_(this[F],e)}delete(e){R(e=`${e}`);const t=_(this[F],e);void 0!==t&&delete this[F][t]}raw(){return this[F]}keys(){return I(this,"key")}values(){return I(this,"value")}[Symbol.iterator](){return I(this,"key+value")}}function T(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"key+value";return Object.keys(e[F]).sort().map("key"===t?function(e){return e.toLowerCase()}:"value"===t?function(t){return e[F][t].join(", ")}:function(t){return[t.toLowerCase(),e[F][t].join(", ")]})}Headers.prototype.entries=Headers.prototype[Symbol.iterator],Object.defineProperty(Headers.prototype,Symbol.toStringTag,{value:"Headers",writable:!1,enumerable:!1,configurable:!0}),Object.defineProperties(Headers.prototype,{get:{enumerable:!0},forEach:{enumerable:!0},set:{enumerable:!0},append:{enumerable:!0},has:{enumerable:!0},delete:{enumerable:!0},keys:{enumerable:!0},values:{enumerable:!0},entries:{enumerable:!0}});const x=Symbol("internal");function I(e,t){const i=Object.create(O);return i[x]={target:e,kind:t,index:0},i}const O=Object.setPrototypeOf({next(){if(!this||Object.getPrototypeOf(this)!==O)throw new TypeError("Value of `this` is not a HeadersIterator");var e=this[x];const t=e.target,i=e.kind,r=e.index,s=T(t,i);return r>=s.length?{value:void 0,done:!0}:(this[x].index=r+1,{value:s[r],done:!1})}},Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));function B(e){const t=Object.assign({__proto__:null},e[F]),i=_(e[F],"Host");return void 0!==i&&(t[i]=t[i][0]),t}Object.defineProperty(O,Symbol.toStringTag,{value:"HeadersIterator",writable:!1,enumerable:!1,configurable:!0});const E=Symbol("Response internals"),W=a.STATUS_CODES;class Response{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};v.call(this,e,t);const i=t.status||200,r=new Headers(t.headers);if(null!=e&&!r.has("Content-Type")){const t=k(e);t&&r.append("Content-Type",t)}this[E]={url:t.url,status:i,statusText:t.statusText||W[i],headers:r,counter:t.counter}}get url(){return this[E].url||""}get status(){return this[E].status}get ok(){return this[E].status>=200&&this[E].status<300}get redirected(){return this[E].counter>0}get statusText(){return this[E].statusText}get headers(){return this[E].headers}clone(){return new Response(A(this),{url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok,redirected:this.redirected})}}v.mixIn(Response.prototype),Object.defineProperties(Response.prototype,{url:{enumerable:!0},status:{enumerable:!0},ok:{enumerable:!0},redirected:{enumerable:!0},statusText:{enumerable:!0},headers:{enumerable:!0},clone:{enumerable:!0}}),Object.defineProperty(Response.prototype,Symbol.toStringTag,{value:"Response",writable:!1,enumerable:!1,configurable:!0});const N=Symbol("Request internals"),M=s.URL||c.URL,U=s.parse,L=s.format;function G(e){return/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(e)&&(e=new M(e).toString()),U(e)}const H="destroy"in n.Readable.prototype;function V(e){return"object"==typeof e&&"object"==typeof e[N]}class Request{constructor(e){let t,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};V(e)?t=G(e.url):(t=e&&e.href?G(e.href):G(`${e}`),e={});let r=i.method||e.method||"GET";if(r=r.toUpperCase(),(null!=i.body||V(e)&&null!==e.body)&&("GET"===r||"HEAD"===r))throw new TypeError("Request with GET/HEAD method cannot have body");let s=null!=i.body?i.body:V(e)&&null!==e.body?A(e):null;v.call(this,s,{timeout:i.timeout||e.timeout||0,size:i.size||e.size||0});const o=new Headers(i.headers||e.headers||{});if(null!=s&&!o.has("Content-Type")){const e=k(s);e&&o.append("Content-Type",e)}let n=V(e)?e.signal:null;if("signal"in i&&(n=i.signal),null!=n&&!function(e){const t=e&&"object"==typeof e&&Object.getPrototypeOf(e);return!(!t||"AbortSignal"!==t.constructor.name)}(n))throw new TypeError("Expected signal to be an instanceof AbortSignal");this[N]={method:r,redirect:i.redirect||e.redirect||"follow",headers:o,parsedURL:t,signal:n},this.follow=void 0!==i.follow?i.follow:void 0!==e.follow?e.follow:20,this.compress=void 0!==i.compress?i.compress:void 0===e.compress||e.compress,this.counter=i.counter||e.counter||0,this.agent=i.agent||e.agent}get method(){return this[N].method}get url(){return L(this[N].parsedURL)}get headers(){return this[N].headers}get redirect(){return this[N].redirect}get signal(){return this[N].signal}clone(){return new Request(this)}}function Y(e){Error.call(this,e),this.type="aborted",this.message=e,Error.captureStackTrace(this,this.constructor)}v.mixIn(Request.prototype),Object.defineProperty(Request.prototype,Symbol.toStringTag,{value:"Request",writable:!1,enumerable:!1,configurable:!0}),Object.defineProperties(Request.prototype,{method:{enumerable:!0},url:{enumerable:!0},headers:{enumerable:!0},redirect:{enumerable:!0},clone:{enumerable:!0},signal:{enumerable:!0}}),Y.prototype=Object.create(Error.prototype),Y.prototype.constructor=Y,Y.prototype.name="AbortError";const Q=s.URL||c.URL,q=n.PassThrough;function j(e,t){if(!j.Promise)throw new Error("native promise missing, set fetch.Promise to your favorite alternative");return v.Promise=j.Promise,new j.Promise((function(i,r){const s=new Request(e,t),o=function(e){const t=e[N].parsedURL,i=new Headers(e[N].headers);if(i.has("Accept")||i.set("Accept","*/*"),!t.protocol||!t.hostname)throw new TypeError("Only absolute URLs are supported");if(!/^https?:$/.test(t.protocol))throw new TypeError("Only HTTP(S) protocols are supported");if(e.signal&&e.body instanceof n.Readable&&!H)throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");let r=null;if(null==e.body&&/^(POST|PUT)$/i.test(e.method)&&(r="0"),null!=e.body){const t=P(e);"number"==typeof t&&(r=String(t))}r&&i.set("Content-Length",r),i.has("User-Agent")||i.set("User-Agent","node-fetch/1.0 (+https://github.com/bitinn/node-fetch)"),e.compress&&!i.has("Accept-Encoding")&&i.set("Accept-Encoding","gzip,deflate");let s=e.agent;return"function"==typeof s&&(s=s(t)),Object.assign({},t,{method:e.method,headers:B(i),agent:s})}(s),c=("https:"===o.protocol?l:a).request,u=s.signal;let d=null;const p=function(){let e=new Y("The user aborted a request.");r(e),s.body&&s.body instanceof n.Readable&&z(s.body,e),d&&d.body&&d.body.emit("error",e)};if(u&&u.aborted)return void p();const g=function(){p(),v()},f=c(o);let w;function v(){f.abort(),u&&u.removeEventListener("abort",g),clearTimeout(w)}u&&u.addEventListener("abort",g),s.timeout&&f.once("socket",(function(e){w=setTimeout((function(){r(new m(`network timeout at: ${s.url}`,"request-timeout")),v()}),s.timeout)})),f.on("error",(function(e){r(new m(`request to ${s.url} failed, reason: ${e.message}`,"system",e)),d&&d.body&&z(d.body,e),v()})),function(e,t){let i;e.on("socket",(function(e){i=e})),e.on("response",(function(e){const r=e.headers;"chunked"!==r["transfer-encoding"]||r["content-length"]||e.once("close",(function(e){if(i&&i.listenerCount("data")>0&&!e){const e=new Error("Premature close");e.code="ERR_STREAM_PREMATURE_CLOSE",t(e)}}))}))}(f,(function(e){u&&u.aborted||d&&d.body&&z(d.body,e)})),parseInt(process.version.substring(1))<14&&f.on("socket",(function(e){e.addListener("close",(function(t){const i=e.listenerCount("data")>0;if(d&&i&&!t&&(!u||!u.aborted)){const e=new Error("Premature close");e.code="ERR_STREAM_PREMATURE_CLOSE",d.body.emit("error",e)}}))})),f.on("response",(function(e){clearTimeout(w);const t=function(e){const t=new Headers;for(const i of Object.keys(e))if(!S.test(i))if(Array.isArray(e[i]))for(const r of e[i])D.test(r)||(void 0===t[F][i]?t[F][i]=[r]:t[F][i].push(r));else D.test(e[i])||(t[F][i]=[e[i]]);return t}(e.headers);if(j.isRedirect(e.statusCode)){const n=t.get("Location");let a=null;try{a=null===n?null:new Q(n,s.url).toString()}catch(e){if("manual"!==s.redirect)return r(new m(`uri requested responds with an invalid redirect URL: ${n}`,"invalid-redirect")),void v()}switch(s.redirect){case"error":return r(new m(`uri requested responds with a redirect, redirect mode is set to error: ${s.url}`,"no-redirect")),void v();case"manual":if(null!==a)try{t.set("Location",a)}catch(e){r(e)}break;case"follow":if(null===a)break;if(s.counter>=s.follow)return r(new m(`maximum redirect reached at: ${s.url}`,"max-redirect")),void v();const n={headers:new Headers(s.headers),follow:s.follow,counter:s.counter+1,agent:s.agent,compress:s.compress,method:s.method,body:s.body,signal:s.signal,timeout:s.timeout,size:s.size};if(!function(e,t){const i=new Q(t).hostname,r=new Q(e).hostname;return i===r||"."===i[i.length-r.length-1]&&i.endsWith(r)}(s.url,a)||(o=s.url,new Q(a).protocol!==new Q(o).protocol))for(const e of["authorization","www-authenticate","cookie","cookie2"])n.headers.delete(e);return 303!==e.statusCode&&s.body&&null===P(s)?(r(new m("Cannot follow redirect with body being a readable stream","unsupported-redirect")),void v()):(303!==e.statusCode&&(301!==e.statusCode&&302!==e.statusCode||"POST"!==s.method)||(n.method="GET",n.body=void 0,n.headers.delete("content-length")),i(j(new Request(a,n))),void v())}}var o;e.once("end",(function(){u&&u.removeEventListener("abort",g)}));let n=e.pipe(new q);const a={url:s.url,status:e.statusCode,statusText:e.statusMessage,headers:t,size:s.size,timeout:s.timeout,counter:s.counter},c=t.get("Content-Encoding");if(!s.compress||"HEAD"===s.method||null===c||204===e.statusCode||304===e.statusCode)return d=new Response(n,a),void i(d);const l={flush:h.Z_SYNC_FLUSH,finishFlush:h.Z_SYNC_FLUSH};if("gzip"==c||"x-gzip"==c)return n=n.pipe(h.createGunzip(l)),d=new Response(n,a),void i(d);if("deflate"==c||"x-deflate"==c){const t=e.pipe(new q);return t.once("data",(function(e){n=8==(15&e[0])?n.pipe(h.createInflate()):n.pipe(h.createInflateRaw()),d=new Response(n,a),i(d)})),void t.on("end",(function(){d||(d=new Response(n,a),i(d))}))}if("br"==c&&"function"==typeof h.createBrotliDecompress)return n=n.pipe(h.createBrotliDecompress()),d=new Response(n,a),void i(d);d=new Response(n,a),i(d)})),function(e,t){const i=t.body;null===i?e.end():C(i)?i.stream().pipe(e):Buffer.isBuffer(i)?(e.write(i),e.end()):i.pipe(e)}(f,s)}))}function z(e,t){e.destroy?e.destroy(t):(e.emit("error",t),e.end())}j.isRedirect=function(e){return 301===e||302===e||303===e||307===e||308===e},j.Promise=global.Promise;const K=j;var J=i(5148),Z=i(4336);function X(e){let t;const i=J.D.get("proxy");if(null!=i)t=i.url??void 0,e=e??i.strictSSL;else{"off"===J.D.getAny("http.proxySupport",void 0,"override")?e=e??!0:(e=e??J.D.getAny("http.proxyStrictSSL",void 0,!0),t=J.D.getAny("http.proxy")||r.env.HTTPS_PROXY||r.env.HTTP_PROXY)}return t?(Z.Yd.debug(`Using https proxy: ${t}`),new o.HttpsProxyAgent({...s.parse(t),rejectUnauthorized:e})):!1===e?new o.HttpsProxyAgent({rejectUnauthorized:!1}):void 0}async function ee(e,t){if("force"!==e)return t();const i=r.env.NODE_TLS_REJECT_UNAUTHORIZED;r.env.NODE_TLS_REJECT_UNAUTHORIZED="0";try{return await t()}finally{r.env.NODE_TLS_REJECT_UNAUTHORIZED=i}}},6150:(e,t,i)=>{function r(e){return Buffer.from(e,"utf8").toString("hex")}function s(e){return Buffer.from(e,"hex").toString("utf8")}i.d(t,{d:()=>s,e:()=>r})},4372:(e,t,i)=>{i.d(t,{a:()=>r.hrtime});var r=i(7282)},7338:(e,t,i)=>{i.d(t,{$L:()=>o,ED:()=>c,IJ:()=>n,Xf:()=>l});var r=i(7282),s=i(9496);const o=s.env.uiKind===s.UIKind.Web,n="linux"===r.platform,a="darwin"===r.platform,c="win32"===r.platform;function l(){return c?"windows":a?"macOS":n?"linux":o?"web":"unknown"}},4575:(e,t,i)=>{i.d(t,{$y:()=>AccessDeniedError,Bn:()=>ProviderRequestClientError,FU:()=>CancellationError,Jx:()=>o,MO:()=>ProviderNotFoundError,R5:()=>ExtensionNotFoundError,Ww:()=>ProviderRequestNotFoundError,Xq:()=>ProviderFetchError,_7:()=>AuthenticationError,dt:()=>AccountValidationError,kX:()=>OpenVirtualRepositoryError,sh:()=>n,yx:()=>ProviderRequestRateLimitError});var r=i(9496),s=i(4968);class AccessDeniedError extends Error{subscription;required;constructor(e,t){let i;i=!1===e.account?.verified?"Email verification required":null!=t&&(0,s.aG)(t)?"Paid plan required":"Plan required",super(i),this.subscription=e,this.required=t,Error.captureStackTrace?.(this,AccessDeniedError)}}class AccountValidationError extends Error{original;statusCode;statusText;constructor(e,t,i,r){super(e+=`; status=${i}: ${r}`),this.original=t,this.statusCode=i,this.statusText=r,Error.captureStackTrace?.(this,AccountValidationError)}}var o=(e=>(e[e.UserDidNotConsent=1]="UserDidNotConsent",e[e.Unauthorized=2]="Unauthorized",e[e.Forbidden=3]="Forbidden",e))(o||{});class AuthenticationError extends Error{id;original;reason;constructor(e,t,i){let r,s;if(null==t)r=`Unable to get required authentication session for '${e}'`;else if("string"==typeof t)r=t,s=void 0;else switch(s=t,s){case 1:r=`'${e}' authentication is required for this operation`;break;case 2:r=`Your '${e}' credentials are either invalid or expired`;break;case 3:r=`Your '${e}' credentials do not have the required access`}super(r),this.id=e,this.original=i,this.reason=s,Error.captureStackTrace?.(this,AuthenticationError)}}class CancellationError extends r.CancellationError{constructor(){super(),Error.captureStackTrace?.(this,CancellationError)}}class ExtensionNotFoundError extends Error{constructor(e,t){super(`Unable to find the ${t} extension (${e}). Please ensure it is installed and enabled.`),this.extensionId=e,this.extensionName=t,Error.captureStackTrace?.(this,ExtensionNotFoundError)}}var n=(e=>(e[e.RemoteHubApiNotFound=1]="RemoteHubApiNotFound",e[e.NotAGitHubRepository=2]="NotAGitHubRepository",e[e.GitHubAuthenticationNotFound=3]="GitHubAuthenticationNotFound",e[e.GitHubAuthenticationDenied=4]="GitHubAuthenticationDenied",e))(n||{});class OpenVirtualRepositoryError extends Error{original;reason;repoPath;constructor(e,t,i){let r,s;if(null==t)r=`Unable to open the virtual repository: ${e}`;else if("string"==typeof t)r=t,s=void 0;else switch(s=t,r=`Unable to open the virtual repository: ${e}; `,s){case 1:r+="Unable to get required api from the GitHub Repositories extension. Please ensure that the GitHub Repositories extension is installed and enabled";break;case 2:r+="Only GitHub repositories are supported currently";break;case 3:r+="Unable to get required GitHub authentication";break;case 4:r+="GitHub authentication is required"}super(r),this.original=i,this.reason=s,this.repoPath=e,Error.captureStackTrace?.(this,OpenVirtualRepositoryError)}}class ProviderFetchError extends Error{constructor(e,t,i){super(`${e} request failed: ${t.ok?"":`(${t.status}) ${t.statusText}. `}${i?.length?i[0].message:""}`),this.response=t,Error.captureStackTrace?.(this,ProviderFetchError)}get status(){return this.response.status}get statusText(){return this.response.statusText}}class ProviderNotFoundError extends Error{constructor(e){super(`No provider registered for '${null==e?String(e):"string"==typeof e?e:e.toString(!0)}'`),Error.captureStackTrace?.(this,ProviderNotFoundError)}}class ProviderRequestClientError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,ProviderRequestClientError)}}class ProviderRequestNotFoundError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,ProviderRequestNotFoundError)}}class ProviderRequestRateLimitError extends Error{constructor(e,t,i){super(e.message),this.original=e,this.token=t,this.resetAt=i,Error.captureStackTrace?.(this,ProviderRequestRateLimitError)}}},8887:(e,t,i)=>{i.d(t,{A:()=>r,x:()=>s});var r=(e=>(e.Stashes="stashes",e.Timeline="timeline",e.Worktrees="worktrees",e.StashOnlyStaged="stashOnlyStaged",e))(r||{}),s=(e=>(e.Timeline="timeline",e.Worktrees="worktrees",e.Graph="graph",e.Focus="focus",e))(s||{})},9311:(e,t,i)=>{i.d(t,{g:()=>a,m:()=>n});var r=i(5255),s=i(9529),o=i(7469);async function n(e){const t=(0,o.PQ)();return await(0,s.P0)(r.Gh.GitCommands,{...e,completion:t}),t.promise}async function a(e,t){await(0,s.b2)(r.Gh.BrowseRepoAtRevision,void 0,{uri:e,before:t?.before,openInNewWindow:t?.openInNewWindow})}},3401:(e,t,i)=>{i.d(t,{Od:()=>n,PQ:()=>a,Ue:()=>o,ay:()=>c});var r=i(3599),s=i(9311);function o(e,t,i){return(0,s.m)({command:"branch",state:{subcommand:"create",repo:e,reference:t,name:i}})}function n(e,t){return(0,s.m)({command:"branch",state:{subcommand:"delete",repo:e,references:t}})}function a(e,t,i){return(0,s.m)({command:"branch",state:{subcommand:"rename",repo:e,reference:t,name:i}})}async function c(e,t){const i=e.remote?r.W.instance.remotesView:r.W.instance.branchesView,s=i.canReveal?await i.revealBranch(e,t):await r.W.instance.repositoriesView.revealBranch(e,t);return null==s&&i.show({preserveFocus:!t?.focus}),s}},6897:(e,t,i)=>{i.d(t,{$H:()=>p,$J:()=>T,Dh:()=>$,E4:()=>I,Fw:()=>x,GM:()=>O,Gp:()=>g,Hl:()=>_,Os:()=>k,Ou:()=>w,SJ:()=>m,Uc:()=>B,Xy:()=>y,YM:()=>D,YS:()=>S,ZB:()=>P,aE:()=>R,ay:()=>F,ce:()=>b,iK:()=>C,tc:()=>A,vw:()=>v,wr:()=>f,zb:()=>d});var r=i(9496),s=i(5255),o=i(3599),n=i(9529),a=i(2509),c=i(7462),l=i(6450),h=i(439),u=i(4321);async function d(e,t,i){let s=!1,n=t.ref,a=i?.ref;if("string"!=typeof e)if("?"===e.status)n=`${n}^3`,s=!0;else if("A"===e.status)s=!0;else if("D"===e.status){const i=c.YY.fromFile(e,t.repoPath);try{await r.workspace.fs.stat(i)}catch{s=!0,a=n,n=`${n}^`}}if(s){const i=c.YY.fromFile(e,t.repoPath);await o.W.instance.git.applyChangesToWorkingFile(i,n,a),await P(i,{preserveFocus:!0,preview:!1})}else await P(e,t,{preserveFocus:!0,preview:!1}),await o.W.instance.git.applyChangesToWorkingFile(c.YY.fromFile(e,t.repoPath,n),n,a)}async function p(e){await r.env.clipboard.writeText(e.ref)}async function m(e){let t;if((0,l.f_)(e))t=e,null==t.message&&await t.ensureFullDetails();else if(t=await o.W.instance.git.getCommit(e.repoPath,e.ref),null==t)return;const i=t.message??t.summary;await r.env.clipboard.writeText(i)}async function g(e,t,i){let s,o;if((0,l.f_)(e)?(null==e.files&&await e.ensureFullDetails(),s=e.files??[],o={repoPath:e.repoPath,ref1:e.unresolvedPreviousSha,ref2:e.sha},i=t):(s=e,o=t),s.length>10){const e=await r.window.showWarningMessage(`Are you sure you want to open the changes for all ${s.length} files?`,{title:"Yes"},{title:"No",isCloseAffordance:!0});if(null==e||"No"===e.title)return}i={preserveFocus:!0,preview:!1,...i};for(const e of s)await v(e,o,i)}async function f(e,t){let i;if((0,l.f_)(e)?(null==e.files&&await e.ensureFullDetails(),i=e.files??[],t={repoPath:e.repoPath,ref:e.sha}):i=e,i.length>10){const e=await r.window.showWarningMessage(`Are you sure you want to open the changes for all ${i.length} files?`,{title:"Yes"},{title:"No",isCloseAffordance:!0});if(null==e||"No"===e.title)return}for(const e of i)y(e,t)}async function w(e,t,i){let s,o;if((0,l.f_)(e)?(null==e.files&&await e.ensureFullDetails(),s=e.files??[],o={repoPath:e.repoPath,ref:e.sha},i=t):(s=e,o=t),s.length>10){const e=await r.window.showWarningMessage(`Are you sure you want to open the changes for all ${s.length} files?`,{title:"Yes"},{title:"No",isCloseAffordance:!0});if(null==e||"No"===e.title)return}i={preserveFocus:!0,preview:!1,...i};for(const e of s)await b(e,o,i)}async function v(e,t,i){const r=(0,l.f_)(t);if("string"==typeof e){if(!r)throw new Error("Invalid arguments");const i=await t.findFile(e);if(null==i)throw new Error("Invalid arguments");e=i}if(i={preserveFocus:!0,preview:!1,...i},"A"===e.status&&r){const r=await t.getCommitForFile(e);return void(0,n.P0)(s.Gh.DiffWithPrevious,{commit:r,showOptions:i})}const o=r?{repoPath:t.repoPath,ref1:t.unresolvedPreviousSha,ref2:t.sha}:t,a=c.YY.fromFile(e,o.repoPath),h="R"===e.status||"C"===e.status?c.YY.fromFile(e,o.repoPath,o.ref1,!0):a;await(0,n.P0)(s.Gh.DiffWith,{repoPath:o.repoPath,lhs:{uri:h,sha:o.ref1},rhs:{uri:a,sha:o.ref2},showOptions:i})}async function y(e,t,i){if("string"==typeof e){if(!(0,l.f_)(t))throw new Error("Invalid arguments");const i=await t.findFile(e);if(null==i)throw new Error("Invalid arguments");e=i}return o.W.instance.git.openDiffTool(t.repoPath,c.YY.fromFile(e,e.repoPath??t.repoPath),{ref1:(0,u.l3)(t.ref)?"":`${t.ref}^`,ref2:(0,u.l3)(t.ref)?"":t.ref,staged:(0,u.rD)(t.ref)||null!=e.indexStatus,tool:i})}async function b(e,t,i){if("string"==typeof e){if(!(0,l.f_)(t))throw new Error("Invalid arguments");const i=await t.findFile(e);if(null==i)throw new Error("Invalid arguments");e=i}if("D"===e.status)return;let r;r=(0,l.f_)(t)?{repoPath:t.repoPath,ref:t.sha}:t,i={preserveFocus:!0,preview:!1,...i},await(0,n.b2)(s.Gh.DiffWithWorking,void 0,{uri:c.YY.fromFile(e,r.repoPath,r.ref),showOptions:i})}async function C(e,t,i,r){return o.W.instance.git.openDirectoryCompare(e,t,i,r)}async function A(e){return C(e.repoPath,e.ref,`${e.ref}^`)}async function k(e){return C(e.repoPath,e.ref,void 0)}async function P(e,t,i){let o;if(e instanceof r.Uri)o=e,i=t;else{const i=t;if(o=c.YY.fromFile(e,i.repoPath,i.ref),"string"!=typeof e&&"?"===e.status)return}i={preserveFocus:!0,preview:!1,...i},await(0,n.b2)(s.Gh.OpenWorkingFile,void 0,{uri:o,showOptions:i})}async function S(e,t,i){let s;if(e instanceof r.Uri){if((0,l.f_)(t))throw new Error("Invalid arguments");s=e,i=t}else{if(!(0,l.f_)(t))throw new Error("Invalid arguments");const i=t;let r;if("string"==typeof e){const t=await i.findFile(e);if(null==t)throw new Error("Invalid arguments");r=t}else r=e;s=o.W.instance.git.getRevisionUri("D"===r.status?await i.getPreviousSha()??h.Ii:i.sha,r,i.repoPath)}const{annotationType:n,line:c,...u}={preserveFocus:!0,preview:!1,...i};null!=c&&0!==c&&(u.selection=new r.Range(c,0,c,0));const d=await(0,a.GR)(s,u);null!=n&&null!=d&&await o.W.instance.fileAnnotations.show(d,n,{selection:{line:c}})}async function D(e,t){let i;if(e instanceof r.Uri)i=e;else{if(null==t)throw new Error("Invalid arguments");if(i=c.YY.fromFile(e,t.repoPath,t.ref),"string"!=typeof e&&"?"===e.status)return}await(0,n.P0)(s.Gh.OpenFileOnRemote,i,{sha:t?.ref})}async function R(e,t,i){let s;if((0,l.f_)(e)?(null==e.files&&await e.ensureFullDetails(),s=e.files??[],t=e.repoPath,i=e.sha):s=e,s.length>10){const e=await r.window.showWarningMessage(`Are you sure you want to open all ${s.length} files?`,{title:"Yes"},{title:"No",isCloseAffordance:!0});if(null==e||"No"===e.title)return}const n=(await Promise.all(s.map((e=>o.W.instance.git.getWorkingUri(t,c.YY.fromFile(e,t,i)))))).filter((e=>Boolean(e)));(0,a.$_)(n)}async function $(e,t,i,s){let n;if((0,l.f_)(e)?(null==e.files&&await e.ensureFullDetails(),n=e.files??[],t=e.repoPath,i=e.sha,s=await e.getPreviousSha()):n=e,n.length>10){const e=await r.window.showWarningMessage(`Are you sure you want to open all ${n.length} file revisions?`,{title:"Yes"},{title:"No",isCloseAffordance:!0});if(null==e||"No"===e.title)return}(0,a.$_)(n.map((e=>o.W.instance.git.getRevisionUri("D"===e.status?s:i,e,t))))}async function _(e,t){let i,s;if("string"==typeof e)i=e,s=t.ref;else if(i=e.path,"D"===e.status){const i=c.YY.fromFile(e,t.repoPath);try{await r.workspace.fs.stat(i),s=`${t.ref}^`}catch{s=t.ref}}else s="?"===e.status?`${t.ref}^3`:t.ref;await o.W.instance.git.checkout(t.repoPath,s,{path:i})}async function F(e,t){const i=[o.W.instance.commitsView,o.W.instance.branchesView,o.W.instance.remotesView];for(const r of i){const i=r.canReveal?await r.revealCommit(e,t):await o.W.instance.repositoriesView.revealCommit(e,t);if(null!=i)return i}i[0].show({preserveFocus:!t?.focus})}async function T(e,t){if(null==t)return void await(0,n.P0)(s.Gh.ShowQuickCommit,{commit:e});let i;i=t instanceof r.Uri?t:c.YY.fromFile(t,e.repoPath,e.ref),await(0,n.P0)(s.Gh.ShowQuickCommitFile,i,{sha:e.sha})}function x(e,t){const{preserveFocus:i,...r}={...t,commit:e};return o.W.instance.commitDetailsView.show({preserveFocus:i},r)}function I(e,t){const{preserveFocus:i,...r}={...t,commit:e};return o.W.instance.graphDetailsView.show({preserveFocus:i},r)}async function O(e,t){await(0,n.P0)(s.Gh.ShowInCommitGraph,{ref:(0,u.qj)(e),preserveFocus:t?.preserveFocus})}async function B(e){await e.ensureFullDetails();const t=e.files??[];if(t.length>10){const e=await r.window.showWarningMessage(`Are you sure you want to open all ${t.length} files?`,{title:"Yes"},{title:"No",isCloseAffordance:!0});if(null==e||"No"===e.title)return}await(0,n.P0)(s.Gh.OpenOnlyChangedFiles,{uris:t.filter((e=>"D"!==e.status)).map((e=>e.uri))})}},7445:(e,t,i)=>{i.d(t,{a:()=>n,q:()=>o});var r=i(3599),s=i(9311);function o(e,t){return(0,s.m)({command:"co-authors",state:{repo:e,contributors:t}})}async function n(e,t){const i=r.W.instance.contributorsView,s=i.canReveal?await i.revealContributor(e,t):await r.W.instance.repositoriesView.revealContributor(e,t);return null==s&&i.show({preserveFocus:!t?.focus}),s}},4155:(e,t,i)=>{i.d(t,{IH:()=>o,Od:()=>c,Qs:()=>a,ay:()=>l,he:()=>n});var r=i(3599),s=i(9311);function o(e,t,i,r){return(0,s.m)({command:"remote",confirm:r?.confirm,state:{repo:e,subcommand:"add",name:t,url:i,flags:r?.fetch?["-f"]:void 0,reveal:r?.reveal}})}async function n(e,t){if("string"==typeof e){const t=r.W.instance.git.getRepository(e);if(null==t)return;e=t}await e.fetch({remote:t})}async function a(e,t){return(0,s.m)({command:"remote",state:{repo:e,subcommand:"prune",remote:t}})}async function c(e,t){return(0,s.m)({command:"remote",state:{repo:e,subcommand:"remove",remote:t}})}async function l(e,t){const i=r.W.instance.remotesView,s=null!=e?i.canReveal?await i.revealRemote(e,t):await r.W.instance.repositoriesView.revealRemote(e,t):void 0;return null==s&&i.show({preserveFocus:!t?.focus}),s}},8834:(e,t,i)=>{i.d(t,{CU:()=>p,DW:()=>u,QP:()=>n,TS:()=>c,VF:()=>h,X4:()=>l,ay:()=>g,gu:()=>m,he:()=>a,mc:()=>d,qM:()=>f});var r=i(3599),s=i(9529),o=i(9311);function n(e,t){return(0,o.m)({command:"cherry-pick",state:{repo:e,references:t}})}function a(e,t){return(0,o.m)({command:"fetch",state:{repos:e,reference:t}})}function c(e,t){return(0,o.m)({command:"merge",state:{repo:e,reference:t}})}function l(e,t){return(0,o.m)({command:"pull",state:{repos:e,reference:t}})}function h(e,t,i){return(0,o.m)({command:"push",state:{repos:e,flags:t?["--force"]:[],reference:i}})}function u(e,t,i=!0){return(0,o.m)({command:"rebase",state:{repo:e,reference:t,flags:i?["--interactive"]:[]}})}function d(e,t,i){return(0,o.m)({command:"reset",confirm:null==i||i.includes("--hard"),state:{repo:e,reference:t,flags:i}})}function p(e,t){return(0,o.m)({command:"revert",state:{repo:e,references:t}})}function m(e,t,i){return(0,o.m)({command:"switch",state:{repos:e,reference:t},confirm:i})}async function g(e,t,i){const s=t?.canReveal?await t.revealRepository(e,i):await r.W.instance.repositoriesView.revealRepository(e,i);return null==s&&(t??r.W.instance.repositoriesView).show({preserveFocus:!i?.focus}),s}async function f(e){await(0,s.dO)("revealFileInOS",e.uri)}},252:(e,t,i)=>{i.d(t,{Cw:()=>n,Fw:()=>u,PQ:()=>a,Sw:()=>c,VF:()=>l,ay:()=>h,nn:()=>o});var r=i(3599),s=i(9311);function o(e,t){return(0,s.m)({command:"stash",state:{subcommand:"apply",repo:e,reference:t}})}function n(e,t){return(0,s.m)({command:"stash",state:{subcommand:"drop",repo:e,reference:t}})}function a(e,t,i){return(0,s.m)({command:"stash",state:{subcommand:"rename",repo:e,reference:t,message:i}})}function c(e,t){return(0,s.m)({command:"stash",state:{subcommand:"pop",repo:e,reference:t}})}function l(e,t,i,r=!1,o=!1,n){return(0,s.m)({command:"stash",state:{subcommand:"push",repo:e,uris:t,onlyStagedUris:n,message:i,flags:[...r?["--keep-index"]:[],...o?["--staged"]:[]]}})}async function h(e,t){const i=r.W.instance.stashesView,s=i.canReveal?await i.revealStash(e,t):await r.W.instance.repositoriesView.revealStash(e,t);return null==s&&i.show({preserveFocus:!t?.focus}),s}function u(e,t){const{preserveFocus:i,...s}={...t,commit:e};return r.W.instance.commitDetailsView.show({preserveFocus:i},s)}},6713:(e,t,i)=>{i.d(t,{Od:()=>n,Ue:()=>o,ay:()=>a});var r=i(3599),s=i(9311);function o(e,t,i){return(0,s.m)({command:"tag",state:{subcommand:"create",repo:e,reference:t,name:i}})}function n(e,t){return(0,s.m)({command:"tag",state:{subcommand:"delete",repo:e,references:t}})}async function a(e,t){const i=r.W.instance.tagsView,s=i.canReveal?await i.revealTag(e,t):await r.W.instance.repositoriesView.revealTag(e,t);return null==s&&i.show({preserveFocus:!t?.focus}),s}},5025:(e,t,i)=>{i.d(t,{BC:()=>p,Od:()=>l,Ue:()=>a,ay:()=>h,bA:()=>c,qM:()=>u});var r=i(3599),s=i(2800),o=i(9529),n=i(9311);function a(e,t,i,r){return(0,n.m)({command:"worktree",state:{subcommand:"create",repo:e,uri:t,reference:i,createBranch:r?.createBranch,flags:r?.createBranch?["-b"]:void 0,reveal:r?.reveal}})}function c(e,t){return(0,n.m)({command:"worktree",state:{subcommand:"open",repo:e.repoPath,uri:e.uri,flags:d(t?.location)}})}function l(e,t){return(0,n.m)({command:"worktree",state:{subcommand:"delete",repo:e,uris:(0,s.zx)(t)}})}async function h(e,t){const i=r.W.instance.worktreesView,s=null!=e?i.canReveal?await i.revealWorktree(e,t):await r.W.instance.repositoriesView.revealWorktree(e,t):void 0;return null==s&&i.show({preserveFocus:!t?.focus}),s}async function u(e){await(0,o.dO)("revealFileInOS",e.uri)}function d(e){if(null!=e)switch(e){case"newWindow":return["--new-window"];case"addToWorkspace":return["--add-to-workspace"];default:return[]}}function p(e){if(null!=e)return e.includes("--new-window")?"newWindow":e.includes("--add-to-workspace")?"addToWorkspace":"currentWindow"}},6592:(e,t,i)=>{i.d(t,{FD:()=>PushError,Nk:()=>WorktreeDeleteError,P6:()=>WorktreeCreateError,PK:()=>n,bk:()=>r,ef:()=>StashApplyError,g1:()=>s,gk:()=>o,hK:()=>c,kp:()=>FetchError,l0:()=>GitSearchError,q6:()=>WorkspaceUntrustedError,s8:()=>StashPushError,uI:()=>a,wG:()=>PullError,xe:()=>l});class GitSearchError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,GitSearchError)}}var r=(e=>(e[e.WorkingChanges=1]="WorkingChanges",e))(r||{});class StashApplyError extends Error{static is(e,t){return e instanceof StashApplyError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;null==e?i="Unable to apply stash":"string"==typeof e?(i=e,r=void 0):(r=e,i="Unable to apply stash. Your working tree changes would be overwritten. Please commit or stash your changes before trying again"),super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,StashApplyError)}}var s=(e=>(e[e.ConflictingStagedAndUnstagedLines=1]="ConflictingStagedAndUnstagedLines",e))(s||{});class StashPushError extends Error{static is(e,t){return e instanceof StashPushError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;if(null==e)i="Unable to stash";else if("string"==typeof e)i=e,r=void 0;else if(r=e,1===r)i="Stash was created, but the working tree cannot be updated because at least one file has staged and unstaged changes on the same line(s).\n\nDo you want to try again by stashing both your staged and unstaged changes?";else i="Unable to stash";super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,StashApplyError)}}var o=(e=>(e[e.RemoteAhead=1]="RemoteAhead",e[e.TipBehind=2]="TipBehind",e[e.PushRejected=3]="PushRejected",e[e.PermissionDenied=4]="PermissionDenied",e[e.RemoteConnection=5]="RemoteConnection",e[e.NoUpstream=6]="NoUpstream",e[e.Other=7]="Other",e))(o||{});class PushError extends Error{static is(e,t){return e instanceof PushError&&(null==t||e.reason===t)}original;reason;constructor(e,t,i,r){let s;const o=`Unable to push${i?` branch '${i}'`:""}${r?` to ${r}`:""}`;let n;if(null==e)s=o;else if("string"==typeof e)s=e,n=void 0;else switch(n=e,n){case 1:s=`${o} because the remote contains work that you do not have locally. Try doing a fetch first.`;break;case 2:s=`${o} as it is behind its remote counterpart. Try doing a pull first.`;break;case 3:s=`${o} because some refs failed to push or the push was rejected.`;break;case 4:s=`${o} because you don't have permission to push to this remote repository.`;break;case 5:s=`${o} because the remote repository could not be reached.`;break;case 6:s=`${o} because it has no upstream branch.`;break;default:s=o}super(s),this.original=t,this.reason=n,Error.captureStackTrace?.(this,PushError)}}var n=(e=>(e[e.Conflict=1]="Conflict",e[e.GitIdentity=2]="GitIdentity",e[e.RemoteConnection=3]="RemoteConnection",e[e.UnstagedChanges=4]="UnstagedChanges",e[e.UnmergedFiles=5]="UnmergedFiles",e[e.UncommittedChanges=6]="UncommittedChanges",e[e.OverwrittenChanges=7]="OverwrittenChanges",e[e.RefLocked=8]="RefLocked",e[e.RebaseMultipleBranches=9]="RebaseMultipleBranches",e[e.TagConflict=10]="TagConflict",e[e.Other=11]="Other",e))(n||{});class PullError extends Error{static is(e,t){return e instanceof PullError&&(null==t||e.reason===t)}original;reason;constructor(e,t,i,r){let s,o;const n=`Unable to pull${i?` branch '${i}'`:""}${r?` from ${r}`:""}`;if(null==e)s="Unable to pull";else if("string"==typeof e)s=e,o=void 0;else switch(o=e,o){case 1:s=`${n} due to conflicts.`;break;case 2:s=`${n} because you have not yet set up your Git identity.`;break;case 3:s=`${n} because the remote repository could not be reached.`;break;case 4:s=`${n} because you have unstaged changes.`;break;case 5:s=`${n} because you have unmerged files.`;break;case 6:s=`${n} because you have uncommitted changes.`;break;case 7:s=`${n} because local changes to some files would be overwritten.`;break;case 8:s=`${n} because a local ref could not be updated.`;break;case 9:s=`${n} because you are trying to rebase onto multiple branches.`;break;case 10:s=`${n} because a local tag would be overwritten.`;break;default:s=n}super(s),this.original=t,this.reason=o,Error.captureStackTrace?.(this,PullError)}}var a=(e=>(e[e.NoFastForward=1]="NoFastForward",e[e.NoRemote=2]="NoRemote",e[e.RemoteConnection=3]="RemoteConnection",e[e.Other=4]="Other",e))(a||{});class FetchError extends Error{static is(e,t){return e instanceof FetchError&&(null==t||e.reason===t)}original;reason;constructor(e,t,i,r){let s;const o=`Unable to fetch${i?` branch '${i}'`:""}${r?` from ${r}`:""}`;let n;if(null==e)s=o;else if("string"==typeof e)s=e,n=void 0;else switch(n=e,n){case 1:s=`${o} as it cannot be fast-forwarded`;break;case 2:s=`${o} without a remote repository specified.`;break;case 3:s=`${o}. Could not connect to the remote repository.`;break;default:s=o}super(s),this.original=t,this.reason=n,Error.captureStackTrace?.(this,FetchError)}}class WorkspaceUntrustedError extends Error{constructor(){super("Unable to perform Git operations because the current workspace is untrusted"),Error.captureStackTrace?.(this,WorkspaceUntrustedError)}}var c=(e=>(e[e.AlreadyCheckedOut=1]="AlreadyCheckedOut",e[e.AlreadyExists=2]="AlreadyExists",e))(c||{});class WorktreeCreateError extends Error{static is(e,t){return e instanceof WorktreeCreateError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;if(null==e)i="Unable to create worktree";else if("string"==typeof e)i=e,r=void 0;else switch(r=e,r){case 1:i="Unable to create worktree because it is already checked out";break;case 2:i="Unable to create worktree because it already exists"}super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,WorktreeCreateError)}}var l=(e=>(e[e.HasChanges=1]="HasChanges",e[e.MainWorkingTree=2]="MainWorkingTree",e))(l||{});class WorktreeDeleteError extends Error{static is(e,t){return e instanceof WorktreeDeleteError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;if(null==e)i="Unable to delete worktree";else if("string"==typeof e)i=e,r=void 0;else switch(r=e,r){case 1:i="Unable to delete worktree because there are uncommitted changes";break;case 2:i="Unable to delete worktree because it is a main working tree"}super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,WorktreeDeleteError)}}},9338:(e,t,i)=>{i.d(t,{i:()=>CommitFormatter});var r=i(8388),s=i(7139),o=i(1848),n=i(2138),a=i(4893),c=i(6199),l=i(1676),h=i(8918),u=i(5255),d=i(3599),p=i(3148),m=i(2215),g=i(5148),f=i(3105),w=i(7469),v=i(4627),y=i(6450),b=i(439),C=i(8452),A=i(4092),k=i(4321),P=i(3050),S=i(5485);class CommitFormatter extends S.M{reset(e,t){super.reset(e,t),null==this._options.outputFormat&&(this._options.outputFormat="plaintext")}get _authorDate(){return this._item.author.formatDate(this._options.dateFormat)}get _authorDateAgo(){return this._item.author.fromNow()}get _authorDateAgoShort(){return this._item.author.fromNow(!0)}get _committerDate(){return this._item.committer.formatDate(this._options.dateFormat)}get _committerDateAgo(){return this._item.committer.fromNow()}get _committerDateAgoShort(){return this._item.committer.fromNow(!0)}get _date(){return this._item.formatDate(this._options.dateFormat)}get _dateAgo(){return this._item.formatDateFromNow()}get _dateAgoShort(){return this._item.formatDateFromNow(!0)}get _pullRequestDate(){const{pullRequest:e}=this._options;return null!=e&&A.i7.is(e)?e.formatDate(this._options.dateFormat)??"":""}get _pullRequestDateAgo(){const{pullRequest:e}=this._options;return null!=e&&A.i7.is(e)?e.formatDateFromNow()??"":""}get _pullRequestDateOrAgo(){return"absolute"===(null!=this._options.dateStyle?this._options.dateStyle:g.D.get("defaultDateStyle"))?this._pullRequestDate:this._pullRequestDateAgo}get ago(){return this._padOrTruncate(this._dateAgo,this._options.tokenOptions.ago)}get agoOrDate(){const e=null!=this._options.dateStyle?this._options.dateStyle:g.D.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._date:this._dateAgo,this._options.tokenOptions.agoOrDate)}get agoOrDateShort(){const e=null!=this._options.dateStyle?this._options.dateStyle:g.D.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._date:this._dateAgoShort,this._options.tokenOptions.agoOrDateShort)}get author(){let{name:e,email:t}=this._item.author;const i=this._padOrTruncate(e,this._options.tokenOptions.author);switch(this._options.outputFormat){case"markdown":return`[${i}](${t?`mailto:${t} "Email ${e} (${t})"`:`# "${e}"`})`;case"html":return e=(0,v.se)(e),t=(0,v.se)(t),`<a ${t?`href="mailto:${t}" title="Email ${e} (${t})"`:`href="#" title="${e}"`})${this._options.htmlFormat?.classes?.author?` class="${this._options.htmlFormat.classes.author}"`:""}>${i}</a>`;default:return i}}get authorAgo(){return this._padOrTruncate(this._authorDateAgo,this._options.tokenOptions.authorAgo)}get authorAgoOrDate(){const e=null!=this._options.dateStyle?this._options.dateStyle:g.D.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._authorDate:this._authorDateAgo,this._options.tokenOptions.authorAgoOrDate)}get authorAgoOrDateShort(){const e=null!=this._options.dateStyle?this._options.dateStyle:g.D.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._authorDate:this._authorDateAgoShort,this._options.tokenOptions.authorAgoOrDateShort)}get authorDate(){return this._padOrTruncate(this._authorDate,this._options.tokenOptions.authorDate)}get authorNotYou(){let{name:e,email:t}=this._item.author;if("You"===e)return this._padOrTruncate("",this._options.tokenOptions.authorNotYou);const i=this._padOrTruncate(e,this._options.tokenOptions.authorNotYou);switch(this._options.outputFormat){case"markdown":return`[${i}](${t?`mailto:${t} "Email ${e} (${t})"`:`# "${e}"`})`;case"html":return e=(0,v.se)(e),t=(0,v.se)(t),`<a ${t?`href="mailto:${t}" title="Email ${e} (${t})"`:`href="#" title="${e}"`})${this._options.htmlFormat?.classes?.author?` class="${this._options.htmlFormat.classes.author}"`:""}>${i}</a>`;default:return i}}get avatar(){const{outputFormat:e}=this._options;if("plaintext"===e||!g.D.get("hovers.avatars"))return this._padOrTruncate("",this._options.tokenOptions.avatar);let{name:t}=this._item.author;const i=this._options.presence;if(null!=i){let r=`${t} ${"You"===t?"are":"is"} ${"dnd"===i.status?"in ":""}${i.statusText.toLocaleLowerCase()}`;"html"===e&&(r=(0,v.se)(r));return this._getAvatar(e,r,this._options.avatarSize).then((t=>this._padOrTruncate(`${t}${this._getPresence(e,i,r)}`,this._options.tokenOptions.avatar)))}return"html"===e&&(t=(0,v.se)(t)),this._getAvatar(e,t,this._options.avatarSize)}async _getAvatar(e,t,i){i=i??g.D.get("hovers.avatarSize");const r=this._item.getAvatarUri({defaultStyle:g.D.get("defaultGravatarsStyle"),size:i}),s=(await r).toString(!0);return this._padOrTruncate("html"===e?`<img src="${s}" alt="title)" title="${t}" width="${i}" height="${i}"${this._options.htmlFormat?.classes?.avatar?` class="${this._options.htmlFormat.classes.avatar}"`:""} />`:`![${t}](${s}|width=${i},height=${i} "${t}")`,this._options.tokenOptions.avatar)}_getPresence(e,t,i){return"html"===e?`<img src="${(0,r.TU)(t.status)}" alt="${i}" title="${i}"${this._options.htmlFormat?.classes?.avatarPresence?` class="${this._options.htmlFormat.classes.avatarPresence}"`:""}/>`:`![${i}](${(0,r.TU)(t.status)} "${i}")`}get changes(){return this._padOrTruncate((0,y.f_)(this._item)?this._item.formatStats():"",this._options.tokenOptions.changes)}get changesDetail(){return this._padOrTruncate((0,y.f_)(this._item)?this._item.formatStats({expand:!0,separator:", "}):"",this._options.tokenOptions.changesDetail)}get changesShort(){return this._padOrTruncate((0,y.f_)(this._item)?this._item.formatStats({compact:!0,separator:""}):"",this._options.tokenOptions.changesShort)}get commands(){if("plaintext"===this._options.outputFormat||"html"===this._options.outputFormat)return this._padOrTruncate("",this._options.tokenOptions.commands);let e;if(this._item.isUncommitted){const{previousLineComparisonUris:t}=this._options;return null!=t?.previous?(e=`[\`${this._padOrTruncate((0,k.zL)((0,k.rD)(t.current.sha)?t.current.sha:b.CL),this._options.tokenOptions.commands)}\`](${l.C.getMarkdownCommandArgs(this._item.sha,this._item.repoPath)} "Open Details")`,e+=` &nbsp;[$(chevron-left)$(compare-changes)](${o.V.getMarkdownCommandArgs({lhs:{sha:t.previous.sha??"",uri:t.previous.documentUri()},rhs:{sha:t.current.sha??"",uri:t.current.documentUri()},repoPath:this._item.repoPath,line:this._options.editor?.line})} "Open Changes with Previous Revision")`,e+=` &nbsp;[$(versions)](${a.D.getMarkdownCommandArgs(d.W.instance.git.getRevisionUri(t.previous),"blame",this._options.editor?.line)} "Open Blame Prior to this Change")`):e=`[\`${this._padOrTruncate((0,k.zL)(this._item.isUncommittedStaged?b.pw:b.CL),this._options.tokenOptions.commands)}\`](${l.C.getMarkdownCommandArgs(this._item.sha,this._item.repoPath)} "Open Details")`,e}const t=" &nbsp;&nbsp;|&nbsp;&nbsp; ";if(e=`---\n\n[\`$(git-commit) ${this.id}\`](${l.C.getMarkdownCommandArgs(this._item.sha,this._item.repoPath)} "Open Details")`,e+=` &nbsp;[$(chevron-left)$(compare-changes)](${o.V.getMarkdownCommandArgs(this._item,this._options.editor?.line)} "Open Changes with Previous Revision")`,null!=this._item.file&&null!=this._item.unresolvedPreviousSha){const t=d.W.instance.git.getRevisionUri(this._item.unresolvedPreviousSha,this._item.file.originalPath??this._item.file?.path,this._item.repoPath);e+=` &nbsp;[$(versions)](${a.D.getMarkdownCommandArgs(t,"blame",this._options.editor?.line)} "Open Blame Prior to this Change")`}e+=` &nbsp;[$(search)](${s.mY.getMarkdownCommandArgsCore(u.Gh.RevealCommitInView,{repoPath:this._item.repoPath,sha:this._item.sha,revealInView:!0})} "Reveal in Side Bar")`,(0,m.L)()&&(e+=` &nbsp;[$(gitlens-graph)](${s.mY.getMarkdownCommandArgsCore(u.Gh.ShowInCommitGraph,{ref:(0,k.qj)(this._item)})} "Open in Commit Graph")`);const{pullRequest:i,remotes:r}=this._options;if(r?.length){const t=P.ss.getHighlanderProviders(r);e+=` &nbsp;[$(globe)](${n._.getMarkdownCommandArgs(this._item.sha)} "Open Commit on ${t?.length?t[0].name:"Remote"}")`}if(null!=i)A.i7.is(i)?e+=`${t}[$(git-pull-request) PR #${i.id}](${D("openPullRequest",{repoPath:this._item.repoPath,provider:{id:i.provider.id,name:i.provider.name,domain:i.provider.domain},pullRequest:{id:i.id,url:i.url}})} "Open Pull Request \\#${i.id}${1==d.W.instance.actionRunners.count("openPullRequest")?` on ${i.provider.name}`:"..."}\n${u.NE.Dash.repeat(2)}\n${(0,v.ry)(i.title).replace(/"/g,'\\"')}\n${i.state}, ${i.formatDateFromNow()}")`:(0,w.tI)(i)&&(e+=`${t}[$(git-pull-request) PR $(loading~spin)](command:${u.Gh.RefreshHover} "Searching for a Pull Request (if any) that introduced this commit...")`);else if(null!=r){const[i]=r;i?.hasRichIntegration()&&!i.provider.maybeConnected&&g.D.get("integrations.enabled")&&(e+=`${t}[$(plug) Connect to ${i?.provider.name}${u.NE.Ellipsis}](${c.t.getMarkdownCommandArgs(i)} "Connect to ${i.provider.name} to enable the display of the Pull Request (if any) that introduced this commit")`)}if(d.W.instance.actionRunners.count("hover.commands")>0){const{name:i,email:r}=this._item.author;e+=`${t}[$(organization) Team${u.NE.SpaceThinnest}${u.NE.Ellipsis}](${D("hover.commands",{repoPath:this._item.repoPath,commit:{sha:this._item.sha,author:{name:i,email:r,presence:this._options.presence}},file:null!=this._options.editor?{uri:this._options.editor?.uri.toString(),line:this._options.editor?.line}:void 0})} "Show Team Actions")`}const p=this._item.getGitUri();return e+=`${t}[$(ellipsis)](${h.M.getMarkdownCommandArgs(null!=p?{revisionUri:d.W.instance.git.getRevisionUri(p).toString(!0)}:{commit:this._item})} "Show More Actions")`,this._padOrTruncate(e,this._options.tokenOptions.commands)}get committerAgo(){return this._padOrTruncate(this._committerDateAgo,this._options.tokenOptions.committerAgo)}get committerAgoOrDate(){const e=null!=this._options.dateStyle?this._options.dateStyle:g.D.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._committerDate:this._committerDateAgo,this._options.tokenOptions.committerAgoOrDate)}get committerAgoOrDateShort(){const e=null!=this._options.dateStyle?this._options.dateStyle:g.D.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._committerDate:this._committerDateAgoShort,this._options.tokenOptions.committerAgoOrDateShort)}get committerDate(){return this._padOrTruncate(this._committerDate,this._options.tokenOptions.committerDate)}get date(){return this._padOrTruncate(this._date,this._options.tokenOptions.date)}get email(){const{email:e}=this._item.author;return this._padOrTruncate(e??"",this._options.tokenOptions.email)}get footnotes(){const{outputFormat:e}=this._options;return this._padOrTruncate(null==this._options.footnotes||0===this._options.footnotes.size?"":(0,f.v_)((0,f.UI)(this._options.footnotes,(([t,i])=>"plaintext"===e?`${(0,v.sC)(t)} ${i}`:i)),"html"===e?"<br \\>":"markdown"===e?"\\\n":"\n"),this._options.tokenOptions.footnotes)}get id(){const e=this._padOrTruncate(this._item.shortSha??"",this._options.tokenOptions.id);return"plaintext"!==this._options.outputFormat&&this._options.unpublished?`<span style="color:#35b15e;"${this._options.htmlFormat?.classes?.id?` class="${this._options.htmlFormat.classes.id}"`:""}>${e} (unpublished)</span>`:e}get link(){let e;switch(this._options.outputFormat){case"markdown":e=`[\`$(git-commit) ${this._padOrTruncate(this._item.shortSha??"",this._options.tokenOptions.id)}\`](${l.C.getMarkdownCommandArgs(this._item.sha,this._item.repoPath)} "Open Details")`;break;case"html":{const t=this._padOrTruncate(this._item.shortSha??"",this._options.tokenOptions.id);e=`<a href="${l.C.getMarkdownCommandArgs(this._item.sha,this._item.repoPath)}" title="Open Details"${this._options.htmlFormat?.classes?.link?` class="${this._options.htmlFormat.classes.link}"`:""}><span class="codicon codicon-git-commit"></span>${t}</a>`;break}default:return this.id}return this._padOrTruncate(e,this._options.tokenOptions.link)}get message(){const{outputFormat:e}=this._options;if(this._item.isUncommitted){const t=this._item.file?.hasConflicts??!1,i=this._item.isUncommittedStaged||(this._options.previousLineComparisonUris?.current?.isUncommittedStaged??!1);let r=(t?"Merge":i?"Staged":"Uncommitted")+" changes";switch(e){case"html":r=`<span ${this._options.htmlFormat?.classes?.message?`class="${this._options.htmlFormat.classes.message}"`:""}>${r}</span>`;break;case"markdown":r=`\n> ${r}`}return this._padOrTruncate(r,this._options.tokenOptions.message)}let t=(this._options.messageTruncateAtNewLine?this._item.summary:this._item.message??this._item.summary).trim().replace(/\r?\n/g,"\n");switch(t=(0,p.X)(t),t=this._padOrTruncate(t,this._options.tokenOptions.message),"plaintext"!==e&&(t=(0,v.se)(t)),"markdown"===e&&(t=(0,v.ry)(t,{quoted:!0})),this._options.messageAutolinks&&(t=d.W.instance.autolinks.linkify(t,e,this._options.remotes,this._options.enrichedAutolinks,null==this._options.pullRequest||(0,w.tI)(this._options.pullRequest)?void 0:new Set([this._options.pullRequest.id]),this._options.footnotes)),null!=this._options.messageIndent&&"plaintext"===e&&(t=t.replace(/^/gm,u.NE.Space.repeat(this._options.messageIndent))),e){case"html":return`<span ${this._options.htmlFormat?.classes?.id?`class="${this._options.htmlFormat.classes.id}"`:""}>${t}</span>`;case"markdown":return`\n> ${t}`;default:return t}}get pullRequest(){const{pullRequest:e}=this._options;if(null==e||"html"===this._options.outputFormat)return this._padOrTruncate("",this._options.tokenOptions.pullRequest);let t;if(A.i7.is(e))if("markdown"===this._options.outputFormat){if(t=`PR [**#${e.id}**](${D("openPullRequest",{repoPath:this._item.repoPath,provider:{id:e.provider.id,name:e.provider.name,domain:e.provider.domain},pullRequest:{id:e.id,url:e.url}})} "Open Pull Request \\#${e.id}${1==d.W.instance.actionRunners.count("openPullRequest")?` on ${e.provider.name}`:"..."}\n${u.NE.Dash.repeat(2)}\n${(0,v.ry)(e.title).replace(/"/g,'\\"')}\n${e.state}, ${e.formatDateFromNow()}")`,null!=this._options.footnotes){const t=(0,v.ry)(e.title).replace(/"/g,'\\"').trim(),i=this._options.footnotes.size+1;this._options.footnotes.set(i,`${(0,C.sy)(e)} [**${t}**](${e.url} "Open Pull Request \\#${e.id} on ${e.provider.name}")\\\n${u.NE.Space.repeat(4)} #${e.id} ${e.state} ${e.formatDateFromNow()}`)}}else if(null!=this._options.footnotes){const i=this._options.footnotes.size+1;this._options.footnotes.set(i,`PR #${e.id}: ${e.title}  ${u.NE.Dot}  ${e.state}, ${e.formatDateFromNow()}`),t=`PR #${e.id}${(0,v.sC)(i)}`}else t=`PR #${e.id}`;else{if(!(0,w.tI)(e))return this._padOrTruncate("",this._options.tokenOptions.pullRequest);t="markdown"===this._options.outputFormat?`[PR $(loading~spin)](command:${u.Gh.RefreshHover} "Searching for a Pull Request (if any) that introduced this commit...")`:this._options?.pullRequestPendingMessage??""}return this._padOrTruncate(t,this._options.tokenOptions.pullRequest)}get pullRequestAgo(){return this._padOrTruncate(this._pullRequestDateAgo,this._options.tokenOptions.pullRequestAgo)}get pullRequestAgoOrDate(){return this._padOrTruncate(this._pullRequestDateOrAgo,this._options.tokenOptions.pullRequestAgoOrDate)}get pullRequestDate(){return this._padOrTruncate(this._pullRequestDate,this._options.tokenOptions.pullRequestDate)}get pullRequestState(){const{pullRequest:e}=this._options;return this._padOrTruncate(null!=e&&A.i7.is(e)?e.state??"":"",this._options.tokenOptions.pullRequestState)}get sha(){return this._padOrTruncate(this._item.shortSha??"",this._options.tokenOptions.sha)}get stashName(){return this._padOrTruncate(this._item.stashName??"",this._options.tokenOptions.stashName)}get stashNumber(){return this._padOrTruncate(this._item.number??"",this._options.tokenOptions.stashNumber)}get stashOnRef(){return this._padOrTruncate(this._item.stashOnRef??"",this._options.tokenOptions.stashOnRef)}get tips(){let e=this._options.getBranchAndTagTips?.(this._item.sha,{icons:"markdown"===this._options.outputFormat});if(null!=e&&"plaintext"!==this._options.outputFormat){const t=e.split(", ");e=t.map((e=>`<span style="color:#ffffff;background-color:#1d76db;"${this._options.htmlFormat?.classes?.tips?` class="${this._options.htmlFormat.classes.tips}"`:""}>&nbsp;&nbsp;${e}&nbsp;&nbsp;</span>`)).join(u.NE.Space.repeat(3))}return this._padOrTruncate(e??"",this._options.tokenOptions.tips)}static fromTemplate(e,t,i){if(null!=i&&"string"!=typeof i||(i={dateFormat:i}),CommitFormatter.has(e,"footnotes")&&null==i.footnotes&&(i.footnotes=new Map),CommitFormatter.has(e,"avatar")&&i?.outputFormat)throw new Error("Invalid template token 'avatar' used in non-async call");return super.fromTemplateCore(this,e,t,i)}static fromTemplateAsync(e,t,i){return CommitFormatter.has(e,"footnotes")&&(null!=i&&"string"!=typeof i||(i={dateFormat:i}),null==i.footnotes&&(i.footnotes=new Map)),super.fromTemplateCoreAsync(this,e,t,i)}static has(e,...t){return super.has(e,...t)}}function D(e,t){return s.mY.getMarkdownCommandArgsCore(`${u.Gh.ActionPrefix}${e}`,{...t,type:e})}},5485:(e,t,i)=>{i.d(t,{M:()=>Formatter});var r=i(4627);const s=new Map,o=/ /g;class Formatter{_item;_options;constructor(e,t){this.reset(e,t)}reset(e,t){this._item=e,this.collapsableWhitespace=0,null==t&&null!=this._options||(null==t&&(t={}),null==t.dateFormat&&(t.dateFormat="MMMM Do, YYYY h:mma"),null==t.tokenOptions&&(t.tokenOptions={}),this._options=t)}collapsableWhitespace=0;_padOrTruncate(e,t){if(null==e||0===e.length)return e;null==t&&(t={collapseWhitespace:!1,padDirection:"left",prefix:void 0,suffix:void 0,truncateTo:void 0});let i=t.truncateTo;if(null==i)this.collapsableWhitespace=0;else{i+=this.collapsableWhitespace,this.collapsableWhitespace=0;const s=(0,r.dz)(e),o=i-s;o>0?(t.collapseWhitespace&&(this.collapsableWhitespace=o),"left"===t.padDirection?e=(0,r.Q_)(e,i,void 0,s):(t.collapseWhitespace&&(i-=o),e=(0,r.eh)(e,i,void 0,s))):o<0&&(e=(0,r.$G)(e,i,void 0,s))}return(t.prefix||t.suffix)&&(e=`${t.prefix??""}${e}${t.suffix??""}`),e}static _formatter=void 0;static fromTemplateCore(e,t,i,s){if(t=t.replace(o," "),e instanceof Formatter)return(0,r.sX)(t,e);let n;if(n=null==s||"string"==typeof s?{dateFormat:s}:s,null==n.tokenOptions){const e=(0,r.Gg)(t).reduce(((e,t)=>(e[t.key]=t.options,e)),Object.create(null));n.tokenOptions=e}return null==this._formatter?this._formatter=new e(i,n):this._formatter.reset(i,n),(0,r.sX)(t,this._formatter)}static fromTemplateCoreAsync(e,t,i,s){if(t=t.replace(o," "),e instanceof Formatter)return(0,r.Qu)(t,e);let n;if(n=null==s||"string"==typeof s?{dateFormat:s}:s,null==n.tokenOptions){const e=(0,r.Gg)(t).reduce(((e,t)=>(e[t.key]=t.options,e)),Object.create(null));n.tokenOptions=e}return null==this._formatter?this._formatter=new e(i,n):this._formatter.reset(i,n),(0,r.Qu)(t,this._formatter)}static has(e,...t){const i=1===t.length?t[0]:`(${t.join("|")})`;let r=s.get(i);return null==r&&(r=new RegExp(`\\b${i}\\b`),s.set(i,r)),r.test(e)}}},6373:(e,t,i)=>{i.d(t,{o:()=>StatusFileFormatter});var r=i(5255),s=i(3700),o=i(7881),n=i(5485);class StatusFileFormatter extends n.M{get directory(){const e=(0,o.OC)(this._item,!1,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.directory)}get file(){const e=(0,s.EZ)(this._item.path);return this._padOrTruncate(e,this._options.tokenOptions.file)}get filePath(){const e=(0,o.PM)(this._item,{relativeTo:this._options.relativePath,truncateTo:this._options.tokenOptions.filePath?.truncateTo});return this._padOrTruncate(e,this._options.tokenOptions.filePath)}get originalPath(){const e=(0,o.Gv)(this._item,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.originalPath)}get path(){const e=(0,o.W5)(this._item,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.path)}get status(){const e=(0,o.K9)(this._item.status);return this._padOrTruncate(e,this._options.tokenOptions.status)}get working(){let e="";return e=null!=this._item.workingTreeStatus&&null!=this._item.indexStatus?`${r.NE.Pencil}${r.NE.Space}${r.NE.SpaceThinnest}${r.NE.Check}`:null!=this._item.workingTreeStatus?`${r.NE.Pencil}${r.NE.SpaceThin}${r.NE.SpaceThinnest}${r.NE.EnDash}${r.NE.Space}`:null!=this._item.indexStatus?`${r.NE.Space}${r.NE.EnDash}${r.NE.Space.repeat(2)}${r.NE.Check}`:"",this._padOrTruncate(e,this._options.tokenOptions.working)}get changes(){return this._padOrTruncate(o.K8.is(this._item)?this._item.formatStats():"",this._options.tokenOptions.changes)}get changesDetail(){return this._padOrTruncate(o.K8.is(this._item)?this._item.formatStats({expand:!0,separator:", "}):"",this._options.tokenOptions.changesDetail)}get changesShort(){return this._padOrTruncate(o.K8.is(this._item)?this._item.formatStats({compact:!0,separator:""}):"",this._options.tokenOptions.changesShort)}static fromTemplate(e,t,i){return super.fromTemplateCore(this,e,t,i)}}},7462:(e,t,i)=>{i.d(t,{Tg:()=>k,Wj:()=>C,YY:()=>b,uy:()=>A});var r=i(9496),s=i(6150),o=i(4398),n=i(5255),a=i(3599),c=i(4298),l=i(4241),h=i(4488),u=i(1774),d=i(3700),p=i(2509),m=i(439),g=i(4321),f=Object.defineProperty,w=Object.getOwnPropertyDescriptor,v=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?w(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&f(t,i,o),o};const y=class _GitUri extends r.Uri{repoPath;sha;constructor(e,t){if(null==e)return void super({scheme:"unknown"});if(e.scheme===n.sN.GitLens){super({scheme:e.scheme,authority:e.authority,path:e.path,query:e.query,fragment:e.fragment});const i=function(e){return JSON.parse((0,s.d)(e))}(e.authority);this.repoPath=i.repoPath;let r=i.ref;return null!=t&&"string"!=typeof t&&(r=t.sha),void(!(0,g.rD)(r)&&(0,g.l3)(r)||(this.sha=r))}if((0,p.pt)(e)){super(e);const[,i,r]=e.path.split("/",3);this.repoPath=e.with({path:`/${i}/${r}`}).toString();const o=function(e){const[t,i]=e.authority.split("+");let r;if(i)try{r=JSON.parse((0,s.d)(i))}catch{}return{scheme:t,metadata:r}}(e);let n=o.metadata?.ref?.id;return null!=t&&"string"!=typeof t&&(n=t.sha),void(!n||!(0,g.rD)(n)&&(0,g.l3)(n)||(this.sha=n))}if(void 0===t)return void super(e);if("string"==typeof t)return super(e),void(this.repoPath=t);let i,r=e.authority,o=(0,d.AH)(a.W.instance.git.getAbsoluteUri(t.fileName??e.fsPath,t.repoPath).fsPath);if(47===o.charCodeAt(0)&&47===o.charCodeAt(1)){const e=o.indexOf("/",2);-1===e?(r=o.substring(2),o="/"):(r=o.substring(2,e),o=o.substring(e)||"/")}switch(e.scheme){case"https":case"http":case"file":i=o?47!==o.charCodeAt(0)?`/${o}`:o:"/";break;default:i=47!==o.charCodeAt(0)?`/${o}`:o}super({scheme:e.scheme,authority:r,path:i,query:e.query,fragment:e.fragment}),this.repoPath=t.repoPath,!(0,g.rD)(t.sha)&&(0,g.l3)(t.sha)||(this.sha=t.sha)}get directory(){return(0,d.Fd)(this.relativePath)}get fileName(){return(0,d.EZ)(this.relativePath)}get isUncommitted(){return(0,g.l3)(this.sha)}get isUncommittedStaged(){return(0,g.rD)(this.sha)}get relativePath(){return(0,d.uo)((0,d.M)(this.fsPath),this.repoPath)[0]}get shortSha(){return(0,g.zL)(this.sha)}documentUri(){return r.Uri.from({scheme:this.scheme,authority:this.authority,path:this.path,query:this.query,fragment:this.fragment})}equals(e){return!!c.n.equals(this,e)&&this.sha===(A(e)?e.sha:void 0)}getFormattedFileName(e){return(0,u.d)(this.fsPath,{...e,fileOnly:!0})}toFileUri(){return a.W.instance.git.getAbsoluteUri(this.fsPath,this.repoPath)}static fromFile(e,t,i,r=!1){const s=a.W.instance.git.getAbsoluteUri("string"==typeof e?e:r&&e.originalPath||e.path,t);return new _GitUri(s,i?{repoPath:t,sha:"string"!=typeof e&&"?"===e.status?`${i}^3`:i}:t)}static fromRepoPath(e,t){return new _GitUri(a.W.instance.git.getAbsoluteUri(e,e),t?{repoPath:e,sha:t}:e)}static fromRevisionUri(e){return new _GitUri(e)}static async fromUri(e){if(A(e))return e;if(!a.W.instance.git.isTrackable(e))return new _GitUri(e);if(e.scheme===n.sN.GitLens)return new _GitUri(e);if(e.scheme===n.sN.Git){const t=(0,o.h)(e);if(t?.path){const i=await a.W.instance.git.getOrOpenRepository(r.Uri.file(t.path));if(null==i)throw new Error(`Unable to find repository for uri=${r.Uri.file(t.path).toString(!0)}`);let s;switch(t.ref){case"":case"~":s=m.pw;break;case null:s=void 0;break;default:s=t.ref}const o={fileName:t.path,repoPath:i.path,sha:s};return new _GitUri(e,o)}}if(e.scheme===n.sN.PRs){let t;try{t=JSON.parse(e.query)}catch{}if(t?.fileName){const i=await a.W.instance.git.getOrOpenRepository(e);if(null==i)throw new Error(`Unable to find repository for uri=${r.Uri.file(t.fileName).toString(!0)}`);const s={fileName:t.fileName,repoPath:i.path,sha:t.isBase?t.baseCommit:t.headCommit};return new _GitUri(e,s)}}const t=await a.W.instance.git.getOrOpenRepository(e);return new _GitUri(e,t?.path)}};v([(0,h.H)()],y.prototype,"directory",1),v([(0,h.H)()],y.prototype,"fileName",1),v([(0,h.H)()],y.prototype,"isUncommitted",1),v([(0,h.H)()],y.prototype,"isUncommittedStaged",1),v([(0,h.H)()],y.prototype,"relativePath",1),v([(0,h.H)()],y.prototype,"shortSha",1),v([(0,h.H)()],y.prototype,"documentUri",1),v([(0,h.H)()],y.prototype,"toFileUri",1),v([(0,l.fF)({exit:!0})],y,"fromUri",1);let b=y;const C=Object.freeze(new b);function A(e){return e instanceof b}function k(e){return(0,s.e)(JSON.stringify(e))}},5367:(e,t,i)=>{i.d(t,{$q:()=>b,BF:()=>k,Iq:()=>v,Lo:()=>A,RJ:()=>y,S3:()=>C,Vx:()=>w,XI:()=>GitBranch,YF:()=>S,eK:()=>D,uz:()=>P});var r=i(5148),s=i(7512),o=i(4241),n=i(4488),a=i(4336),c=i(5116),l=i(4627),h=i(4321),u=i(827),d=Object.defineProperty,p=Object.getOwnPropertyDescriptor,m=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?p(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&d(t,i,o),o};const g=/\s/,f=/^(?=.*\bHEAD\b)?(?=.*\bdetached\b).*$/;function w(e,t,i){return`${e}|${t?"remotes/":"heads/"}${i}`}class GitBranch{constructor(e,t,i,r,s,o,n,a,c=0,l=0,h=!1,u=!1){this.container=e,this.repoPath=t,this.name=i,this.remote=r,this.current=s,this.date=o,this.sha=n,this.rebasing=u,this.id=w(t,r,i),this.detached=h||!!this.current&&P(i),this.detached&&(this.name=v(this.sha)),this.upstream=null==a?.name||0===a.name.length?void 0:a,this.state={ahead:c,behind:l}}refType="branch";detached;id;upstream;state;toString(){return`${(0,a.q4)(this)}(${this.id})`}get formattedDate(){return"absolute"===this.container.BranchDateFormatting.dateStyle?this.formatDate(this.container.BranchDateFormatting.dateFormat):this.formatDateFromNow()}get ref(){return this.detached?this.sha:this.name}formatDate(e){return null!=this.date?(0,s.p6)(this.date,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(){return null!=this.date?(0,s.Zh)(this.date):""}async getAssociatedPullRequest(e){const t=await this.getRemote();return t?.hasRichIntegration()?t.provider.getPullRequestForBranch(this.getTrackingWithoutRemote()??this.getNameWithoutRemote(),e):void 0}getBasename(){const e=this.getNameWithoutRemote(),t=e.lastIndexOf("/");return-1!==t?e.substring(t+1):e}getNameWithoutRemote(){return this.remote?this.name.substring(y(this.name)+1):this.name}getTrackingWithoutRemote(){return(0,h.Gn)(this)}async getRemote(){const e=this.getRemoteName();if(null==e)return;const t=await this.container.git.getRemotes(this.repoPath);return t.length?t.find((t=>t.name===e)):void 0}getRemoteName(){return this.remote?A(this.name):null!=this.upstream?A(this.upstream.name):void 0}async getStatus(){if(this.remote)return"remote";if(null!=this.upstream)return this.upstream.missing?"missingUpstream":this.state.ahead&&this.state.behind?"diverged":this.state.ahead?"ahead":this.state.behind?"behind":"upToDate";return(await this.container.git.getRemotes(this.repoPath)).length?"unpublished":"local"}getTrackingStatus(e){return(0,u.JP)(this.upstream,this.state,e)}get starred(){const e=this.container.storage.getWorkspace("starred:branches");return void 0!==e&&!0===e[this.id]}star(){return this.container.git.getRepository(this.repoPath)?.star(this)}unstar(){return this.container.git.getRepository(this.repoPath)?.unstar(this)}}function v(e){return`(${(0,h.zL)(e)}...)`}function y(e){return e.startsWith("remotes/")?e.indexOf("/",8):e.indexOf("/")}function b(e){if(e.remote){const t=y(e.name);return-1===t?[e.name,void 0]:[e.name.substring(t+1),e.name.substring(0,t)]}if(null!=e.upstream?.name){const t=y(e.upstream.name);return-1===t?[e.name,void 0]:[e.name,e.upstream.name.substring(0,t)]}return[e.name,void 0]}function C(e){return e.substring(y(e)+1)}function A(e){return e.substring(0,y(e))}function k(e){return e instanceof GitBranch}function P(e){return g.test(e)||f.test(e)}function S(e,t){switch((t={current:!0,orderBy:r.D.get("sortBranchesBy"),...t}).orderBy){case"date:asc":return e.sort(((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||(i.remote?-1:1)-(e.remote?-1:1)||(null==e.date?-1:e.date.getTime())-(null==i.date?-1:i.date.getTime())));case"name:asc":return e.sort(((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||("main"===e.name?-1:1)-("main"===i.name?-1:1)||("master"===e.name?-1:1)-("master"===i.name?-1:1)||("develop"===e.name?-1:1)-("develop"===i.name?-1:1)||(i.remote?-1:1)-(e.remote?-1:1)||(0,l.dm)(e.name,i.name)));case"name:desc":return e.sort(((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||("main"===e.name?-1:1)-("main"===i.name?-1:1)||("master"===e.name?-1:1)-("master"===i.name?-1:1)||("develop"===e.name?-1:1)-("develop"===i.name?-1:1)||(i.remote?-1:1)-(e.remote?-1:1)||(0,l.dm)(i.name,e.name)));default:return e.sort(((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||(i.remote?-1:1)-(e.remote?-1:1)||(null==i.date?-1:i.date.getTime())-(null==e.date?-1:e.date.getTime())))}}async function D(e,t,i){let r;t.startsWith("remotes/")?(r=t,t=t.substring(8)):r=`remotes/${t}`,i??=new c.X((t=>e.getBranches(null!=t?{paging:t}:void 0)));for await(const e of i.values())if(!e.remote&&null!=e.upstream?.name&&(e.upstream.name===t||e.upstream.name===r))return e}m([(0,n.H)((e=>e??"MMMM Do, YYYY h:mma"))],GitBranch.prototype,"formatDate",1),m([(0,o.fF)()],GitBranch.prototype,"getAssociatedPullRequest",1),m([(0,n.H)()],GitBranch.prototype,"getBasename",1),m([(0,n.H)()],GitBranch.prototype,"getNameWithoutRemote",1),m([(0,n.H)()],GitBranch.prototype,"getTrackingWithoutRemote",1),m([(0,n.H)()],GitBranch.prototype,"getRemote",1),m([(0,n.H)()],GitBranch.prototype,"getRemoteName",1),m([(0,n.H)()],GitBranch.prototype,"getStatus",1)},6450:(e,t,i)=>{i.d(t,{By:()=>k,G2:()=>A,_j:()=>GitCommitIdentity,aM:()=>b,f_:()=>C,yp:()=>P});var r=i(9496),s=i(8388),o=i(5255),n=i(7512),a=i(5432),c=i(4488),l=i(4336),h=i(4627),u=i(7462),d=i(439),p=i(7881),m=i(4321),g=Object.defineProperty,f=Object.getOwnPropertyDescriptor,w=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?f(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o),o};const v=/stash@{(\d+)}/,y=class _GitCommit{constructor(e,t,i,r,s,n,a,c,l,h,u,d,g,f){this.container=e,this.repoPath=t,this.sha=i,this.author=r,this.committer=s,this.parents=a,this.ref=i,this.shortSha=i.substring(0,this.container.CommitShaFormatting.length),this.tips=d,g?(this.refType="stash",this.stashName=g||void 0,this.stashOnRef=f||void 0,this.number=v.exec(g)?.[1]):this.refType="revision",null!=c?(this._message=c,this._summary=n!==c?`${n} ${o.NE.Ellipsis}`:n):(0,m.l3)(i,!0)?(this._summary=n,this._message="Uncommitted Changes"):this._summary=`${n} ${o.NE.Ellipsis}`,null!=h&&(this._stats=h),null!=l&&(Array.isArray(l)?this._files=l:l instanceof p.K8?this._file=l:(null!=l.file&&(this._file=l.file),null!=l.files&&(this._files=l.files)),this._recomputeStats=!0),null!=u?Array.isArray(u)?this.lines=u:this.lines=[u]:this.lines=[]}_stashUntrackedFilesLoaded=!1;_recomputeStats=!1;lines;ref;refType;shortSha;stashName;number;stashOnRef;tips;toString(){return`${(0,l.q4)(this)}(${this.repoPath}|${this.shortSha})`}get date(){return"committed"===this.container.CommitDateFormatting.dateSource?this.committer.date:this.author.date}_file;get file(){return this._file}_files;get files(){return this._files}get formattedDate(){return"absolute"===this.container.CommitDateFormatting.dateStyle?this.formatDate(this.container.CommitDateFormatting.dateFormat):this.formatDateFromNow()}get isUncommitted(){return(0,m.l3)(this.sha)}get isUncommittedStaged(){return(0,m.rD)(this.sha)}_message;get message(){return this._message}get name(){return this.stashName?this.stashName:this.shortSha}_stats;get stats(){return this._recomputeStats&&this.computeFileStats(),this._stats}_summary;get summary(){return this._summary}_resolvedPreviousSha;get unresolvedPreviousSha(){const e=this._resolvedPreviousSha??(null!=this.file?this.file.previousSha:this.parents[0])??`${this.sha}^`;return(0,m.j$)(e)?"HEAD":e}_etagFileSystem;hasFullDetails(){return null!=this.message&&null!=this.files&&(this.isUncommitted&&this._etagFileSystem===this.container.git.getRepository(this.repoPath)?.etagFileSystem||0!==this.parents.length)&&("stash"!==this.refType||this._stashUntrackedFilesLoaded)}async ensureFullDetails(){if(this.hasFullDetails())return;if(this.isUncommitted){const e=this.container.git.getRepository(this.repoPath);if(this._etagFileSystem=e?.etagFileSystem,null!=this._etagFileSystem){const t=await this.container.git.getStatusForRepo(this.repoPath);null!=t&&(this._files=t.files.flatMap((e=>e.getPseudoFileChanges()))),this._etagFileSystem=e?.etagFileSystem}return void(null==this._files&&(this._files=null!=this.file?[this.file]:[]))}const[e,t]=await Promise.allSettled(["stash"!==this.refType?this.container.git.getCommit(this.repoPath,this.sha):void 0,"stash"!==this.refType||this._stashUntrackedFilesLoaded?void 0:this.container.git.getCommit(this.repoPath,`${this.stashName}^3`),this.getPreviousSha()]);let i;if("fulfilled"===e.status&&null!=e.value&&(i=e.value,this.parents.push(...i.parents??[]),this._summary=i.summary,this._message=i.message,this._files=i.files,null!=this._file)){const e=this._files.find((e=>e.path===this._file.path));null!=e&&(this._file=new p.K8(e.repoPath,e.path,e.status,e.originalPath??this._file.originalPath,e.previousSha??this._file.previousSha,e.stats??this._file.stats))}if("fulfilled"===t.status&&null!=t.value&&(this._stashUntrackedFilesLoaded=!0,i=t.value,null!=i?.files&&0!==i.files.length)){const e=i.files.map((e=>new p.K8(this.repoPath,e.path,p.Bh.Untracked,e.originalPath)));null==this._files?this._files=e:this._files.push(...e)}this._recomputeStats=!0}computeFileStats(){if(!this._recomputeStats||null==this._files)return;this._recomputeStats=!1;const e={added:0,deleted:0,changed:0};let t=0,i=0;for(const r of this._files)switch(null!=r.stats&&(t+=r.stats.additions,i+=r.stats.deletions),r.status){case"A":case"?":e.added++;break;case"D":e.deleted++;break;default:e.changed++}null!=this._stats&&(0===t&&0!==this._stats.additions&&(t=this._stats.additions),0===i&&0!==this._stats.deletions&&(i=this._stats.deletions)),this._stats={...this._stats,changedFiles:e,additions:t,deletions:i}}async findFile(e,t){if(!this.hasFullDetails()&&(await this.ensureFullDetails(),null==this._files))return;const i=this.container.git.getRelativePath(e,this.repoPath);return this.isUncommitted&&null!=t?this._files?.find((e=>e.path===i&&e.staged===t)):this._files?.find((e=>e.path===i))}formatDate(e){return"committed"===this.container.CommitDateFormatting.dateSource?this.committer.formatDate(e):this.author.formatDate(e)}formatDateFromNow(e){return"committed"===this.container.CommitDateFormatting.dateSource?this.committer.fromNow(e):this.author.fromNow(e)}formatStats(e){const t=this.stats;if(null==t)return e?.empty??"";const{changedFiles:i,additions:r,deletions:s}=t;if(k(i)<=0&&r<=0&&s<=0)return e?.empty??"";const{compact:n=!1,expand:a=!1,prefix:c="",sectionSeparator:l=` ${(0,h.vk)(o.NE.Dot,1,1,o.NE.Space)} `,separator:u=" ",suffix:d=""}=e??{};let p=c;if("number"==typeof i)i&&(p+=a?`${(0,h._6)("file",i)} changed`:`~${i}`);else{const{added:e,changed:t,deleted:s}=i;e?p+=a?`${(0,h._6)("file",e)} added`:`+${e}`:a||n||(p+="+0"),t?p+=`${e?u:""}${a?`${(0,h._6)("file",t)} changed`:`~${t}`}`:a||n||(p+="~0"),s?p+=`${t|r?u:""}${a?`${(0,h._6)("file",s)} deleted`:`-${s}`}`:a||n||(p+="-0")}return a&&(r&&(p+=`${i?l:""}${(0,h._6)("addition",r)}`),s&&(p+=`${i||r?u:""}${(0,h._6)("deletion",s)}`)),p+=d,p}async getAssociatedPullRequest(e){return e??=await this.container.git.getBestRemoteWithRichProvider(this.repoPath),e?.hasRichIntegration()?e.provider.getPullRequestForCommit(this.ref):void 0}async getEnrichedAutolinks(e){if(!this.isUncommitted&&(e??=await this.container.git.getBestRemoteWithRichProvider(this.repoPath),e?.hasRichIntegration()))return null==this.message&&await this.ensureFullDetails(),this.container.autolinks.getEnrichedAutolinks(this.message??this.summary,e)}getAvatarUri(e){return this.author.getAvatarUri(this,e)}getCachedAvatarUri(e){return this.author.getCachedAvatarUri(e)}async getCommitForFile(e,t){const i="string"==typeof e?this.container.git.getRelativePath(e,this.repoPath):e.path,r=await this.findFile(i,t);if(null==r)return;return this.with({sha:r.staged?d.pw:this.sha,files:{file:r}})}async getCommitsForFiles(){if(!this.hasFullDetails()&&(await this.ensureFullDetails(),null==this._files))return[];const e=this._files?.map((e=>this.with({files:{file:e}})));return e??[]}getGitUri(e=!1){const t=this._file?.uri??this.container.git.getAbsoluteUri(this.repoPath,this.repoPath);return e?new u.YY(this._file?.originalUri??t,{repoPath:this.repoPath,sha:this.unresolvedPreviousSha}):new u.YY(t,this)}getPreviousComparisonUrisForLine(e,t){return null!=this.file?this.container.git.getPreviousComparisonUrisForLine(this.repoPath,this.file.uri,e,t??(this.sha===d.CL?void 0:this.sha)):Promise.resolve(void 0)}_previousShaPromise;async getPreviousSha(){if(null==this._previousShaPromise){async function e(){if(null!=this.file){if(null!=this.file.previousSha&&(0,m.D3)(this.file.previousSha))return this.file.previousSha;const e=await this.container.git.resolveReference(this.repoPath,(0,m.l3)(this.sha,!0)?"HEAD":`${this.sha}^`,this.file.originalPath??this.file.path);return this._resolvedPreviousSha=e,e}const e=this.parents[0];if(null!=e&&(0,m.D3)(e))return e;const t=await this.container.git.resolveReference(this.repoPath,(0,m.l3)(this.sha,!0)?"HEAD":`${this.sha}^`);return this._resolvedPreviousSha=t,t}this._previousShaPromise=e.call(this)}return this._previousShaPromise}getRepository(){return this.container.git.getRepository(this.repoPath)}async isPushed(){return this.container.git.hasCommitBeenPushed(this.repoPath,this.ref)}with(e){let t;return null!=e.files?(t={file:this._file,files:this._files},null!=e.files.file?t.file=e.files.file:null===e.files.file&&(t.file=void 0),null!=e.files.files?t.files=e.files.files:null===e.files.files&&(t.files=void 0)):null===e.files&&(t=void 0),new _GitCommit(this.container,this.repoPath,e.sha??this.sha,this.author,this.committer,this.summary,this.getChangedValue(e.parents,this.parents)??[],this.message,t,this.stats,this.getChangedValue(e.lines,this.lines),this.tips,this.stashName,this.stashOnRef)}getChangedValue(e,t){return void 0===e?t:null!==e?e:void 0}};w([(0,c.H)()],y.prototype,"isUncommitted",1),w([(0,c.H)()],y.prototype,"isUncommittedStaged",1),w([(0,a.H)()],y.prototype,"ensureFullDetails",1),w([(0,c.H)()],y.prototype,"getGitUri",1),w([(0,c.H)(((e,t)=>`${e}|${t??""}`))],y.prototype,"getPreviousComparisonUrisForLine",1),w([(0,a.H)()],y.prototype,"isPushed",1);let b=y;function C(e){return e instanceof b}function A(e){return e instanceof b&&"stash"===e.refType&&Boolean(e.stashName)}class GitCommitIdentity{constructor(e,t,i,r){this.name=e,this.email=t,this.date=i,this.avatarUrl=r}formatDate(e){return(0,n.p6)(this.date,e??"MMMM Do, YYYY h:mma")}fromNow(e){return(0,n.Zh)(this.date,e)}getAvatarUri(e,t){return null!=this.avatarUrl?r.Uri.parse(this.avatarUrl):(0,s.oP)(this.email,e,t)}getCachedAvatarUri(e){return null!=this.avatarUrl?r.Uri.parse(this.avatarUrl):(0,s.x4)(this.email,e)}}function k(e){return null==e?0:"number"==typeof e?e:e.added+e.changed+e.deleted}function P(e){if(!e.hasFullDetails())throw new Error(`GitCommit(${e.sha}) is not fully loaded`)}w([(0,c.H)((e=>e??"MMMM Do, YYYY h:mma"))],GitCommitIdentity.prototype,"formatDate",1)},439:(e,t,i)=>{i.d(t,{CL:()=>s,Ii:()=>r,pw:()=>o});const r="0000000000000000000000000000000000000000-",s="0000000000000000000000000000000000000000",o="0000000000000000000000000000000000000000:"},1719:(e,t,i)=>{i.d(t,{V:()=>d});var r=i(9496),s=i(8388),o=i(5148),n=i(7512),a=i(4488),c=i(4627),l=Object.defineProperty,h=Object.getOwnPropertyDescriptor;const u=class _GitContributor{constructor(e,t,i,r,s,o=!1,n,a,c,l){this.repoPath=e,this.name=t,this.email=i,this.count=r,this.date=s,this.current=o,this.stats=n,this.username=a,this.avatarUrl=c,this.id=l}static is(e){return e instanceof _GitContributor}static sort(e,t){switch((t={current:!0,orderBy:o.D.get("sortContributorsBy"),...t}).orderBy){case"count:asc":return e.sort(((e,t)=>(e.current?-1:1)-(t.current?-1:1)||e.count-t.count||(e.date?.getTime()??0)-(t.date?.getTime()??0)));case"date:desc":return e.sort(((e,i)=>(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(i.date?.getTime()??0)-(e.date?.getTime()??0)||i.count-e.count));case"date:asc":return e.sort(((e,i)=>(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(e.date?.getTime()??0)-(i.date?.getTime()??0)||i.count-e.count));case"name:asc":return e.sort(((e,t)=>(e.current?-1:1)-(t.current?-1:1)||(0,c.dm)(e.name??e.username,t.name??t.username)));case"name:desc":return e.sort(((e,t)=>(e.current?-1:1)-(t.current?-1:1)||(0,c.dm)(t.name??t.username,e.name??e.username)));default:return e.sort(((e,t)=>(e.current?-1:1)-(t.current?-1:1)||t.count-e.count||(t.date?.getTime()??0)-(e.date?.getTime()??0)))}}get label(){return this.name??this.username}formatDate(e){return null!=this.date?(0,n.p6)(this.date,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(e){return null!=this.date?(0,n.Zh)(this.date,e):""}getAvatarUri(e){return null!=this.avatarUrl?r.Uri.parse(this.avatarUrl):(0,s.oP)(this.email,void 0,e)}getCoauthor(){return`${this.name}${this.email?` <${this.email}>`:""}`}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?h(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&l(t,i,o)})([(0,a.H)((e=>e??"MMMM Do, YYYY h:mma"))],u.prototype,"formatDate",1);let d=u},7881:(e,t,i)=>{i.d(t,{Bh:()=>m,Gv:()=>w,K8:()=>D,K9:()=>P,NV:()=>p,OC:()=>g,PM:()=>f,Qw:()=>A,Vz:()=>d,W5:()=>v,tK:()=>b});var r=i(5255),s=i(3599),o=i(4488),n=i(1774),a=i(3700),c=i(4627),l=Object.defineProperty,h=Object.getOwnPropertyDescriptor,u=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?h(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&l(t,i,o),o},d=(e=>(e.AddedByBoth="AA",e.AddedByUs="AU",e.AddedByThem="UA",e.DeletedByBoth="DD",e.DeletedByUs="DU",e.DeletedByThem="UD",e.ModifiedByBoth="UU",e))(d||{}),p=(e=>(e.Modified="M",e.Added="A",e.Deleted="D",e.Renamed="R",e.Copied="C",e.Unchanged=".",e.Untracked="?",e.Ignored="!",e.UpdatedButUnmerged="U",e))(p||{}),m=(e=>(e.Modified="M",e.Added="A",e.Deleted="D",e.Untracked="?",e.Ignored="!",e))(m||{});function g(e,t=!1,i){const s=(0,a.Fd)(e.path,i);return t&&("R"===e.status||"C"===e.status)&&e.originalPath?`${s} ${(0,c.vk)(r.NE.ArrowLeft,1,1)} ${e.originalPath}`:s}function f(e,t={}){return(0,n.d)(e.path,t)}function w(e,t){return e.originalPath?(0,a.uo)(e.originalPath,t)[0]:""}function v(e,t){return(0,a.uo)(e.path,t)[0]}const y={".":void 0,"!":"icon-status-ignored.svg","?":"icon-status-untracked.svg",A:"icon-status-added.svg",D:"icon-status-deleted.svg",M:"icon-status-modified.svg",R:"icon-status-renamed.svg",C:"icon-status-copied.svg",AA:"icon-status-conflict.svg",AU:"icon-status-conflict.svg",UA:"icon-status-conflict.svg",DD:"icon-status-conflict.svg",DU:"icon-status-conflict.svg",UD:"icon-status-conflict.svg",UU:"icon-status-conflict.svg",T:"icon-status-modified.svg",U:"icon-status-modified.svg"};function b(e){return y[e]??"icon-status-unknown.svg"}const C={".":void 0,"!":"$(diff-ignored)","?":"$(diff-added)",A:"$(diff-added)",D:"$(diff-removed)",M:"$(diff-modified)",R:"$(diff-renamed)",C:"$(diff-added)",AA:"$(warning)",AU:"$(warning)",UA:"$(warning)",DD:"$(warning)",DU:"$(warning)",UD:"$(warning)",UU:"$(warning)",T:"$(diff-modified)",U:"$(diff-modified)"};function A(e,t=r.NE.Space.repeat(4)){return C[e]??t}const k={".":"Unchanged","!":"Ignored","?":"Untracked",A:"Added",D:"Deleted",M:"Modified",R:"Renamed",C:"Copied",AA:"Conflict",AU:"Conflict",UA:"Conflict",DD:"Conflict",DU:"Conflict",UD:"Conflict",UU:"Conflict",T:"Modified",U:"Updated but Unmerged"};function P(e){return k[e]??"Unknown"}const S=class _GitFileChange{constructor(e,t,i,r,s,o,n){this.repoPath=e,this.path=t,this.status=i,this.originalPath=r,this.previousSha=s,this.stats=o,this.staged=n}static is(e){return e instanceof _GitFileChange}get hasConflicts(){switch(this.status){case"UA":case"AU":case"AA":case"UD":case"DU":case"DD":case"UU":return!0;default:return!1}}get uri(){return s.W.instance.git.getAbsoluteUri(this.path,this.repoPath)}get originalUri(){return this.originalPath?s.W.instance.git.getAbsoluteUri(this.originalPath,this.repoPath):void 0}getWorkingUri(){return s.W.instance.git.getWorkingUri(this.repoPath,this.uri)}formatStats(e){if(null==this.stats)return e?.empty??"";const{additions:t,deletions:i}=this.stats;if(t<0&&i<0)return e?.empty??"";const{compact:r=!1,expand:s=!1,prefix:o="",separator:n=" ",suffix:a=""}=e??{};let l=o;return t?l+=s?`${(0,c._6)("line",t)} added`:`+${t}`:s||r||(l+="+0"),i?l+=`${t?n:""}${s?`${(0,c._6)("line",i)} deleted`:`-${i}`}`:s||r||(l+="-0"),l+=a,l}};u([(0,o.H)()],S.prototype,"uri",1),u([(0,o.H)()],S.prototype,"originalUri",1),u([(0,o.H)()],S.prototype,"getWorkingUri",1);let D=S},8452:(e,t,i)=>{i.d(t,{$9:()=>Issue,Gj:()=>s,Ty:()=>o,sy:()=>n,xX:()=>a,y$:()=>c});var r=i(9496);function s(e){return{type:e.type,provider:{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon},id:e.id,nodeId:e.nodeId,title:e.title,url:e.url,date:e.date,closedDate:e.closedDate,closed:e.closed,state:e.state}}function o(e){if(null==e)return`<span class="codicon codicon-link" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};"></span>`;if("pullrequest"!==e.type)return e.closed?`<span class="codicon codicon-pass" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};"></span>`:`<span class="codicon codicon-issues" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};"></span>`;switch(e.state){case"merged":return`<span class="codicon codicon-git-merge" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};"></span>`;case"closed":return`<span class="codicon codicon-git-pull-request-closed" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#f85149":"#cf222e"};"></span>`;case"opened":return`<span class="codicon codicon-git-pull-request" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};"></span>`;default:return'<span class="codicon codicon-git-pull-request"></span>'}}function n(e){if(null==e)return`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};">$(link)</span>`;if("pullrequest"!==e.type)return e.closed?`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};">$(pass)</span>`:`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};">$(issues)</span>`;switch(e.state){case"merged":return`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};">$(git-merge)</span>`;case"closed":return`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#f85149":"#cf222e"};">$(git-pull-request-closed)</span>`;case"opened":return`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};">$(git-pull-request)</span>`;default:return"$(git-pull-request)"}}function a(e){if(null==e)return new r.ThemeIcon("link",new r.ThemeColor("gitlens.closedAutolinkedIssueIconColor"));if("pullrequest"!==e.type)return e.closed?new r.ThemeIcon("pass",new r.ThemeColor("gitlens.closedAutolinkedIssueIconColor")):new r.ThemeIcon("issues",new r.ThemeColor("gitlens.openAutolinkedIssueIconColor"));switch(e.state){case"merged":return new r.ThemeIcon("git-merge",new r.ThemeColor("gitlens.mergedPullRequestIconColor"));case"closed":return new r.ThemeIcon("git-pull-request-closed",new r.ThemeColor("gitlens.closedPullRequestIconColor"));case"opened":return new r.ThemeIcon("git-pull-request",new r.ThemeColor("gitlens.openPullRequestIconColor"));default:return new r.ThemeIcon("git-pull-request")}}function c(e){return{type:e.type,provider:{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon},id:e.id,nodeId:e.nodeId,title:e.title,url:e.url,date:e.date,closedDate:e.closedDate,closed:e.closed,state:e.state,updatedDate:e.updatedDate,author:{name:e.author.name,avatarUrl:e.author.avatarUrl,url:e.author.url},repository:{owner:e.repository.owner,repo:e.repository.repo},assignees:e.assignees.map((e=>({name:e.name,avatarUrl:e.avatarUrl,url:e.url}))),labels:null==e.labels?void 0:e.labels.map((e=>({color:e.color,name:e.name}))),commentsCount:e.commentsCount,thumbsUpCount:e.thumbsUpCount}}class Issue{constructor(e,t,i,r,s,o,n,a,c,l,h,u,d,p,m,g){this.provider=e,this.id=t,this.nodeId=i,this.title=r,this.url=s,this.date=o,this.closed=n,this.state=a,this.updatedDate=c,this.author=l,this.repository=h,this.assignees=u,this.closedDate=d,this.labels=p,this.commentsCount=m,this.thumbsUpCount=g}type="issue"}},4092:(e,t,i)=>{i.d(t,{Cz:()=>h,i7:()=>p,l1:()=>u,pD:()=>l});var r=i(3599),s=i(7512),o=i(4488),n=Object.defineProperty,a=Object.getOwnPropertyDescriptor,c=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?a(t,i):t,c=e.length-1;c>=0;c--)(s=e[c])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&n(t,i,o),o},l=(e=>(e.Approved="Approved",e.ChangesRequested="ChangesRequested",e.ReviewRequired="ReviewRequired",e))(l||{}),h=(e=>(e.Unknown="Unknown",e.Mergeable="Mergeable",e.Conflicting="Conflicting",e))(h||{});function u(e){return{type:e.type,provider:{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon},id:e.id,nodeId:e.nodeId,title:e.title,url:e.url,date:e.date,closedDate:e.closedDate,closed:e.closed,author:{name:e.author.name,avatarUrl:e.author.avatarUrl,url:e.author.url},state:e.state,mergedDate:e.mergedDate,mergeableState:e.mergeableState,refs:e.refs?{head:{exists:e.refs.head.exists,owner:e.refs.head.owner,repo:e.refs.head.repo,sha:e.refs.head.sha,branch:e.refs.head.branch,url:e.refs.head.url},base:{exists:e.refs.base.exists,owner:e.refs.base.owner,repo:e.refs.base.repo,sha:e.refs.base.sha,branch:e.refs.base.branch,url:e.refs.base.url},isCrossRepository:e.refs.isCrossRepository}:void 0,isDraft:e.isDraft,additions:e.additions,deletions:e.deletions,comments:e.comments,reviewDecision:e.reviewDecision,reviewRequests:e.reviewRequests,assignees:e.assignees}}const d=class _PullRequest{constructor(e,t,i,r,s,o,n,a,c,l,h,u,d,p,m,g,f,w,v){this.provider=e,this.author=t,this.id=i,this.nodeId=r,this.title=s,this.url=o,this.state=n,this.date=a,this.closedDate=c,this.mergedDate=l,this.mergeableState=h,this.refs=u,this.isDraft=d,this.additions=p,this.deletions=m,this.comments=g,this.reviewDecision=f,this.reviewRequests=w,this.assignees=v}static is(e){return e instanceof _PullRequest}type="pullrequest";get closed(){return"closed"===this.state}get formattedDate(){return"absolute"===r.W.instance.PullRequestDateFormatting.dateStyle?this.formatDate(r.W.instance.PullRequestDateFormatting.dateFormat):this.formatDateFromNow()}formatDate(e){return(0,s.p6)(this.mergedDate??this.closedDate??this.date,e??"MMMM Do, YYYY h:mma")}formatDateFromNow(){return(0,s.Zh)(this.mergedDate??this.closedDate??this.date)}formatClosedDate(e){return null==this.closedDate?"":(0,s.p6)(this.closedDate,e??"MMMM Do, YYYY h:mma")}formatClosedDateFromNow(){return null==this.closedDate?"":(0,s.Zh)(this.closedDate)}formatMergedDate(e){return null==this.mergedDate?"":(0,s.p6)(this.mergedDate,e??"MMMM Do, YYYY h:mma")??""}formatMergedDateFromNow(){return null==this.mergedDate?"":(0,s.Zh)(this.mergedDate)}formatUpdatedDate(e){return(0,s.p6)(this.date,e??"MMMM Do, YYYY h:mma")??""}formatUpdatedDateFromNow(){return(0,s.Zh)(this.date)}};c([(0,o.H)((e=>e??"MMMM Do, YYYY h:mma"))],d.prototype,"formatDate",1),c([(0,o.H)((e=>e??"MMMM Do, YYYY h:mma"))],d.prototype,"formatClosedDate",1),c([(0,o.H)((e=>e??"MMMM Do, YYYY h:mma"))],d.prototype,"formatMergedDate",1),c([(0,o.H)((e=>e??"MMMM Do, YYYY h:mma"))],d.prototype,"formatUpdatedDate",1);let p=d},4321:(e,t,i)=>{i.d(t,{Av:()=>$,D3:()=>v,FT:()=>x,Gn:()=>_,LB:()=>D,Nn:()=>I,UR:()=>T,Wh:()=>E,Yn:()=>F,gA:()=>B,j$:()=>C,l3:()=>b,oI:()=>f,pZ:()=>O,qj:()=>R,rD:()=>A,t6:()=>P,xB:()=>S,yk:()=>w,yo:()=>y,zL:()=>k});var r=i(5255),s=i(5148),o=i(4627),n=i(5367),a=i(439);const c=/^(\S*?)(\.\.\.?)(\S*)\s*$/,l=/(^[0-9a-f]{40}([\^@~:]\S*)?$)|(^[0]{40}(:|-)$)/,h=/(^[0-9a-f]{40}$)|(^[0]{40}(:|-)$)/,u=/(^[0-9a-f]{40})\^[0-3]?$/,d=/^(.*?)([\^@~:].*)?$/,p=/^[0]{40}(?:[\^@~:]\S*)?:?$/,m=/^[0]{40}([\^@~]\S*)?:$/;function g(e,t){return!!t&&e.test(t)}function f(e,t,i=".."){return`${e??""}${i}${t??""}`}function w(e){return e?.includes("..")??!1}function v(e){return g(h,e)}function y(e){return g(l,e)}function b(e,t=!1){return e===a.CL||e===a.pw||!t&&g(p,e)}function C(e){return e===`${a.CL}^`||e===`${a.pw}^`}function A(e,t=!1){return e===a.pw||!t&&g(m,e)}function k(e,t){if(e===a.Ii)return"(deleted)";if(!e)return t?.strings?.working??"";if(b(e))return A(e)?t?.strings?.uncommittedStaged??"Index":t?.strings?.uncommitted??"Working Tree";if(w(e))return e;if(!t?.force&&!y(e))return e;const i=Math.max(5,s.D.get("advanced.abbreviatedShaLength")),r=d.exec(e);if(null!=r){const[,e,t]=r;if(null!=t)return`${e.substr(0,i)}${t}`}return e.substr(0,i)}function P(e){const t=c.exec(e);if(null==t)return;const[,i,r,s]=t;return{ref1:i,notation:r,ref2:s}}function S(e,t,i={refType:"revision"}){switch(i.refType){case"branch":return{refType:"branch",repoPath:t,ref:e,name:i.name,id:i.id,remote:i.remote,upstream:i.upstream};case"stash":return{refType:"stash",repoPath:t,ref:e,name:i.name,number:i.number,message:i.message,stashOnRef:i.stashOnRef};case"tag":return{refType:"tag",repoPath:t,ref:e,name:i.name,id:i.id};default:return{refType:"revision",repoPath:t,ref:e,name:i.name??k(e,{force:!0,strings:{working:"Working Tree"}}),message:i.message}}}function D(e){return S(e.ref,e.repoPath,{id:e.id,refType:e.refType,name:e.name,remote:e.remote,upstream:e.upstream})}function R(e){return"stash"===e.refType?S(e.ref,e.repoPath,{refType:e.refType,name:e.name,number:e.number,message:e.message}):S(e.ref,e.repoPath,{refType:e.refType,name:e.name,message:e.message})}function $(e){return"branch"===e.refType&&e.remote?(0,n.S3)(e.name):e.name}function _(e){return e.upstream?.name.substring((0,n.RJ)(e.upstream.name)+1)}function F(e){if(null==e||"object"!=typeof e)return!1;const t=e;return"string"==typeof t.refType&&"string"==typeof t.repoPath&&"string"==typeof t.ref&&"string"==typeof t.name}function T(e){return"branch"===e?.refType}function x(e){return"revision"===e?.refType}function I(e){return"revision"===e?.refType&&w(e.ref)}function O(e){return"stash"===e?.refType||"revision"===e?.refType&&Boolean(e?.stashName)}function B(e){return"tag"===e?.refType}function E(e,t){if(null==e)return"";let i;if(t=!1===t?{}:{expand:!0,icon:!0,label:t?.label??t?.expand??!0,...t},!Array.isArray(e)||1===e.length){const s=Array.isArray(e)?e[0]:e;let a=t?.quoted?`'${s.name}'`:s.name;switch(s.refType){case"branch":s.remote&&(a=`${(0,n.Lo)(a)}: ${(0,n.S3)(a)}`,a=t?.quoted?`'${a}'`:a),i=`${t.label?(s.remote?"remote ":"")+"branch ":""}${t.icon?`$(git-branch)${r.NE.Space}${a}`:a}`;break;case"tag":i=`${t.label?"tag ":""}${t.icon?`$(tag)${r.NE.Space}${a}`:a}`;break;default:if(O(s)){let e;t.expand&&s.message&&(e=`${null!=s.number?`#${s.number}: `:""}${s.message.length>20?`${s.message.substring(0,20).trimRight()}${r.NE.Ellipsis}`:s.message}`),i=`${t.label?"stash ":""}${t.icon?`$(archive)${r.NE.Space}${e??s.name}`:`${e??(s.number?`#${s.number}`:s.name)}`}`}else if(w(s.ref))i=a;else{let e,o;t.expand&&s.message&&(e=s.message.length>20?` (${s.message.substring(0,20).trimRight()}${r.NE.Ellipsis})`:` (${s.message})`),t.expand&&t.label&&function(e){return g(u,e)}(s.ref)?(a=s.name.endsWith("^")?s.name.substr(0,s.name.length-1):s.name,t?.quoted&&(a=`'${a}'`),o="before "):o="",i=`${t.label?`${o}commit `:""}${t.icon?`$(git-commit)${r.NE.Space}${a}${e??""}`:`${a}${e??""}`}`}}return t.capitalize&&t.expand&&!1!==t.label?(0,o.kC)(i):i}const s=t.expand?` (${e.map((e=>e.name)).join(", ")})`:"";switch(e[0].refType){case"branch":return`${e.length} branches${s}`;case"tag":return`${e.length} tags${s}`;default:return`${e.length} ${O(e[0])?"stashes":"commits"}${s}`}}},3050:(e,t,i)=>{i.d(t,{Ym:()=>w,dM:()=>f,jv:()=>g,ss:()=>m});var r=i(9496),s=i(5255),o=i(3599),n=i(4488),a=i(4627),c=i(2509),l=i(4794),h=Object.defineProperty,u=Object.getOwnPropertyDescriptor,d=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?u(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&h(t,i,o),o};const p=class _GitRemote{constructor(e,t,i,r,s,o,n){this.repoPath=e,this.name=t,this.scheme=i,this._domain=r,this._path=s,this.provider=o,this.urls=n}static getHighlanderProviders(e){if(0===e.length)return;const t=1===e.length?e[0]:e.find((e=>e.default));if(null!=t)return[t.provider];const i=e[0].provider.name;return e.every((e=>e.provider.name===i))?e.map((e=>e.provider)):void 0}static getHighlanderProviderName(e){if(0===e.length)return;const t=1===e.length?e[0]:e.find((e=>e.default));if(null!=t)return t.provider.name;const i=e[0].provider.name;return e.every((e=>e.provider.name===i))?i:void 0}static is(e){return e instanceof _GitRemote}static sort(e){return e.sort(((e,t)=>(e.default?-1:1)-(t.default?-1:1)||("origin"===e.name?-1:1)-("origin"===t.name?-1:1)||("upstream"===e.name?-1:1)-("upstream"===t.name?-1:1)||(0,a.dm)(e.name,t.name)))}get default(){const e=o.W.instance.storage.getWorkspace("remote:default");return this.name===e||this.remoteKey===e}get domain(){return this.provider?.domain??this._domain}get id(){return`${this.name}/${this.remoteKey}`}get path(){return this.provider?.path??this._path}get remoteKey(){return this._domain?`${this._domain}/${this._path}`:this.path}get url(){let e;for(const t of this.urls){if("push"===t.type)return t.url;null==e&&(e=t.url)}return e}hasRichIntegration(){return this.provider?.hasRichIntegration()??!1}get maybeConnected(){return null!=this.provider&&this.provider.maybeConnected}matches(e,t){if(null==t){if((0,a.qq)(e,this.url))return!0;[,e,t]=(0,l.Sk)(e)}return(0,a.qq)(e,this.domain)&&(0,a.qq)(t,this.path)}async setAsDefault(e=!0){const t=o.W.instance.git.getRepository(this.repoPath);await(t?.setRemoteAsDefault(this,e))}};d([(0,n.H)()],p.prototype,"domain",1),d([(0,n.H)()],p.prototype,"id",1),d([(0,n.H)()],p.prototype,"path",1),d([(0,n.H)()],p.prototype,"remoteKey",1),d([(0,n.H)()],p.prototype,"url",1);let m=p;function g(e){const t=function(e){let t,i,r;for(const{type:t}of e.urls)if("fetch"===t){if(i=!0,r)break}else if("push"===t&&(r=!0,i))break;return t=i&&r?s.NE.ArrowsRightLeft:r?s.NE.ArrowRight:i?s.NE.ArrowLeft:s.NE.Dash,t}(e),{provider:i}=e;return null!=i?`${t}${s.NE.Space} ${i.name} ${s.NE.Space}${s.NE.Dot}${s.NE.Space} ${i.displayPath}`:`${t}${s.NE.Space} ${e.domain?`${e.domain} ${s.NE.Space}${s.NE.Dot}${s.NE.Space} `:""}${e.path}`}function f(e,t,i,s=r.window.activeColorTheme){if(null==t.provider?.icon)return;const o=r.Uri.joinPath(e.context.extensionUri,`images/${(0,c.GC)(s)?"light":"dark"}/icon-${t.provider.icon}.svg`);return null!=i?i(o):o}function w(e){return Array.isArray(e)?e.map((e=>e.remoteKey)).sort().join(","):e.remoteKey}},6503:(e,t,i)=>{i.d(t,{C:()=>s,J:()=>r});var r=(e=>(e.Branch="branch",e.Branches="branches",e.Commit="commit",e.Comparison="comparison",e.CreatePullRequest="createPullRequest",e.File="file",e.Repo="repo",e.Revision="revision",e))(r||{});function s(e){switch(e.type){case"branch":return"Branch";case"branches":return"Branches";case"commit":return"Commit";case"comparison":return"Comparison";case"createPullRequest":return"Create Pull Request";case"file":case"revision":return"File";case"repo":return"Repository";default:return""}}},3646:(e,t,i)=>{i.d(t,{I6:()=>O,_j:()=>E,du:()=>B,uC:()=>W});var r=i(9496),s=i(3951),o=i(5640),n=i(5255),a=i(7925),c=i(2133),l=i(2800),h=i(9529),u=i(5148),d=i(7512),p=i(5432),m=i(4241),g=i(9796),f=i(3105),w=i(4336),v=i(6004),y=i(9967),b=i(3700),C=i(5367),A=i(4321),k=Object.defineProperty,P=Object.getOwnPropertyDescriptor,S=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?P(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&k(t,i,o),o};const D=Object.freeze([]),R=36e5,$=864e5,_="index,HEAD,*_HEAD,MERGE_*,rebase-merge/**,sequencer/**",F="worktrees/**/index,worktrees/**/HEAD,worktrees/**/*_HEAD,worktrees/**/MERGE_*,worktrees/**/rebase-merge/**,worktrees/**/sequencer/**",T=`{${_}}`,x=`{config,refs/**,${F}}`,I=`{${_},config,refs/**,${F}}`;var O=(e=>(e[e.Unknown=-1]="Unknown",e[e.Index=0]="Index",e[e.Head=1]="Head",e[e.Heads=2]="Heads",e[e.Tags=3]="Tags",e[e.Stash=4]="Stash",e[e.Remotes=5]="Remotes",e[e.Worktrees=6]="Worktrees",e[e.Config=7]="Config",e[e.Status=8]="Status",e[e.CherryPick=9]="CherryPick",e[e.Merge=10]="Merge",e[e.Rebase=11]="Rebase",e[e.Closed=100]="Closed",e[e.Ignores=101]="Ignores",e[e.RemoteProviders=102]="RemoteProviders",e[e.Starred=103]="Starred",e[e.Opened=104]="Opened",e))(O||{}),B=(e=>(e[e.Any=0]="Any",e[e.All=1]="All",e[e.Exclusive=2]="Exclusive",e))(B||{});class RepositoryChangeEvent{constructor(e,t){this.repository=e,this._changes=new Set(t)}_changes;toString(e=!1){return e?`changes=${(0,f.v_)(this._changes,", ")}`:`{ repository: ${this.repository?.name??""}, changes: ${(0,f.v_)(this._changes,", ")} }`}changed(...e){const t=e.slice(0,-1),i=e[e.length-1];if(0===i)return(0,f.G)(this._changes,(e=>t.includes(e)));let r=this._changes;2===i&&(t.includes(9)||t.includes(10)||t.includes(11)?t.includes(8)||t.push(8):t.includes(8)&&(r=new Set(r),r.delete(9),r.delete(10),r.delete(11)));const s=[...(0,f.hX)(r,(e=>t.includes(e)))];return 2===i?s.length===r.size:s.length===t.length}with(e){return new RepositoryChangeEvent(this.repository,[...this._changes,...e])}}let E=class{constructor(e,t,i,s,o,n,a,l=!1){if(this.container=e,this.onDidRepositoryChange=t,this.provider=i,this.folder=s,this.uri=o,this.root=n,null!=s)if(n)this.name=s.name;else{const t=e.git.getRelativePath(o,s.uri);this.name=t||s.name}else this.name=(0,b.EZ)(o.path);this.index=s?.index??e.git.repositoryCount,this.id=(0,c.YW)(o),this._suspended=a,this._closed=l,this._disposable=r.Disposable.from(this.setupRepoWatchers(),u.D.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged()}static formatLastFetched(e,t=!0){const i=new Date(e);if(Date.now()-e<$)return(0,d.Zh)(i);if(t)return(0,d.p6)(i,u.D.get("defaultDateShortFormat")??"short");let r=u.D.get("defaultDateFormat")??`dddd, MMMM Do, YYYY [at] ${u.D.get("defaultTimeFormat")??"h:mma"}`;return/[hHm]/.test(r)||(r+=` [at] ${u.D.get("defaultTimeFormat")??"h:mma"}`),(0,d.p6)(i,r)}static getLastFetchedUpdateInterval(e){const t=Date.now()-e;return t<$?(t<R?6e4:R)/2:0}static sort(e){return e.sort(((e,t)=>(e.starred?-1:1)-(t.starred?-1:1)||e.index-t.index))}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeFileSystem=new r.EventEmitter;get onDidChangeFileSystem(){return this._onDidChangeFileSystem.event}get formattedName(){return this.name}id;index;name;_idHash;get idHash(){return void 0===this._idHash&&(this._idHash=(0,s.FB)(this.id)),this._idHash}_branch;_disposable;_fireChangeDebounced=void 0;_fireFileSystemChangeDebounced=void 0;_fsWatchCounter=0;_fsWatcherDisposable;_pendingFileSystemChange;_pendingRepoChange;_suspended;setupRepoWatchers(){let e;return this.setupRepoWatchersCore().then((t=>e=t)),{dispose:()=>{e?.dispose()}}}async setupRepoWatchersCore(){const e=(0,v.UH)(),t=[];t.push(this.container.events.on("git:cache:reset",(e=>{e.data.repoPath&&e.data.repoPath!==this.path||(this.resetCaches(...e.data.caches??D),e.data.caches?.includes("providers")&&this.fireChange(102))})));const i=r.workspace.createFileSystemWatcher(new r.RelativePattern(this.uri,"**/.gitignore"));function s(i,s){w.Yd.debug(e,`watching '${i.toString(!0)}' for repository changes`);const o=r.workspace.createFileSystemWatcher(new r.RelativePattern(i,s));return t.push(o,o.onDidChange((e=>this.onRepositoryChanged(e,i))),o.onDidCreate((e=>this.onRepositoryChanged(e,i))),o.onDidDelete((e=>this.onRepositoryChanged(e,i)))),o}t.push(i,i.onDidChange(this.onGitIgnoreChanged,this),i.onDidCreate(this.onGitIgnoreChanged,this),i.onDidDelete(this.onGitIgnoreChanged,this));const o=await this.getGitDir();return null!=o&&(null==o?.commonUri?s.call(this,o.uri,I):(s.call(this,o.uri,T),s.call(this,o.commonUri,x))),r.Disposable.from(...t)}dispose(){this.stopWatchingFileSystem(),this._disposable.dispose()}toString(){return`${(0,w.q4)(this)}(${this.id})`}get virtual(){return this.provider.virtual}get path(){return this.uri.scheme===n.sN.File?(0,b.AH)(this.uri.fsPath):this.uri.toString()}get etag(){return this._updatedAt}_updatedAt=0;get updatedAt(){return this._updatedAt}onConfigurationChanged(e){null!=e&&u.D.changed(e,"remotes",this.folder?.uri)&&(this.resetCaches("remotes"),this.fireChange(5))}onFileSystemChanged(e){/\.git(?:\/|\\|$)/.test(e.fsPath)||(this._etagFileSystem=Date.now(),this.fireFileSystemChange(e))}onGitIgnoreChanged(e){this.fireChange(101)}onRepositoryChanged(e,t){if(e?.path.includes("/fsmonitor--daemon/"))return;this._lastFetched=void 0;const i=null!=e?/(worktrees|index|HEAD|FETCH_HEAD|ORIG_HEAD|CHERRY_PICK_HEAD|MERGE_HEAD|REBASE_HEAD|rebase-merge|config|refs\/(?:heads|remotes|stash|tags))/.exec(this.container.git.getRelativePath(e,t)):void 0;if(null!=i)switch(i[1]){case"config":return this.resetCaches(),void this.fireChange(7,5);case"index":return void this.fireChange(0);case"FETCH_HEAD":return;case"HEAD":return this.resetCaches("branches"),void this.fireChange(1,2);case"ORIG_HEAD":case"refs/heads":return this.resetCaches("branches"),void this.fireChange(2);case"CHERRY_PICK_HEAD":return void this.fireChange(9,8);case"MERGE_HEAD":return void this.fireChange(10,8);case"REBASE_HEAD":case"rebase-merge":return void this.fireChange(11,8);case"refs/remotes":return this.resetCaches(),void this.fireChange(5);case"refs/stash":return void this.fireChange(4);case"refs/tags":return void this.fireChange(3);case"worktrees":return void this.fireChange(6)}this.fireChange(-1)}_closed=!1;get closed(){return this._closed}set closed(e){const t=this._closed!==e;this._closed=e,t&&this.fireChange(this._closed?100:104)}access(e){return this.container.git.access(e,this.uri)}supports(e){return this.container.git.supports(this.uri,e)}async addRemote(e,t,i){await this.container.git.addRemote(this.uri,e,t,i);const[r]=await this.getRemotes({filter:e=>e.url===t});return r}pruneRemote(e){return this.container.git.pruneRemote(this.uri,e)}removeRemote(e){return this.container.git.removeRemote(this.uri,e)}branch(...e){this.runTerminalCommand("branch",...e)}branchDelete(e,t){Array.isArray(e)||(e=[e]);const i=e.filter((e=>!e.remote));if(0!==i.length){const r=["--delete"];if(t?.force&&r.push("--force"),this.runTerminalCommand("branch",...r,...e.map((e=>e.ref))),t?.remote){const e=i.filter((e=>null!=e.upstream));if(0!==e.length){const t=(0,l.XI)(e,(e=>(0,C.Lo)(e.upstream.name)));for(const[e,i]of t.entries())this.runTerminalCommand("push","-d",e,...i.map((e=>(0,C.S3)(e.upstream.name))))}}}const r=e.filter((e=>e.remote));if(0!==r.length){const e=(0,l.XI)(r,(e=>(0,C.Lo)(e.name)));for(const[t,i]of e.entries())this.runTerminalCommand("push","-d",t,...i.map((e=>(0,A.Av)(e))))}}cherryPick(...e){this.runTerminalCommand("cherry-pick",...e)}containsUri(e){return this===this.container.git.getRepository(e)}async fetch(e){const{progress:t,...i}={progress:!0,...e};return t?r.window.withProgress({location:r.ProgressLocation.Notification,title:null!=i.branch?`${i.pull?"Pulling":"Fetching"} ${i.branch.name}...`:`Fetching ${i.remote?`${i.remote} of `:""}${this.formattedName}...`},(()=>this.fetchCore(i))):this.fetchCore(i)}async fetchCore(e){try{null!=e?.branch||u.D.get("experimental.nativeGit")?await this.container.git.fetch(this.uri,e):await(0,h.Zv)("git.fetch",this.path),this.fireChange(-1)}catch(e){w.Yd.error(e),(0,a.W8)("Unable to fetch repository")}}async getBranch(e){if(e){const{values:[t]}=await this.getBranches({filter:t=>t.name===e});return t}return null==this._branch&&(this._branch=this.container.git.getBranch(this.uri)),this._branch}getBranches(e){return this.container.git.getBranches(this.uri,e)}getChangedFilesCount(e){return this.container.git.getChangedFilesCount(this.uri,e)}getCommit(e){return this.container.git.getCommit(this.uri,e)}getContributors(e){return this.container.git.getContributors(this.uri,e)}_gitDir;_gitDirPromise;getGitDir(){return null==this._gitDirPromise&&(this._gitDirPromise=this.container.git.getGitDir(this.uri).then((e=>this._gitDir=e))),this._gitDirPromise}_lastFetched;async getLastFetched(){if(null==this._lastFetched&&!await this.hasRemotes())return 0;try{const e=await this.container.git.getLastFetchedTimestamp(this.uri);null!=e&&(this._lastFetched=e)}catch{this._lastFetched=void 0}return this._lastFetched??0}async getMainRepository(){const e=await this.getGitDir();return null==e?.commonUri?this:this.container.git.getOrOpenRepository(e.commonUri,{detectNested:!1,force:!0,closeOnOpen:!0})}getMergeStatus(){return this.container.git.getMergeStatus(this.uri)}getRebaseStatus(){return this.container.git.getRebaseStatus(this.uri)}async getRemote(e){return(await this.getRemotes()).find((t=>t.name===e))}async getRemotes(e){const t=await this.container.git.getRemotes(this.uri,null!=e?.sort?{sort:e.sort}:void 0);return null!=e?.filter?t.filter(e.filter):t}async getRichRemote(e=!1){return this.container.git.getBestRemoteWithRichProvider(this.uri,{includeDisconnected:!e})}getStash(){return this.container.git.getStash(this.uri)}getStatus(){return this.container.git.getStatusForRepo(this.uri)}async getTag(e){const{values:[t]}=await this.getTags({filter:t=>t.name===e});return t}getTags(e){return this.container.git.getTags(this.uri,e)}async createWorktree(e,t){await this.container.git.createWorktree(this.uri,e.fsPath,t);const i=e.toString();return this.container.git.getWorktree(this.uri,(e=>e.uri.toString()===i))}getWorktrees(){return this.container.git.getWorktrees(this.uri)}async getWorktreesDefaultUri(){return this.container.git.getWorktreesDefaultUri(this.uri)}deleteWorktree(e,t){return this.container.git.deleteWorktree(this.uri,e.fsPath,t)}async hasRemotes(){const e=await this.getRemotes();return e?.length>0}async hasRichRemote(e=!1){const t=await this.getRichRemote(e);return null!=t?.provider}async hasUpstreamBranch(){const e=await this.getBranch();return null!=e?.upstream}isMaybeWorktree(){if(null!=this._gitDir)return null!=this._gitDir.commonUri}async isWorktree(){return null!=(await this.getGitDir())?.commonUri}merge(...e){this.runTerminalCommand("merge",...e)}async pull(e){const{progress:t,...i}={progress:!0,...e};return t?r.window.withProgress({location:r.ProgressLocation.Notification,title:`Pulling ${this.formattedName}...`},(()=>this.pullCore(i))):this.pullCore()}async pullCore(e){try{if(u.D.get("experimental.nativeGit")){const t=u.D.getAny("git.pullTags",this.uri);u.D.getAny("git.fetchOnPull",this.uri)&&await this.container.git.fetch(this.uri),await this.container.git.pull(this.uri,{...e,tags:t})}else{await this.hasUpstreamBranch()?await(0,h.Zv)(e?.rebase?"git.pullRebase":"git.pull",this.path):u.D.getAny("git.fetchOnPull",this.uri)&&await this.container.git.fetch(this.uri)}this.fireChange(-1)}catch(e){w.Yd.error(e),(0,a.W8)("Unable to pull repository")}}async showCreatePullRequestPrompt(e,t){if(!this.container.actionRunners.count("createPullRequest"))return;if(!await(0,a.B8)(t.name))return;const i=await this.getRemote(e);(0,h.SI)("createPullRequest",{repoPath:this.path,remote:null!=i?{name:i.name,provider:null!=i.provider?{id:i.provider.id,name:i.provider.name,domain:i.provider.domain}:void 0,url:i.url}:{name:e},branch:{name:t.name,isRemote:t.remote,upstream:t.upstream?.name}})}async push(e){const{progress:t,...i}={progress:!0,...e};return t?r.window.withProgress({location:r.ProgressLocation.Notification,title:(0,A.UR)(i.reference)?`${null!=i.publish?"Publishing ":"Pushing "}${i.reference.name}...`:`Pushing ${this.formattedName}...`},(()=>this.pushCore(i))):this.pushCore(i)}async pushCore(e){try{if(u.D.get("experimental.nativeGit")){const t=await this.getBranch(e?.reference?.name);await this.container.git.push(this.uri,{force:e?.force,branch:(0,A.UR)(e?.reference)?e?.reference:t,...e?.publish&&{publish:e.publish}})}else if((0,A.UR)(e?.reference)){const t=await this.container.git.getOrOpenScmRepository(this.uri);if(null==t)return;if(null!=e?.publish)await(t?.push(e.publish.remote,e.reference.name,!0)),this.showCreatePullRequestPrompt(e.publish.remote,e.reference);else{const i=await this.getBranch(e?.reference.name);if(null==i)return;await(t?.push(i.getRemoteName(),i.name,void 0,e?.force?o.QO.ForceWithLease:void 0))}}else if(null!=e?.reference){const t=await this.container.git.getOrOpenScmRepository(this.uri);if(null==t)return;const i=await this.getBranch();if(null==i)return;await(t?.push(i.getRemoteName(),`${e.reference.ref}:${i.getNameWithoutRemote()}`,void 0,e?.force?o.QO.ForceWithLease:void 0))}else await(0,h.Zv)(e?.force?"git.pushForce":"git.push",this.path);this.fireChange(-1)}catch(e){w.Yd.error(e),(0,a.W8)("Unable to push repository")}}rebase(e,...t){this.runTerminalCommand(null!=e&&0!==e.length?`${e.join(" ")} rebase`:"rebase",...t)}reset(...e){this.runTerminalCommand("reset",...e)}resetCaches(...e){(0===e.length||e.includes("branches"))&&(this._branch=void 0)}resume(){this._suspended&&(this._suspended=!1,null!=this._pendingRepoChange&&this._fireChangeDebounced(),null!=this._pendingFileSystemChange&&this._fireFileSystemChangeDebounced())}revert(...e){this.runTerminalCommand("revert",...e)}richSearchCommits(e,t){return this.container.git.richSearchCommits(this.uri,e,t)}searchCommits(e,t){return this.container.git.searchCommits(this.uri,e,t)}async setRemoteAsDefault(e,t=!0){await this.container.storage.storeWorkspace("remote:default",t?e.name:void 0),this.fireChange(5,102)}get starred(){const e=this.container.storage.getWorkspace("starred:repositories");return null!=e&&!0===e[this.id]}star(e){return this.updateStarred(!0,e)}async stashApply(e,t){await this.container.git.stashApply(this.uri,e,t),this.fireChange(4)}async stashDelete(e,t){await this.container.git.stashDelete(this.uri,e,t),this.fireChange(4)}async stashRename(e,t,i,r){await this.container.git.stashRename(this.uri,e,t,i,r),this.fireChange(4)}async stashSave(e,t,i){await this.container.git.stashSave(this.uri,e,t,i),this.fireChange(4)}async switch(e,t){const{progress:i,...s}={progress:!0,...t};return i?r.window.withProgress({location:r.ProgressLocation.Notification,title:`Switching ${this.formattedName} to ${e}...`,cancellable:!1},(()=>this.switchCore(e,s))):this.switchCore(e,s)}async switchCore(e,t){try{await this.container.git.checkout(this.uri,e,t),this.fireChange(-1)}catch(e){w.Yd.error(e),(0,a.W8)("Unable to switch to reference")}}toAbsoluteUri(e,t){const i=this.container.git.getAbsoluteUri(e,this.uri);return!(t?.validate??1)||this.containsUri(i)?i:void 0}unstar(e){return this.updateStarred(!1,e)}async updateStarred(e,t){null!=t?await this.updateStarredCore("branches",t.id,e):await this.updateStarredCore("repositories",this.id,e),this.fireChange(103)}async updateStarredCore(e,t,i){const r=`starred:${e}`;let s=this.container.storage.getWorkspace(r);s=(0,y.iC)(s,t,i),await this.container.storage.storeWorkspace(r,s),this.fireChange(103)}_etagFileSystem;get etagFileSystem(){return this._etagFileSystem}startWatchingFileSystem(){if(this._fsWatchCounter++,null==this._fsWatcherDisposable){const e=r.workspace.createFileSystemWatcher(new r.RelativePattern(this.uri,"**"));this._fsWatcherDisposable=r.Disposable.from(e,e.onDidChange(this.onFileSystemChanged,this),e.onDidCreate(this.onFileSystemChanged,this),e.onDidDelete(this.onFileSystemChanged,this)),this._etagFileSystem=Date.now()}return{dispose:()=>this.stopWatchingFileSystem()}}stopWatchingFileSystem(e=!1){null!=this._fsWatcherDisposable&&(--this._fsWatchCounter>0&&!e||(this._etagFileSystem=void 0,this._fsWatchCounter=0,this._fsWatcherDisposable.dispose(),this._fsWatcherDisposable=void 0))}suspend(){this._suspended=!0}tag(...e){this.runTerminalCommand("tag",...e)}tagDelete(e){Array.isArray(e)||(e=[e]);this.runTerminalCommand("tag","--delete",...e.map((e=>e.ref)))}fireChange(...e){const t=(0,v.UH)();this._updatedAt=Date.now(),null==this._fireChangeDebounced&&(this._fireChangeDebounced=(0,g.Ds)(this.fireChangeCore.bind(this),250)),this._pendingRepoChange=this._pendingRepoChange?.with(e)??new RepositoryChangeEvent(this,e),this.onDidRepositoryChange(this,new RepositoryChangeEvent(this,e)),this._suspended?w.Yd.debug(t,`queueing suspended ${this._pendingRepoChange.toString(!0)}`):this._fireChangeDebounced()}fireChangeCore(){const e=this._pendingRepoChange;null!=e&&(this._pendingRepoChange=void 0,w.Yd.debug(`Repository(${this.id}) firing ${e.toString(!0)}`),this._onDidChange.fire(e))}fireFileSystemChange(e){const t=(0,v.UH)();this._updatedAt=Date.now(),null==this._fireFileSystemChangeDebounced&&(this._fireFileSystemChangeDebounced=(0,g.Ds)(this.fireFileSystemChangeCore.bind(this),2500)),null==this._pendingFileSystemChange&&(this._pendingFileSystemChange={repository:this,uris:[]});const i=this._pendingFileSystemChange;i.uris.push(e),this._suspended?w.Yd.debug(t,`queueing suspended fs changes=${i.uris.map((e=>e.fsPath)).join(", ")}`):this._fireFileSystemChangeDebounced()}async fireFileSystemChangeCore(){let e=this._pendingFileSystemChange;if(null==e)return;this._pendingFileSystemChange=void 0;const t=await this.container.git.excludeIgnoredUris(this.uri,e.uris);0!==t.length&&(t.length!==e.uris.length&&(e={...e,uris:t}),w.Yd.debug(`Repository(${this.id}) firing fs changes=${e.uris.map((e=>e.fsPath)).join(", ")}`),this._onDidChangeFileSystem.fire(e))}async runTerminalCommand(e,...t){await(this.container.git.runGitCommandViaTerminal?.(this.uri,e,t,{execute:!0})),setTimeout((()=>this.fireChange(-1)),2500)}};function W(e){return e instanceof E}S([(0,m.fF)({singleLine:!0})],E.prototype,"setupRepoWatchersCore",1),S([(0,m.fF)()],E.prototype,"onGitIgnoreChanged",1),S([(0,m.fF)()],E.prototype,"onRepositoryChanged",1),S([(0,m.cM)()],E.prototype,"access",1),S([(0,m.cM)()],E.prototype,"supports",1),S([(0,m.cM)()],E.prototype,"addRemote",1),S([(0,m.cM)()],E.prototype,"pruneRemote",1),S([(0,m.cM)()],E.prototype,"removeRemote",1),S([(0,m.cM)()],E.prototype,"branch",1),S([(0,m.cM)()],E.prototype,"branchDelete",1),S([(0,m.cM)()],E.prototype,"cherryPick",1),S([(0,p.H)(),(0,m.cM)()],E.prototype,"fetch",1),S([(0,p.H)()],E.prototype,"getLastFetched",1),S([(0,p.H)(),(0,m.cM)({exit:!0})],E.prototype,"getMainRepository",1),S([(0,m.cM)()],E.prototype,"createWorktree",1),S([(0,m.cM)()],E.prototype,"merge",1),S([(0,p.H)(),(0,m.cM)()],E.prototype,"pull",1),S([(0,p.H)(),(0,m.cM)()],E.prototype,"push",1),S([(0,m.cM)()],E.prototype,"rebase",1),S([(0,m.cM)()],E.prototype,"reset",1),S([(0,m.cM)({singleLine:!0})],E.prototype,"resetCaches",1),S([(0,m.cM)()],E.prototype,"revert",1),S([(0,m.fF)()],E.prototype,"richSearchCommits",1),S([(0,m.fF)()],E.prototype,"searchCommits",1),S([(0,p.H)(),(0,m.cM)()],E.prototype,"stashApply",1),S([(0,p.H)(),(0,m.cM)()],E.prototype,"stashDelete",1),S([(0,p.H)(),(0,m.cM)()],E.prototype,"stashRename",1),S([(0,p.H)(),(0,m.cM)()],E.prototype,"stashSave",1),S([(0,p.H)(),(0,m.cM)()],E.prototype,"switch",1),S([(0,m.cM)()],E.prototype,"tag",1),S([(0,m.cM)()],E.prototype,"tagDelete",1),S([(0,m.fF)()],E.prototype,"fireChange",1),S([(0,m.fF)()],E.prototype,"fireFileSystemChange",1),E=S([(0,m.hJ)(((e,t)=>`${t}(${e.id})`))],E)},827:(e,t,i)=>{i.d(t,{Hk:()=>GitStatus,JB:()=>GitStatusFile,JP:()=>m});var r=i(5255),s=i(3599),o=i(4488),n=i(4627),a=i(5367),c=i(6450),l=i(439),h=i(7881),u=Object.defineProperty,d=Object.getOwnPropertyDescriptor,p=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?d(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&u(t,i,o),o};class GitStatus{constructor(e,t,i,r,s,o,n=!1){this.repoPath=e,this.branch=t,this.sha=i,this.files=r,this.state=s,this.upstream=o,this.rebasing=n,this.detached=(0,a.uz)(t),this.detached&&(this.branch=(0,a.Iq)(this.sha))}detached;get conflicts(){return this.files.filter((e=>e.conflicted))}get hasChanges(){return 0!==this.files.length}get hasConflicts(){return this.files.some((e=>e.conflicted))}get ref(){return this.detached?this.sha:this.branch}computeWorkingTreeStatus(){let e=0,t=0,i=0,r=0,s=0,o=0,n=0,a=0,c=0;const l=[],u=[],d=[];for(const p of this.files){switch(p.conflictStatus){case void 0:break;case h.Vz.AddedByBoth:case h.Vz.AddedByUs:case h.Vz.AddedByThem:e++,u.push(p);break;case h.Vz.DeletedByBoth:case h.Vz.DeletedByUs:case h.Vz.DeletedByThem:t++;break;default:i++,l.push(p)}switch(p.indexStatus){case void 0:break;case h.NV.Added:r++,u.push(p);break;case h.NV.Deleted:a++;break;default:o++,u.push(p)}switch(p.workingTreeStatus){case void 0:case h.Bh.Ignored:break;case h.Bh.Added:case h.Bh.Untracked:s++,d.push(p);break;case h.Bh.Deleted:c++;break;default:n++,d.push(p)}}const p=e+i+t,m=r+o+a,g=s+n+c;return{conflicted:p,conflictedAddsAndChanges:l,conflictedStatus:p>0?`+${e} ~${i} -${t}`:"",staged:m,stagedStatus:m>0?`+${r} ~${o} -${a}`:"",stagedAddsAndChanges:u,unstaged:g,unstagedStatus:g>0?`+${s} ~${n} -${c}`:"",unstagedAddsAndChanges:d}}getDiffStatus(){const e={added:0,deleted:0,changed:0};if(0===this.files.length)return e;for(const t of this.files)switch(t.status){case"A":case"?":e.added++;break;case"D":e.deleted++;break;default:e.changed++}return e}getFormattedDiffStatus({compact:e,empty:t,expand:i,prefix:r="",separator:s=" ",suffix:o=""}={}){const{added:a,changed:c,deleted:l}=this.getDiffStatus();if(0===a&&0===c&&0===l)return t??"";if(i){let e="";return a&&(e+=`${(0,n._6)("file",a)} added`),c&&(e+=`${0===e.length?"":s}${(0,n._6)("file",c)} changed`),l&&(e+=`${0===e.length?"":s}${(0,n._6)("file",l)} deleted`),`${r}${e}${o}`}let h="";return e?(0!==a&&(h+=`+${a}`),0!==c&&(h+=`${0===h.length?"":s}~${c}`),0!==l&&(h+=`${0===h.length?"":s}-${l}`)):h+=`+${a}${s}~${c}${s}-${l}`,`${r}${h}${o}`}async getRemote(){if(null==this.upstream)return;const e=await s.W.instance.git.getRemotesWithProviders(this.repoPath);if(0===e.length)return;const t=(0,a.Lo)(this.upstream);return e.find((e=>e.name===t))}getUpstreamStatus(e){return m(this.upstream?{name:this.upstream,missing:!1}:void 0,this.state,e)}}function m(e,t,i){let s=!0,o=!1,a=!1,c="",l=" ",h="";if(null!=i&&({count:s=!0,expand:o=!1,icons:a=!1,prefix:c="",separator:l=" ",suffix:h=""}=i),null==e||0===t.behind&&0===t.ahead)return i?.empty??"";if(o){let i="";return e.missing?i="missing":(t.behind&&(i+=`${(0,n._6)("commit",t.behind,{infix:a?"$(arrow-down) ":void 0})} behind`),t.ahead&&(i+=`${0===i.length?"":l}${(0,n._6)("commit",t.ahead,{infix:a?"$(arrow-up) ":void 0})} ahead`,h.startsWith(` ${e.name.split("/")[0]}`)&&(i+=" of"))),`${c}${i}${h}`}const u=s&&!e.missing;return`${c}${u?t.behind:""}${u||0!==t.behind?r.NE.ArrowDown:""}${l}${u?t.ahead:""}${u||0!==t.ahead?r.NE.ArrowUp:""}${h}`}p([(0,o.H)()],GitStatus.prototype,"conflicts",1),p([(0,o.H)()],GitStatus.prototype,"hasConflicts",1),p([(0,o.H)()],GitStatus.prototype,"computeWorkingTreeStatus",1),p([(0,o.H)()],GitStatus.prototype,"getDiffStatus",1),p([(0,o.H)()],GitStatus.prototype,"getRemote",1);class GitStatusFile{constructor(e,t,i,r,s){if(this.repoPath=e,this.path=r,this.originalPath=s,null!=t&&null!=i)switch(t+i){case"??":this.workingTreeStatus=h.Bh.Untracked;break;case"!!":this.workingTreeStatus=h.Bh.Ignored;break;case"AA":this.conflictStatus=h.Vz.AddedByBoth;break;case"AU":this.conflictStatus=h.Vz.AddedByUs;break;case"UA":this.conflictStatus=h.Vz.AddedByThem;break;case"DD":this.conflictStatus=h.Vz.DeletedByBoth;break;case"DU":this.conflictStatus=h.Vz.DeletedByUs;break;case"UD":this.conflictStatus=h.Vz.DeletedByThem;break;case"UU":this.conflictStatus=h.Vz.ModifiedByBoth}if(null==this.conflictStatus){switch(t){case"A":this.indexStatus=h.NV.Added;break;case"D":this.indexStatus=h.NV.Deleted;break;case"M":this.indexStatus=h.NV.Modified;break;case"R":this.indexStatus=h.NV.Renamed;break;case"C":this.indexStatus=h.NV.Copied}switch(i){case"A":case"?":this.workingTreeStatus=h.Bh.Added;break;case"D":this.workingTreeStatus=h.Bh.Deleted;break;case"M":this.workingTreeStatus=h.Bh.Modified}}}conflictStatus;indexStatus;workingTreeStatus;get conflicted(){return null!=this.conflictStatus}get staged(){return null!=this.indexStatus}get status(){return this.conflictStatus??this.indexStatus??this.workingTreeStatus}get uri(){return s.W.instance.git.getAbsoluteUri(this.path,this.repoPath)}get wip(){return null!=this.workingTreeStatus}getFormattedDirectory(e=!1){return(0,h.OC)(this,e)}getFormattedPath(e={}){return(0,h.PM)(this,e)}getOcticon(){return(0,h.Qw)(this.status)}getStatusText(){return(0,h.K9)(this.status)}getPseudoCommits(e,t){const i=new Date;if(this.conflicted)return[new c.aM(e,this.repoPath,l.CL,new c._j("You",t?.email??void 0,i),new c._j("You",t?.email??void 0,i),"Uncommitted changes",["HEAD"],"Uncommitted changes",new h.K8(this.repoPath,this.path,this.status,this.originalPath,"HEAD",void 0,!1),void 0,[])];const r=[],s=this.staged;if(this.wip){const o=s?l.pw:"HEAD";r.push(new c.aM(e,this.repoPath,l.CL,new c._j("You",t?.email??void 0,i),new c._j("You",t?.email??void 0,i),"Uncommitted changes",[o],"Uncommitted changes",new h.K8(this.repoPath,this.path,this.status,this.originalPath,o,void 0,!1),void 0,[])),i.setMilliseconds(i.getMilliseconds()-1)}return s&&r.push(new c.aM(e,this.repoPath,l.pw,new c._j("You",t?.email??void 0,i),new c._j("You",t?.email??void 0,i),"Uncommitted changes",["HEAD"],"Uncommitted changes",new h.K8(this.repoPath,this.path,this.status,this.originalPath,"HEAD",void 0,!0),void 0,[])),r}getPseudoFileChanges(){if(this.conflicted)return[new h.K8(this.repoPath,this.path,this.status,this.originalPath,"HEAD",void 0,!1)];const e=[],t=this.staged;return this.wip&&e.push(new h.K8(this.repoPath,this.path,this.status,this.originalPath,t?l.pw:"HEAD",void 0,!1)),t&&e.push(new h.K8(this.repoPath,this.path,this.status,this.originalPath,"HEAD",void 0,!0)),e}}p([(0,o.H)()],GitStatusFile.prototype,"status",1),p([(0,o.H)()],GitStatusFile.prototype,"uri",1)},9502:(e,t,i)=>{i.d(t,{Pj:()=>m,YR:()=>p,YU:()=>d,gE:()=>GitTag});var r=i(3599),s=i(5148),o=i(7512),n=i(4488),a=i(4336),c=i(4627),l=Object.defineProperty,h=Object.getOwnPropertyDescriptor,u=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?h(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&l(t,i,o),o};function d(e,t){return`${e}|tag/${t}`}class GitTag{constructor(e,t,i,r,s,o){this.repoPath=e,this.name=t,this.sha=i,this.message=r,this.date=s,this.commitDate=o,this.id=d(e,t)}refType="tag";id;toString(){return`${(0,a.q4)(this)}(${this.id})`}get formattedDate(){return"absolute"===r.W.instance.TagDateFormatting.dateStyle?this.formatDate(r.W.instance.TagDateFormatting.dateFormat):this.formatDateFromNow()}get ref(){return this.name}formatCommitDate(e){return null!=this.commitDate?(0,o.p6)(this.commitDate,e??"MMMM Do, YYYY h:mma"):""}formatCommitDateFromNow(){return null!=this.commitDate?(0,o.Zh)(this.commitDate):""}formatDate(e){return null!=this.date?(0,o.p6)(this.date,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(){return null!=this.date?(0,o.Zh)(this.date):""}getBasename(){const e=this.name.lastIndexOf("/");return-1!==e?this.name.substring(e+1):this.name}}function p(e){return e instanceof GitTag}function m(e,t){switch((t={orderBy:s.D.get("sortTagsBy"),...t}).orderBy){case"date:asc":return e.sort(((e,t)=>(e.date?.getTime()??0)-(t.date?.getTime()??0)));case"name:asc":return e.sort(((e,t)=>(0,c.dm)(e.name,t.name)));case"name:desc":return e.sort(((e,t)=>(0,c.dm)(t.name,e.name)));default:return e.sort(((e,t)=>(t.date?.getTime()??0)-(e.date?.getTime()??0)))}}u([(0,n.H)((e=>e??"MMMM Do, YYYY h:mma"))],GitTag.prototype,"formatCommitDate",1),u([(0,n.H)((e=>e??"MMMM Do, YYYY h:mma"))],GitTag.prototype,"formatDate",1),u([(0,n.H)()],GitTag.prototype,"getBasename",1)},3961:(e,t,i)=>{function r(e,t,i,r){return!(null==e||null==e.name&&null==e.email&&null==e.username||null!=e.name&&e.name!==t||null!=e.email&&e.email!==i||null!=e.username&&e.username!==r)}i.d(t,{o:()=>r})},2674:(e,t,i)=>{i.d(t,{K:()=>m,e:()=>p});var r=i(9496),s=i(3599),o=i(4488),n=i(5116),a=i(3700),c=i(4321),l=Object.defineProperty,h=Object.getOwnPropertyDescriptor,u=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?h(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&l(t,i,o),o};const d=class _GitWorktree{constructor(e,t,i,r,s,o,n,a){this.main=e,this.type=t,this.repoPath=i,this.uri=r,this.locked=s,this.prunable=o,this.sha=n,this.branch=a}static is(e){return e instanceof _GitWorktree}get opened(){return this.workspaceFolder?.uri.toString()===this.uri.toString()}get name(){switch(this.type){case"bare":return"(bare)";case"detached":return(0,c.zL)(this.sha);default:return this.branch||this.friendlyPath}}get friendlyPath(){return _GitWorktree.getFriendlyPath(this.uri)}get workspaceFolder(){return r.workspace.getWorkspaceFolder(this.uri)}_branch;getBranch(){return"branch"!==this.type||null==this.branch?Promise.resolve(void 0):(null==this._branch&&(this._branch=s.W.instance.git.getBranches(this.repoPath,{filter:e=>e.name===this.branch}).then((e=>e.values[0]))),this._branch)}_status;getStatus(e){return"bare"===this.type?Promise.resolve(void 0):((null==this._status||e?.force)&&(this._status=s.W.instance.git.getStatusForRepo(this.uri.fsPath)),this._status)}static getFriendlyPath(e){const t=r.workspace.getWorkspaceFolder(e);if(null==t)return(0,a.AH)(e.fsPath);const i=(0,a.AH)((0,a.Gf)(t.uri.fsPath,e.fsPath));return 0===i.length?t.name:i}};u([(0,o.H)()],d.prototype,"friendlyPath",1),u([(0,o.H)()],d.prototype,"workspaceFolder",1);let p=d;async function m(e,t,i,r,s){null==i||Array.isArray(i)||(i=[i]),r??=await e.getWorktrees();for(const o of r){if(o.branch===t)return o;if(null!=i&&null!=o.branch){s??=new n.X((t=>e.getBranches(null!=t?{paging:t}:void 0)));for await(const e of s.values())if(e.name===o.branch){if(null!=e.upstream?.name&&(i.includes(e.upstream.name)||e.upstream.name.startsWith("remotes/")&&i.includes(e.upstream.name.substring(8))))return o;break}}}}},4794:(e,t,i)=>{i.d(t,{Sk:()=>h,Ww:()=>GitRemoteParser,gK:()=>l});var r=i(4241),s=i(3050),o=Object.defineProperty,n=Object.getOwnPropertyDescriptor;const a="",c=/^(.*)\t(.*)\s\((.*)\)$/gm;class GitRemoteParser{static parse(e,t,i){if(!e)return;const r=new Map;let o,n,a,l,u,d,p,m;for(;;){if(m=c.exec(e),null==m)break;if([,o,n,a]=m,o=` ${o}`.substr(1),n=` ${n}`.substr(1),a=` ${a}`.substr(1),[l,u,d]=h(n),p=r.get(o),null==p)p=new s.ss(t,o,l,u,d,i(n,u,d),[{url:n,type:a}]),r.set(o,p);else{if(p.urls.push({url:n,type:a}),null!=p.provider&&"push"!==a)continue;p.provider?.hasRichIntegration()&&p.provider.dispose();const e=i(n,u,d);if(null==e)continue;p=new s.ss(t,o,l,u,d,e,p.urls),r.set(o,p)}}return[...r.values()]}}((e,t,i,r)=>{for(var s,a=r>1?void 0:r?n(t,i):t,c=e.length-1;c>=0;c--)(s=e[c])&&(a=(r?s(t,i,a):s(a))||a);r&&a&&o(t,i,a)})([(0,r.fF)({args:!1,singleLine:!0})],GitRemoteParser,"parse",1);const l=/^(?:(git:\/\/)(.*?)\/|(https?:\/\/)(?:.*?@)?(.*?)\/|git@(.*):|(ssh:\/\/)(?:.*@)?(.*?)(?::.*?)?(?:\/|(?=~))|(?:.*?@)(.*?):)(.*)$/;function h(e){const t=l.exec(e);return null==t?[a,a,e]:[t[1]||t[3]||t[6],t[2]||t[4]||t[5]||t[7]||t[8],t[9].replace(/\.git\/?$/,a)]}},2075:(e,t,i)=>{i.d(t,{at:()=>C,gu:()=>GitHubRemote,z4:()=>GitHubAuthenticationProvider});var r=i(9496),s=i(4241),o=i(4488),n=i(8786),a=i(4627),c=i(2509),l=i(4321),h=i(3084),u=Object.defineProperty,d=Object.getOwnPropertyDescriptor,p=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?d(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&u(t,i,o),o};const m=/\b(?<repo>[^/\s]+\/[^/\s]+)#(?<num>[0-9]+)\b(?!]\()/g,g=/^\/([^/]+)\/([^/]+?)\/blob(.+)$/i,f=/^L(\d+)(?:-L(\d+))?$/,w=Object.freeze({id:"github",scopes:["repo","read:user","user:email"]}),v=Object.freeze({id:"github-enterprise",scopes:["repo","read:user","user:email"]});function y(e){return(0,a.qq)(e,"github.com")}class GitHubRemote extends h.D{get authProvider(){return y(this.domain)?w:v}constructor(e,t,i,r,s,o=!1){super(e,t,i,r,s,o)}get apiBaseUrl(){return this.custom?`${this.protocol}://${this.domain}/api/v3`:`https://api.${this.domain}`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"#",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue or Pull Request #<num> on ${this.name}`,description:`${this.name} Issue or Pull Request #<num>`},{prefix:"gh-",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue or Pull Request #<num> on ${this.name}`,ignoreCase:!0,description:`${this.name} Issue or Pull Request #<num>`},{tokenize:(e,t,i)=>"plaintext"===t?e:e.replace(m,((e,r,s)=>{const o=(0,n.M)(`${this.protocol}://${this.domain}/${r}/issues/${s}`),a=` "Open Issue or Pull Request #${s} from ${r} on ${this.name}"`,c=`\0${i.size}\0`;return"markdown"===t?i.set(c,`[${e}](${o}${a})`):"html"===t&&i.set(c,`<a href="${o}" title=${a}>${e}</a>`),c})),parse:(e,t)=>{let i,r,s;for(;;){if(s=m.exec(e),null==s?.groups)break;({repo:i,num:r}=s.groups),t.set(r,{provider:this,id:r,prefix:`${i}#`,url:`${this.protocol}://${this.domain}/${i}/issues/${r}`,title:`Open Issue or Pull Request #<num> from ${i} on ${this.name}`,description:`${this.name} Issue or Pull Request ${i}#${r}`})}}}]),this._autolinks}get avatarUri(){const[e]=this.splitPath();return r.Uri.parse(`https://avatars.githubusercontent.com/${e}`)}get icon(){return"github"}get id(){return"github"}get name(){return this.formatName("GitHub")}async connect(){return!(!y(this.domain)&&!await(0,h.e)("GitHub Enterprise instance",this.container))&&super.connect()}async getLocalInfoFromRemoteUri(e,t,i){if(t.authority!==this.domain)return;if((i?.validate??1)&&!t.path.startsWith(`/${this.path}/`))return;let r,s;if(t.fragment){const e=f.exec(t.fragment);if(null!=e){const[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}const o=g.exec(t.path);if(null==o)return;const[,,,n]=o;let a,c=n.indexOf("/",1);if(-1!==c){const t=n.substring(1,c);if((0,l.D3)(t)){const t=e.toAbsoluteUri(n.substr(c),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:s}}}const h=new Map;c=n.length;do{c=n.lastIndexOf("/",c-1),a=n.substring(1,c),h.set(a,n.substr(c))}while(c>0);if(0!==h.size){const{values:t}=await e.getBranches({filter:e=>e.remote&&h.has(e.getNameWithoutRemote())});for(const o of t){const t=h.get(o.getNameWithoutRemote());if(null==t)continue;const n=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=n)return{uri:n,startLine:r,endLine:s}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/tree/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/compare/${e}${i}${t}`)}getUrlForCreatePullRequest(e,t){if(e.remote.url===t.remote.url)return this.encodeUrl(`${this.baseUrl}/pull/new/${e.branch??"HEAD"}...${t.branch}`);const[i]=t.remote.path.split("/",1);return this.encodeUrl(`${this.baseUrl}/pull/new/${e.branch??"HEAD"}...${i}:${t.branch}`)}getUrlForFile(e,t,i,r){let s;return s=null!=r?r.start.line===r.end.line?`#L${r.start.line}`:`#L${r.start.line}-L${r.end.line}`:"",i?`${this.encodeUrl(`${this.baseUrl}/blob/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/blob/${t}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}?path=${e}`)}${s}`}async getProviderAccountForCommit({accessToken:e},t,i){const[r,s]=this.splitPath();return(await this.container.github)?.getAccountForCommit(this,e,r,s,t,{...i,baseUrl:this.apiBaseUrl})}async getProviderAccountForEmail({accessToken:e},t,i){const[r,s]=this.splitPath();return(await this.container.github)?.getAccountForEmail(this,e,r,s,t,{...i,baseUrl:this.apiBaseUrl})}async getProviderDefaultBranch({accessToken:e}){const[t,i]=this.splitPath();return(await this.container.github)?.getDefaultBranch(this,e,t,i,{baseUrl:this.apiBaseUrl})}async getProviderIssueOrPullRequest({accessToken:e},t){const[i,r]=this.splitPath();return(await this.container.github)?.getIssueOrPullRequest(this,e,i,r,Number(t),{baseUrl:this.apiBaseUrl})}async getProviderPullRequestForBranch({accessToken:e},t,r){const[s,o]=this.splitPath(),{include:n,...a}=r??{},c=(await i.e(457).then(i.bind(i,3878))).toGitHubPullRequestState;return(await this.container.github)?.getPullRequestForBranch(this,e,s,o,t,{...a,include:n?.map((e=>c(e))),baseUrl:this.apiBaseUrl})}async getProviderPullRequestForCommit({accessToken:e},t){const[i,r]=this.splitPath();return(await this.container.github)?.getPullRequestForCommit(this,e,i,r,t,{baseUrl:this.apiBaseUrl})}async getProviderRepositoryMetadata({accessToken:e}){const[t,i]=this.splitPath();return(await this.container.github)?.getRepositoryMetadata(this,e,t,i,{baseUrl:this.apiBaseUrl})}async searchProviderMyPullRequests({accessToken:e}){return(await this.container.github)?.searchMyPullRequests(this,e,{repos:[this.path],baseUrl:this.apiBaseUrl})}async searchProviderMyIssues({accessToken:e}){return(await this.container.github)?.searchMyIssues(this,e,{repos:[this.path],baseUrl:this.apiBaseUrl})}}p([(0,o.H)()],GitHubRemote.prototype,"authProvider",1),p([(0,s.cM)()],GitHubRemote.prototype,"connect",1);const b=/^(?:(\d+)\+)?([a-zA-Z\d-]{1,39})@users\.noreply\.(.*)$/i;function C(e){const t=b.exec(e);if(null==t)return;const[,i,r,s]=t;return{userId:i,login:r,authority:s}}class GitHubAuthenticationProvider{_disposable;constructor(e){this._disposable=e.integrationAuthentication.registerProvider("github-enterprise",this)}dispose(){this._disposable.dispose()}getSessionId(e){return e?.domain??""}async createSession(e){const t=r.window.createInputBox();t.ignoreFocusOut=!0;const i=[];let s;try{const o={iconPath:new r.ThemeIcon("link-external"),tooltip:"Open the GitHub Access Tokens Page"};s=await new Promise((s=>{i.push(t.onDidHide((()=>s(void 0))),t.onDidChangeValue((()=>t.validationMessage=void 0)),t.onDidAccept((()=>{const e=t.value.trim();e?s(e):t.validationMessage="A personal access token is required"})),t.onDidTriggerButton((t=>{t===o&&r.env.openExternal(r.Uri.parse(`https://${e?.domain??"github.com"}/settings/tokens`))}))),t.password=!0,t.title="GitHub Authentication"+(e?.domain?`  • ${e.domain}`:""),t.placeholder=`Requires ${e?.scopes.join(", ")??"all"} scopes`,t.prompt=(0,c.gn)("input-prompt-links")?`Paste your [GitHub Personal Access Token](https://${e?.domain??"github.com"}/settings/tokens "Get your GitHub Access Token")`:"Paste your GitHub Personal Access Token",t.buttons=[o],t.show()}))}finally{t.dispose(),i.forEach((e=>{e.dispose()}))}if(s)return{id:this.getSessionId(e),accessToken:s,scopes:[],account:{id:"",label:""}}}}},5542:(e,t,i)=>{i.d(t,{E:()=>GitLabRemote,h:()=>GitLabAuthenticationProvider});var r=i(9496),s=i(4241),o=i(8786),n=i(4627),a=i(2509),c=i(4321),l=i(3084),h=Object.defineProperty,u=Object.getOwnPropertyDescriptor;const d=/\b(?<repo>[^/\s]+\/[^/\s]+)#(?<num>[0-9]+)\b(?!]\()/g,p=/\b(?<repo>[^/\s]+\/[^/\s]+)!(?<num>[0-9]+)\b(?!]\()/g,m=/^\/([^/]+)\/([^/]+?)\/-\/blob(.+)$/i,g=/^L(\d+)(?:-(\d+))?$/,f=Object.freeze({id:"gitlab",scopes:["read_api","read_user","read_repository"]});class GitLabRemote extends l.D{get authProvider(){return f}constructor(e,t,i,r,s,o=!1){super(e,t,i,r,s,o)}get apiBaseUrl(){return this.custom?`${this.protocol}://${this.domain}/api`:`https://${this.domain}/api`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"#",url:`${this.baseUrl}/-/issues/<num>`,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`},{prefix:"!",url:`${this.baseUrl}/-/merge_requests/<num>`,title:`Open Merge Request !<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Merge Request !<num>`},{tokenize:(e,t,i)=>"plaintext"===t?e:e.replace(d,((e,r,s)=>{const n=(0,o.M)(`${this.protocol}://${this.domain}/${r}/-/issues/${s}`),a=` "Open Issue #${s} from ${r} on ${this.name}"`,c=`\0${i.size}\0`;return"markdown"===t?i.set(c,`[${e}](${n}${a})`):"html"===t&&i.set(c,`<a href="${n}" title=${a}>${e}</a>`),c})),parse:(e,t)=>{let i,r,s;for(;;){if(s=d.exec(e),null==s?.groups)break;({repo:i,num:r}=s.groups),t.set(r,{provider:this,id:r,prefix:`${i}#`,url:`${this.protocol}://${this.domain}/${i}/-/issues/${r}`,title:`Open Issue #<num> from ${i} on ${this.name}`,type:"issue",description:`${this.name} Issue ${i}#${r}`})}}},{tokenize:(e,t,i)=>"plaintext"===t?e:e.replace(p,((e,r,s)=>{const n=(0,o.M)(`${this.protocol}://${this.domain}/${r}/-/merge_requests/${s}`),a=` "Open Merge Request !${s} from ${r} on ${this.name}"`,c=`\0${i.size}\0`;return"markdown"===t?i.set(c,`[${e}](${n}${a})`):"html"===t&&i.set(c,`<a href="${n}" title=${a}>${e}</a>`),c})),parse:(e,t)=>{let i,r,s;for(;;){if(s=p.exec(e),null==s?.groups)break;({repo:i,num:r}=s.groups),t.set(r,{provider:this,id:r,prefix:`${i}!`,url:`${this.protocol}://${this.domain}/${i}/-/merge_requests/${r}`,title:`Open Merge Request !<num> from ${i} on ${this.name}`,type:"pullrequest",description:`Merge Request !${r} from ${i} on ${this.name}`})}}}]),this._autolinks}get icon(){return"gitlab"}get id(){return"gitlab"}get name(){return this.formatName("GitLab")}async connect(){return!(!(0,n.qq)(this.domain,"gitlab.com")&&!await(0,l.e)("GitLab self-managed instance",this.container))&&super.connect()}async getLocalInfoFromRemoteUri(e,t,i){if(t.authority!==this.domain)return;if((i?.validate??1)&&!t.path.startsWith(`/${this.path}/`))return;let r,s;if(t.fragment){const e=g.exec(t.fragment);if(null!=e){const[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}const o=m.exec(t.path);if(null==o)return;const[,,,n]=o;let a,l=n.indexOf("/",1);if(-1!==l){const t=n.substring(1,l);if((0,c.D3)(t)){const t=e.toAbsoluteUri(n.substr(l),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:s}}}const h=new Map;l=n.length;do{l=n.lastIndexOf("/",l-1),a=n.substring(1,l),h.set(a,n.substr(l))}while(l>0);if(0!==h.size){const{values:t}=await e.getBranches({filter:e=>e.remote&&h.has(e.getNameWithoutRemote())});for(const o of t){const t=h.get(o.getNameWithoutRemote());if(null==t)continue;const n=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=n)return{uri:n,startLine:r,endLine:s}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/-/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/-/tree/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/-/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/-/compare/${e}${i}${t}`)}getUrlForFile(e,t,i,r){let s;return s=null!=r?r.start.line===r.end.line?`#L${r.start.line}`:`#L${r.start.line}-${r.end.line}`:"",i?`${this.encodeUrl(`${this.baseUrl}/-/blob/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/-/blob/${t}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}?path=${e}`)}${s}`}async getProviderAccountForCommit({accessToken:e},t,i){const[r,s]=this.splitPath();return(await this.container.gitlab)?.getAccountForCommit(this,e,r,s,t,{...i,baseUrl:this.apiBaseUrl})}async getProviderAccountForEmail({accessToken:e},t,i){const[r,s]=this.splitPath();return(await this.container.gitlab)?.getAccountForEmail(this,e,r,s,t,{...i,baseUrl:this.apiBaseUrl})}async getProviderDefaultBranch({accessToken:e}){const[t,i]=this.splitPath();return(await this.container.gitlab)?.getDefaultBranch(this,e,t,i,{baseUrl:this.apiBaseUrl})}async getProviderIssueOrPullRequest({accessToken:e},t){const[i,r]=this.splitPath();return(await this.container.gitlab)?.getIssueOrPullRequest(this,e,i,r,Number(t),{baseUrl:this.apiBaseUrl})}async getProviderPullRequestForBranch({accessToken:e},t,r){const[s,o]=this.splitPath(),{include:n,...a}=r??{},c=(await i.e(449).then(i.bind(i,6630))).toGitLabMergeRequestState;return(await this.container.gitlab)?.getPullRequestForBranch(this,e,s,o,t,{...a,include:n?.map((e=>c(e))),baseUrl:this.apiBaseUrl})}async getProviderPullRequestForCommit({accessToken:e},t){const[i,r]=this.splitPath();return(await this.container.gitlab)?.getPullRequestForCommit(this,e,i,r,t,{baseUrl:this.apiBaseUrl})}async getProviderRepositoryMetadata({accessToken:e}){const[t,i]=this.splitPath();return(await this.container.gitlab)?.getRepositoryMetadata(this,e,t,i,{baseUrl:this.apiBaseUrl})}async searchProviderMyPullRequests(e){return Promise.resolve(void 0)}async searchProviderMyIssues(e){return Promise.resolve(void 0)}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?u(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&h(t,i,o)})([(0,s.cM)()],GitLabRemote.prototype,"connect",1);class GitLabAuthenticationProvider{_disposable;constructor(e){this._disposable=e.integrationAuthentication.registerProvider("gitlab",this)}dispose(){this._disposable.dispose()}getSessionId(e){return e?.domain??""}async createSession(e){const t=r.window.createInputBox();t.ignoreFocusOut=!0;const i=[];let s;try{const o={iconPath:new r.ThemeIcon("link-external"),tooltip:"Open the GitLab Access Tokens Page"};s=await new Promise((s=>{i.push(t.onDidHide((()=>s(void 0))),t.onDidChangeValue((()=>t.validationMessage=void 0)),t.onDidAccept((()=>{const e=t.value.trim();e?s(e):t.validationMessage="A personal access token is required"})),t.onDidTriggerButton((t=>{t===o&&r.env.openExternal(r.Uri.parse(`https://${e?.domain??"gitlab.com"}/-/profile/personal_access_tokens`))}))),t.password=!0,t.title="GitLab Authentication"+(e?.domain?`  • ${e.domain}`:""),t.placeholder=`Requires ${e?.scopes.join(", ")??"all"} scopes`,t.prompt=t.prompt=(0,a.gn)("input-prompt-links")?`Paste your [GitLab Personal Access Token](https://${e?.domain??"gitlab.com"}/-/profile/personal_access_tokens "Get your GitLab Access Token")`:"Paste your GitLab Personal Access Token",t.buttons=[o],t.show()}))}finally{t.dispose(),i.forEach((e=>{e.dispose()}))}if(s)return{id:this.getSessionId(e),accessToken:s,scopes:[],account:{id:"",label:""}}}}},2795:(e,t,i)=>{i.d(t,{x:()=>RemoteProvider});var r=i(9496),s=i(4488),o=i(8786),n=i(6503),a=Object.defineProperty,c=Object.getOwnPropertyDescriptor;class RemoteProvider{constructor(e,t,i="https",r,s=!1){this.domain=e,this.path=t,this.protocol=i,this.custom=s,this._name=r}type="simple";_name;get remoteKey(){return this.domain?`${this.domain}/${this.path}`:this.path}get autolinks(){return[]}get avatarUri(){}get displayPath(){return this.path}get icon(){return"remote"}get owner(){return this.path.split("/")[0]}async copy(e){const t=this.url(e);null!=t&&await r.env.clipboard.writeText(t)}hasRichIntegration(){return"rich"===this.type}get maybeConnected(){return!1}open(e){return this.openUrl(this.url(e))}url(e){switch(e.type){case n.J.Branch:return this.getUrlForBranch(e.branch);case n.J.Branches:return this.getUrlForBranches();case n.J.Commit:return this.getUrlForCommit(e.sha);case n.J.Comparison:return this.getUrlForComparison?.(e.base,e.compare,e.notation??"...");case n.J.CreatePullRequest:return this.getUrlForCreatePullRequest?.(e.base,e.compare);case n.J.File:return this.getUrlForFile(e.fileName,null!=e.branchOrTag?e.branchOrTag:void 0,void 0,e.range);case n.J.Repo:return this.getUrlForRepository();case n.J.Revision:return this.getUrlForFile(e.fileName,null!=e.branchOrTag?e.branchOrTag:void 0,null!=e.sha?e.sha:void 0,e.range);default:return}}get baseUrl(){return`${this.protocol}://${this.domain}/${this.path}`}formatName(e){return null!=this._name?this._name:`${e}${this.custom?` (${this.domain})`:""}`}splitPath(){const e=this.path.indexOf("/");return[this.path.substring(0,e),this.path.substring(e+1)]}getUrlForRepository(){return this.baseUrl}async openUrl(e){if(null!=e)return r.env.openExternal(e)}encodeUrl(e){return(0,o.M)(e)?.replace(/#/g,"%23")}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?c(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&a(t,i,o)})([(0,s.H)()],RemoteProvider.prototype,"remoteKey",1)},7552:(e,t,i)=>{i.d(t,{B:()=>R,v:()=>S});var r=i(4336),s=i(2795);const o=/\/_git\/?/i,n=/^DefaultCollection\//i,a=/^(.*?)\/(.*?)\/(.*)/,c=/^(ssh|vs-ssh)\./i,l=/^\/?v\d\//i,h=/path=([^&]+)/i,u=/line=(\d+)(?:&lineEnd=(\d+))?/;class AzureDevOpsRemote extends s.x{constructor(e,t,i,r,s=!1){if(c.test(e)){t=t.replace(l,""),e=e.replace(c,"");const i=a.exec(t);if(null!=i){const[,r,o,n]=i;s?(e=`${r}.${e}`,t=`${o}/_git/${n}`):t=`${r}/${o}/_git/${n}`}}super(e,t=decodeURIComponent(t),i,r)}_autolinks;get autolinks(){if(void 0===this._autolinks){const e=this.baseUrl.replace(o,"/");this._autolinks=[{prefix:"#",url:`${e}/_workitems/edit/<num>`,title:`Open Work Item #<num> on ${this.name}`,type:"issue",description:`${this.name} Work Item #<num>`},{prefix:"PR ",url:`${this.baseUrl}/pullrequest/<num>`,title:`Open Pull Request #<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Pull Request #<num>`}]}return this._autolinks}get icon(){return"azdo"}get id(){return"azure-devops"}get name(){return"Azure DevOps"}_displayPath;get displayPath(){return void 0===this._displayPath&&(this._displayPath=this.path.replace(o,"/").replace(n,"")),this._displayPath}async getLocalInfoFromRemoteUri(e,t,i){if(t.authority!==this.domain)return Promise.resolve(void 0);let r,s;if(t.query){const e=u.exec(t.query);if(null!=e){const[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}const o=h.exec(t.query);if(null==o)return Promise.resolve(void 0);const[,n]=o,a=e.toAbsoluteUri(n,{validate:i?.validate});return Promise.resolve(null!=a?{uri:a,startLine:r,endLine:s}:void 0)}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/?version=GB${e}&_a=history`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/branchCompare?baseVersion=GB${e}&targetVersion=GB${t}`)}getUrlForFile(e,t,i,r){let s;return s=null!=r?r.start.line===r.end.line?`&line=${r.start.line}&lineStartColumn=${r.start.character+1}&lineEndColumn=${r.end.character+1}`:`&line=${r.start.line}&lineEnd=${r.end.line}&lineStartColumn=${r.start.character+1}&lineEndColumn=${r.end.character+1}`:"",i?this.encodeUrl(`${this.baseUrl}?path=${e}&version=GC${i}${s}&_a=contents`):t?this.encodeUrl(`${this.baseUrl}/?path=/${e}&version=GB${t}&_a=contents${s}`):this.encodeUrl(`${this.baseUrl}?path=/${e}${s}`)}}var d=i(4321);const p=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,m=/^lines-(\d+)(?::(\d+))?$/;class BitbucketRemote extends s.x{constructor(e,t,i,r,s=!1){super(e,t,i,r,s)}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"issue #",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`},{prefix:"pull request #",url:`${this.baseUrl}/pull-requests/<num>`,title:`Open Pull Request #<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Pull Request #<num>`}]),this._autolinks}get icon(){return"bitbucket"}get id(){return"bitbucket"}get name(){return this.formatName("Bitbucket")}async getLocalInfoFromRemoteUri(e,t,i){if(t.authority!==this.domain)return;if((i?.validate??1)&&!t.path.startsWith(`/${this.path}/`))return;let r,s;if(t.fragment){const e=m.exec(t.fragment);if(null!=e){const[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}const o=p.exec(t.path);if(null==o)return;const[,,,n]=o;let a,c=n.indexOf("/",1);if(-1!==c){const t=n.substring(1,c);if((0,d.D3)(t)){const t=e.toAbsoluteUri(n.substr(c),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:s}}}const l=new Map;c=n.length;do{c=n.lastIndexOf("/",c-1),a=n.substring(1,c),l.set(a,n.substr(c))}while(c>0);if(0!==l.size){const{values:t}=await e.getBranches({filter:e=>e.remote&&l.has(e.getNameWithoutRemote())});for(const o of t){const t=l.get(o.getNameWithoutRemote());if(null==t)continue;const n=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=n)return{uri:n,startLine:r,endLine:s}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/branch/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commits/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/branches/compare/${e}%0D${t}`).replace("%250D","%0D")}getUrlForFile(e,t,i,r){let s;return s=null!=r?r.start.line===r.end.line?`#${e}-${r.start.line}`:`#${e}-${r.start.line}:${r.end.line}`:"",i?`${this.encodeUrl(`${this.baseUrl}/src/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/src/${t}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}?path=${e}`)}${s}`}}const g=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,f=/^lines-(\d+)(?::(\d+))?$/;class BitbucketServerRemote extends s.x{constructor(e,t,i,r,s=!1){super(e,t,i,r,s)}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"issue #",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`},{prefix:"pull request #",ignoreCase:!0,url:`${this.baseUrl}/pull-requests/<num>`,title:`Open Pull Request #<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Pull Request #<num>`}]),this._autolinks}get baseUrl(){const[e,t]=this.path.startsWith("scm/")?this.path.replace("scm/","").split("/"):this.splitPath();return`${this.protocol}://${this.domain}/projects/${e}/repos/${t}`}get icon(){return"bitbucket"}get id(){return"bitbucket-server"}get name(){return this.formatName("Bitbucket Server")}async getLocalInfoFromRemoteUri(e,t,i){if(t.authority!==this.domain)return;if((i?.validate??1)&&!t.path.startsWith(`/${this.path}/`))return;let r,s;if(t.fragment){const e=f.exec(t.fragment);if(null!=e){const[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}const o=g.exec(t.path);if(null==o)return;const[,,,n]=o;let a,c=n.indexOf("/",1);if(-1!==c){const t=n.substring(1,c);if((0,d.D3)(t)){const t=e.toAbsoluteUri(n.substr(c),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:s}}}const l=new Map;c=n.length;do{c=n.lastIndexOf("/",c-1),a=n.substring(1,c),l.set(a,n.substr(c))}while(c>0);if(0!==l.size){const{values:t}=await e.getBranches({filter:e=>e.remote&&l.has(e.getNameWithoutRemote())});for(const o of t){const t=l.get(o.getNameWithoutRemote());if(null==t)continue;const n=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=n)return{uri:n,startLine:r,endLine:s}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/commits?until=${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commits/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/branches/compare/${e}%0D${t}`).replace("%250D","%0D")}getUrlForFile(e,t,i,r){let s;return s=null!=r?r.start.line===r.end.line?`#${r.start.line}`:`#${r.start.line}-${r.end.line}`:"",i?`${this.encodeUrl(`${this.baseUrl}/browse/${e}?at=${i}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/browse/${e}?at=${t}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}/browse/${e}`)}${s}`}}var w=i(4627);class CustomRemote extends s.x{urls;constructor(e,t,i,r,s){super(e,t,r,s,!0),this.urls=i}get id(){return"custom"}get name(){return this.formatName("Custom")}getLocalInfoFromRemoteUri(e,t){return Promise.resolve(void 0)}getUrlForRepository(){return this.getUrl(this.urls.repository,this.getContext())}getUrlForBranches(){return this.getUrl(this.urls.branches,this.getContext())}getUrlForBranch(e){return this.getUrl(this.urls.branch,this.getContext({branch:e}))}getUrlForCommit(e){return this.getUrl(this.urls.commit,this.getContext({id:e}))}getUrlForComparison(e,t,i){if(null!=this.urls.comparison)return this.getUrl(this.urls.comparison,this.getContext({ref1:e,ref2:t,notation:i}))}getUrlForFile(e,t,i,r){let s,o,n;s=null!=r?r.start.line===r.end.line?(0,w.sX)(this.urls.fileLine,{line:r.start.line,line_encoded:r.start.line}):(0,w.sX)(this.urls.fileRange,{start:r.start.line,start_encoded:r.start.line,end:r.end.line,end_encoded:r.end.line}):"",i?(o=this.urls.fileInCommit,n=this.getContext({id:i,file:e,line:s})):t?(o=this.urls.fileInBranch,n=this.getContext({branch:t,file:e,line:s})):(o=this.urls.file,n=this.getContext({file:e,line:s}));let a=(0,w.sX)(o,n);if((0,w.Gg)(o).some((e=>e.key.endsWith("_encoded"))))return a;const c=a.includes("#");if(a=this.encodeUrl(a),c){const e=a.lastIndexOf("%23");-1!==e&&(a=`${a.substring(0,e)}#${a.substring(e+3)}`)}return a}getUrl(e,t){const i=(0,w.sX)(e,t);return(0,w.Gg)(e).some((e=>e.key.endsWith("_encoded")))?i:this.encodeUrl(i)}getContext(e){const[t,i]=this.splitPath(),r={repo:this.path,repoBase:t,repoPath:i,...e??{}};for(const[e,t]of Object.entries(r))r[`${e}_encoded`]=encodeURIComponent(t);return r}}const v=/^\/([^/]+)\/\+(.+)$/i,y=/^(\d+)$/;class GerritRemote extends s.x{constructor(e,t,i,r,s=!1,o=!0){o&&"ssh"!==i&&(t=t.replace(/^a\//,"")),super(e,t,i,r,s)}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"Change-Id: ",url:`${this.baseReviewUrl}/q/<num>`,title:`Open Change #<num> on ${this.name}`,alphanumeric:!0,description:`${this.name} Change #<num>`}]),this._autolinks}get icon(){return"gerrit"}get id(){return"gerrit"}get name(){return this.formatName("Gerrit")}get baseUrl(){return`${this.protocol}://${this.domain}/plugins/gitiles/${this.path}`}get baseReviewUrl(){return`${this.protocol}://${this.domain}`}async getLocalInfoFromRemoteUri(e,t,i){if(t.authority!==this.domain)return;if((i?.validate??1)&&!t.path.startsWith(`/${this.path}/`))return;let r;if(t.fragment){const e=y.exec(t.fragment);if(null!=e){const[,t]=e;t&&(r=parseInt(t,10))}}const s=v.exec(t.path);if(null==s)return;const[,,o]=s;let n=o.indexOf("/",1);if(-1!==n){const t=o.substring(1,n);if((0,d.D3)(t)||"HEAD"==t){const t=e.toAbsoluteUri(o.substr(n),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r}}}if(o.startsWith("/refs/heads/")){const t=o.substr(12);let s;const a=new Map;n=t.length;do{n=t.lastIndexOf("/",n-1),s=t.substring(1,n),a.set(s,t.substr(n))}while(n>0);if(0!==a.size){const{values:t}=await e.getBranches({filter:e=>e.remote&&a.has(e.getNameWithoutRemote())});for(const s of t){const t=a.get(s.getNameWithoutRemote());if(null==t)continue;const o=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=o)return{uri:o,startLine:r}}}}else if(o.startsWith("/refs/tags/")){const t=o.substr(11);let s;const a=new Map;n=t.length;do{n=t.lastIndexOf("/",n-1),s=t.substring(1,n),a.set(s,t.substr(n))}while(n>0);if(0!==a.size){const{values:t}=await e.getTags({filter:e=>a.has(e.name)});for(const s of t){const t=a.get(s.name);if(null==t)continue;const o=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=o)return{uri:o,startLine:r}}}}else;}getUrlForBranches(){return this.encodeUrl(`${this.baseReviewUrl}/admin/repos/${this.path},branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/+/refs/heads/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseReviewUrl}/q/${e}`)}getUrlForFile(e,t,i,r){const s=null!=r?`#${r.start.line}`:"";return i?`${this.encodeUrl(`${this.baseUrl}/+/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.getUrlForBranch(t)}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}/+/HEAD/${e}`)}${s}`}}const b=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,C=/^L(\d+)(?:-L(\d+))?$/;class GiteaRemote extends s.x{constructor(e,t,i,r,s=!1){super(e,t,i,r,s)}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"#",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`}]),this._autolinks}get icon(){return"gitea"}get id(){return"gitea"}get name(){return this.formatName("Gitea")}async getLocalInfoFromRemoteUri(e,t,i){if(t.authority!==this.domain)return;if((i?.validate??1)&&!t.path.startsWith(`/${this.path}/`))return;let r,s;if(t.fragment){const e=C.exec(t.fragment);if(null!=e){const[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}const o=b.exec(t.path);if(null==o)return;const[,,,n]=o;let a,c;if(n.startsWith("/commit/")&&(a=8,c=n.indexOf("/",a),-1!==c)){const t=n.substring(a,c);if((0,d.D3)(t)){const t=e.toAbsoluteUri(n.substr(c),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:s}}}if(n.startsWith("/branch/")){let t;const o=new Map;a=8,c=a;do{t=n.substring(a,c),o.set(t,n.substr(c)),c=n.indexOf("/",c+1)}while(c<n.length&&-1!==c);if(0!==o.size){const{values:t}=await e.getBranches({filter:e=>e.remote&&o.has(e.getNameWithoutRemote())});for(const n of t){const t=o.get(n.getNameWithoutRemote());if(null==t)continue;const a=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=a)return{uri:a,startLine:r,endLine:s}}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/src/branch/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/compare/${e}...${t}`)}getUrlForFile(e,t,i,r){let s;return s=null!=r?r.start.line===r.end.line?`#L${r.start.line}`:`#L${r.start.line}-L${r.end.line}`:"",i?`${this.encodeUrl(`${this.baseUrl}/src/commit/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/src/branch/${t}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}/src/${e}`)}${s}`}}var A=i(2075),k=i(5542);class GoogleSourceRemote extends GerritRemote{constructor(e,t,i,r,s=!1){super(e,t,i,r,s,!1)}get id(){return"google-source"}get name(){return this.formatName("Google Source")}get baseUrl(){return`${this.protocol}://${this.domain}/${this.path}`}get reviewDomain(){const[e,...t]=this.domain.split(".");return[`${e}-review`,...t].join(".")}get baseReviewUrl(){return`${this.protocol}://${this.reviewDomain}`}}const P=[{custom:!1,matcher:"bitbucket.org",creator:(e,t,i)=>new BitbucketRemote(t,i)},{custom:!1,matcher:"github.com",creator:(e,t,i)=>new A.gu(e,t,i)},{custom:!1,matcher:"gitlab.com",creator:(e,t,i)=>new k.E(e,t,i)},{custom:!1,matcher:/\bdev\.azure\.com$/i,creator:(e,t,i)=>new AzureDevOpsRemote(t,i)},{custom:!0,matcher:/^(.+\/(?:bitbucket|stash))\/scm\/(.+)$/i,creator:(e,t,i)=>new BitbucketServerRemote(t,i)},{custom:!1,matcher:/\bgitlab\b/i,creator:(e,t,i)=>new k.E(e,t,i)},{custom:!1,matcher:/\bvisualstudio\.com$/i,creator:(e,t,i)=>new AzureDevOpsRemote(t,i,void 0,void 0,!0)},{custom:!1,matcher:/\bgitea\b/i,creator:(e,t,i)=>new GiteaRemote(t,i)},{custom:!1,matcher:/\bgerrithub\.io$/i,creator:(e,t,i)=>new GerritRemote(t,i)},{custom:!1,matcher:/\bgooglesource\.com$/i,creator:(e,t,i)=>new GoogleSourceRemote(t,i)}];function S(e){const t=[];if(e?.length)for(const i of e){const e=D(i);if(null==e)continue;let s;try{if(s=i.regex?new RegExp(i.regex,"i"):i.domain?.toLowerCase(),null==s)throw new Error("No matcher found")}catch(e){r.Yd.error(e,`Loading remote provider '${i.name??""}' failed`)}t.push({custom:!0,matcher:s,creator:e})}return t.push(...P),t}function D(e){switch(e.type){case"AzureDevOps":return(t,i,r)=>new AzureDevOpsRemote(i,r,e.protocol,e.name,!0);case"Bitbucket":return(t,i,r)=>new BitbucketRemote(i,r,e.protocol,e.name,!0);case"BitbucketServer":return(t,i,r)=>new BitbucketServerRemote(i,r,e.protocol,e.name,!0);case"Custom":return(t,i,r)=>new CustomRemote(i,r,e.urls,e.protocol,e.name);case"Gerrit":return(t,i,r)=>new GerritRemote(i,r,e.protocol,e.name,!0);case"GoogleSource":return(t,i,r)=>new GoogleSourceRemote(i,r,e.protocol,e.name,!0);case"Gitea":return(t,i,r)=>new GiteaRemote(i,r,e.protocol,e.name,!0);case"GitHub":return(t,i,r)=>new A.gu(t,i,r,e.protocol,e.name,!0);case"GitLab":return(t,i,r)=>new k.E(t,i,r,e.protocol,e.name,!0);default:return}}function R(e,t){return(i,s,o)=>function(e,t,i,s,o){try{const r=s.toLowerCase();for(const{custom:n,matcher:a,creator:c}of t){if("string"==typeof a){if(a===r)return c(e,s,o);continue}if(a.test(r))return c(e,s,o);if(!n)continue;const t=a.exec(i);if(null!=t)return c(e,t[1],t[2])}return}catch(e){return void r.Yd.error(e,"createRemoteProvider")}}(e,t,i,s,o)}},3084:(e,t,i)=>{i.d(t,{D:()=>RichRemoteProvider,e:()=>v});var r=i(9496),s=i(3309),o=i(7338),n=i(4575),a=i(7925),c=i(4968),l=i(5148),h=i(5432),u=i(4241),d=i(4336),p=i(6004),m=i(2795),g=Object.defineProperty,f=Object.getOwnPropertyDescriptor,w=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?f(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o),o};class RichRemoteProvider extends m.x{constructor(e,t,i,s,o,n){super(t,i,s,o,n),this.container=e,this._disposable=r.Disposable.from(l.D.onDidChange((e=>{l.D.changed(e,"remotes")&&this._ignoreSSLErrors.clear()})),e.richRemoteProviders.onDidChangeConnectionState((e=>{e.key===this.key&&("disconnected"===e.reason?this.disconnect({silent:!0}):"connected"===e.reason&&this.ensureSession(!1))})),r.authentication.onDidChangeSessions(this.onAuthenticationSessionsChanged,this)),e.context.subscriptions.push(this._disposable),this.shouldConnect&&this.isConnected()}type="rich";_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}_disposable;disposed=!1;dispose(){this._disposable.dispose(),this.disposed=!0}get authProviderDescriptor(){return{domain:this.domain,scopes:this.authProvider.scopes}}get key(){return this.custom?`${this.name}:${this.domain}`:this.name}get connectedKey(){return`connected:${this.key}`}get maybeConnected(){return void 0===this._session?void 0:null!==this._session}get shouldConnect(){return this.container.richRemoteProviders.isConnected(this.key)}_session;session(){return void 0===this._session?this.ensureSession(!1):this._session??void 0}onAuthenticationSessionsChanged(e){e.provider.id===this.authProvider.id&&this.ensureSession(!1)}async connect(){try{const e=await this.ensureSession(!0);return Boolean(e)}catch(e){return!1}}async disconnect(e){if(e?.currentSessionOnly&&null===this._session)return;const t=null!=this._session;if(t&&!e?.silent)if(e?.currentSessionOnly)(0,a.mm)(this.name);else{const e={title:"Disable"},t={title:"Disable & Sign Out"},i={title:"Cancel",isCloseAffordance:!0};let s;if(s=this.container.integrationAuthentication.hasProvider(this.authProvider.id)?await r.window.showWarningMessage(`Are you sure you want to disable the rich integration with ${this.name}?\n\nNote: signing out clears the saved authentication.`,{modal:!0},e,t,i):await r.window.showWarningMessage(`Are you sure you want to disable the rich integration with ${this.name}?`,{modal:!0},e,i),null==s||s===i)return;s===t&&this.container.integrationAuthentication.deleteSession(this.authProvider.id,this.authProviderDescriptor)}this.resetRequestExceptionCount(),this._session=null,t&&(e?.currentSessionOnly||this.container.storage.storeWorkspace(this.connectedKey,!1),this._onDidChange.fire(),e?.silent||e?.currentSessionOnly||this.container.richRemoteProviders.disconnected(this.key))}async reauthenticate(){void 0!==this._session&&(this._session=void 0,await this.ensureSession(!0,!0))}requestExceptionCount=0;resetRequestExceptionCount(){this.requestExceptionCount=0}handleProviderException(e,t,i){return e instanceof r.CancellationError||(d.Yd.error(e,t),(e instanceof n._7||e instanceof n.Bn)&&this.trackRequestException()),i}trackRequestException(){this.requestExceptionCount++,this.requestExceptionCount>=5&&null!==this._session&&this.disconnect({currentSessionOnly:!0})}async isConnected(){return null!=await this.session()}async getAccountForCommit(e,t){const i=(0,p.UH)();if(this.maybeConnected??await this.isConnected())try{const i=await this.getProviderAccountForCommit(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,void 0)}}async getAccountForEmail(e,t){const i=(0,p.UH)();if(this.maybeConnected??await this.isConnected())try{const i=await this.getProviderAccountForEmail(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,void 0)}}async getDefaultBranch(){const e=(0,p.UH)();if(!(this.maybeConnected??await this.isConnected()))return;return this.container.cache.getRepositoryDefaultBranch(this,(()=>({value:(async()=>{try{const e=await this.getProviderDefaultBranch(this._session);return this.resetRequestExceptionCount(),e}catch(t){return this.handleProviderException(t,e,void 0)}})()})))}_ignoreSSLErrors=new Map;getIgnoreSSLErrors(){if(o.$L)return!1;let e=this._ignoreSSLErrors.get(this.id);if(void 0===e){const t=l.D.get("remotes")?.find((e=>e.type.toLowerCase()===this.id&&e.domain===this.domain));e=t?.ignoreSSLErrors??!1,this._ignoreSSLErrors.set(this.id,e)}return e}async getRepositoryMetadata(e){const t=(0,p.UH)();if(!(this.maybeConnected??await this.isConnected()))return;return this.container.cache.getRepositoryMetadata(this,(()=>({value:(async()=>{try{const e=await this.getProviderRepositoryMetadata(this._session);return this.resetRequestExceptionCount(),e}catch(e){return this.handleProviderException(e,t,void 0)}})()})))}async getIssueOrPullRequest(e){const t=(0,p.UH)();if(!(this.maybeConnected??await this.isConnected()))return;return this.container.cache.getIssueOrPullRequest(e,this,(()=>({value:(async()=>{try{const t=await this.getProviderIssueOrPullRequest(this._session,e);return this.resetRequestExceptionCount(),t}catch(e){return this.handleProviderException(e,t,void 0)}})()})))}async getPullRequestForBranch(e,t){const i=(0,p.UH)();if(!(this.maybeConnected??await this.isConnected()))return;return this.container.cache.getPullRequestForBranch(e,this,(()=>({value:(async()=>{try{const i=await this.getProviderPullRequestForBranch(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,void 0)}})()})))}async getPullRequestForCommit(e){const t=(0,p.UH)();if(!(this.maybeConnected??await this.isConnected()))return;return this.container.cache.getPullRequestForSha(e,this,(()=>({value:(async()=>{try{const t=await this.getProviderPullRequestForCommit(this._session,e);return this.resetRequestExceptionCount(),t}catch(e){return this.handleProviderException(e,t,void 0)}})()})))}async searchMyIssues(){const e=(0,p.UH)();try{const e=await this.searchProviderMyIssues(this._session);return this.resetRequestExceptionCount(),e}catch(t){return this.handleProviderException(t,e,void 0)}}async searchMyPullRequests(){const e=(0,p.UH)();try{const e=await this.searchProviderMyPullRequests(this._session);return this.resetRequestExceptionCount(),e}catch(t){return this.handleProviderException(t,e,void 0)}}async ensureSession(e,t=!1){if(null!=this._session)return this._session;if(!l.D.get("integrations.enabled"))return;if(e)await this.container.storage.deleteWorkspace(this.connectedKey);else if(!1===this.container.storage.getWorkspace(this.connectedKey))return;let i;try{i=this.container.integrationAuthentication.hasProvider(this.authProvider.id)?await this.container.integrationAuthentication.getSession(this.authProvider.id,this.authProviderDescriptor,{createIfNeeded:e,forceNewSession:t}):await(0,s.a_)(this.getIgnoreSSLErrors(),(()=>r.authentication.getSession(this.authProvider.id,this.authProvider.scopes,{createIfNone:t?void 0:e,silent:!e&&!t||void 0,forceNewSession:!!t||void 0})))}catch(e){if(await this.container.storage.deleteWorkspace(this.connectedKey),e instanceof Error&&e.message.includes("User did not consent"))return;i=null}return void 0!==i||e||await this.container.storage.deleteWorkspace(this.connectedKey),this._session=i??null,this.resetRequestExceptionCount(),null!=i&&(await this.container.storage.storeWorkspace(this.connectedKey,!0),queueMicrotask((()=>{this._onDidChange.fire(),this.container.richRemoteProviders.connected(this.key)}))),i??void 0}}async function v(e,t){const i=`Connecting to a ${e} instance for rich integration features requires a trial or paid plan.`;for(;;){const e=await t.subscription.getSubscription();if(!1===e.account?.verified){const e={title:"Resend Verification"},s={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${i}\n\nYou must verify your email before you can continue.`,{modal:!0},e,s)===e&&await t.subscription.resendVerification())continue;return!1}const s=e.plan.effective.id;if((0,c.aG)(s))break;if(null==e.account&&!(0,c.gA)(e)){const e={title:"Preview Pro"},s={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${i}\n\nDo you want to preview ✨ features for 3 days?`,{modal:!0},e,s)!==e)return!1;t.subscription.startPreviewTrial();break}if(null==e.account){const e={title:"Start Free GitKraken Trial"},s={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${i}\n\nDo you want to continue to use ✨ features on privately hosted repos, free for an additional 7 days?`,{modal:!0},e,s)===e&&await t.subscription.loginOrSignUp())continue}else{const e={title:"Upgrade to Pro"},s={title:"Cancel",isCloseAffordance:!0};await r.window.showWarningMessage(`${i}\n\nDo you want to continue to use ✨ features on privately hosted repos?`,{modal:!0},e,s)===e&&t.subscription.purchase()}return!1}return!0}w([(0,u.cM)()],RichRemoteProvider.prototype,"connect",1),w([(0,h.H)(),(0,u.cM)()],RichRemoteProvider.prototype,"disconnect",1),w([(0,u.cM)()],RichRemoteProvider.prototype,"reauthenticate",1),w([(0,u.fF)()],RichRemoteProvider.prototype,"trackRequestException",1),w([(0,h.H)(),(0,u.fF)({exit:!0})],RichRemoteProvider.prototype,"isConnected",1),w([(0,h.H)(),(0,u.fF)()],RichRemoteProvider.prototype,"getAccountForCommit",1),w([(0,h.H)(),(0,u.fF)()],RichRemoteProvider.prototype,"getAccountForEmail",1),w([(0,u.fF)()],RichRemoteProvider.prototype,"getDefaultBranch",1),w([(0,u.fF)()],RichRemoteProvider.prototype,"getRepositoryMetadata",1),w([(0,u.fF)()],RichRemoteProvider.prototype,"getIssueOrPullRequest",1),w([(0,u.fF)()],RichRemoteProvider.prototype,"getPullRequestForBranch",1),w([(0,u.fF)()],RichRemoteProvider.prototype,"getPullRequestForCommit",1),w([(0,h.H)(),(0,u.fF)()],RichRemoteProvider.prototype,"searchMyIssues",1),w([(0,h.H)(),(0,u.fF)()],RichRemoteProvider.prototype,"searchMyPullRequests",1),w([(0,h.H)()],RichRemoteProvider.prototype,"ensureSession",1)},6934:(e,t,i)=>{i.d(t,{FL:()=>a,KQ:()=>n,WY:()=>s,pD:()=>u,pU:()=>c,uP:()=>o,vx:()=>p});var r=i(4321);const s=new Set(["","=:","message:","@:","author:","#:","commit:","?:","file:","~:","change:"]);function o(e){return{query:e.pattern,matchAll:e.matchAll,matchCase:e.matchCase,matchRegex:e.matchRegex}}function n(e){return{pattern:e.query,matchAll:e.matchAll,matchCase:e.matchCase,matchRegex:e.matchRegex}}function a(e){return`${"query"in e?e.query:e.pattern}|${e.matchAll?"A":""}${e.matchCase?"C":""}${e.matchRegex?"R":""}`}function c(e){return e.map((e=>`#:${"string"==typeof e?(0,r.zL)(e):e.name}`)).join(" ")}const l=new Map([["","message:"],["=:","message:"],["message:","message:"],["@:","author:"],["author:","author:"],["#:","commit:"],["commit:","commit:"],["?:","file:"],["file:","file:"],["~:","change:"],["change:","change:"]]),h=/(?:(?<op>=:|message:|@:|author:|#:|commit:|\?:|file:|~:|change:)\s?(?<value>".+?"|\S+}?))|(?<text>\S+)(?!(?:=|message|@|author|#|commit|\?|file|~|change):)/gi;function u(e){const t=new Map;let i,s,o,n;do{if(n=h.exec(e.query),null==n?.groups)break;if(i=l.get(n.groups.op),({value:s,text:o}=n.groups),o&&(i="@me"===o?"author:":(0,r.D3)(o)?"commit:":"message:",s=o),i&&s){const e=t.get(i);null==e?t.set(i,[s]):e.push(s)}}while(null!=n);return t}const d=/"/g;function p(e,t){const i=u(e),r=new Set,s=[];let o,n,a=i.get("commit:");if(null!=a){for(const e of a)r.add(e.replace(d,""));o=r}else for([n,a]of(r.add("--all"),r.add(e.matchRegex?"--extended-regexp":"--fixed-strings"),e.matchRegex&&!e.matchCase&&r.add("--regexp-ignore-case"),i.entries()))switch(n){case"message:":e.matchAll&&r.add("--all-match");for(let t of a)t&&(t=t.replace(d,e.matchRegex?"\\b":""),t&&r.add(`--grep=${t}`));break;case"author:":for(let i of a)if(i&&(i=i.replace(d,e.matchRegex?"\\b":""),i)){if("@me"===i){if(null==t?.name)continue;i=t.name}i.startsWith("@")?r.add(`--author=${i.slice(1)}`):r.add(`--author=${i}`)}break;case"change:":for(let t of a)t&&(t.startsWith('"')&&(t=t.replace(d,""),!t)||r.add(e.matchRegex?`-G${t}`:`-S${t}`));break;case"file:":for(let t of a)if(t)if(t.startsWith('"')){if(t=t.replace(d,""),!t)continue;s.push(t)}else s.push(`${e.matchCase?"":":(icase)"}${t}`)}return{args:[...r.values()],files:s,shas:o}}},1062:(e,t,i)=>{i.d(t,{jw:()=>m,nN:()=>f,yq:()=>g});var r=i(9496),s=i(1848),o=i(1744),n=i(5255),a=i(9338),c=i(7462),l=i(439),h=i(4321),u=i(2226),d=i(5148),p=i(7469);async function m(e,t,i,a,c){const u=i.sha;let p=null;const m=await async function(){if(null==t.file)return;let r;if(t.isUncommitted)(0,h.rD)(u)&&(r=u);else if(p=await t.getPreviousSha(),r=p,null==r)return`\`\`\`diff\n+ ${c.lineAt(a).text}\n\`\`\``;const s=a+1,o=t.lines.find((e=>e.line===s))??t.lines[0];let n=t.file.originalPath;null==n&&i.fsPath!==t.file.uri.fsPath&&(n=t.file.path),a=o.line-1;let m=await e.git.getDiffForLine(i,a,r,u);return null==m&&null==r&&u!==l.pw&&(m=await e.git.getDiffForLine(i,a,void 0,l.pw)),null!=m?function(e,t){if("hunk"===t||null==t&&"hunk"===d.D.get("hovers.changesDiff"))return w(e.hunk);return`\`\`\`diff${null==e.previous?"":`\n- ${e.previous.line.trim()}`}${null==e.current?"":`\n+ ${e.current.line.trim()}`}\n\`\`\``}(m):void 0}();if(null==m)return;let g,f,v;if(t.isUncommitted){const e=await t.getPreviousComparisonUrisForLine(a,u);if(null==e?.previous)return;g=`[$(compare-changes)](${s.V.getMarkdownCommandArgs({lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},repoPath:t.repoPath,line:a})} "Open Changes")`,f=null==e.previous.sha||e.previous.isUncommitted?`  &nbsp;_${(0,h.zL)(e.previous.sha,{strings:{working:"Working Tree"}})}_ &nbsp;${n.NE.ArrowLeftRightLong}&nbsp; `:`  &nbsp;[$(git-commit) ${(0,h.zL)(e.previous.sha||"")}](${o.o.getMarkdownCommandArgs(e.previous.sha||"")} "Show Commit") &nbsp;${n.NE.ArrowLeftRightLong}&nbsp; `,v=null==e.current.sha||e.current.isUncommitted?`_${(0,h.zL)(e.current.sha,{strings:{working:"Working Tree"}})}_`:`[$(git-commit) ${(0,h.zL)(e.current.sha||"")}](${o.o.getMarkdownCommandArgs(e.current.sha||"")} "Show Commit")`}else g=`[$(compare-changes)](${s.V.getMarkdownCommandArgs(t,a)} "Open Changes")`,null===p&&(p=await t.getPreviousSha()),p&&(f=`  &nbsp;[$(git-commit) ${(0,h.zL)(p)}](${o.o.getMarkdownCommandArgs(p)} "Show Commit") &nbsp;${n.NE.ArrowLeftRightLong}&nbsp;`),v=`[$(git-commit) ${t.shortSha}](${o.o.getMarkdownCommandArgs(t.sha)} "Show Commit")`;g=`${m}\n---\n\nChanges${f??" added in "}${v} &nbsp;&nbsp;|&nbsp;&nbsp; ${g}`;const y=new r.MarkdownString(g,!0);return y.supportHtml=!0,y.isTrusted=!0,y}async function g(e,t,i,a){const l=w(a);let h,u,d;if(null==e)u="_Working Tree_",d="_Unsaved_";else{const r=await e.findFile(t);if(null==r)return;h=`[$(compare-changes)](${s.V.getMarkdownCommandArgs({lhs:{sha:e.sha,uri:c.YY.fromFile(r,t.repoPath,void 0,!0).toFileUri()},rhs:{sha:"",uri:t.toFileUri()},repoPath:t.repoPath,line:i})} "Open Changes")`,u=`[$(git-commit) ${e.shortSha}](${o.o.getMarkdownCommandArgs(e.sha)} "Show Commit")`,d="_Working Tree_"}h=`${l}\n---\n\nLocal Changes  &nbsp;${u} &nbsp;${n.NE.ArrowLeftRightLong}&nbsp; ${d}${null==h?"":` &nbsp;&nbsp;|&nbsp;&nbsp; ${h}`}`;const p=new r.MarkdownString(h,!0);return p.supportHtml=!0,p.isTrusted=!0,p}async function f(e,t,i,s,o){const n=await(0,u.Zo)(o?.remotes??e.git.getBestRemotesWithProviders(t.repoPath),o?.cancellation,o?.timeout);let c,l;if(n.paused){if("cancelled"===n.reason)return}else c=n.value,[l]=c;const h=d.D.get("hovers"),m=null!=l?.provider&&(o?.autolinks||!1!==o?.autolinks&&h.autolinks.enabled&&h.autolinks.enhanced)&&a.i.has(h.detailsMarkdownFormat,"message"),g=l?.hasRichIntegration()&&!1!==l.provider.maybeConnected&&(o?.pullRequests||!1!==o?.pullRequests&&h.pullRequests.enabled)&&a.i.has(o.format,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState"),[f,w,v,y]=await Promise.allSettled([m?(0,u.IN)(o?.enrichedAutolinks??t.getEnrichedAutolinks(l),o?.cancellation,o?.timeout):void 0,g?(0,u.Zo)(o?.pullRequest??t.getAssociatedPullRequest(l),o?.cancellation,o?.timeout):void 0,e.vsls.maybeGetPresence(t.author.email),t.isUncommitted?t.getPreviousComparisonUrisForLine(s,i.sha):void 0,null==t.message?t.ensureFullDetails():void 0]);if(o?.cancellation?.isCancellationRequested)return;const b=(0,p.Sb)(f),C=(0,p.Sb)(w),A=(0,p.Sb)(v),k=(0,p.Sb)(y),P=await a.i.fromTemplateAsync(o.format,t,{enrichedAutolinks:null==b?.value||b.paused?void 0:b.value,dateFormat:null===o.dateFormat?"MMMM Do, YYYY h:mma":o.dateFormat,editor:{line:s,uri:i},getBranchAndTagTips:o?.getBranchAndTagTips,messageAutolinks:o?.autolinks||!1!==o?.autolinks&&h.autolinks.enabled,pullRequest:C?.value,presence:A,previousLineComparisonUris:k,outputFormat:"markdown",remotes:c}),S=new r.MarkdownString(P,!0);return S.supportHtml=!0,S.isTrusted=!0,S}function w(e){return`\`\`\`diff\n${e.contents.trim()}\n\`\`\``}},7925:(e,t,i)=>{i.d(t,{B8:()=>h,EB:()=>u,EZ:()=>m,G:()=>l,Lw:()=>f,Nl:()=>v,PS:()=>w,QP:()=>C,RR:()=>c,W8:()=>d,bi:()=>b,f3:()=>y,mm:()=>A,p1:()=>g,s$:()=>P,vF:()=>k,xs:()=>S,zk:()=>p});var r=i(9496),s=i(5255),o=i(9529),n=i(5148),a=i(4336);function c(e){return D("info",null==e?"There is no previous commit.":`Commit ${e.shortSha} (${e.author.name}, ${e.formattedDate}) has no previous commit.`,"suppressCommitHasNoPreviousCommitWarning")}function l(e){return D("warn",`${e}. The commit could not be found.`,"suppressCommitNotFoundWarning")}async function h(e){const t={title:"Create Pull Request..."};return await D("info",`Would you like to create a Pull Request for branch '${e}'?`,"suppressCreatePullRequestPrompt",{title:"Don't Show Again"},t)===t}async function u(){const e={title:"Disable Debug Logging"};return await D("warn","GitLens debug logging is currently enabled. Unless you are reporting an issue, it is recommended to be disabled. Would you like to disable it?","suppressDebugLoggingWarning",{title:"Don't Show Again"},e)===e}async function d(e){if(a.Yd.enabled("error")){null!=await D("error",`${e}. See output channel for more details.`,void 0,null,{title:"Open Output Channel"})&&a.Yd.showOutputChannel()}else{null!=await D("error",`${e}. If the error persists, please enable debug logging and try again.`,void 0,null,{title:"Enable Debug Logging"})&&(0,o.P0)(s.Gh.EnableDebugLogging)}}function p(e){return D("warn",`${e}. The file is probably not under source control.`,"suppressFileNotUnderSourceControlWarning")}function m(){return D("error","GitLens requires Git to be enabled. Please re-enable Git — set `git.enabled` to true and reload.","suppressGitDisabledWarning")}function g(){return D("error","GitLens is unable to use Git. Your Git configuration seems to be invalid. Please resolve any issues with your Git configuration and reload.")}function f(){return D("error","GitLens was unable to find Git. Please make sure Git is installed. Also ensure that Git is either in the PATH, or that 'git.path' is pointed to its installed location.","suppressGitMissingWarning")}function w(e,t){return D("error",`GitLens requires a newer version of Git (>= ${t}) than is currently installed (${e}). Please install a more recent version of Git.`,"suppressGitVersionWarning")}function v(e){return D("error",`This GitLens pre-release version (${e}) has expired. Please upgrade to a more recent version.`)}function y(e){return D("warn",`${e}. The line has uncommitted changes.`,"suppressLineUncommittedWarning")}function b(e){return D("warn",`${e}. No repository could be found.`,"suppressNoRepositoryWarning")}function C(){return D("warn","Closing either the git-rebase-todo file or the Rebase Editor will start the rebase.","suppressRebaseSwitchToTextWarning")}function A(e){return D("error",`Rich integration with ${e} has been disconnected for this session, because of too many failed requests.`,"suppressIntegrationDisconnectedTooManyFailedRequestsWarning",void 0,{title:"OK"})}function k(e){return D("error",e,"suppressIntegrationRequestFailed500Warning",void 0,{title:"OK"})}function P(e){return D("error",`${e} request timed out.`,"suppressIntegrationRequestTimedOutWarning",void 0,{title:"OK"})}async function S(e){const t={title:"Switch to New Layout"};await D("info",`Upgraded to GitLens ${e} — [see what's new](https://help.gitkraken.com/gitlens/gitlens-release-notes-current/ "See what's new in GitLens ${e}").\nWe've reimagined and rearranged our views for greater focus and productivity, and recommend switching to the new layout — [learn more and tell us what you think](https://github.com/gitkraken/vscode-gitlens/discussions/2721 "Learn more about what's changed")!`,void 0,null,t)===t&&(0,o.P0)(s.Gh.ResetViewsLayout)}async function D(e,t,i,s={title:"Don't Show Again"},...o){if(a.Yd.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(s)})`),null!=i&&n.D.get(`advanced.messages.${i}`))return void a.Yd.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(s)}) skipped`);let c;switch(null!=i&&null!==s&&o.push(s),e){case"info":c=await r.window.showInformationMessage(t,...o);break;case"warn":c=await r.window.showWarningMessage(t,...o);break;case"error":c=await r.window.showErrorMessage(t,...o)}return null==i||null!==s&&c!==s||(a.Yd.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(s)}) don't show again requested`),await function(e){const t={...n.D.get("advanced.messages")};t[e]=!0;for(const[e,i]of Object.entries(t))!0!==i&&delete t[e];return n.D.update("advanced.messages",t,r.ConfigurationTarget.Global)}(i),c!==s)?(a.Yd.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(s)}) returned ${null!=c?c.title:c}`),c):void 0}},2215:(e,t,i)=>{i.d(t,{C:()=>a,L:()=>n});var r=i(9496),s=i(5148),o=i(2061);function n(){return(0,o.fw)("gitlens:plus:enabled",s.D.get("plusFeatures.enabled",void 0,!0))}async function a(){if(n())return!0;const e={title:"Enable"};return await r.window.showInformationMessage("Pro features are currently disabled. Would you like to enable them?",{modal:!0},e,{title:"Cancel",isCloseAffordance:!0})===e&&(await s.D.updateEffective("plusFeatures.enabled",!0),!0)}},1907:(e,t,i)=>{i.d(t,{CH:()=>CloudWorkspace,CL:()=>c,Jv:()=>o,Pv:()=>n,U1:()=>a,Xu:()=>r,_N:()=>s,qP:()=>LocalWorkspace});class CloudWorkspace{constructor(e,t,i,r,s,o,n,a,c,l){this.container=e,this.id=t,this.name=i,this.organizationId=r,this.provider=s,this.repoRelation=o,this.current=n,this.azureInfo=a,this._repositoryDescriptors=c,this._localPath=l,this._disposable=this.container.git.onDidChangeRepositories(this.resetRepositoriesByName,this)}type="cloud";_repositoryDescriptors;_repositoriesByName;_localPath;_disposable;dispose(){this._disposable.dispose()}get shared(){return null!=this.organizationId}get localPath(){return this._localPath}resetRepositoriesByName(){this._repositoriesByName=void 0}async getRepositoriesByName(e){return(null==this._repositoriesByName||e?.force)&&(this._repositoriesByName=await this.container.workspaces.resolveWorkspaceRepositoriesByName(this.id,{resolveFromPath:!0,usePathMapping:!0})),this._repositoriesByName}async getRepositoryDescriptors(e){return(null==this._repositoryDescriptors||e?.force)&&(this._repositoryDescriptors=await this.container.workspaces.getCloudWorkspaceRepositories(this.id),this.resetRepositoriesByName()),this._repositoryDescriptors}async getRepositoryDescriptor(e){return(await this.getRepositoryDescriptors()).find((t=>t.name===e))}addRepositories(e){null==this._repositoryDescriptors?this._repositoryDescriptors=e:this._repositoryDescriptors=this._repositoryDescriptors.concat(e),this.resetRepositoriesByName()}removeRepositories(e){null!=this._repositoryDescriptors&&(this._repositoryDescriptors=this._repositoryDescriptors.filter((t=>!e.includes(t.name))),this.resetRepositoriesByName())}setLocalPath(e){this._localPath=e}}var r=(e=>(e.GitHub="GITHUB",e.GitHubEnterprise="GITHUB_ENTERPRISE",e.GitLab="GITLAB",e.GitLabSelfHosted="GITLAB_SELF_HOSTED",e.Bitbucket="BITBUCKET",e.Azure="AZURE",e))(r||{}),s=(e=>(e.GitHub="github",e.GitHubEnterprise="github_enterprise",e.GitLab="gitlab",e.GitLabSelfHosted="gitlab_self_hosted",e.Bitbucket="bitbucket",e.Azure="azure",e))(s||{});const o={azure:"azure-devops",bitbucket:"bitbucket",github:"github",github_enterprise:"github",gitlab:"gitlab",gitlab_self_hosted:"gitlab"};var n=(e=>(e.CurrentWindow="Current Window",e.ParentFolder="Parent Folder",e))(n||{});const a=100,c=100;class LocalWorkspace{constructor(e,t,i,r,s,o){this.container=e,this.id=t,this.name=i,this.repositoryDescriptors=r,this.current=s,this._localPath=o,this._disposable=this.container.git.onDidChangeRepositories(this.resetRepositoriesByName,this)}type="local";_localPath;_repositoriesByName;_disposable;dispose(){this._disposable.dispose()}get shared(){return!1}get localPath(){return this._localPath}resetRepositoriesByName(){this._repositoriesByName=void 0}async getRepositoriesByName(e){return(null==this._repositoriesByName||e?.force)&&(this._repositoriesByName=await this.container.workspaces.resolveWorkspaceRepositoriesByName(this.id,{resolveFromPath:!0,usePathMapping:!0})),this._repositoriesByName}getRepositoryDescriptors(){return Promise.resolve(this.repositoryDescriptors)}getRepositoryDescriptor(e){return Promise.resolve(this.repositoryDescriptors.find((t=>t.name===e)))}setLocalPath(e){this._localPath=e}}},1857:(e,t,i)=>{i.d(t,{D:()=>d,h:()=>p});var r=i(9496),s=i(3599),o=i(5148),n=i(3105),a=i(7469),c=i(2509),l=i(9729),h=i(3530),u=i(1742);async function d(e,t,i,d){const p=r.window.createQuickPick();function m(e){return null==e?[(0,h.fw)(h.Xe.Cancel)]:[...d?.showOtherReferences??[],...(0,n.UI)(e.commits.values(),(e=>(0,u.YY)(e,d?.picked===e.ref,{compact:!0,icon:!0}))),...e?.hasMore?[(0,h.fw)(h.Xe.LoadMore)]:[]]}p.ignoreFocusOut=(0,c.hE)(),p.title=t,p.placeholder=i,p.matchOnDescription=!0,p.matchOnDetail=!0,(0,a.tI)(e)&&(p.busy=!0,p.show(),null==(e=await e)&&(p.placeholder="Unable to show commit history")),p.items=m(e),d?.picked&&(p.activeItems=p.items.filter((e=>!l.$w.is(e)&&e.picked)));const g=[];let f;null!=d?.keys&&0!==d.keys.length&&null!==d?.onDidPressKey&&(f=s.W.instance.keyboard.createScope(Object.fromEntries(d.keys.map((e=>[e,{onDidPressKey:e=>{if(0!==p.activeItems.length){const[t]=p.activeItems;null==t||(0,h.Gy)(t)||l.$w.is(t)||d.onDidPressKey(e,t)}}}])))),f.start(),g.push(f));try{const t=await new Promise((t=>{g.push(p.onDidHide((()=>t(void 0))),p.onDidAccept((()=>{if(0!==p.activeItems.length){const[i]=p.activeItems;if((0,h.Gy)(i))return i.directive===h.Xe.LoadMore?void async function(){p.busy=!0;try{const t=m(e=await((await e)?.more?.(o.D.get("advanced.maxListItems"))));let i=-1;if(0!==p.activeItems.length){const e=p.activeItems[0];i=p.items.indexOf(e),(0,h.Gy)(e)&&i--}p.items=t,i&&(p.activeItems=[p.items[i]])}finally{p.busy=!1}}():void t(void 0);t(i)}})),p.onDidChangeValue((async e=>{null!=f&&(0!==e.length?await f.pause(["left","right"]):await f.resume())}))),p.busy=!1,p.show()}));if(null==t||(0,h.Gy)(t))return;return t instanceof l.$w?void await t.execute():t.item}finally{p.dispose(),g.forEach((e=>{e.dispose()}))}}async function p(e,t,i,o){const d=r.window.createQuickPick();d.ignoreFocusOut=(0,c.hE)(),d.title=t,d.placeholder=i,d.matchOnDescription=!0,d.matchOnDetail=!0,(0,a.tI)(e)&&(d.busy=!0,d.show(),e=await e),null!=e&&(d.items=[...o?.showOtherReferences??[],...(0,n.UI)(null!=o?.filter?(0,n.hX)(e.commits.values(),o.filter):e.commits.values(),(e=>(0,u.YY)(e,o?.picked===e.ref,{compact:!0,icon:!0})))]),(null==e||d.items.length<=(o?.showOtherReferences?.length??0))&&(d.placeholder=null==e?"No stashes found":o?.empty??"No matching stashes found",d.items=[(0,h.fw)(h.Xe.Cancel)]),o?.picked&&(d.activeItems=d.items.filter((e=>!l.$w.is(e)&&e.picked)));const p=[];let m;null!=o?.keys&&0!==o.keys.length&&null!==o?.onDidPressKey&&(m=s.W.instance.keyboard.createScope(Object.fromEntries(o.keys.map((e=>[e,{onDidPressKey:e=>{if(0!==d.activeItems.length){const[t]=d.activeItems;null==t||(0,h.Gy)(t)||l.$w.is(t)||o.onDidPressKey(e,t)}}}])))),m.start(),p.push(m));try{const e=await new Promise((e=>{p.push(d.onDidHide((()=>e(void 0))),d.onDidAccept((()=>{if(0!==d.activeItems.length){const[t]=d.activeItems;if((0,h.Gy)(t))return void e(void 0);e(t)}})),d.onDidChangeValue((async e=>{null!=m&&(0!==e.length?await m.pause(["left","right"]):await m.resume())}))),d.busy=!1,d.show()}));if(null==e||(0,h.Gy)(e))return;return e instanceof l.$w?void await e.execute():e.item}finally{d.dispose(),p.forEach((e=>{e.dispose()}))}}},3931:(e,t,i)=>{i.d(t,{A1:()=>CommitOpenRevisionsCommandQuickPickItem,CV:()=>CommitOpenAllChangesCommandQuickPickItem,EE:()=>CommitOpenDetailsCommandQuickPickItem,Jw:()=>CommitCompareWithHEADCommandQuickPickItem,K6:()=>OpenChangedFilesCommandQuickPickItem,Lf:()=>CommitBrowseRepositoryFromHereCommandQuickPickItem,NC:()=>CommitCopyMessageQuickPickItem,OT:()=>CommitCopyIdQuickPickItem,PF:()=>CommitFilesQuickPickItem,QP:()=>CommitRestoreFileChangesCommandQuickPickItem,Wt:()=>CommitOpenRevisionCommandQuickPickItem,Y4:()=>CommitOpenAllChangesWithWorkingCommandQuickPickItem,ZO:()=>CommitOpenFileCommandQuickPickItem,aU:()=>CommitOpenChangesWithWorkingCommandQuickPickItem,do:()=>CommitApplyFileChangesCommandQuickPickItem,eG:()=>CommitOpenDirectoryCompareCommandQuickPickItem,lN:()=>CommitOpenFilesCommandQuickPickItem,lp:()=>CommitOpenChangesCommandQuickPickItem,m5:()=>CommitCompareWithWorkingCommandQuickPickItem,nl:()=>CommitOpenDirectoryCompareWithWorkingCommandQuickPickItem,o$:()=>CommitOpenAllChangesWithDiffToolCommandQuickPickItem,rl:()=>OpenOnlyChangedFilesCommandQuickPickItem,sQ:()=>CommitOpenInGraphCommandQuickPickItem,xL:()=>CommitOpenChangesWithDiffToolCommandQuickPickItem,zr:()=>CommitFileQuickPickItem});var r=i(9496),s=i(3016),o=i(5255),n=i(3599),a=i(9311),c=i(6897),l=i(9338),h=i(7881),u=i(3700),d=i(4627),p=i(9729);class CommitFilesQuickPickItem extends p.$w{constructor(e,t){super({label:e.summary,description:`${l.i.fromTemplate("${author}, ${ago}  $(git-commit)  ${id}",e)}${t?.unpublished?"  (unpublished)":""}`,detail:`${null!=t?.file?`$(file) ${(0,u.EZ)(t.file.path)}${t.file.formatStats({expand:!0,separator:", ",prefix:` ${o.NE.Dot} `})}`:`$(files) ${e.formatStats({expand:!0,separator:", ",empty:"No files changed"})}`}${null!=t?.hint?`${(0,d.vk)(o.NE.Dash,4,2,o.NE.Space)}${t.hint}`:""}`,alwaysShow:!0,picked:t?.picked??!0,buttons:[s._9,s.Nv]},void 0,void 0,{suppressKeyPress:!0}),this.commit=e}get sha(){return this.commit.sha}}class CommitFileQuickPickItem extends p.$w{constructor(e,t,i){super({label:`${(0,d.vk)((0,h.Qw)(t.status),0,2)}${(0,u.EZ)(t.path)}`,description:(0,h.OC)(t,!0),picked:i}),this.commit=e,this.file=t}get sha(){return this.commit.sha}execute(e){return c.vw(this.file,this.commit,e)}}class CommitBrowseRepositoryFromHereCommandQuickPickItem extends p.$w{constructor(e,t,i){super(i??`$(folder-opened) Browse Repository from${t?.before?" Before":""} Here${t?.openInNewWindow?" in New Window":""}`),this.commit=e,this.executeOptions=t}execute(e){return(0,a.g)(this.commit.getGitUri(),{before:this.executeOptions?.before,openInNewWindow:this.executeOptions?.openInNewWindow})}}class CommitCompareWithHEADCommandQuickPickItem extends p.$w{constructor(e,t){super(t??"$(compare-changes) Compare with HEAD"),this.commit=e}execute(e){return n.W.instance.searchAndCompareView.compare(this.commit.repoPath,this.commit.ref,"HEAD")}}class CommitCompareWithWorkingCommandQuickPickItem extends p.$w{constructor(e,t){super(t??"$(compare-changes) Compare with Working Tree"),this.commit=e}execute(e){return n.W.instance.searchAndCompareView.compare(this.commit.repoPath,this.commit.ref,"")}}class CommitCopyIdQuickPickItem extends p.$w{constructor(e,t){super(t??"$(copy) Copy SHA"),this.commit=e}execute(){return c.$H(this.commit)}async onDidPressKey(e){await super.onDidPressKey(e),r.window.showInformationMessage("Commit SHA copied to the clipboard")}}class CommitCopyMessageQuickPickItem extends p.$w{constructor(e,t){super(t??"$(copy) Copy Message"),this.commit=e}execute(){return c.SJ(this.commit)}async onDidPressKey(e){await super.onDidPressKey(e),r.window.showInformationMessage((this.commit.stashName?"Stash":"Commit")+" Message copied to the clipboard")}}class CommitOpenAllChangesCommandQuickPickItem extends p.$w{constructor(e,t){super(t??"$(git-compare) Open All Changes"),this.commit=e}execute(e){return c.Gp(this.commit,e)}}class CommitOpenAllChangesWithDiffToolCommandQuickPickItem extends p.$w{constructor(e,t){super(t??"$(git-compare) Open All Changes (difftool)"),this.commit=e}execute(){return c.wr(this.commit)}}class CommitOpenAllChangesWithWorkingCommandQuickPickItem extends p.$w{constructor(e,t){super(t??"$(git-compare) Open All Changes with Working Tree"),this.commit=e}execute(e){return c.Ou(this.commit,e)}}class CommitOpenChangesCommandQuickPickItem extends p.$w{constructor(e,t,i){super(i??"$(git-compare) Open Changes"),this.commit=e,this.file=t}execute(e){return c.vw(this.file,this.commit,e)}}class CommitOpenChangesWithDiffToolCommandQuickPickItem extends p.$w{constructor(e,t,i){super(i??"$(git-compare) Open Changes (difftool)"),this.commit=e,this.file=t}execute(){return c.Xy(this.file,this.commit)}}class CommitOpenChangesWithWorkingCommandQuickPickItem extends p.$w{constructor(e,t,i){super(i??"$(git-compare) Open Changes with Working File"),this.commit=e,this.file=t}execute(e){return c.ce(this.file,this.commit,e)}}class CommitOpenDirectoryCompareCommandQuickPickItem extends p.$w{constructor(e,t){super(t??"$(git-compare) Open Directory Compare"),this.commit=e}execute(){return c.tc(this.commit)}}class CommitOpenDirectoryCompareWithWorkingCommandQuickPickItem extends p.$w{constructor(e,t){super(t??"$(git-compare) Open Directory Compare with Working Tree"),this.commit=e}execute(){return c.Os(this.commit)}}class CommitOpenDetailsCommandQuickPickItem extends p.$w{constructor(e,t){super(t??"$(eye) Open Details"),this.commit=e}execute(e){return c.Fw(this.commit,{preserveFocus:e?.preserveFocus})}}class CommitOpenInGraphCommandQuickPickItem extends p.$w{constructor(e,t){super(t??"$(gitlens-graph) Open in Commit Graph"),this.commit=e}execute(e){return c.GM(this.commit,{preserveFocus:e?.preserveFocus})}}class CommitOpenFilesCommandQuickPickItem extends p.$w{constructor(e,t){super(t??"$(files) Open Files"),this.commit=e}execute(e){return c.aE(this.commit)}}class CommitOpenFileCommandQuickPickItem extends p.$w{constructor(e,t,i){super(i??"$(file) Open File"),this.commit=e,this.file=t}execute(e){return c.ZB(this.file,this.commit,e)}}class CommitOpenRevisionsCommandQuickPickItem extends p.$w{constructor(e,t){super(t??"$(files) Open Files at Revision"),this.commit=e}execute(e){return c.Dh(this.commit)}}class CommitOpenRevisionCommandQuickPickItem extends p.$w{constructor(e,t,i){super(i??"$(file) Open File at Revision"),this.commit=e,this.file=t}execute(e){return c.YS(this.file,this.commit,e)}}class CommitApplyFileChangesCommandQuickPickItem extends p.$w{constructor(e,t,i){super(i??"Apply Changes"),this.commit=e,this.file=t}async execute(){return c.zb(this.file,this.commit)}}class CommitRestoreFileChangesCommandQuickPickItem extends p.$w{constructor(e,t,i){super(i??{label:"Restore",description:"aka checkout"}),this.commit=e,this.file=t}execute(){return c.Hl(this.file,this.commit)}}class OpenChangedFilesCommandQuickPickItem extends p.$w{constructor(e,t){const i={uris:e.map((e=>e.uri))};super(t??"$(files) Open All Changed Files",o.Gh.OpenChangedFiles,[i])}}class OpenOnlyChangedFilesCommandQuickPickItem extends p.$w{constructor(e,t){const i={uris:e.map((e=>e.uri))};super(t??"$(files) Open Changed & Close Unchanged Files",o.Gh.OpenOnlyChangedFiles,[i])}}},9729:(e,t,i)=>{i.d(t,{$w:()=>CommandQuickPickItem,fz:()=>s,qv:()=>ActionQuickPickItem});var r=i(9496);function s(e){return{kind:r.QuickPickItemKind.Separator,label:e??""}}class CommandQuickPickItem{constructor(e,t,i,r){this.command=t,this.args=i,this.options=r,this.command=t,this.args=i,"string"==typeof e?this.label=e:Object.assign(this,e)}static fromCommand(e,t,i){return new CommandQuickPickItem("string"==typeof e?{label:e}:e,t,null==i?[]:[i])}static is(e){return e instanceof CommandQuickPickItem}label;description;detail;execute(e){if(void 0===this.command)return Promise.resolve(void 0);return r.commands.executeCommand(this.command,...this.args??[])}async onDidPressKey(e){if(this.options?.suppressKeyPress)return;const t=this.execute({preserveFocus:!0,preview:!1});this.options?.onDidPressKey?.(e,t),await t}}class ActionQuickPickItem extends CommandQuickPickItem{constructor(e,t){super(e,void 0,void 0),this.action=t}async execute(e){return this.action(e)}}},3530:(e,t,i)=>{i.d(t,{Gy:()=>n,Xe:()=>r,fw:()=>o,wX:()=>s});var r=(e=>(e[e.Back=0]="Back",e[e.Cancel=1]="Cancel",e[e.LoadMore=2]="LoadMore",e[e.Noop=3]="Noop",e[e.RequiresVerification=4]="RequiresVerification",e[e.ExtendTrial=5]="ExtendTrial",e[e.RequiresPaidSubscription=6]="RequiresPaidSubscription",e[e.StartPreviewTrial=7]="StartPreviewTrial",e))(r||{});function s(e){return"number"==typeof e&&null!=r[e]}function o(e,t,i){let r=i?.label,s=i?.detail;if(null==r)switch(e){case 0:r="Back";break;case 1:r="Cancel";break;case 2:r="Load more";break;case 3:r="Try again";break;case 7:r="Preview Pro",s="Preview Pro for 3-days to use this on privately hosted repos";break;case 5:r="Start Free GitKraken Trial",s="Continue to use this on privately hosted repos, free for an additional 7 days";break;case 4:r="Resend Verification Email",s="You must verify your email before you can continue";break;case 6:r="Upgrade to Pro",s="A paid plan is required to use this on privately hosted repos"}return{label:r,description:i?.description,detail:s,alwaysShow:!0,picked:t,directive:e}}function n(e){return null!=e&&"directive"in e}},1742:(e,t,i)=>{i.d(t,{E0:()=>b,FO:()=>v,MH:()=>y,RE:()=>p,RI:()=>g,RP:()=>f,Wv:()=>GitCommandQuickPickItem,YY:()=>m,vl:()=>w});var r=i(2967),s=i(5255),o=i(3599),n=i(3148),a=i(6450),c=i(4321),l=i(3050),h=i(7512),u=i(4627),d=i(9729);class GitCommandQuickPickItem extends d.$w{constructor(e,t){super(e,s.Gh.GitCommands,[t],{suppressKeyPress:!0})}executeSteps(e){return(0,r.I)(o.W.instance,this.args[0],e)}}async function p(e,t,i){let r="";if(!0===i?.type?r=!0===i.current&&e.current?"current branch":"branch":"remote"===i?.type?e.remote&&(r="remote branch"):!0===i?.current&&e.current&&(r="current branch"),i?.status&&!e.remote&&null!=e.upstream){let t=s.NE.Dash;if(e.upstream.missing)t=s.NE.Warning;else{const i=await e.getRemote();if(null!=i){let e,r;for(const{type:t}of i.urls)if("fetch"===t){if(e=!0,r)break}else if("push"===t&&(r=!0,e))break;e&&r?t=s.NE.ArrowsRightLeft:r?t=s.NE.ArrowRight:e&&(t=s.NE.ArrowLeft)}}const i=`${e.getTrackingStatus({suffix:`${s.NE.Space} `})}${t}${s.NE.Space} ${e.upstream.name}`;r=`${r?`${r}${s.NE.Space.repeat(2)}${i}`:i}`}i?.ref&&(e.sha&&(r=r?`${r} $(git-commit)${s.NE.Space}${(0,c.zL)(e.sha)}`:`$(git-commit)${s.NE.Space}${(0,c.zL)(e.sha)}`),void 0!==e.date&&(r=r?`${r}${(0,u.vk)(s.NE.Dot,2,2)}${e.formattedDate}`:e.formattedDate));const o=i?.checked||null==i?.checked&&"checkmark"===i?.current&&e.current;return{label:`$(git-branch)${s.NE.Space}${e.starred?`$(star-full)${s.NE.Space}`:""}${e.name}${o?(0,u.vk)("$(check)",2):""}`,description:r,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t??e.current,item:e,current:e.current,ref:e.name,remote:e.remote}}function m(e,t,i){if((0,a.G2)(e)){const r=null==e.number?"":`${e.number}: `;if(i?.compact){return{label:`${i.icon?`$(archive)${s.NE.Space}`:""}${r}${e.summary}`,description:`${e.formattedDate}${(0,u.vk)(s.NE.Dot,2,2)}${e.formatStats({compact:!0})}`,alwaysShow:i.alwaysShow,buttons:i.buttons,picked:t,item:e}}return{label:`${i?.icon?`$(archive)${s.NE.Space}`:""}${r}${e.summary}`,description:"",detail:`${s.NE.Space.repeat(2)}${e.formattedDate}${(0,u.vk)(s.NE.Dot,2,2)}${e.formatStats({compact:!0})}`,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e}}if(i?.compact){return{label:`${i.icon?`$(git-commit)${s.NE.Space}`:""}${e.summary}`,description:`${e.author.name}, ${e.formattedDate}${(0,u.vk)("$(git-commit)",2,1)}${e.shortSha}${(0,u.vk)(s.NE.Dot,2,2)}${e.formatStats({compact:!0})}`,alwaysShow:i.alwaysShow,buttons:i.buttons,picked:t,item:e}}return{label:`${i?.icon?`$(git-commit)${s.NE.Space}`:""}${e.summary}`,description:"",detail:`${s.NE.Space.repeat(2)}${e.author.name}, ${e.formattedDate}${(0,u.vk)("$(git-commit)",2,1)}${e.shortSha}${(0,u.vk)(s.NE.Dot,2,2)}${e.formatStats({compact:!0})}`,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e}}function g(e,t,i){return{label:e.label,description:e.email,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e}}function f(e,t,i,r){if(""===e)return{label:(r?.icon?`$(file-directory)${s.NE.Space}`:"")+"Working Tree",description:"",alwaysShow:r?.alwaysShow,buttons:r?.buttons,picked:i,item:(0,c.xB)(e,t,{refType:"revision",name:"Working Tree"}),current:!1,ref:e,remote:!1};if("HEAD"===e)return{label:(r?.icon?`$(git-branch)${s.NE.Space}`:"")+"HEAD",description:"",alwaysShow:r?.alwaysShow,buttons:r?.buttons,picked:i,item:(0,c.xB)(e,t,{refType:"revision",name:"HEAD"}),current:!1,ref:e,remote:!1};let o;if("string"==typeof e?o=(0,c.xB)(e,t):(o=e,e=o.ref),(0,c.yk)(e))return{label:`Range ${o.name}`,description:"",alwaysShow:r?.alwaysShow,buttons:r?.buttons,picked:i,item:o,current:!1,ref:e,remote:!1};return{label:`Commit ${o.name}`,description:r?.ref?`$(git-commit)${s.NE.Space}${e}`:"",alwaysShow:r?.alwaysShow,buttons:r?.buttons,picked:i,item:o,current:!1,ref:e,remote:!1}}function w(e,t,i){let r="";if(i?.type&&(r="remote"),i?.upstream){const t=(0,l.jv)(e);r=r?`${r}${(0,u.vk)(s.NE.Dot,2,2)}${t}`:t}return{label:`$(cloud)${s.NE.Space}${e.name}${i?.checked?(0,u.vk)("$(check)",2):""}`,description:r,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e}}async function v(e,t,i){let r;(i?.branch||i?.status)&&(r=await e.getStatus());let o="";if(i?.branch&&null!=r&&(o=r.branch),i?.status&&null!=r){let e="";0!==r.files.length&&(e=r.getFormattedDiffStatus({compact:!0,prefix:(0,u.vk)(s.NE.Dot,2,2)}));const t=`${r.getUpstreamStatus({prefix:o?`${s.NE.Space} `:""})}${e}`;t&&(o=`${o?`${o}${t}`:t}`)}if(i?.fetched){const t=await e.getLastFetched();if(0!==t){const e=`Last fetched ${(0,h.Zh)(new Date(t))}`;o=`${o?`${o}${(0,u.vk)(s.NE.Dot,2,2)}${e}`:e}`}}return{label:e.formattedName,description:o,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,repoPath:e.path}}function y(e,t,i){let r="";if(i?.type&&(r="tag"),i?.ref&&(r=`${r}${(0,u.vk)("$(git-commit)",r?2:0,1)}${(0,c.zL)(e.sha)}`,r=`${r?`${r}${(0,u.vk)(s.NE.Dot,2,2)}`:""}${e.formattedDate}`),i?.message){const t=(0,n.X)(e.message);r=r?`${r}${(0,u.vk)(s.NE.Dot,2,2)}${t}`:t}return{label:`$(tag)${s.NE.Space}${e.name}${i?.checked?(0,u.vk)("$(check)",2):""}`,description:r,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,current:!1,ref:e.name,remote:!1}}function b(e,t,i,r){let o,n,a="";switch(r?.type&&(a="worktree"),null!=r?.status&&(a+=r.status.hasChanges?(0,u.vk)(`Uncommited changes (${r.status.getFormattedDiffStatus()})`,a?2:0,0):(0,u.vk)("No changes",a?2:0,0)),e.type){case"bare":n="(bare)",o="$(folder)";break;case"branch":n=e.branch,o="$(git-branch)";break;case"detached":n=(0,c.zL)(e.sha),o="$(git-commit)"}return{label:`${o}${s.NE.Space}${n}${r?.checked?(0,u.vk)("$(check)",2):""}`,description:a,detail:r?.path?i?`${s.NE.Warning} Unable to locate $(folder) ${e.friendlyPath}`:`In $(folder) ${e.friendlyPath}`:void 0,alwaysShow:r?.alwaysShow,buttons:r?.buttons,picked:t,item:e,opened:e.opened,hasChanges:r?.status?.hasChanges}}},3636:(e,t,i)=>{i.d(t,{H:()=>m,V:()=>g});var r=i(9496),s=i(3016),o=i(847),n=i(5255),a=i(3599),c=i(3401),l=i(6897),h=i(6713),u=i(4321),d=i(2509),p=i(1742),m=(e=>(e[e.Branches=1]="Branches",e[e.Tags=2]="Tags",e[e.WorkingTree=4]="WorkingTree",e[e.HEAD=8]="HEAD",e[e.BranchesAndTags=3]="BranchesAndTags",e))(m||{});async function g(e,t,i,m={}){const g=r.window.createQuickPick();g.ignoreFocusOut=(0,d.hE)(),g.title=t,g.placeholder=null!=m.allowEnteringRefs?`${i}${n.NE.Space.repeat(3)}(or enter a reference using #)`:i,g.matchOnDescription=!0;const f=[];let w;null!=m?.keys&&0!==m.keys.length&&null!==m?.onDidPressKey&&(w=a.W.instance.keyboard.createScope(Object.fromEntries(m.keys.map((e=>[e,{onDidPressKey:e=>{0!==g.activeItems.length&&m.onDidPressKey(e,g)}}])))),w.start(),f.push(w));const v=new r.CancellationTokenSource;let y,b=async function(e,{picked:t,filter:i,include:r,sort:n}){r=r??3;const c=await(0,o.B$)(a.W.instance.git.getRepository(e),r?["branches","tags"]:r?["branches"]:r?["tags"]:[],{buttons:[s.Nv],filter:i,picked:t,sort:n??{branches:{current:!1},tags:{}}});if(t){const e=c.findIndex((e=>e.ref===t));-1!==e&&c.unshift(...c.splice(e,1))}8&r&&c.unshift((0,p.RP)("HEAD",e,void 0,{icon:!0}));4&r&&c.unshift((0,p.RP)("",e,void 0,{icon:!0}));return c}(e,m);m.autoPick&&(b=b.then((e=>(e.length<=1&&(y=e[0],v.cancel()),e)))),g.busy=!0,g.show();const C=(0,o.v$)(a.W.instance.git.getRepository(e),{buttons:[s.Nv],ranges:m?.allowEnteringRefs&&"boolean"!=typeof m.allowEnteringRefs?m.allowEnteringRefs.ranges:void 0});g.items=await b,g.busy=!1;try{let e=await new Promise((e=>{f.push(v.token.onCancellationRequested((()=>g.hide())),g.onDidHide((()=>e(void 0))),g.onDidAccept((()=>{0!==g.activeItems.length&&e(g.activeItems[0])})),g.onDidChangeValue((async e=>{m.allowEnteringRefs&&(await C(g,e)||(g.items=await b)),null!=w&&(0!==e.length?await w.pause(["left","right"]):await w.resume())})),g.onDidTriggerItemButton((({button:e,item:{item:t}})=>{e===s.Nv&&((0,u.UR)(t)?(0,c.ay)(t,{select:!0,expand:!0}):(0,u.gA)(t)?(0,h.ay)(t,{select:!0,expand:!0}):(0,u.FT)(t)&&(0,l.Fw)(t,{pin:!1,preserveFocus:!0}))})))}));if(null==e&&null!=y&&(e=y),null==e)return;return e.item}finally{g.dispose(),f.forEach((e=>{e.dispose()}))}}},5009:(e,t,i)=>{i.d(t,{az:()=>OpenRemoteResourceCommandQuickPickItem,cY:()=>p,eO:()=>CopyRemoteResourceCommandQuickPickItem});var r=i(9496),s=i(3016),o=i(5255),n=i(3599),a=i(5367),c=i(3050),l=i(6503),h=i(7469),u=i(2509),d=i(9729);class ConfigureCustomRemoteProviderCommandQuickPickItem extends d.$w{constructor(){super({label:"See how to configure a custom remote provider..."})}async execute(){await r.env.openExternal(r.Uri.parse("https://help.gitkraken.com/gitlens/gitlens-settings/#remote-provider-integration-settings"))}}class CopyOrOpenRemoteCommandQuickPickItem extends d.$w{constructor(e,t,i,r){super({label:`$(repo) ${e.provider.path}`,description:e.name,buttons:r}),this.remote=e,this.resource=t,this.clipboard=i}async execute(){let e=this.resource;if(e.type===l.J.Comparison)(0,a.Lo)(e.base)===this.remote.name&&(e={...e,base:(0,a.S3)(e.base)}),(0,a.Lo)(e.compare)===this.remote.name&&(e={...e,compare:(0,a.S3)(e.compare)});else if(e.type===l.J.CreatePullRequest){let t=e.base.branch;if(null==t&&(t=await n.W.instance.git.getDefaultBranchName(this.remote.repoPath,this.remote.name),null==t&&this.remote.hasRichIntegration())){const e=await(this.remote.provider.getDefaultBranch?.());t=e?.name}e={...e,base:{branch:t,remote:{path:this.remote.path,url:this.remote.url}}}}else if(e.type===l.J.File&&null!=e.branchOrTag&&("bitbucket"===this.remote.provider.id||"bitbucket-server"===this.remote.provider.id)){const{branchOrTag:t}=e,[i,r]=await Promise.allSettled([n.W.instance.git.getBranches(this.remote.repoPath,{filter:e=>e.name===t||e.getNameWithoutRemote()===t}),n.W.instance.git.getTags(this.remote.repoPath,{filter:e=>e.name===t})]),s=(0,h.Sb)(i)?.values[0]?.sha??(0,h.Sb)(r)?.values[0]?.sha;s&&(e={...e,type:l.J.Revision,sha:s})}await(this.clipboard?this.remote.provider.copy(e):this.remote.provider.open(e))}setAsDefault(){return this.remote.setAsDefault(!0)}}class CopyRemoteResourceCommandQuickPickItem extends d.$w{constructor(e,t){const i=c.ss.getHighlanderProviders(e),r={resource:t,remotes:e,clipboard:!0};super(`$(copy) Copy Link to ${(0,l.C)(t)} for ${i?.length?i[0].name:"Remote"}${1===i?.length?"":o.NE.Ellipsis}`,o.Gh.OpenOnRemote,[r])}async onDidPressKey(e){await super.onDidPressKey(e),r.window.showInformationMessage("URL copied to the clipboard")}}class OpenRemoteResourceCommandQuickPickItem extends d.$w{constructor(e,t){const i=c.ss.getHighlanderProviders(e),r={resource:t,remotes:e,clipboard:!1};super(`$(link-external) Open ${(0,l.C)(t)} on ${1===i?.length?i[0].name:`${i?.length?i[0].name:"Remote"}${o.NE.Ellipsis}`}`,o.Gh.OpenOnRemote,[r])}}async function p(e,t,i,o,n){const{autoPick:a,clipboard:c,setDefault:l}={autoPick:!1,clipboard:!1,setDefault:!0,...n};let h;if(0===o.length)h=[new ConfigureCustomRemoteProviderCommandQuickPickItem],t="No auto-detected or configured remote providers found";else{if("default"===a&&o.length>1){const e=o.find((e=>e.default));null!=e&&(o=[e])}h=o.map((e=>new CopyOrOpenRemoteCommandQuickPickItem(e,i,c,l?[s.ip]:void 0)))}if(a&&1===o.length)return h[0];const d=r.window.createQuickPick();d.ignoreFocusOut=(0,u.hE)();const p=[];try{const i=await new Promise((i=>{p.push(d.onDidHide((()=>i(void 0))),d.onDidAccept((()=>{0!==d.activeItems.length&&i(d.activeItems[0])})),d.onDidTriggerItemButton((async e=>{e.button===s.ip&&e.item instanceof CopyOrOpenRemoteCommandQuickPickItem&&(await e.item.setAsDefault(),i(e.item))}))),d.title=e,d.placeholder=t,d.matchOnDetail=!0,d.items=h,d.show()}));if(null==i)return;return i}finally{d.dispose(),p.forEach((e=>{e.dispose()}))}}},635:(e,t,i)=>{i.d(t,{E2:()=>d,hM:()=>h,rf:()=>p,vJ:()=>u});var r=i(9496),s=i(3599),o=i(2800),n=i(3105),a=i(2509),c=i(9729),l=i(1742);async function h(e,t,i,r,o){let n=s.W.instance.git.getBestRepository(e,t);if(null!=n&&null!=o?.filter&&(await o.filter(n)||(n=void 0)),null!=n)return n;const a=await d(i,r,o);if(!(a instanceof c.$w))return a?.item;await a.execute()}async function u(e,t,i,r){let o;if(o=null==i?s.W.instance.git.highlander:await s.W.instance.git.getOrOpenRepository(i),null!=o&&null!=r?.filter&&(await r.filter(o)||(o=void 0)),null!=o)return o;const n=await d(e,t,r);if(!(n instanceof c.$w))return n?.item;await n.execute()}async function d(e,t="Choose a repository",i){let c;if(null==i||Array.isArray(i)||null!=i.filter||(i=void 0),null==i||Array.isArray(i))c=await Promise.all([...(0,n.UI)(i??s.W.instance.git.openRepositories,(e=>(0,l.FO)(e,void 0,{branch:!0,status:!0})))]);else{const{filter:e}=i;c=await(0,o.sj)(s.W.instance.git.openRepositories,(async t=>await e(t)?(0,l.FO)(t,void 0,{branch:!0,status:!0}):void 0))}if(0===c.length)return;const h=r.window.createQuickPick();h.ignoreFocusOut=(0,a.hE)();const u=[];try{const i=await new Promise((i=>{u.push(h.onDidHide((()=>i(void 0))),h.onDidAccept((()=>{0!==h.activeItems.length&&i(h.activeItems[0])}))),h.title=e,h.placeholder=t,h.matchOnDescription=!0,h.matchOnDetail=!0,h.items=c,h.show()}));if(null==i)return;return i}finally{h.dispose(),u.forEach((e=>{e.dispose()}))}}async function p(e,t="Choose a repository",i){let c;if(null==i||Array.isArray(i)||null!=i.filter||(i=void 0),null==i||Array.isArray(i))c=await Promise.all([...(0,n.UI)(i??s.W.instance.git.openRepositories,(e=>(0,l.FO)(e,void 0,{branch:!0,status:!0})))]);else{const{filter:e}=i;c=await(0,o.sj)(s.W.instance.git.openRepositories,(async t=>await e(t)?(0,l.FO)(t,void 0,{branch:!0,status:!0}):void 0))}if(0===c.length)return[];const h=r.window.createQuickPick();h.ignoreFocusOut=(0,a.hE)();const u=[];try{const i=await new Promise((i=>{u.push(h.onDidHide((()=>i(void 0))),h.onDidAccept((()=>i(h.selectedItems)))),h.title=e,h.placeholder=t,h.matchOnDescription=!0,h.matchOnDetail=!0,h.items=c,h.canSelectMany=!0,h.selectedItems=c,h.show()}));return i??[]}finally{h.dispose(),u.forEach((e=>{e.dispose()}))}}},2133:(e,t,i)=>{i.d(t,{YW:()=>c,x8:()=>Repositories});var r=i(7338),s=i(5255),o=i(3700),n=i(1526);const a=47;function c(e){const{path:t}=l(e);return t}function l(e){let t;switch(e.scheme.toLowerCase()){case s.sN.File:return t=(0,o.AH)(e.fsPath),{path:t,ignoreCase:!r.IJ};case s.sN.Git:case s.sN.GitLens:return t=e.path,t=t.charCodeAt(t.length-1)===a?t.slice(1,-1):t.slice(1),{path:t,ignoreCase:!r.IJ};case s.sN.Virtual:case s.sN.GitHub:{t=e.path,t=t.charCodeAt(t.length-1)===a?t.slice(1,-1):t.slice(1);const i=e.authority?.split("+",1)[0];return{path:i?`${i}/${t}`:t,ignoreCase:!1}}case s.sN.Vsls:case s.sN.VslsScc:return t=(0,o.IC)(e.path),t=t.charCodeAt(t.length-1)===a?t.slice(1,-1):t.slice(1),{path:t,ignoreCase:!1};case s.sN.PRs:{t=e.path,t=t.charCodeAt(t.length-1)===a?t.slice(1,-1):t.slice(1);const i=e.authority?.split("+",1)[0];return i===s.sN.GitHub?{path:i?`${i}/${t}`:t,ignoreCase:!1}:{path:t,ignoreCase:!r.IJ}}default:return t=e.path,t=t.charCodeAt(t.length-1)===a?t.slice(1,-1):t.slice(1),{path:t,ignoreCase:!1}}}class Repositories{_trie;_count=0;constructor(){this._trie=new n.QF(l)}get count(){return this._count}add(e){const t=this._trie.set(e.uri,e);return t&&this._count++,t}clear(){this._count=0,this._trie.clear()}forEach(e,t){for(const i of this._trie.getDescendants())e.call(t,i)}get(e){return this._trie.get(e)}getClosest(e){return this._trie.getClosest(e)}has(e){return this._trie.has(e)}remove(e,t=!0){const i=this._trie.delete(e,t);return i&&this._count--,i}values(){return this._trie.getDescendants()}}},4968:(e,t,i)=>{i.d(t,{Cx:()=>s,EE:()=>d,PY:()=>u,RE:()=>n,Z1:()=>g,_n:()=>w,aG:()=>m,dz:()=>f,fV:()=>a,gA:()=>v,jc:()=>o,kU:()=>h,tL:()=>c,ww:()=>p});var r=i(7512),s=(e=>(e.Free="free",e.FreePlus="free+",e.Pro="pro",e.Teams="teams",e.Enterprise="enterprise",e))(s||{}),o=(e=>(e[e.VerificationRequired=-1]="VerificationRequired",e[e.Free=0]="Free",e[e.FreeInPreviewTrial=1]="FreeInPreviewTrial",e[e.FreePreviewTrialExpired=2]="FreePreviewTrialExpired",e[e.FreePlusInTrial=3]="FreePlusInTrial",e[e.FreePlusTrialExpired=4]="FreePlusTrialExpired",e[e.Paid=5]="Paid",e))(o||{});function n(e){const{account:t,plan:{actual:i,effective:r},previewTrial:s}=e;if(!1===t?.verified)return-1;if(i.id===r.id)switch(r.id){case"free":return null==s?0:2;case"free+":return 4;case"pro":case"teams":case"enterprise":return 5}switch(r.id){case"free":return null==s?0:1;case"free+":return 4;case"pro":return"free"===i.id?1:3;case"teams":case"enterprise":return 5}}function a(e,t,i,r,s,o,n=!1){return{id:e,name:c(e),bundle:t,cancelled:n,organizationId:r,trialReactivationCount:i,startedOn:(s??new Date).toISOString(),expiresOn:null!=o?o.toISOString():void 0}}function c(e){switch(e){case"free+":return"GitKraken Free";case"pro":return"GitKraken Pro";case"teams":return"GitKraken Teams";case"enterprise":return"GitKraken Enterprise";default:return"GitKraken"}}const l=new Map([[void 0,-1],["free",0],["free+",1],["pro",2],["teams",3],["enterprise",4]]);function h(e){return l.get(e)??-1}function u(e,t){return d(e.plan.effective.expiresOn,t)}function d(e,t){return null!=e?(0,r.hM)(Date.now(),new Date(e),t):void 0}function p(e){return m(e.plan.effective.id)}function m(e){return"free"!==e&&"free+"!==e}function g(e){const t=u(e);return null!=t&&t<=0}function f(e){return e.plan.actual.id!==e.plan.effective.id}function w(e){if(null==e.account||!f(e)||!1===v(e))return!1;const t=u(e);return null==t||t<=0}function v(e){const t=d(e.previewTrial?.expiresOn);return null!=t?t<=0:void 0}},2800:(e,t,i)=>{i.d(t,{DZ:()=>n,GI:()=>p,IP:()=>s,Mo:()=>m,Qy:()=>u,XI:()=>h,h8:()=>f,jV:()=>d,lx:()=>w,qr:()=>c,sj:()=>a,uw:()=>v,vM:()=>l,zx:()=>o});var r=i(3105);function s(e){let t=0;for(const i of e)t+=i.length;return t}function o(e){return null==e?void 0:Array.isArray(e)?e:[e]}function n(e,t){let i=0;return e.reduce(((e,r)=>{const s=t(r,i++);return null!=s&&e.push(s),e}),[])}async function a(e,t){const i=[];for(const r of e){const e=await t(r);null!=e&&i.push(e)}return i}function c(e,t){let i=e.length;for(;i--;)if(t(e[i],i,e))return i;return-1}function l(e,t){return e.reduce(((e,i)=>{const r=t(i),s=e[r];return void 0===s?e[r]=[i]:s.push(i),e}),Object.create(null))}function h(e,t){return e.reduce(((e,i)=>{const r=t(i),s=e.get(r);return void 0===s?e.set(r,[i]):s.push(i),e}),new Map)}function u(e,t,i){return e.reduce(((e,r)=>{const s=i(r);if(null!=s){const i=t(r),o=e.get(i);void 0===o?e.set(i,[s]):o.push(s)}return e}),new Map)}function d(e,t){const i=[],r=e.length;e:for(const s of e[0]){let o=r-1;for(;o--;)if(!e[o+1].some((e=>t(e,s))))break e;i.some((e=>t(e,s)))||i.push(s)}return i}function p(e){return"string"==typeof e[0]}function m(e,t,i,r=!1,s){const o={name:"",relativePath:"",children:new Map,descendants:[]};let n=e.reduce(((e,r)=>{let s=e,o="";for(const e of t(r)){o=i(o,e),void 0===s.children&&(s.children=new Map);let t=s.children.get(e);void 0===t&&(t={name:e,relativePath:o,parent:s,children:void 0,descendants:void 0},s.children.set(e,t)),void 0===s.descendants&&(s.descendants=[]),s.descendants.push(r),s=t}return s.value=r,e}),o);return r&&(n=g(n,i,!0,s)),n}function g(e,t,i=!0,r){if(void 0===e.children)return e;const s=[...e.children.values()];for(const e of s)g(e,t,!1,r);if(!i&&1===s.length){const i=s[0];(void 0===i.value||r?.(i.value))&&(e.name=t(e.name,i.name),e.relativePath=i.relativePath,e.children=i.children,e.descendants=i.descendants,e.value=i.value)}return e}function f(e,t){return(0,r.v_)(new Set(e),t)}function w(e,t){return t<0?[e,[]]:[e.slice(0,t),e.slice(t)]}function v(e,t,i){return[...e.reduce(((e,r)=>{const s=t(r),o=e.get(s);if(void 0===o)e.set(s,r);else{const t=i(o,r);void 0!==t&&e.set(s,t)}return e}),new Map).values()]}},2226:(e,t,i)=>{i.d(t,{Ac:()=>TimedCancellationSource,IN:()=>l,T0:()=>a,Zo:()=>n,io:()=>c});var r=i(9496),s=i(3105),o=i(7469);class TimedCancellationSource{cancellation=new r.CancellationTokenSource;timer;constructor(e){this.timer=setTimeout((()=>this.cancellation.cancel()),e)}dispose(){clearTimeout(this.timer),this.cancellation.dispose()}cancel(){clearTimeout(this.timer),this.cancellation.cancel()}get token(){return this.cancellation.token}}function n(e,t,i,r){if(!(0,o.tI)(e))return Promise.resolve({value:e,paused:!1});if(null==t&&null==i)return e.then((e=>({value:e,paused:!1})));let s,n;const a=Promise.race([e.then((e=>(s?.dispose(),n?.dispose(),t?.isCancellationRequested?{value:Promise.resolve(e),paused:!0,reason:"cancelled"}:{value:e,paused:!1}))),new Promise((r=>{const o=t=>{s?.dispose(),n?.dispose(),r({value:e,paused:!0,reason:t})};if(s=t?.onCancellationRequested((()=>o("cancelled"))),null!=i)if("number"==typeof i){const e=setTimeout((()=>o("timedout")),i);n={dispose:()=>clearTimeout(e)}}else n=i.onCancellationRequested((()=>o("timedout")))}))]);return null==r?a:a.then((e=>(e.paused&&setTimeout((()=>r(e)),0),e)))}async function a(e,t,i,r,o){if(0===e.size)return e;let a;null!=r&&"number"==typeof r&&(a=new TimedCancellationSource(r),r=a.token);const c=await Promise.all((0,s.UI)(e,(([e,s])=>n(s.catch((e=>!t&&e instanceof Error?e:void 0)),i,r).then((t=>[e,t])))));if(a?.dispose(),null!=o&&c.some((([,e])=>e.paused))){async function l(){const e=new Map;for(const[t,i]of c)e.set(t,{value:i.paused?await i.value:i.value,paused:!1});return e}const h=c.some((([,e])=>e.paused&&"cancelled"===e.reason));o({value:l(),paused:!0,reason:h?"cancelled":"timedout"})}return new Map(c)}async function c(e,t,i,r){if(0===e.size)return e;let o;null!=i&&"number"==typeof i&&(o=new TimedCancellationSource(i),i=o.token);const a=await Promise.all((0,s.UI)(e,(([e,[r,...s]])=>null==r?[e,[void 0,...s]]:n(r.catch((()=>{})),t,i).then((t=>[e,[t,...s]])))));if(o?.dispose(),null!=r&&a.some((([,[e]])=>e?.paused??!1))){async function c(){const e=new Map;for(const[t,[i,...r]]of a)e.set(t,[{value:i?.paused?await i.value:i?.value,paused:!1},...r]);return e}const l=a.some((([,[e]])=>e?.paused&&"cancelled"===e.reason));r({value:c(),paused:!0,reason:l?"cancelled":"timedout"})}return new Map(a)}async function l(e,t,i,r){let s;null!=i&&"number"==typeof i&&(s=new TimedCancellationSource(i),i=s.token);const o=e.then((e=>null==e?e:c(e,t,i,r)));o.then((()=>s?.dispose()));const a=await n(e,t,i);return a.paused?{value:o,paused:a.paused,reason:a.reason}:{value:await o,paused:!1}}},9529:(e,t,i)=>{i.d(t,{$$:()=>u,P0:()=>g,SI:()=>p,WD:()=>c,Zv:()=>v,_N:()=>d,b2:()=>y,dO:()=>w,fA:()=>m,j$:()=>f,vg:()=>h,xR:()=>l});var r=i(9496),s=i(5255),o=i(3599),n=i(9701);const a=[];function c(){return e=>{a.push(e)}}function l(e,t,i){return r.commands.registerCommand(e,(function(...i){o.W.instance.telemetry.sendEvent("command",{command:e}),t.call(this,...i)}),i)}function h(e,t,i){return r.commands.registerCommand(e,(function(...i){o.W.instance.telemetry.sendEvent("command",{command:e,webview:(0,n.s4)(i[0])?i[0].webview:"<missing>"}),t.call(this,...i)}),i)}function u(e){return a.map((t=>new t(e)))}function d(e){return e}function p(e,t){return r.commands.executeCommand(`${s.Gh.ActionPrefix}${e}`,{...t,type:e})}function m(e,t,...i){return{command:e,title:t,arguments:i}}function g(e,...t){return r.commands.executeCommand(e,...t)}function f(e,t,...i){return{command:e,title:t,arguments:i}}function w(e,...t){return"setContext"!=e&&"vscode.executeDocumentSymbolProvider"!==e&&o.W.instance.telemetry.sendEvent("command/core",{command:e}),r.commands.executeCommand(e,...t)}function v(e,...t){return o.W.instance.telemetry.sendEvent("command/core",{command:e}),r.commands.executeCommand(e,...t)}function y(e,t,i){return r.commands.executeCommand(e,t,i)}},4298:(e,t,i)=>{i.d(t,{n:()=>r});class Comparer{}new class TextEditorComparer extends Comparer{equals(e,t,i={usePosition:!1}){return e===t||null!=e&&null!=t&&((!i.usePosition||e.viewColumn===t.viewColumn)&&e.document===t.document)}};const r=new class UriComparer extends Comparer{equals(e,t,i={exact:!1}){return e===t||null!=e&&null!=t&&(i.exact?e.toString()===t.toString():e.scheme===t.scheme&&e.fsPath===t.fsPath)}}},5148:(e,t,i)=>{i.d(t,{D:()=>n,V:()=>Configuration});var r=i(9496),s=i(5255),o=i(9967);class Configuration{static configure(e){e.subscriptions.push(r.workspace.onDidChangeConfiguration(n.onConfigurationChanged,n))}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeAny=new r.EventEmitter;get onDidChangeAny(){return this._onDidChangeAny.event}onConfigurationChanged(e){this._onDidChangeAny.fire(e),e.affectsConfiguration(s.m1)&&(null!=this._overrides?.onDidChange&&(e=this._overrides.onDidChange(e)),this._onDidChange.fire(e))}_overrides;applyOverrides(e){this._overrides=e}clearOverrides(){null!=this._overrides&&(this._overrides.get=void 0,this._overrides.getAll=void 0,queueMicrotask((()=>this._overrides=void 0)))}get(e,t,i,o){const n=void 0===i?r.workspace.getConfiguration(s.m1,t).get(e):r.workspace.getConfiguration(s.m1,t).get(e,i);return o||null==this._overrides?.get?n:this._overrides.get(e,n)}getAll(e){const t=r.workspace.getConfiguration().get(s.m1);return e||null==this._overrides?.getAll?t:this._overrides.getAll(t)}getAny(e,t,i){return void 0===i?r.workspace.getConfiguration(void 0,t).get(e):r.workspace.getConfiguration(void 0,t).get(e,i)}changed(e,t,i){return null==e||(Array.isArray(t)?t.some((t=>e.affectsConfiguration(`${s.m1}.${t}`,i))):e.affectsConfiguration(`${s.m1}.${t}`,i))}changedAny(e,t,i){return null==e||(Array.isArray(t)?t.some((t=>e.affectsConfiguration(t,i))):e.affectsConfiguration(t,i))}inspect(e,t){return r.workspace.getConfiguration(s.m1,t).inspect(void 0===e?s.m1:e)}inspectAny(e,t){return r.workspace.getConfiguration(void 0,t).inspect(e)}isUnset(e,t){const i=this.inspect(e,t);return void 0===i.workspaceFolderValue&&(void 0===i.workspaceValue&&void 0===i.globalValue)}async migrate(e,t,i){const s=this.inspect(e);if(void 0===s)return!1;let o=!1;return void 0!==s.globalValue&&(await this.update(t,null!=i.migrationFn?i.migrationFn(s.globalValue):s.globalValue,r.ConfigurationTarget.Global),o=!0),void 0!==s.workspaceValue&&(await this.update(t,null!=i.migrationFn?i.migrationFn(s.workspaceValue):s.workspaceValue,r.ConfigurationTarget.Workspace),o=!0),void 0!==s.workspaceFolderValue&&(await this.update(t,null!=i.migrationFn?i.migrationFn(s.workspaceFolderValue):s.workspaceFolderValue,r.ConfigurationTarget.WorkspaceFolder),o=!0),o||void 0===i.fallbackValue||(await this.update(t,i.fallbackValue,r.ConfigurationTarget.Global),o=!0),o}async migrateIfMissing(e,t,i){const s=this.inspect(e);if(void 0===s)return;const o=this.inspect(t);void 0!==s.globalValue&&void 0===o?.globalValue&&await this.update(t,null!=i.migrationFn?i.migrationFn(s.globalValue):s.globalValue,r.ConfigurationTarget.Global),void 0!==s.workspaceValue&&void 0===o?.workspaceValue&&await this.update(t,null!=i.migrationFn?i.migrationFn(s.workspaceValue):s.workspaceValue,r.ConfigurationTarget.Workspace),void 0!==s.workspaceFolderValue&&void 0===o?.workspaceFolderValue&&await this.update(t,null!=i.migrationFn?i.migrationFn(s.workspaceFolderValue):s.workspaceFolderValue,r.ConfigurationTarget.WorkspaceFolder)}matches(e,t,i){return e===t}name(e){return e}update(e,t,i){return r.workspace.getConfiguration(s.m1).update(e,t,i)}updateAny(e,t,i,s){return r.workspace.getConfiguration(void 0,i===r.ConfigurationTarget.Global?void 0:s).update(e,t,i)}updateEffective(e,t){const i=this.inspect(e);return void 0!==i.workspaceFolderValue?t===i.workspaceFolderValue?Promise.resolve(void 0):this.update(e,t,r.ConfigurationTarget.WorkspaceFolder):void 0!==i.workspaceValue?t===i.workspaceValue?Promise.resolve(void 0):this.update(e,t,r.ConfigurationTarget.Workspace):i.globalValue===t||void 0===i.globalValue&&t===i.defaultValue?Promise.resolve(void 0):this.update(e,(0,o.wy)(t,i.defaultValue)?void 0:t,r.ConfigurationTarget.Global)}}const n=new Configuration},2061:(e,t,i)=>{i.d(t,{fw:()=>c,v:()=>l,ve:()=>a});var r=i(9496),s=i(9529);const o=new Map,n=new r.EventEmitter,a=n.event;function c(e,t){return o.get(e)??t}async function l(e,t){o.set(e,t),await(0,s.dO)("setContext",e,t),n.fire(e)}},7512:(e,t,i)=>{i.d(t,{Cz:()=>d,IH:()=>p,Zh:()=>m,hM:()=>f,p6:()=>g});const r=/(?<literal>\[.*?\])|(?<year>YYYY|YY)|(?<month>M{1,4})|(?<day>Do|DD?)|(?<weekday>d{2,4})|(?<hour>HH?|hh?)|(?<minute>mm?)|(?<second>ss?)|(?<fractionalSecond>SSS)|(?<dayPeriod>A|a)|(?<timeZoneName>ZZ?)/g,s=/(?<dateStyle>full|long|medium|short)(?:\+(?<timeStyle>full|long|medium|short))?/,o=[["year",629856e5,31536e6,"yr"],["month",2628e6,2628e6,"mo"],["week",6048e5,6048e5,"wk"],["day",864e5,864e5,"d"],["hour",36e5,36e5,"h"],["minute",6e4,6e4,"m"],["second",1e3,1e3,"s"]];let n;const a=new Map;let c,l,h;const u=new Map;function d(e){c="string"==typeof e?"system"===e||0===e.trim().length?void 0:[e]:e??void 0,l=void 0,h=void 0,a.clear(),u.clear(),n=void 0}function p(e,t){const i=new Date(e.getTime());for(const[e,r]of Object.entries(t))if(r)switch(e){case"years":i.setFullYear(i.getFullYear()+r);break;case"months":i.setMonth(i.getMonth()+r);break;case"days":i.setDate(i.getDate()+r);break;case"hours":i.setHours(i.getHours()+r);break;case"minutes":i.setMinutes(i.getMinutes()+r);break;case"seconds":i.setSeconds(i.getSeconds()+r)}return i}function m(e,t){const i=("number"==typeof e?e:e.getTime())-(new Date).getTime();for(const[e,r,s,a]of o){const o=Math.abs(i);if(o>=r||1e3===r){if(t){if(null==n&&(null!=h?n=h.resolvedOptions().locale:null!=l?n=l.resolvedOptions().locale:(h=new Intl.RelativeTimeFormat(c,{localeMatcher:"best fit",numeric:"always",style:"narrow"}),n=h.resolvedOptions().locale)),"en"===n||n?.startsWith("en-")){return`${Math.round(o/s)}${a}`}return null==h&&(h=new Intl.RelativeTimeFormat(c,{localeMatcher:"best fit",numeric:"always",style:"narrow"})),h.format(Math.round(i/s),e)}return null==l&&(l=new Intl.RelativeTimeFormat(c,{localeMatcher:"best fit",numeric:"auto",style:"long"})),l.format(Math.round(i/s),e)}}return""}function g(e,t,i,o=!0){const n=`${i??""}:${t=t??void 0}`;let l=a.get(n);if(null==l){const e=function(e){if(null==e)return{localeMatcher:"best fit",dateStyle:"full",timeStyle:"short"};const t=s.exec(e);if(null!=t?.groups){const{dateStyle:e,timeStyle:i}=t.groups;return{localeMatcher:"best fit",dateStyle:e||"full",timeStyle:i||void 0}}const i={localeMatcher:"best fit"};for(const{groups:t}of e.matchAll(r))if(null!=t)for(const e in t){const r=t[e];if(null!=r)switch(e){case"year":i.year=4===r.length?"numeric":"2-digit";break;case"month":switch(r.length){case 4:i.month="long";break;case 3:i.month="short";break;case 2:i.month="2-digit";break;case 1:i.month="numeric"}break;case"day":i.day="DD"===r?"2-digit":"numeric";break;case"weekday":switch(r.length){case 4:i.weekday="long";break;case 3:i.weekday="short";break;case 2:i.weekday="narrow"}break;case"hour":i.hour=2===r.length?"2-digit":"numeric",i.hour12="hh"===r||"h"===r;break;case"minute":i.minute=2===r.length?"2-digit":"numeric";break;case"second":i.second=2===r.length?"2-digit":"numeric";break;case"fractionalSecond":i.fractionalSecondDigits=3;break;case"dayPeriod":i.dayPeriod="narrow",i.hour12=!0,i.hourCycle="h12";break;case"timeZoneName":i.timeZoneName=2===r.length?"long":"short"}}return i}(t);let h;h=null==i?c:"system"===i?void 0:[i],l=new Intl.DateTimeFormat(h,e),o&&a.set(n,l)}if(null==t||s.test(t))return l.format(e);function h(e){const t=`${i??""}:time:${e}`;let r=a.get(t);if(null==r){const s={localeMatcher:"best fit",timeStyle:e};let n;n=null==i?c:"system"===i?void 0:[i],r=new Intl.DateTimeFormat(n,s),o&&a.set(t,r)}return r}const u=l.formatToParts(e);return t.replace(r,((t,i,r,s,o,n,a,c,l,d,p,m,g,f,w)=>{if(null!=i)return i.substring(1,i.length-1);for(const t in w){const i=w[t];if(null==i)continue;const r=u.find((e=>e.type===t));if("Do"===i&&"day"===r?.type)return v(Number(r.value));if("a"===i&&"dayPeriod"===r?.type){const t=h("short").formatToParts(e).find((e=>"dayPeriod"===e.type));return` ${(t??r)?.value??""}`}return r?.value??""}return""}))}function f(e,t,i){const r=("number"==typeof t?t:t.getTime())-("number"==typeof e?e:e.getTime());switch(i){case"days":return Math.floor(r/864e5);case"hours":return Math.floor(r/36e5);case"minutes":return Math.floor(r/6e4);case"seconds":return Math.floor(r/1e3);default:return r}}const w=["th","st","nd","rd"];function v(e){const t=e%100;return`${e}${w[(t-20)%10]??w[t]??w[0]}`}},5432:(e,t,i)=>{i.d(t,{H:()=>o});var r=i(7469),s=i(9610);function o(e){return(t,i,o)=>{let n;if("function"==typeof o.value?n=o.value:"function"==typeof o.get&&(n=o.get),null==n)throw new Error("Not supported");const a=`$gate$${i}`;o.value=function(...t){const i=(0,s.S)(a,e,...t);Object.prototype.hasOwnProperty.call(this,i)||Object.defineProperty(this,i,{configurable:!1,enumerable:!1,writable:!0,value:void 0});let o=this[i];if(void 0===o){let e;try{if(e=n.apply(this,t),null==e||!(0,r.tI)(e))return e;this[i]=o=e.then((e=>(this[i]=void 0,e))).catch((e=>{throw this[i]=void 0,e}))}catch(e){throw this[i]=void 0,e}}return o}}}},4241:(e,t,i)=>{i.d(t,{cM:()=>m,fF:()=>p,hJ:()=>d});var r=i(4372),s=i(9796),o=i(4336),n=i(8227),a=i(6004),c=i(7469),l=i(4627);const h="",u=Symbol("logInstanceNameFn");function d(e){return t=>{t[u]=e}}function p(e){return m(e,!0)}function m(e,t=!1){let i,d,p,m,g,f,w=0,v=!1,y=!1,b=!0;null!=e&&({args:i,condition:d,enter:p,exit:m,prefix:g,sanitize:f,logThreshold:w=0,scoped:v=!0,singleLine:y=!1,timed:b=!0}=e),w>0&&(y=!0,b=!0),b&&(v=!0);const C=t?o.Yd.debug.bind(o.Yd):o.Yd.log.bind(o.Yd),A=o.Yd.warn.bind(o.Yd);return(e,k,P)=>{let S,D;if("function"==typeof P.value?(S=P.value,D="value"):"function"==typeof P.get&&(S=P.get,D="get"),null==S||null==D)throw new Error("Not supported");const R=(0,s.ZS)(S);P[D]=function(...s){const P=(0,a.OD)();if(!o.Yd.isDebugging&&!o.Yd.enabled("debug")&&(!o.Yd.enabled("info")||t)||null!=d&&!d(...s))return S.apply(this,s);let D;null!=this?(D=(0,o.q4)(this),this.constructor?.[u]&&(D=e.constructor[u](this,D))):D=h;let $,_=`${v?`[${P.toString(16).padStart(5)}] `:h}${D?`${D}.`:h}${k}`;null!=g&&(_=g({id:P,instance:this,instanceName:D,name:k,prefix:_},...s)),v&&($={scopeId:P,prefix:_},(0,a.DS)(P,$));const F=null!=p?p(...s):h;let T;if(!1===i||0===s.length)T=h,y||C(`${_}${F}`);else{let e;T="";let r,n,a,c=-1;for(a of s){if(r=R[++c],e=i?.[c],null!=e){if("boolean"==typeof e)continue;if(T.length>0&&(T+=", "),"string"==typeof e){T+=e;continue}n=String(e(a))}else T.length>0&&(T+=", "),n=o.Yd.toLoggable(a,f);T+=r?`${r}=${n}`:n}y||C(`${_}${F}${T&&(t||o.Yd.enabled("debug")||o.Yd.isDebugging)?`(${T})`:h}`)}if(y||b||null!=m){const e=b?(0,r.a)():void 0,i=t=>{const i=void 0!==e?` [${(0,l.qk)(e)}ms]`:h;y?o.Yd.error(t,`${_}${F}${T?`(${T})`:h}`,`failed${$?.exitDetails?$.exitDetails:h}${i}`):o.Yd.error(t,_,`failed${$?.exitDetails?$.exitDetails:h}${i}`),v&&(0,a.Fp)(P)};let u;try{u=S.apply(this,s)}catch(e){throw i(e),e}const d=i=>{let r,s,c,u;if(null!=e?(r=(0,l.qk)(e),r>n.O?(s=A,c=` [*${r}ms] (slow)`):(s=C,c=` [${r}ms]`)):(c=h,s=C),null!=m)if("function"==typeof m)try{u=m(i)}catch(e){u=`@log.exit error: ${e}`}else!0===m&&(u=`returned ${o.Yd.toLoggable(i)}`);else u="completed";y?(0===w||r>w)&&s(`${_}${F}${T&&(t||o.Yd.enabled("debug")||o.Yd.isDebugging)?`(${T})`:h} ${u}${$?.exitDetails?$.exitDetails:h}${c}`):s(`${_}${T&&(t||o.Yd.enabled("debug")||o.Yd.isDebugging)?`(${T})`:h} ${u}${$?.exitDetails?$.exitDetails:h}${c}`),v&&(0,a.Fp)(P)};if(null!=u&&(0,c.tI)(u)){u.then(d).catch(i)}else d(u);return u}return S.apply(this,s)}}}},4488:(e,t,i)=>{i.d(t,{H:()=>s});var r=i(9610);function s(e){return(t,i,s)=>{let o,n;if("function"==typeof s.value)o=s.value,n="value";else{if("function"!=typeof s.get)throw new Error("Not supported");o=s.get,n="get"}if(null==o)throw new Error("Not supported");const a=`$memoize$${i}`;let c;s[n]=function(...t){const i=(0,r.S)(a,e,...t);return Object.prototype.hasOwnProperty.call(this,i)?(c=this[i],c):(c=o.apply(this,t),Object.defineProperty(this,i,{configurable:!1,enumerable:!1,writable:!1,value:c}),c)}}}},9610:(e,t,i)=>{i.d(t,{S:()=>u});var r=i(9496),s=i(3599),o=i(5367),n=i(6450),a=i(9502),c=i(6922);function l(e,t){return""===e||null==t||"object"!=typeof t?t:t instanceof Error?String(t):t instanceof r.Uri?"sha"in t&&t.sha?`${t.sha}:${t.toString()}`:t.toString():(0,o.BF)(t)||(0,n.f_)(t)||(0,a.YR)(t)||(0,c.Jc)(t)?t.toString():(0,s.N)(t)?"<container>":t}function h(...e){if(0===e.length)return"";if(1!==e.length)return JSON.stringify(e,l);const t=e[0];if(null==t)return"";switch(typeof t){case"string":return t;case"number":case"boolean":case"undefined":case"symbol":case"bigint":return String(t);default:return t instanceof Error?String(t):t instanceof r.Uri?"sha"in t&&"string"==typeof t.sha&&t.sha?`${t.sha}:${t.toString()}`:t.toString():(0,o.BF)(t)||(0,n.f_)(t)||(0,a.YR)(t)||(0,c.Jc)(t)?t.toString():(0,s.N)(t)?"<container>":JSON.stringify(t,l)}}function u(e,t,...i){if(0===i.length)return e;let r;if(null!=t)try{r=t(...i)}catch{r=h(...i)}else r=h(...i);return`${e}$${r}`}},8786:(e,t,i)=>{function r(e){if(null!=e)return encodeURI(e.replace(/%20/g," "))}i.d(t,{M:()=>r})},2185:(e,t,i)=>{function r(e){return(t,i,r)=>{const s=e((e=>(s.dispose(),t.call(i,e))),null,r);return s}}i.d(t,{IH:()=>r,ue:()=>o});const s=(e,t)=>t(e);function o(e,t=s){let i,r,o=!0;return{get pending(){return o},promise:new Promise(((s,n)=>{i=()=>{o=!1,i=void 0,n()},r=e((async e=>{try{await t(e,s,n),o=!1}catch(e){o=!1,n(e)}}))})).then((e=>(r.dispose(),e)),(e=>{throw r.dispose(),e})),cancel:()=>i?.()}}},1774:(e,t,i)=>{i.d(t,{d:()=>o});var r=i(3700),s=i(4627);function o(e,t){const i=(0,r.M)(e);let o=(0,r.EZ)(i);if(null!=t?.truncateTo&&o.length>=t.truncateTo)return(0,s.ro)(o,t.truncateTo);if(t?.suffix){if(null!=t.truncateTo&&o.length+t.suffix.length>=t.truncateTo)return`${(0,s.ro)(o,t.truncateTo-t.suffix.length)}${t.suffix}`;o+=t.suffix}if(t?.fileOnly)return o;const n=(0,r.Fd)(i,t?.relativeTo);return n?(o=`/${o}`,null!=t?.truncateTo&&o.length+n.length>=t.truncateTo?`${(0,s.AO)(n,t.truncateTo-o.length)}${o}`:`${n}${o}`):o}},9796:(e,t,i)=>{function r(e,t){let i,r,s,o,n;function a(e){const i=e-(r??0);return null==r||i>=t||i<0}function c(){const e=Date.now();if(a(e))l();else{n=setTimeout(c,t-(e-(r??0)))}}function l(){return n=void 0,i?function(){const t=i,r=s;return i=s=void 0,o=e.apply(r,t),o}():(i=s=void 0,o)}function h(...e){const l=Date.now(),h=a(l);return i=e,s=this,r=l,h&&null==n?(n=setTimeout(c,t),o):(null==n&&(n=setTimeout(c,t)),o)}return h.cancel=function(){null!=n&&clearTimeout(n),i=r=s=n=void 0},h.flush=function(){return null!=n?l():o},h.pending=function(){return null!=n},h}i.d(t,{DH:()=>f,Ds:()=>r,IH:()=>g,NX:()=>v,ZS:()=>p,df:()=>w,is:()=>m});const s=",",o="",n="=",a="{",c="(",l=")",h=/\(([\s\S]*)\)/,u=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,d=/\s?=.*$/;function p(e){if("function"!=typeof e)throw new Error("Not supported");if(0===e.length)return[];let t=Function.prototype.toString.call(e);t=t.replace(u,o)||t,t=t.slice(0,t.indexOf(a));let i=t.indexOf(c),r=t.indexOf(l);i=i>=0?i+1:0,r=r>0?r:t.indexOf(n),t=t.slice(i,r),t=`(${t})`;const p=h.exec(t);return null!=p?p[1].split(s).map((e=>e.trim().replace(d,o))):[]}function m(e,t,i){return null==t?null!=e:"function"==typeof t?t(e):void 0===i?void 0!==e[t]:e[t]===i}function g(e){let t,i=!1;return function(...r){return i||(i=!0,t=e.apply(this,r),e=void 0),t}}function f(e,t){let i;const r={dispose:()=>{null!=i&&(clearInterval(i),i=void 0)}};return i=setInterval(e,t),r}async function w(e,t,i){for(const r of t)try{await e.apply(i,r)}catch{}}function v(e,t){return e>=t?e*e+e+t:e+t*t}},3105:(e,t,i)=>{function r(e,t){let i,r=0;for(;i=e.next(),!i.done;)(void 0===t||t(i.value))&&r++;return r}function*s(e,t){if(void 0===t)for(const t of e)null!=t&&(yield t);else for(const i of e)t(i)&&(yield i)}function*o(e,t){for(const i of e){const e=t(i);null!=e&&(yield e)}}function n(e,t){for(const i of e)if(t(i))return i;return null}function a(e){return e[Symbol.iterator]().next().value}function*c(e,t){for(const i of e)yield*t(i)}function l(e,t){const i=e[Symbol.iterator]();let r=i.next();if(r.done)return"";let s=String(r.value);for(;r=i.next(),!r.done;)s+=`${t}${r.value}`;return s}function h(e){let t;for(t of e);return t}function*u(e,t){for(const i of e)yield t(i)}function d(e,t){for(const i of e)if(t(i))return!0;return!1}function p(e,t,i){const r=new Map;for(const s of e){const e=t(s),o=r.get(e);if(void 0===o)r.set(e,s);else{const t=i(o,s);void 0!==t&&r.set(e,t)}}return r.values()}i.d(t,{DZ:()=>o,G:()=>d,Ps:()=>a,QX:()=>r,UI:()=>u,VS:()=>c,Z$:()=>h,hX:()=>s,sE:()=>n,uw:()=>p,v_:()=>l})},8227:(e,t,i)=>{i.d(t,{O:()=>r});const r=500},6004:(e,t,i)=>{i.d(t,{DS:()=>l,Fp:()=>n,OD:()=>c,UH:()=>a,lH:()=>h});const r=2**30,s=new Map;let o=0;function n(e){s.delete(e)}function a(){return s.get(o)}function c(){return o===r&&(o=0),++o}function l(e,t){s.set(e,t)}function h(e,t){null!=e&&(e.exitDetails=t)}},4336:(e,t,i)=>{i.d(t,{Nu:()=>a,Yd:()=>s,q4:()=>n});const r="";const s=new class Logger2{output;provider;configure(e,t,i=!1){this.provider=e,this._isDebugging=i,this.logLevel=t}enabled(e){return this.level>=o(e)}_isDebugging=!1;get isDebugging(){return this._isDebugging}level=0;_logLevel="off";get logLevel(){return this._logLevel}set logLevel(e){this._logLevel=e,this.level=o(this._logLevel),"off"===e?(this.output?.dispose?.(),this.output=void 0):this.output=this.output??this.provider.createChannel(this.provider.name)}get timestamp(){return`[${(new Date).toISOString().replace(/T/," ").slice(0,-1)}]`}debug(e,...t){if(this.level<4&&!this.isDebugging)return;let i;"string"==typeof e?i=e:(i=t.shift(),null!=e&&(i=`${e.prefix} ${i??r}`)),this.isDebugging&&console.log(this.timestamp,`[${this.provider.name}]`,i??r,...t),null==this.output||this.level<4||this.output.appendLine(`${this.timestamp} ${i??r}${this.toLoggableParams(!0,t)}`)}error(e,t,...i){if(this.level<1&&!this.isDebugging)return;let s;if(s=null==t||"string"==typeof t?t:`${t.prefix} ${i.shift()??r}`,null==s){const t=e instanceof Error?e.stack:void 0;if(t){const e=/.*\s*?at\s(.+?)\s/.exec(t);null!=e&&(s=e[1])}}this.isDebugging&&console.error(this.timestamp,`[${this.provider.name}]`,s??r,...i,e),null==this.output||this.level<1||this.output.appendLine(`${this.timestamp} ${s??r}${this.toLoggableParams(!1,i)}\n${String(e)}`)}log(e,...t){if(this.level<3&&!this.isDebugging)return;let i;"string"==typeof e?i=e:(i=t.shift(),null!=e&&(i=`${e.prefix} ${i??r}`)),this.isDebugging&&console.log(this.timestamp,`[${this.provider.name}]`,i??r,...t),null==this.output||this.level<3||this.output.appendLine(`${this.timestamp} ${i??r}${this.toLoggableParams(!1,t)}`)}warn(e,...t){if(this.level<2&&!this.isDebugging)return;let i;"string"==typeof e?i=e:(i=t.shift(),null!=e&&(i=`${e.prefix} ${i??r}`)),this.isDebugging&&console.warn(this.timestamp,`[${this.provider.name}]`,i??r,...t),null==this.output||this.level<2||this.output.appendLine(`${this.timestamp} ${i??r}${this.toLoggableParams(!1,t)}`)}showOutputChannel(e){this.output?.show?.(e)}toLoggable(e,t){if("object"!=typeof e)return String(e);if(Array.isArray(e))return`[${e.map((e=>this.toLoggable(e,t))).join(", ")}]`;const i=this.provider.toLoggable?.(e);if(null!=i)return i;try{return JSON.stringify(e,t)}catch{return"<error>"}}toLoggableParams(e,t){if(0===t.length||e&&this.level<4&&!this.isDebugging)return r;const i=t.map((e=>this.toLoggable(e))).join(", ");return 0!==i.length?` — ${i}`:r}};function o(e){switch(e){case"off":default:return 0;case"error":return 1;case"warn":return 2;case"info":return 3;case"debug":return 4}}function n(e){let t;if("function"==typeof e){if(null==e.prototype?.constructor)return e.name;t=e.prototype.constructor.name??r}else t=e.constructor?.name??r;const i=t.indexOf("_");return-1===i?t:t.substr(i+1)}const a={enabled:e=>s.enabled(e)||s.isDebugging,log:(e,t,i,...r)=>{switch(e){case"error":s.error("",t,i,...r);break;case"warn":s.warn(t,i,...r);break;case"info":s.log(t,i,...r);break;default:s.debug(t,i,...r)}}}},9967:(e,t,i)=>{function r(e,t){if(e===t)return!0;if(null==e||null==t)return!1;const i=typeof e;return(i!==typeof t||"string"!==i&&"number"!==i&&"boolean"!==i)&&JSON.stringify(e)===JSON.stringify(t)}function s(e,t){const i=t?.skipPaths?.length?t?.prefix?t.skipPaths.map((e=>`${t.prefix}.${e}`)):t.skipPaths:void 0,r=t?.skipNulls??!1,s=t?.stringify??!1;const o=Object.create(null);return function e(o,n,a){if(!i?.includes(n))if(Object(a)!==a)if(null==a){if(r)return;o[n]=s?"all"==s?JSON.stringify(a):a??null:a}else o[n]="string"==typeof a?a:s?"number"==typeof a||"boolean"==typeof a?a:JSON.stringify(a):a;else if(Array.isArray(a)){const i=a.length;if(0===i)return;if("join"===t?.arrays)o[n]=a.join(",");else for(let t=0;t<i;t++)e(o,`${n}[${t}]`,a[t])}else{const t=Object.entries(a);if(0===t.length)return;for(const[i,r]of t)e(o,n?`${n}.${i}`:i,r)}}(o,t?.prefix??"",e),o}function o(e,t,i){if(null==e&&(e=Object.create(null)),null==i||"boolean"==typeof i&&!i){const{[t]:i,...r}=e;e=r}else e[t]="object"==typeof i?{...i}:i;return e}i.d(t,{iC:()=>o,wy:()=>r,xH:()=>s})},5116:(e,t,i)=>{i.d(t,{X:()=>PageableResult});class PageableResult{constructor(e){this.fetch=e}cached;async*values(){if(null!=this.cached)for(const e of this.cached.values)yield e;let e=this.cached;for(;null==e||e.paging?.more;){e=await this.fetch(e?.paging),null==this.cached?this.cached=e:(this.cached.values.push(...e.values),this.cached.paging=e.paging);for(const t of e.values)yield t}}}},3700:(e,t,i)=>{i.d(t,{$d:()=>y,AH:()=>k,B9:()=>f,DZ:()=>r.extname,EZ:()=>r.basename,Fd:()=>S,Gf:()=>P,IC:()=>p,M:()=>w,Mh:()=>C,RQ:()=>r.join,UG:()=>v,XX:()=>r.dirname,YP:()=>b,tD:()=>g,tE:()=>A,uo:()=>D});var r=i(1017),s=i(9496),o=i(7338),n=i(5255);const a=47,c=/(?<=^\/?)([A-Z])(?=:\/)/,l=/^([a-zA-Z][\w+.-]+):/,h=/\\/g,u=/^[/|\\]~(?:\d+?|external)(?:[/|\\]|$)/,d=/^[/|\\]~(?:\d+?|external)(?:[/|\\]|$)/;function p(e){if("string"==typeof e&&A(e)&&(e=s.Uri.parse(e)),"string"==typeof e)return m(e)?e:`/~0${(e=k(e)).charCodeAt(0)===a?e:`/${e}`}`;let t=e.fsPath;return m(t)?e:(t=k(t),e.with({path:`/~0${t.charCodeAt(0)===a?t:`/${t}`}`}))}function m(e){return u.test(e)}function g(e){return d.test(e)}function f(e,t,i,r){if(0===e.length||0===t.length)return 0;let s;(r??!o.IJ)&&(e=e.toLowerCase(),t=t.toLowerCase());let n=0;for(let r=0;r<e.length&&(s=e[r],s===t[r]);r++)s===i&&(n=r);return n}function w(e){if("string"==typeof e){if(!l.test(e))return k(e);e=s.Uri.parse(e,!0)}return k(e.scheme===n.sN.File?e.fsPath:e.path)}function v(e){return l.exec(e)?.[1]}function y(e,t){return"string"==typeof t&&(t=k(t)).charCodeAt(0)!==a&&(t=`/${t}`),"string"==typeof e&&(e=k(e)).charCodeAt(0)!==a&&(e=`/${e}`),"string"==typeof t?1===t.length||("string"==typeof e?e:e.path).startsWith(t.charCodeAt(t.length-1)===a?t:`${t}/`):"string"==typeof e?1===t.path.length||e.startsWith(t.path.charCodeAt(t.path.length-1)===a?t.path:`${t.path}/`):t.scheme===e.scheme&&t.authority===e.authority&&(1===t.path.length||e.path.startsWith(t.path.charCodeAt(t.path.length-1)===a?t.path:`${t.path}/`))}function b(e){return!A(e)&&(0,r.isAbsolute)(e)}function C(e){return"*"===(0,r.basename)(e)}function A(e){return l.test(e)}function k(e){return e?((e=e.replace(h,"/")).charCodeAt(e.length-1)===a&&(o.ED&&3===e.length&&":"===e[1]||(e=e.slice(0,-1))),o.ED&&(e=e.replace(c,(e=>e.toLowerCase()))),e):e}function P(e,t,i){e=l.test(e)?s.Uri.parse(e,!0).path:k(e);const r=f(`${t=l.test(t)?s.Uri.parse(t,!0).path:k(t)}/`,`${e}/`,"/",i);return r>0?t.substring(r+1):t}function S(e,t){const i=(0,r.dirname)(e);if(!i||"."===i||i===t)return"";if(!t)return i;const[s]=D(i,t);return s}function D(e,t,i=!1,o){if(e=w(e),t){let i;l.test(t)?(i=s.Uri.parse(t,!0),t=w(i)):t=k(t);const r=f(`${t}/`,`${e}/`,"/",o);r>0?(t=e.substring(0,r),e=e.substring(r+1)):e.charCodeAt(0)===a&&(e=e.slice(1)),null!=i&&(t=i.with({path:t}).toString())}else t=k(i?(0,r.dirname)(e):""),e=i?(0,r.basename)(e):e;return[e,t]}},7469:(e,t,i)=>{function r(...e){return new Promise(((t,i)=>{let r=!1;const s=e=>{r=!0,t(e)};let o;const n=t=>{r||(null==o?o=[t]:o.push(t),e.length-o.length<1&&i(new AggregateError(o)))};for(const t of e)t.then(s,n)}))}async function*s(e){const t=new Map(e.map(((e,t)=>[t,e.then((e=>({index:t,value:e,status:"fulfilled"})),(e=>({index:t,reason:e,status:"rejected"})))])));for(;t.size;){const e=await Promise.race(t.values());t.delete(e.index),yield e}}i.d(t,{Dc:()=>l,HO:()=>o,PK:()=>PromiseCancelledError,PQ:()=>n,Sb:()=>a,Yj:()=>r,ag:()=>h,rX:()=>s,tI:()=>c});class PromiseCancelledError extends Error{constructor(e,t){super(t),this.promise=e}}function o(e,t,i={}){return null==t||"number"==typeof t&&t<=0?e:new Promise(((r,s)=>{let o,n,a=!1;"number"==typeof t?o=setTimeout((()=>{"function"==typeof i.onDidCancel?i.onDidCancel(r,s):s(new PromiseCancelledError(e,i.cancelMessage??"TIMED OUT"))}),t):n=t.onCancellationRequested((()=>{n?.dispose(),a||("function"==typeof i.onDidCancel?i.onDidCancel(r,s):s(new PromiseCancelledError(e,i.cancelMessage??"CANCELLED")))})),e.then((()=>{a=!0,null!=o&&clearTimeout(o),n?.dispose(),r(e)}),(e=>{a=!0,null!=o&&clearTimeout(o),n?.dispose(),s(e)}))}))}function n(){const e={pending:!0,promise:void 0,fulfill:void 0,cancel:void 0};return e.promise=new Promise(((t,i)=>{e.fulfill=function(i){e.pending=!1,t(i)},e.cancel=function(){e.pending=!1,i()}})),e}function a(e,t=void 0){return"fulfilled"===e?.status?e.value:t}function c(e){return null!=e&&(e instanceof Promise||"function"==typeof e?.then)}function l(e){return new Promise((t=>setTimeout(t,e)))}function h(){return new Promise((e=>queueMicrotask(e)))}class AggregateError extends Error{constructor(e){super(`AggregateError(${e.length})\n${e.map((e=>`\t${String(e)}`)).join("\n")}`),this.errors=e,Error.captureStackTrace?.(this,AggregateError)}}},6398:(e,t,i)=>{i.d(t,{k:()=>n,u:()=>Stopwatch});var r=i(4372),s=i(4336),o=i(6004);class Stopwatch{constructor(e,t,...i){let o,n;if(this.scope=e,"string"!=typeof e&&(o=e,e="",this.instance=""),n="boolean"==typeof t?.log?t.log?{}:void 0:t?.log??{},this.logLevel=t?.logLevel??"info",this.logProvider=t?.provider??s.Nu,this._time=(0,r.a)(),null!=n){if(!this.logProvider.enabled(this.logLevel))return;i.length?this.logProvider.log(this.logLevel,o,`${this.instance}${e}${n.message??""}${n.suffix??""}`,...i):this.logProvider.log(this.logLevel,o,`${this.instance}${e}${n.message??""}${n.suffix??""}`)}}instance=`[${String((0,o.OD)()).padStart(5)}] `;logLevel;logProvider;_time;get startTime(){return this._time}elapsed(){const[e,t]=(0,r.a)(this._time);return 1e3*e+Math.floor(t/1e6)}log(e){this.logCore(this.scope,e,!1)}restart(e){this.logCore(this.scope,e,!0),this._time=(0,r.a)()}stop(e){this.restart(e)}logCore(e,t,i){if(!this.logProvider.enabled(this.logLevel))return;let s;if("string"!=typeof e&&(s=e,e=""),!i)return void this.logProvider.log(this.logLevel,s,`${this.instance}${e}${t?.message??""}${t?.suffix??""}`);const[o,n]=(0,r.a)(this._time),a=1e3*o+Math.floor(n/1e6),c=`${this.instance}${e}${t?.message??""}`;this.logProvider.log(a>250?"warn":this.logLevel,s,`${c?`${c} `:""}[${a}ms]${t?.suffix??""}`)}}function n(e,t,...i){return(t?.provider??s.Nu).enabled(t?.logLevel??"info")?new Stopwatch(e,t,...i):void 0}},4627:(e,t,i)=>{i.d(t,{US:()=>o,kC:()=>n,zY:()=>l,TT:()=>d,j_:()=>p,QC:()=>Q,se:()=>m,qq:()=>h,ry:()=>v,yI:()=>y,qk:()=>b,UM:()=>C,sC:()=>k,Gg:()=>R,dz:()=>G,sX:()=>$,Qu:()=>_,vk:()=>x,Q_:()=>I,eh:()=>O,_6:()=>B,dm:()=>u,pW:()=>E,$G:()=>W,AO:()=>N,ro:()=>M});var r=i(4372),s=i(5255);function o(e){return Buffer.from(e).toString("base64")}function n(e){return`${e[0].toLocaleUpperCase()}${e.slice(1)}`}let a,c;function l(e,t){null==a&&(a=new Intl.Collator(void 0,{sensitivity:"accent"}));const i=a.compare(e,t);return 0===i?0:i>0?1:-1}function h(e,t){return null==e&&null==t||null!=e&&null!=t&&0===l(e,t)}function u(e,t){return null==c&&(c=new Intl.Collator(void 0,{numeric:!0,sensitivity:"base"})),c.compare(e,t)}function d(e,t,i=0,r=e.length,s=0,o=t.length){for(;i<r&&s<o;i++,s++){const r=e.charCodeAt(i),o=t.charCodeAt(s);if(r<o)return-1;if(r>o)return 1}const n=r-i,a=o-s;return n<a?-1:n>a?1:0}function p(e,t,i=0,r=e.length,s=0,o=t.length){for(;i<r&&s<o;i++,s++){const n=e.charCodeAt(i),a=t.charCodeAt(s);if(n===a)continue;const c=n-a;if((32!==c||!T(a))&&(-32!==c||!T(n)))return F(n)&&F(a)?c:d(e.toLowerCase(),t.toLowerCase(),i,r,s,o)}const n=r-i,a=o-s;return n<a?-1:n>a?1:0}function m(e){return e?.replace(/[<>&"]/g,(e=>{switch(e){case"<":return"&lt;";case">":return"&gt;";case"&":return"&amp;";case'"':return"&quot;";default:return e}}))}const g=/[\\`*_{}[\]()#+\-.!]/g,f=/^===/gm,w=/\r?\n/g;function v(e,t={}){return e=e.replace(g,"\\$&").replace(f,"​==="),t.quoted?e.trim().replace(w,"\t\\\n>  "):e}function y(e){return e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")}function b(e){const[t,i]=(0,r.a)(e);return 1e3*t+Math.floor(i/1e6)}function*C(e,t="\n"){if("string"==typeof e){let i=0;for(;i<e.length;){let r=e.indexOf(t,i);-1===r&&(r=e.length),yield e.substring(i,r),i=r+1}return}let i,r=0;for(let s of e){r++,i&&(s=i+s,i=void 0);let o=0;for(;o<s.length;){let n=s.indexOf(t,o);if(-1===n){if(r!==e.length){i=s.substring(o);break}n=s.length}yield s.substring(o,n),o=n+1}}}const A=["¹","²","³","⁴","⁵","⁶","⁷","⁸","⁹"];function k(e){return A[e-1]??""}const P=/\$\{(?:'.*?[^\\]'|\W*)?(\w*?)(?:'.*?[^\\]'|[\W\d]*)\}/g,S=new Map;function D(e){return 95===e||e>=97&&e<=122||e>=65&&e<=90||e>=48&&e<=57}function R(e){let t=S.get(e);if(null!=t)return t;t=[];const i=e.length;let r=0;for(;r<i;){const i=e.indexOf("${",r);if(-1===i)break;const s=e.indexOf("}",i);if(-1===s)break;let o=i+2,n="",a="",c="",l=!1,h="right",u="";if("'"===e[o]){const t=++o;if(o=e.indexOf("'",o),-1===o)break;t!==o&&(a=e.slice(t,o)),o++}else if(!D(e.charCodeAt(o))){const t=o++;for(;o<s&&!D(e.charCodeAt(o));)o++;t!==o&&(a=e.slice(t,o))}for(;o<s;){let t=e.charCodeAt(o);if(D(t))n+=e[o++];else{if(124!==t)break;for(;o<s;){if(t=e.charCodeAt(++o),!(t>=48&&t<=57)){63===t?(l=!0,o++):45===t&&(h="left",o++);break}c+=e[o]}}}if(o<s)if("'"===e[o]){const t=++o;if(o=e.indexOf("'",o),-1===o)break;t!==o&&(u=e.slice(t,o)),o++}else if(!D(e.charCodeAt(o))){const t=o++;for(;o<s&&!D(e.charCodeAt(o));)o++;t!==o&&(u=e.slice(t,o))}r=s+1,t.push({key:n,start:i,end:r,options:{prefix:a||void 0,suffix:u||void 0,truncateTo:c?parseInt(c,10):void 0,collapseWhitespace:l,padDirection:h}})}return S.set(e,t),t}function $(e,t){if(null==e||0===e.length)return e;if(null==t)return e.replace(P,"");const i=R(e);if(0===i.length)return e;let r=0,s="";for(const o of i)s+=e.slice(r,o.start)+(t[o.key]??""),r=o.end;return r<e.length&&(s+=e.slice(r)),s}async function _(e,t){if(null==e||0===e.length)return e;if(null==t)return e.replace(P,"");const i=R(e);if(0===i.length)return e;let r,s=0,o="";for(const n of i)r=t[n.key],null!=r&&"object"==typeof r&&"function"==typeof r.then&&(r=await r),o+=e.slice(s,n.start)+(r??""),s=n.end;return s<e.length&&(o+=e.slice(s)),o}function F(e){return e>=s.mN.a&&e<=s.mN.z}function T(e){return e>=s.mN.A&&e<=s.mN.Z}function x(e,t=0,i=0,r=" "){return 0===t&&0===i?e:`${0===t?"":r.repeat(t)}${e}${0===i?"":r.repeat(i)}`}function I(e,t,i=" ",r){const s=t-(r??G(e));return s<=0?e:i.repeat(s)+e}function O(e,t,i=" ",r){const s=t-(r??G(e));return s<=0?e:e+i.repeat(s)}function B(e,t,i){if(null==i)return`${t} ${e}${1===t?"":"s"}`;const r=1===t?e:i.plural??`${e}s`;return i.only?r:`${0===t?i.zero??t:i.format?.(t)??t}${i.infix??" "}${r}`}function E(e,t){const i=e.indexOf(t);if(-1===i)return[e];const r=e.substring(0,i),s=e.substring(i+t.length);return null!=s?[r,s]:[r]}function W(e,t,i="…",r){if(!e)return e;if(t<=1)return i;if((r=r??G(e))<=t)return e;if(r===e.length)return`${e.substring(0,t-1)}${i}`;let s=Math.floor(t/(r/e.length)),o=G(e.substring(0,s));for(;o<t;)o+=G(e[s++]);return o>=t&&s--,`${e.substring(0,s)}${i}`}function N(e,t,i="…",r){if(!e)return e;if(t<=1)return i;if((r=r??G(e))<=t)return e;if(r===e.length)return`${i}${e.substring(r-t)}`;let s=Math.floor(t/(r/e.length)),o=G(e.substring(0,s));for(;o<t;)o+=G(e[s++]);return o>=t&&s--,`${i}${e.substring(e.length-s)}`}function M(e,t,i="…"){if(!e)return e;if(t<=1)return i;const r=G(e);return r<=t?e:`${e.slice(0,Math.floor(t/2)-1)}${i}${e.slice(r-Math.ceil(t/2))}`}let U;const L=/[^\x20-\x7F\u00a0\u2026]/;function G(e){if(null==e||0===e.length)return 0;if(!L.test(e))return e.length;if(null==U&&(U=function({onlyFirst:e=!1}={}){const t=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");return new RegExp(t,e?void 0:"g")}()),0===(e=e.replace(U,"")).length)return 0;let t=0,i=0,r=0;const s=[...e];for(let e=0;e<s.length;e++){const o=s[e].codePointAt(0);if(!(o<=31||o>=127&&o<=159)&&!(o>=768&&o<=879))if(o>=128512&&o<=128591||o>=127744&&o<=128511||o>=128640&&o<=128767||o>=9728&&o<=9983||o>=9984&&o<=10175||o>=65024&&o<=65039||o>=129280&&o<=129535||o>=65024&&o<=65039||o>=8400&&o<=8447){if(o>=127995&&o<=127999)continue;i++,t+=2}else 8205!==o?(o>65535&&e++,t+=H(o)?2:1):(r++,t-=2)}const o=i-r;return o>1&&(t+=o-1),t}function H(e){return e>=4352&&(e<=4447||9001===e||9002===e||e>=11904&&e<=12871&&12351!==e||e>=12880&&e<=19903||e>=19968&&e<=42182||e>=43360&&e<=43388||e>=44032&&e<=55203||e>=63744&&e<=64255||e>=65040&&e<=65049||e>=65072&&e<=65131||e>=65281&&e<=65376||e>=65504&&e<=65510||e>=110592&&e<=110593||e>=127488&&e<=127569||e>=131072&&e<=262141)}const V="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",Y={};function Q(e){return null==e||""===e?"":function(e,t,i){const r=[];let s,o=4,n=4,a=3,c="";const l=[];let h,u,d,p,m,g,f;const w={val:i(0),position:t,index:1};for(h=0;h<3;h+=1)r[h]=h;d=0,m=Math.pow(2,2),g=1;for(;g!=m;)p=w.val&w.position,w.position>>=1,0==w.position&&(w.position=t,w.val=i(w.index++)),d|=(p>0?1:0)*g,g<<=1;const v=String.fromCharCode;switch(s=d){case 0:for(d=0,m=Math.pow(2,8),g=1;g!=m;)p=w.val&w.position,w.position>>=1,0==w.position&&(w.position=t,w.val=i(w.index++)),d|=(p>0?1:0)*g,g<<=1;f=v(d);break;case 1:for(d=0,m=Math.pow(2,16),g=1;g!=m;)p=w.val&w.position,w.position>>=1,0==w.position&&(w.position=t,w.val=i(w.index++)),d|=(p>0?1:0)*g,g<<=1;f=v(d);break;case 2:return""}r[3]=f,u=f,l.push(f);for(;;){if(w.index>e)return"";for(d=0,m=Math.pow(2,a),g=1;g!=m;)p=w.val&w.position,w.position>>=1,0==w.position&&(w.position=t,w.val=i(w.index++)),d|=(p>0?1:0)*g,g<<=1;switch(f=d){case 0:for(d=0,m=Math.pow(2,8),g=1;g!=m;)p=w.val&w.position,w.position>>=1,0==w.position&&(w.position=t,w.val=i(w.index++)),d|=(p>0?1:0)*g,g<<=1;r[n++]=v(d),f=n-1,o--;break;case 1:for(d=0,m=Math.pow(2,16),g=1;g!=m;)p=w.val&w.position,w.position>>=1,0==w.position&&(w.position=t,w.val=i(w.index++)),d|=(p>0?1:0)*g,g<<=1;r[n++]=v(d),f=n-1,o--;break;case 2:return l.join("")}if(0==o&&(o=Math.pow(2,a),a++),r[f])c=r[f];else{if(f!==n)return;c=u+u.charAt(0)}l.push(c),r[n++]=u+c.charAt(0),o--,u=c,0==o&&(o=Math.pow(2,a),a++)}}(e.length,32,(t=>function(e,t){if(!Y[e]){Y[e]={};for(let t=0;t<e.length;t++)Y[e][e.charAt(t)]=t}return Y[e][t]}(V,e.charAt(t))))??""}},1526:(e,t,i)=>{i.d(t,{QF:()=>UriTrie,bM:()=>PathTrie,u$:()=>VisitedPathsTrie});var r=i(7338),s=i(3105),o=i(3700);function n(e){return 47===(e=(0,o.AH)(e)).charCodeAt(0)&&(e=e.slice(1)),e}class UriTrie{constructor(e){this.normalize=e,this.trie=new PathTrie}trie;clear(){this.trie.clear()}delete(e,t=!0){const{path:i,ignoreCase:r}=this.normalize(e);return this.trie.delete(i,r,t)}get(e){const{path:t,ignoreCase:i}=this.normalize(e);return this.trie.get(t,i)}getChildren(e){const{path:t,ignoreCase:i}=this.normalize(e);return this.trie.getChildren(t,i)}getClosest(e,t,i){const{path:r,ignoreCase:s}=this.normalize(e);return this.trie.getClosest(r,t,i,s)}getDescendants(e,t){if(null==e)return this.trie.getDescendants();const{path:i,ignoreCase:r}=this.normalize(e);return this.trie.getDescendants(i,t,r)}has(e){const{path:t,ignoreCase:i}=this.normalize(e);return this.trie.has(t,i)}set(e,t){const{path:i,ignoreCase:r}=this.normalize(e);return this.trie.set(i,t,r)}}class PathNode{constructor(e){this.path=e}value;children}class PathTrie{constructor(e=n){this.normalize=e,this.root=new PathNode("")}root;clear(){this.root.children=void 0}delete(e,t,i=!0){let s,o;e=this.normalize(e),t=t??!r.IJ;for(const i of e.split("/")){const e=(s??this.root).children?.get(t?i.toLowerCase():i);if(null==e)return!1;o=s??this.root,s=e}return!!s?.value&&(i&&a(s.value),s.value=void 0,null!=s.children&&0!==s.children.size||null==o?.children||(o.children.delete(t?s.path.toLowerCase():s.path),0===o.children.size&&(o.children=void 0)),!0)}get(e,t){return this.getCore(e,t)}getCore(e,t){let i;e=this.normalize(e),t=t??!r.IJ;for(const r of e.split("/")){const e=(i??this.root).children?.get(t?r.toLowerCase():r);if(null==e)return;i=e}return i?.value}getChildren(e,t){let i;if(e=this.normalize(e),t=t??!r.IJ,e)for(const r of e.split("/")){const e=(i??this.root).children?.get(t?r.toLowerCase():r);if(null==e)return[];i=e}else i=this.root;return null==i?.children?[]:[...(0,s.DZ)(i.children.values(),(e=>e.value||void 0))]}getClosest(e,t,i,s){let o,n;e=this.normalize(e),s=s??!r.IJ;for(const t of e.split("/")){!o?.value||i&&!i?.(o.value)||(n=o);const e=(o??this.root).children?.get(s?t.toLowerCase():t);if(null==e)break;o=e}return t||!o?.value||i&&!i?.(o.value)?n?.value:o.value}*getDescendants(e,t,i){e=e?this.normalize(e):"",i=i??!r.IJ;let s,o="";if(e)for(const t of e.split("/")){const e=(s??this.root).children?.get(i?t.toLowerCase():t);if(null==e)return;s=e,o+=`${e.path}/`}else s=this.root;null!=s?.children&&(yield*function*e(i,r,s){for(const o of i.values()){const i=r?`${r}/${o.path}`:o.path;!o.value||t&&!t?.(o.value)||(yield o.value),null!=o.children&&(yield*e(o.children,i,s))}}(s.children,"",o))}has(e,t){return null!=this.getCore(e,t)}set(e,t,i){e=this.normalize(e),i=i??!r.IJ;let s=this.root;for(const t of e.split("/")){const e=i?t.toLowerCase():t;let r=s.children?.get(e);null==r&&(null==s.children&&(s.children=new Map),r=new PathNode(t),s.children.set(e,r)),s=r}const o=null==s.value;return o||s.value===t||a(s.value),s.value=t,o}}function a(e){null!=e&&"object"==typeof e&&"dispose"in e&&"function"==typeof e.dispose&&e.dispose()}class VisitedPathNode{constructor(e){this.path=e}children}class VisitedPathsTrie{constructor(e=n){this.normalize=e,this.root=new VisitedPathNode("")}root;clear(){this.root.children=void 0}has(e,t){let i;e=this.normalize(e),t=t??!r.IJ;for(const r of e.split("/")){const e=(i??this.root).children?.get(t?r.toLowerCase():r);if(null==e)return!1;i=e}return null!=i}set(e,t){e=this.normalize(e),t=t??!r.IJ;let i=this.root;for(const r of e.split("/")){const e=t?r.toLowerCase():r;let s=i.children?.get(e);null==s&&(null==i.children&&(i.children=new Map),s=new VisitedPathNode(r),i.children.set(e,s)),i=s}}}},2509:(e,t,i)=>{i.d(t,{$S:()=>w,$_:()=>p,$o:()=>v,GC:()=>y,GR:()=>d,JM:()=>f,PH:()=>C,_L:()=>S,aW:()=>m,bM:()=>A,gn:()=>D,hE:()=>g,ic:()=>P,lN:()=>k,pt:()=>b,s5:()=>u});var r=i(9496),s=i(5255),o=i(7462),n=i(9529),a=i(5148),c=i(4336),l=i(3700),h=i(4550);function u(e){const t=e.toString();return r.workspace.textDocuments.find((e=>e.uri.toString()===t))}async function d(e,t){const i=function(e){const t=r.window.activeTextEditor,i=e.toString();for(const e of[...null!=t?[t]:[],...r.window.visibleTextEditors])if(e.document.uri.toString()===i&&null!=e?.viewColumn)return e}(e);return null!=i?(t?.preserveFocus||await r.window.showTextDocument(i.document,{...t,viewColumn:i.viewColumn}),i):A(e,{viewColumn:r.window.activeTextEditor?.viewColumn,...t})}function p(e){const t=new Map(e.map((e=>[e.toString(),e])));for(const e of r.window.visibleTextEditors)null!=e?.viewColumn&&t.delete(e.document.uri.toString());for(const e of t.values())(0,n.dO)("vscode.open",e,{background:!0,preview:!1})}function m(e){const t=r.window.activeTextEditor;return null!=t&&t.document===e?t:void 0}function g(){return!a.D.get("advanced.quickPick.closeOnFocusOut")}function f(e){if(0===r.window.visibleTextEditors.length)return!1;if(null==e)return r.window.visibleTextEditors.some((e=>C(e)));const t=e.toString();return r.window.visibleTextEditors.some((e=>e.document.uri.toString()===t&&C(e)))}function w(e){const t=r.window.activeTextEditor;return null!=t&&t.document===e}function v(e){return e.kind===r.ColorThemeKind.Dark||e.kind===r.ColorThemeKind.HighContrast}function y(e){return e.kind===r.ColorThemeKind.Light||e.kind===r.ColorThemeKind.HighContrastLight}function b(e){return e.scheme===s.sN.Virtual||e.scheme===s.sN.GitHub}function C(e){const t=e.document.uri.scheme;return t!==s.sN.DebugConsole&&t!==s.sN.Output&&t!==s.sN.Terminal}async function A(e,t={}){const{rethrow:i,...a}=t;try{if((0,o.uy)(e)&&(e=e.documentUri()),e.scheme===s.sN.GitLens&&s.ZY[(0,l.DZ)(e.fsPath)])return void await(0,n.dO)("vscode.open",e);const t=await r.workspace.openTextDocument(e);return r.window.showTextDocument(t,{preserveFocus:!1,preview:!0,viewColumn:r.ViewColumn.Active,...a})}catch(t){if((t?.toString()??"").includes("File seems to be binary and cannot be opened as text"))return void await(0,n.dO)("vscode.open",e);if(i)throw t;return void c.Yd.error(t,"openEditor")}}async function k(e,t,i,s=!0){s&&null==r.window.tabGroups.activeTabGroup.activeTab&&(s=!1),await(0,n.dO)("workbench.action.openWalkthrough",{category:`${e}#${t}`,step:i?`${e}#${t}#${i}`:void 0},s)}function P(e,t={location:"currentWindow"}){if("addToWorkspace"!==t?.location)(0,n.dO)("vscode.openFolder",e,{forceNewWindow:"newWindow"===t?.location});else{const i=r.workspace.workspaceFolders?.length??0;r.workspace.updateWorkspaceFolders(i,0,{uri:e,name:t?.name})}}function S(){let e;switch(r.env.appName){case"Visual Studio Code - Insiders":e="code-insiders --wait --reuse-window";break;case"Visual Studio Code - Exploration":e="code-exploration --wait --reuse-window";break;case"VSCodium":e="codium --wait --reuse-window";break;default:e="code --wait --reuse-window"}return e}function D(e){return"input-prompt-links"===e&&(0,h.L5)(r.version,">= 1.76")}},4550:(e,t,i)=>{i.d(t,{L5:()=>n,mL:()=>o,qu:()=>s});var r=i(4627);function s(e,t){return"string"==typeof e&&(e=o(e)),"string"==typeof t&&(t=o(t)),e.major>t.major?1:e.major<t.major?-1:e.minor>t.minor?1:e.minor<t.minor?-1:e.patch>t.patch?1:e.patch<t.patch?-1:void 0===e.pre&&void 0!==t.pre?1:void 0!==e.pre&&void 0===t.pre?-1:void 0!==e.pre&&void 0!==t.pre?(0,r.zY)(e.pre,t.pre):0}function o(e){const[t,i]=e.split("-"),[r,s,o]=t.split(".");return function(e,t,i,r){return{major:"string"==typeof e?parseInt(e,10):e,minor:"string"==typeof t?parseInt(t,10):t,patch:null==i?0:"string"==typeof i?parseInt(i,10):i,pre:r}}(r,s,o,i)}function n(e,t){if(null==e)return!1;const[i,r]=t.split(" ");if("="===i)return 0===s(e,r);if(">"===i)return s(e,r)>0;if(">="===i)return s(e,r)>=0;if("<"===i)return s(e,r)<0;if("<="===i)return s(e,r)<=0;throw new Error(`Unknown operator: ${i}`)}},9701:(e,t,i)=>{function r(e){return null!=e&&("webview"in e&&null!=e.webview)}function s(e){return null!=e&&("webview"in e&&null!=e.webview&&"webviewItem"in e)}function o(e){return null!=e&&("webview"in e&&null!=e.webview&&"webviewItemGroup"in e)}function n(e){return JSON.stringify(e)}i.d(t,{BH:()=>n,dH:()=>o,s4:()=>r,tM:()=>s})},6700:(e,t,i)=>{i.d(t,{p:()=>GitDocumentState,r:()=>GitDocumentTracker});var r=i(9496),s=i(7462),o=i(3646),n=i(5148),a=i(2061),c=i(4241),l=i(2185),h=i(9796),u=i(3105),d=i(2509),p=i(439),m=i(4336);class TrackedDocument{constructor(e,t,i,r){this.document=e,this.dirty=t,this._eventDelegates=i,this.container=r}static async create(e,t,i,r){const s=new TrackedDocument(e,t,i,r);return await s.initialize(),s}_onDidBlameStateChange=new r.EventEmitter;get onDidBlameStateChange(){return this._onDidBlameStateChange.event}state;_disposable;_disposed=!1;_uri;dispose(){this.state=void 0,this._disposed=!0,this._disposable?.dispose()}initializing=!0;async initialize(){const e=this.document.uri;this._uri=await s.YY.fromUri(e),this._disposed||await this.update(),this.initializing=!1}_forceDirtyStateChangeOnNextDocumentChange=!1;get forceDirtyStateChangeOnNextDocumentChange(){return this._forceDirtyStateChangeOnNextDocumentChange}_hasRemotes=!1;get hasRemotes(){return this._hasRemotes}get isBlameable(){return!this._blameFailed&&this._isTracked}_isDirtyIdle=!1;get isDirtyIdle(){return this._isDirtyIdle}set isDirtyIdle(e){this._isDirtyIdle=e}get isRevision(){return null!=this._uri&&(Boolean(this._uri.sha)&&this._uri.sha!==p.Ii)}_isTracked=!1;get isTracked(){return this._isTracked}get lineCount(){return this.document.lineCount}get uri(){return this._uri}async activate(){this._requiresUpdate&&await this.update(),(0,a.v)("gitlens:activeFileStatus",this.getStatus())}is(e){return e===this.document}_updateDebounced;reset(e){this._requiresUpdate=!0,this._blameFailed=!1,this._isDirtyIdle=!1,null!=this.state&&(this.state=void 0,m.Yd.log(`Reset state for '${this.document.uri.toString(!0)}', reason=${e}`)),"repository"===e&&(0,d.$S)(this.document)&&(null==this._updateDebounced&&(this._updateDebounced=(0,h.Ds)(this.update.bind(this),250)),this._updateDebounced())}_blameFailed=!1;setBlameFailure(){const e=this.isBlameable;this._blameFailed=!0,e&&(0,d.$S)(this.document)&&this.update({forceBlameChange:!0})}resetForceDirtyStateChangeOnNextDocumentChange(){this._forceDirtyStateChangeOnNextDocumentChange=!1}setForceDirtyStateChangeOnNextDocumentChange(){this._forceDirtyStateChangeOnNextDocumentChange=!0}_requiresUpdate=!0;async update({forceBlameChange:e}={}){if(this._requiresUpdate=!1,this._disposed||null==this._uri)return this._hasRemotes=!1,void(this._isTracked=!1);this._isDirtyIdle=!1;const t=(0,d.aW)(this.document),i=e?void 0:this.isBlameable,r=this.container.git.getRepository(this._uri);if(null==r?(this._isTracked=!1,this._hasRemotes=!1):[this._isTracked,this._hasRemotes]=await Promise.all([this.container.git.isTracked(this._uri),r.hasRemotes()]),null!=t){const e=this.isBlameable;if((0,a.v)("gitlens:activeFileStatus",this.getStatus()),!this.initializing&&i!==e){const i={editor:t,document:this,blameable:e};this._onDidBlameStateChange.fire(i),this._eventDelegates.onDidBlameStateChange(i)}}}getStatus(){let e="";return this.isTracked&&(e+="tracked|"),this.isBlameable&&(e+="blameable|"),this.isRevision&&(e+="revision|"),this.hasRemotes&&(e+="remotes|"),e||void 0}}var g=Object.defineProperty,f=Object.getOwnPropertyDescriptor;class DocumentTracker{constructor(e){this.container=e,this._disposable=r.Disposable.from((0,l.IH)(e.onReady)(this.onReady,this),n.D.onDidChange(this.onConfigurationChanged,this),r.window.onDidChangeActiveTextEditor(this.onActiveTextEditorChanged,this),r.workspace.onDidChangeTextDocument((0,h.Ds)(this.onTextDocumentChanged,50),this),r.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this),r.workspace.onDidSaveTextDocument(this.onTextDocumentSaved,this),this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),this.container.git.onDidChangeRepository(this.onRepositoryChanged,this)),this._dirtyIdleTriggerDelay=n.D.get("advanced.blame.delayAfterEdit")}_onDidChangeBlameState=new r.EventEmitter;get onDidChangeBlameState(){return this._onDidChangeBlameState.event}_onDidChangeContent=new r.EventEmitter;get onDidChangeContent(){return this._onDidChangeContent.event}_onDidChangeDirtyState=new r.EventEmitter;get onDidChangeDirtyState(){return this._onDidChangeDirtyState.event}_onDidTriggerDirtyIdle=new r.EventEmitter;get onDidTriggerDirtyIdle(){return this._onDidTriggerDirtyIdle.event}_dirtyIdleTriggerDelay;_disposable;_documentMap=new Map;dispose(){this._disposable.dispose(),this.clear()}onReady(){this.onConfigurationChanged(),this.onActiveTextEditorChanged(r.window.activeTextEditor)}_timer;onActiveTextEditorChanged(e){if(null!=e&&!(0,d.PH)(e))return;if(null!=this._timer&&(clearTimeout(this._timer),this._timer=void 0),null==e)return void(this._timer=setTimeout((()=>{this._timer=void 0,(0,a.v)("gitlens:activeFileStatus",void 0)}),250));const t=this._documentMap.get(e.document);null==t?this.addCore(e.document):t.then((e=>e.activate()),(()=>{}))}onConfigurationChanged(e){null!=e&&(n.D.changed(e,"blame.ignoreWhitespace")||n.D.changed(e,"advanced.caching.enabled"))&&this.reset("config"),n.D.changed(e,"advanced.blame.delayAfterEdit")&&(this._dirtyIdleTriggerDelay=n.D.get("advanced.blame.delayAfterEdit"),this._dirtyIdleTriggeredDebounced=void 0)}onRepositoriesChanged(e){this.reset("repository",e.added.length?new Set(e.added.map((e=>e.path))):void 0,e.removed.length?new Set(e.removed.map((e=>e.path))):void 0)}onRepositoryChanged(e){e.changed(o.I6.Index,o.I6.Heads,o.I6.Status,o.I6.Unknown,o.du.Any)&&this.reset("repository",new Set([e.repository.path]))}async onTextDocumentChanged(e){const{scheme:t}=e.document.uri;if(!this.container.git.supportedSchemes.has(t))return;const i=await(this._documentMap.get(e.document)??this.addCore(e.document));i.reset("document");const s=e.document.isDirty,o=r.window.activeTextEditor;null!=this._dirtyIdleTriggeredDebounced&&(s?this._dirtyIdleTriggeredDebounced({editor:o,document:i}):this._dirtyIdleTriggeredDebounced.cancel()),o?.document===e.document&&this._onDidChangeContent.fire({editor:o,document:i,contentChanges:e.contentChanges}),(i.forceDirtyStateChangeOnNextDocumentChange||i.dirty!==s)&&(i.resetForceDirtyStateChangeOnNextDocumentChange(),i.dirty=s,null!=o&&o.document===e.document&&this.fireDocumentDirtyStateChanged({editor:o,document:i,dirty:i.dirty}))}onTextDocumentClosed(e){this.remove(e)}async onTextDocumentSaved(e){const t=this._documentMap.get(e);null==t?(0,d.$S)(e)&&this.addCore(e):(await t).update({forceBlameChange:!0})}async add(e){let t;if((0,s.uy)(e))try{t=await r.workspace.openTextDocument(e.documentUri())}catch(i){const s=i?.toString()??"";if(r.env.language.startsWith("en"))if(s.includes("File seems to be binary and cannot be opened as text"))t=new BinaryTextDocument(e);else{if(!(s.includes("File not found")||s.includes("Unable to read file")||s.includes("Unable to resolve non-existing file")))throw i;t=new MissingRevisionTextDocument(e)}else{if(!s.includes("cannot open"))throw i;t=new MissingRevisionTextDocument(e)}}else t=e instanceof r.Uri?await r.workspace.openTextDocument(e):e;return this.addCore(t)}async addCore(e){const t=TrackedDocument.create(e,!1,{onDidBlameStateChange:e=>this._onDidChangeBlameState.fire(e)},this.container);return this._documentMap.set(e,t),t}async clear(){for(const e of this._documentMap.values())(await e).dispose();this._documentMap.clear()}get(e){if(e instanceof r.Uri){const t=(0,d.s5)(e);if(null==t)return;e=t}return this._documentMap.get(e)}async getOrAdd(e){e instanceof r.Uri&&(e=(0,d.s5)(e)??e);return this.get(e)??this.add(e)}has(e){if(e instanceof r.Uri){const t=(0,d.s5)(e);if(null==t)return!1;e=t}return this._documentMap.has(e)}async remove(e,t){let i;null!=t&&(i=this._documentMap.get(e)),this._documentMap.delete(e),(t??await i)?.dispose()}_dirtyIdleTriggeredDebounced;_dirtyStateChangedDebounced;fireDocumentDirtyStateChanged(e){if(e.dirty)return queueMicrotask((()=>{this._dirtyStateChangedDebounced?.cancel(),r.window.activeTextEditor===e.editor&&this._onDidChangeDirtyState.fire(e)})),void(this._dirtyIdleTriggerDelay>0&&(null==this._dirtyIdleTriggeredDebounced&&(this._dirtyIdleTriggeredDebounced=(0,h.Ds)((e=>{this._dirtyIdleTriggeredDebounced?.pending()||(e.document.isDirtyIdle=!0,this._onDidTriggerDirtyIdle.fire(e))}),this._dirtyIdleTriggerDelay)),this._dirtyIdleTriggeredDebounced({editor:e.editor,document:e.document})));null==this._dirtyStateChangedDebounced&&(this._dirtyStateChangedDebounced=(0,h.Ds)((e=>{r.window.activeTextEditor===e.editor&&this._onDidChangeDirtyState.fire(e)}),250)),this._dirtyStateChangedDebounced(e)}reset(e,t,i){Promise.allSettled((0,u.UI)((0,u.hX)(this._documentMap,(([e])=>"string"==typeof e)),(async([,r])=>{const s=await r;i?.has(s.uri.repoPath)?this.remove(s.document,s):(null==t||t.has(s.uri.repoPath))&&s.reset(e)})))}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?f(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&g(t,i,o)})([(0,c.fF)({args:{1:e=>null!=e?(0,u.v_)(e,","):"",2:e=>null!=e?(0,u.v_)(e,","):""}})],DocumentTracker.prototype,"reset",1);class EmptyTextDocument{constructor(e){this.gitUri=e,this.uri=e.documentUri(),this.eol=r.EndOfLine.LF,this.fileName=this.uri.fsPath,this.isClosed=!1,this.isDirty=!1,this.isUntitled=!1,this.languageId="",this.lineCount=0,this.version=0}eol;fileName;isClosed;isDirty;isUntitled;languageId;lineCount;uri;version;getText(e){throw new Error("Method not supported.")}getWordRangeAtPosition(e,t){throw new Error("Method not supported.")}lineAt(e){throw new Error("Method not supported.")}offsetAt(e){throw new Error("Method not supported.")}positionAt(e){throw new Error("Method not supported.")}save(){throw new Error("Method not supported.")}validatePosition(e){throw new Error("Method not supported.")}validateRange(e){throw new Error("Method not supported.")}}class BinaryTextDocument extends EmptyTextDocument{}class MissingRevisionTextDocument extends EmptyTextDocument{}class GitDocumentState{blameCache=new Map;diffCache=new Map;logCache=new Map;clearBlame(e){null!=e?this.blameCache.delete(e):this.blameCache.clear()}clearDiff(e){null!=e?this.diffCache.delete(e):this.diffCache.clear()}clearLog(e){null!=e?this.logCache.delete(e):this.logCache.clear()}getBlame(e){return this.blameCache.get(e)}getDiff(e){return this.diffCache.get(e)}getLog(e){return this.logCache.get(e)}setBlame(e,t){null!=t?this.blameCache.set(e,t):this.blameCache.delete(e)}setDiff(e,t){null!=t?this.diffCache.set(e,t):this.diffCache.delete(e)}setLog(e,t){null!=t?this.logCache.set(e,t):this.logCache.delete(e)}}class GitDocumentTracker extends DocumentTracker{async resetCache(e,t){const i=this.get(e);if(null!=i)switch(t){case"blame":(await i).state?.clearBlame();break;case"diff":(await i).state?.clearDiff();break;case"log":(await i).state?.clearLog()}}}},4043:(e,t,i)=>{i.d(t,{$k:()=>s,$x:()=>o,WA:()=>c,_n:()=>r,eT:()=>l,gn:()=>h,lX:()=>n,mg:()=>a});var r=(e=>(e.Branch="b",e.Commit="c",e.Comparison="compare",e.Repository="r",e.Tag="t",e.Workspace="workspace",e))(r||{});function s(e){switch(e){case"b":return"Branch";case"c":return"Commit";case"compare":return"Comparison";case"r":return"Repository";case"t":return"Tag";case"workspace":return"Workspace";default:return"Unknown"}}function o(e){switch(e){case"branch":return"b";case"revision":return"c";case"tag":return"t";default:return"r"}}function n(e){const[,t,i,r,s,...o]=e.path.split("/");if("link"!==t)return;const n=new URLSearchParams(e.query);switch(i){case"r":{let e=n.get("url")??void 0;null!=e&&(e=decodeURIComponent(e));let t,i,a,c=n.get("path")??void 0;if(null!=c&&(c=decodeURIComponent(c)),!e&&!c)return;if(null==s)return{type:"r",mainId:r,remoteUrl:e,repoPath:c};if(null==o||0===o.length)return;const l=o.join("/");if("compare"===s){const e=l.split(/(\.\.\.|\.\.)/);if(3!==e.length)return;t=e[0],i=e[2],a=n.get("prRepoUrl")??void 0,null!=a&&(a=decodeURIComponent(a))}else t=l;return{type:s,mainId:r,remoteUrl:e,repoPath:c,targetId:t,secondaryTargetId:i,secondaryRemoteUrl:a}}case"workspace":return{type:"workspace",mainId:r};default:return}}var a=(e=>(e[e.Idle=0]="Idle",e[e.TypeMatch=1]="TypeMatch",e[e.RepoMatch=2]="RepoMatch",e[e.CloneOrAddRepo=3]="CloneOrAddRepo",e[e.OpeningRepo=4]="OpeningRepo",e[e.AddedRepoMatch=5]="AddedRepoMatch",e[e.RemoteMatch=6]="RemoteMatch",e[e.AddRemote=7]="AddRemote",e[e.TargetMatch=8]="TargetMatch",e[e.Fetch=9]="Fetch",e[e.FetchedTargetMatch=10]="FetchedTargetMatch",e[e.OpenGraph=11]="OpenGraph",e[e.OpenComparison=12]="OpenComparison",e[e.OpenWorkspace=13]="OpenWorkspace",e))(a||{}),c=(e=>(e[e.DeepLinkEventFired=0]="DeepLinkEventFired",e[e.DeepLinkCancelled=1]="DeepLinkCancelled",e[e.DeepLinkResolved=2]="DeepLinkResolved",e[e.DeepLinkStored=3]="DeepLinkStored",e[e.DeepLinkErrored=4]="DeepLinkErrored",e[e.LinkIsRepoType=5]="LinkIsRepoType",e[e.LinkIsWorkspaceType=6]="LinkIsWorkspaceType",e[e.OpenRepo=7]="OpenRepo",e[e.RepoMatched=8]="RepoMatched",e[e.RepoMatchedInLocalMapping=9]="RepoMatchedInLocalMapping",e[e.RepoMatchFailed=10]="RepoMatchFailed",e[e.RepoAdded=11]="RepoAdded",e[e.RepoOpened=12]="RepoOpened",e[e.RemoteMatched=13]="RemoteMatched",e[e.RemoteMatchFailed=14]="RemoteMatchFailed",e[e.RemoteMatchUnneeded=15]="RemoteMatchUnneeded",e[e.RemoteAdded=16]="RemoteAdded",e[e.TargetMatched=17]="TargetMatched",e[e.TargetsMatched=18]="TargetsMatched",e[e.TargetMatchFailed=19]="TargetMatchFailed",e[e.TargetFetched=20]="TargetFetched",e))(c||{});const l={0:{0:1,1:0},1:{4:0,1:0,5:2,6:13},2:{4:0,8:6,9:3,10:3},3:{7:4,12:6,4:0,1:0,3:0},4:{11:5,4:0,1:0},5:{8:6,4:0},6:{4:0,13:8,14:7,15:8},7:{16:8,4:0,1:0},8:{4:0,17:11,18:12,19:9},9:{20:10,4:0,1:0},10:{17:11,18:12,4:0},11:{2:0,4:0},12:{2:0,4:0},13:{2:0,4:0}},h={0:{message:"Done.",increment:100},1:{message:"Matching link type...",increment:5},2:{message:"Finding a matching repository...",increment:10},3:{message:"Adding repository...",increment:20},4:{message:"Opening repository...",increment:30},5:{message:"Finding a matching repository...",increment:40},6:{message:"Finding a matching remote...",increment:50},7:{message:"Adding remote...",increment:60},8:{message:"finding a matching target...",increment:70},9:{message:"Fetching...",increment:80},10:{message:"Finding a matching target...",increment:90},11:{message:"Opening graph...",increment:95},12:{message:"Opening comparison...",increment:95},13:{message:"Opening workspace...",increment:95}}},2610:(e,t,i)=>{i.d(t,{Z:()=>AutolinkedItemNode});var r=i(9496),s=i(7462),o=i(8452),n=i(7512),a=i(7469),c=i(6922);class AutolinkedItemNode extends c.Re{constructor(e,t,i,r,o){super(s.YY.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.item=r,this.enrichedItem=o,this._uniqueId=(0,c.tO)(`autolink+${r.id}`,this.context)}get id(){return this._uniqueId}toClipboard(){return this.item.url}getChildren(){return[]}getTreeItem(){const e=this.enrichedItem,t=(0,a.tI)(e);if(t&&e.then((e=>{this.enrichedItem=e,this.view.triggerNodeChange(this)})),t||null==e){const e=this.item,{provider:i}=e,s=new r.TreeItem(e.description??`Autolink ${e.prefix}${e.id}`,r.TreeItemCollapsibleState.None);return s.description=i?.name??"Custom",s.iconPath=new r.ThemeIcon(t?"loading~spin":null==e.type?"link":"pullrequest"===e.type?"git-pull-request":"issues"),s.contextValue=c.Td.AutolinkedItem,s.tooltip=new r.MarkdownString(`${e.description?`Autolinked ${e.description}`:`${null==e.type?"Autolinked":"pullrequest"===e.type?"Autolinked Pull Request":"Autolinked Issue"} ${e.prefix}${e.id}`} \\\n[${e.url}](${e.url}${null!=e.title?` "${e.title}"`:""})`),s}const i=(0,n.Zh)(e.closedDate??e.date),s=new r.TreeItem(`${e.id}: ${e.title}`,r.TreeItemCollapsibleState.None);s.description=i,s.iconPath=(0,o.xX)(e),s.contextValue="pullrequest"===e.type?c.Td.PullRequest:c.Td.AutolinkedIssue;const l=` "Open ${"pullrequest"===e.type?"Pull Request":"Issue"} \\#${e.id} on ${e.provider.name}"`,h=new r.MarkdownString(`${(0,o.sy)(e)} [**${e.title.trim()}**](${e.url}${l}) \\\n[#${e.id}](${e.url}${l}) was ${e.closed?"closed":"opened"} ${i}`,!0);return h.supportHtml=!0,h.isTrusted=!0,s.tooltip=h,s}}},2601:(e,t,i)=>{i.d(t,{R:()=>CommitFileNode});var r=i(9496),s=i(5255),o=i(6373),n=i(7462),a=i(7881),c=i(3700),l=i(6922);class CommitFileNode extends l.RW{constructor(e,t,i,r,s={}){super(n.YY.fromFile(i,r.repoPath,r.sha),e,t,i),this.commit=r,this._options=s,this.updateContext({commit:r,file:i}),this._uniqueId=(0,l.tO)("commit-file",this.context)}get id(){return this._uniqueId}toClipboard(){return this.file.path}get priority(){return 0}get ref(){return this.commit}getChildren(){return[]}async getTreeItem(){if(null==this.commit.file){const e=await this.commit.getCommitForFile(this.file);if(null==e){const e=await this.view.container.git.getLogForFile(this.repoPath,this.file.path,{limit:2,ref:this.commit.sha});null!=e&&(this.commit=e.commits.get(this.commit.sha)??this.commit)}else this.commit=e}const e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.None);if(e.id=this.id,e.contextValue=this.contextValue,e.description=this.description,"type"===this.view.config.files.icon)e.resourceUri=r.Uri.from({scheme:s.sN.Git,authority:"gitlens-view",path:this.uri.path,query:JSON.stringify({path:this.uri.fsPath,ref:this.uri.sha,decoration:`gitlens-view://commit-file/status/${this.file.status}`})});else{e.resourceUri=r.Uri.parse(`gitlens-view://commit-file/status/${this.file.status}`);const t=(0,a.tK)(this.file.status);e.iconPath={dark:this.view.container.context.asAbsolutePath((0,c.RQ)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,c.RQ)("images","light",t))}}return e.tooltip=this.tooltip,e.command=this.getCommand(),this._label=void 0,e}get contextValue(){return this.commit.isUncommitted?this.commit.isUncommittedStaged?`${l.Td.File}+staged`:`${l.Td.File}+unstaged`:`${l.Td.File}+committed${this._options.branch?.current?"+current":""}${this._options.branch?.current&&this._options.branch.sha===this.commit.ref?"+HEAD":""}${this._options.unpublished?"+unpublished":""}`}get description(){return o.o.fromTemplate(this.view.config.formats.files.description,this.file,{relativePath:this.relativePath})}_folderName;get folderName(){return void 0===this._folderName&&(this._folderName=(0,c.Fd)(this.uri.relativePath)),this._folderName}_label;get label(){return void 0===this._label&&(this._label=o.o.fromTemplate(this.view.config.formats.files.label,this.file,{relativePath:this.relativePath})),this._label}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0}get tooltip(){const e=o.o.fromTemplate("${file}${'&nbsp;&nbsp;•&nbsp;&nbsp;'changesDetail}${'&nbsp;\\\n'directory}&nbsp;\n\n${status}${ (originalPath)}",this.file),t=new r.MarkdownString(e,!0);return t.supportHtml=!0,t.isTrusted=!0,t}getCommand(){let e;e=this.commit.lines.length?this.commit.lines[0].line-1:this._options.selection?.active.line??0;const t={commit:this.commit,uri:n.YY.fromFile(this.file,this.commit.repoPath),line:e,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:s.Gh.DiffWithPrevious,arguments:[void 0,t]}}}},2925:(e,t,i)=>{i.d(t,{D:()=>CommitNode});var r=i(9496),s=i(5255),o=i(9338),n=i(2800),a=i(2226),c=i(5148),l=i(2061),h=i(5432),u=i(3700),d=i(7469),p=i(4627),m=i(2601),g=i(4481),f=i(2060),w=i(6922),v=Object.defineProperty,y=Object.getOwnPropertyDescriptor;class CommitNode extends w.bT{constructor(e,t,i,r,s,o,n={}){super(i.getGitUri(),e,t),this.commit=i,this.unpublished=r,this.branch=s,this.getBranchAndTagTips=o,this._options=n,this.updateContext({commit:i}),this._uniqueId=(0,w.tO)("commit",this.context)}get id(){return this._uniqueId}toClipboard(){return`${this.commit.shortSha}: ${this.commit.summary}`}get isTip(){return(this.branch?.current&&this.branch.sha===this.commit.ref)??!1}get ref(){return this.commit}_children;async getChildren(){if(null==this._children){const e=this.commit;let t,i,r=[];if("tags"!==this.view.type&&!this.unpublished&&(0,l.fw)("gitlens:hasConnectedRemotes")&&this.view.config.pullRequests.enabled&&this.view.config.pullRequests.showForCommits&&(i=this.getState("pullRequest"),void 0===i&&void 0===this.getState("pendingPullRequest"))){t=(0,d.PQ)();const i=this.getAssociatedPullRequest(e);queueMicrotask((async()=>{await(t?.promise);let r=!1;const s=setTimeout((()=>{r=!0,this.view.triggerNodeChange(this)}),250),o=await i;clearTimeout(s),null!=o&&null!=this._children&&this._children.unshift(new f.Z(this.view,this,o,e)),(r||null!=o)&&this.view.triggerNodeChange(this)}))}const s=await e.getCommitsForFiles();for(const e of s)r.push(new m.R(this.view,this,e.file,e));if("list"!==this.view.config.files.layout){const e=(0,n.Mo)(r,(e=>e.uri.relativePath.split("/")),((...e)=>(0,u.AH)((0,u.RQ)(...e))),this.view.config.files.compact);r=new g.Y(this.view,this,e,this.repoPath,"",void 0).getChildren()}else r.sort(((e,t)=>(0,p.dm)(e.label,t.label)));null!=i&&r.unshift(new f.Z(this.view,this,i,e)),this._children=r,setTimeout((()=>t?.fulfill()),1)}return this._children}async getTreeItem(){const e=o.i.fromTemplate(this.view.config.formats.commits.label,this.commit,{dateFormat:c.D.get("defaultDateFormat"),getBranchAndTagTips:e=>this.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0}),t=new r.TreeItem(e,this._options.expand?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);t.id=this.id,t.contextValue=`${w.Td.Commit}${this.branch?.current?"+current":""}${this.isTip?"+HEAD":""}${this.unpublished?"+unpublished":""}`,t.description=o.i.fromTemplate(this.view.config.formats.commits.description,this.commit,{dateFormat:c.D.get("defaultDateFormat"),getBranchAndTagTips:e=>this.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0});const i=this.getState("pendingPullRequest");return t.iconPath=null!=i?new r.ThemeIcon("loading~spin"):this.unpublished?new r.ThemeIcon("arrow-up",new r.ThemeColor("gitlens.unpublishedCommitIconColor")):this.view.config.avatars?await this.commit.getAvatarUri({defaultStyle:c.D.get("defaultGravatarsStyle")}):void 0,t}getCommand(){const e={commit:this.commit,uri:this.uri,line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:s.Gh.DiffWithPrevious,arguments:[void 0,e]}}refresh(e){this._children=void 0,e&&this.deleteState()}async resolveTreeItem(e){return null==e.tooltip&&(e.tooltip=await this.getTooltip()),e}async getAssociatedPullRequest(e,t){let i=this.getState("pullRequest");if(void 0!==i)return Promise.resolve(i??void 0);let r=this.getState("pendingPullRequest");return r??(r=e.getAssociatedPullRequest(t),this.storeState("pendingPullRequest",r),i=await r,this.storeState("pullRequest",i??null),this.deleteState("pendingPullRequest"),i)}async getTooltip(){const[e,t]=await Promise.allSettled([this.view.container.git.getBestRemotesWithProviders(this.commit.repoPath),null==this.commit.message?this.commit.ensureFullDetails():void 0]),i=(0,d.Sb)(e,[]),[s]=i;let n,l;if(s?.hasRichIntegration()){const[e,t]=await Promise.allSettled([(0,a.IN)(this.commit.getEnrichedAutolinks(s)),this.getAssociatedPullRequest(this.commit,s)]);n=(0,d.Sb)(e)?.value,l=(0,d.Sb)(t)}const h=await o.i.fromTemplateAsync(this.getTooltipTemplate(),this.commit,{enrichedAutolinks:n,dateFormat:c.D.get("defaultDateFormat"),getBranchAndTagTips:this.getBranchAndTagTips,messageAutolinks:!0,messageIndent:4,pullRequest:l,outputFormat:"markdown",remotes:i,unpublished:this.unpublished}),u=new r.MarkdownString(h,!0);return u.supportHtml=!0,u.isTrusted=!0,u}getTooltipTemplate(){return this.view.config.formats.commits.tooltip}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?y(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&v(t,i,o)})([(0,h.H)()],CommitNode.prototype,"refresh",1)},21:(e,t,i)=>{i.d(t,{$h:()=>CommandMessageNode,AE:()=>MessageNode,Gd:()=>LoadMoreNode});var r=i(9496),s=i(5255),o=i(7462),n=i(5148),a=i(6922);class MessageNode extends a.Re{constructor(e,t,i,r,s,n,a){super(o.Wj,e,t),this.parent=t,this._message=i,this._description=r,this._tooltip=s,this._iconPath=n,this._contextValue=a}getChildren(){return[]}getTreeItem(){const e=new r.TreeItem(this._message,r.TreeItemCollapsibleState.None);return e.contextValue=this._contextValue??a.Td.Message,e.description=this._description,e.tooltip=this._tooltip,e.iconPath=this._iconPath,e}}class CommandMessageNode extends MessageNode{constructor(e,t,i,r,s,o,n){super(e,t,r,s,o,n),this.parent=t,this._command=i}getTreeItem(){const e=super.getTreeItem();return e instanceof r.TreeItem?(e.command=this._command,e):e.then((e=>(e.command=this._command,e)))}}class PagerNode extends a.Re{constructor(e,t,i,r,s){super(o.Wj,e,t),this.message=i,this.previousNode=r,this.options=s}async loadAll(){const e=await(this.options?.getCount?.())??0;return this.view.loadMoreNodeChildren(this.parent,e>5e3?5e3:0,this.previousNode,this.options?.context)}loadMore(){return this.view.loadMoreNodeChildren(this.parent,this.options?.pageSize??n.D.get("views.pageItemLimit"),this.previousNode,this.options?.context)}getChildren(){return[]}getTreeItem(){const e=new r.TreeItem(this.message,r.TreeItemCollapsibleState.None);return e.contextValue=a.Td.Pager,e.command=this.getCommand(),e}getCommand(){return{title:"Load more",command:"gitlens.views.loadMoreChildren",arguments:[this]}}}class LoadMoreNode extends PagerNode{constructor(e,t,i,r){super(e,t,r?.message??(0===r?.pageSize?`Load all ${s.NE.Space}${s.NE.Dash}${s.NE.Space} this may take a while`:"Load more"),i,r)}}},5538:(e,t,i)=>{i.d(t,{fc:()=>CompareResultsNode,iS:()=>v,k7:()=>C,uL:()=>y,vK:()=>b});var r=i(9496),s=i(3951),o=i(7462),n=i(4321),a=i(5432),c=i(4241),l=i(7469),h=i(4627),u=i(5988),d=i(812),p=i(6922),m=Object.defineProperty,g=Object.getOwnPropertyDescriptor,f=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?g(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&m(t,i,o),o};let w=0;class CompareResultsNode extends p.CF{constructor(e,t,i,r,s,n=0){super(o.YY.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this._ref=r,this._compareWith=s,this._storedAt=n,this._instanceId=w++,this.updateContext({comparisonId:`${r.ref}+${s.ref}+${this._instanceId}`,storedComparisonId:this.getStorageId()}),this._uniqueId=(0,p.tO)("comparison-results",this.context),0===this._storedAt&&(this._storedAt=Date.now(),this.store(!0))}_instanceId;get id(){return this._uniqueId}etag(){return this._storedAt}get order(){return this._storedAt}get ahead(){return{ref1:this._compareWith.ref||"HEAD",ref2:this._ref.ref}}get behind(){return{ref1:this._ref.ref,ref2:this._compareWith.ref||"HEAD"}}get compareRef(){return this._ref}get compareWithRef(){return this._compareWith}subscribe(){return this.view.onDidChangeNodesCheckedState(this.onNodesCheckedStateChanged,this)}onNodesCheckedStateChanged(e){const t=v(this.getStorageId());e.items.some((([e])=>e.id?.startsWith(t)))&&this.store(!0)}dismiss(){this.remove(!0)}_children;async getChildren(){if(null==this._children){const e=this.ahead,t=this.behind,i=await this.view.container.git.getAheadBehindCommitCount(this.repoPath,[(0,n.oI)(t.ref1||"HEAD",t.ref2,"...")]),r=await this.view.container.git.getMergeBase(this.repoPath,t.ref1,t.ref2,{forkPoint:!0})??await this.view.container.git.getMergeBase(this.repoPath,t.ref1,t.ref2);this._children=[new u.J(this.view,this,this.repoPath,"Behind",{query:this.getCommitsQuery((0,n.oI)(t.ref1,t.ref2,"..")),comparison:t,direction:"behind",files:{ref1:""===t.ref1?"":r??t.ref1,ref2:t.ref2,query:this.getBehindFilesQuery.bind(this)}},{description:(0,h._6)("commit",i?.behind??0),expand:!1}),new u.J(this.view,this,this.repoPath,"Ahead",{query:this.getCommitsQuery((0,n.oI)(e.ref1,e.ref2,"..")),comparison:e,direction:"ahead",files:{ref1:r??e.ref1,ref2:e.ref2,query:this.getAheadFilesQuery.bind(this)}},{description:(0,h._6)("commit",i?.ahead??0),expand:!1}),new d.V(this.view,this,this.repoPath,this._compareWith.ref,this._ref.ref,this.getFilesQuery.bind(this),void 0,{expand:!1})]}return this._children}getTreeItem(){let e;if(this.view.container.git.repositoryCount>1){const t=this.repoPath?this.view.container.git.getRepository(this.repoPath):void 0;e=t?.formattedName??this.repoPath}const t=new r.TreeItem(`Comparing ${this._ref.label??(0,n.zL)(this._ref.ref,{strings:{working:"Working Tree"}})} with ${this._compareWith.label??(0,n.zL)(this._compareWith.ref,{strings:{working:"Working Tree"}})}`,r.TreeItemCollapsibleState.Collapsed);return t.id=this.id,t.contextValue=`${p.Td.CompareResults}${""===this._ref.ref?"+working":""}`,t.description=e,t.iconPath=new r.ThemeIcon("compare-changes"),t}async getDiffRefs(){return Promise.resolve([this._compareWith.ref,this._ref.ref])}refresh(e=!1){e&&(this._children=void 0)}async swap(){if(""===this._ref.ref)return void r.window.showErrorMessage("Cannot swap comparisons with the working tree");const e=this.getStorageId(),t=this._ref;this._ref=this._compareWith,this._compareWith=t,await this.replace(e,!0),this._children=void 0,this.view.triggerNodeChange(this.parent),queueMicrotask((()=>this.view.reveal(this,{expand:!0,focus:!0,select:!0})))}async getAheadFilesQuery(){return this.getAheadBehindFilesQuery((0,n.oI)(this._compareWith?.ref||"HEAD",this._ref.ref||"HEAD","..."),""===this._ref.ref)}async getBehindFilesQuery(){return this.getAheadBehindFilesQuery((0,n.oI)(this._ref.ref||"HEAD",this._compareWith.ref||"HEAD","..."),!1)}async getAheadBehindFilesQuery(e,t){const[i,r,s,o]=await Promise.allSettled([this.view.container.git.getDiffStatus(this.repoPath,e),t?this.view.container.git.getDiffStatus(this.repoPath,"HEAD"):void 0,this.view.container.git.getChangedFilesCount(this.repoPath,e),t?this.view.container.git.getChangedFilesCount(this.repoPath,"HEAD"):void 0]);let n=(0,l.Sb)(i)??[],a=(0,l.Sb)(s);if(t){const e=(0,l.Sb)(r);if(null!=e)if(0===n.length)n=e??[];else for(const t of e){const e=n.findIndex((e=>e.path===t.path));-1!==e?n.splice(e,1,t):n.push(t)}const t=(0,l.Sb)(o);null!=t&&(a=null==a?t:{additions:a.additions+t.additions,deletions:a.deletions+t.deletions,changedFiles:n.length,approximated:!0})}return{label:`${(0,h._6)("file",n.length,{zero:"No"})} changed`,files:n,stats:a}}getCommitsQuery(e){const t=this.repoPath;return async i=>{const r=await this.view.container.git.getLog(t,{limit:i,ref:e}),s={log:r,hasMore:r?.hasMore??!0};return s.hasMore&&(s.more=async e=>{s.log=await(s.log?.more?.(e))??s.log,s.hasMore=s.log?.hasMore??!0}),s}}async getFilesQuery(){let e;if(""===this._compareWith.ref)throw new Error("Cannot get files for comparisons of a ref with working tree");e=""===this._ref.ref?this._compareWith.ref:`${this._compareWith.ref}..${this._ref.ref}`;const[t,i]=await Promise.allSettled([this.view.container.git.getDiffStatus(this.repoPath,e),this.view.container.git.getChangedFilesCount(this.repoPath,e)]),r=(0,l.Sb)(t)??[];return{label:`${(0,h._6)("file",r.length,{zero:"No"})} changed`,files:r,stats:(0,l.Sb)(i)}}getStorageId(){return(0,s.FB)(`${this.repoPath}|${this._ref.ref}|${this._compareWith.ref}`,"base64")}remove(e=!1){return this.view.updateStorage(this.getStorageId(),void 0,e)}async replace(e,t=!1){return await this.view.updateStorage(e,void 0,t),this.store(t)}store(e=!1){const t=this.getStorageId(),i=y(this.view,t);return this.view.updateStorage(t,{type:"comparison",timestamp:this._storedAt,path:this.repoPath,ref1:{label:this._ref.label,ref:this._ref.ref},ref2:{label:this._compareWith.label,ref:this._compareWith.ref},checkedFiles:i.length>0?i:void 0},e)}}function v(e){return`${e}|`}function y(e,t){const i=[],s=e.nodeState.get(v(t),"checked");for(const[e,t]of s)t===r.TreeItemCheckboxState.Checked&&i.push(e);return i}function b(e,t){e.nodeState.delete(v(t),"checked")}function C(e,t){if(t?.length)for(const i of t)e.nodeState.storeState(i,"checked",r.TreeItemCheckboxState.Checked,!0)}f([(0,a.H)(),(0,c.fF)()],CompareResultsNode.prototype,"getDiffRefs",1),f([(0,a.H)(),(0,c.fF)()],CompareResultsNode.prototype,"refresh",1),f([(0,c.cM)()],CompareResultsNode.prototype,"swap",1)},9719:(e,t,i)=>{i.d(t,{C:()=>f,m:()=>FileRevisionAsCommitNode});var r=i(9496),s=i(5255),o=i(9338),n=i(6373),a=i(7462),c=i(7881),l=i(2226),h=i(5148),u=i(3700),d=i(7469),p=i(7692),m=i(4167),g=i(6922);class FileRevisionAsCommitNode extends g.RW{constructor(e,t,i,r,s={}){super(a.YY.fromFile(i,r.repoPath,r.sha),e,t,i),this.commit=r,this._options=s}toClipboard(){return`${this.commit.shortSha}: ${this.commit.summary}`}get isTip(){return(this._options.branch?.current&&this._options.branch.sha===this.commit.ref)??!1}get ref(){return this.commit}async getChildren(){if(!this.commit.file?.hasConflicts)return[];const[e,t]=await Promise.allSettled([this.view.container.git.getMergeStatus(this.commit.repoPath),this.view.container.git.getRebaseStatus(this.commit.repoPath)]),i=(0,d.Sb)(e),r=(0,d.Sb)(t);return null==i&&null==r?[]:[new p.l(this.view,this,i??r,this.file),new m.w(this.view,this,i??r,this.file)]}async getTreeItem(){if(null==this.commit.file){const e=await this.commit.getCommitForFile(this.file);if(null==e){const e=await this.view.container.git.getLogForFile(this.repoPath,this.file.path,{limit:2,ref:this.commit.sha});null!=e&&(this.commit=e.commits.get(this.commit.sha)??this.commit)}else this.commit=e}const e=new r.TreeItem(o.i.fromTemplate(this.view.config.formats.commits.label,this.commit,{dateFormat:h.D.get("defaultDateFormat"),getBranchAndTagTips:e=>this._options.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0}),this.commit.file?.hasConflicts?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.None);if(e.contextValue=this.contextValue,e.description=o.i.fromTemplate(this.view.config.formats.commits.description,this.commit,{dateFormat:h.D.get("defaultDateFormat"),getBranchAndTagTips:e=>this._options.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0}),e.resourceUri=r.Uri.parse(`gitlens-view://commit-file/status/${this.file.status}`),!this.commit.isUncommitted&&this.view.config.avatars&&(e.iconPath=this._options.unpublished?new r.ThemeIcon("arrow-up",new r.ThemeColor("gitlens.unpublishedCommitIconColor")):await this.commit.getAvatarUri({defaultStyle:h.D.get("defaultGravatarsStyle")})),null==e.iconPath){const t=(0,c.tK)(this.file.status);e.iconPath={dark:this.view.container.context.asAbsolutePath((0,u.RQ)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,u.RQ)("images","light",t))}}return e.command=this.getCommand(),e}get contextValue(){return this.commit.isUncommitted?this.commit.file?.hasConflicts?`${g.Td.File}+conflicted`:this.commit.isUncommittedStaged?`${g.Td.File}+staged`:`${g.Td.File}+unstaged`:`${g.Td.File}+committed${this._options.branch?.current?"+current":""}${this.isTip?"+HEAD":""}${this._options.unpublished?"+unpublished":""}`}getCommand(){let e;if(e=this.commit.lines.length?this.commit.lines[0].line-1:this._options.selection?.active.line??0,this.commit.file?.hasConflicts)return{title:"Open Changes",command:s.Gh.DiffWith,arguments:[{lhs:{sha:"MERGE_HEAD",uri:a.YY.fromFile(this.file,this.repoPath,void 0,!0)},rhs:{sha:"HEAD",uri:a.YY.fromFile(this.file,this.repoPath)},repoPath:this.repoPath,line:0,showOptions:{preserveFocus:!1,preview:!1}}]};const t={commit:this.commit,uri:a.YY.fromFile(this.file,this.commit.repoPath),line:e,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:s.Gh.DiffWithPrevious,arguments:[void 0,t]}}async resolveTreeItem(e){return null==e.tooltip&&(e.tooltip=await this.getTooltip()),e}async getConflictBaseUri(){if(!this.commit.file?.hasConflicts)return;const e=await this.view.container.git.getMergeBase(this.repoPath,"MERGE_HEAD","HEAD");return a.YY.fromFile(this.file,this.repoPath,e??"HEAD")}async getTooltip(){const e=await f(this.view.container,this.commit,this.file,this.view.config.formats.commits.tooltipWithStatus,{getBranchAndTagTips:this._options.getBranchAndTagTips,unpublished:this._options.unpublished}),t=new r.MarkdownString(e,!0);return t.supportHtml=!0,t.isTrusted=!0,t}}async function f(e,t,i,r,s){const[a,c]=await Promise.allSettled([e.git.getBestRemotesWithProviders(t.repoPath),null==t.message?t.ensureFullDetails():void 0]),u=(0,d.Sb)(a,[]),[p]=u;let m,g;if(p?.hasRichIntegration()){const[e,i]=await Promise.allSettled([(0,l.IN)(t.getEnrichedAutolinks(p)),t.getAssociatedPullRequest(p)]);m=(0,d.Sb)(e)?.value,g=(0,d.Sb)(i)}const f=n.o.fromTemplate("${status}${ (originalPath)}${'&nbsp;&nbsp;•&nbsp;&nbsp;'changesDetail}",i);return o.i.fromTemplateAsync(r.replace("{{slot-status}}",f),t,{enrichedAutolinks:m,dateFormat:h.D.get("defaultDateFormat"),getBranchAndTagTips:s?.getBranchAndTagTips,messageAutolinks:!0,messageIndent:4,pullRequest:g,outputFormat:"markdown",remotes:u,unpublished:s?.unpublished})}},4481:(e,t,i)=>{i.d(t,{Y:()=>FolderNode});var r=i(9496),s=i(7462),o=i(4627),n=i(6922);class FolderNode extends n.Re{constructor(e,t,i,r,o,a,c){super(s.YY.fromRepoPath(r),e,t),this.parent=t,this.root=i,this.repoPath=r,this.folderName=o,this.relativePath=a,this.containsWorkingFiles=c,this._uniqueId=(0,n.tO)(`folder+${a??o}`,this.context)}priority=1;get id(){return this._uniqueId}toClipboard(){return this.folderName}getChildren(){if(void 0===this.root.descendants||void 0===this.root.children)return[];let e;if("list"===FolderNode.getFileNesting(this.view.config.files,this.root.descendants,void 0===this.relativePath))this.root.descendants.forEach((e=>e.relativePath=this.root.relativePath)),e=this.root.descendants;else{e=[];for(const t of this.root.children.values())void 0!==t.value?(t.value.parent=this.folderName?this:this.parent,t.value.relativePath=this.root.relativePath,e.push(t.value)):e.push(new FolderNode(this.view,this.folderName?this:this.parent,t,this.repoPath,t.name,t.relativePath,this.containsWorkingFiles))}return e.sort(((e,t)=>(e instanceof FolderNode?-1:1)-(t instanceof FolderNode?-1:1)||e.priority-t.priority||(0,o.dm)(e.label,t.label))),e}getTreeItem(){const e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.Expanded);return e.id=this.id,e.contextValue=n.Td.Folder,this.containsWorkingFiles&&(e.contextValue+="+working"),e.iconPath=r.ThemeIcon.Folder,e.tooltip=this.label,e}get label(){return this.folderName}static getFileNesting(e,t,i){const r=e.layout||"auto";if("auto"===r){if(i||e.compact){const i=e.threshold||5;if(t.length<=i)return"list"}return"tree"}return r}}},4741:(e,t,i)=>{i.d(t,{E:()=>n});var r=i(21),s=i(6922);const o=[[0,"Less than a week ago"],[7,"Over a week ago"],[25,"Over a month ago"],[77,"Over 3 months ago"]];function*n(e,t,i,{show:n}={show:!0}){if(!t.view.config.showRelativeDateMarkers||!n)return yield*e;let a,c=i??0;const l=Date.now();let h=!0;for(const i of e){if(c<o.length){let[e,n]=o[c];if(void 0===a){const t=new Date(l);a=t.setDate(t.getDate()-e)}const u=new Date(i.commit.committer.date).setUTCHours(0,0,0,0);if(u<=a){for(;c<o.length-1;){[e]=o[c+1];const t=new Date(l);if(u>t.setDate(t.getDate()-e))break;c++,a=void 0,[,n]=o[c]}h||(yield new r.AE(t.view,t,"",n,void 0,void 0,s.Td.DateMarker)),c++,a=void 0}}h=!1,yield i}}},7692:(e,t,i)=>{i.d(t,{l:()=>MergeConflictCurrentChangesNode});var r=i(9496),s=i(5255),o=i(7462),n=i(4321),a=i(9529),c=i(5148),l=i(9719),h=i(6922);class MergeConflictCurrentChangesNode extends h.Re{constructor(e,t,i,r){super(o.YY.fromFile(r,i.repoPath,"HEAD"),e,t),this.parent=t,this.status=i,this.file=r}_commit;async getCommit(){return null==this._commit&&(this._commit=this.view.container.git.getCommit(this.status.repoPath,"HEAD")),this._commit}getChildren(){return[]}async getTreeItem(){const e=await this.getCommit(),t=new r.TreeItem("Current changes",r.TreeItemCollapsibleState.None);return t.contextValue=h.Td.MergeConflictCurrentChanges,t.description=`${(0,n.Wh)(this.status.current,{expand:!1,icon:!1})}${null!=e?` (${(0,n.Wh)(e,{expand:!1,icon:!1})})`:" (HEAD)"}`,t.iconPath=this.view.config.avatars?await(e?.getAvatarUri({defaultStyle:c.D.get("defaultGravatarsStyle")}))??new r.ThemeIcon("diff"):new r.ThemeIcon("diff"),t.command=this.getCommand(),t}getCommand(){return null==this.status.mergeBase?(0,a.j$)("vscode.open","Open Revision",this.view.container.git.getRevisionUri("HEAD",this.file.path,this.status.repoPath)):(0,a.fA)(s.Gh.DiffWith,"Open Changes",{lhs:{sha:this.status.mergeBase,uri:o.YY.fromFile(this.file,this.status.repoPath,void 0,!0),title:`${this.file.path} (merge-base)`},rhs:{sha:"HEAD",uri:o.YY.fromFile(this.file,this.status.repoPath),title:`${this.file.path} (${(0,n.Wh)(this.status.current,{expand:!1,icon:!1})})`},repoPath:this.status.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}})}async resolveTreeItem(e){return null==e.tooltip&&(e.tooltip=await this.getTooltip()),e}async getTooltip(){const e=await this.getCommit(),t=new r.MarkdownString(`Current changes on ${(0,n.Wh)(this.status.current,{label:!1})}\\\n$(file)${s.NE.Space}${this.file.path}`,!0);if(null==e)return t;const i=await(0,l.C)(this.view.container,e,this.file,this.view.config.formats.commits.tooltipWithStatus);return t.appendMarkdown(`\n\n${i}`),t.isTrusted=!0,t}}},4167:(e,t,i)=>{i.d(t,{w:()=>MergeConflictIncomingChangesNode});var r=i(9496),s=i(5255),o=i(7462),n=i(4321),a=i(9529),c=i(5148),l=i(9719),h=i(6922);class MergeConflictIncomingChangesNode extends h.Re{constructor(e,t,i,r){super(o.YY.fromFile(r,i.repoPath,i.HEAD.ref),e,t),this.parent=t,this.status=i,this.file=r}_commit;async getCommit(){if(null==this._commit){const e="rebase"===this.status.type?this.status.steps.current.commit?.ref:this.status.HEAD.ref;if(null==e)return;this._commit=this.view.container.git.getCommit(this.status.repoPath,e)}return this._commit}getChildren(){return[]}async getTreeItem(){const e=await this.getCommit(),t=new r.TreeItem("Incoming changes",r.TreeItemCollapsibleState.None);return t.contextValue=h.Td.MergeConflictIncomingChanges,t.description=`${(0,n.Wh)(this.status.incoming,{expand:!1,icon:!1})}${"rebase"===this.status.type?` (${(0,n.Wh)(this.status.steps.current.commit,{expand:!1,icon:!1})})`:` (${(0,n.Wh)(this.status.HEAD,{expand:!1,icon:!1})})`}`,t.iconPath=this.view.config.avatars?await(e?.getAvatarUri({defaultStyle:c.D.get("defaultGravatarsStyle")}))??new r.ThemeIcon("diff"):new r.ThemeIcon("diff"),t.command=this.getCommand(),t}getCommand(){return null==this.status.mergeBase?(0,a.j$)("vscode.open","Open Revision",this.view.container.git.getRevisionUri(this.status.HEAD.ref,this.file.path,this.status.repoPath)):(0,a.fA)(s.Gh.DiffWith,"Open Changes",{lhs:{sha:this.status.mergeBase,uri:o.YY.fromFile(this.file,this.status.repoPath,void 0,!0),title:`${this.file.path} (merge-base)`},rhs:{sha:this.status.HEAD.ref,uri:o.YY.fromFile(this.file,this.status.repoPath),title:`${this.file.path} (${null!=this.status.incoming?(0,n.Wh)(this.status.incoming,{expand:!1,icon:!1}):"incoming"})`},repoPath:this.status.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}})}async resolveTreeItem(e){return null==e.tooltip&&(e.tooltip=await this.getTooltip()),e}async getTooltip(){const e=await this.getCommit(),t=new r.MarkdownString(`Incoming changes from ${(0,n.Wh)(this.status.incoming,{label:!1})}\\\n$(file)${s.NE.Space}${this.file.path}`,!0);if(null==e)return t.appendMarkdown("rebase"===this.status.type?`\n\n${(0,n.Wh)(this.status.steps.current.commit,{capitalize:!0,label:!1})}`:`\n\n${(0,n.Wh)(this.status.HEAD,{capitalize:!0,label:!1})}`),t;const i=await(0,l.C)(this.view.container,e,this.file,this.view.config.formats.commits.tooltipWithStatus);return t.appendMarkdown(`\n\n${i}`),t.isTrusted=!0,t}}},2060:(e,t,i)=>{i.d(t,{Z:()=>PullRequestNode});var r=i(9496),s=i(7462),o=i(5367),n=i(8452),a=i(6922);class PullRequestNode extends a.Re{constructor(e,t,i,r){let n,c;"string"==typeof r?c=r:(c=r.repoPath,n=r),super(s.YY.fromRepoPath(c),e,t),this.parent=t,this.pullRequest=i,null!=n&&(n instanceof o.XI?this.updateContext({branch:n}):this.updateContext({commit:n})),this._uniqueId=(0,a.tO)("pullrequest",this.context),this.repoPath=c}repoPath;get id(){return this._uniqueId}toClipboard(){return this.pullRequest.url}getChildren(){return[]}getTreeItem(){const e=new r.TreeItem(`#${this.pullRequest.id}: ${this.pullRequest.title}`,r.TreeItemCollapsibleState.None);e.id=this.id,e.contextValue=a.Td.PullRequest,e.description=`${this.pullRequest.state}, ${this.pullRequest.formatDateFromNow()}`,e.iconPath=(0,n.xX)(this.pullRequest);const t=new r.MarkdownString("",!0);t.supportHtml=!0,t.isTrusted=!0,null!=this.context.commit&&t.appendMarkdown(`Commit \`$(git-commit) ${this.context.commit.shortSha}\` was introduced by $(git-pull-request) PR #${this.pullRequest.id}\n\n`);const i=` "Open Pull Request \\#${this.pullRequest.id} on ${this.pullRequest.provider.name}"`;return t.appendMarkdown(`${(0,n.sy)(this.pullRequest)} [**${this.pullRequest.title.trim()}**](${this.pullRequest.url}${i}) \\\n[#${this.pullRequest.id}](${this.pullRequest.url}${i}) by [@${this.pullRequest.author.name}](${this.pullRequest.author.url} "Open @${this.pullRequest.author.name} on ${this.pullRequest.provider.name}") was ${this.pullRequest.state.toLowerCase()} ${this.pullRequest.formatDateFromNow()}`),e.tooltip=t,e}}},5988:(e,t,i)=>{i.d(t,{J:()=>ResultsCommitsNode});var r=i(9496),s=i(7462),o=i(6450),n=i(5148),a=i(5432),c=i(4241),l=i(3105),h=i(7469),u=i(4092),d=i(2226),p=i(2610),m=i(21),g=i(2060),f=i(6922),w=Object.defineProperty,v=Object.getOwnPropertyDescriptor;let y=0;class AutolinkedItemsNode extends f.Re{constructor(e,t,i,r,o){super(s.YY.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.log=r,this.expand=o,this._instanceId=y++,this.updateContext({autolinksId:String(this._instanceId)}),this._uniqueId=(0,f.tO)("autolinks",this.context)}_instanceId;get id(){return this._uniqueId}_children;async getChildren(){if(null==this._children){const e=[...this.log.commits.values()];let t;if(e.length){const i=await this.view.container.git.getBestRemoteWithProvider(this.repoPath),r=e.map((e=>e.message)).join("\n"),[s]=await Promise.allSettled([this.view.container.autolinks.getEnrichedAutolinks(r,i).then((e=>null!=e?(0,d.io)(e,void 0,250):void 0))]),o=(0,h.Sb)(s);o?.size&&(t=[...o.values()].map((([e,t])=>null!=e&&u.i7.is(e?.value)?new g.Z(this.view,this,e.value,this.log.repoPath):new p.Z(this.view,this,this.repoPath,t,e?.value))))}t?.length||(t=[new m.AE(this.view,this,"No autolinked issues or pull requests could be found.")]),this.log.hasMore&&t.push(new m.Gd(this.view,this.parent,t[t.length-1],{context:{expandAutolinks:!0},message:"Load more commits to search for autolinks"})),this._children=t}return this._children}getTreeItem(){const e=new r.TreeItem("Autolinked Issues and Pull Requests",this.expand?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=f.Td.AutolinkedItems,e}refresh(e=!1){e&&(this._children=void 0)}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?v(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&w(t,i,o)})([(0,a.H)(),(0,c.fF)()],AutolinkedItemsNode.prototype,"refresh",1);var b=i(2925),C=i(4741),A=i(812),k=i(1101),P=Object.defineProperty,S=Object.getOwnPropertyDescriptor;class ResultsCommitsNode extends f.Re{constructor(e,t,i,r,o,n=void 0,a){super(s.YY.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this._label=r,this._results=o,this._options=n,null!=o.direction&&this.updateContext({branchStatusUpstreamType:o.direction}),this._uniqueId=(0,f.tO)("results-commits",this.context),this.limit=this.view.getNodeLastKnownLimit(this),this._options={expand:!0,...n},null!=a&&(this.splatted=a)}limit;get id(){return this._uniqueId}get ref1(){return this._results.comparison?.ref1}get ref2(){return this._results.comparison?.ref2}_onChildrenCompleted;async getChildren(){this._onChildrenCompleted?.cancel(),this._onChildrenCompleted=(0,h.PQ)();const{log:e}=await this.getCommitsQueryResults();if(null==e)return[];const[t]=await Promise.all([this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath)]),i=[new AutolinkedItemsNode(this.view,this,this.uri.repoPath,e,this._expandAutolinks)];this._expandAutolinks=!1;const{files:r}=this._results;null!=r&&i.push(new A.V(this.view,this,this.uri.repoPath,r.ref1,r.ref2,r.query,this._results.direction,{expand:!1}));const s={expand:this._options.expand&&1===e.count};return i.push(...(0,C.E)((0,l.UI)(e.commits.values(),(e=>(0,o.G2)(e)?new k.i(this.view,this,e,{icon:!0}):new b.D(this.view,this,e,void 0,void 0,t,s))),this,void 0,{show:e.count>1})),e.hasMore&&i.push(new m.Gd(this.view,this,i[i.length-1])),this._onChildrenCompleted.fulfill(),i}async getTreeItem(){let e,t;if(this._results.deferred)e=this._label,t=r.TreeItemCollapsibleState.Collapsed;else try{let i;({label:e,log:i}=await(0,h.HO)(this.getCommitsQueryResults(),100)),t=null==i||0===i.count?r.TreeItemCollapsibleState.None:this._options.expand||1===i.count?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed}catch(e){e instanceof h.PK&&setTimeout((async()=>{await e.promise;try{await(this._onChildrenCompleted?.promise)}catch{}setTimeout((()=>{this.triggerChange(!1)}),1)}),1),t=r.TreeItemCollapsibleState.Collapsed}const i=new r.TreeItem(e??this._label,t);return i.id=this.id,i.contextValue=null!=this._results.comparison?f.Td.CompareResultsCommits:f.Td.SearchResultsCommits,i.description=this._options.description,i}refresh(e=!1){e&&(this._commitsQueryResults=void 0,this._commitsQueryResultsPromise=void 0,this.getCommitsQueryResults())}_commitsQueryResultsPromise;async getCommitsQueryResults(){if(null==this._commitsQueryResultsPromise){this._commitsQueryResultsPromise=this._results.query(this.limit??n.D.get("advanced.maxSearchItems"));const e=await this._commitsQueryResultsPromise;this._commitsQueryResults=e,this._hasMore=e.hasMore,this._results.deferred&&(this._results.deferred=!1,this.parent.triggerChange(!1))}return this._commitsQueryResultsPromise}_commitsQueryResults;maybeGetCommitsQueryResults(){return this._commitsQueryResults}_hasMore=!0;get hasMore(){return this._hasMore}_expandAutolinks=!1;async loadMore(e,t){const i=await this.getCommitsQueryResults();null!=i&&i.hasMore&&(null!=t&&"expandAutolinks"in t&&(this._expandAutolinks=Boolean(t.expandAutolinks)),await(i.more?.(e??this.view.config.pageItemLimit)),this.limit=i.log?.count,this.triggerChange(!1))}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?S(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&P(t,i,o)})([(0,a.H)(),(0,c.fF)()],ResultsCommitsNode.prototype,"refresh",1)},202:(e,t,i)=>{i.d(t,{C:()=>ResultsFileNode});var r=i(9496),s=i(5255),o=i(6373),n=i(7462),a=i(7881),c=i(4321),l=i(3700),h=i(5538),u=i(6922);class ResultsFileNode extends u.RW{constructor(e,t,i,r,s,o,a){super(n.YY.fromFile(r,i,s||o),e,t,r),this.ref1=s,this.ref2=o,this.direction=a,this.updateContext({file:r}),null!=this.context.storedComparisonId?this._uniqueId=`${(0,h.iS)(this.context.storedComparisonId)}${this.direction}|${r.path}`:this._uniqueId=(0,u.tO)("results-file",this.context)}toClipboard(){return this.file.path}get ref(){return(0,c.xB)(this.ref1||this.ref2,this.uri.repoPath)}getChildren(){return[]}getTreeItem(){const e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.None);e.contextValue=u.Td.ResultsFile,e.description=this.description,e.tooltip=o.o.fromTemplate("${file}\n${directory}/\n\n${status}${ (originalPath)}",this.file);const t=(0,a.tK)(this.file.status);return e.iconPath={dark:this.view.container.context.asAbsolutePath((0,l.RQ)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,l.RQ)("images","light",t))},e.command=this.getCommand(),e.checkboxState={state:this.getState("checked")??r.TreeItemCheckboxState.Unchecked,tooltip:"Mark as Reviewed"},e}_description;get description(){return void 0===this._description&&(this._description=o.o.fromTemplate(this.view.config.formats.files.description,this.file,{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return void 0===this._folderName&&(this._folderName=(0,l.Fd)(this.uri.relativePath)),this._folderName}_label;get label(){return void 0===this._label&&(this._label=o.o.fromTemplate(this.view.config.formats.files.label,this.file,{relativePath:this.relativePath})),this._label}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}get priority(){return 0}getCommand(){const e={lhs:{sha:this.ref1,uri:"R"!==this.file.status&&"C"!==this.file.status||"behind"!==this.direction?this.uri:n.YY.fromFile(this.file,this.uri.repoPath,this.ref2,!0)},rhs:{sha:this.ref2,uri:"R"!==this.file.status&&"C"!==this.file.status||"behind"===this.direction?this.uri:n.YY.fromFile(this.file,this.uri.repoPath,this.ref2,!0)},repoPath:this.uri.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes",command:s.Gh.DiffWith,arguments:[e]}}}},812:(e,t,i)=>{i.d(t,{V:()=>ResultsFilesNode,W:()=>w});var r=i(9496),s=i(7462),o=i(2800),n=i(5432),a=i(4241),c=i(3105),l=i(3700),h=i(7469),u=i(4627),d=i(4481),p=i(202),m=i(6922),g=Object.defineProperty,f=Object.getOwnPropertyDescriptor,w=(e=>(e[e.Left=0]="Left",e[e.Right=1]="Right",e))(w||{});class ResultsFilesNode extends m.Re{constructor(e,t,i,r,o,n,a,c=void 0){super(s.YY.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.ref1=r,this.ref2=o,this._filesQuery=n,this.direction=a,this._options=c,null!=this.direction&&this.updateContext({branchStatusUpstreamType:this.direction}),this._uniqueId=(0,m.tO)("results-files",this.context),this._options={expand:!0,...c}}get id(){return this._uniqueId}get filter(){return this.getState("filter")}set filter(e){this.filter!==e&&(this.storeState("filter",e,!0),this._filterResults=void 0,this.triggerChange(!1))}get filterable(){return null!=this.filter||this.ref1!==this.ref2&&void 0===this.direction}getFilterContextValue(){switch(this.filter){case 0:return"+filtered~left";case 1:return"+filtered~right";default:return""}}async getChildren(){const e=await this.getFilesQueryResults(),t=(null!=this.filter?e.filtered?.get(this.filter):void 0)??e.files;if(null==t)return[];let i=[...(0,c.UI)(t,(e=>new p.C(this.view,this,this.repoPath,e,this.ref1,this.ref2,this.direction)))];if("list"!==this.view.config.files.layout){const e=(0,o.Mo)(i,(e=>e.uri.relativePath.split("/")),((...e)=>(0,l.AH)((0,l.RQ)(...e))),this.view.config.files.compact);i=new d.Y(this.view,this,e,this.repoPath,"",void 0).getChildren()}else i.sort(((e,t)=>e.priority-t.priority||(0,u.dm)(e.label,t.label)));return i}async getTreeItem(){let e,t,i,s,o,n;const a=this.filter;try{const c=await(0,h.HO)(this.getFilesQueryResults(),100);e=c.label,null==a&&null!=c.stats&&(t=`${(0,u._6)("addition",c.stats.additions)} (+), ${(0,u._6)("deletion",c.stats.deletions)} (-)${c.stats.approximated?" *approximated":""}`,n=`${e}, ${t}`),null!=a?(t="Filtered",n=`${e} &mdash; ${t}`,s=c.filtered?.get(a),null==s&&(e="files changed",i=new r.ThemeIcon("ellipsis"),o=r.TreeItemCollapsibleState.Collapsed,this._filterResults?.then((()=>queueMicrotask((()=>this.triggerChange(!1))))))):s=c.files,void 0===o&&(o=null==s||0===s.length?r.TreeItemCollapsibleState.None:this._options.expand?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed)}catch(t){t instanceof h.PK&&t.promise.then((()=>queueMicrotask((()=>this.triggerChange(!1))))),e="files changed",i=new r.ThemeIcon("ellipsis"),o=r.TreeItemCollapsibleState.Collapsed}const c=new r.TreeItem(`${null!=a&&null!=s?`Showing ${s.length} of `:""}${e}`,o);return c.description=t,c.id=this.id,c.iconPath=i,c.contextValue=`${m.Td.ResultsFiles}${this.filterable?"+filterable":""}${this.getFilterContextValue()}`,c.tooltip=n,c}refresh(e=!1){e&&(this.deleteState("filter"),this._filterResults=void 0,this._filesQueryResults=this._filesQuery())}_filesQueryResults;_filterResults;async getFilesQueryResults(){void 0===this._filesQueryResults&&(this._filesQueryResults=this._filesQuery());const e=await this._filesQueryResults;return null!=e.files&&this.filterable&&null!=this.filter&&null==e.filtered?.get(this.filter)?(void 0===this._filterResults&&(this._filterResults=this.filterResults(this.filter,e)),await this._filterResults,e):e}async filterResults(e,t){let i;const r=0===this.filter?this.ref2:this.ref1,s=await this.view.container.git.getMergeBase(this.repoPath,this.ref1||"HEAD",this.ref2||"HEAD");if(null!=s){const e=await this.view.container.git.getDiffStatus(this.uri.repoPath,`${s}..${r}`);null!=e&&(i=new Set(e.map((e=>e.path))))}else{const e=await this.view.container.git.getCommit(this.uri.repoPath,r||"HEAD");null!=e?.files&&(i=new Set(e.files.map((e=>e.path))))}null==t.filtered&&(t.filtered=new Map),t.filtered.set(e,null==i?[]:t.files.filter((e=>i.has(e.path))))}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?f(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&g(t,i,o)})([(0,n.H)(),(0,a.fF)()],ResultsFilesNode.prototype,"refresh",1)},4655:(e,t,i)=>{i.d(t,{V:()=>SearchResultsNode});var r=i(9496),s=i(3951),o=i(9311),n=i(7462),a=i(6934),c=i(5432),l=i(4241),h=i(4627),u=i(5988),d=i(6922),p=Object.defineProperty,m=Object.getOwnPropertyDescriptor;let g=0;class SearchResultsNode extends d.Re{constructor(e,t,i,r,s,o,c=0){super(n.YY.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this._search=r,this._labels=s,this._searchQueryOrLog=o,this._storedAt=c,this._instanceId=g++,this.updateContext({searchId:`${(0,a.FL)(this._search)}+${this._instanceId}`}),this._uniqueId=(0,d.tO)("search-results",this.context),0===this._storedAt&&(this._storedAt=Date.now(),this.store(!0))}_instanceId;get id(){return this._uniqueId}get order(){return this._storedAt}get search(){return this._search}dismiss(){this.remove(!0)}_resultsNode;ensureResults(){if(null==this._resultsNode){let e;null==this._searchQueryOrLog?(e=!0,this._searchQueryOrLog=this.getSearchQuery({label:this._labels.queryLabel})):"function"!=typeof this._searchQueryOrLog&&(this._searchQueryOrLog=this.getSearchQuery({label:this._labels.queryLabel},this._searchQueryOrLog)),this._resultsNode=new u.J(this.view,this,this.repoPath,this._labels.label,{query:this._searchQueryOrLog,deferred:e},{expand:!1},!0)}return this._resultsNode}async getChildren(){return this.ensureResults().getChildren()}async getTreeItem(){const e=await this.ensureResults().getTreeItem();if(e.id=this.id,e.contextValue=d.Td.SearchResults,this.view.container.git.repositoryCount>1){const t=this.view.container.git.getRepository(this.repoPath);e.description=t?.formattedName??this.repoPath}return e.iconPath=new r.ThemeIcon("search"),e}get hasMore(){return this.ensureResults().hasMore}async loadMore(e){return this.ensureResults().loadMore(e)}async edit(e){if(null==e)return void await(0,o.m)({command:"search",prefillOnly:!0,state:{repo:this.repoPath,...this.search,showResultsInSideBar:this}});const t=this.getStorageId();this._search=e.pattern,this._labels=e.labels,this._searchQueryOrLog=e.log,this._resultsNode=void 0,await this.replace(t,!0),this.triggerChange(!1),queueMicrotask((()=>this.view.reveal(this,{expand:!0,focus:!0,select:!0})))}refresh(e=!1){this._resultsNode?.refresh(e)}getSearchLabel(e,t){if("string"==typeof e)return e;const i=t?.count??0,r=void 0===e.resultsType?{singular:"search result",plural:"search results"}:e.resultsType;return`${(0,h._6)(r.singular,i,{format:e=>t?.hasMore?`${e}+`:void 0,plural:r.plural,zero:"No"})} ${e.label}`}getSearchQuery(e,t){let i=!0;return async r=>{t=await(t??this.view.container.git.richSearchCommits(this.repoPath,this.search)),i||null==t?.query||(t=await t.query(r)),i=!1;const s={label:this.getSearchLabel(e.label,t),log:t,hasMore:t?.hasMore??!1};return s.hasMore&&(s.more=async t=>{s.log=await(s.log?.more?.(t))??s.log,s.label=this.getSearchLabel(e.label,s.log),s.hasMore=s.log?.hasMore??!0}),s}}getStorageId(){return(0,s.FB)(`${this.repoPath}|${(0,a.FL)(this.search)}`,"base64")}remove(e=!1){return this.view.updateStorage(this.getStorageId(),void 0,e)}async replace(e,t=!1){return await this.view.updateStorage(e,void 0,t),this.store(t)}store(e=!1){return this.view.updateStorage(this.getStorageId(),{type:"search",timestamp:this._storedAt,path:this.repoPath,labels:this._labels,search:(0,a.KQ)(this.search)},e)}}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);r&&o&&p(t,i,o)})([(0,c.H)(),(0,l.fF)()],SearchResultsNode.prototype,"refresh",1)},2758:(e,t,i)=>{i.d(t,{y:()=>StashFileNode});var r=i(2601),s=i(6922);class StashFileNode extends r.R{constructor(e,t,i,r){super(e,t,i,r)}get contextValue(){return`${s.Td.File}+stashed`}}},1101:(e,t,i)=>{i.d(t,{i:()=>StashNode});var r=i(9496),s=i(9338),o=i(2800),n=i(5148),a=i(3700),c=i(4627),l=i(4481),h=i(2758),u=i(6922);class StashNode extends u.bT{constructor(e,t,i,r){super(i.getGitUri(),e,t),this.parent=t,this.commit=i,this.options=r,this.updateContext({commit:i}),this._uniqueId=(0,u.tO)("stash",this.context)}get id(){return this._uniqueId}toClipboard(){return this.commit.stashName}get ref(){return this.commit}async getChildren(){let e=(await this.commit.getCommitsForFiles()).map((e=>new h.y(this.view,this,e.file,e)));if("list"!==this.view.config.files.layout){const t=(0,o.Mo)(e,(e=>e.uri.relativePath.split("/")),((...e)=>(0,a.AH)((0,a.RQ)(...e))),this.view.config.files.compact);e=new l.Y(this.view,this,t,this.repoPath,"",void 0).getChildren()}else e.sort(((e,t)=>(0,c.dm)(e.label,t.label)));return e}getTreeItem(){const e=new r.TreeItem(s.i.fromTemplate(this.view.config.formats.stashes.label,this.commit,{messageTruncateAtNewLine:!0,dateFormat:n.D.get("defaultDateFormat")}),r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.description=s.i.fromTemplate(this.view.config.formats.stashes.description,this.commit,{messageTruncateAtNewLine:!0,dateFormat:n.D.get("defaultDateFormat")}),e.contextValue=u.Td.Stash,this.options?.icon&&(e.iconPath=new r.ThemeIcon("archive")),e.tooltip=s.i.fromTemplate("${'On 'stashOnRef\n}${ago} (${date})\n\n${message}",this.commit,{dateFormat:n.D.get("defaultDateFormat")}),e}}},6586:(e,t,i)=>{i.d(t,{q:()=>StatusFileNode});var r=i(9496),s=i(5255),o=i(6373),n=i(7462),a=i(7881),c=i(3700),l=i(4627),h=i(9719),u=i(6922);class StatusFileNode extends u.Te{commits;_direction;_hasStagedChanges;_hasUnstagedChanges;constructor(e,t,i,r,s,o="ahead"){let a,c=!1,l=!1;for(const e of s){if(!e.isUncommitted){if(l)break;a=e.sha;break}if(e.isUncommittedStaged){c=!0,l||(a=e.sha);break}a=void 0,l=!0}super(n.YY.fromFile(i,r,a),e,t,i),this.commits=s,this._direction=o,this._hasStagedChanges=c,this._hasUnstagedChanges=l}toClipboard(){return this.fileName}get fileName(){return this.file.path}getChildren(){return this.commits.map((e=>new h.m(this.view,this,this.file,e)))}getTreeItem(){const e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.None);if(e.description=this.description,(this._hasStagedChanges||this._hasUnstagedChanges)&&1===this.commits.length)e.contextValue=u.Td.File,this._hasStagedChanges?(e.contextValue+="+staged",e.tooltip=o.o.fromTemplate("${file}\n${directory}/\n\n${status}${ (originalPath)} in Index (staged)",this.file)):(e.contextValue+="+unstaged",e.tooltip=o.o.fromTemplate("${file}\n${directory}/\n\n${status}${ (originalPath)} in Working Tree",this.file)),e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),e.iconPath=r.ThemeIcon.File,e.command=this.getCommand();else{if(e.collapsibleState=r.TreeItemCollapsibleState.Collapsed,this._hasStagedChanges||this._hasUnstagedChanges)e.contextValue=u.Td.File,this._hasStagedChanges&&this._hasUnstagedChanges?e.contextValue+="+staged+unstaged":this._hasStagedChanges?e.contextValue+="+staged":e.contextValue+="+unstaged",e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),e.iconPath=r.ThemeIcon.File;else{e.contextValue=u.Td.StatusFileCommits;const t=(0,a.tK)(this.file.status);e.iconPath={dark:this.view.container.context.asAbsolutePath((0,c.RQ)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,c.RQ)("images","light",t))}}e.tooltip=o.o.fromTemplate(`\${file}\n\${directory}/\n\n\${status}\${ (originalPath)} in ${this.getChangedIn()}`,this.file),e.command=this.getCommand()}return this._label=void 0,this._description=void 0,e}_description;get description(){return null==this._description&&(this._description=o.o.fromTemplate(this.view.config.formats.files.description,{...this.file,commit:this.commit},{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return null==this._folderName&&(this._folderName=(0,c.Fd)(this.uri.relativePath)),this._folderName}_label;get label(){return null==this._label&&(this._label=o.o.fromTemplate(this.view.config.formats.files.label,{...this.file,commit:this.commit},{relativePath:this.relativePath})),this._label}get commit(){return this.commits[0]}get priority(){return this._hasStagedChanges&&!this._hasUnstagedChanges?-3:this._hasStagedChanges?-2:this._hasUnstagedChanges?-1:0}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getChangedIn(){const e=[];let t=0;return this._hasUnstagedChanges&&(t++,e.push("Working Tree")),this._hasStagedChanges&&(t++,e.push("Index (staged)")),this.commits.length>t&&(t=this.commits.length-t),t>0&&e.push((0,l._6)("commit",t)),e.length>2&&(e[e.length-1]=`and ${e[e.length-1]}`),e.join(e.length>2?", ":" and ")}getCommand(){if((this._hasStagedChanges||this._hasUnstagedChanges)&&1===this.commits.length){const e={commit:this.commit,uri:n.YY.fromFile(this.file,this.repoPath),line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:s.Gh.DiffWithPrevious,arguments:[void 0,e]}}const e="behind"===this._direction?this.commits[0]:this.commits[this.commits.length-1],t=e.files?.find((e=>e.path===this.file.path))??this.file,i={lhs:{sha:"behind"===this._direction?e.sha:`${e.sha}^`,uri:n.YY.fromFile(t,this.repoPath,void 0,!0)},rhs:{sha:"",uri:n.YY.fromFile(this.file,this.repoPath)},repoPath:this.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes",command:s.Gh.DiffWith,arguments:[i]}}}},6922:(e,t,i)=>{i.d(t,{CF:()=>SubscribeableViewNode,FZ:()=>RepositoriesSubscribeableNode,Jc:()=>b,LD:()=>S,On:()=>A,RW:()=>ViewRefFileNode,Re:()=>y,Td:()=>w,Te:()=>ViewFileNode,bT:()=>ViewRefNode,kP:()=>D,kr:()=>P,pp:()=>R,tO:()=>v,vb:()=>RepositoryFolderNode,w8:()=>C});var r=i(9496),s=i(5255),o=i(7462),n=i(4321),a=i(3050),c=i(3646),l=i(5432),h=i(4241),u=i(9796),d=i(4336),p=i(4627),m=Object.defineProperty,g=Object.getOwnPropertyDescriptor,f=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?g(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&m(t,i,o),o},w=(e=>(e.ActiveFileHistory="gitlens:history:active:file",e.ActiveLineHistory="gitlens:history:active:line",e.AutolinkedItems="gitlens:autolinked:items",e.AutolinkedIssue="gitlens:autolinked:issue",e.AutolinkedItem="gitlens:autolinked:item",e.Branch="gitlens:branch",e.Branches="gitlens:branches",e.BranchStatusAheadOfUpstream="gitlens:status-branch:upstream:ahead",e.BranchStatusBehindUpstream="gitlens:status-branch:upstream:behind",e.BranchStatusNoUpstream="gitlens:status-branch:upstream:none",e.BranchStatusSameAsUpstream="gitlens:status-branch:upstream:same",e.BranchStatusFiles="gitlens:status-branch:files",e.Commit="gitlens:commit",e.Commits="gitlens:commits",e.Compare="gitlens:compare",e.CompareBranch="gitlens:compare:branch",e.ComparePicker="gitlens:compare:picker",e.ComparePickerWithRef="gitlens:compare:picker:ref",e.CompareResults="gitlens:compare:results",e.CompareResultsCommits="gitlens:compare:results:commits",e.Contributor="gitlens:contributor",e.Contributors="gitlens:contributors",e.DateMarker="gitlens:date-marker",e.File="gitlens:file",e.FileHistory="gitlens:history:file",e.Folder="gitlens:folder",e.LineHistory="gitlens:history:line",e.Merge="gitlens:merge",e.MergeConflictCurrentChanges="gitlens:merge-conflict:current",e.MergeConflictIncomingChanges="gitlens:merge-conflict:incoming",e.Message="gitlens:message",e.MessageSignIn="gitlens:message:signin",e.Pager="gitlens:pager",e.PullRequest="gitlens:pullrequest",e.Rebase="gitlens:rebase",e.Reflog="gitlens:reflog",e.ReflogRecord="gitlens:reflog-record",e.Remote="gitlens:remote",e.Remotes="gitlens:remotes",e.Repositories="gitlens:repositories",e.Repository="gitlens:repository",e.RepositoryFolder="gitlens:repo-folder",e.ResultsFile="gitlens:file:results",e.ResultsFiles="gitlens:results:files",e.SearchAndCompare="gitlens:searchAndCompare",e.SearchResults="gitlens:search:results",e.SearchResultsCommits="gitlens:search:results:commits",e.Stash="gitlens:stash",e.Stashes="gitlens:stashes",e.StatusFileCommits="gitlens:status:file:commits",e.StatusFiles="gitlens:status:files",e.StatusAheadOfUpstream="gitlens:status:upstream:ahead",e.StatusBehindUpstream="gitlens:status:upstream:behind",e.StatusNoUpstream="gitlens:status:upstream:none",e.StatusSameAsUpstream="gitlens:status:upstream:same",e.Tag="gitlens:tag",e.Tags="gitlens:tags",e.UncommittedFiles="gitlens:uncommitted:files",e.Workspace="gitlens:workspace",e.WorkspaceMissingRepository="gitlens:workspaceMissingRepository",e.Workspaces="gitlens:workspaces",e.Worktree="gitlens:worktree",e.Worktrees="gitlens:worktrees",e))(w||{});function v(e,t){let i="";return t.root&&(i+="/root"),null!=t.workspace&&(i+=`/ws/${t.workspace.id}`),null!=t.wsRepositoryDescriptor&&(i+=`/wsrepo/${t.wsRepositoryDescriptor.id}`),null!=t.repository&&(i+=`/repo/${t.repository.id}`),null!=t.worktree&&(i+=`/worktree/${t.worktree.uri.path}`),null!=t.remote&&(i+=`/remote/${t.remote.name}`),null!=t.tag&&(i+=`/tag/${t.tag.id}`),null!=t.branch&&(i+=`/branch/${t.branch.id}`),null!=t.branchStatus&&(i+=`/branch-status/${t.branchStatus.upstream??"-"}`),null!=t.branchStatusUpstreamType&&(i+=`/branch-status-direction/${t.branchStatusUpstreamType}`),null!=t.status&&(i+=`/status/${t.status}`),null!=t.reflog&&(i+=`/reflog/${t.reflog.sha}+${t.reflog.selector}+${t.reflog.command}+${t.reflog.commandArgs??""}+${t.reflog.date.getTime()}`),null!=t.contributor&&(i+=`/contributor/${t.contributor.id??`${t.contributor.username}+${t.contributor.email}+${t.contributor.name}`}`),null!=t.autolinksId&&(i+=`/autolinks/${t.autolinksId}`),null!=t.comparisonId&&(i+=`/comparison/${t.comparisonId}`),null!=t.searchId&&(i+=`/search/${t.searchId}`),null!=t.commit&&(i+=`/commit/${t.commit.sha}`),null!=t.file&&(i+=`/file/${t.file.path}+${t.file.status}`),`gitlens://viewnode/${e}${i}`}let y=class{constructor(e,t,i){this.view=t,this.parent=i,this._uri=e}_uniqueId;splatted=!1;get id(){return this._uniqueId}_context;get context(){return this._context??this.parent?.context??{}}updateContext(e,t=!1){this._context=this.getNewContext(e,t)}getNewContext(e,t=!1){return{...t?this.parent?.context:this.context,...e}}toString(){const e=this.id;return`${(0,d.q4)(this)}${null!=e?`(${e})`:""}`}_uri;get uri(){return this._uri}getParent(){return this.parent?.splatted?this.parent?.getParent():this.parent}getCommand(){}triggerChange(e=!1,t=!1,i){return this.splatted&&null!=this.parent&&this.parent!==i?this.parent.triggerChange(e,t):this.view.refreshNode(this,e,t)}deleteState(e){if(null==this.id)throw new Error("Id is required to delete state");this.view.nodeState.deleteState(this.id,e)}getState(e){if(null==this.id)throw new Error("Id is required to get state");return this.view.nodeState.getState(this.id,e)}storeState(e,t,i){if(null==this.id)throw new Error("Id is required to store state");this.view.nodeState.storeState(this.id,e,t,i)}};function b(e){return e instanceof y}function C(e){return e instanceof ViewFileNode}f([(0,l.H)(((e=!1,t=!1,i)=>JSON.stringify([e,t,i?.toString()]))),(0,h.fF)()],y.prototype,"triggerChange",1),y=f([(0,h.hJ)(((e,t)=>`${t}${null!=e.id?`(${e.id})`:""}`))],y);class ViewFileNode extends y{constructor(e,t,i,r){super(e,t,i),this.parent=i,this.file=r}get repoPath(){return this.uri.repoPath}toString(){return`${super.toString()}:${this.file.path}`}}class ViewRefNode extends y{constructor(e,t,i){super(e,t,i),this.parent=i}get repoPath(){return this.uri.repoPath}toString(){return`${super.toString()}:${(0,n.Wh)(this.ref,!1)}`}}class ViewRefFileNode extends ViewFileNode{toString(){return`${super.toString()}:${this.file.path}`}}function A(e){return(0,u.is)(e,"loadMore")}class SubscribeableViewNode extends y{disposable;subscription;loaded=!1;constructor(e,t,i){super(e,t,i);const s=[this.view.onDidChangeVisibility(this.onVisibilityChanged,this)];k(this.view)&&s.push(this.view.onDidChangeAutoRefresh(this.onAutoRefreshChanged,this));const o=this.getTreeItem;this.getTreeItem=function(){return this.loaded=!0,this.ensureSubscription(),o.apply(this)};const n=this.getChildren;this.getChildren=function(){return this.loaded=!0,this.ensureSubscription(),n.apply(this)},this.disposable=r.Disposable.from(...s)}dispose(){this.unsubscribe(),this.disposable?.dispose()}async triggerChange(e=!1,t=!1){this.loaded&&(e&&!this.view.visible&&(this._pendingReset=e),await super.triggerChange(e,t))}_canSubscribe=!0;get canSubscribe(){return this._canSubscribe}set canSubscribe(e){this._canSubscribe!==e&&(this._canSubscribe=e,this.ensureSubscription(),e&&this.triggerChange())}_etag;_pendingReset=!1;get requiresResetOnVisible(){let e=this._pendingReset;this._pendingReset=!1;const t=this.etag();return t!==this._etag&&(this._etag=t,e=!0),e}async unsubscribe(){if(this._etag=this.etag(),null!=this.subscription){const e=this.subscription;this.subscription=void 0,(await e)?.dispose()}}onAutoRefreshChanged(){this.onVisibilityChanged({visible:this.view.visible})}onVisibilityChanged(e){this.ensureSubscription(),e.visible&&this.triggerChange(this.requiresResetOnVisible)}async ensureSubscription(){this.canSubscribe&&this.view.visible&&(!k(this.view)||this.view.autoRefresh)?null==this.subscription&&(this.subscription=Promise.resolve(this.subscribe()),await this.subscription):await this.unsubscribe()}async resetSubscription(){await this.unsubscribe(),await this.ensureSubscription()}}f([(0,h.fF)()],SubscribeableViewNode.prototype,"dispose",1),f([(0,l.H)(),(0,h.fF)()],SubscribeableViewNode.prototype,"triggerChange",1),f([(0,h.fF)()],SubscribeableViewNode.prototype,"unsubscribe",1),f([(0,h.fF)()],SubscribeableViewNode.prototype,"onAutoRefreshChanged",1),f([(0,h.fF)()],SubscribeableViewNode.prototype,"onVisibilityChanged",1),f([(0,l.H)(),(0,h.fF)()],SubscribeableViewNode.prototype,"ensureSubscription",1),f([(0,l.H)(),(0,h.fF)()],SubscribeableViewNode.prototype,"resetSubscription",1);class RepositoryFolderNode extends SubscribeableViewNode{constructor(e,t,i,r,s,o){super(e,t,i),this.parent=i,this.repo=r,this.options=o,this.updateContext({repository:this.repo}),this._uniqueId=v("repository-folder",this.context),this.splatted=s}splatted=!0;child;get id(){return this._uniqueId}toClipboard(){return this.repo.path}get repoPath(){return this.repo.path}async getTreeItem(){this.splatted=!1;const e=await this.repo.getBranch(),t=(e?.state.ahead??0)>0,i=(e?.state.behind??0)>0,o=t||i||this.repo.starred||this.view.container.git.isRepositoryForEditor(this.repo),n=new r.TreeItem(this.repo.formattedName??this.uri.repoPath??"",o?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);if(n.contextValue="gitlens:repo-folder"+(this.repo.starred?"+starred":""),t&&(n.contextValue+="+ahead"),i&&(n.contextValue+="+behind"),null!=e&&this.options?.showBranchAndLastFetched){const t=await this.repo.getLastFetched()??0,i=e.getTrackingStatus();let o;if(n.description=`${i?`${i}${(0,p.vk)(s.NE.Dot,1,1)}`:""}${e.name}${t?`${(0,p.vk)(s.NE.Dot,1,1)}Last fetched ${c._j.formatLastFetched(t)}`:""}`,null!=e.upstream){const t=a.ss.getHighlanderProviders(await this.view.container.git.getRemotesWithProviders(e.repoPath));o=t?.length?t[0].name:void 0}else{const t=await e.getRemote();o=t?.provider?.name}n.tooltip=new r.MarkdownString(`${this.repo.formattedName??this.uri.repoPath??""}${t?`${(0,p.vk)(s.NE.Dash,2,2)}Last fetched ${c._j.formatLastFetched(t,!1)}`:""}${this.repo.formattedName?`\n${this.uri.repoPath}`:""}\n\nCurrent branch $(git-branch) ${e.name}${null!=e.upstream?` is ${e.getTrackingStatus({empty:e.upstream.missing?`missing upstream $(git-branch) ${e.upstream.name}`:`up to date with $(git-branch) ${e.upstream.name}${o?` on ${o}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${e.upstream.name}${o?` on ${o}`:""}`})}`:`hasn't been published to ${o??"a remote"}`}`,!0)}else n.tooltip=`${this.repo.formattedName?`${this.repo.formattedName}\n${this.uri.repoPath}`:this.uri.repoPath??""}`;return n}async getSplattedChild(){return null==this.child&&await this.getChildren(),this.child}async refresh(e=!1){await(this.child?.triggerChange(e,!1,this)),await this.ensureSubscription()}async star(){await this.repo.star()}async unstar(){await this.repo.unstar()}subscribe(){return this.repo.onDidChange(this.onRepositoryChanged,this)}etag(){return this.repo.etag}onRepositoryChanged(e){if(e.changed(c.I6.Closed,c.du.Any))return this.dispose(),void this.parent?.triggerChange(!0);e.changed(c.I6.Opened,c.du.Any)||e.changed(c.I6.Starred,c.du.Any)?this.parent?.triggerChange(!0):this.changed(e)&&(this.loaded?this:this.parent??this).triggerChange(!0)}}f([(0,l.H)(),(0,h.fF)()],RepositoryFolderNode.prototype,"refresh",1),f([(0,h.cM)()],RepositoryFolderNode.prototype,"star",1),f([(0,h.cM)()],RepositoryFolderNode.prototype,"unstar",1),f([(0,h.fF)()],RepositoryFolderNode.prototype,"subscribe",1),f([(0,h.fF)({args:{0:e=>e.toString()}})],RepositoryFolderNode.prototype,"onRepositoryChanged",1);class RepositoriesSubscribeableNode extends SubscribeableViewNode{splatted=!0;children;constructor(e){super(o.Wj,e)}dispose(){super.dispose(),this.resetChildren()}resetChildren(){if(null!=this.children){for(const e of this.children)"dispose"in e&&e.dispose();this.children=void 0}}async getSplattedChild(){return null==this.children&&await this.getChildren(),1===this.children?.length?this.children[0]:void 0}refresh(e=!1){null!=this.children&&e&&this.resetChildren()}etag(){return(0,u.NX)(this.view.container.git.etag,this.view.container.subscription.etag)}subscribe(){return r.Disposable.from(this.view.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),this.view.container.subscription.onDidChange(this.onSubscriptionChanged,this))}onRepositoriesChanged(e){this.triggerChange(!0)}onSubscriptionChanged(e){e.current.plan!==e.previous.plan&&this.triggerChange(!0)}}function k(e){return(0,u.is)(e,"onDidChangeAutoRefresh")}function P(e){return"function"==typeof e.clear}function S(e){return"function"==typeof e.edit}function D(e){return"function"==typeof e.dismissNode}function R(e){return function(e){return null!=e&&"repoPath"in e&&"string"==typeof e.repoPath}(e)?e.repoPath:void 0}f([(0,l.H)(),(0,h.fF)()],RepositoriesSubscribeableNode.prototype,"refresh",1),f([(0,h.fF)()],RepositoriesSubscribeableNode.prototype,"subscribe",1)},5798:(e,t,i)=>{i.d(t,{M5:()=>s,Mb:()=>a,NM:()=>p,TB:()=>m,W2:()=>o,bo:()=>h,dp:()=>n,eP:()=>u,jH:()=>IpcNotificationType,ke:()=>IpcCommandType,mq:()=>r,n:()=>l,qi:()=>c});class IpcMessageType{constructor(e,t=!1){this.method=e,this.reset=t}_}class IpcCommandType extends IpcMessageType{}class IpcNotificationType extends IpcMessageType{}function r(e,t,i){e.method===t.method&&i(t.params,e)}const s=new IpcCommandType("webview/ready"),o=new IpcCommandType("webview/focus"),n=new IpcCommandType("command/execute"),a=new IpcCommandType("configuration/preview"),c=new IpcCommandType("configuration/update"),l=new IpcNotificationType("configuration/didChange"),h=new IpcNotificationType("configuration/didPreview"),u=new IpcNotificationType("webview/didOpenAnchor"),d=["rebaseEditor.enabled","currentLine.useUncommittedChangesFormat"];function p(e){return d.includes(e)}function m(e,t){}},6260:(e,t,i)=>{i.d(t,{wU:()=>g,Q5:()=>f,qW:()=>w,Db:()=>v,OY:()=>y});var r=i(9496),s=i(3951),o=i(9529),n=i(2061),a=i(4241);var c=i(7469),l=i(5798),h=Object.defineProperty,u=Object.getOwnPropertyDescriptor,d=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?u(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&h(t,i,o),o};const p=new TextDecoder("utf8");let m=0;let g=class{constructor(e,t,i,s,o){this.container=e,this._commandRegistrar=t,this.descriptor=i,this.parent=s,this.id=i.id,this.webview=s.webview;const n="onDidChangeViewState"in s;this._isEditor=n,this._originalTitle=i.title,s.title=i.title,this._initializing=o(e,this).then((e=>{this.provider=e,this._disposed?e.dispose():this.disposable=r.Disposable.from(r.window.onDidChangeWindowState(this.onWindowStateChanged,this),s.webview.onDidReceiveMessage(this.onMessageReceivedCore,this),n?s.onDidChangeViewState((({webviewPanel:{visible:e,active:t}})=>this.onParentVisibilityChanged(e,t))):s.onDidChangeVisibility((()=>this.onParentVisibilityChanged(this.visible,this.active))),s.onDidDispose(this.onParentDisposed,this),...this.provider.registerCommands?.()??[],this.provider)}))}static async create(e,t,i,r,s){const o=new g(e,t,i,r,s);return await o.initialize(),o}_onDidDispose=new r.EventEmitter;get onDidDispose(){return this._onDidDispose.event}id;_ready=!1;get ready(){return this._ready}disposable;provider;webview;_disposed=!1;dispose(){this._disposed=!0,w(this.descriptor.contextKeyPrefix),this.provider?.onFocusChanged?.(!1),this.provider?.onVisibilityChanged?.(!1),this._ready=!1,this._onDidDispose.fire(),this.disposable?.dispose()}registerWebviewCommand(e,t){return this._commandRegistrar.registerCommand(this.provider,this.id,e,t)}_initializing;async initialize(){null!=this._initializing&&(await this._initializing,this._initializing=void 0)}_isEditor;isEditor(){return this._isEditor}isView(){return!this._isEditor}get active(){return"active"in this.parent?!this._disposed&&this.parent.active:!this._disposed&&void 0}get badge(){return"badge"in this.parent?this.parent.badge:void 0}set badge(e){if(!("badge"in this.parent))throw new Error("The 'badge' property not supported on Webview parent");this.parent.badge=e}_description;get description(){return"description"in this.parent?this.parent.description:this._description}set description(e){"description"in this.parent&&(this.parent.description=e),this._description=e}_originalTitle;get originalTitle(){return this._originalTitle}get title(){return this.parent.title??this._originalTitle}set title(e){this.parent.title=e}get visible(){return!this._disposed&&this.parent.visible}async show(e,t,...i){null==t&&(t={});const s=this.provider.onShowing?.(e,t,...i);if(null!=s)if((0,c.tI)(s)){if(!1===await s)return}else if(!1===s)return;e&&(this.webview.html=await this.getHtml(this.webview)),this.isEditor()?e||this.parent.reveal(t.column??this.parent.viewColumn??this.descriptor.column??r.ViewColumn.Beside,t.preserveFocus??!1):this.isView()&&(await(0,o.dO)(`${this.id}.focus`,t),e&&this.provider.onVisibilityChanged?.(!0)),v(this.descriptor.contextKeyPrefix,this.active)}_cspNonce=(0,s.Vu)();get cspNonce(){return this._cspNonce}asWebviewUri(e){return this.webview.asWebviewUri(e)}async refresh(e){e&&this.clearPendingIpcNotifications(),this.provider.onRefresh?.(e);const t=this._ready;this._ready=!1;const i=await this.getHtml(this.webview);e&&(this.webview.html=""),this.webview.html!==i?this.webview.html=i:t&&(this._ready=!0)}onParentDisposed(){this.dispose()}onMessageReceivedCore(e){if(null!=e)switch(e.method){case l.M5.method:(0,l.mq)(l.M5,e,(()=>{this._ready=!0,this.sendPendingIpcNotifications(),this.provider.onReady?.()}));break;case l.W2.method:(0,l.mq)(l.W2,e,(e=>{this.onViewFocusChanged(e)}));break;case l.dp.method:(0,l.mq)(l.dp,e,(e=>{null!=e.args?(0,o.P0)(e.command,...e.args):(0,o.P0)(e.command)}));break;default:this.provider.onMessageReceived?.(e)}}onViewFocusChanged(e){v(this.descriptor.contextKeyPrefix,void 0,e.focused,e.inputFocused),this.provider.onFocusChanged?.(e.focused)}onParentVisibilityChanged(e,t){!0!==this.descriptor.webviewHostOptions?.retainContextWhenHidden&&(e?this._ready?this.sendPendingIpcNotifications():null!=this.provider.onReloaded?(this.clearPendingIpcNotifications(),this.provider.onReloaded()):this.refresh():this._ready=!1),e?(this.container.usage.track(`${this.descriptor.trackingFeature}:shown`),v(this.descriptor.contextKeyPrefix,t),null!=t&&(this.provider.onActiveChanged?.(t),t||this.provider.onFocusChanged?.(!1))):(w(this.descriptor.contextKeyPrefix),null!=t&&this.provider.onActiveChanged?.(!1),this.provider.onFocusChanged?.(!1)),this.provider.onVisibilityChanged?.(e)}onWindowStateChanged(e){this.visible&&this.provider.onWindowFocusChanged?.(e.focused)}getRootUri(){return this.container.context.extensionUri}_webRoot;getWebRoot(){return null==this._webRoot&&(this._webRoot=this.asWebviewUri(this.getWebRootUri()).toString()),this._webRoot}_webRootUri;getWebRootUri(){return null==this._webRootUri&&(this._webRootUri=r.Uri.joinPath(this.getRootUri(),"dist","webviews")),this._webRootUri}async getHtml(e){const t=this.getWebRootUri(),i=r.Uri.joinPath(t,this.descriptor.fileName),[s,o,n,a,c]=await Promise.all([r.workspace.fs.readFile(i),this.provider.includeBootstrap?.(),this.provider.includeHead?.(),this.provider.includeBody?.(),this.provider.includeEndOfBody?.()]);return f(p.decode(s),this.descriptor.id,e.cspSource,this._cspNonce,this.asWebviewUri(this.getRootUri()).toString(),this.getWebRoot(),this.isEditor()?"editor":"view",o,n,a,c)}nextIpcId(){return 1073741824===m?m=1:m++,`host:${m}`}async notify(e,t,i){const r={id:this.nextIpcId(),method:e.method,params:t,completionId:i},s=await this.postMessage(r);return s?this._pendingIpcNotifications.clear():this.addPendingIpcNotificationCore(e,r),s}async postMessage(e){if(!this._ready)return Promise.resolve(!1);return await Promise.race([this.webview.postMessage(e),new Promise((e=>setTimeout(e,5e3,!1)))])}_pendingIpcNotifications=new Map;addPendingIpcNotification(e,t,i){this.addPendingIpcNotificationCore(e,t.get(e)?.bind(i))}addPendingIpcNotificationCore(e,t){e.reset&&this._pendingIpcNotifications.clear(),null!=t&&this._pendingIpcNotifications.set(e,t)}clearPendingIpcNotifications(){this._pendingIpcNotifications.clear()}sendPendingIpcNotifications(){if(0===this._pendingIpcNotifications.size)return;const e=new Map(this._pendingIpcNotifications);this._pendingIpcNotifications.clear();for(const t of e.values())"function"==typeof t?t():this.postMessage(t)}};function f(e,t,i,r,s,o,n,a,c,l,h){return e.replace(/#{(head|body|endOfBody|webviewId|placement|cspSource|cspNonce|root|webroot)}/g,((e,u)=>{switch(u){case"head":return c??"";case"body":return l??"";case"endOfBody":return`${null!=a?`<script type="text/javascript" nonce="${r}">window.bootstrap=${JSON.stringify(a)};<\/script>`:""}${h??""}`;case"webviewId":return t;case"placement":return n;case"cspSource":return i;case"cspNonce":return r;case"root":return s;case"webroot":return o;default:return""}}))}function w(e){(0,n.v)(`${e}:visible`,!1),(0,n.v)(`${e}:inputFocus`,!1),(0,n.v)(`${e}:focus`,!1),e.startsWith("gitlens:webview:")&&(0,n.v)(`${e}:active`,!1)}function v(e,t,i,r){(0,n.v)(`${e}:visible`,!0),e.startsWith("gitlens:webview:")&&null!=t&&((0,n.v)(`${e}:active`,t),t||(i=!1,r=!1)),null!=i&&(0,n.v)(`${e}:focus`,i),null!=r&&(0,n.v)(`${e}:inputFocus`,r)}function y(e,t,i,s=!1){let o=!1;for(const[n,a]of Object.entries(i)){const i=e[n];!s&&(i instanceof r.Uri||a instanceof r.Uri)&&i?.toString()===a?.toString()||(s||i!==a||void 0===a&&!(n in e)||null!=t&&n in t)&&(null==t&&(t={}),t[n]=a,o=!0)}return[o,t]}d([(0,a.fF)({args:!1})],g.prototype,"show",1),d([(0,a.fF)()],g.prototype,"refresh",1),d([(0,a.fF)()],g.prototype,"onParentDisposed",1),d([(0,a.fF)({args:{0:e=>null!=e?`${e.id}: method=${e.method}`:"<undefined>"}})],g.prototype,"onMessageReceivedCore",1),d([(0,a.fF)({args:{0:e=>`focused=${e.focused}, inputFocused=${e.inputFocused}`}})],g.prototype,"onViewFocusChanged",1),d([(0,a.fF)()],g.prototype,"onParentVisibilityChanged",1),d([(e,t,i)=>{let r;if("function"==typeof i.value?r=i.value:"function"==typeof i.get&&(r=i.get),void 0===r)throw new Error("Not supported");const s=`$serialize$${t}`;i.value=function(...e){Object.prototype.hasOwnProperty.call(this,s)||Object.defineProperty(this,s,{configurable:!1,enumerable:!1,writable:!0,value:void 0});let t=this[s];const i=async()=>await r.apply(this,e);return t=null==t?i():t.then(i,i),this[s]=t,t}},(0,a.fF)({args:{0:e=>`{"id":${e.id},"method":${e.method}${e.completionId?`,"completionId":${e.completionId}`:""}}`}})],g.prototype,"postMessage",1),g=d([(0,a.hJ)((e=>`WebviewController(${e.id})`))],g)},620:(e,t,i)=>{i.d(t,{V:()=>WebviewsController,W:()=>m});var r=i(9496),s=i(2215),o=i(9529),n=i(4241),a=i(4336),c=i(6004),l=i(9701);class WebviewCommandRegistrar{_commandRegistrations=new Map;dispose(){this._commandRegistrations.forEach((({subscription:e})=>{e.dispose()}))}registerCommand(e,t,i,r){let s=this._commandRegistrations.get(i);if(null==s){const e=new Map;s={subscription:(0,o.vg)(i,((...t)=>{const r=t[0];if(!(0,l.s4)(r))return;const s=e.get(r.webview);if(null==s)throw new Error(`Unable to find Command '${i}' registration for Webview '${r.webview}'`);s.callback.call(s.thisArg,r)}),this),handlers:e},this._commandRegistrations.set(i,s)}if(s.handlers.has(t))throw new Error(`Command '${i}' has already been registered for Webview '${t}'`);return s.handlers.set(t,{callback:r,thisArg:e}),{dispose:()=>{s.handlers.delete(t),0===s.handlers.size&&(this._commandRegistrations.delete(i),s.subscription.dispose())}}}}var h=i(6260),u=Object.defineProperty,d=Object.getOwnPropertyDescriptor,p=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?d(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&u(t,i,o),o};class WebviewsController{constructor(e){this.container=e,this.disposables.push(this._commandRegistrar=new WebviewCommandRegistrar)}disposables=[];_commandRegistrar;_panels=new Map;_views=new Map;dispose(){this.disposables.forEach((e=>{e.dispose()}))}registerWebviewView(e,t,i){const n=(0,c.UH)(),l={descriptor:e};this._views.set(e.id,l);const u=[];u.push(r.window.registerWebviewViewProvider(e.id,{resolveWebviewView:async(o,c,d)=>{if(null!=i&&!1===await i())return;if(l.descriptor.plusFeature){if(!await(0,s.C)())return;if(d.isCancellationRequested)return}a.Yd.debug(n,`Resolving webview view (${e.id})`),o.webview.options={enableCommandUris:!0,enableScripts:!0,localResourceRoots:[r.Uri.file(this.container.context.extensionPath)],...e.webviewOptions},o.title=e.title;const p=await h.wU.create(this.container,this._commandRegistrar,e,o,t);l.controller?.dispose(),l.controller=p,u.push(p.onDidDispose((()=>{a.Yd.debug(n,`Disposing webview view (${e.id})`),l.pendingShowArgs=void 0,l.controller=void 0})),p);let g=l.pendingShowArgs;l.pendingShowArgs=void 0,null==g&&m(c)&&(g=[void 0,c]),null!=g?await p.show(!0,...g):await p.show(!0)}},null!=e.webviewHostOptions?{webviewOptions:e.webviewHostOptions}:void 0));const d=r.Disposable.from(...u);return this.disposables.push(d),{id:e.id,get ready(){return l.controller?.ready??!1},get visible(){return l.controller?.visible??!1},dispose:function(){d.dispose()},refresh:async e=>l.controller?.refresh(e),show:async(t,...i)=>{null==l.controller?(a.Yd.debug(n,`Showing webview view (${e.id})`),l.pendingShowArgs=[t,...i],(0,o.dO)(`${e.id}.focus`,t)):l.controller.show(!1,t,...i)}}}registerWebviewPanel(e,t,i,n){const l=(0,c.UH)(),u={descriptor:t};this._panels.set(t.id,u);const d=[],{container:p,_commandRegistrar:m}=this;let g;async function f(e,...t){if(null!=n&&!1===await n())return;const{descriptor:o}=u;if(o.plusFeature&&!await(0,s.C)())return;p.usage.track(`${o.trackingFeature}:shown`);let c=e?.column??o.column??r.ViewColumn.Beside;c===r.ViewColumn.Beside&&null==r.window.tabGroups.activeTabGroup.activeTab&&(c=r.ViewColumn.Active);let{controller:f}=u;if(null==f){let s;null!=g?(a.Yd.debug(l,`Restoring webview panel (${o.id})`),s=g,g=void 0):(a.Yd.debug(l,`Creating webview panel (${o.id})`),s=r.window.createWebviewPanel(o.id,o.title,{viewColumn:c,preserveFocus:e?.preserveFocus??!1},{enableCommandUris:!0,enableScripts:!0,localResourceRoots:[r.Uri.file(p.context.extensionPath)],...o.webviewOptions,...o.webviewHostOptions})),s.iconPath=r.Uri.file(p.context.asAbsolutePath(o.iconPath)),f=await h.wU.create(p,m,o,s,i),u.controller=f,d.push(f.onDidDispose((()=>{a.Yd.debug(l,`Disposing webview panel (${o.id})`),u.controller=void 0})),f),await f.show(!0,e,...t)}else a.Yd.debug(l,`Showing webview panel (${o.id})`),await f.show(!1,e,...t)}const w=r.Disposable.from(...d,r.window.registerWebviewPanelSerializer(t.id,{deserializeWebviewPanel:async function(e,t){g=e,null!=t?await f({column:e.viewColumn,preserveFocus:!0},{state:t}):await f({column:e.viewColumn,preserveFocus:!0})}}),(0,o.xR)(e,((...e)=>f(void 0,...e)),this));return this.disposables.push(w),{id:t.id,get ready(){return u.controller?.ready??!1},get visible(){return u.controller?.visible??!1},dispose:function(){w.dispose()},close:()=>{u.controller?.parent.dispose()},refresh:async e=>u.controller?.refresh(e),show:f}}}function m(e){return null!=e&&"object"==typeof e&&"state"in e&&null!=e.state&&"object"==typeof e.state}p([(0,n.fF)({args:{0:e=>e.id,1:!1,2:!1}})],WebviewsController.prototype,"registerWebviewView",1),p([(0,n.fF)({args:{0:e=>e,1:e=>e.id,2:!1,3:!1}})],WebviewsController.prototype,"registerWebviewPanel",1)},9146:function(e,t,i){var r=this&&this.__awaiter||function(e,t,i,r){return new(i||(i=Promise))((function(s,o){function n(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(n,a)}c((r=r.apply(e,t||[])).next())}))},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=s(i(1808)),n=s(i(4404)),a=s(i(7310)),c=s(i(9491)),l=s(i(1957)),h=i(8054),u=s(i(9829)),d=l.default("https-proxy-agent:agent");class HttpsProxyAgent extends h.Agent{constructor(e){let t;if(t="string"==typeof e?a.default.parse(e):e,!t)throw new Error("an HTTP(S) proxy server `host` and `port` must be specified!");d("creating new HttpsProxyAgent instance: %o",t),super(t);const i=Object.assign({},t);var r;this.secureProxy=t.secureProxy||"string"==typeof(r=i.protocol)&&/^https:?$/i.test(r),i.host=i.hostname||i.host,"string"==typeof i.port&&(i.port=parseInt(i.port,10)),!i.port&&i.host&&(i.port=this.secureProxy?443:80),this.secureProxy&&!("ALPNProtocols"in i)&&(i.ALPNProtocols=["http 1.1"]),i.host&&i.path&&(delete i.path,delete i.pathname),this.proxy=i}callback(e,t){return r(this,void 0,void 0,(function*(){const{proxy:i,secureProxy:r}=this;let s;r?(d("Creating `tls.Socket`: %o",i),s=n.default.connect(i)):(d("Creating `net.Socket`: %o",i),s=o.default.connect(i));const a=Object.assign({},i.headers);let l=`CONNECT ${`${t.host}:${t.port}`} HTTP/1.1\r\n`;i.auth&&(a["Proxy-Authorization"]=`Basic ${Buffer.from(i.auth).toString("base64")}`);let{host:h,port:m,secureEndpoint:g}=t;(function(e,t){return Boolean(!t&&80===e||t&&443===e)})(m,g)||(h+=`:${m}`),a.Host=h,a.Connection="close";for(const e of Object.keys(a))l+=`${e}: ${a[e]}\r\n`;const f=u.default(s);s.write(`${l}\r\n`);const{statusCode:w,buffered:v}=yield f;if(200===w){if(e.once("socket",p),t.secureEndpoint){d("Upgrading socket connection to TLS");const e=t.servername||t.host;return n.default.connect(Object.assign(Object.assign({},function(e,...t){const i={};let r;for(r in e)t.includes(r)||(i[r]=e[r]);return i}(t,"host","hostname","path","port")),{socket:s,servername:e}))}return s}s.destroy();const y=new o.default.Socket({writable:!1});return y.readable=!0,e.once("socket",(e=>{d("replaying proxy buffer for failed request"),c.default(e.listenerCount("data")>0),e.push(v),e.push(null)})),y}))}}function p(e){e.resume()}t.default=HttpsProxyAgent},6018:function(e,t,i){const r=(this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}})(i(9146));function s(e){return new r.default(e)}!function(e){e.HttpsProxyAgent=r.default,e.prototype=r.default.prototype}(s||(s={})),e.exports=s},9829:function(e,t,i){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(i(1957)).default("https-proxy-agent:parse-proxy-response");t.default=function(e){return new Promise(((t,i)=>{let r=0;const o=[];function n(){const i=e.read();i?function(e){o.push(e),r+=e.length;const i=Buffer.concat(o,r);if(-1===i.indexOf("\r\n\r\n"))return s("have not received end of HTTP headers yet..."),void n();const a=i.toString("ascii",0,i.indexOf("\r\n")),c=+a.split(" ")[1];s("got proxy server response: %o",a),t({statusCode:c,buffered:i})}(i):e.once("readable",n)}function a(e){s("onclose had error %o",e)}function c(){s("onend")}function l(t){e.removeListener("end",c),e.removeListener("error",l),e.removeListener("close",a),e.removeListener("readable",n),s("onerror %o",t),i(t)}e.on("error",l),e.on("close",a),e.on("end",c),n()}))}},1957:(e,t,i)=>{function r(){return function(){}}i.r(t),i.d(t,{default:()=>r})},8897:(e,t,i)=>{t.URL=i(7310).URL},9496:e=>{e.exports=require("vscode")},9491:e=>{e.exports=require("assert")},4300:e=>{e.exports=require("buffer")},2361:e=>{e.exports=require("events")},3685:e=>{e.exports=require("http")},5687:e=>{e.exports=require("https")},1808:e=>{e.exports=require("net")},2037:e=>{e.exports=require("os")},1017:e=>{e.exports=require("path")},4074:e=>{e.exports=require("perf_hooks")},7282:e=>{e.exports=require("process")},2781:e=>{e.exports=require("stream")},1576:e=>{e.exports=require("string_decoder")},4404:e=>{e.exports=require("tls")},7310:e=>{e.exports=require("url")},5206:e=>{e.exports=require("zlib")}},s={};function o(e){var t=s[e];if(void 0!==t)return t.exports;var i=s[e]={exports:{}};return r[e].call(i.exports,i,i.exports,o),i.exports}o.m=r,o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(i,r){if(1&r&&(i=this(i)),8&r)return i;if("object"==typeof i&&i){if(4&r&&i.__esModule)return i;if(16&r&&"function"==typeof i.then)return i}var s=Object.create(null);o.r(s);var n={};e=e||[null,t({}),t([]),t(t)];for(var a=2&r&&i;"object"==typeof a&&!~e.indexOf(a);a=t(a))Object.getOwnPropertyNames(a).forEach((e=>n[e]=()=>i[e]));return n.default=()=>i,o.d(s,n),s},o.d=(e,t)=>{for(var i in t)o.o(t,i)&&!o.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((t,i)=>(o.f[i](e,t),t)),[])),o.u=e=>"feature-"+{10:"commitDetails",177:"home",278:"annotations-heatmap",429:"encoding",449:"gitlab",457:"github",477:"codelens",519:"annotations-blame",521:"focus",571:"settings",773:"welcome",786:"graph",809:"account",817:"annotations-changes",831:"timeline",913:"telemetry"}[e]+".js",o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i={898:1},o.f.require=(e,t)=>{i[e]||(e=>{var t=e.modules,r=e.ids,s=e.runtime;for(var n in t)o.o(t,n)&&(o.m[n]=t[n]);s&&s(o);for(var a=0;a<r.length;a++)i[r[a]]=1})(require("./"+o.u(e)))};var n={};(()=>{o.r(n),o.d(n,{activate:()=>rs,deactivate:()=>ss});var e=o(9496),t=o(4372),i=o(7338),r=o(3599),s=o(8294);Object.freeze({dispose:()=>{}});class Api{#i;constructor(e){this.#i=e}registerActionRunner(e,t){if(t.name===s.vj)throw new Error(`Cannot use the reserved name '${s.vj}'`);return"hover.commandHelp"===e&&(e="hover.commands"),this.#i.actionRunners.register(e,t)}}var a=o(2540),c=o(5255),l=o(7462),h=o(5367),u=o(6450),d=o(3646),p=o(9502),m=o(7925),g=o(9529);function f(e){!function(e){e.subscriptions.push(r.W.instance.actionRunners.registerBuiltInPartner("liveshare","hover.commands",{name:"Live Share",label:e=>"hover.commands"===e.type&&"You"!==e.commit.author.name?`$(live-share) Invite ${e.commit.author.name}${e.commit.author.presence?.statusText?` (${e.commit.author.presence?.statusText})`:""} to a Live Share Session`:"$(live-share) Start a Live Share Session",run:async e=>{"hover.commands"===e.type&&"You"!==e.commit.author.name?await(0,g.P0)(c.Gh.InviteToLiveShare,{email:e.commit.author.email}):await(0,g.P0)(c.Gh.InviteToLiveShare,{})}}))}(e)}var w=o(5148),v=o(2061),y=o(7512),b=o(2185),C=o(4336),A=o(9967),k=o(6398),P=o(4241),S=Object.defineProperty,D=Object.getOwnPropertyDescriptor,R=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?D(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&S(t,i,o),o};class Storage{constructor(e){this.context=e,this._disposable=this.context.secrets.onDidChange((e=>this._onDidChangeSecrets.fire(e)))}_onDidChange=new e.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeSecrets=new e.EventEmitter;get onDidChangeSecrets(){return this._onDidChangeSecrets.event}_disposable;dispose(){this._disposable.dispose()}get(e,t){return this.context.globalState.get(`${c.m1}:${e}`,t)}async delete(e){await this.context.globalState.update(`${c.m1}:${e}`,void 0),this._onDidChange.fire({key:e,workspace:!1})}async deleteWithPrefix(e){const t=`${c.m1}:${e}`,i=`${t}:`;for(const e of this.context.globalState.keys())(e===t||e.startsWith(i))&&(await this.context.globalState.update(e,void 0),this._onDidChange.fire({key:e,workspace:!1}))}async store(e,t){await this.context.globalState.update(`${c.m1}:${e}`,t),this._onDidChange.fire({key:e,workspace:!1})}async getSecret(e){return this.context.secrets.get(e)}async deleteSecret(e){return this.context.secrets.delete(e)}async storeSecret(e,t){return this.context.secrets.store(e,t)}getWorkspace(e,t){return this.context.workspaceState.get(`${c.m1}:${e}`,t)}async deleteWorkspace(e){await this.context.workspaceState.update(`${c.m1}:${e}`,void 0),this._onDidChange.fire({key:e,workspace:!0})}async deleteWorkspaceWithPrefix(e){const t=`${c.m1}:${e}`,i=`${t}:`;for(const e of this.context.workspaceState.keys())(e===t||e.startsWith(i))&&(await this.context.workspaceState.update(e,void 0),this._onDidChange.fire({key:e,workspace:!0}))}async storeWorkspace(e,t){await this.context.workspaceState.update(`${c.m1}:${e}`,t),this._onDidChange.fire({key:e,workspace:!0})}}R([(0,P.fF)({logThreshold:50})],Storage.prototype,"get",1),R([(0,P.fF)({logThreshold:250})],Storage.prototype,"delete",1),R([(0,P.fF)({logThreshold:250})],Storage.prototype,"deleteWithPrefix",1),R([(0,P.fF)({args:{1:!1},logThreshold:250})],Storage.prototype,"store",1),R([(0,P.fF)({args:!1,logThreshold:250})],Storage.prototype,"getSecret",1),R([(0,P.fF)({args:!1,logThreshold:250})],Storage.prototype,"deleteSecret",1),R([(0,P.fF)({args:!1,logThreshold:250})],Storage.prototype,"storeSecret",1),R([(0,P.fF)({logThreshold:25})],Storage.prototype,"getWorkspace",1),R([(0,P.fF)({logThreshold:250})],Storage.prototype,"deleteWorkspace",1),R([(0,P.fF)({logThreshold:250})],Storage.prototype,"deleteWorkspaceWithPrefix",1),R([(0,P.fF)({args:{1:!1},logThreshold:250})],Storage.prototype,"storeWorkspace",1);var $=o(4550),_=o(6922),F=o(9311),T=o(7139),x=Object.defineProperty,I=Object.getOwnPropertyDescriptor;let O=class extends T.mY{constructor(e){super(c.Gh.AddAuthors),this.container=e}execute(e){let t;return null!=e?.rootUri&&(t=this.container.git.getRepository(e.rootUri)),(0,F.m)({command:"co-authors",state:{repo:t,contributors:void 0}})}};O=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?I(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&x(t,i,o),o})([(0,g.WD)()],O);var B=o(3700),E=o(2509),W=Object.defineProperty,N=Object.getOwnPropertyDescriptor;let M=class extends T.pu{constructor(e){super([c.Gh.BrowseRepoAtRevision,c.Gh.BrowseRepoAtRevisionInNewWindow,c.Gh.BrowseRepoBeforeRevision,c.Gh.BrowseRepoBeforeRevisionInNewWindow]),this.container=e}preExecute(e,t){switch(e.command){case c.Gh.BrowseRepoAtRevisionInNewWindow:t={...t,before:!1,openInNewWindow:!0};break;case c.Gh.BrowseRepoBeforeRevision:t={...t,before:!0,openInNewWindow:!1};break;case c.Gh.BrowseRepoBeforeRevisionInNewWindow:t={...t,before:!0,openInNewWindow:!0}}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){i={...i};try{if(null==i.uri){if(null==(t=(0,T.SX)(t,e)))return}else t=i.uri;let r=await l.YY.fromUri(t);if(null==r.sha)return;const s=i?.before?await this.container.git.resolveReference(r.repoPath,`${r.sha}^`):r.sha;t=this.container.git.getRevisionUri(s,r.repoPath,r.repoPath),r=l.YY.fromRevisionUri(t),(0,E.ic)(t,{location:i.openInNewWindow?"newWindow":"addToWorkspace",name:`${(0,B.EZ)(r.repoPath)} @ ${r.shortSha}`}),i.openInNewWindow||(0,g.dO)("workbench.files.action.focusFilesExplorer")}catch(e){C.Yd.error(e,"BrowseRepoAtRevisionCommand"),(0,m.W8)("Unable to open the repository at the specified revision")}}};M=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?N(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&W(t,i,o),o})([(0,g.WD)()],M);var U=o(635),L=o(4298),G=Object.defineProperty,H=Object.getOwnPropertyDescriptor;let V=class extends T.mY{constructor(e){super(c.Gh.CloseUnchangedFiles),this.container=e}async execute(t){t={...t};try{if(null==t.uris){const i=await(0,U.vJ)("Close All Unchanged Files");if(null==i)return;const r=await this.container.git.getStatusForRepo(i.uri);if(null==r)return void e.window.showWarningMessage("Unable to close unchanged files");t.uris=r.files.map((e=>e.uri))}const i=0===t.uris.length;for(const r of e.window.tabGroups.all)for(const s of r.tabs)if(s.input instanceof e.TabInputText||s.input instanceof e.TabInputCustom||s.input instanceof e.TabInputNotebook){const r=s.input.uri;!i&&t.uris.some((e=>L.n.equals(e,r)))||e.window.tabGroups.close(s,!0)}else if(s.input instanceof e.TabInputTextDiff||s.input instanceof e.TabInputNotebookDiff){const r=s.input.modified;!i&&t.uris.some((e=>L.n.equals(e,r)))||e.window.tabGroups.close(s,!0)}}catch(e){C.Yd.error(e,"CloseUnchangedFilesCommand"),(0,m.W8)("Unable to close all unchanged files")}}};V=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?H(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&G(t,i,o),o})([(0,g.WD)()],V);var Y=Object.defineProperty,Q=Object.getOwnPropertyDescriptor;let q=class extends T.pu{constructor(e){super([c.Gh.CompareWith,c.Gh.CompareHeadWith,c.Gh.CompareWorkingWith,c.Gh.Deprecated_DiffHeadWith,c.Gh.Deprecated_DiffWorkingWith]),this.container=e}preExecute(e,t){switch(e.command){case c.Gh.CompareWith:t={...t};break;case c.Gh.CompareHeadWith:case c.Gh.Deprecated_DiffHeadWith:(t={...t}).ref1="HEAD";break;case c.Gh.CompareWorkingWith:case c.Gh.Deprecated_DiffWorkingWith:(t={...t}).ref1=""}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=(0,T.SX)(t,e),i={...i};try{let r;switch(i.ref1){case null:r="Compare";break;case"":r="Compare Working Tree with";break;case"HEAD":r="Compare HEAD with";break;default:r=`Compare ${i.ref1} with`}const s=(await(0,U.hM)(t,e,r))?.path;if(!s)return;null!=i.ref1&&null!=i.ref2?await this.container.searchAndCompareView.compare(s,i.ref1,i.ref2):this.container.searchAndCompareView.selectForCompare(s,i.ref1,{prompt:!0})}catch(e){C.Yd.error(e,"CompareWithCommmand"),(0,m.W8)("Unable to open comparison")}}};q=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Q(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Y(t,i,o),o})([(0,g.WD)()],q);var j=Object.defineProperty,z=Object.getOwnPropertyDescriptor;let K=class extends T.pu{constructor(e){super(c.Gh.CopyCurrentBranch),this.container=e}async execute(t,i){const r=null!=(i=(0,T.SX)(i,t))?await l.YY.fromUri(i):void 0,s=await(0,U.hM)(r,t,"Copy Current Branch Name");if(null!=s)try{const t=await s.getBranch();t?.name&&await e.env.clipboard.writeText(t.name)}catch(e){C.Yd.error(e,"CopyCurrentBranchCommand"),(0,m.W8)("Unable to copy current branch name")}}};K=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?z(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&j(t,i,o),o})([(0,g.WD)()],K);var J=o(3016),Z=o(1742);var X=o(4043),ee=Object.defineProperty,te=Object.getOwnPropertyDescriptor;let ie=class extends T.pu{constructor(e){super([c.Gh.CopyDeepLinkToBranch,c.Gh.CopyDeepLinkToCommit,c.Gh.CopyDeepLinkToRepo,c.Gh.CopyDeepLinkToTag,c.Gh.CopyDeepLinkToComparison,c.Gh.CopyDeepLinkToWorkspace]),this.container=e}preExecute(e,t){return null==t&&((0,T.en)(e)?t={refOrRepoPath:e.node.commit}:(0,T.Qo)(e)?t={refOrRepoPath:e.node.branch}:(0,T._5)(e)?t={refOrRepoPath:e.node.tag}:(0,T.C$)(e)?t={refOrRepoPath:e.node.remote.repoPath,remote:e.node.remote.name}:(0,T.F4)(e)?t={refOrRepoPath:e.node.uri.fsPath,compareRef:e.node.compareRef,compareWithRef:e.node.compareWithRef}:(0,T.Bu)(e)&&(t={workspaceId:e.node.workspace.id})),this.execute(e.editor,e.uri,t)}async execute(t,i,r){if(null!=(r={...r}).workspaceId){try{await this.container.deepLinks.copyDeepLinkUrl(r.workspaceId)}catch(e){C.Yd.error(e,"CopyDeepLinkCommand"),(0,m.W8)("Unable to copy link")}return}let s,o;if(null==r?.refOrRepoPath){const e=null!=(i=(0,T.SX)(i,t))?await l.YY.fromUri(i):void 0;s=X._n.Repository,o=(await(0,U.hM)(e,t,`Copy Link to ${(0,X.$k)(s)}`))?.path}else"string"==typeof r.refOrRepoPath?(s=null==r.compareRef?X._n.Repository:X._n.Comparison,o=r.refOrRepoPath,r.refOrRepoPath=void 0):(s=(0,X.$x)(r.refOrRepoPath.refType),o=r.refOrRepoPath.repoPath);if(o){if(!r.remote&&"branch"===r.refOrRepoPath?.refType&&(r.refOrRepoPath.remote||null!=r.refOrRepoPath.upstream?.name)){const[e,t]=(0,h.$q)(r.refOrRepoPath);null!=e&&null!=t&&(r.remote=t,r.prePickRemote=!0)}try{let t;const i=await this.container.git.getRemotes(o,{sort:!0}),n=i.find((e=>e.default));if(r.remote&&!r.prePickRemote)t=i.find((e=>e.name===r?.remote));else if(null!=n)t=n;else{const o=await async function(t,i="Choose a remote",r,s){const o=[];let n;if(0===r.length)i="No remotes found";else{if("default"===s?.autoPick&&r.length>1){const e=r.find((e=>e.default));null!=e&&(r=[e])}const e={upstream:!0,buttons:s?.setDefault?[J.ip]:void 0};for(const t of r)o.push((0,Z.vl)(t,void 0,e)),t.name===s?.picked&&(n=o[o.length-1])}if(s?.autoPick&&1===r.length)return o[0];const a=e.window.createQuickPick();a.ignoreFocusOut=(0,E.hE)();const c=[];try{const e=await new Promise((e=>{c.push(a.onDidHide((()=>e(void 0))),a.onDidAccept((()=>{0!==a.activeItems.length&&e(a.activeItems[0])})),a.onDidTriggerItemButton((async t=>{t.button===J.ip&&(await t.item.item.setAsDefault(),e(t.item))}))),a.title=t,a.placeholder=i,a.matchOnDetail=!0,a.items=o,null!=n&&(a.activeItems=[n]),a.show()}));if(null==e)return;return e}finally{a.dispose(),c.forEach((e=>{e.dispose()}))}}(`Copy Link to ${(0,X.$k)(s)}`,"Choose which remote to copy the link for",i,{autoPick:!0,picked:r.remote,setDefault:!0});if(null==o)return;t=o.item}if(null==t)return;null==r.refOrRepoPath?await this.container.deepLinks.copyDeepLinkUrl(o,t.url,r.compareRef,r.compareWithRef):await this.container.deepLinks.copyDeepLinkUrl(r.refOrRepoPath,t.url)}catch(e){C.Yd.error(e,"CopyDeepLinkCommand"),(0,m.W8)("Unable to copy link")}}}};ie=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?te(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ee(t,i,o),o})([(0,g.WD)()],ie);var re=o(6897),se=o(3105),oe=Object.defineProperty,ne=Object.getOwnPropertyDescriptor;let ae=class extends T.pu{constructor(e){super(c.Gh.CopyMessageToClipboard),this.container=e}async preExecute(e,t){return(0,T.en)(e)?((t={...t}).sha=e.node.commit.sha,null!=e.node.commit.message&&await e.node.commit.ensureFullDetails(),t.message=e.node.commit.message,this.execute(e.editor,e.node.commit.file?.uri??e.node.commit.getRepository()?.uri,t)):(0,T.Qo)(e)?((t={...t}).sha=e.node.branch.sha,this.execute(e.editor,e.node.uri,t)):(0,T._5)(e)?((t={...t}).sha=e.node.tag.sha,this.execute(e.editor,e.node.uri,t)):this.execute(e.editor,e.uri,t)}async execute(t,i,r){i=(0,T.SX)(i,t),r={...r};try{if(!r.message){if(null!=r.repoPath&&null!=r.sha)return void await(0,re.SJ)({ref:r.sha,repoPath:r.repoPath});let e;if(null==i){if(e=this.container.git.getBestRepository(t)?.path,!e)return;const i=await this.container.git.getLog(e,{limit:1});if(null==i)return;const s=(0,se.Ps)(i.commits.values());if(null==s?.message)return;r.message=s.message}else if(null==r.message){const s=await l.YY.fromUri(i);if(e=s.repoPath,!e)return;if(null!=r.sha)return void await(0,re.SJ)({ref:r.sha,repoPath:e});{const e=t?.selection.active.line??0;if(e<0)return;try{const i=await this.container.git.getBlameForLine(s,e,t?.document);if(null==i||i.commit.isUncommitted)return;return void await(0,re.SJ)(i.commit)}catch(t){return C.Yd.error(t,"CopyMessageToClipboardCommand",`getBlameForLine(${e})`),void(0,m.W8)("Unable to copy message")}}}}await e.env.clipboard.writeText(r.message)}catch(e){C.Yd.error(e,"CopyMessageToClipboardCommand"),(0,m.W8)("Unable to copy message")}}};ae=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ne(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&oe(t,i,o),o})([(0,g.WD)()],ae);var ce=o(4321),le=Object.defineProperty,he=Object.getOwnPropertyDescriptor;let ue=class extends T.pu{constructor(e){super(c.Gh.CopyShaToClipboard),this.container=e}preExecute(e,t){return(0,T.en)(e)?((t={...t}).sha=e.node.commit.sha,this.execute(e.editor,e.node.commit.file?.uri??e.node.commit.getRepository()?.uri,t)):(0,T.Qo)(e)?((t={...t}).sha=e.node.branch.sha,this.execute(e.editor,e.node.uri,t)):(0,T._5)(e)?((t={...t}).sha=e.node.tag.sha,this.execute(e.editor,e.node.uri,t)):this.execute(e.editor,e.uri,t)}async execute(t,i,r){i=(0,T.SX)(i,t),r={...r};try{if(!r.sha)if(null==i){const e=this.container.git.getBestRepository(t)?.path;if(!e)return;const i=await this.container.git.getLog(e,{limit:1});if(null==i)return;if(r.sha=(0,se.Ps)(i.commits.values())?.sha,null==r.sha)return}else if(null==r.sha){const e=t?.selection.active.line??0;if(e<0)return;try{const s=await l.YY.fromUri(i),o=await this.container.git.getBlameForLine(s,e,t?.document);if(null==o)return;r.sha=o.commit.sha}catch(t){return C.Yd.error(t,"CopyShaToClipboardCommand",`getBlameForLine(${e})`),void(0,m.W8)("Unable to copy commit SHA")}}await e.env.clipboard.writeText(w.D.get("advanced.abbreviateShaOnCopy")?(0,ce.zL)(r.sha):r.sha)}catch(e){C.Yd.error(e,"CopyShaToClipboardCommand"),(0,m.W8)("Unable to copy commit SHA")}}};ue=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?he(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&le(t,i,o),o})([(0,g.WD)()],ue);var de=Object.defineProperty,pe=Object.getOwnPropertyDescriptor;let me=class extends T.pu{constructor(e){super(c.Gh.CopyRelativePathToClipboard),this.container=e}preExecute(e){return(0,T.d$)(e)?this.execute(e.editor,e.node.commit.file.uri):this.execute(e.editor,e.uri)}async execute(t,i){let r="";if(null!=(i=(0,T.SX)(i,t))){const e=this.container.git.getBestRepository(t)?.uri;null!=e&&(r=this.container.git.getRelativePath(i,e))}await e.env.clipboard.writeText(r)}};me=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?pe(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&de(t,i,o),o})([(0,g.WD)()],me);var ge=o(6503),fe=Object.defineProperty,we=Object.getOwnPropertyDescriptor;let ve=class extends T.mY{constructor(e){super(c.Gh.CreatePullRequestOnRemote),this.container=e}async execute(e){if(null==e?.repoPath)return;const t=this.container.git.getRepository(e.repoPath);if(null==t)return;const i=await t.getRemote(e.remote);if(null==i?.provider)return;const r=i.provider.id,s=await t.getRemotes({filter:e=>e.provider?.id===r}),o={type:ge.J.CreatePullRequest,base:{branch:e.base,remote:void 0},compare:{branch:e.compare,remote:{path:i.path,url:i.url}}};await(0,g.P0)(c.Gh.OpenOnRemote,{resource:o,remotes:s})}};ve=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?we(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&fe(t,i,o),o})([(0,g.WD)()],ve);var ye=o(3636),be=o(5538),Ce=Object.defineProperty,Ae=Object.getOwnPropertyDescriptor;let ke=class extends T.pu{constructor(e){super([c.Gh.DiffDirectory,c.Gh.DiffDirectoryWithHead,c.Gh.ViewsOpenDirectoryDiff,c.Gh.ViewsOpenDirectoryDiffWithWorking]),this.container=e}async preExecute(e,t){switch(e.command){case c.Gh.DiffDirectoryWithHead:(t={...t}).ref1="HEAD",t.ref2=void 0;break;case c.Gh.ViewsOpenDirectoryDiff:"viewItem"===e.type&&e.node instanceof be.fc&&(t={...t},[t.ref1,t.ref2]=await e.node.getDiffRefs());break;case c.Gh.ViewsOpenDirectoryDiffWithWorking:(0,T.DW)(e)&&((t={...t}).ref1=e.node.ref.ref,t.ref2=void 0)}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=(0,T.SX)(t,e),i={...i};try{const r=(await(0,U.hM)(t,e,"Directory Compare Working Tree With"))?.path;if(!r)return;if(!i.ref1){const e=await(0,ye.V)(r,"Directory Compare Working Tree with","Choose a branch or tag to compare with",{allowEnteringRefs:!0});if(null==e)return;if(i.ref1=e.ref,null==i.ref1)return}(0,re.iK)(r,i.ref1,i.ref2)}catch(e){C.Yd.error(e,"OpenDirectoryCompareCommand"),(0,m.W8)("Unable to open directory compare")}}};ke=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Ae(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Ce(t,i,o),o})([(0,g.WD)()],ke);var Pe=Object.defineProperty,Se=Object.getOwnPropertyDescriptor;let De=class extends T.pu{constructor(e){super(c.Gh.DiffLineWithPrevious),this.container=e}preExecute(e,t){return"editorLine"===e.type&&(t={...t,line:e.line}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=(0,T.SX)(t,e)))return;null==(i={...i}).line&&(i.line=e?.selection.active.line??0);const r=i.commit?.getGitUri()??await l.YY.fromUri(t);try{const e=await this.container.git.getPreviousComparisonUrisForLine(r.repoPath,r,i.line,r.sha);if(null==e?.previous)return void(0,m.RR)();await(0,g.P0)(c.Gh.DiffWith,{repoPath:e.current.repoPath,lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},line:e.line,showOptions:i.showOptions})}catch(e){C.Yd.error(e,"DiffLineWithPreviousCommand",`getPreviousLineDiffUris(${r.repoPath}, ${r.fsPath}, ${r.sha})`),(0,m.W8)("Unable to open compare")}}};De=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Se(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Pe(t,i,o),o})([(0,g.WD)()],De);var Re=o(439),$e=Object.defineProperty,_e=Object.getOwnPropertyDescriptor;let Fe=class extends T.pu{constructor(e){super(c.Gh.DiffLineWithWorking),this.container=e}preExecute(e,t){return"editorLine"===e.type&&(t={...t,line:e.line}),this.execute(e.editor,e.uri,t)}async execute(t,i,r){if(null==(i=(0,T.SX)(i,t)))return;const s=await l.YY.fromUri(i);let o,n;if(null==(r={...r}).line&&(r.line=t?.selection.active.line??0),null==r.commit||r.commit.isUncommitted){const e=r.line;if(e<0)return;try{const i=await this.container.git.getBlameForLine(s,e,t?.document);if(null==i)return void(0,m.zk)("Unable to open compare");if(r.commit=i.commit,r.commit.isUncommitted){const e=await this.container.git.getStatusForFile(s.repoPath,s);null!=e?.indexStatus?(o=Re.pw,n=this.container.git.getAbsoluteUri(e.originalPath||e.path,r.commit.repoPath)):(o=r.commit.unresolvedPreviousSha,n=r.commit.file.originalUri??r.commit.file.uri)}else o=r.commit.sha,n=r.commit.file.uri;r.line=i.line.line-1}catch(t){return C.Yd.error(t,"DiffLineWithWorkingCommand",`getBlameForLine(${e})`),void(0,m.W8)("Unable to open compare")}}else o=r.commit.sha,n=r.commit.file?.uri??s;const a=await(r.commit.file?.getWorkingUri());null!=a?await(0,g.P0)(c.Gh.DiffWith,{repoPath:r.commit.repoPath,lhs:{sha:o,uri:n},rhs:{sha:"",uri:a},line:r.line,showOptions:r.showOptions}):e.window.showWarningMessage("Unable to open compare. File has been deleted from the working tree")}};Fe=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?_e(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&$e(t,i,o),o})([(0,g.WD)()],Fe);o(1848);var Te=Object.defineProperty,xe=Object.getOwnPropertyDescriptor;let Ie=class extends T.pu{constructor(e){super([c.Gh.DiffWithNext,c.Gh.DiffWithNextInDiffLeft,c.Gh.DiffWithNextInDiffRight]),this.container=e}preExecute(e,t){return e.command===c.Gh.DiffWithNextInDiffLeft&&(t={...t,inDiffLeftEditor:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=(0,T.SX)(t,e)))return;null==(i={...i}).line&&(i.line=e?.selection.active.line??0);const r=i.commit?.getGitUri()??await l.YY.fromUri(t);try{const e=await this.container.git.getNextComparisonUris(r.repoPath,r,r.sha,i.inDiffLeftEditor?1:0);if(null==e?.next)return;await(0,g.P0)(c.Gh.DiffWith,{repoPath:e.current.repoPath,lhs:{sha:e.current.sha??"",uri:e.current.documentUri()},rhs:{sha:e.next.sha??"",uri:e.next.documentUri()},line:i.line,showOptions:i.showOptions})}catch(e){C.Yd.error(e,"DiffWithNextCommand",`getNextDiffUris(${r.repoPath}, ${r.fsPath}, ${r.sha})`),(0,m.W8)("Unable to open compare")}}};Ie=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?xe(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Te(t,i,o),o})([(0,g.WD)()],Ie);var Oe=Object.defineProperty,Be=Object.getOwnPropertyDescriptor;let Ee=class extends T.pu{constructor(e){super([c.Gh.DiffWithPrevious,c.Gh.DiffWithPreviousInDiffLeft,c.Gh.DiffWithPreviousInDiffRight]),this.container=e}preExecute(e,t){return e.command===c.Gh.DiffWithPreviousInDiffRight&&(t={...t,inDiffRightEditor:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(i={...i}).uri){if(null==(t=(0,T.SX)(t,e)))return}else t=i.uri;let r;if(null==i.line&&(i.line=e?.selection.active.line??0),null!=i.commit?.file){if(!i.commit.isUncommitted)return void await(0,g.P0)(c.Gh.DiffWith,{repoPath:i.commit.repoPath,lhs:{sha:`${i.commit.sha}^`,uri:i.commit.file.originalUri??i.commit.file.uri},rhs:{sha:"?"===i.commit.file.status?`${i.commit.sha}^3`:i.commit.sha||"",uri:i.commit.file.uri},line:i.line,showOptions:i.showOptions});r=i.commit?.getGitUri()}else r=await l.YY.fromUri(t);try{const e=await this.container.git.getPreviousComparisonUris(r.repoPath,r,r.sha,i.inDiffRightEditor?1:0);if(null==e?.previous){if(null==e)return void(0,m.RR)();if(null==e.current.sha)return void await(0,E.GR)(e.current,i.showOptions);if(!e.current.isUncommittedStaged)return void(0,m.RR)();e.previous=l.YY.fromFile(e.current.fileName,e.current.repoPath,Re.Ii)}await(0,g.P0)(c.Gh.DiffWith,{repoPath:e.current.repoPath,lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},line:i.line,showOptions:i.showOptions})}catch(e){C.Yd.error(e,"DiffWithPreviousCommand",`getPreviousDiffUris(${r.repoPath}, ${r.fsPath}, ${r.sha})`),(0,m.W8)("Unable to open compare")}}};Ee=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Be(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Oe(t,i,o),o})([(0,g.WD)()],Ee);var We=o(1857),Ne=o(9729),Me=o(4627),Ue=Object.defineProperty,Le=Object.getOwnPropertyDescriptor;let Ge=class extends T.pu{constructor(e){super(c.Gh.DiffWithRevision),this.container=e}async execute(e,t,i){if(null==(t=(0,T.SX)(t,e)))return;const r=await l.YY.fromUri(t);null==(i={...i}).line&&(i.line=e?.selection.active.line??0);try{const e=this.container.git.getLogForFile(r.repoPath,r.fsPath).then((e=>e??(r.sha?this.container.git.getLogForFile(r.repoPath,r.fsPath,{ref:r.sha}):void 0))),t=`Open Changes with Revision${(0,Me.vk)(c.NE.Dot,2,2)}`,s=await(0,We.D)(e,`${t}${r.getFormattedFileName({suffix:r.sha?`:${(0,ce.zL)(r.sha)}`:void 0,truncateTo:c.d$-t.length})}`,"Choose a commit to compare with",{picked:r.sha,keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await(0,g.P0)(c.Gh.DiffWith,{repoPath:r.repoPath,lhs:{sha:t.item.ref,uri:r},rhs:{sha:"",uri:r},line:i.line,showOptions:i.showOptions})},showOtherReferences:[Ne.$w.fromCommand("Choose a Branch or Tag...",c.Gh.DiffWithRevisionFrom),Ne.$w.fromCommand("Choose a Stash...",c.Gh.DiffWithRevisionFrom,{stash:!0})]});if(null==s)return;await(0,g.P0)(c.Gh.DiffWith,{repoPath:r.repoPath,lhs:{sha:s.ref,uri:r},rhs:{sha:"",uri:r},line:i.line,showOptions:i.showOptions})}catch(e){C.Yd.error(e,"DiffWithRevisionCommand"),(0,m.W8)("Unable to open compare")}}};Ge=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Le(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Ue(t,i,o),o})([(0,g.WD)()],Ge);var He=Object.defineProperty,Ve=Object.getOwnPropertyDescriptor;let Ye=class extends T.pu{constructor(e){super(c.Gh.DiffWithRevisionFrom),this.container=e}async execute(e,t,i){if(null==(t=(0,T.SX)(t,e)))return;const r=await l.YY.fromUri(t);if(!r.repoPath)return void(0,m.bi)("Unable to open file compare");null==(i={...i}).line&&(i.line=e?.selection.active.line??0);const s=this.container.git.getRelativePath(r,r.repoPath);let o,n,a,h;if(i?.stash){const e=`Open Changes with Stash${(0,Me.vk)(c.NE.Dot,2,2)}`,t=await(0,We.h)(this.container.git.getStash(r.repoPath),`${e}${r.getFormattedFileName({truncateTo:c.d$-e.length})}`,"Choose a stash to compare with",{empty:`No stashes with '${r.getFormattedFileName()}' found`,filter:e=>e.files?.some((e=>e.path===s||e.originalPath===s))??!0});if(null==t)return;o=t.ref,n=o}else{const e=`Open Changes with Branch or Tag${(0,Me.vk)(c.NE.Dot,2,2)}`,t=await(0,ye.V)(r.repoPath,`${e}${r.getFormattedFileName({truncateTo:c.d$-e.length})}`,"Choose a branch or tag to compare with",{allowEnteringRefs:!0});if(null==t)return;o=t.ref,n=(0,ce.UR)(t)&&t.remote?`remotes/${o}`:o}if(null==o)return;const u=await this.container.git.getDiffStatus(r.repoPath,"HEAD",o,{filters:["R","C"]});if(null!=u){const e=u.find((e=>e.path===s));null!=e?.originalPath&&(a=this.container.git.getAbsoluteUri(e.originalPath,r.repoPath),h=`${(0,B.EZ)(e.originalPath)} (${(0,ce.zL)(o)})`)}await(0,g.P0)(c.Gh.DiffWith,{repoPath:r.repoPath,lhs:{sha:n,uri:a??r,title:h??`${(0,B.EZ)(r.fsPath)} (${(0,ce.zL)(o)})`},rhs:{sha:"",uri:r},line:i.line,showOptions:i.showOptions})}};Ye=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Ve(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&He(t,i,o),o})([(0,g.WD)()],Ye);var Qe=Object.defineProperty,qe=Object.getOwnPropertyDescriptor;let je=class extends T.pu{constructor(e){super([c.Gh.DiffWithWorking,c.Gh.DiffWithWorkingInDiffLeft,c.Gh.DiffWithWorkingInDiffRight]),this.container=e}async execute(t,i,r){if(null==(r={...r}).uri){if(null==(i=(0,T.SX)(i,t)))return}else i=r.uri;let s=await l.YY.fromUri(i);if(null==r.line&&(r.line=t?.selection.active.line??0),r.inDiffRightEditor)try{const e=await this.container.git.getPreviousComparisonUris(s.repoPath,s,s.sha);s=e?.previous??s}catch(e){return C.Yd.error(e,"DiffWithWorkingCommand",`getPreviousDiffUris(${s.repoPath}, ${s.fsPath}, ${s.sha})`),void(0,m.W8)("Unable to open compare")}if(null==s.sha)return void e.window.showInformationMessage("File matches the working tree");if(s.sha===Re.Ii)return void e.window.showWarningMessage("Unable to open compare. File has been deleted from the working tree");if(s.isUncommittedStaged){const e=await this.container.git.getStatusForFile(s.repoPath,s);if(null!=e?.indexStatus)return void await(0,g.P0)(c.Gh.DiffWith,{repoPath:s.repoPath,lhs:{sha:Re.pw,uri:s.documentUri()},rhs:{sha:"",uri:s.documentUri()},line:r.line,showOptions:r.showOptions})}i=s.toFileUri();const o=await this.container.git.getWorkingUri(s.repoPath,i);null!=o?await(0,g.P0)(c.Gh.DiffWith,{repoPath:s.repoPath,lhs:{sha:s.sha,uri:i},rhs:{sha:"",uri:o},line:r.line,showOptions:r.showOptions}):e.window.showWarningMessage("Unable to open compare. File has been deleted from the working tree")}};je=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?qe(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Qe(t,i,o),o})([(0,g.WD)()],je);var ze=o(5640),Ke=(e=>(e[e.Merge=0]="Merge",e[e.Index=1]="Index",e[e.WorkingTree=2]="WorkingTree",e))(Ke||{}),Je=o(2800),Ze=Object.defineProperty,Xe=Object.getOwnPropertyDescriptor;let et=class extends T.mY{constructor(e){super([c.Gh.ExternalDiff,c.Gh.ExternalDiffAll]),this.container=e}async preExecute(t,i){if(i={...i},(0,T.d$)(t)){const e=await t.node.commit.getPreviousSha(),r=(0,ce.l3)(e)?"":e,s=t.node.commit.isUncommitted?"":t.node.commit.sha;return i.files=[{uri:l.YY.fromFile(t.node.file,t.node.file.repoPath??t.node.repoPath),staged:t.node.commit.isUncommittedStaged||null!=t.node.file.indexStatus,ref1:r,ref2:s}],this.execute(i)}if((0,T.O$)(t))return i.files=[{uri:l.YY.fromFile(t.node.file,t.node.file.repoPath??t.node.repoPath),staged:null!=t.node.file.indexStatus,ref1:t.node.ref1,ref2:t.node.ref2}],this.execute(i);if(null==i.files&&("scm-states"===t.type?i.files=t.scmResourceStates.map((e=>({uri:e.resourceUri,staged:e.resourceGroupType===Ke.Index}))):"scm-groups"===t.type&&(i.files=(0,Je.DZ)(t.scmResourceGroups[0].resourceStates,(e=>this.isModified(e)?{uri:e.resourceUri,staged:e.resourceGroupType===Ke.Index}:void 0)))),t.command===c.Gh.ExternalDiffAll&&null==i.files){const t=await(0,U.vJ)("Open All Changes (difftool)");if(null==t)return;const r=await this.container.git.getStatusForRepo(t.uri);if(null==r)return e.window.showInformationMessage("The repository doesn't have any changes");i.files=[];for(const e of r.files)"M"===e.indexStatus&&i.files.push({uri:e.uri,staged:!0}),"M"===e.workingTreeStatus&&i.files.push({uri:e.uri,staged:!1})}return this.execute(i)}isModified(e){const t=e.type;return t===ze.qb.BOTH_MODIFIED||t===ze.qb.INDEX_MODIFIED||t===ze.qb.MODIFIED}async execute(t){t={...t};try{let i;if(null==t.files){const r=e.window.activeTextEditor;if(null==r)return;if(i=this.container.git.getBestRepository(r)?.path,!i)return;const s=r.document.uri,o=await this.container.git.getStatusForFile(i,s);if(null==o)return void e.window.showInformationMessage("The current file doesn't have any changes");t.files=[],"M"===o.indexStatus&&t.files.push({uri:o.uri,staged:!0}),"M"===o.workingTreeStatus&&t.files.push({uri:o.uri,staged:!1})}else if(i=(await this.container.git.getOrOpenRepository(t.files[0].uri))?.path,!i)return;const r=w.D.get("advanced.externalDiffTool")||await this.container.git.getDiffTool(i);if(!r){const t="View Git Docs";return void(await e.window.showWarningMessage("Unable to open changes because no Git diff tool is configured",t)===t&&e.env.openExternal(e.Uri.parse("https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool")))}for(const e of t.files)this.container.git.openDiffTool(i,e.uri,{ref1:e.ref1,ref2:e.ref2,staged:e.staged,tool:r})}catch(e){C.Yd.error(e,"ExternalDiffCommand"),(0,m.W8)("Unable to open changes in diff tool")}}};et=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Xe(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Ze(t,i,o),o})([(0,g.WD)()],et);var tt=Object.defineProperty,it=Object.getOwnPropertyDescriptor;let rt=class extends T.pu{constructor(e){super(c.Gh.GenerateCommitMessage),this.container=e}async execute(t,i,r){let s;if(null!=(r={...r}).repoPath)s=this.container.git.getRepository(r.repoPath);else{const e=null!=(i=(0,T.SX)(i,t))?await l.YY.fromUri(i):void 0;s=await(0,U.hM)(e,t,"Generate Commit Message")}if(null==s)return;const o=await this.container.git.getScmRepository(s.path);if(null!=o)try{const t=o.inputBox.value,i=await this.container.ai.generateCommitMessage(s,{context:t,progress:{location:e.ProgressLocation.Notification,title:"Generating commit message..."}});if(null==i)return;(0,g.dO)("workbench.view.scm"),o.inputBox.value=`${t?`${t}\n\n`:""}${i}`}catch(t){if(C.Yd.error(t,"GenerateCommitMessageCommand"),t instanceof Error&&t.message.startsWith("No staged changes"))return void e.window.showInformationMessage("No staged changes to generate a commit message from.");(0,m.W8)(t.message)}}};rt=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?it(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tt(t,i,o),o})([(0,g.WD)()],rt);var st=o(4155),ot=o(5025),nt=o(2674),at=o(4794),ct=o(7469),lt=Object.defineProperty,ht=Object.getOwnPropertyDescriptor;let ut=class extends T.mY{constructor(e){super(c.Gh.OpenOrCreateWorktreeForGHPR),this.container=e}async execute(...t){const[i]=t;let r;r="pullRequestModel"in i?i.pullRequestModel:i;const{base:{repositoryCloneUrl:{url:s,owner:o,repositoryName:n}},githubRepository:{rootUri:a},head:{repositoryCloneUrl:{url:c,owner:l},ref:u},item:{number:d}}=r;let p=this.container.git.getRepository(a);if(null==p)return void e.window.showWarningMessage(`Unable to find repository(${a.toString()}) for PR #${d}`);if(p=await p.getMainRepository(),null==p)return void e.window.showWarningMessage(`Unable to find main repository(${a.toString()}) for PR #${d}`);const m=c.toString(),[,g,f]=(0,at.Sk)(m);let w;if([w]=await p.getRemotes({filter:e=>e.matches(g,f)}),null!=w)await this.container.git.fetch(p.path,{remote:w.name});else{const t=await e.window.showInformationMessage(`Unable to find a remote for '${m}'. Would you like to add a new remote?`,{modal:!0},{title:"Yes"},{title:"No",isCloseAffordance:!0});if("Yes"!==t?.title)return;if(await(0,st.IH)(p,l,m,{confirm:!1,fetch:!0,reveal:!1}),[w]=await p.getRemotes({filter:e=>e.url===m}),null==w)return}const v=`${w.name}/${u}`,y=`pr/${s.toString()===c.toString()?u:v}`,b=`remotes/${v}`,A=await(0,nt.K)(p,y,v);if(null!=A)return void(0,ot.bA)(A);let k,P;const S=await(0,h.eK)(p,v);null!=S?k=(0,ce.LB)(S):(k=(0,ce.xB)(b,p.path,{refType:"branch",name:b,remote:!0}),P=y),await(0,ct.ag)();try{await(0,ot.Ue)(p,void 0,k,{createBranch:P});if(null==await this.container.git.getWorktree(p.path,(e=>e.branch===y)))return;this.container.git.setConfig(p.path,`branch.${y}.github-pr-owner-number`,`${o}#${n}#${d}`)}catch(t){C.Yd.error(t,"CreateWorktreeCommand","Unable to create worktree"),e.window.showErrorMessage(`Unable to create worktree for ${l}:${u}`)}}};ut=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ht(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&lt(t,i,o),o})([(0,g.WD)()],ut);var dt=o(3530),pt=o(2967),mt=o(4239),gt=Object.defineProperty,ft=Object.getOwnPropertyDescriptor,wt=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?ft(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&gt(t,i,o),o};const vt=/\$\(.+?\)|\s/g,yt=Symbol("ShowLoading");let bt=class extends T.mY{constructor(e){super([c.Gh.GitCommands,c.Gh.GitCommandsBranch,c.Gh.GitCommandsCherryPick,c.Gh.GitCommandsMerge,c.Gh.GitCommandsRebase,c.Gh.GitCommandsReset,c.Gh.GitCommandsRevert,c.Gh.GitCommandsSwitch,c.Gh.GitCommandsTag,c.Gh.GitCommandsWorktree,c.Gh.GitCommandsWorktreeOpen]),this.container=e}startedWith="menu";preExecute(e,t){switch(e.command){case c.Gh.GitCommandsBranch:t={command:"branch"};break;case c.Gh.GitCommandsCherryPick:t={command:"cherry-pick"};break;case c.Gh.GitCommandsMerge:t={command:"merge"};break;case c.Gh.GitCommandsRebase:t={command:"rebase"};break;case c.Gh.GitCommandsReset:t={command:"reset"};break;case c.Gh.GitCommandsRevert:t={command:"revert"};break;case c.Gh.GitCommandsSwitch:t={command:"switch"};break;case c.Gh.GitCommandsTag:t={command:"tag"};break;case c.Gh.GitCommandsWorktree:t={command:"worktree"};break;case c.Gh.GitCommandsWorktreeOpen:t={command:"worktree",state:{subcommand:"open"}}}return this.execute(t)}async execute(e){const t=new pt.K(this.container,e),i=null!=e?.command?t.find(e.command):void 0;let r,s;for(this.startedWith=null!=i?"command":"menu",s=null==i?t:await this.showLoadingIfNeeded(i,this.getCommandStep(i,t)),!0===s?.ignoreFocusOut&&(s.ignoreFocusOut=void 0);null!=s;)if(s!==t||null==i)if(r&&null==s.ignoreFocusOut&&(s.ignoreFocusOut=!0),(0,mt.Dr)(s))s=await this.showPickStep(s,t),!0===s?.ignoreFocusOut&&(r=!0);else if((0,mt.Gj)(s))s=await this.showInputStep(s,t),!0===s?.ignoreFocusOut&&(r=!0);else{if(!(0,mt.a)(s))break;s=await this.showCustomStep(s,t),!0===s?.ignoreFocusOut&&(r=!0)}else s=await this.getCommandStep(i,t);e?.completion?.fulfill()}async showLoadingIfNeeded(t,i){const r=await Promise.race([i,new Promise((e=>setTimeout(e,250,yt)))]);if(r!==yt)return r;const s=e.window.createQuickPick();s.ignoreFocusOut=!1;const o=[];let n;try{return await new Promise((async e=>{o.push(s.onDidHide((()=>e(n)))),s.title=t.title,s.placeholder="Loading...",s.busy=!0,s.enabled=!1,s.show(),n=await i,s.hide()}))}finally{s.dispose(),o.forEach((e=>{e.dispose()}))}}getButtons(t,i){const r=[];if(null!=t){if(null!=t.buttons)return r.push(...t.buttons),r;r.push(e.QuickInputButtons.Back),null!=t.additionalButtons&&r.push(...t.additionalButtons)}if(i?.canConfirm)if(i.canSkipConfirm){const e=new J.Lp(i.confirm(),(async()=>{if(null==i?.skipConfirmKey)return;const e=w.D.get("gitCommands.skipConfirmations")??[],t=e.indexOf(i.skipConfirmKey);-1!==t?e.splice(t,1):e.push(i.skipConfirmKey),await w.D.updateEffective("gitCommands.skipConfirmations",e)}));r.push(e)}else r.push(J.zY);return r}async getCommandStep(e,t){t.setCommand(e,"command");const i=await e.next();if(!i.done)return i.value}async nextStep(e,t,i){null!=i&&(i.busy=!0);const r=await e.next(t);if(!r.done)return null!=i&&(i.value=""),r.value}async showCustomStep(e,t){const i=await e.show(e);if(i!==mt.Vd){if(!(0,dt.wX)(i))return this.nextStep(t.command,i);switch(i){case dt.Xe.Back:return await(t?.command?.previous())??t;case dt.Xe.Noop:return t.command?.retry();case dt.Xe.Cancel:default:return}}}async showInputStep(t,i){const r=e.window.createInputBox();r.ignoreFocusOut=!w.D.get("gitCommands.closeOnFocusOut")||(t.ignoreFocusOut??!1);const s=[];try{return await new Promise((async o=>{const n={};if(null!=t.onDidPressKey&&null!=t.keys&&0!==t.keys.length)for(const e of t.keys)n[e]={onDidPressKey:e=>t.onDidPressKey(r,e)};const a=this.container.keyboard.createScope(n);if(a.start(),s.push(a,r.onDidHide((()=>o(void 0))),r.onDidTriggerButton((async s=>{if(s!==e.QuickInputButtons.Back){if(s!==J.zY){if(s instanceof J.jQ&&null!=s.onDidClick){const e=s.onDidClick(r);return r.buttons=this.getButtons(t,i.command),!0===await e?void o(i.command?.retry()):void((0,ct.tI)(e)&&(r.buttons=this.getButtons(t,i.command)))}if(null!=t.onDidClickButton){const e=t.onDidClickButton(r,s);r.buttons=this.getButtons(t,i.command),!0===await e&&o(i.command?.retry())}}}else(async()=>{r.value="",null!=i.command&&(r.busy=!0,o(await i.command.previous()??i))})()})),r.onDidChangeValue((async e=>{if(null!=a&&(0!==e.length?await a.pause(["left","right"]):await a.resume()),null==t.validate)return;const[,i]=await t.validate(e);r.validationMessage=i})),r.onDidAccept((async()=>{o(await this.nextStep(i.command,r.value,r))}))),r.buttons=this.getButtons(t,i.command),r.title=t.title,r.placeholder=t.placeholder,r.prompt=t.prompt,null!=t.value&&(r.value=t.value,null!=t.validate)){const[i,s]=await t.validate(t.value);i||null==s||(r.validationMessage={severity:e.InputBoxValidationSeverity.Error,message:s})}if(null!=i.command&&t===i&&i.setCommand(void 0,"menu"),r.show(),null!=t.value)try{r._onDidChangeValueEmitter?.fire(r.value)}catch{}}))}finally{r.dispose(),s.forEach((e=>{e.dispose()}))}}async showPickStep(t,i){const s=!w.D.get("gitCommands.closeOnFocusOut")||(t.ignoreFocusOut??!1),o=t.ignoreFocusOut,n=e.window.createQuickPick();n.ignoreFocusOut=s;const a=[];try{return await new Promise((c=>{async function l(){n.value="",null!=i.command&&(n.busy=!0,c(await i.command.previous()??i))}async function h(){if(null!=t.onDidLoadMore){n.busy=!0;try{const e=await(t.onDidLoadMore?.(n));let i=-1;if(0!==n.activeItems.length){const e=n.activeItems[0];i=n.items.indexOf(e),(0,dt.Gy)(e)&&i--}n.items=t.items=e,i&&(n.activeItems=[n.items[i]])}finally{n.busy=!1}}}const u={left:{onDidPressKey:l}};if(null!=t.onDidPressKey&&null!=t.keys&&0!==t.keys.length)for(const e of t.keys)u[e]={onDidPressKey:e=>t.onDidPressKey(n,e)};const d=this.container.keyboard.createScope(u);d.start();let p=!1;a.push(d,n.onDidHide((()=>c(void 0))),n.onDidTriggerItemButton((async e=>{!0===await(t.onDidClickItemButton?.(n,e.button,e.item))&&c(await this.nextStep(i.command,[e.item],n))})),n.onDidTriggerButton((async r=>{if(r!==e.QuickInputButtons.Back){if(r!==J.zY)if(r!==J.Q0){if(r instanceof J.jQ&&null!=r.onDidClick){let e;if(null==i.command&&0!==n.activeItems.length){const t=n.activeItems[0];(0,mt.YB)(t)&&(e=t)}const s=r.onDidClick(n);return n.buttons=this.getButtons(null!=e?e.value:t,e??i.command),!0===await s?void c(i.command?.retry()):void((0,ct.tI)(s)&&(n.buttons=this.getButtons(null!=e?e.value:t,e??i.command)))}if(null!=t.onDidClickButton){const e=t.onDidClickButton(n,r);n.buttons=this.getButtons(t,i.command),!0===await e&&c(i.command?.retry())}}else h()}else l()})),n.onDidChangeValue((async e=>{if(null!=d&&(0!==e.length?await d.pause(["left","right"]):await d.resume()),null!=t.onDidChangeValue){if(await t.onDidChangeValue(n))return}if(0===e.length||n.ignoreFocusOut?0===e.length&&n.ignoreFocusOut&&!s&&(n.ignoreFocusOut=s,t.ignoreFocusOut=o):(n.ignoreFocusOut=!0,t.ignoreFocusOut=!0),!p){if(n.canSelectMany&&" "===e)return n.value="",void(n.selectedItems=n.selectedItems.length===n.items.length?[]:n.items);if(e.endsWith(" ")){if(n.canSelectMany&&0!==n.selectedItems.length)return;let e;if(null==i.command){const e=i.find(n.value.trim(),!0);if(null==e)return;i.setCommand(e,this.startedWith)}else{const i=n.value.trim().toLowerCase(),r=t.items.find((e=>e.label.replace(vt,"").toLowerCase()===i));if(null==r)return;e=[r]}return void c(await this.nextStep(i.command,e,n))}}if(n.canSelectMany||null==i.command||0===e.trim().length||!p&&0!==n.activeItems.length)p=!1;else{if(null==t.onValidateValue)return;p=await t.onValidateValue(n,e.trim(),t.items)}p||n.items.length===t.items.length||(n.items=t.items)})),n.onDidChangeActive((()=>{if(null!=i.command||0===n.activeItems.length)return;const e=n.activeItems[0];(0,mt.YB)(e)&&(n.buttons=this.getButtons(void 0,e))})),n.onDidChangeSelection((e=>{n.canSelectMany&&(0===e.length||n.ignoreFocusOut?0===e?.length&&n.ignoreFocusOut&&!s&&(n.ignoreFocusOut=s,t.ignoreFocusOut=o):(n.ignoreFocusOut=!0,t.ignoreFocusOut=!0))})),n.onDidAccept((async()=>{let e=n.selectedItems;if(0===e.length){if(!n.canSelectMany||0===n.activeItems.length){const e=n.value.trim();if(0===e.length&&!t.allowEmpty)return;return null==t.onDidAccept?void(t.allowEmpty&&c(await this.nextStep(i.command,[],n))):(n.busy=!0,await t.onDidAccept(n)&&c(await this.nextStep(i.command,e,n)),void(n.busy=!1))}e=n.activeItems}if(1===e.length){const[t]=e;if((0,dt.Gy)(t))switch(t.directive){case dt.Xe.Cancel:return void c(void 0);case dt.Xe.Back:return void l();case dt.Xe.LoadMore:return void h();case dt.Xe.StartPreviewTrial:return r.W.instance.subscription.startPreviewTrial(),void c(void 0);case dt.Xe.RequiresVerification:return r.W.instance.subscription.resendVerification(),void c(void 0);case dt.Xe.ExtendTrial:return r.W.instance.subscription.loginOrSignUp(),void c(void 0);case dt.Xe.RequiresPaidSubscription:return r.W.instance.subscription.purchase(),void c(void 0)}}if(null==i.command){const[t]=e;if(!(0,mt.YB)(t))return;i.setCommand(t,this.startedWith)}if(!n.canSelectMany&&null!=t.onDidAccept){n.busy=!0;const e=await t.onDidAccept(n);if(n.busy=!1,!e)return}c(await this.nextStep(i.command,e,n))}))),n.title=t.title,n.placeholder=t.placeholder,n.matchOnDescription=Boolean(t.matchOnDescription),n.matchOnDetail=Boolean(t.matchOnDetail),n.canSelectMany=Boolean(t.multiselect),n.items=t.items,n.canSelectMany?(n.selectedItems=t.selectedItems??n.items.filter((e=>e.picked)),n.activeItems=n.selectedItems):n.activeItems=t.selectedItems??n.items.filter((e=>e.picked)),null!=i.command&&t===i&&i.setCommand(void 0,"menu"),n.buttons=this.getButtons(t,i.command);const m=t.selectValueWhenShown??!0;if(null!=t.value&&m&&(n.value=t.value),n.show(),null==t.value||m||(n.value=t.value),null!=t.value&&m)try{n._onDidChangeValueEmitter?.fire(n.value)}catch{}}))}finally{n.dispose(),a.forEach((e=>{e.dispose()}))}}};wt([(0,P.cM)({args:!1,scoped:!0,singleLine:!0,timed:!1})],bt.prototype,"execute",1),bt=wt([(0,g.WD)()],bt);var Ct=Object.defineProperty,At=Object.getOwnPropertyDescriptor;let kt=class extends T.mY{constructor(e){super(c.Gh.InviteToLiveShare),this.container=e}static getMarkdownCommandArgs(e){const t=void 0===e||"string"==typeof e?{email:e}:e;return super.getMarkdownCommandArgsCore(c.Gh.InviteToLiveShare,t)}preExecute(e,t){return(0,T.Mg)(e)?((t={...t}).email=e.node.contributor.email,this.execute(t)):this.execute(t)}async execute(e){if(e?.email){const t=await this.container.vsls.getContact(e.email);if(null!=t)return t.invite()}return this.container.vsls.startSession()}};kt=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?At(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Ct(t,i,o),o})([(0,g.WD)()],kt);var Pt=Object.defineProperty,St=Object.getOwnPropertyDescriptor,Dt=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?St(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Pt(t,i,o),o};let Rt=class extends T.mY{constructor(e){super(c.Gh.EnableDebugLogging),this.container=e}async execute(){await w.D.updateEffective("outputLevel","debug")}};Rt=Dt([(0,g.WD)()],Rt);let $t=class extends T.mY{constructor(e){super(c.Gh.DisableDebugLogging),this.container=e}async execute(){await w.D.updateEffective("outputLevel","errors")}};$t=Dt([(0,g.WD)()],$t);var _t=Object.defineProperty,Ft=Object.getOwnPropertyDescriptor;let Tt=class extends T.pu{constructor(e){super(c.Gh.OpenAssociatedPullRequestOnRemote),this.container=e}async execute(e,t){const i=null!=(t=(0,T.SX)(t,e))?await l.YY.fromUri(t):void 0;let r;if(null!=e&&null!=i){const t=e.selection.active.line;if(t<0)return;try{const e=await this.container.git.getBlameForLine(i,t);if(null==e)return;r={clipboard:!1,ref:e.commit.sha,repoPath:e.commit.repoPath}}catch(e){return void C.Yd.error(e,"OpenAssociatedPullRequestOnRemoteCommand",`getBlameForLine(${t})`)}}else try{const e=await(0,U.vJ)("Open Associated Pull Request",void 0,void 0,{filter:async e=>null!=await this.container.git.getBestRemoteWithRichProvider(e.uri)});if(null==e)return;const t=await(e?.getBranch()),i=await(t?.getAssociatedPullRequest());r=null!=i?{clipboard:!1,pr:{url:i.url}}:{clipboard:!1,ref:t?.name??"HEAD",repoPath:e.path}}catch(e){return void C.Yd.error(e,"OpenAssociatedPullRequestOnRemoteCommand","No editor opened")}await(0,g.P0)(c.Gh.OpenPullRequestOnRemote,r)}};Tt=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Ft(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&_t(t,i,o),o})([(0,g.WD)()],Tt);var xt=Object.defineProperty,It=Object.getOwnPropertyDescriptor;let Ot=class extends T.pu{constructor(e){super([c.Gh.OpenBranchesOnRemote,c.Gh.Deprecated_OpenBranchesInRemote,c.Gh.CopyRemoteBranchesUrl]),this.container=e}preExecute(e,t){return(0,T.C$)(e)&&(t={...t,remote:e.node.remote.name}),e.command===c.Gh.CopyRemoteBranchesUrl&&(t={...t,clipboard:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){const r=null!=(t=(0,T.SX)(t,e))?await l.YY.fromUri(t):void 0,s=(await(0,U.hM)(r,e,i?.clipboard?"Copy Remote Branches URL":"Open Branches on Remote"))?.path;if(s)try{await(0,g.P0)(c.Gh.OpenOnRemote,{resource:{type:ge.J.Branches},repoPath:s,remote:i?.remote,clipboard:i?.clipboard})}catch(e){C.Yd.error(e,"OpenBranchesOnRemoteCommand"),(0,m.W8)("Unable to open branches on remote provider")}}};Ot=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?It(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&xt(t,i,o),o})([(0,g.WD)()],Ot);var Bt=Object.defineProperty,Et=Object.getOwnPropertyDescriptor;let Wt=class extends T.pu{constructor(e){super([c.Gh.OpenBranchOnRemote,c.Gh.Deprecated_OpenBranchInRemote,c.Gh.CopyRemoteBranchUrl]),this.container=e}preExecute(e,t){return(0,T.Qo)(e)&&(t={...t,branch:e.node.branch.name,remote:e.node.branch.getRemoteName()}),e.command===c.Gh.CopyRemoteBranchUrl&&(t={...t,clipboard:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){const r=null!=(t=(0,T.SX)(t,e))?await l.YY.fromUri(t):void 0,s=(await(0,U.hM)(r,e,i?.clipboard?"Copy Remote Branch URL":"Open Branch On Remote"))?.path;if(s){i={...i};try{if(null==i.branch){const e=await(0,ye.V)(s,i.clipboard?"Copy Remote Branch URL":"Open Branch On Remote",i.clipboard?"Choose a branch to copy the URL from":"Choose a branch to open",{autoPick:!0,filter:{branches:e=>null!=e.upstream},include:ye.H.Branches,sort:{branches:{current:!0},tags:{}}});if(null==e||e instanceof Ne.$w)return;i.branch=e.ref}await(0,g.P0)(c.Gh.OpenOnRemote,{resource:{type:ge.J.Branch,branch:i.branch||"HEAD"},repoPath:s,remote:i.remote,clipboard:i.clipboard})}catch(e){C.Yd.error(e,"OpenBranchOnRemoteCommand"),(0,m.W8)("Unable to open branch on remote provider")}}}};Wt=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Et(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Bt(t,i,o),o})([(0,g.WD)()],Wt);var Nt=Object.defineProperty,Mt=Object.getOwnPropertyDescriptor;let Ut=class extends T.pu{constructor(e){super(c.Gh.OpenCurrentBranchOnRemote),this.container=e}async execute(e,t){const i=null!=(t=(0,T.SX)(t,e))?await l.YY.fromUri(t):void 0,r=await(0,U.hM)(i,e,"Open Current Branch Name");if(null!=r)try{const e=await r.getBranch();e?.name&&await(0,g.P0)(c.Gh.OpenOnRemote,{resource:{type:ge.J.Branch,branch:e.name||"HEAD"},repoPath:r.path})}catch(e){C.Yd.error(e,"OpenCurrentBranchOnRemoteCommand"),(0,m.W8)("Unable to open branch on remote provider")}}};Ut=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Mt(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Nt(t,i,o),o})([(0,g.WD)()],Ut);var Lt=Object.defineProperty,Gt=Object.getOwnPropertyDescriptor;let Ht=class extends T.mY{constructor(e){super(c.Gh.OpenChangedFiles),this.container=e}async execute(t){t={...t};try{if(null==t.uris){const i=await(0,U.vJ)("Open All Changed Files");if(null==i)return;const r=await this.container.git.getStatusForRepo(i.uri);if(null==r)return void e.window.showWarningMessage("Unable to open changed files");t.uris=(0,Je.DZ)(r.files,(e=>"D"!==e.status?e.uri:void 0))}(0,E.$_)(t.uris)}catch(e){C.Yd.error(e,"OpenChangedFilesCommand"),(0,m.W8)("Unable to open all changed files")}}};Ht=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Gt(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Lt(t,i,o),o})([(0,g.WD)()],Ht);o(2138);var Vt=o(5988),Yt=Object.defineProperty,Qt=Object.getOwnPropertyDescriptor;let qt=class extends T.mY{constructor(e){super([c.Gh.OpenComparisonOnRemote,c.Gh.CopyRemoteComparisonUrl]),this.container=e}preExecute(e,t){return"viewItem"===e.type&&e.node instanceof Vt.J&&(t={...t,repoPath:e.node.repoPath,ref1:e.node.ref1,ref2:e.node.ref2}),e.command===c.Gh.CopyRemoteBranchesUrl&&(t={...t,clipboard:!0}),this.execute(t)}async execute(e){if(null!=e?.repoPath&&null!=e.ref1&&null!=e.ref2)try{await(0,g.P0)(c.Gh.OpenOnRemote,{resource:{type:ge.J.Comparison,base:e.ref1,compare:e.ref2,notation:e.notation},repoPath:e.repoPath,clipboard:e?.clipboard})}catch(e){C.Yd.error(e,"OpenComparisonOnRemoteCommand"),(0,m.W8)("Unable to open comparison on remote provider")}}};qt=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Qt(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Yt(t,i,o),o})([(0,g.WD)()],qt);var jt=Object.defineProperty,zt=Object.getOwnPropertyDescriptor;let Kt=class extends T.mY{constructor(e){super(c.Gh.OpenFileFromRemote),this.container=e}async execute(){let t=await e.env.clipboard.readText();try{e.Uri.parse(t,!0)}catch{t=void 0}const i=await e.window.showInputBox({prompt:"Enter a remote file url to open",placeHolder:"Remote file url",value:t,ignoreFocusOut:!0});if(null==i||0===i.length)return;let r,s=await this.container.git.getLocalInfoFromRemoteUri(e.Uri.parse(i));if(null==s){if(s=await this.container.git.getLocalInfoFromRemoteUri(e.Uri.parse(i),{validate:!1}),null==s)return void e.window.showWarningMessage("Unable to parse the provided remote url.");const t="Open File...";if(await e.window.showWarningMessage("Unable to find a workspace folder that matches the provided remote url.",t)!==t)return}s.startLine&&(r=s.endLine?new e.Range(s.startLine-1,0,s.endLine,0):new e.Range(s.startLine-1,0,s.startLine-1,0));try{await(0,E.bM)(s.uri,{selection:r,rethrow:!0})}catch{const t=await e.window.showOpenDialog({title:"Open local file",defaultUri:s.uri,canSelectMany:!1,canSelectFolders:!1});if(null==t||0===t.length)return;await(0,E.bM)(t[0])}}};Kt=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?zt(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&jt(t,i,o),o})([(0,g.WD)()],Kt);var Jt=o(6586),Zt=Object.defineProperty,Xt=Object.getOwnPropertyDescriptor;let ei=class extends T.pu{constructor(e){super([c.Gh.OpenFileOnRemote,c.Gh.Deprecated_OpenFileInRemote,c.Gh.CopyRemoteFileUrl,c.Gh.CopyRemoteFileUrlWithoutRange,c.Gh.OpenFileOnRemoteFrom,c.Gh.CopyRemoteFileUrlFrom]),this.container=e}async preExecute(e,t){let i=e.uri;if("editorLine"===e.type&&(t={...t,line:e.line,range:!0}),e.command===c.Gh.CopyRemoteFileUrlWithoutRange&&(t={...t,range:!1}),(0,T.en)(e)?(t={...t,range:!1},e.command===c.Gh.CopyRemoteFileUrl||e.command===c.Gh.CopyRemoteFileUrlWithoutRange||e.command===c.Gh.CopyRemoteFileUrlFrom?t.sha=e.node instanceof Jt.q?void 0:e.node.commit.sha:(0,T.Qo)(e)&&(t.branchOrTag=e.node.branch?.name),i=e.node.uri):"viewItem"===e.type&&(t={...t,range:!1},i=e.node.uri??e.uri),(e.command===c.Gh.CopyRemoteFileUrl||e.command===c.Gh.CopyRemoteFileUrlWithoutRange||e.command===c.Gh.CopyRemoteFileUrlFrom)&&null==(t={...t,clipboard:!0}).sha){const i=(0,T.SX)(e.uri,e.editor);if(null!=i){const e=await l.YY.fromUri(i);if(e.repoPath)if(null==e.sha){const i=await this.container.git.getCommitForFile(e.repoPath,e,{firstIfNotFound:!0});null!=i&&(t.sha=i.sha)}else t.sha=e.sha}}return e.command!==c.Gh.OpenFileOnRemoteFrom&&e.command!==c.Gh.CopyRemoteFileUrlFrom||(t={...t,pickBranchOrTag:!0,range:!1}),this.execute(e.editor,i,t)}async execute(t,i,r){if(null==(i=(0,T.SX)(i,t)))return;const s=await l.YY.fromUri(i);if(s.repoPath){r={range:!0,...r};try{let o,n=await this.container.git.getRemotesWithProviders(s.repoPath);r.range&&(null!=t&&L.n.equals(t.document.uri,i)?o=new e.Range(t.selection.start.with({line:t.selection.start.line+1}),t.selection.end.with({line:t.selection.end.line+(0===t.selection.end.character?0:1)})):null!=r.line&&(o=new e.Range(r.line+1,0,r.line+1,0)));let a=r.sha??s.sha;if(null==r.branchOrTag&&null!=a&&!(0,ce.D3)(a)&&0!==n.length){const[e,t]=(0,Me.pW)(a,"/");if(null!=t){const i=n.find((t=>t.name===e));null!=i&&(r.branchOrTag=t,a=void 0,n=[i])}}if(null==r.sha&&null==r.branchOrTag||r.pickBranchOrTag){let e;if(r.pickBranchOrTag||(e=await this.container.git.getBranch(s.repoPath)),null==e?.upstream){const e=await(0,ye.V)(s.repoPath,r.clipboard?`Copy Remote File URL From${(0,Me.vk)(c.NE.Dot,2,2)}${s.relativePath}`:`Open File on Remote From${(0,Me.vk)(c.NE.Dot,2,2)}${s.relativePath}`,`Choose a branch or tag to ${r.clipboard?"copy":"open"} the file revision from`,{allowEnteringRefs:!0,autoPick:!0,filter:{branches:e=>e.remote||null!=e.upstream},picked:r.branchOrTag,sort:{branches:{current:!0,orderBy:"date:desc"},tags:{orderBy:"date:desc"}}});if(null==e)return;if("branch"===e.refType){if(e.remote){r.branchOrTag=(0,h.S3)(e.name);const t=(0,h.Lo)(e.name),i=n.find((e=>e.name===t));null!=i&&(n=[i])}else r.branchOrTag=e.name;a=void 0}else"tag"===e.refType?(r.branchOrTag=e.ref,a=void 0):(r.branchOrTag=void 0,a=e.ref)}else r.branchOrTag=e.name}await(0,g.P0)(c.Gh.OpenOnRemote,{resource:{type:null==a?ge.J.File:ge.J.Revision,branchOrTag:r.branchOrTag??"HEAD",fileName:s.relativePath,range:o,sha:a??void 0},repoPath:s.repoPath,remotes:n,clipboard:r.clipboard})}catch(e){C.Yd.error(e,"OpenFileOnRemoteCommand"),(0,m.W8)("Unable to open file on remote provider")}}}};ei=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Xt(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Zt(t,i,o),o})([(0,g.WD)()],ei);o(4893);var ti=Object.defineProperty,ii=Object.getOwnPropertyDescriptor;let ri=class extends T.pu{constructor(e){super(c.Gh.OpenFileAtRevisionFrom),this.container=e}async execute(e,t,i){if(null==(t=(0,T.SX)(t,e)))return;const r=await l.YY.fromUri(t);if(r.repoPath){if(null==(i={...i}).line&&(i.line=e?.selection.active.line??0),null==i.reference)if(i?.stash){const e=this.container.git.getRelativePath(r,r.repoPath),t=`Open Changes with Stash${(0,Me.vk)(c.NE.Dot,2,2)}`,s=await(0,We.h)(this.container.git.getStash(r.repoPath),`${t}${r.getFormattedFileName({truncateTo:c.d$-t.length})}`,"Choose a stash to compare with",{filter:t=>t.files?.some((t=>t.path===e||t.originalPath===e))??!0});if(null==s)return;i.reference=s}else{const e=`Open File at Branch or Tag${(0,Me.vk)(c.NE.Dot,2,2)}`,t=await(0,ye.V)(r.repoPath,`${e}${r.getFormattedFileName({truncateTo:c.d$-e.length})}`,"Choose a branch or tag to open the file revision from",{allowEnteringRefs:!0,keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{const[s]=t.activeItems;null!=s&&await(0,re.YS)(this.container.git.getRevisionUri(s.ref,r.fsPath,r.repoPath),{annotationType:i.annotationType,line:i.line,preserveFocus:!0,preview:!1})}});if(null==t)return;i.reference=t}await(0,re.YS)(this.container.git.getRevisionUri(i.reference.ref,r.fsPath,r.repoPath),{annotationType:i.annotationType,line:i.line,...i.showOptions})}else(0,m.bi)("Unable to open file revision")}};ri=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ii(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ti(t,i,o),o})([(0,g.WD)()],ri);var si=o(3050),oi=o(5009),ni=Object.defineProperty,ai=Object.getOwnPropertyDescriptor;let ci=class extends T.mY{constructor(e){super([c.Gh.OpenOnRemote,c.Gh.Deprecated_OpenInRemote]),this.container=e}async execute(e){if(null==e?.resource)return;let t="remotes"in e?e.remotes:await this.container.git.getRemotesWithProviders(e.repoPath);if(null!=e.remote){const i=t.filter((t=>t.name===e.remote));t.length>0&&(t=i)}try{let i=function(t){return e?.clipboard?`Copy Link to ${t} for ${s}`:`Open ${t} on ${s}`};if(e.resource.type===ge.J.Branch){const[i,r]=(0,Me.pW)(e.resource.branch,"/");if(null!=r){const s=t.find((e=>e.name===i));null!=s&&(e.resource.branch=r,t=[s])}}else if(e.resource.type===ge.J.Revision){const{commit:t,fileName:i}=e.resource;if(null!=t){const r=await t.findFile(i);e.resource.sha="D"===r?.status?await this.container.git.resolveReference(t.repoPath,`${t.sha}^`,i):t.sha}}const r=si.ss.getHighlanderProviders(t),s=r?.length?r[0].name:"Remote",o={autoPick:"default",clipboard:e.clipboard,setDefault:!0};let n,a="Choose which remote to "+(e.clipboard?"copy the link for":"open on");switch(e.resource.type){case ge.J.Branch:n=`${i("Branch")}${(0,Me.vk)(c.NE.Dot,2,2)}${e.resource.branch}`;break;case ge.J.Branches:n=i("Branches");break;case ge.J.Commit:n=`${i("Commit")}${(0,Me.vk)(c.NE.Dot,2,2)}${(0,ce.zL)(e.resource.sha)}`;break;case ge.J.Comparison:n=`${i("Comparison")}${(0,Me.vk)(c.NE.Dot,2,2)}${(0,ce.oI)(e.resource.base,e.resource.compare,e.resource.notation??"...")}`;break;case ge.J.CreatePullRequest:o.autoPick=!0,o.setDefault=!1,n=`${e.clipboard?`Copy Create Pull Request Link for ${s}`:`Create Pull Request on ${s}`}${(0,Me.vk)(c.NE.Dot,2,2)}${e.resource.base?.branch?(0,ce.oI)(e.resource.base.branch,e.resource.compare.branch,"..."):e.resource.compare.branch}`,a="Choose which remote to "+(e.clipboard?"copy the create pull request link for":"create the pull request on");break;case ge.J.File:n=`${i("File")}${(0,Me.vk)(c.NE.Dot,2,2)}${e.resource.fileName}`;break;case ge.J.Repo:n=i("Repository");break;case ge.J.Revision:n=`${i("File")}${(0,Me.vk)(c.NE.Dot,2,2)}${(0,ce.zL)(e.resource.sha)}${(0,Me.vk)(c.NE.Dot,1,1)}${e.resource.fileName}`}const l=await(0,oi.cY)(n,a,e.resource,t,o);await(l?.execute())}catch(e){C.Yd.error(e,"OpenOnRemoteCommand"),(0,m.W8)("Unable to open in remote provider")}}};ci=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ai(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ni(t,i,o),o})([(0,g.WD)()],ci);var li=o(2610),hi=Object.defineProperty,ui=Object.getOwnPropertyDescriptor;let di=class extends T.mY{constructor(e){super([c.Gh.OpenIssueOnRemote,c.Gh.CopyRemoteIssueUrl,c.Gh.OpenAutolinkUrl,c.Gh.CopyAutolinkUrl]),this.container=e}preExecute(e,t){return"viewItem"===e.type&&e.node instanceof li.Z&&(t={...t,issue:{url:e.node.item.url},clipboard:e.command===c.Gh.CopyRemoteIssueUrl||e.command===c.Gh.CopyAutolinkUrl}),this.execute(t)}async execute(t){t.clipboard?await e.env.clipboard.writeText(t.issue.url):e.env.openExternal(e.Uri.parse(t.issue.url))}};di=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ui(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&hi(t,i,o),o})([(0,g.WD)()],di);var pi=o(2060),mi=Object.defineProperty,gi=Object.getOwnPropertyDescriptor;let fi=class extends T.mY{constructor(e){super([c.Gh.OpenPullRequestOnRemote,c.Gh.CopyRemotePullRequestUrl]),this.container=e}preExecute(e,t){return"viewItem"===e.type&&e.node instanceof pi.Z&&(t={...t,pr:{url:e.node.pullRequest.url},clipboard:e.command===c.Gh.CopyRemotePullRequestUrl}),this.execute(t)}async execute(t){if(null==t?.pr){if(null==t?.repoPath||null==t?.ref)return;const i=await this.container.git.getBestRemoteWithRichProvider(t.repoPath);if(!i?.hasRichIntegration())return;const r=await i.provider.getPullRequestForCommit(t.ref);if(null==r)return void e.window.showInformationMessage(`No pull request associated with '${(0,ce.zL)(t.ref)}'`);(t={...t}).pr=r}t.clipboard?await e.env.clipboard.writeText(t.pr.url):e.env.openExternal(e.Uri.parse(t.pr.url))}};fi=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?gi(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&mi(t,i,o),o})([(0,g.WD)()],fi);var wi=Object.defineProperty,vi=Object.getOwnPropertyDescriptor;let yi=class extends T.pu{constructor(e){super([c.Gh.OpenRepoOnRemote,c.Gh.Deprecated_OpenRepoInRemote,c.Gh.CopyRemoteRepositoryUrl]),this.container=e}preExecute(e,t){return(0,T.C$)(e)&&(t={...t,remote:e.node.remote.name}),e.command===c.Gh.CopyRemoteRepositoryUrl&&(t={...t,clipboard:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){const r=null!=(t=(0,T.SX)(t,e))?await l.YY.fromUri(t):void 0,s=(await(0,U.hM)(r,e,i?.clipboard?"Choose which repository to copy the url from":"Choose which repository to open on remote"))?.path;if(s)try{await(0,g.P0)(c.Gh.OpenOnRemote,{resource:{type:ge.J.Repo},repoPath:s,remote:i?.remote,clipboard:i?.clipboard})}catch(e){C.Yd.error(e,"OpenRepoOnRemoteCommand"),(0,m.W8)("Unable to open repository on remote provider")}}};yi=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?vi(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&wi(t,i,o),o})([(0,g.WD)()],yi);var bi=Object.defineProperty,Ci=Object.getOwnPropertyDescriptor;let Ai=class extends T.pu{constructor(e){super([c.Gh.OpenRevisionFile,c.Gh.OpenRevisionFileInDiffLeft,c.Gh.OpenRevisionFileInDiffRight]),this.container=e}async execute(e,t,i){if(null==(t=(0,T.SX)(t,e)))return;const r=await l.YY.fromUri(t);null==(i={...i}).line&&(i.line=e?.selection.active.line??0);try{if(null==i.revisionUri)if(r?.sha){const e=await this.container.git.getCommit(r.repoPath,r.sha);i.revisionUri="D"===e?.file?.status?this.container.git.getRevisionUri(await e.getPreviousSha()??Re.Ii,e.file,e.repoPath):this.container.git.getRevisionUri(r)}else i.revisionUri=this.container.git.getRevisionUri(r);await(0,re.YS)(i.revisionUri,{annotationType:i.annotationType,line:i.line,...i.showOptions})}catch(e){C.Yd.error(e,"OpenRevisionFileCommand"),(0,m.W8)("Unable to open file revision")}}};Ai=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Ci(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&bi(t,i,o),o})([(0,g.WD)()],Ai);var ki=Object.defineProperty,Pi=Object.getOwnPropertyDescriptor;let Si=class extends T.pu{constructor(e){super([c.Gh.OpenWorkingFile,c.Gh.OpenWorkingFileInDiffLeft,c.Gh.OpenWorkingFileInDiffRight]),this.container=e}async execute(t,i,r){null==(r={...r}).line&&(r.line=t?.selection.active.line);try{if(null==r.uri){if(null==(i=(0,T.SX)(i,t)))return}else i=r.uri;if(r.uri=await l.YY.fromUri(i),(0,l.uy)(r.uri)&&r.uri.sha){const t=await this.container.git.getWorkingUri(r.uri.repoPath,r.uri);if(void 0===t)return void e.window.showWarningMessage("Unable to open working file. File could not be found in the working tree");r.uri=new l.YY(t,r.uri.repoPath)}void 0!==r.line&&0!==r.line&&(void 0===r.showOptions&&(r.showOptions={}),r.showOptions.selection=new e.Range(r.line,0,r.line,0));const s=await(0,E.GR)(r.uri,{...r.showOptions,throwOnError:!0});if(void 0===r.annotationType)return;await this.container.fileAnnotations.show(s,r.annotationType,{selection:{line:r.line}})}catch(e){C.Yd.error(e,"OpenWorkingFileCommand"),(0,m.W8)("Unable to open working file")}}};Si=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Pi(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ki(t,i,o),o})([(0,g.WD)()],Si);var Di=Object.defineProperty,Ri=Object.getOwnPropertyDescriptor,$i=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Ri(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Di(t,i,o),o};let _i=class extends T.mY{constructor(e){super(c.Gh.DisableRebaseEditor),this.container=e}execute(){return this.container.rebaseEditor.setEnabled(!1)}};_i=$i([(0,g.WD)()],_i);let Fi=class extends T.mY{constructor(e){super(c.Gh.EnableRebaseEditor),this.container=e}execute(){return this.container.rebaseEditor.setEnabled(!0)}};Fi=$i([(0,g.WD)()],Fi);var Ti=Object.defineProperty,xi=Object.getOwnPropertyDescriptor;let Ii=class extends T.mY{constructor(e){super(c.Gh.RefreshHover),this.container=e}async execute(){await(0,g.dO)("editor.action.showHover")}};Ii=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?xi(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Ti(t,i,o),o})([(0,g.WD)()],Ii);o(6199);var Oi=Object.defineProperty,Bi=Object.getOwnPropertyDescriptor,Ei=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Bi(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Oi(t,i,o),o};let Wi=class extends T.mY{constructor(e){super(c.Gh.FetchRepositories),this.container=e}async execute(){return(0,F.m)({command:"fetch",state:{repos:this.container.git.openRepositories}})}};Wi=Ei([(0,g.WD)()],Wi);let Ni=class extends T.mY{constructor(e){super(c.Gh.PullRepositories),this.container=e}async execute(){return(0,F.m)({command:"pull",state:{repos:this.container.git.openRepositories}})}};Ni=Ei([(0,g.WD)()],Ni);let Mi=class extends T.mY{constructor(e){super(c.Gh.PushRepositories),this.container=e}async execute(){return(0,F.m)({command:"push",state:{repos:this.container.git.openRepositories}})}};Mi=Ei([(0,g.WD)()],Mi);var Ui=o(8388),Li=Object.defineProperty,Gi=Object.getOwnPropertyDescriptor,Hi=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Gi(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Li(t,i,o),o};let Vi=class extends T.mY{constructor(e){super(c.Gh.ResetAIKey),this.container=e}execute(){this.container.ai.reset()}};Vi=Hi([(0,g.WD)()],Vi);let Yi=class extends T.mY{constructor(e){super(c.Gh.ResetAvatarCache),this.container=e}execute(){(0,Ui.E3)("all")}};Yi=Hi([(0,g.WD)()],Yi);let Qi=class extends T.mY{constructor(e){super(c.Gh.ResetSuppressedWarnings),this.container=e}async execute(){await w.D.update("advanced.messages",void 0,e.ConfigurationTarget.Global)}};Qi=Hi([(0,g.WD)()],Qi);let qi=class extends T.mY{constructor(e){super(c.Gh.ResetTrackedUsage),this.container=e}async execute(){await this.container.usage.reset()}};qi=Hi([(0,g.WD)()],qi);var ji=Object.defineProperty,zi=Object.getOwnPropertyDescriptor;let Ki=class extends T.mY{constructor(e){super(c.Gh.ResetViewsLayout),this.container=e}async execute(){for(const[e,t]of c._h){try{await(0,g.dO)("vscode.moveViews",{viewIds:t.map((e=>`gitlens.views.${e}`)),destinationId:e})}catch{}e.includes("gitlens")&&await(0,g.dO)(`${e}.resetViewContainerLocation`)}}};Ki=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?zi(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ji(t,i,o),o})([(0,g.WD)()],Ki);var Ji=o(4655),Zi=Object.defineProperty,Xi=Object.getOwnPropertyDescriptor;let er=class extends T.mY{constructor(e){super([c.Gh.SearchCommits,c.Gh.SearchCommitsInView]),this.container=e}preExecute(e,t){return e.command===c.Gh.SearchCommitsInView?(t={...t}).showResultsInSideBar=!0:"viewItem"===e.type&&((t={...t}).showResultsInSideBar=!0,e.node instanceof Ji.V&&(t.repoPath=e.node.repoPath,t.search=e.node.search,t.prefillOnly=!0),(0,T.pT)(e)&&(t.repoPath=e.node.repo.path)),this.execute(t)}async execute(e){await(0,F.m)({command:"search",prefillOnly:e?.prefillOnly,state:{repo:e?.repoPath,...e?.search,showResultsInSideBar:w.D.get("gitCommands.search.showResultsInSideBar")??e?.showResultsInSideBar,openPickInView:e?.openPickInView??!1}})}};er=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Xi(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Zi(t,i,o),o})([(0,g.WD)()],er);o(1676);var tr=Object.defineProperty,ir=Object.getOwnPropertyDescriptor;let rr=class extends T.mY{constructor(e){super(c.Gh.ShowLastQuickPick),this.container=e}execute(){const t=(0,T.l8)();if(void 0===t)return Promise.resolve(void 0);try{return e.commands.executeCommand(t.command,...t.args)}catch(e){return C.Yd.error(e,"ShowLastQuickPickCommand"),(0,m.W8)("Unable to show last quick pick")}}};rr=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ir(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tr(t,i,o),o})([(0,g.WD)()],rr);var sr=Object.defineProperty,or=Object.getOwnPropertyDescriptor;let nr=class extends T.mY{constructor(e){super(c.Gh.OpenOnlyChangedFiles),this.container=e}async execute(t){t={...t};try{if(null==t.uris){const i=await(0,U.vJ)("Open Changed & Close Unchanged Files");if(null==i)return;const r=await this.container.git.getStatusForRepo(i.uri);if(null==r)return void e.window.showWarningMessage("Unable to open changed & close unchanged files");t.uris=(0,Je.DZ)(r.files,(e=>"D"!==e.status?e.uri:void 0))}const i=0===t.uris.length,r=new Set(t.uris);let s,o;for(const n of e.window.tabGroups.all)for(const a of n.tabs)i?e.window.tabGroups.close(a,!0):(s=a.input instanceof e.TabInputText||a.input instanceof e.TabInputCustom||a.input instanceof e.TabInputNotebook?a.input.uri:a.input instanceof e.TabInputTextDiff||a.input instanceof e.TabInputNotebookDiff?a.input.modified:void 0,null!=s&&(o=t.uris.find((e=>L.n.equals(e,s))),null!=o?r.delete(o):e.window.tabGroups.close(a,!0)));r.size>0&&(0,E.$_)([...r])}catch(e){C.Yd.error(e,"OpenOnlyChangedFilesCommand"),(0,m.W8)("Unable to open changed & close unchanged files")}}};nr=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?or(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sr(t,i,o),o})([(0,g.WD)()],nr);var ar=Object.defineProperty,cr=Object.getOwnPropertyDescriptor;let lr=class extends T.Lk{constructor(e){super([c.Gh.ShowQuickBranchHistory,c.Gh.ShowQuickCurrentBranchHistory]),this.container=e}preExecute(e,t){return e.command===c.Gh.ShowQuickCurrentBranchHistory&&((t={...t}).branch="HEAD"),this.execute(e.editor,e.uri,t)}async execute(e,t,i){const r=null!=(t=(0,T.SX)(t,e))?await l.YY.fromUri(t):void 0,s=i?.repoPath??r?.repoPath??this.container.git.highlander?.path;let o;return null!=s&&(null!=i?.branch?o="HEAD"===i.branch?"HEAD":(0,ce.xB)(i.branch,s,{refType:"branch",name:i.branch,remote:!1}):null!=i?.tag&&(o=(0,ce.xB)(i.tag,s,{refType:"tag",name:i.tag}))),(0,F.m)({command:"log",state:null!=s?{repo:s,reference:o}:{}})}};lr=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?cr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ar(t,i,o),o})([(0,g.WD)()],lr);o(1744),o(8918);var hr=Object.defineProperty,ur=Object.getOwnPropertyDescriptor;let dr=class extends T.Lk{constructor(e){super([c.Gh.OpenFileHistory,c.Gh.OpenFolderHistory,c.Gh.ShowQuickFileHistory,c.Gh.QuickOpenFileHistory,c.Gh.Deprecated_ShowFileHistoryInView]),this.container=e}preExecute(e,t){return e.command!==c.Gh.OpenFileHistory&&e.command!==c.Gh.OpenFolderHistory&&e.command!==c.Gh.Deprecated_ShowFileHistoryInView||((t={...t}).showInSideBar=!0),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=(0,T.SX)(t,e)))return;const r=await l.YY.fromUri(t);i?.showInSideBar?await this.container.fileHistoryView.showHistoryForUri(r):await(0,F.m)({command:"log",state:null!=r?.repoPath?{repo:r.repoPath,reference:i?.reference??"HEAD",fileName:r.relativePath}:{}})}};dr=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ur(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&hr(t,i,o),o})([(0,g.WD)()],dr);var pr=Object.defineProperty,mr=Object.getOwnPropertyDescriptor;let gr=class extends T.mY{constructor(e){super(c.Gh.ShowQuickRepoStatus),this.container=e}async execute(e){return(0,F.m)({command:"status",state:{repo:e?.repoPath}})}};gr=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?mr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&pr(t,i,o),o})([(0,g.WD)()],gr);var fr=Object.defineProperty,wr=Object.getOwnPropertyDescriptor;let vr=class extends T.mY{constructor(e){super(c.Gh.ShowQuickStashList),this.container=e}execute(e){return(0,F.m)({command:"stash",state:{subcommand:"list",repo:e?.repoPath}})}};vr=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?wr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&fr(t,i,o),o})([(0,g.WD)()],vr);var yr=Object.defineProperty,br=Object.getOwnPropertyDescriptor;let Cr=class extends T.mY{constructor(e){super([c.Gh.ShowBranchesView,c.Gh.ShowCommitDetailsView,c.Gh.ShowCommitsView,c.Gh.ShowContributorsView,c.Gh.ShowFileHistoryView,c.Gh.ShowGraphView,c.Gh.ShowHomeView,c.Gh.ShowAccountView,c.Gh.ShowLineHistoryView,c.Gh.ShowRemotesView,c.Gh.ShowRepositoriesView,c.Gh.ShowSearchAndCompareView,c.Gh.ShowStashesView,c.Gh.ShowTagsView,c.Gh.ShowTimelineView,c.Gh.ShowWorktreesView,c.Gh.ShowWorkspacesView]),this.container=e}preExecute(e,...t){return this.execute(e,...t)}async execute(e,...t){switch(e.command){case c.Gh.ShowBranchesView:return this.container.branchesView.show();case c.Gh.ShowCommitDetailsView:return this.container.commitDetailsView.show();case c.Gh.ShowCommitsView:return this.container.commitsView.show();case c.Gh.ShowContributorsView:return this.container.contributorsView.show();case c.Gh.ShowFileHistoryView:return this.container.fileHistoryView.show();case c.Gh.ShowHomeView:return this.container.homeView.show();case c.Gh.ShowAccountView:return this.container.accountView.show();case c.Gh.ShowGraphView:{let i=t;if("scm"===e.type&&null!=e.scm?.rootUri){const r=this.container.git.getRepository(e.scm.rootUri);i=null!=r?[r,...t]:t}return this.container.graphView.show(void 0,...i)}case c.Gh.ShowLineHistoryView:return this.container.lineHistoryView.show();case c.Gh.ShowRemotesView:return this.container.remotesView.show();case c.Gh.ShowRepositoriesView:return this.container.repositoriesView.show();case c.Gh.ShowSearchAndCompareView:return this.container.searchAndCompareView.show();case c.Gh.ShowStashesView:return this.container.stashesView.show();case c.Gh.ShowTagsView:return this.container.tagsView.show();case c.Gh.ShowTimelineView:return this.container.timelineView.show();case c.Gh.ShowWorktreesView:return this.container.worktreesView.show();case c.Gh.ShowWorkspacesView:return this.container.workspacesView.show()}return Promise.resolve(void 0)}};Cr=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?br(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&yr(t,i,o),o})([(0,g.WD)()],Cr);var Ar=o(252),kr=Object.defineProperty,Pr=Object.getOwnPropertyDescriptor;let Sr=class extends T.mY{constructor(e){super(c.Gh.StashApply),this.container=e}async preExecute(e,t){return(0,T.en)(e)?(null==e.node.commit.message&&await e.node.commit.ensureFullDetails(),t={...t,stashItem:e.node.commit}):(0,T.pT)(e)&&(t={...t,repoPath:e.node.repo.path}),this.execute(t)}async execute(e){return e?.deleteAfter?(0,Ar.Sw)(e?.repoPath??e?.stashItem?.repoPath,e?.stashItem):(0,Ar.nn)(e?.repoPath??e?.stashItem?.repoPath,e?.stashItem)}};Sr=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Pr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&kr(t,i,o),o})([(0,g.WD)()],Sr);var Dr=o(8887),Rr=Object.defineProperty,$r=Object.getOwnPropertyDescriptor;let _r=class extends T.mY{constructor(e){super([c.Gh.StashSave,c.Gh.StashSaveFiles]),this.container=e}async preExecute(e,t){if((0,T.E9)(e))(t={...t}).repoPath=e.node.file.repoPath??e.node.repoPath,t.uris=[l.YY.fromFile(e.node.file,t.repoPath)];else if((0,T.pT)(e))(t={...t}).repoPath=e.node.repo.path;else if((0,T.l7)(e))(t={...t}).repoPath=e.node.repoPath;else if("scm-states"===e.type)(t={...t}).uris=e.scmResourceStates.map((e=>e.resourceUri)),t.repoPath=(await this.container.git.getOrOpenRepository(t.uris[0]))?.path,e.scmResourceStates.some((e=>e.resourceGroupType===Ke.Index))||(t.keepStaged=!0);else if("scm-groups"===e.type){t={...t};let i=!0,r=!1;const s=e.scmResourceGroups.reduce(((e,t)=>{const s="index"===t.id;return i&&!s&&(i=!1),s&&(r=!0),e.concat(t.resourceStates.map((e=>e.resourceUri)))}),[]),o=await this.container.git.getOrOpenRepository(s[0]);let n=!1;i&&null!=o&&(n=await o.supports(Dr.A.StashOnlyStaged)),n?(t.onlyStaged=!0,t.onlyStagedUris=s):(t.uris=s,t.repoPath=o?.path,r||(t.keepStaged=!0))}return this.execute(t)}execute(e){return(0,Ar.VF)(e?.repoPath,e?.uris,e?.message,e?.keepStaged,e?.onlyStaged,e?.onlyStagedUris)}};_r=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?$r(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Rr(t,i,o),o})([(0,g.WD)()],_r);var Fr=Object.defineProperty,Tr=Object.getOwnPropertyDescriptor;let xr=class extends T.mY{constructor(e){super(c.Gh.SwitchAIModel),this.container=e}async execute(){const t=await async function(){const t=w.D.get("ai.experimental.provider")??"openai";let i=w.D.get(`ai.experimental.${t}.model`);null==i&&(i="anthropic"===t?"claude-v1":"gpt-3.5-turbo");const r=[{label:"OpenAI",kind:e.QuickPickItemKind.Separator},{label:"OpenAI",description:"GPT 3.5 Turbo",provider:"openai",model:"gpt-3.5-turbo"},{label:"OpenAI",description:"GPT 3.5 Turbo 16k",provider:"openai",model:"gpt-3.5-turbo-16k"},{label:"OpenAI",description:"GPT 4",provider:"openai",model:"gpt-4"},{label:"OpenAI",description:"GPT 4 32k",provider:"openai",model:"gpt-4-32k"},{label:"Anthropic",kind:e.QuickPickItemKind.Separator},{label:"Anthropic",description:"Claude v1",provider:"anthropic",model:"claude-v1"},{label:"Anthropic",description:"Claude v1 100k",provider:"anthropic",model:"claude-v1-100k"},{label:"Anthropic",description:"Claude Instant v1",provider:"anthropic",model:"claude-instant-v1"},{label:"Anthropic",description:"Claude Instant v1 100k",provider:"anthropic",model:"claude-instant-v1-100k"},{label:"Anthropic",description:"Claude 2",provider:"anthropic",model:"claude-2"}];for(const t of r)if(t.kind!==e.QuickPickItemKind.Separator&&t.model===i){t.description=`${t.description}  ✓`,t.picked=!0;break}return await e.window.showQuickPick(r,{title:"Switch AI Model",placeHolder:"select an AI model to use for experimental AI features",matchOnDescription:!0})}();null!=t&&(await w.D.updateEffective("ai.experimental.provider",t.provider),await w.D.updateEffective(`ai.experimental.${t.provider}.model`,t.model))}};xr=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Tr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Fr(t,i,o),o})([(0,g.WD)()],xr);var Ir=o(6004),Or=Object.defineProperty,Br=Object.getOwnPropertyDescriptor,Er=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Br(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Or(t,i,o),o};let Wr=class extends T.mY{constructor(e){super(c.Gh.SwitchMode),this.container=e}async execute(){const t=(0,Ir.UH)(),i=await async function(){const t=w.D.get("modes");if(null==t)return;const i=Object.keys(t);if(0===i.length)return;const r=w.D.get("mode.active"),s=i.map((e=>{const i=t[e];return{label:`${r===e?"$(check)  ":"     "}${i.name} mode`,description:i.description?` ${c.NE.Dash}  ${i.description}`:"",key:e}}));return r&&null!=t[r]&&s.unshift({label:`Exit ${t[r].name} mode`,key:void 0}),await e.window.showQuickPick(s,{placeHolder:"select a GitLens mode to enter"})}();if(void 0===i)return;(0,Ir.lH)(t,` — mode=${i.key??""}`);const r=w.D.get("mode.active");if(r!==i.key){if(null!=r&&0!==r.length){const e=w.D.get("modes"),t=e?.[r].annotations;if(null!=t){t!==(null!=i.key?e?.[i.key].annotations:void 0)&&await this.container.fileAnnotations.clearAll()}}await w.D.update("mode.active",i.key,e.ConfigurationTarget.Global)}}};Er([(0,P.cM)({args:!1,scoped:!0,singleLine:!0,timed:!1})],Wr.prototype,"execute",1),Wr=Er([(0,g.WD)()],Wr);let Nr=class extends T.mY{constructor(e){super(c.Gh.ToggleReviewMode),this.container=e}async execute(){const t=w.D.get("modes");if(null==t||!Object.keys(t).includes("review"))return;const i="review"===w.D.get("mode.active")?void 0:"review";await w.D.update("mode.active",i,e.ConfigurationTarget.Global)}};Er([(0,P.cM)({args:!1,singleLine:!0,timed:!1})],Nr.prototype,"execute",1),Nr=Er([(0,g.WD)()],Nr);let Mr=class extends T.mY{constructor(e){super(c.Gh.ToggleZenMode),this.container=e}async execute(){const t=w.D.get("modes");if(null==t||!Object.keys(t).includes("zen"))return;const i="zen"===w.D.get("mode.active")?void 0:"zen";await w.D.update("mode.active",i,e.ConfigurationTarget.Global)}};Er([(0,P.cM)({args:!1,singleLine:!0,timed:!1})],Mr.prototype,"execute",1),Mr=Er([(0,g.WD)()],Mr);var Ur=Object.defineProperty,Lr=Object.getOwnPropertyDescriptor;let Gr=class extends T.mY{constructor(e){super(c.Gh.ToggleCodeLens),this.container=e}execute(){this.container.codeLens.toggleCodeLens()}};Gr=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Lr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Ur(t,i,o),o})([(0,g.WD)()],Gr);var Hr=Object.defineProperty,Vr=Object.getOwnPropertyDescriptor,Yr=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Vr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Hr(t,i,o),o};let Qr=class extends T._l{constructor(e){super([c.Gh.ClearFileAnnotations,c.Gh.ComputingFileAnnotations]),this.container=e}async execute(t,i,r){if(null!=t&&!(0,E.PH)(t)&&null!=r&&!L.n.equals(r,t.document.uri)){const i=e.window.visibleTextEditors.find((e=>L.n.equals(r,e.document.uri)));null!=i&&(t=i)}try{await this.container.fileAnnotations.clear(t)}catch(e){C.Yd.error(e,"ClearFileAnnotationsCommand"),(0,m.W8)("Unable to clear file annotations")}}};Qr=Yr([(0,g.WD)()],Qr);let qr=class extends T.pu{constructor(e){super([c.Gh.ToggleFileBlame,c.Gh.ToggleFileBlameInDiffLeft,c.Gh.ToggleFileBlameInDiffRight]),this.container=e}execute(e,t,i){return Kr(this.container,e,t,{...i,type:"blame"})}};qr=Yr([(0,g.WD)()],qr);let jr=class extends T.pu{constructor(e){super(c.Gh.ToggleFileChanges),this.container=e}execute(e,t,i){return Kr(this.container,e,t,{...i,type:"changes"})}};jr=Yr([(0,g.WD)()],jr);let zr=class extends T.pu{constructor(e){super([c.Gh.ToggleFileHeatmap,c.Gh.ToggleFileHeatmapInDiffLeft,c.Gh.ToggleFileHeatmapInDiffRight]),this.container=e}execute(e,t,i){return Kr(this.container,e,t,{...i,type:"heatmap"})}};async function Kr(t,i,r,s){if(null!=i&&!(0,E.PH)(i)&&null!=r&&!L.n.equals(r,i.document.uri)){const t=e.window.visibleTextEditors.find((e=>L.n.equals(r,e.document.uri)));null!=t&&(i=t)}try{s={type:"blame",...s},await t.fileAnnotations.toggle(i,s.type,{selection:s.context?.selection??{line:i?.selection.active.line},...s.context},s.on)}catch(e){C.Yd.error(e,"ToggleFileAnnotationsCommand"),(0,m.W8)(`Unable to toggle file ${s.type} annotations`)}}zr=Yr([(0,g.WD)()],zr);var Jr=Object.defineProperty,Zr=Object.getOwnPropertyDescriptor;let Xr=class extends T.pu{constructor(e){super(c.Gh.ToggleLineBlame),this.container=e}async execute(e,t){try{await this.container.lineAnnotations.toggle(e)}catch(e){C.Yd.error(e,"ToggleLineBlameCommand"),(0,m.W8)("Unable to toggle line blame annotations")}}};Xr=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Zr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Jr(t,i,o),o})([(0,g.WD)()],Xr);var es=Object.defineProperty,ts=Object.getOwnPropertyDescriptor;let is=class extends T.mY{constructor(e){super(c.Gh.GetStarted),this.container=e}execute(e){const t=this.container.context.extension.id;e===t&&(e=void 0),(0,E.lN)(t,e??"gitlens.welcome",void 0,!1)}};async function rs(s){const o=s.extension.packageJSON.version,n=(0,$.L5)(o,"> 2020.0.0"),P=w.D.get("outputLevel");C.Yd.configure({name:"GitLens",createChannel:function(t){return e.window.createOutputChannel(t)},toLoggable:function(t){return(0,l.uy)(t)?`GitUri(${t.toString(!0)}${t.repoPath?` repoPath=${t.repoPath}`:""}${t.sha?` sha=${t.sha}`:""})`:t instanceof e.Uri?`Uri(${t.toString(!0)})`:(0,d.uC)(t)||(0,h.BF)(t)||(0,u.f_)(t)||(0,p.YR)(t)||(0,_.Jc)(t)?t.toString():"uri"in t&&t.uri instanceof e.Uri?`${"name"in t&&"index"in t?"WorkspaceFolder":(0,C.q4)(t)}(uri=${t.uri.toString(!0)})`:void 0}},(0,a.oE)(P),s.extensionMode===e.ExtensionMode.Development);const S=w.D.get("defaultDateLocale"),D=new k.u(`GitLens${n?" (pre-release)":""} v${o}`,{log:{message:` activating in ${e.env.appName} (${e.version}) on the ${i.$L?"web":"desktop"}; language='${e.env.language}', defaultDateLocale='${S}' (${e.env.machineId}|${e.env.sessionId})`}});if(n){const e=(0,$.mL)(o);if(new Date(e.major,e.minor-1,Number(e.patch.toString().substring(0,2))).getTime()<Date.now()-12096e5)return D.stop({message:` was NOT activated because this pre-release version (${o}) has expired`}),void setTimeout(m.Nl,0,o)}e.workspace.isTrusted||(0,v.v)("gitlens:untrusted",!0),function(e,...t){e.globalState?.setKeysForSync([...t,c.lw.Version,c.lw.HomeViewWelcomeVisible])}(s);const R=new Storage(s),F=R.get(n?"synced:preVersion":"synced:version"),T=R.get(n?"preVersion":"version");let x,I;x=null==T||null==F?F??T:1===(0,$.qu)(F,T)?F:T,C.Yd.enabled("debug")&&(I=`syncedVersion=${F}, localVersion=${T}, previousVersion=${x}, welcome=${R.get("views:welcome:visible")}`),null==x&&R.store("views:welcome:visible",!0),w.V.configure(s),(0,y.Cz)(S??e.env.language),s.subscriptions.push(w.D.onDidChange((t=>{w.D.changed(t,"defaultDateLocale")&&(0,y.Cz)(w.D.get("defaultDateLocale")??e.env.language)})));const O=r.W.create(s,R,n,o,x);(0,b.IH)(O.onReady)((()=>{s.subscriptions.push(...(0,g.$$)(O)),function(e){e.context.subscriptions.push(e.actionRunners.registerBuiltIn("createPullRequest",{label:e=>`Create Pull Request on ${e.remote?.provider?.name??"Remote"}`,run:async e=>{"createPullRequest"===e.type&&await(0,g.P0)(c.Gh.CreatePullRequestOnRemote,{base:void 0,compare:e.branch.isRemote?(0,h.S3)(e.branch.name):e.branch.upstream?(0,h.S3)(e.branch.upstream):e.branch.name,remote:e.remote?.name??"",repoPath:e.repoPath})}}),e.actionRunners.registerBuiltIn("openPullRequest",{label:e=>`Open Pull Request on ${e.provider?.name??"Remote"}`,run:async e=>{"openPullRequest"===e.type&&await(0,g.P0)(c.Gh.OpenPullRequestOnRemote,{pr:{url:e.pullRequest.url}})}}))}(O),f(s),e.workspace.isTrusted||s.subscriptions.push(e.workspace.onDidGrantWorkspaceTrust((()=>{(0,v.v)("gitlens:untrusted",void 0),O.telemetry.setGlobalAttribute("workspace.isTrusted",e.workspace.isTrusted)}))),async function(t,i,r,s){if(null==s){if(C.Yd.log(`GitLens first-time install; window.focused=${e.window.state.focused}`),!1===w.D.get("showWelcomeOnInstall"))return;if(e.window.state.focused)await t.storage.delete("pendingWelcomeOnFocus"),await(0,g.P0)(c.Gh.ShowWelcomePage);else{await t.storage.store("pendingWelcomeOnFocus",!0);const i=e.window.onDidChangeWindowState((e=>{e.focused&&(i.dispose(),!0===t.storage.get("pendingWelcomeOnFocus")&&(t.storage.delete("pendingWelcomeOnFocus"),w.D.get("showWelcomeOnInstall")&&(0,g.P0)(c.Gh.ShowWelcomePage)))}));t.context.subscriptions.push(i)}return}s!==i&&C.Yd.log(`GitLens upgraded from v${s} to v${i}; window.focused=${e.window.state.focused}`);const o=(0,$.mL)(i),n=(0,$.mL)(s);if(o.major<n.major||o.major===n.major&&o.minor<n.minor)return;const a=r&&(0,$.L5)(n,"< 2023.6.0800");if(o.major===n.major&&!a)return;if(i=a?"14":String(o.major),w.D.get("showWhatsNewAfterUpgrades"))if(e.window.state.focused)await t.storage.delete("pendingWhatsNewOnFocus"),await(0,m.xs)(i);else{await t.storage.store("pendingWhatsNewOnFocus",!0);const r=e.window.onDidChangeWindowState((e=>{e.focused&&(r.dispose(),!0===t.storage.get("pendingWhatsNewOnFocus")&&(t.storage.delete("pendingWhatsNewOnFocus"),w.D.get("showWhatsNewAfterUpgrades")&&(0,m.xs)(i)))}));t.context.subscriptions.push(r)}}(O,o,n,x),R.store(n?"preVersion":"version",o),null!=F&&1!==(0,$.qu)(o,F)||R.store(n?"synced:preVersion":"synced:version",o),"debug"===P&&setTimeout((async()=>{"debug"===w.D.get("outputLevel")&&(O.prereleaseOrDebugging||await(0,m.EB)()&&(0,g.P0)(c.Gh.DisableDebugLogging))}),6e4)})),O.debugging?((0,v.v)("gitlens:debugging",!0),(0,v.v)("gitlens:prerelease",!0)):O.prerelease&&(0,v.v)("gitlens:prerelease",!0),await O.ready();const B=(0,A.xH)(w.D.getAll(!0),{prefix:"config",stringify:"all"});O.telemetry.setGlobalAttributes({debugging:O.debugging,prerelease:n,install:null==x,upgrade:null!=x&&o!==x,upgradedFrom:null!=x&&o!==x?x:void 0});const E=new Api(O),W=O.mode,N=D.startTime,M=(0,t.a)(),U=D.elapsed();return D.stop({message:` activated${null!=I?`, ${I}`:""}${null!=W?`, mode: ${W.name}`:""}`}),O.telemetry.sendEvent("activate",{"activation.elapsed":U,"activation.mode":W?.name,...B},N,M),Promise.resolve(E)}function ss(){C.Yd.log("GitLens deactivating..."),r.W.instance.deactivate()}is=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ts(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&es(t,i,o),o})([(0,g.WD)()],is)})(),module.exports=n})();