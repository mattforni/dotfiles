exports.id=449,exports.ids=[449],exports.modules={2142:(t,e,r)=>{r.r(e),r.d(e,{GitLabApi:()=>GitLabApi});var a=r(9496),n=r(3309),s=r(7338),o=r(4575),i=r(4092),l=r(7925),c=r(5148),d=r(4241),u=r(4336),h=r(6004),p=r(6398),g=r(4627),f=r(6630),m=Object.defineProperty,w=Object.getOwnPropertyDescriptor,b=(t,e,r,a)=>{for(var n,s=a>1?void 0:a?w(e,r):e,o=t.length-1;o>=0;o--)(n=t[o])&&(s=(a?n(e,r,s):n(s))||s);return a&&s&&m(e,r,s),s};class GitLabApi{_disposable;_projectIds=new Map;constructor(t){this._disposable=c.D.onDidChangeAny((t=>{(c.D.changedAny(t,["http.proxy","http.proxyStrictSSL"])||c.D.changed(t,["proxy","remotes"]))&&this.resetCaches()}))}dispose(){this._disposable.dispose()}resetCaches(){this._projectIds.clear(),this._proxyAgents.clear()}_proxyAgents=new Map;getProxyAgent(t){if(s.$L)return;let e=this._proxyAgents.get(t.id);if(void 0===e){const r=t.getIgnoreSSLErrors();e=(0,n.Nx)(!0!==r&&"force"!==r&&void 0),this._proxyAgents.set(t.id,e??null)}return e??void 0}async getAccountForCommit(t,e,r,n,s,i,l){const c=(0,h.UH)(),d=await this.getProjectId(t,e,r,n,i?.baseUrl,l);if(d)try{const r=await this.request(t,e,i?.baseUrl,`v4/projects/${d}/repository/commits/${s}?stats=false`,{method:"GET"},l,c);let n;const o=await this.findUser(t,e,r.author_name,i);for(const t of o)if(t.name===r.author_name||t.publicEmail&&t.publicEmail===r.author_email){if(n=t,"active"===t.state)break}else((0,g.qq)(t.name,r.author_name)||t.publicEmail&&(0,g.qq)(t.publicEmail,r.author_email))&&(n=t);if(null==n)return;return n.avatarUrl&&!/^([a-zA-Z][\w+.-]+):/.test(n.avatarUrl)&&(n.avatarUrl=a.Uri.joinPath(a.Uri.parse(n.webUrl),"..",n.avatarUrl).toString()),{provider:t,name:n.name||void 0,email:r.author_email||void 0,avatarUrl:n.avatarUrl||void 0}}catch(e){if(e instanceof o.Ww)return;throw this.handleException(e,t,c)}}async getAccountForEmail(t,e,r,a,n,s){const i=(0,h.UH)();try{const[r]=await this.findUser(t,e,n,s);if(null==r)return;return{provider:t,name:r.name||void 0,email:r.publicEmail||void 0,avatarUrl:r.avatarUrl||void 0}}catch(e){if(e instanceof o.Ww)return;throw this.handleException(e,t,i)}}async getDefaultBranch(t,e,r,a,n,s){const i=(0,h.UH)();try{const o="query getDefaultBranch(\n\t$fullPath: ID!\n) {\n\tproject(fullPath: $fullPath) {\n\t\trepository {\n\t\t\trootRef\n\t\t}\n}",l=await this.graphql(t,e,n?.baseUrl,o,{fullPath:`${r}/${a}`},s,i),c=l?.data?.project?.repository?.rootRef??void 0;if(null==c)return;return{provider:t,name:c}}catch(e){if(e instanceof o.Ww)return;throw this.handleException(e,t,i)}}async getIssueOrPullRequest(t,e,r,a,n,s,i){const l=(0,h.UH)();try{const o="query getIssueOrMergeRequest(\n\t$fullPath: ID!\n\t$iid: String!\n) {\n\tproject(fullPath: $fullPath) {\n\t\tmergeRequest(iid: $iid) {\n\t\t\tauthor {\n\t\t\t\tname\n\t\t\t\tavatarUrl\n\t\t\t\twebUrl\n\t\t\t}\n\t\t\tiid\n\t\t\ttitle\n\t\t\tdescription\n\t\t\tstate\n\t\t\tcreatedAt\n\t\t\tupdatedAt\n\t\t\tmergedAt\n\t\t\twebUrl\n\t\t}\n\t\tissue(iid: $iid) {\n\t\t\tauthor {\n\t\t\t\tname\n\t\t\t\tavatarUrl\n\t\t\t\twebUrl\n\t\t\t}\n\t\t\tiid\n\t\t\ttitle\n\t\t\tdescription\n\t\t\tstate\n\t\t\tcreatedAt\n\t\t\tupdatedAt\n\t\t\tclosedAt\n\t\t\twebUrl\n\t\t}\n\t}\n}",c=await this.graphql(t,e,s?.baseUrl,o,{fullPath:`${r}/${a}`,iid:String(n)},i,l);if(null!=c?.data?.project?.issue){const e=c.data.project.issue;return{provider:t,type:"issue",id:e.iid,nodeId:void 0,date:new Date(e.createdAt),title:e.title,closed:"closed"===e.state,closedDate:null==e.closedAt?void 0:new Date(e.closedAt),url:e.webUrl,state:"locked"===e.state?"closed":e.state}}if(null!=c?.data?.project?.mergeRequest){const e=c.data.project.mergeRequest;return{provider:t,type:"pullrequest",id:e.iid,nodeId:void 0,date:new Date(e.createdAt),title:e.title,closed:"closed"===e.state,closedDate:"closed"===e.state?new Date(e.updatedAt):void 0,url:e.webUrl,state:"locked"===e.state?"closed":e.state}}return}catch(e){if(e instanceof o.Ww)return;throw this.handleException(e,t,l)}}async getPullRequestForBranch(t,e,r,a,n,s,l){const c=(0,h.UH)();try{const o="\n\t\t\tnodes {\n\t\t\t\tiid\n\t\t\t\tauthor {\n\t\t\t\t\tname\n\t\t\t\t\tavatarUrl\n\t\t\t\t\twebUrl\n\t\t\t\t}\n\t\t\t\ttitle\n\t\t\t\tdescription\n\t\t\t\tstate\n\t\t\t\tcreatedAt\n\t\t\t\tupdatedAt\n\t\t\t\tmergedAt\n\t\t\t\twebUrl\n\t\t\t}",d=`query getMergeRequestForBranch(\n\t$fullPath: ID!\n\t$branches: [String!]\n) {\n\tproject(fullPath: $fullPath) {\n\t\t${null==s?.include?`mergeRequests(sourceBranches: $branches sort: UPDATED_DESC first: 1) {\n\t\t\t${o}\n\t\t}`:""}\n\t\t${s?.include?.includes("opened")?`opened: mergeRequests(sourceBranches: $branches state: opened sort: UPDATED_DESC first: 1) {\n\t\t\t${o}\n\t\t}`:""}\n\t\t${s?.include?.includes("merged")?`merged: mergeRequests(sourceBranches: $branches state: merged sort: UPDATED_DESC first: 1) {\n\t\t\t${o}\n\t\t}`:""}\n\t\t${s?.include?.includes("closed")?`closed: mergeRequests(sourceBranches: $branches state: closed sort: UPDATED_DESC first: 1) {\n\t\t\t${o}\n\t\t}`:""}\n\t}\n}`,u=await this.graphql(t,e,s?.baseUrl,d,{fullPath:`${r}/${a}`,branches:[n],state:s?.include},l,c);let h;if(null==s?.include)h=u?.data?.project?.mergeRequests?.nodes?.[0];else for(const t of s.include){let e;"opened"===t?e=u?.data?.project?.opened?.nodes?.[0]:"merged"===t?e=u?.data?.project?.merged?.nodes?.[0]:"closed"===t&&(e=u?.data?.project?.closed?.nodes?.[0]),null!=e&&(null==h||new Date(e.updatedAt)>new Date(h.updatedAt))&&(h=e)}if(null==h)return;return new i.i7(t,{name:h.author?.name??"Unknown",avatarUrl:h.author?.avatarUrl??"",url:h.author?.webUrl??""},String(h.iid),void 0,h.title,h.webUrl,(0,f.fromGitLabMergeRequestState)(h.state),new Date(h.updatedAt),"closed"!==h.state?void 0:new Date(h.updatedAt),null==h.mergedAt?void 0:new Date(h.mergedAt))}catch(e){if(e instanceof o.Ww)return;throw this.handleException(e,t,c)}}async getPullRequestForCommit(t,e,r,a,n,s,i){const l=(0,h.UH)(),c=await this.getProjectId(t,e,r,a,s?.baseUrl,i);if(c)try{const r=await this.request(t,e,s?.baseUrl,`v4/projects/${c}/repository/commits/${n}/merge_requests`,{method:"GET"},i,l);if(null==r||0===r.length)return;return r.length>1&&r.sort(((t,e)=>("opened"===t.state?-1:1)-("opened"===e.state?-1:1)||new Date(e.updated_at).getTime()-new Date(t.updated_at).getTime())),(0,f.fromGitLabMergeRequestREST)(r[0],t)}catch(e){if(e instanceof o.Ww)return;throw this.handleException(e,t,l)}}async getRepositoryMetadata(t,e,r,a,n,s){const i=(0,h.UH)(),l=await this.getProjectId(t,e,r,a,n?.baseUrl,s);if(l)try{const r=await this.request(t,e,n?.baseUrl,`v4/projects/${l}`,{method:"GET"},s,i);if(null==r)return;return{provider:t,owner:r.namespace.full_path,name:r.path,isFork:null!=r.forked_from_project,parent:null!=r.forked_from_project?{owner:r.forked_from_project.namespace.full_path,name:r.forked_from_project.path}:void 0}}catch(e){if(e instanceof o.Ww)return;throw this.handleException(e,t,i)}}async findUser(t,e,r,a,n){const s=(0,h.UH)();try{const o="query findUser(\n$search: String!\n) {\n\tusers(search: $search) {\n\t\tnodes {\n\t\t\tid\n\t\t\tname\n\t\t\tusername,\n\t\t\tpublicEmail,\n\t\t\tstate\n\t\t\tavatarUrl\n\t\t\twebUrl\n\t\t}\n\t}\n}",i=await this.graphql(t,e,a?.baseUrl,o,{search:r},n,s),l=i?.data?.users?.nodes;if(null==l||0===l.length)return[];const c=[];for(const t of l){const e=/gid:\/\/gitlab\/User\/([0-9]+)\b/.exec(t.id);null!=e&&c.push({id:parseInt(e[1],10),name:t.name,username:t.username,publicEmail:t.publicEmail||void 0,state:t.state,avatarUrl:t.avatarUrl,webUrl:t.webUrl})}return c}catch(e){return e instanceof o.Ww||this.handleException(e,t,s),[]}}getProjectId(t,e,r,a,n,s){const o=`${e}|${r}/${a}`;let i=this._projectIds.get(o);return null==i&&(i=this.getProjectIdCore(t,e,r,a,n,s),this._projectIds.set(o,i)),i}async getProjectIdCore(t,e,r,a,n,s){const i=(0,h.UH)();try{const o="query getProjectId(\n\t$fullPath: ID!\n) {\n\tproject(fullPath: $fullPath) {\n\t\tid\n\t}\n}",l=await this.graphql(t,e,n,o,{fullPath:`${r}/${a}`},s,i),c=l?.data?.project?.id;if(null==c)return;const d=/gid:\/\/gitlab\/Project\/([0-9]+)\b/.exec(c);if(null==d)return;const u=d[1];return(0,h.lH)(i,` â€¢ projectId=${u}`),u}catch(e){if(e instanceof o.Ww)return;return void this.handleException(e,t,i)}}async graphql(t,e,r,s,i,l,c){let d;try{const a=(0,p.k)(`[GITLAB] POST ${r}`,{log:!1}),c=this.getProxyAgent(t);try{let a;if(null!=l){if(l.isCancellationRequested)throw new o.FU;a=new AbortController,l.onCancellationRequested((()=>a.abort()))}if(d=await(0,n.a_)(t.getIgnoreSSLErrors(),(()=>(0,n.he)(`${r??"https://gitlab.com/api"}/graphql`,{method:"POST",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},agent:c,signal:a?.signal,body:JSON.stringify({query:s,variables:i})}))),d.ok){const t=await d.json();if("errors"in t)throw new o.Xq("GitLab",d,t.errors);return t}throw new o.Xq("GitLab",d)}finally{const t=/(^[^({\n]+)/.exec(s),e=` ${t?.[1].trim()??s}`;a?.stop({message:e})}}catch(r){throw r instanceof o.Xq||"AbortError"===r.name?this.handleRequestError(t,e,r,c):u.Yd.isDebugging&&a.window.showErrorMessage(`GitLab request failed: ${r.message}`),r}}async request(t,e,r,s,i,l,c){const d=`${r??"https://gitlab.com/api"}/${s}`;let h;try{const r=(0,p.k)(`[GITLAB] ${i?.method??"GET"} ${d}`,{log:!1}),a=this.getProxyAgent(t);try{let r;if(null!=l){if(l.isCancellationRequested)throw new o.FU;r=new AbortController,l.onCancellationRequested((()=>r.abort()))}if(h=await(0,n.a_)(t.getIgnoreSSLErrors(),(()=>(0,n.he)(d,{headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"},agent:a,signal:r?.signal,...i}))),h.ok){return await h.json()}throw new o.Xq("GitLab",h)}finally{r?.stop()}}catch(r){throw r instanceof o.Xq||"AbortError"===r.name?this.handleRequestError(t,e,r,c):u.Yd.isDebugging&&a.window.showErrorMessage(`GitLab request failed: ${r.message}`),r}}handleRequestError(t,e,r,n){if("AbortError"===r.name||!(r instanceof o.Xq))throw new o.FU;switch(r.status){case 404:case 410:case 422:throw new o.Ww(r);case 401:throw new o._7("gitlab",o.Jx.Unauthorized,r);case 403:if(r.message.includes("rate limit exceeded")){let t;const a=r.response?.headers?.get("x-ratelimit-reset");throw null!=a&&(t=parseInt(a,10),Number.isNaN(t)&&(t=void 0)),new o.yx(r,e,t)}throw new o._7("gitlab",o.Jx.Forbidden,r);case 500:return u.Yd.error(r,n),void(null!=r.response&&(t?.trackRequestException(),(0,l.vF)(`${t?.name??"GitLab"} failed to respond and might be experiencing issues.${t?.custom?"":" Please visit the [GitLab status page](https://status.gitlab.com) for more information."}`)));case 502:if(u.Yd.error(r,n),r.message.includes("timeout"))return t?.trackRequestException(),void(0,l.s$)(t?.name??"GitLab");break;default:if(r.status>=400&&r.status<500)throw new o.Bn(r)}u.Yd.error(r,n),u.Yd.isDebugging&&a.window.showErrorMessage(`GitLab request failed: ${r.response?.errors?.[0]?.message??r.message}`)}handleException(t,e,r){return u.Yd.error(t,r),t instanceof o._7&&this.showAuthenticationErrorMessage(t,e),t}async showAuthenticationErrorMessage(t,e){if(t.reason===o.Jx.Unauthorized||t.reason===o.Jx.Forbidden){const r="Reauthenticate";await a.window.showErrorMessage(`${t.message}. Would you like to try reauthenticating${t.reason===o.Jx.Forbidden?" to provide additional access":""}?`,r)===r&&(await e.reauthenticate(),this.resetCaches())}else a.window.showErrorMessage(t.message)}}b([(0,d.fF)({args:{0:t=>t.name,1:"<token>"}})],GitLabApi.prototype,"getAccountForCommit",1),b([(0,d.fF)({args:{0:t=>t.name,1:"<token>"}})],GitLabApi.prototype,"getAccountForEmail",1),b([(0,d.fF)({args:{0:t=>t.name,1:"<token>"}})],GitLabApi.prototype,"getDefaultBranch",1),b([(0,d.fF)({args:{0:t=>t.name,1:"<token>"}})],GitLabApi.prototype,"getIssueOrPullRequest",1),b([(0,d.fF)({args:{0:t=>t.name,1:"<token>"}})],GitLabApi.prototype,"getPullRequestForBranch",1),b([(0,d.fF)({args:{0:t=>t.name,1:"<token>"}})],GitLabApi.prototype,"getPullRequestForCommit",1),b([(0,d.fF)({args:{0:t=>t.name,1:"<token>"}})],GitLabApi.prototype,"getRepositoryMetadata",1)},6630:(t,e,r)=>{r.r(e),r.d(e,{fromGitLabMergeRequestREST:()=>o,fromGitLabMergeRequestState:()=>n,toGitLabMergeRequestState:()=>s});var a=r(4092);function n(t){return"locked"===t?"closed":t}function s(t){return t}function o(t,e){return new a.i7(e,{name:t.author?.name??"Unknown",avatarUrl:t.author?.avatar_url??"",url:t.author?.web_url??""},String(t.iid),void 0,t.title,t.web_url,n(t.state),new Date(t.updated_at),null==t.closed_at?void 0:new Date(t.closed_at),null==t.merged_at?void 0:new Date(t.merged_at))}}};