exports.id=384,exports.ids=[384],exports.modules={856:(e,t,i)=>{i.d(t,{FocusWebviewProvider:()=>FocusWebviewProvider});var r=i(7304),s=i(1608),n=i(7892),o=i(1235),a=i(352),l=i(2452),u=i(7956),h=i(8292),c=i(1424),d=i(4408),p=i(7840),m=i(7620),f=i(7824),g=i(4136),w=i(6448),R=i(3e3),b=i(972),_=i(2356),y=i(6584),v=i(6772);let I=new y.Ip("focus/pr/openWorktree"),q=new y.Ip("focus/pr/openBranch"),C=new y.Ip("focus/pr/switchToBranch"),P=new y.Ip("focus/pr/snooze"),S=new y.Ip("focus/pr/pin"),W=new y.Ip("focus/issue/snooze"),k=new y.Ip("focus/issue/pin"),A=new y.ik("focus/didChange",!0);var D=Object.defineProperty,E=Object.getOwnPropertyDescriptor,B=(e,t,i,r)=>{for(var s,n=r>1?void 0:r?E(t,i):t,o=e.length-1;o>=0;o--)(s=e[o])&&(n=(r?s(t,i,n):s(n))||n);return r&&n&&D(t,i,n),n};let FocusWebviewProvider=class FocusWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._disposable=r.Disposable.from(this.container.subscription.onDidChange(this.onSubscriptionChanged,this),this.container.git.onDidChangeRepositories(async()=>{this._etag!==this.container.git.etag&&(null==this._discovering||(this._etag=await this._discovering,this._etag!==this.container.git.etag))&&this.host.refresh(!0)}))}_pullRequests=[];_issues=[];_discovering;_disposable;_etag;_etagSubscription;_repositoryEventsDisposable;_repos;_enrichedItems;dispose(){null!=this.enrichmentExpirationTimeout&&(clearTimeout(this.enrichmentExpirationTimeout),this.enrichmentExpirationTimeout=void 0),this._disposable.dispose()}onMessageReceived(e){switch(e.method){case q.method:(0,y.El)(q,e,e=>this.onOpenBranch(e));break;case C.method:(0,y.El)(C,e,e=>this.onSwitchBranch(e));break;case I.method:(0,y.El)(I,e,e=>this.onOpenWorktree(e));break;case P.method:(0,y.El)(P,e,e=>this.onSnoozePr(e));break;case S.method:(0,y.El)(S,e,e=>this.onPinPr(e));break;case W.method:(0,y.El)(W,e,e=>this.onSnoozeIssue(e));break;case k.method:(0,y.El)(k,e,e=>this.onPinIssue(e))}}async onPinIssue({issue:e,pin:t}){let i=this._issues?.find(t=>t.issue.nodeId===e.nodeId);if(null!=i){if(t)await this.container.enrichments.unpinItem(t),this._enrichedItems=this._enrichedItems?.filter(e=>e.id!==t),i.enriched=i.enriched?.filter(e=>e.id!==t);else{let e={type:"issue",id:i.issue.nodeId,provider:(0,v.m)(i.repoAndRemote.remote.provider),url:i.issue.url},t=await this.container.enrichments.pinItem(e);if(null==t)return;null==this._enrichedItems&&(this._enrichedItems=[]),this._enrichedItems.push(t),null==i.enriched&&(i.enriched=[]),i.enriched.push(t)}this.notifyDidChangeState()}}async onSnoozeIssue({issue:e,snooze:t,expiresAt:i}){let r=this._issues?.find(t=>t.issue.nodeId===e.nodeId);if(null!=r){if(t)await this.container.enrichments.unsnoozeItem(t),this._enrichedItems=this._enrichedItems?.filter(e=>e.id!==t),r.enriched=r.enriched?.filter(e=>e.id!==t);else{let e={type:"issue",id:r.issue.nodeId,provider:(0,v.m)(r.repoAndRemote.remote.provider),url:r.issue.url};null!=i&&(e.expiresAt=i);let t=await this.container.enrichments.snoozeItem(e);if(null==t)return;null==this._enrichedItems&&(this._enrichedItems=[]),this._enrichedItems.push(t),null==r.enriched&&(r.enriched=[]),r.enriched.push(t)}this.notifyDidChangeState()}}async onPinPr({pullRequest:e,pin:t}){let i=this._pullRequests?.find(t=>t.pullRequest.nodeId===e.nodeId);if(null!=i){if(t)await this.container.enrichments.unpinItem(t),this._enrichedItems=this._enrichedItems?.filter(e=>e.id!==t),i.enriched=i.enriched?.filter(e=>e.id!==t);else{let e={type:"pr",id:i.pullRequest.nodeId,provider:(0,v.m)(i.repoAndRemote.remote.provider),url:i.pullRequest.url},t=await this.container.enrichments.pinItem(e);if(null==t)return;null==this._enrichedItems&&(this._enrichedItems=[]),this._enrichedItems.push(t),null==i.enriched&&(i.enriched=[]),i.enriched.push(t)}this.notifyDidChangeState()}}async onSnoozePr({pullRequest:e,snooze:t,expiresAt:i}){let r=this._pullRequests?.find(t=>t.pullRequest.nodeId===e.nodeId);if(null!=r){if(t)await this.container.enrichments.unsnoozeItem(t),this._enrichedItems=this._enrichedItems?.filter(e=>e.id!==t),r.enriched=r.enriched?.filter(e=>e.id!==t);else{let e={type:"pr",id:r.pullRequest.nodeId,provider:(0,v.m)(r.repoAndRemote.remote.provider),url:r.pullRequest.url};null!=i&&(e.expiresAt=i);let t=await this.container.enrichments.snoozeItem(e);if(null==t)return;null==this._enrichedItems&&(this._enrichedItems=[]),this._enrichedItems.push(t),null==r.enriched&&(r.enriched=[]),r.enriched.push(t)}this.notifyDidChangeState()}}findSearchedPullRequest(e){return this._pullRequests?.find(t=>t.pullRequest.id===e.id)}async getRemoteBranch(e){let t,i;let s=e.pullRequest,n=e.repoAndRemote,a=n.repo.uri,l=await n.repo.getMainRepository();if(null==l){r.window.showWarningMessage(`Unable to find main repository(${a.toString()}) for PR #${s.id}`);return}let u=s.refs.base.owner,h=r.Uri.parse(s.refs.base.url),d=s.refs.head.branch,p=r.Uri.parse(s.refs.head.url),f=p.toString(),[,g,w]=(0,m.Ud)(f);if([t]=await l.getRemotes({filter:e=>e.matches(g,w)}),null!=t)i=`${t.name}/${d}`,await this.container.git.fetch(l.path,{remote:t.name});else{let e=await r.window.showInformationMessage(`Unable to find a remote for '${f}'. Would you like to add a new remote?`,{modal:!0},{title:"Yes"},{title:"No",isCloseAffordance:!0});if(e?.title!=="Yes")return;let n=s.refs.head.owner;if(await (0,o.WQ)(l,n,f,{confirm:!1,fetch:!0,reveal:!1}),[t]=await l.getRemotes({filter:e=>e.url===f}),null==t)return;i=`${t.name}/${d}`;let a=s.refs.base.repo,c=`pr/${h.toString()===p.toString()?d:i}`;this.container.git.setConfig(l.path,`branch.${c}.github-pr-owner-number`,`${u}#${a}#${s.id}`)}return{remote:t,reference:(0,c.op)(i,l.path,{refType:"branch",name:i,remote:!0})}}async onOpenBranch({pullRequest:e}){let t=this.findSearchedPullRequest(e);if(null==t)return;let i=await this.getRemoteBranch(t);if(null==i){r.window.showErrorMessage(`Unable to find remote branch for '${t.pullRequest.refs?.head.owner}:${t.pullRequest.refs?.head.branch}'`);return}(0,f.gf)(s.eq.ShowInCommitGraph,{ref:i.reference})}async onSwitchBranch({pullRequest:e}){let t=this.findSearchedPullRequest(e);if(null==t||t.isCurrentBranch)return;if(null!=t.branch)return a.q8(t.branch.repoPath,t.branch);let i=await this.getRemoteBranch(t);if(null==i){r.window.showErrorMessage(`Unable to find remote branch for '${t.pullRequest.refs?.head.owner}:${t.pullRequest.refs?.head.branch}'`);return}return a.q8(i.remote.repoPath,i.reference)}async onOpenWorktree({pullRequest:e}){let t=this.findSearchedPullRequest(e);if(t?.repoAndRemote==null)return;let i=r.Uri.parse(e.refs.base.url),n=t.repoAndRemote.repo.uri;return(0,f.gf)(s.eq.OpenOrCreateWorktreeForGHPR,{base:{repositoryCloneUrl:{repositoryName:e.refs.base.repo,owner:e.refs.base.owner,url:i}},githubRepository:{rootUri:n},head:{ref:e.refs.head.branch,sha:e.refs.head.sha,repositoryCloneUrl:{repositoryName:e.refs.head.repo,owner:e.refs.head.owner,url:r.Uri.parse(e.refs.head.url)}},item:{number:parseInt(e.id,10)}})}onSubscriptionChanged(e){e.etag!==this._etagSubscription&&(this._etagSubscription=e.etag,this._access=void 0,this.notifyDidChangeState())}_access;async getAccess(e){return(e||null==this._access)&&(this._access=await this.container.git.access(n.i.Focus)),this._access}enrichmentExpirationTimeout;ensureEnrichmentExpirationCore(e){let t;if(null!=this.enrichmentExpirationTimeout&&(clearTimeout(this.enrichmentExpirationTimeout),this.enrichmentExpirationTimeout=void 0),null==e||0===e.length)return;let i=Date.now();for(let r of e){if(null==r.expiresAt)continue;let e=new Date(r.expiresAt).getTime();(null==t||e>i&&e<t)&&(t=e)}if(null==t)return;let r=t+9e5;for(let i of e){if(null==i.expiresAt)continue;let e=new Date(i.expiresAt).getTime();e>t&&e<r&&(t=e)}let s=t-i+6e4;this.enrichmentExpirationTimeout=setTimeout(()=>{this.notifyDidChangeState(!0)},s)}async getState(e,t){let i=this.host.baseWebviewState;this._etag=this.container.git.etag,this.container.git.isDiscoveringRepositories&&(this._discovering=this.container.git.isDiscoveringRepositories.then(e=>(this._discovering=void 0,e)),this._etag=await this._discovering);let r=await this.getAccess(e);if(!0!==r.allowed)return{...i,access:r};let s=(await this.getRichRepos(e)).filter(e=>e.isGitHub),n=s.filter(e=>e.isConnected&&e.isGitHub);if(!(n.length>0))return{...i,access:r,repos:s.map(e=>$(e))};let o=n.map(e=>$(e)),a=Promise.allSettled([this.getMyPullRequests(n,e),this.getMyIssues(n,e),this.getEnrichedItems(e)]),l=async()=>{let[e,t,s]=await a,n=[],l=_.Cv(e)?.map(e=>{let t=x(e,_.Cv(s));return null!=t&&n.push(...t),{pullRequest:h.AX(e.pullRequest),reasons:e.reasons,isCurrentBranch:e.isCurrentBranch??!1,isCurrentWorktree:e.isCurrentWorktree??!1,hasWorktree:e.hasWorktree??!1,hasLocalBranch:e.hasLocalBranch??!1,enriched:F(t),rank:e.rank}}),c=_.Cv(t)?.map(e=>{let t=x(e,_.Cv(s));return null!=t&&n.push(...t),{issue:u.Wq(e.issue),reasons:e.reasons,enriched:F(t),rank:e.rank}});return this.ensureEnrichmentExpirationCore(n),{...i,access:r,repos:o,pullRequests:l,issues:c}};return t?(queueMicrotask(async()=>{let e=await l();this.host.notify(A,{state:e})}),{...i,access:r,repos:o}):await l()}async includeBootstrap(){return this.getState(!0,!0)}async getRichRepos(e){if(e||null==this._repos){let e=[],t=[];for(let i of this.container.git.openRepositories){let r=await i.getBestRemoteWithIntegration({includeDisconnected:!0});if(null==r||e.findIndex(e=>e.remote===r)>-1)continue;t.push(i.onDidChange(this.onRepositoryChanged,this));let s=this.container.integrations.getByRemote(r);e.push({repo:i,remote:r,isConnected:s?.maybeConnected??await s?.isConnected()??!1,isGitHub:"github"===r.provider.id})}this._repositoryEventsDisposable&&(this._repositoryEventsDisposable.dispose(),this._repositoryEventsDisposable=void 0),this._repositoryEventsDisposable=r.Disposable.from(...t),this._repos=e}return this._repos}onRepositoryChanged(e){e.changed(d.c7.RemoteProviders,d.MR.Any)&&this.notifyDidChangeState(!0)}async getMyPullRequests(e,t){let i=(0,R.b1)();if(t||null==this._pullRequests){let t=[],r=new Map,s=new Map;for(let[n,o]of e.map(e=>[e,this.container.integrations.getMyPullRequestsForRemotes(e.remote)])){let e;try{e=await o}catch(e){w.YJ.error(e,i,`Failed to get prs for '${n.remote.url}'`)}if(null!=e)for(let i of e){if(0===i.reasons.length)continue;let e={...i,repoAndRemote:n,isCurrentWorktree:!1,isCurrentBranch:!1,rank:function(e){let t=0;return e.reasons.includes("authored")?t+=1e3:e.reasons.includes("assigned")?t+=900:e.reasons.includes("review-requested")?t+=800:e.reasons.includes("mentioned")&&(t+=700),e.pullRequest.reviewDecision===h.Kl.Approved?e.pullRequest.mergeableState===h.ak.Mergeable?t+=100:e.pullRequest.mergeableState===h.ak.Conflicting?t+=90:t+=80:e.pullRequest.reviewDecision===h.Kl.ChangesRequested&&(t+=70),t}(i)},o=`${e.pullRequest.refs.head.owner}/${e.pullRequest.refs.head.branch}`,a=r.get(e.repoAndRemote.repo);null==a&&(a=new b.c(t=>e.repoAndRemote.repo.getBranches(null!=t?{paging:t}:void 0)),r.set(e.repoAndRemote.repo,a));let u=s.get(e.repoAndRemote.repo);null==u&&(u=await e.repoAndRemote.repo.getWorktrees(),s.set(e.repoAndRemote.repo,u));let c=await (0,p.i)(e.repoAndRemote.repo,e.pullRequest.refs.head.branch,o,u,a);e.hasWorktree=null!=c,e.isCurrentWorktree=c?.opened===!0;let d=await (0,l.Yp)(n.repo,o,a);d&&(e.branch=d,e.hasLocalBranch=!0,e.isCurrentBranch=d.current),t.push(e)}}this._pullRequests=t.sort((e,t)=>{let i=e.rank,r=t.rank;return i===r?e.pullRequest.date.getTime()-t.pullRequest.date.getTime():(r??0)-(i??0)})}return this._pullRequests}async getMyIssues(e,t){let i=(0,R.b1)();if(t||null==this._pullRequests){let t=[];for(let[r,s]of e.map(e=>[e,this.container.integrations.getMyIssuesForRemotes(e.remote)])){let e;try{e=await s}catch(e){w.YJ.error(e,i,`Failed to get issues for '${r.remote.url}'`)}if(null!=e)for(let i of e)0!==i.reasons.length&&t.push({...i,repoAndRemote:r,rank:0})}this._issues=t.sort((e,t)=>t.issue.updatedDate.getTime()-e.issue.updatedDate.getTime())}return this._issues}async getEnrichedItems(e){if(e||null==this._enrichedItems){let e=await this.container.enrichments.get();this._enrichedItems=e}return this._enrichedItems}async notifyDidChangeState(e,t){this.host.notify(A,{state:await this.getState(e,t)})}};function x(e,t){let i;if(null==t||0===t.length){e.enriched=void 0;return}if(0!==(i=null!=e.pullRequest?t.filter(t=>t.entityUrl===e.pullRequest.url):t.filter(t=>t.entityUrl===e.issue.url)).length)return e.enriched=i,i}function F(e){if(null!=e&&0!==e.length)return e.map(e=>({id:e.id,type:e.type,expiresAt:e.expiresAt}))}function $(e){return{repo:e.repo.path,isGitHub:e.isGitHub,isConnected:e.isConnected}}B([(0,g.u_)({args:!1})],FocusWebviewProvider.prototype,"onPinIssue",1),B([(0,g.u_)({args:!1})],FocusWebviewProvider.prototype,"onSnoozeIssue",1),B([(0,g.u_)({args:!1})],FocusWebviewProvider.prototype,"onPinPr",1),B([(0,g.u_)({args:!1})],FocusWebviewProvider.prototype,"onSnoozePr",1),B([(0,g.u_)({args:!1})],FocusWebviewProvider.prototype,"onOpenBranch",1),B([(0,g.u_)({args:!1})],FocusWebviewProvider.prototype,"onSwitchBranch",1),B([(0,g.u_)({args:!1})],FocusWebviewProvider.prototype,"onOpenWorktree",1),B([(0,g.u_)()],FocusWebviewProvider.prototype,"getAccess",1),B([(0,g.u_)()],FocusWebviewProvider.prototype,"getState",1),B([(0,g.u_)()],FocusWebviewProvider.prototype,"getRichRepos",1),B([(0,g.u_)({args:{0:!1}})],FocusWebviewProvider.prototype,"getMyPullRequests",1),B([(0,g.u_)({args:{0:!1}})],FocusWebviewProvider.prototype,"getMyIssues",1),B([(0,g.u_)()],FocusWebviewProvider.prototype,"getEnrichedItems",1)}};