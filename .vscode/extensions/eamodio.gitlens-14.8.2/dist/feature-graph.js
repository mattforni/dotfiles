exports.id=340,exports.ids=[340],exports.modules={6832:(e,t,i)=>{i.d(t,{GraphWebviewProvider:()=>GraphWebviewProvider});var s=i(7304),r=i(5576),o=i(7452),a=i(1608),n=i(7892),h=i(6644),l=i(1144),p=i(1888),d=i(352),g=i(1148),u=i(5920),c=i(688),m=i(4532),f=i(2452),v=i(2060),w=i(7260),y=i(1424),b=i(2152),C=i(2036),R=i(4408),_=i(4516),W=i(1296),P=i(7824),S=i(4169),D=i(3664),I=i(6e3),k=i(4136),G=i(8196),M=i(7348),T=i(4204),O=i(2356),F=i(3284),V=i(6240),B=i(7412),q=i(6584),A=i(4008);let E=["upstream","pullRequest","issue"],x=new q.Ip("graph/chooseRepository"),H=new q.Ip("graph/dimMergeCommits"),L=new q.Ip("graph/dblclick"),N=new q.Ip("graph/rows/ensure"),j=new q.Ip("graph/avatars/get"),$=new q.Ip("graph/refs/metadata/get"),U=new q.Ip("graph/rows/get"),K=new q.Ip("graph/search"),Q=new q.Ip("graph/search/openInView"),z=new q.Ip("graph/columns/update"),X=new q.Ip("graph/refs/update/visibility"),Y=new q.Ip("graph/fitlers/update/excludeType"),J=new q.Ip("graph/configuration/update"),Z=new q.Ip("graph/fitlers/update/includeOnlyRefs"),ee=new q.Ip("graph/selection/update"),et=new q.ik("graph/didChange",!0,!0),ei=new q.ik("graph/configuration/didChange"),es=new q.ik("graph/subscription/didChange"),er=new q.ik("graph/avatars/didChange"),eo=new q.ik("graph/refs/didChangeMetadata"),ea=new q.ik("graph/columns/didChange"),en=new q.ik("graph/scrollMarkers/didChange"),eh=new q.ik("graph/focus/didChange"),el=new q.ik("graph/window/focus/didChange"),ep=new q.ik("graph/refs/didChangeVisibility"),ed=new q.ik("graph/rows/didChange",void 0,!0),eg=new q.ik("graph/rows/stats/didChange"),eu=new q.ik("graph/selection/didChange"),ec=new q.ik("graph/workingTree/didChange"),em=new q.ik("graph/rows/didEnsure"),ef=new q.ik("graph/didSearch"),ev=new q.ik("graph/didFetch");var ew=Object.defineProperty,ey=Object.getOwnPropertyDescriptor,eb=(e,t,i,s)=>{for(var r,o=s>1?void 0:s?ey(t,i):t,a=e.length-1;a>=0;a--)(r=e[a])&&(o=(s?r(t,i,o):r(o))||o);return s&&o&&ew(t,i,o),o};let eC={ref:{width:130,isHidden:!1,order:0},graph:{width:150,mode:void 0,isHidden:!1,order:1},message:{width:300,isHidden:!1,order:2},author:{width:130,isHidden:!1,order:3},changes:{width:200,isHidden:!1,order:4},datetime:{width:130,isHidden:!1,order:5},sha:{width:130,isHidden:!1,order:6}},eR={ref:{width:32,isHidden:!1},graph:{width:150,mode:"compact",isHidden:!1},author:{width:32,isHidden:!1,order:2},message:{width:500,isHidden:!1,order:3},changes:{width:200,isHidden:!1,order:4},datetime:{width:130,isHidden:!0,order:5},sha:{width:130,isHidden:!1,order:6}};let GraphWebviewProvider=class GraphWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._showDetailsView=S.i.get("graph.showDetailsView"),this._theme=s.window.activeColorTheme,this.ensureRepositorySubscriptions(),this.host.isHost("view")&&(this.host.description="âœ¨"),this._disposable=s.Disposable.from(S.i.onDidChange(this.onConfigurationChanged,this),this.container.subscription.onDidChange(this.onSubscriptionChanged,this),this.container.git.onDidChangeRepositories(async()=>{this._etag!==this.container.git.etag&&(null==this._discovering||(this._etag=await this._discovering,this._etag!==this.container.git.etag))&&this.host.refresh(!0)}),s.window.onDidChangeActiveColorTheme(this.onThemeChanged,this),{dispose:()=>{null!=this._repositoryEventsDisposable&&(this._repositoryEventsDisposable.dispose(),this._repositoryEventsDisposable=void 0)}})}_repository;get repository(){return this._repository}set repository(e){if(this._repository===e){this.ensureRepositorySubscriptions();return}this._repository=e,this.resetRepositoryState(),this.ensureRepositorySubscriptions(!0),this.host.ready&&this.updateState()}_selection;get activeSelection(){return this._selection?.[0]}_discovering;_disposable;_etag;_etagSubscription;_etagRepository;_firstSelection=!0;_graph;_ipcNotificationMap=new Map([[ea,this.notifyDidChangeColumns],[ei,this.notifyDidChangeConfiguration],[et,this.notifyDidChangeState],[ep,this.notifyDidChangeRefsVisibility],[en,this.notifyDidChangeScrollMarkers],[eu,this.notifyDidChangeSelection],[es,this.notifyDidChangeSubscription],[ec,this.notifyDidChangeWorkingTree],[el,this.notifyDidChangeWindowFocus],[ev,this.notifyDidFetch]]);_refsMetadata;_search;_searchCancellation;_selectedId;_selectedRows;_showDetailsView;_theme;_repositoryEventsDisposable;_lastFetchedDisposable;isWindowFocused=!0;dispose(){this._disposable.dispose()}canReuseInstance(...e){let t;if(1===this.container.git.openRepositoryCount)return!0;let[i]=e;return(0,R.Oc)(i)?t=i:eS(i)?t=this.container.git.getRepository(i.ref.repoPath):(0,A.E)(i)&&null!=i.state.selectedRepository&&(t=this.container.git.getRepository(i.state.selectedRepository)),t?.uri.toString()===this.repository?.uri.toString()||void 0}getSplitArgs(){return null!=this.repository?[this.repository]:[]}async onShowing(e,t,...i){this._firstSelection=!0,this._etag=this.container.git.etag,this.container.git.isDiscoveringRepositories&&(this._discovering=this.container.git.isDiscoveringRepositories.then(e=>(this._discovering=void 0,e)),this._etag=await this._discovering);let[s]=i;if((0,R.Oc)(s))this.repository=s;else if(eS(s)){this.repository=this.container.git.getRepository(s.ref.repoPath);let e=s.ref.ref;if((0,y.kp)(e)||(e=await this.container.git.resolveReference(s.ref.repoPath,e,void 0,{force:!0})),this.setSelectedRows(e),null!=this._graph){if(this._graph?.ids.has(e))return this.notifyDidChangeSelection(),!0;this.onGetMoreRows({id:e},!0)}}else if((0,A.E)(s)&&null!=s.state.selectedRepository&&(this.repository=this.container.git.getRepository(s.state.selectedRepository)),null==this.repository&&this.container.git.repositoryCount>1){let[t]=(0,o.Om)(a.eq.ShowGraph,void 0,...i),s=Array.isArray(t)?t[0]:t;"scm"===s.type&&null!=s.scm.rootUri?this.repository=this.container.git.getRepository(s.scm.rootUri):"viewItem"===s.type&&s.node instanceof B.Q&&(this.repository=s.node.repo),null!=this.repository&&!e&&this.host.ready&&this.updateState()}return!0}onRefresh(e){e&&this.resetRepositoryState()}includeBootstrap(){return this.getState(!0)}registerCommands(){let e=[];return this.host.isHost("view")&&e.push((0,P.or)(`${this.host.id}.refresh`,()=>this.host.refresh(!0)),(0,P.or)(`${this.host.id}.openInTab`,()=>void(0,P.gf)(a.eq.ShowGraphPage,void 0,this.repository))),e.push(this.host.registerWebviewCommand("gitlens.graph.push",this.push),this.host.registerWebviewCommand("gitlens.graph.pull",this.pull),this.host.registerWebviewCommand("gitlens.graph.fetch",this.fetch),this.host.registerWebviewCommand("gitlens.graph.publishBranch",this.publishBranch),this.host.registerWebviewCommand("gitlens.graph.switchToAnotherBranch",this.switchToAnother),this.host.registerWebviewCommand("gitlens.graph.createBranch",this.createBranch),this.host.registerWebviewCommand("gitlens.graph.deleteBranch",this.deleteBranch),this.host.registerWebviewCommand("gitlens.graph.copyRemoteBranchUrl",e=>this.openBranchOnRemote(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openBranchOnRemote",this.openBranchOnRemote),this.host.registerWebviewCommand("gitlens.graph.mergeBranchInto",this.mergeBranchInto),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoBranch",this.rebase),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoUpstream",this.rebaseToRemote),this.host.registerWebviewCommand("gitlens.graph.renameBranch",this.renameBranch),this.host.registerWebviewCommand("gitlens.graph.switchToBranch",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.hideLocalBranch",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.hideRemoteBranch",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.hideRemote",e=>this.hideRef(e,{remote:!0})),this.host.registerWebviewCommand("gitlens.graph.hideRefGroup",e=>this.hideRef(e,{group:!0})),this.host.registerWebviewCommand("gitlens.graph.hideTag",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.cherryPick",this.cherryPick),this.host.registerWebviewCommand("gitlens.graph.copyRemoteCommitUrl",e=>this.openCommitOnRemote(e,!0)),this.host.registerWebviewCommand("gitlens.graph.showInDetailsView",this.openInDetailsView),this.host.registerWebviewCommand("gitlens.graph.openCommitOnRemote",this.openCommitOnRemote),this.host.registerWebviewCommand("gitlens.graph.openSCM",this.openSCM),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoCommit",this.rebase),this.host.registerWebviewCommand("gitlens.graph.resetCommit",this.resetCommit),this.host.registerWebviewCommand("gitlens.graph.resetToCommit",this.resetToCommit),this.host.registerWebviewCommand("gitlens.graph.resetToTip",this.resetToTip),this.host.registerWebviewCommand("gitlens.graph.revert",this.revertCommit),this.host.registerWebviewCommand("gitlens.graph.switchToCommit",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.undoCommit",this.undoCommit),this.host.registerWebviewCommand("gitlens.graph.stash.save",this.saveStash),this.host.registerWebviewCommand("gitlens.graph.stash.apply",this.applyStash),this.host.registerWebviewCommand("gitlens.graph.stash.delete",this.deleteStash),this.host.registerWebviewCommand("gitlens.graph.stash.rename",this.renameStash),this.host.registerWebviewCommand("gitlens.graph.createTag",this.createTag),this.host.registerWebviewCommand("gitlens.graph.deleteTag",this.deleteTag),this.host.registerWebviewCommand("gitlens.graph.switchToTag",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.createWorktree",this.createWorktree),this.host.registerWebviewCommand("gitlens.graph.createPullRequest",this.createPullRequest),this.host.registerWebviewCommand("gitlens.graph.openPullRequest",this.openPullRequest),this.host.registerWebviewCommand("gitlens.graph.openPullRequestChanges",this.openPullRequestChanges),this.host.registerWebviewCommand("gitlens.graph.openPullRequestComparison",this.openPullRequestComparison),this.host.registerWebviewCommand("gitlens.graph.openPullRequestOnRemote",this.openPullRequestOnRemote),this.host.registerWebviewCommand("gitlens.graph.compareWithUpstream",this.compareWithUpstream),this.host.registerWebviewCommand("gitlens.graph.compareWithHead",this.compareHeadWith),this.host.registerWebviewCommand("gitlens.graph.compareWithWorking",this.compareWorkingWith),this.host.registerWebviewCommand("gitlens.graph.compareAncestryWithWorking",this.compareAncestryWithWorking),this.host.registerWebviewCommand("gitlens.graph.copy",this.copy),this.host.registerWebviewCommand("gitlens.graph.copyMessage",this.copyMessage),this.host.registerWebviewCommand("gitlens.graph.copySha",this.copySha),this.host.registerWebviewCommand("gitlens.graph.addAuthor",this.addAuthor),this.host.registerWebviewCommand("gitlens.graph.columnAuthorOn",()=>this.toggleColumn("author",!0)),this.host.registerWebviewCommand("gitlens.graph.columnAuthorOff",()=>this.toggleColumn("author",!1)),this.host.registerWebviewCommand("gitlens.graph.columnDateTimeOn",()=>this.toggleColumn("datetime",!0)),this.host.registerWebviewCommand("gitlens.graph.columnDateTimeOff",()=>this.toggleColumn("datetime",!1)),this.host.registerWebviewCommand("gitlens.graph.columnShaOn",()=>this.toggleColumn("sha",!0)),this.host.registerWebviewCommand("gitlens.graph.columnShaOff",()=>this.toggleColumn("sha",!1)),this.host.registerWebviewCommand("gitlens.graph.columnChangesOn",()=>this.toggleColumn("changes",!0)),this.host.registerWebviewCommand("gitlens.graph.columnChangesOff",()=>this.toggleColumn("changes",!1)),this.host.registerWebviewCommand("gitlens.graph.columnGraphOn",()=>this.toggleColumn("graph",!0)),this.host.registerWebviewCommand("gitlens.graph.columnGraphOff",()=>this.toggleColumn("graph",!1)),this.host.registerWebviewCommand("gitlens.graph.columnMessageOn",()=>this.toggleColumn("message",!0)),this.host.registerWebviewCommand("gitlens.graph.columnMessageOff",()=>this.toggleColumn("message",!1)),this.host.registerWebviewCommand("gitlens.graph.columnRefOn",()=>this.toggleColumn("ref",!0)),this.host.registerWebviewCommand("gitlens.graph.columnRefOff",()=>this.toggleColumn("ref",!1)),this.host.registerWebviewCommand("gitlens.graph.columnGraphCompact",()=>this.setColumnMode("graph","compact")),this.host.registerWebviewCommand("gitlens.graph.columnGraphDefault",()=>this.setColumnMode("graph",void 0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerLocalBranchOn",()=>this.toggleScrollMarker("localBranches",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerLocalBranchOff",()=>this.toggleScrollMarker("localBranches",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerRemoteBranchOn",()=>this.toggleScrollMarker("remoteBranches",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerRemoteBranchOff",()=>this.toggleScrollMarker("remoteBranches",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerStashOn",()=>this.toggleScrollMarker("stashes",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerStashOff",()=>this.toggleScrollMarker("stashes",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerTagOn",()=>this.toggleScrollMarker("tags",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerTagOff",()=>this.toggleScrollMarker("tags",!1)),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToBranch",this.copyDeepLinkToBranch),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToCommit",this.copyDeepLinkToCommit),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToRepo",this.copyDeepLinkToRepo),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToTag",this.copyDeepLinkToTag),this.host.registerWebviewCommand("gitlens.graph.shareAsCloudPatch",this.shareAsCloudPatch),this.host.registerWebviewCommand("gitlens.graph.openChangedFiles",this.openFiles),this.host.registerWebviewCommand("gitlens.graph.openOnlyChangedFiles",this.openOnlyChangedFiles),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffs",e=>this.openAllChanges(e)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsWithWorking",e=>this.openAllChangesWithWorking(e)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsIndividually",e=>this.openAllChanges(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsWithWorkingIndividually",e=>this.openAllChangesWithWorking(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileRevisions",this.openRevisions),this.host.registerWebviewCommand("gitlens.graph.resetColumnsDefault",()=>this.updateColumns(eC)),this.host.registerWebviewCommand("gitlens.graph.resetColumnsCompact",()=>this.updateColumns(eR)),this.host.registerWebviewCommand("gitlens.graph.copyWorkingChangesToWorktree",this.copyWorkingChangesToWorktree)),e}onWindowFocusChanged(e){this.isWindowFocused=e,this.notifyDidChangeWindowFocus()}onFocusChanged(e){this._showActiveSelectionDetailsDebounced?.cancel(),this.notifyDidChangeFocus(e),e&&null!=this.activeSelection&&this.container.commitDetailsView.visible&&this.showActiveSelectionDetails()}onVisibilityChanged(e){if(e||this._showActiveSelectionDetailsDebounced?.cancel(),e&&(null!=this.repository&&this.repository.etag!==this._etagRepository||this.container.subscription.etag!==this._etagSubscription)){this.updateState(!0);return}if(e){this.host.sendPendingIpcNotifications();let{activeSelection:e}=this;if(null==e)return;this.showActiveSelectionDetails()}}onMessageReceived(e){switch(e.method){case x.method:(0,q.El)(x,e,()=>this.onChooseRepository());break;case H.method:(0,q.El)(H,e,e=>this.dimMergeCommits(e));break;case L.method:(0,q.El)(L,e,e=>this.onDoubleClick(e));break;case N.method:(0,q.El)(N,e,t=>this.onEnsureRow(t,e.completionId));break;case j.method:(0,q.El)(j,e,e=>this.onGetMissingAvatars(e));break;case $.method:(0,q.El)($,e,e=>this.onGetMissingRefMetadata(e));break;case U.method:(0,q.El)(U,e,e=>this.onGetMoreRows(e));break;case K.method:(0,q.El)(K,e,t=>this.onSearch(t,e.completionId));break;case Q.method:(0,q.El)(Q,e,e=>this.onSearchOpenInView(e));break;case z.method:(0,q.El)(z,e,e=>this.onColumnsChanged(e));break;case J.method:(0,q.El)(J,e,e=>this.updateGraphConfig(e));break;case X.method:(0,q.El)(X,e,e=>this.onRefsVisibilityChanged(e));break;case ee.method:(0,q.El)(ee,e,this.onSelectionChanged.bind(this));break;case Y.method:(0,q.El)(Y,e,e=>this.updateExcludedType(this._graph,e));break;case Z.method:(0,q.El)(Z,e,e=>this.updateIncludeOnlyRefs(this._graph,e.refs))}}updateGraphConfig(e){let t;let i=this.getComponentConfig();for(t in e.changes)if(i[t]!==e.changes[t])switch(t){case"minimap":S.i.updateEffective("graph.minimap.enabled",e.changes[t]);break;case"minimapDataType":S.i.updateEffective("graph.minimap.dataType",e.changes[t]);break;case"minimapMarkerTypes":{let i=[];for(let s of e.changes[t]??[])switch(s){case"localBranches":case"remoteBranches":case"stashes":case"tags":i.push(s)}S.i.updateEffective("graph.minimap.additionalTypes",i)}}}_showActiveSelectionDetailsDebounced=void 0;showActiveSelectionDetails(){null==this._showActiveSelectionDetailsDebounced&&(this._showActiveSelectionDetailsDebounced=(0,G.Cu)(this.showActiveSelectionDetailsCore.bind(this),250)),this._showActiveSelectionDetailsDebounced()}showActiveSelectionDetailsCore(){let{activeSelection:e}=this;null!=e&&this.host.active&&this.container.events.fire("commit:selected",{commit:e,interaction:"passive",preserveFocus:!0,preserveVisibility:!1===this._showDetailsView},{source:this.host.id})}onConfigurationChanged(e){if(S.i.changed(e,"graph.showDetailsView")&&(this._showDetailsView=S.i.get("graph.showDetailsView")),S.i.changed(e,"graph.commitOrdering")){this.updateState();return}(S.i.changed(e,"defaultDateFormat")||S.i.changed(e,"defaultDateStyle")||S.i.changed(e,"advanced.abbreviatedShaLength")||S.i.changed(e,"graph.avatars")||S.i.changed(e,"graph.dateFormat")||S.i.changed(e,"graph.dateStyle")||S.i.changed(e,"graph.dimMergeCommits")||S.i.changed(e,"graph.highlightRowsOnRefHover")||S.i.changed(e,"graph.scrollRowPadding")||S.i.changed(e,"graph.scrollMarkers.enabled")||S.i.changed(e,"graph.scrollMarkers.additionalTypes")||S.i.changed(e,"graph.showGhostRefsOnRowHover")||S.i.changed(e,"graph.pullRequests.enabled")||S.i.changed(e,"graph.showRemoteNames")||S.i.changed(e,"graph.showUpstreamStatus")||S.i.changed(e,"graph.minimap.enabled")||S.i.changed(e,"graph.minimap.dataType")||S.i.changed(e,"graph.minimap.additionalTypes"))&&(this.notifyDidChangeConfiguration(),(S.i.changed(e,"graph.minimap.enabled")||S.i.changed(e,"graph.minimap.dataType"))&&S.i.get("graph.minimap.enabled")&&"lines"===S.i.get("graph.minimap.dataType")&&!this._graph?.includes?.stats&&this.updateState())}onRepositoryChanged(e){if(!e.changed(R.c7.Config,R.c7.Head,R.c7.Heads,R.c7.Remotes,R.c7.Stash,R.c7.Status,R.c7.Tags,R.c7.Unknown,R.MR.Any)){this._etagRepository=e.repository.etag;return}e.changed(R.c7.Head,R.MR.Any)&&this.setSelectedRows(void 0),this.updateState(!e.changed(R.c7.Unknown,R.MR.Exclusive))}onRepositoryFileSystemChanged(e){e.repository?.path===this.repository?.path&&this.notifyDidChangeWorkingTree()}onSubscriptionChanged(e){e.etag!==this._etagSubscription&&(this._etagSubscription=e.etag,this.notifyDidChangeSubscription())}onThemeChanged(e){null!=this._theme&&((0,F.uG)(e)&&(0,F.uG)(this._theme)||(0,F.Q5)(e)&&(0,F.Q5)(this._theme))||(this._theme=e,this.updateState())}dimMergeCommits(e){S.i.updateEffective("graph.dimMergeCommits",e.dim)}onColumnsChanged(e){this.updateColumns(e.config)}onRefsVisibilityChanged(e){this.updateExcludedRefs(this._graph,e.refs,e.visible)}onDoubleClick(e){if("ref"===e.type&&e.ref.context){let t=this.getGraphItemContext(e.ref.context);if(eP(t)){if(null!=e.metadata){if(t=this.getGraphItemContext(e.metadata.data.context),"upstream"===e.metadata.type&&eW(t,"upstreamStatus")){let{ahead:e,behind:i,ref:s}=t.webviewItemValue;if(i>0)return void d.C0(s.repoPath,s);if(e>0)return void d.qY(s.repoPath,!1,s)}else if("pullRequest"===e.metadata.type&&eW(t,"pullrequest"))return void this.openPullRequestOnRemote(t);return}let{ref:i}=t.webviewItemValue;return"head"===e.ref.refType&&e.ref.isCurrentHead?d.q8(i.repoPath):d.q8(i.repoPath,i,!!S.i.isUnset("gitCommands.skipConfirmations")||void 0)}}else if("row"===e.type&&e.row){this._showActiveSelectionDetailsDebounced?.cancel();let t=this.getRevisionReference(this.repository?.path,e.row.id,e.row.type);if(null!=t){this.container.events.fire("commit:selected",{commit:t,interaction:"active",preserveFocus:e.preserveFocus,preserveVisibility:!1},{source:this.host.id});let i=this.host.isHost("editor")?this.container.commitDetailsView:this.container.graphDetailsView;i.ready||i.show({preserveFocus:e.preserveFocus},{commit:t,interaction:"active",preserveVisibility:!1})}}return Promise.resolve()}async onEnsureRow(e,t){let i,s;if(null==this._graph)return;let r=this._graph.remappedIds?.get(e.id)??e.id;this._graph.ids.has(r)?(i=e.id,s=e.id!==r?r:void 0):(await this.updateGraphWithMoreRows(this._graph,r,this._search),this.notifyDidChangeRows(),this._graph.ids.has(r)&&(i=e.id,s=e.id!==r?r:void 0)),this.host.notify(em,{id:i,remapped:s},t)}async onGetMissingAvatars(e){if(null==this._graph)return;let t=this._graph.repoPath;async function i(e,i){let s=await (0,r.X0)(e,{ref:i,repoPath:t});this._graph.avatars.set(e,s.toString(!0))}let s=[];for(let[t,r]of Object.entries(e.emails))this._graph.avatars.has(t)||s.push(i.call(this,t,r));s.length&&(await Promise.allSettled(s),this.updateAvatars())}async onGetMissingRefMetadata(e){if(null==this._graph||null===this._refsMetadata||!(0,D.wp)("gitlens:hasConnectedRemotes"))return;let t=this._graph.repoPath;async function i(e,i){null==this._refsMetadata&&(this._refsMetadata=new Map);let s=(await this.container.git.getBranches(t,{filter:t=>t.id===e}))?.values?.[0],r={...this._refsMetadata.get(e)};if(null==s){for(let t of i)r[t]=null,this._refsMetadata.set(e,r);return}for(let o of i){if(!E.includes(o)){r[o]=null,this._refsMetadata.set(e,r);continue}if("pullRequest"===o){let i=await s?.getAssociatedPullRequest();if(null==i){(void 0===r.pullRequest||r.pullRequest?.length===0)&&(r.pullRequest=null),this._refsMetadata.set(e,r);continue}let o={hostingServiceType:i.provider.id,id:Number.parseInt(i.id)||0,title:i.title,author:i.author.name,date:(i.mergedDate??i.closedDate??i.date)?.getTime(),state:i.state,url:i.url,context:(0,V.QX)({webviewItem:`gitlens:pullrequest${i.refs?"+refs":""}`,webviewItemValue:{type:"pullrequest",id:i.id,url:i.url,repoPath:t,refs:i.refs,provider:{id:i.provider.id,name:i.provider.name,domain:i.provider.domain,icon:i.provider.icon}}})};r.pullRequest=[o],this._refsMetadata.set(e,r);continue}if("upstream"===o){let t=s?.upstream;if(null==t||void 0==t||t.missing){r.upstream=null,this._refsMetadata.set(e,r);continue}let i={name:(0,f.ak)(t.name),owner:(0,f.IB)(t.name),ahead:s.state.ahead,behind:s.state.behind,context:(0,V.QX)({webviewItem:"gitlens:upstreamStatus",webviewItemValue:{type:"upstreamStatus",ref:(0,y.uE)(s),ahead:s.state.ahead,behind:s.state.behind}})};r.upstream=i,this._refsMetadata.set(e,r)}}}let s=[];for(let t of Object.keys(e.metadata))s.push(i.call(this,t,e.metadata[t]));s.length&&await Promise.allSettled(s),this.updateRefsMetadata()}async onGetMoreRows(e,t=!1){if(this._graph?.paging!=null){if(this._graph?.more==null||this.repository?.etag!==this._etagRepository){this.updateState(!0);return}await this.updateGraphWithMoreRows(this._graph,e.id,this._search),this.notifyDidChangeRows(t)}}async onSearch(e,t){if(null==e.search){this.resetSearchState();return}let i=this._search;if(e.more&&i?.more!=null&&i.comparisonKey===(0,_.E$)(e.search)){null!=(i=await i.more(e.limit??S.i.get("graph.searchItemLimit")??100))&&(this._search=i,await this.ensureSearchStartsInRange(this._graph,i),this.host.notify(ef,{results:i.results.size>0?{ids:Object.fromEntries((0,M.kH)(i.results,([e,t])=>[this._graph?.remappedIds?.get(e)??e,t])),count:i.results.size,paging:{hasMore:i.paging?.hasMore??!1}}:void 0},t));return}if(null==i||i.comparisonKey!==(0,_.E$)(e.search)){if(null==this.repository)return;this.repository.etag!==this._etagRepository&&this.updateState(!0),null!=this._searchCancellation&&this._searchCancellation.cancel();let r=new s.CancellationTokenSource;this._searchCancellation=r;try{i=await this.repository.searchCommits(e.search,{limit:S.i.get("graph.searchItemLimit")??100,ordering:S.i.get("graph.commitOrdering"),cancellation:r.token})}catch(e){this._search=void 0,this.host.notify(ef,{results:{error:e instanceof m.mI?"Invalid search pattern":"Unexpected error"}},t);return}if(r.token.isCancellationRequested){null!=t&&this.host.notify(ef,{results:void 0},t);return}this._search=i}else i=this._search;let r=await this.ensureSearchStartsInRange(this._graph,i),o=!1;null!=r&&(o=!0,this.setSelectedRows(r)),this.host.notify(ef,{results:0===i.results.size?{count:0}:{ids:Object.fromEntries((0,M.kH)(i.results,([e,t])=>[this._graph?.remappedIds?.get(e)??e,t])),count:i.results.size,paging:{hasMore:i.paging?.hasMore??!1}},selectedRows:o?this._selectedRows:void 0},t)}onSearchOpenInView(e){null!=this.repository&&this.container.searchAndCompareView.search(this.repository.path,e.search,{label:{label:`for ${e.search.query}`},reveal:{select:!0,focus:!1,expand:!0}})}async onChooseRepository(){let e=this.container.git.openRepositories.sort((e,t)=>(e===this.repository?1:-1)-(t===this.repository?1:-1)||(e.starred?-1:1)-(t.starred?-1:1)||e.index-t.index),t=await (0,W.Gf)(`Switch Repository ${a.or.Dot} ${this.repository?.name}`,"Choose a repository to switch to",e);null!=t&&(this.repository=t.item)}_fireSelectionChangedDebounced=void 0;onSelectionChanged(e){this._showActiveSelectionDetailsDebounced?.cancel();let t=e.selection[0];this.setSelectedRows(t?.id),null==this._fireSelectionChangedDebounced&&(this._fireSelectionChangedDebounced=(0,G.Cu)(this.fireSelectionChanged.bind(this),50)),this._fireSelectionChangedDebounced(t?.id,t?.type)}fireSelectionChanged(e,t){if(null==this.repository)return;let i=this.getRevisionReference(this.repository.path,e,t),s=null!=i?[i]:void 0;this._selection=s,null!=s&&(!(!this._firstSelection&&this.host.isHost("editor"))||this.host.active)&&(this.container.events.fire("commit:selected",{commit:s[0],interaction:"passive",preserveFocus:!0,preserveVisibility:this._firstSelection?!1===this._showDetailsView:"selection"!==this._showDetailsView},{source:this.host.id}),this._firstSelection=!1)}_notifyDidChangeStateDebounced=void 0;getRevisionReference(e,t,i){if(null!=e&&null!=t)switch(i){case"stash-node":return(0,y.op)(t,e,{refType:"stash",name:t,number:void 0});case"work-dir-changes":return(0,y.op)(v.Oy,e,{refType:"revision"});default:return(0,y.op)(t,e,{refType:"revision"})}}updateState(e=!1){if(this.host.clearPendingIpcNotifications(),e){this.notifyDidChangeState();return}null==this._notifyDidChangeStateDebounced&&(this._notifyDidChangeStateDebounced=(0,G.Cu)(this.notifyDidChangeState.bind(this),250)),this._notifyDidChangeStateDebounced()}async notifyDidChangeFocus(e){return!!this.host.ready&&!!this.host.visible&&this.host.notify(eh,{focused:e})}async notifyDidChangeWindowFocus(){return this.host.ready&&this.host.visible?this.host.notify(el,{focused:this.isWindowFocused}):(this.host.addPendingIpcNotification(el,this._ipcNotificationMap,this),!1)}_notifyDidChangeAvatarsDebounced=void 0;updateAvatars(e=!1){if(e){this.notifyDidChangeAvatars();return}null==this._notifyDidChangeAvatarsDebounced&&(this._notifyDidChangeAvatarsDebounced=(0,G.Cu)(this.notifyDidChangeAvatars.bind(this),100)),this._notifyDidChangeAvatarsDebounced()}async notifyDidChangeAvatars(){if(null==this._graph)return;let e=this._graph;return this.host.notify(er,{avatars:Object.fromEntries(e.avatars)})}_notifyDidChangeRefsMetadataDebounced=void 0;updateRefsMetadata(e=!1){if(e){this.notifyDidChangeRefsMetadata();return}null==this._notifyDidChangeRefsMetadataDebounced&&(this._notifyDidChangeRefsMetadataDebounced=(0,G.Cu)(this.notifyDidChangeRefsMetadata.bind(this),100)),this._notifyDidChangeRefsMetadataDebounced()}async notifyDidChangeRefsMetadata(){return this.host.notify(eo,{metadata:null!=this._refsMetadata?Object.fromEntries(this._refsMetadata):this._refsMetadata})}async notifyDidChangeColumns(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(ea,this._ipcNotificationMap,this),!1;let e=this.getColumns(),t=this.getColumnSettings(e);return this.host.notify(ea,{columns:t,context:this.getColumnHeaderContext(t),settingsContext:this.getGraphSettingsIconContext(t)})}async notifyDidChangeScrollMarkers(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(en,this._ipcNotificationMap,this),!1;let e=this.getColumns(),t=this.getColumnSettings(e);return this.host.notify(en,{context:this.getGraphSettingsIconContext(t)})}async notifyDidChangeRefsVisibility(){return this.host.ready&&this.host.visible?this.host.notify(ep,{excludeRefs:this.getExcludedRefs(this._graph),excludeTypes:this.getExcludedTypes(this._graph),includeOnlyRefs:this.getIncludeOnlyRefs(this._graph)}):(this.host.addPendingIpcNotification(ep,this._ipcNotificationMap,this),!1)}async notifyDidChangeConfiguration(){return this.host.ready&&this.host.visible?this.host.notify(ei,{config:this.getComponentConfig()}):(this.host.addPendingIpcNotification(ei,this._ipcNotificationMap,this),!1)}async notifyDidFetch(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(ev,this._ipcNotificationMap,this),!1;let e=await this.repository.getLastFetched();return this.host.notify(ev,{lastFetched:new Date(e)})}async notifyDidChangeRows(e=!1,t){if(null==this._graph)return;let i=this._graph;return this.host.notify(ed,{rows:i.rows,avatars:Object.fromEntries(i.avatars),downstreams:Object.fromEntries(i.downstreams),refsMetadata:null!=this._refsMetadata?Object.fromEntries(this._refsMetadata):this._refsMetadata,rowsStats:i.rowsStats?.size?Object.fromEntries(i.rowsStats):void 0,rowsStatsLoading:i.rowsStatsDeferred?.isLoaded!=null&&!i.rowsStatsDeferred.isLoaded(),selectedRows:e?this._selectedRows:void 0,paging:{startingCursor:i.paging?.startingCursor,hasMore:i.paging?.hasMore??!1}},t)}async notifyDidChangeRowsStats(e){if(null!=e.rowsStats)return this.host.notify(eg,{rowsStats:Object.fromEntries(e.rowsStats),rowsStatsLoading:e.rowsStatsDeferred?.isLoaded!=null&&!e.rowsStatsDeferred.isLoaded()})}async notifyDidChangeWorkingTree(){return this.host.ready&&this.host.visible?this.host.notify(ec,{stats:await this.getWorkingTreeStats()??{added:0,deleted:0,modified:0}}):(this.host.addPendingIpcNotification(ec,this._ipcNotificationMap,this),!1)}async notifyDidChangeSelection(){return this.host.ready&&this.host.visible?this.host.notify(eu,{selection:this._selectedRows??{}}):(this.host.addPendingIpcNotification(eu,this._ipcNotificationMap,this),!1)}async notifyDidChangeSubscription(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(es,this._ipcNotificationMap,this),!1;let[e]=await this.getGraphAccess();return this.host.notify(es,{subscription:e.subscription.current,allowed:!1!==e.allowed})}async notifyDidChangeState(){return this.host.ready&&this.host.visible?(this._notifyDidChangeStateDebounced?.cancel(),this.host.notify(et,{state:await this.getState()})):(this.host.addPendingIpcNotification(et,this._ipcNotificationMap,this),!1)}ensureRepositorySubscriptions(e){if(this.ensureLastFetchedSubscription(e),!e&&null!=this._repositoryEventsDisposable)return;null!=this._repositoryEventsDisposable&&(this._repositoryEventsDisposable.dispose(),this._repositoryEventsDisposable=void 0);let t=this.repository;null!=t&&(this._repositoryEventsDisposable=s.Disposable.from(t.onDidChange(this.onRepositoryChanged,this),t.watchFileSystem(1e3),t.onDidChangeFileSystem(this.onRepositoryFileSystemChanged,this),(0,D.kz)(e=>{"gitlens:hasConnectedRemotes"===e&&(this.resetRefsMetadata(),this.updateRefsMetadata())})))}async ensureLastFetchedSubscription(e){if(!e&&null!=this._lastFetchedDisposable)return;null!=this._lastFetchedDisposable&&(this._lastFetchedDisposable.dispose(),this._lastFetchedDisposable=void 0);let t=this.repository;if(null==t)return;let i=await t.getLastFetched()??0,s=R.Oq.getLastFetchedUpdateInterval(i);0!==i&&s>0&&(this._lastFetchedDisposable=(0,G._m)(()=>{let e=R.Oq.getLastFetchedUpdateInterval(i);s!==R.Oq.getLastFetchedUpdateInterval(i)&&(s=e),this.notifyDidFetch()},s))}async ensureSearchStartsInRange(e,t){let i;if(0!==t.results.size){for(let s of t.results.keys()){let t=e.remappedIds?.get(s)??s;if(e.ids.has(t))return t;i=t;break}if(null!=i)return await this.updateGraphWithMoreRows(e,i),this.notifyDidChangeRows(),e.ids.has(i)?i:void 0}}getColumns(){return this.container.storage.getWorkspace("graph:columns")}getExcludedTypes(e){if(null!=e)return this.getFiltersByRepo(e)?.excludeTypes}getExcludedRefs(e){let t;if(null==e)return;let i=this.container.storage.getWorkspace("graph:hiddenRefs");if(null!=i&&0!==Object.keys(i).length){for(let e in t=this.container.storage.getWorkspace("graph:filtersByRepo")??{},i){let s=e.split("|",1)[0];t[s]=t[s]??{},t[s].excludeRefs=(0,T.Ks)(t[s].excludeRefs,e,i[e])}this.container.storage.storeWorkspace("graph:filtersByRepo",t),this.container.storage.deleteWorkspace("graph:hiddenRefs")}let s=(t?.[e.repoPath]??this.getFiltersByRepo(e))?.excludeRefs;if(null==s||0===Object.keys(s).length)return;let r=S.i.get("graph.avatars",void 0,!0),o={},a=e=>this.host.asWebviewUri(e);for(let t in s){let i={...s[t]};if("remote"===i.type&&i.owner){let t=e.remotes.get(i.owner);null!=t&&(i.avatarUrl=((r?t.provider?.avatarUri:void 0)??b.ak(this.container,t,a))?.toString(!0))}o[t]=i}return o}getIncludeOnlyRefs(e){if(null==e)return;let t=this.getFiltersByRepo(e),i=t?.includeOnlyRefs;if(null==i||0===Object.keys(i).length)return;let s={};for(let[t,r]of Object.entries(i)){let i;if("HEAD"===r.id){if(null==(i=(0,M.iw)(e.branches.values(),e=>e.current)))continue;s[i.id]={...r,id:i.id,name:i.name}}else s[t]=r;if("head"===r.type&&(i=i??e.branches.get(r.name),i?.upstream!=null&&!i.upstream.missing)){let t=(0,f.Sg)(e.repoPath,!0,i.upstream.name);s[t]={id:t,type:"remote",name:(0,f.ak)(i.upstream.name),owner:(0,f.IB)(i.upstream.name)}}}return s}getFiltersByRepo(e){if(null==e)return;let t=this.container.storage.getWorkspace("graph:filtersByRepo");return t?.[e.repoPath]}getColumnSettings(e){let t={...eC};if(null!=e)for(let[i,s]of Object.entries(e))t[i]={...eC[i],...s};return t}getColumnHeaderContext(e){return(0,V.QX)({webviewItem:"gitlens:graph:columns",webviewItemValue:this.getColumnContextItems(e).join(",")})}getGraphSettingsIconContext(e){return(0,V.QX)({webviewItem:"gitlens:graph:settings",webviewItemValue:this.getSettingsIconContextItems(e).join(",")})}getColumnContextItems(e){let t=[],i=["author","changes","datetime","graph","message","ref","sha"],s=0;for(let[r,o]of Object.entries(e))i.includes(r)&&(!o.isHidden&&s++,t.push(`column:${r}:${o.isHidden?"hidden":"visible"}${o.mode?`+${o.mode}`:""}`));return s>1&&t.push("columns:canHide"),t}getSettingsIconContextItems(e){let t=null!=e?this.getColumnContextItems(e):[];if(S.i.get("graph.scrollMarkers.enabled")){let e=S.i.get("graph.scrollMarkers.additionalTypes");for(let i of["localBranches","remoteBranches","stashes","tags"])t.push(`scrollMarker:${i}:${e.includes(i)?"enabled":"disabled"}`)}return t}getComponentConfig(){return{avatars:S.i.get("graph.avatars"),dateFormat:S.i.get("graph.dateFormat")??S.i.get("defaultDateFormat")??"short+short",dateStyle:S.i.get("graph.dateStyle")??S.i.get("defaultDateStyle"),enabledRefMetadataTypes:this.getEnabledRefMetadataTypes(),dimMergeCommits:S.i.get("graph.dimMergeCommits"),enableMultiSelection:!1,highlightRowsOnRefHover:S.i.get("graph.highlightRowsOnRefHover"),minimap:S.i.get("graph.minimap.enabled"),minimapDataType:S.i.get("graph.minimap.dataType"),minimapMarkerTypes:this.getMinimapMarkerTypes(),scrollRowPadding:S.i.get("graph.scrollRowPadding"),scrollMarkerTypes:this.getScrollMarkerTypes(),showGhostRefsOnRowHover:S.i.get("graph.showGhostRefsOnRowHover"),showRemoteNamesOnRefs:S.i.get("graph.showRemoteNames"),idLength:S.i.get("advanced.abbreviatedShaLength")}}getScrollMarkerTypes(){return S.i.get("graph.scrollMarkers.enabled")?["selection","highlights","head","upstream",...S.i.get("graph.scrollMarkers.additionalTypes")]:[]}getMinimapMarkerTypes(){return S.i.get("graph.minimap.enabled")?["selection","highlights","head","upstream",...S.i.get("graph.minimap.additionalTypes")]:[]}getEnabledRefMetadataTypes(){let e=[];return S.i.get("graph.pullRequests.enabled")&&e.push("pullRequest"),S.i.get("graph.showUpstreamStatus")&&e.push("upstream"),e}async getGraphAccess(){let e=await this.container.git.access(n.i.Graph,this.repository?.path);this._etagSubscription=this.container.subscription.etag,!1===e.allowed&&null==e.subscription.current.previewTrial&&(await this.container.subscription.startPreviewTrial(),e=await this.container.git.access(n.i.Graph,this.repository?.path));let t=e?.visibility;return null==t&&null!=this.repository&&(t=await this.container.git.visibility(this.repository?.path)),[e,t]}getGraphItemContext(e){let t="string"==typeof e?JSON.parse(e):e;return null==t||"webview"in t||(t.webview=this.host.id),t}async getWorkingTreeStats(){if(null==this.repository||0===this.container.git.repositoryCount)return;let e=await this.container.git.getStatusForRepo(this.repository.path),t=e?.getDiffStatus();return{added:t?.added??0,deleted:t?.deleted??0,modified:t?.changed??0,context:(0,V.QX)({webviewItem:"gitlens:wip",webviewItemValue:{type:"commit",ref:this.getRevisionReference(this.repository.path,v.Oy,"work-dir-changes")}})}}async getState(e){var t;let i,s;if(0===this.container.git.repositoryCount||null==this.repository&&(this.repository=this.container.git.getBestRepositoryOrFirst(),null==this.repository))return{...this.host.baseWebviewState,allowed:!0,repositories:[]};this._etagRepository=this.repository?.etag,this.host.title=`${this.host.originalTitle}: ${this.repository.formattedName}`;let{defaultItemLimit:r}=S.i.get("graph"),o=Math.max(r,this._graph?.ids.size??r),a=this._selectedId,n=null==a||a===v.Oy?"HEAD":a,h=this.getColumns(),l=this.getColumnSettings(h),p=this.container.git.getCommitsForGraph(this.repository.uri,e=>this.host.asWebviewUri(e),{include:{stats:S.i.get("graph.minimap.enabled")&&"lines"===S.i.get("graph.minimap.dataType")||!l.changes.isHidden},limit:o,ref:n}),d=Promise.allSettled([this.getGraphAccess(),this.getWorkingTreeStats(),this.repository.getBranch(),this.repository.getLastFetched()]);e?queueMicrotask(async()=>{let e=await p;this.setGraph(e),a!==v.Oy&&this.setSelectedRows(e.id),this.notifyDidChangeRefsVisibility(),this.notifyDidChangeRows(!0)}):(i=await p,this.setGraph(i),a!==v.Oy&&this.setSelectedRows(i.id));let[g,u,c,m]=await d,[f,w]=(0,O.Cv)(g)??[],y=(0,O.Cv)(c);if(null!=y&&(s={...y.state},null!=y.upstream)){s.upstream=y.upstream.name;let e=await y.getRemote();e?.provider!=null&&(s.provider={name:e.provider.name,icon:"remote"===e.provider.icon?"cloud":e.provider.icon,url:e.provider.url({type:C.o.Repo})})}return{...this.host.baseWebviewState,windowFocused:this.isWindowFocused,repositories:0===(t=this.container.git.openRepositories).length?[]:t.map(e=>({formattedName:e.formattedName,id:e.id,name:e.name,path:e.path,isVirtual:e.provider.virtual})),selectedRepository:this.repository.path,selectedRepositoryVisibility:w,branchName:y?.name,branchState:s,lastFetched:new Date((0,O.Cv)(m)),selectedRows:this._selectedRows,subscription:f?.subscription.current,allowed:(f?.allowed??!1)!==!1,avatars:null!=i?Object.fromEntries(i.avatars):void 0,refsMetadata:null===this.resetRefsMetadata()?null:{},loading:e,rowsStatsLoading:i?.rowsStatsDeferred?.isLoaded!=null&&!i.rowsStatsDeferred.isLoaded(),rows:i?.rows,downstreams:null!=i?Object.fromEntries(i.downstreams):void 0,paging:null!=i?{startingCursor:i.paging?.startingCursor,hasMore:i.paging?.hasMore??!1}:void 0,columns:l,config:this.getComponentConfig(),context:{header:this.getColumnHeaderContext(l),settings:this.getGraphSettingsIconContext(l)},excludeRefs:null!=i?this.getExcludedRefs(i)??{}:{},excludeTypes:this.getExcludedTypes(i)??{},includeOnlyRefs:null!=i?this.getIncludeOnlyRefs(i)??{}:{},nonce:this.host.cspNonce,workingTreeStats:(0,O.Cv)(u)??{added:0,deleted:0,modified:0}}}updateColumns(e){let t=this.container.storage.getWorkspace("graph:columns");for(let[i,s]of Object.entries(e))t=(0,T.Ks)(t,i,s);this.container.storage.storeWorkspace("graph:columns",t),this.notifyDidChangeColumns()}updateExcludedRefs(e,t,i){if(null==t||0===t.length)return;let s=this.getFiltersByRepo(e)?.excludeRefs??{};for(let e of t)s=(0,T.Ks)(s,e.id,i?void 0:{id:e.id,type:e.type,name:e.name,owner:e.owner});this.updateFiltersByRepo(e,{excludeRefs:s}),this.notifyDidChangeRefsVisibility()}updateFiltersByRepo(e,t){if(null==e)throw Error("Cannot save repository filters since Graph is undefined");let i=this.container.storage.getWorkspace("graph:filtersByRepo");return this.container.storage.storeWorkspace("graph:filtersByRepo",(0,T.Ks)(i,e.repoPath,{...i?.[e.repoPath],...t}))}updateIncludeOnlyRefs(e,t){let i;if(null==t||0===t.length){if(this.getFiltersByRepo(e)?.includeOnlyRefs==null)return;i=void 0}else for(let e of(i={},t))i[e.id]={id:e.id,type:e.type,name:e.name,owner:e.owner};this.updateFiltersByRepo(e,{includeOnlyRefs:i}),this.notifyDidChangeRefsVisibility()}updateExcludedType(e,{key:t,value:i}){let s=this.getFiltersByRepo(e)?.excludeTypes;(null!=s&&0!==Object.keys(s).length||!1!==i)&&(s=(0,T.Ks)(s,t,i),this.updateFiltersByRepo(e,{excludeTypes:s}),this.notifyDidChangeRefsVisibility())}resetRefsMetadata(){return this._refsMetadata=(0,D.wp)("gitlens:hasConnectedRemotes")?void 0:null,this._refsMetadata}resetRepositoryState(){this.setGraph(void 0),this.setSelectedRows(void 0)}resetSearchState(){this._search=void 0,this._searchCancellation?.dispose(),this._searchCancellation=void 0}setSelectedRows(e){this._selectedId!==e&&(this._selectedId=e,e===v.Oy&&(e="work-dir-changes"),this._selectedRows=null!=e?{[e]:!0}:void 0)}setGraph(e){this._graph=e,null==e?(this.resetRefsMetadata(),this.resetSearchState()):e.rowsStatsDeferred?.promise.then(()=>void this.notifyDidChangeRowsStats(e))}async updateGraphWithMoreRows(e,t,i){let{defaultItemLimit:s,pageItemLimit:r}=S.i.get("graph"),o=await e.more?.(r??s,t);if(null!=o){if(this.setGraph(o),!i?.paging?.hasMore)return;let e=M.GS(i.results)?.[0];if(null==e)return;let t=o.remappedIds?.get(e)??e;o.ids.has(t)&&queueMicrotask(()=>void this.onSearch({search:i.query,more:!0}))}}fetch(e){let t=null!=e?this.getGraphItemRef(e,"branch"):void 0;d.I5(this.repository,t)}pull(e){let t=null!=e?this.getGraphItemRef(e,"branch"):void 0;d.C0(this.repository,t)}push(e){let t=null!=e?this.getGraphItemRef(e):void 0;d.qY(this.repository,void 0,t)}createBranch(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():h.Su(t.repoPath,t)}deleteBranch(e){if(eP(e,"branch")){let{ref:t}=e.webviewItemValue;return h.aE(t.repoPath,t)}return Promise.resolve()}mergeBranchInto(e){if(eP(e,"branch")){let{ref:t}=e.webviewItemValue;return d.Uf(t.repoPath,t)}return Promise.resolve()}openBranchOnRemote(e,t){if(eP(e,"branch")){let i;let{ref:s}=e.webviewItemValue;return s.remote?i=(0,f.IB)(s.name):null!=s.upstream&&(i=(0,f.IB)(s.upstream.name)),(0,P.gf)(a.eq.OpenOnRemote,{repoPath:s.repoPath,resource:{type:C.o.Branch,branch:s.name},remote:i,clipboard:t})}return Promise.resolve()}publishBranch(e){if(eP(e,"branch")){let{ref:t}=e.webviewItemValue;return d.qY(t.repoPath,void 0,t)}return Promise.resolve()}rebase(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():d.oN(t.repoPath,t)}rebaseToRemote(e){if(eP(e,"branch")){let{ref:t}=e.webviewItemValue;if(null!=t.upstream)return d.oN(t.repoPath,(0,y.op)(t.upstream.name,t.repoPath,{refType:"branch",name:t.upstream.name,remote:!0}))}return Promise.resolve()}renameBranch(e){if(eP(e,"branch")){let{ref:t}=e.webviewItemValue;return h.wX(t.repoPath,t)}return Promise.resolve()}cherryPick(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():d.KO(t.repoPath,t)}async copy(e){let t=this.getGraphItemRef(e);if(null!=t)await s.env.clipboard.writeText("revision"===t.refType&&t.message?`${t.name}: ${t.message}`:t.name);else if(eW(e,"contributor")){let{name:t,email:i}=e.webviewItemValue;await s.env.clipboard.writeText(`${t}${i?` <${i}>`:""}`)}else if(eW(e,"pullrequest")){let{url:t}=e.webviewItemValue;await s.env.clipboard.writeText(t)}return Promise.resolve()}copyMessage(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():(0,P.gf)(a.eq.CopyMessageToClipboard,{repoPath:t.repoPath,sha:t.ref,message:"message"in t?t.message:void 0})}async copySha(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=t.ref;return(0,y.kp)(i)||(i=await this.container.git.resolveReference(t.repoPath,i,void 0,{force:!0})),(0,P.gf)(a.eq.CopyShaToClipboard,{sha:i})}openInDetailsView(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():this.host.isHost("view")?void(0,l.a0)(t,{preserveFocus:!0,preserveVisibility:!1}):(0,P.gf)(a.eq.ShowInDetailsView,{repoPath:t.repoPath,refs:[t.ref]})}openSCM(e){return null==this.getGraphItemRef(e,"revision")?Promise.resolve():(0,P.CA)("workbench.view.scm")}openCommitOnRemote(e,t){let i=this.getGraphItemRef(e,"revision");return null==i?Promise.resolve():(0,P.gf)(a.eq.OpenOnRemote,{repoPath:i.repoPath,resource:{type:C.o.Commit,sha:i.ref},clipboard:t})}copyDeepLinkToBranch(e){if(eP(e,"branch")){let{ref:t}=e.webviewItemValue;return(0,P.gf)(a.eq.CopyDeepLinkToBranch,{refOrRepoPath:t})}return Promise.resolve()}copyDeepLinkToCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():(0,P.gf)(a.eq.CopyDeepLinkToCommit,{refOrRepoPath:t})}copyDeepLinkToRepo(e){if(eP(e,"branch")){let{ref:t}=e.webviewItemValue;return t.remote?(0,P.gf)(a.eq.CopyDeepLinkToRepo,{refOrRepoPath:t.repoPath,remote:(0,f.IB)(t.name)}):Promise.resolve()}return Promise.resolve()}copyDeepLinkToTag(e){if(eP(e,"tag")){let{ref:t}=e.webviewItemValue;return(0,P.gf)(a.eq.CopyDeepLinkToTag,{refOrRepoPath:t})}return Promise.resolve()}async shareAsCloudPatch(e){let t=this.getGraphItemRef(e,"revision")??this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():(0,P.gf)(a.eq.CreateCloudPatch,{to:t.ref,repoPath:t.repoPath})}resetCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():d.a_(t.repoPath,(0,y.op)(`${t.ref}^`,t.repoPath,{refType:"revision",name:`${t.name}^`,message:t.message}))}resetToCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():d.a_(t.repoPath,t)}resetToTip(e){let t=this.getGraphItemRef(e,"branch");return null==t?Promise.resolve():d.a_(t.repoPath,(0,y.op)(t.ref,t.repoPath,{refType:"revision",name:t.name}))}revertCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():d.aI(t.repoPath,t)}switchTo(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():d.q8(t.repoPath,t)}hideRef(e,t){var i;let s;if(t?.group&&null!=(i=e)&&null!=i&&(0,V.kj)(i)&&("gitlens.graph"===i.webview||"gitlens.views.graph"===i.webview)&&"object"==typeof i.webviewItemGroupValue&&"refGroup"===i.webviewItemGroupValue.type)({refs:s}=e.webviewItemGroupValue);else if(!t?.group&&eP(e)){let{ref:t}=e.webviewItemValue;null!=t.id&&(s=[t])}return null!=s&&this.updateExcludedRefs(this._graph,s.map(e=>{let i="branch"===e.refType&&e.remote;return{id:e.id,name:i?t?.remote?"*":(0,f.ak)(e.name):e.name,owner:i?(0,f.IB)(e.name):void 0,type:"branch"===e.refType?e.remote?"remote":"head":"tag"}}),!1),Promise.resolve()}switchToAnother(e){let t=this.getGraphItemRef(e);return null==t?d.q8(this.repository?.path):d.q8(t.repoPath)}async undoCommit(e){let t=this.getGraphItemRef(e,"revision");if(null==t)return Promise.resolve();await (0,l.wR)(this.container,t)}saveStash(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():g.qY(t.repoPath)}applyStash(e){let t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():g.iQ(t.repoPath,t)}deleteStash(e){let t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():g.qK(t.repoPath,[t])}renameStash(e){let t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():g.wX(t.repoPath,t)}async createTag(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():u.Su(t.repoPath,t)}deleteTag(e){if(eP(e,"tag")){let{ref:t}=e.webviewItemValue;return u.aE(t.repoPath,t)}return Promise.resolve()}async createWorktree(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():c.Su(t.repoPath,void 0,t)}async createPullRequest(e){if(eP(e,"branch")){let{ref:t}=e.webviewItemValue,i=this.container.git.getRepository(t.repoPath),s=await i?.getBranch(t.name),r=await s?.getRemote();return(0,P.wb)("createPullRequest",{repoPath:t.repoPath,remote:null!=r?{name:r.name,provider:null!=r.provider?{id:r.provider.id,name:r.provider.name,domain:r.provider.domain}:void 0,url:r.url}:void 0,branch:{name:t.name,upstream:t.upstream?.name,isRemote:t.remote}})}return Promise.resolve()}openPullRequest(e){if(eW(e,"pullrequest")){let t=e.webviewItemValue;return(0,P.wb)("openPullRequest",{repoPath:t.repoPath,provider:{id:t.provider.id,name:t.provider.name,domain:t.provider.domain},pullRequest:{id:t.id,url:t.url}})}return Promise.resolve()}openPullRequestChanges(e){if(eW(e,"pullrequest")){let t=e.webviewItemValue;if(t.refs?.base!=null&&null!=t.refs.head)return this.container.searchAndCompareView.openComparisonChanges(t.repoPath,{ref:t.refs.head.sha,label:t.refs.head.branch},{ref:t.refs.base.sha,label:t.refs.base.branch},{title:`Changes in Pull Request #${t.id}`})}return Promise.resolve()}openPullRequestComparison(e){if(eW(e,"pullrequest")){let t=e.webviewItemValue;if(t.refs?.base!=null&&null!=t.refs.head)return this.container.searchAndCompareView.compare(t.repoPath,{ref:t.refs.head.sha,label:t.refs.head.branch},{ref:t.refs.base.sha,label:t.refs.base.branch})}return Promise.resolve()}openPullRequestOnRemote(e,t){if(eW(e,"pullrequest")){let{url:i}=e.webviewItemValue;return(0,P.gf)(a.eq.OpenPullRequestOnRemote,{pr:{url:i},clipboard:t})}return Promise.resolve()}async compareAncestryWithWorking(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=await this.container.git.getBranch(t.repoPath);if(null==i)return;let s=await this.container.git.getMergeBase(t.repoPath,i.ref,t.ref);if(null!=s)return this.container.searchAndCompareView.compare(t.repoPath,{ref:s,label:`ancestry with ${t.ref} (${(0,y.c5)(s)})`},"")}compareHeadWith(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():this.container.searchAndCompareView.compare(t.repoPath,"HEAD",t.ref)}compareWithUpstream(e){if(eP(e,"branch")){let{ref:t}=e.webviewItemValue;if(null!=t.upstream)return this.container.searchAndCompareView.compare(t.repoPath,t.ref,t.upstream.name)}return Promise.resolve()}compareWorkingWith(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():this.container.searchAndCompareView.compare(t.repoPath,"",t.ref)}copyWorkingChangesToWorktree(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():c.A3("working-tree",t.repoPath)}async openFiles(e){let t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,l.YJ)(t)}async openAllChanges(e,t){let i=await this.getCommitFromGraphItemRef(e);if(null!=i)return t?(0,l.ol)(i):(0,l.bT)(i)}async openAllChangesWithWorking(e,t){let i=await this.getCommitFromGraphItemRef(e);if(null!=i)return t?(0,l.SW)(i):(0,l.qM)(i)}async openRevisions(e){let t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,l.gd)(t)}async openOnlyChangedFiles(e){let t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,l.is)(t)}addAuthor(e){if(eW(e,"contributor")){let{repoPath:t,name:i,email:s,current:r}=e.webviewItemValue;return p.I(t,new w.M(t,i,s,0,void 0,r))}return Promise.resolve()}async toggleColumn(e,t){let i=this.container.storage.getWorkspace("graph:columns"),s=i?.[e];null!=s?s.isHidden=!t:s={isHidden:!t},i=(0,T.Ks)(i,e,s),await this.container.storage.storeWorkspace("graph:columns",i),this.notifyDidChangeColumns(),"changes"!==e||s.isHidden||this._graph?.includes?.stats||this.updateState()}async toggleScrollMarker(e,t){let i=S.i.get("graph.scrollMarkers.additionalTypes"),s=!1;t&&!i.includes(e)?(i=i.concat(e),s=!0):!t&&i.includes(e)&&(i=i.filter(t=>t!==e),s=!0),s&&(await S.i.updateEffective("graph.scrollMarkers.additionalTypes",i),this.notifyDidChangeScrollMarkers())}async setColumnMode(e,t){let i=this.container.storage.getWorkspace("graph:columns"),s=i?.[e];null!=s?s.mode=t:s={mode:t},i=(0,T.Ks)(i,e,s),await this.container.storage.storeWorkspace("graph:columns",i),this.notifyDidChangeColumns()}getCommitFromGraphItemRef(e){let t=this.getGraphItemRef(e,"revision");return null!=t||null!=(t=this.getGraphItemRef(e,"stash"))?this.container.git.getCommit(t.repoPath,t.ref):Promise.resolve(void 0)}getGraphItemRef(e,t){if(null==e){let e=this.activeSelection;return null!=e&&(null==t||t===e.refType)?e:void 0}switch(t){case"branch":return eP(e,"branch")||eW(e,"upstreamStatus")?e.webviewItemValue.ref:void 0;case"revision":return eP(e,"revision")?e.webviewItemValue.ref:void 0;case"stash":return eP(e,"stash")?e.webviewItemValue.ref:void 0;case"tag":return eP(e,"tag")?e.webviewItemValue.ref:void 0;default:return eP(e)?e.webviewItemValue.ref:void 0}}};function e_(e){return null!=e&&(0,V.U1)(e)&&("gitlens.graph"===e.webview||"gitlens.views.graph"===e.webview)}function eW(e,t){return null!=e&&e_(e)&&"object"==typeof e.webviewItemValue&&e.webviewItemValue.type===t}function eP(e,t){return null!=e&&e_(e)&&"object"==typeof e.webviewItemValue&&"ref"in e.webviewItemValue&&(null==t||e.webviewItemValue.ref.refType===t)}function eS(e){return null!=e&&"object"==typeof e&&"ref"in e&&(0,y._Q)(e.ref)}eb([(0,k.u_)({args:{0:e=>e.toString()}})],GraphWebviewProvider.prototype,"onRepositoryChanged",1),eb([(0,k.u_)({args:!1})],GraphWebviewProvider.prototype,"onRepositoryFileSystemChanged",1),eb([(0,k.u_)({args:!1})],GraphWebviewProvider.prototype,"onSubscriptionChanged",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"onEnsureRow",1),eb([(0,I.I)(),(0,k.u_)()],GraphWebviewProvider.prototype,"onGetMoreRows",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"onSearch",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"updateState",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"notifyDidChangeFocus",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"notifyDidChangeWindowFocus",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"updateAvatars",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"notifyDidChangeAvatars",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"updateRefsMetadata",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"notifyDidChangeRefsMetadata",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"notifyDidChangeColumns",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"notifyDidChangeScrollMarkers",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"notifyDidChangeRefsVisibility",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"notifyDidChangeConfiguration",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"notifyDidFetch",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"notifyDidChangeRows",1),eb([(0,k.u_)({args:!1})],GraphWebviewProvider.prototype,"notifyDidChangeRowsStats",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"notifyDidChangeWorkingTree",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"notifyDidChangeSelection",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"notifyDidChangeSubscription",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"notifyDidChangeState",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"fetch",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"pull",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"push",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"createBranch",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"deleteBranch",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"mergeBranchInto",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"openBranchOnRemote",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"publishBranch",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"rebase",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"rebaseToRemote",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"renameBranch",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"cherryPick",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"copy",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"copyMessage",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"copySha",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"openInDetailsView",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"openSCM",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"openCommitOnRemote",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"copyDeepLinkToBranch",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"copyDeepLinkToCommit",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"copyDeepLinkToRepo",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"copyDeepLinkToTag",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"shareAsCloudPatch",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"resetCommit",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"resetToCommit",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"resetToTip",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"revertCommit",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"switchTo",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"hideRef",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"switchToAnother",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"undoCommit",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"saveStash",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"applyStash",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"deleteStash",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"renameStash",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"createTag",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"deleteTag",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"createWorktree",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"createPullRequest",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"openPullRequest",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"openPullRequestChanges",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"openPullRequestComparison",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"openPullRequestOnRemote",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"compareAncestryWithWorking",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"compareHeadWith",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"compareWithUpstream",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"compareWorkingWith",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"openFiles",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"openAllChanges",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"openAllChangesWithWorking",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"openRevisions",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"openOnlyChangedFiles",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"addAuthor",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"toggleColumn",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"toggleScrollMarker",1),eb([(0,k.u_)()],GraphWebviewProvider.prototype,"setColumnMode",1)}};