exports.id=860,exports.ids=[860],exports.modules={7176:(e,t,i)=>{i.d(t,{PatchDetailsWebviewProvider:()=>PatchDetailsWebviewProvider});var s=i(7304),a=i(5576),r=i(8104),o=i(1608),n=i(1144),c=i(4532),h=i(2060),l=i(7280),d=i(1424),p=i(4408),f=i(3832),u=i(3284);async function g(e,t,i){if(null==i)return;let a=await (0,f.C_)(i,{});if(0===a.length)return;let r=s.window.createQuickPick();r.ignoreFocusOut=(0,u.u4)();let o=[];try{let i=await new Promise(i=>{o.push(r.onDidHide(()=>i(void 0)),r.onDidAccept(()=>{0!==r.activeItems.length&&i(r.activeItems[0])})),r.title=e,r.placeholder=t,r.matchOnDescription=!0,r.matchOnDetail=!0,r.items=a,r.show()});return i?.item}finally{r.dispose(),o.forEach(e=>void e.dispose())}}async function m(e,t,i){let a;let r=s.window.createInputBox();r.ignoreFocusOut=!0;let o=[];try{a=await new Promise(i=>{o.push(r.onDidHide(()=>i(void 0)),r.onDidAccept(()=>{let e=r.value.trim();if(null==e){r.validationMessage="Please enter a valid branch name";return}i(e)})),r.title=e,r.placeholder=t,r.prompt="Enter a name for the new branch",r.show()})}finally{r.dispose(),o.forEach(e=>void e.dispose())}return a}async function y(e,t){if(null==t)return;let i={label:"Create new branch",description:"Creates a branch to apply the Cloud Patch to. (Typing an existing branch name will use that branch.)"},a={label:"Select existing branch",description:"Selects an existing branch to apply the Cloud Patch to."},r=[i,a],o=s.window.createQuickPick();o.ignoreFocusOut=(0,u.u4)();let n=[];try{let s=await new Promise(t=>{n.push(o.onDidHide(()=>t(void 0)),o.onDidAccept(()=>{0!==o.activeItems.length&&t(o.activeItems[0])})),o.title=e,o.placeholder="Select a branch option",o.matchOnDescription=!0,o.matchOnDetail=!0,o.items=r,o.show()});if(s===i)return m(e,"Enter a name for the new branch",t);if(s===a)return g(e,"Select an existing branch",t);return}finally{o.dispose(),n.forEach(e=>void e.dispose())}}var w=i(7824),v=i(4169),b=i(3664),C=i(4136),D=i(8196),x=i(7348),_=i(3732),S=i(2356),k=i(788),P=i(6584),I=i(2216),R=i(9663);let E=new P.Ip("patch/apply"),O=new P.Ip("patch/create"),F=new P.Ip("patch/openInGraph"),M=new P.Ip("patch/checked");new P.Ip("patch/selectRepo"),new P.Ip("patch/selectBase"),new P.Ip("patch/file/actions");let U=new P.Ip("patch/file/open");new P.Ip("patch/file/openOnRemote");let W=new P.Ip("patch/file/compareWorking"),T=new P.Ip("patch/file/comparePrevious"),V=new P.Ip("patch/explain"),A=new P.Ip("patch/preferences/update"),$=new P.Ip("patch/switchMode"),z=new P.Ip("patch/cloud/copyLink");new P.Ip("patch/local/createPatch");let H=new P.Ip("patch/create/repository/check"),N=new P.Ip("patch/update/create/metadata"),G=new P.Ip("patch/update/draft/metadata"),Q=new P.Ip("patch/update/draft/permissions"),B=new P.Ip("patch/update/users"),L=new P.Ip("patch/update/userSelection"),Y=new P.ik("patch/didChange",!0),j=new P.ik("patch/create/didChange"),q=new P.ik("patch/draft/didChange"),J=new P.ik("patch/preferences/didChange"),K=new P.ik("patch/didExplain"),X=new P.ik("patch/draft/didChangeRepository");new P.ik("org/settings/didChange");let RepositoryRefChangeset=class RepositoryRefChangeset{constructor(e,t,i,s,a,r){this.container=e,this.repository=t,this.revision=i,this.files=s,this.checked=a,this.expanded=r}type="revision";dispose(){}suspend(){}resume(){}_checked=!1;get checked(){return this._checked}set checked(e){this._checked=e}_expanded=!1;get expanded(){return this._expanded}set expanded(e){this._expanded!==e&&(this._expanded=e)}async getChange(){return{type:"revision",repository:{name:this.repository.name,path:this.repository.path,uri:this.repository.uri.toString()},revision:this.revision,files:this.files,checked:this.checked,expanded:this.expanded}}};let RepositoryWipChangeset=class RepositoryWipChangeset{constructor(e,t,i,s,a,r){this.container=e,this.repository=t,this.revision=i,this.onDidChangeRepositoryWip=s,this.checked=a,this.expanded=r}type="wip";_disposable;dispose(){this._disposable?.dispose(),this._disposable=void 0}suspend(){this._disposable?.dispose(),this._disposable=void 0}resume(){this._files=void 0,this._expanded&&this.subscribe()}_checked=!1;get checked(){return this._checked}set checked(e){this._checked=e}_expanded=!1;get expanded(){return this._expanded}set expanded(e){this._expanded!==e&&(this._files=void 0,e?this.subscribe():(this._disposable?.dispose(),this._disposable=void 0),this._expanded=e)}_files;async getChange(){let e;return this.expanded&&(null==this._files&&(this._files=this.getFiles()),e=await this._files),{type:"wip",repository:{name:this.repository.name,path:this.repository.path,uri:this.repository.uri.toString()},revision:this.revision,files:e?.files,checked:this.checked,expanded:this.expanded}}subscribe(){null==this._disposable&&(this._disposable=s.Disposable.from(this.repository.watchFileSystem(1e3),this.repository.onDidChangeFileSystem(()=>this.onDidChangeWip(),this),this.repository.onDidChange(e=>{e.changed(p.c7.Index,p.MR.Any)&&this.onDidChangeWip()})))}onDidChangeWip(){this._files=void 0,this.onDidChangeRepositoryWip(this)}async getFiles(){let e=await this.container.git.getStatusForRepo(this.repository.path),t=[];if(null!=e)for(let i of e.files){let e={repoPath:i.repoPath,path:i.path,status:i.status,originalPath:i.originalPath,staged:i.staged};t.push(e),i.staged&&i.wip&&t.push({...e,staged:!1})}return{files:t}}};var Z=Object.defineProperty,ee=Object.getOwnPropertyDescriptor;let PatchDetailsWebviewProvider=class PatchDetailsWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._context={mode:"create",draft:void 0,draftUserState:void 0,draftVisibiltyState:void 0,create:void 0,preferences:this.getPreferences(),orgSettings:this.getOrgSettings()},this.setHostTitle(),this.host.description="PREVIEW ☁️",this._disposable=s.Disposable.from(v.i.onDidChangeAny(this.onAnyConfigurationChanged,this),e.git.onDidChangeRepositories(this.onRepositoriesChanged,this),(0,b.kz)(this.onContextChanged,this))}_context;_disposable;dispose(){this._disposable.dispose()}canReuseInstance(...e){let[t]=e;if(t?.mode==="view"&&null!=t.draft)switch(t.draft.draftType){case"cloud":return this._context.draft?.draftType===t.draft.draftType&&this._context.draft.id===t.draft.id;case"local":return this._context.draft?.draftType===t.draft.draftType&&this._context.draft.patch.contents===t.draft.patch?.contents}return!1}async onShowing(e,t,...i){let[s]=i;if(s?.mode==="view"&&null!=s.draft)await this.updateViewDraftState(s.draft);else{this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories;let e=s?.mode==="create"&&null!=s.create?s.create:{repositories:void 0};this.updateCreateDraftState(e)}return!t?.preserveVisibility||!!this.host.visible}includeBootstrap(){return this.getState(this._context)}registerCommands(){let e=[];return this.host.isHost("view")&&e.push((0,w.or)(`${this.host.id}.refresh`,()=>this.host.refresh(!0)),(0,w.or)(`${this.host.id}.close`,()=>this.closeView())),e}onMessageReceived(e){switch(e.method){case E.method:(0,P.El)(E,e,e=>this.applyPatch(e));break;case z.method:(0,P.El)(z,e,()=>this.copyCloudLink());break;case O.method:(0,P.El)(O,e,e=>this.createDraft(e));break;case V.method:(0,P.El)(V,e,()=>this.explainPatch(e.completionId));break;case T.method:(0,P.El)(T,e,e=>void this.openFileComparisonWithPrevious(e));break;case W.method:(0,P.El)(W,e,e=>void this.openFileComparisonWithWorking(e));break;case U.method:(0,P.El)(U,e,e=>void this.openFile(e));break;case F.method:(0,P.El)(F,e,e=>void(0,w.gf)(o.eq.ShowInCommitGraph,{ref:(0,d.op)(e.ref,e.repoPath,{refType:"revision"})}));break;case $.method:(0,P.El)($,e,e=>this.switchMode(e));break;case N.method:(0,P.El)(N,e,e=>this.updateCreateMetadata(e));break;case G.method:(0,P.El)(G,e,e=>this.updateDraftMetadata(e));break;case Q.method:(0,P.El)(Q,e,()=>this.updateDraftPermissions());break;case H.method:(0,P.El)(H,e,e=>this.updateCreateCheckedState(e));break;case A.method:(0,P.El)(A,e,e=>this.updatePreferences(e));break;case M.method:(0,P.El)(M,e,e=>this.onPatchChecked(e));break;case B.method:(0,P.El)(B,e,()=>this.onInviteUsers());break;case L.method:(0,P.El)(L,e,e=>this.onUpdatePatchUserSelection(e))}}onRefresh(){this.updateState(!0)}onReloaded(){this.updateState(!0)}onVisibilityChanged(e){this._context.create?.changes.forEach(t=>e?t.resume():t.suspend()),e&&this.host.sendPendingIpcNotifications()}onAnyConfigurationChanged(e){(v.i.changed(e,["defaultDateFormat","views.patchDetails.files","views.patchDetails.avatars"])||v.i.changedCore(e,"workbench.tree.renderIndentGuides")||v.i.changedCore(e,"workbench.tree.indent"))&&(this._context.preferences={...this._context.preferences,...this.getPreferences()},this.updateState())}getPreferences(){return{avatars:v.i.get("views.patchDetails.avatars"),dateFormat:v.i.get("defaultDateFormat")??"MMMM Do, YYYY h:mma",files:v.i.get("views.patchDetails.files"),indentGuides:v.i.getCore("workbench.tree.renderIndentGuides")??"onHover",indent:v.i.getCore("workbench.tree.indent")}}onContextChanged(e){["gitlens:gk:organization:ai:enabled","gitlens:gk:organization:drafts:enabled"].includes(e)&&(this._context.orgSettings=this.getOrgSettings(),this.updateState())}getOrgSettings(){return{ai:(0,b.wp)("gitlens:gk:organization:ai:enabled",!1),byob:(0,b.wp)("gitlens:gk:organization:drafts:byob",!1)}}onRepositoriesChanged(e){if("create"===this.mode&&null!=this._context.create){if(this._context.create?.showingAllRepos)for(let t of e.added)this._context.create.changes.set(t.uri.toString(),new RepositoryWipChangeset(this.container,t,{to:h.Oy,from:"HEAD"},this.onRepositoryWipChanged.bind(this),!1,!0));for(let t of e.removed)this._context.create.changes.delete(t.uri.toString());this.notifyDidChangeCreateDraftState()}}onRepositoryWipChanged(e){this.notifyDidChangeCreateDraftState()}get mode(){return this._context.mode}setMode(e,t){this._context.mode=e,this.setHostTitle(e),(0,b.Qr)("gitlens:views:patchDetails:mode","editor"===v.i.get("cloudPatches.experimental.layout")?void 0:e),t||this.updateState(!0)}setHostTitle(e=this._context.mode){this.host.title="create"===e?"Create Cloud Patch":"Cloud Patch Details"}async applyPatch(e){if(null==this._context.draft||"local"===this._context.draft.draftType||!e.selected?.length)return;let t=this._context.draft.changesets?.[0];if(null==t)return;let i="branch"===e.target;for(let a of t.patches)if(e.selected.includes(a.id))try{let e;console.log(a);let t=a.commit;if(t||(t=await this.getOrCreateCommitForPatch(a.gkRepositoryId)),!t)continue;if(i){let i=t.getRepository(),r=await y(`Choose a Branch ${o.or.Dot} ${i?.name}`,i);if(null==r){s.window.showErrorMessage(`Unable apply patch to '${a.repository.name}': No branch selected`);continue}let n="string"==typeof r;e={branchName:n?r:r.ref,createBranchIfNeeded:n}}await this.container.git.applyUnreachableCommitForPatch(t.repoPath,t.ref,{stash:!0,...e}),s.window.showInformationMessage("Patch applied successfully")}catch(e){e instanceof c.mw?e.reason===c.Mp.AppliedWithConflicts?s.window.showWarningMessage("Patch applied with conflicts"):s.window.showErrorMessage(e.message):s.window.showErrorMessage(`Unable apply patch to '${a.baseRef}': ${e.message}`)}}closeView(){(0,b.Qr)("gitlens:views:patchDetails:mode",void 0)}copyCloudLink(){this._context.draft?.draftType==="cloud"&&s.env.clipboard.writeText(this._context.draft.deepLinkUrl)}async getOrganizationMembers(){let e=await this.container.subscription.getSubscription(!0),t=e?.activeOrganization;return null==t?[]:this.container.organizations.getOrganizationMembers(t.id)}async onInviteUsers(){let e;let t=null!=(e="create"===this.mode?this._context.create?.userSelections?.map(e=>e.member.id):this._context.draftUserState?.selections?.map(e=>e.member.id))?new Set(e):void 0,i=await this.selectCollaborators(t);if(null==i||0===i.length)return;if("create"===this.mode){let e=i.map(e=>et(e,void 0,"editor","add"));null==this._context.create.userSelections?this._context.create.userSelections=e:this._context.create.userSelections.push(...e),this.notifyDidChangeCreateDraftState();return}let s=this._context.draftUserState,a=!1;for(let e of i)null==s.selections.find(t=>t.member.id===e.id)&&(a=!0,s.selections.push(et(e,void 0,"editor","add")));a&&this.notifyDidChangeViewDraftState()}async selectCollaborators(e){let t=await this.getOrganizationMembers();if(0===t.length)return;let i=(0,S.Qv)(),o=[];try{let n=s.window.createQuickPick();o.push(n,n.onDidHide(()=>i.fulfill(void 0)),n.onDidAccept(()=>n.busy?void 0:i.fulfill(n.selectedItems.map(e=>e.item))),n.onDidTriggerButton(e=>{e===r.uc&&(n.canSelectMany?n.selectedItems=[]:i.fulfill([]))})),n.title="Select Collaborators",n.placeholder="Select the collaborators to share this patch with",n.matchOnDescription=!0,n.matchOnDetail=!0,n.canSelectMany=!0,n.buttons=[r.uc],n.busy=!0,n.show();let c=t.map(t=>({label:t.name??t.username,description:t.email,picked:!!e&&e.has(t.id),item:t,iconPath:(0,a.X0)(t.email,void 0)}));return n.items=c,n.busy=!1,await i.promise}finally{o.forEach(e=>void e.dispose())}}onUpdatePatchUserSelection(e){if("create"===this.mode){let t=this._context.create?.userSelections;if(null==t)return;if("remove"===e.role){let i=t.findIndex(t=>t.member.id===e.selection.member.id);if(-1===i)return;t.splice(i,1)}else{let i=t.find(t=>t.member.id===e.selection.member.id);if(null==i)return;i.pendingRole=e.role}this.notifyDidChangeCreateDraftState();return}let t=this._context.draftUserState.selections.find(t=>t.member.id===e.selection.member.id);null!=t&&("remove"===e.role?t.change="delete":(t.change="modify",t.pendingRole=e.role),this.notifyDidChangeViewDraftState())}async createDraft({title:e,changesets:t,description:i,visibility:a,userSelections:r}){if(!await (0,R.us)("Cloud Patches require a GitKraken account.",this.container)||!await (0,R.Si)(this.container))return;let o=[],n=Object.entries(t),c=1===n.length;for(let[e,t]of n){if(!c&&!1===t.checked)continue;let i=this._context.create?.changes?.get(e);if(null==i)continue;let{revision:s,repository:a}=i;"wip"===t.type&&"staged"===t.checked&&(s={...s,to:h.QD}),o.push({repository:a,revision:s})}if(null!=o)try{let t=await this.container.drafts.createDraft("patch",e,o,{description:i,visibility:a});null!=r&&0!==r.length&&await this.container.drafts.addDraftUsers(t.id,r.map(e=>({userId:e.member.id,role:e.pendingRole}))),async function(){let e={title:"View Patch"},i={title:"Copy Link"},a=!1;for(;;){let r=await s.window.showInformationMessage(`Cloud Patch successfully created${a?"— link copied to the clipboard":""}`,e,i);if(r===i){s.env.clipboard.writeText(t.deepLinkUrl),a=!0;continue}r===e&&(0,I.A)({mode:"view",draft:t});break}}(),this.container.draftsView.refresh(!0).then(()=>void this.container.draftsView.revealDraft(t)),this.closeView()}catch(e){s.window.showErrorMessage(`Unable to create draft: ${e.message}`)}}async explainPatch(e){let t;if(this._context.draft?.draftType==="cloud"){try{let e=await this.getDraftPatch(this._context.draft);if(null==e)throw Error("Unable to find patch");let i=await this.getOrCreateCommitForPatch(e.gkRepositoryId);if(null==i)throw Error("Unable to find commit");let s=await this.container.ai.explainCommit(i,{progress:{location:{viewId:this.host.id}}});if(null==s)throw Error("Error retrieving content");t={summary:s}}catch(e){t={error:{message:e.message}}}this.host.notify(K,t,e)}}async openPatchContents(e){}async onPatchChecked(e){if(e.patch.repository.located||!1===e.checked)return;let t=this._context.draft?.changesets?.[0].patches?.find(t=>t.gkRepositoryId===e.patch.gkRepositoryId);if(t?.repository==null||(0,p.Oc)(t.repository))return;let i=await this.container.repositoryIdentity.getRepository(t.repository,{openIfNeeded:!0,prompt:!0});null==i?s.window.showErrorMessage(`Unable to locate repository '${t.repository.name}'`):t.repository=i,this.notifyPatchRepositoryUpdated(t)}notifyPatchRepositoryUpdated(e){return this.host.notify(X,{patch:(0,k.i)({...e,contents:void 0,commit:void 0,repository:{id:e.gkRepositoryId,name:e.repository?.name??"",located:null!=e.repository&&(0,p.Oc)(e.repository)}})})}updateCreateCheckedState(e){let t=this._context.create?.changes.get(e.repoUri);null!=t&&(t.checked=e.checked,this.notifyDidChangeCreateDraftState())}updateCreateMetadata(e){null!=this._context.create&&(this._context.create.title=e.title,this._context.create.description=e.description,this._context.create.visibility=e.visibility,this.notifyDidChangeCreateDraftState())}updateDraftMetadata(e){null!=this._context.draft&&(this._context.draftVisibiltyState=e.visibility,this.notifyDidChangeViewDraftState())}async updateDraftPermissions(){let e=this._context.draft,t=e.id,i=[];null!=this._context.draftVisibiltyState&&this._context.draftVisibiltyState!==e.visibility&&i.push(this.container.drafts.updateDraftVisibility(t,this._context.draftVisibiltyState));let a=this._context.draftUserState?.selections,r=[];if(null!=a)for(let e of a)void 0!==e.change&&("delete"!==e.change&&r.push({userId:e.member.id,role:e.pendingRole}),"add"!==e.change&&i.push(this.container.drafts.removeDraftUser(t,e.member.id)));(0!==i.length||0!==r.length)&&(0!==i.length&&console.log(await Promise.all(i)),0!==r.length&&await this.container.drafts.addDraftUsers(t,r),await this.createDraftUserState(e,{force:!0}),s.window.showInformationMessage("Cloud Patch successfully updated"),this.notifyDidChangeViewDraftState())}switchMode(e){this.setMode(e.mode)}_notifyDidChangeStateDebounced=void 0;updateState(e=!1){if(this.host.clearPendingIpcNotifications(),e){this.notifyDidChangeState();return}null==this._notifyDidChangeStateDebounced&&(this._notifyDidChangeStateDebounced=(0,D.Cu)(this.notifyDidChangeState.bind(this),500)),this._notifyDidChangeStateDebounced()}async getState(e){let t,i;return"create"===e.mode&&null!=e.create&&(t=await this.getCreateDraftState(e)),"view"===e.mode&&null!=e.draft&&(i=await this.getViewDraftState(e)),(0,k.i)({...this.host.baseWebviewState,mode:e.mode,create:t,draft:i,preferences:e.preferences,orgSettings:e.orgSettings})}async notifyDidChangeState(){return this._notifyDidChangeStateDebounced?.cancel(),this.host.notify(Y,{state:await this.getState(this._context)})}updateCreateDraftState(e){let t;let i=!1;if(null!=e.changes){t=this._context.create?.changes??new Map;let i=new Set;for(let a of e.changes){let e;let r=this.container.git.getRepository(s.Uri.parse(a.repository.uri));null!=r&&(e="wip"===a.type?new RepositoryWipChangeset(this.container,r,a.revision,this.onRepositoryWipChanged.bind(this),a.checked??!0,a.expanded??!0):new RepositoryRefChangeset(this.container,r,a.revision,a.files,a.checked??!0,a.expanded??!0),i.add(r.uri.toString()),t.set(r.uri.toString(),e))}if(i.size!==t.size)for(let[e,s]of t)i.has(e)||(s.checked=!1)}else i=null==e.repositories,t=new Map((e.repositories??this.container.git.openRepositories).map(e=>[e.uri.toString(),new RepositoryWipChangeset(this.container,e,{to:h.Oy,from:"HEAD"},this.onRepositoryWipChanged.bind(this),!0,!0)]));this._context.create={title:e.title,description:e.description,changes:t,showingAllRepos:i,visibility:"public"},this.setMode("create",!0),this.notifyDidChangeCreateDraftState()}async getCreateDraftState(e){let{create:t}=e;if(null==t)return;let i={};if(0!==t.changes.size)for(let[e,s]of t.changes){let t=await s.getChange();t?.files?.length!==0&&(t.checked!==s.checked&&(t.checked=s.checked),i[e]=t)}return{title:t.title,description:t.description,changes:i,visibility:t.visibility,userSelections:t.userSelections}}async notifyDidChangeCreateDraftState(){return this.host.notify(j,{mode:this._context.mode,create:await this.getCreateDraftState(this._context)})}async updateViewDraftState(e){this._context.draft=e,e?.draftType==="cloud"&&await this.createDraftUserState(e,{force:!0}),this.setMode("view",!0),this.notifyDidChangeViewDraftState()}async getViewDraftState(e){if(null==e.draft)return;let t=e.draft;if("cloud"===t.draftType){(null==t.changesets||(0,x.K6)(t.changesets,e=>e.patches.some(e=>null==e.contents||null==e.files||null==e.repository)))&&setTimeout(async()=>{null==t.changesets&&(t.changesets=await this.container.drafts.getChangesets(t.id));let e=t.changesets.flatMap(e=>e.patches).filter(e=>null==e.contents||null==e.files||null==e.repository);for(let t of(await Promise.allSettled(e.map(e=>this.container.drafts.getPatchDetails(e)))))if("fulfilled"===t.status){let i=e.find(e=>e.id===t.value.id);null!=i&&(i.contents=t.value.contents,i.files=t.value.files,i.repository=t.value.repository)}this.notifyDidChangeViewDraftState()},0);let e=this._context.draftUserState;return{draftType:"cloud",id:t.id,createdAt:t.createdAt.getTime(),updatedAt:t.updatedAt.getTime(),author:t.author,role:t.role,title:t.title,description:t.description,visibility:t.visibility,patches:(0,k.i)(t.changesets[0].patches.map(e=>({...e,contents:void 0,commit:void 0,repository:{id:e.gkRepositoryId,name:e.repository?.name??"",located:null!=e.repository&&(0,p.Oc)(e.repository)}}))),users:e.users,userSelections:e.selections}}}async createDraftUserState(e,t){if(null==this._context.draftUserState||t?.force===!0)try{let t=await this.container.drafts.getDraftUsers(e.id);if(0===t.length)return;let i=[],s=[],a=await this.getOrganizationMembers();for(let e of t){i.push(e);let t=a.find(t=>t.id===e.userId);s.push(et(t,e))}this._context.draftUserState={users:i,selections:s}}catch(e){}}async notifyDidChangeViewDraftState(){return this.host.notify(q,{mode:this._context.mode,draft:(0,k.i)(await this.getViewDraftState(this._context))})}updatePreferences(e){(this._context.preferences?.files?.compact!==e.files?.compact||this._context.preferences?.files?.icon!==e.files?.icon||this._context.preferences?.files?.layout!==e.files?.layout||this._context.preferences?.files?.threshold!==e.files?.threshold)&&(null!=e.files&&(this._context.preferences?.files?.compact!==e.files?.compact&&v.i.updateEffective("views.patchDetails.files.compact",e.files?.compact),this._context.preferences?.files?.icon!==e.files?.icon&&v.i.updateEffective("views.patchDetails.files.icon",e.files?.icon),this._context.preferences?.files?.layout!==e.files?.layout&&v.i.updateEffective("views.patchDetails.files.layout",e.files?.layout),this._context.preferences?.files?.threshold!==e.files?.threshold&&v.i.updateEffective("views.patchDetails.files.threshold",e.files?.threshold),this._context.preferences.files=e.files),this.notifyDidChangePreferences())}async notifyDidChangePreferences(){return this.host.notify(J,{preferences:this._context.preferences})}async getDraftPatch(e,t){if(null==e.changesets){let t=await this.container.drafts.getChangesets(e.id);e.changesets=t}let i=null==t?e.changesets[0].patches?.[0]:e.changesets[0].patches?.find(e=>e.gkRepositoryId===t);if(null!=i){if(null==i.contents||null==i.files||null==i.repository){let e=await this.container.drafts.getPatchDetails(i.id);i.contents=e.contents,i.files=e.files,i.repository=e.repository}return i}}async getFileCommitFromParams(e){let[t,i]=await this.getOrCreateCommit(e);return null!=t&&null!=i?[t,new l.Gm(e.repoPath,e.path,e.status,e.originalPath,void 0,void 0,e.staged),i]:null!=(t=await t?.getCommitForFile(e.path,e.staged))?[t,t.file,i]:void 0}async getOrCreateCommit(e){switch(this.mode){case"create":return this.getCommitForFile(e);case"view":return[await this.getOrCreateCommitForPatch(e.gkRepositoryId)];default:return[void 0]}}async getCommitForFile(e){let t=(0,x.iw)(this._context.create.changes.values(),t=>t.repository.path===e.repoPath);if(null==t)return[void 0];let i=await t.getChange();if(null==i)return[void 0];if("revision"===i.type){let t=await this.container.git.getCommit(e.repoPath,i.revision.to??h.Oy);return i.revision.to===i.revision.from||i.revision.from.length===i.revision.to.length+1&&i.revision.from.endsWith("^")&&i.revision.from.startsWith(i.revision.to)?[t]:[t,i.revision]}return"wip"===i.type?[await this.container.git.getCommit(e.repoPath,i.revision.to??h.Oy)]:[void 0]}async getOrCreateCommitForPatch(e){let t=this._context.draft;if("local"===t.draftType)return;let i=await this.getDraftPatch(t,e);if(i?.repository!=null){if(i?.commit==null){if(!(0,p.Oc)(i.repository)){let e=await this.container.repositoryIdentity.getRepository(i.repository,{openIfNeeded:!0,prompt:!0});if(null==e){s.window.showErrorMessage(`Unable to locate repository '${i.repository.name}'`);return}i.repository=e}try{let e=await this.container.git.createUnreachableCommitForPatch(i.repository.uri,i.contents,i.baseRef??"HEAD",t.title);i.commit=e}catch(e){s.window.showErrorMessage(`Unable preview the patch on base '${i.baseRef}': ${e.message}`),i.baseRef=void 0}}return i?.commit}}async openFile(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,s]=t;(0,n.U5)(s,i,{preserveFocus:!0,preview:!0,...e.showOptions})}async openFileComparisonWithPrevious(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,s,a]=t;(0,n.t6)(s,null!=a?{repoPath:i.repoPath,rhs:a.to??h.Oy,lhs:a.from}:i,{preserveFocus:!0,preview:!0,...e.showOptions,rhsTitle:"view"===this.mode?`${(0,_.g1)(s.path)} (Patch)`:void 0}),this.container.events.fire("file:selected",{uri:s.uri},{source:this.host.id})}async openFileComparisonWithWorking(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,s,a]=t;(0,n.i_)(s,null!=a?{repoPath:i.repoPath,ref:a.to}:i,{preserveFocus:!0,preview:!0,...e.showOptions,lhsTitle:"view"===this.mode?`${(0,_.g1)(s.path)} (Patch)`:void 0})}};function et(e,t,i,s){return{change:s,member:e,user:t,pendingRole:i,avatarUrl:e?.email!=null?(0,a.X0)(e.email,void 0).toString():void 0}}((e,t,i,s)=>{for(var a,r=ee(t,i),o=e.length-1;o>=0;o--)(a=e[o])&&(r=a(t,i,r)||r);return s&&r&&Z(t,i,r)})([(0,C.u_)({args:!1})],PatchDetailsWebviewProvider.prototype,"getState",1)},788:(e,t,i)=>{i.d(t,{i:()=>s});function s(e){if(null!=e)try{return JSON.parse(JSON.stringify(e,function(e,t){if(t instanceof Date)return t.getTime();if(t instanceof Map||t instanceof Set)return[...t.entries()];if(t instanceof Function||t instanceof Error)return;if(t instanceof RegExp)return t.toString();let i=this[e];return i instanceof Date?i.getTime():t}))}catch(e){throw e}}}};