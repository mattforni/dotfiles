(()=>{var e,t,i,r,s={9712:(e,t,i)=>{let r,s,o;var n=Object.create,a=Object.defineProperty,l=Object.getOwnPropertyDescriptor,h=Object.getOwnPropertyNames,c=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty,d=(e,t)=>{for(var i in t)a(e,i,{get:t[i],enumerable:!0})},p=(e,t,i,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let s of h(t))u.call(e,s)||s===i||a(e,s,{get:()=>t[s],enumerable:!(r=l(t,s))||r.enumerable});return e},g={};d(g,{AzureDevOps:()=>x,AzureDevopsUtils:()=>eL,Bitbucket:()=>L,BitbucketServer:()=>M,BitbucketServerUtils:()=>ez,BitbucketUtils:()=>eG,GitHub:()=>eg,GitHubUtils:()=>eJ,GitLab:()=>ex,GitLabUtils:()=>e0,Jira:()=>eU,JiraUtils:()=>e4,Trello:()=>eq,TrelloUtils:()=>e8,Utils:()=>e9,default:()=>e5}),e.exports=p(a({},"__esModule",{value:!0}),g);var m=(o=null!=(r=i(896))?n(c(r)):{},p(!s&&r&&r.__esModule?o:a(o,"default",{value:r,enumerable:!0}),r)),f=globalThis.fetch||m.default,w=e=>"fetch"===e.name,v=async e=>{let t=e.headers.get("content-type")||"",i=null;if(t.startsWith("application/json"))i=await e.json();else if(t.startsWith("text/"))i=await e.text();else throw Error(`Unsupported content-type: ${t}`);let r={body:i,headers:Object.fromEntries(e.headers.entries()),status:e.status,statusText:e.statusText};if(!e.ok){let t=Error(e.statusText);throw Object.assign(t,{response:r}),t}return r},y=e=>w(e)?async({url:t,...i})=>v(await e(t,i)):e,b=class{constructor(e){this.config={...e,request:y((null==e?void 0:e.request)||f)}}updateConfig(e){this.config={...this.config,...e,request:e.request?y(e.request):this.config.request}}},C=class extends b{},A=(e,t)=>{let i={};return e&&(i.Authorization=`${t?"Basic":"Bearer"} ${e}`),i},k=(e,t={})=>A(t.token||e.token,t.isPAT||e.isPAT),P=e=>e.url.replace("/_apis/git/repositories/","/_git/").replace(`/${e.repository.project.id}/`,`/${encodeURIComponent(e.repository.project.name)}/`).replace(`/${e.repository.id}/`,`/${encodeURIComponent(e.repository.name)}/`).replace("/pullRequests/","/pullrequest/"),S="https://app.vssps.visualstudio.com/_apis",R="https://dev.azure.com",D={active:"OPEN",completed:"MERGED",abandoned:"CLOSED"},$={10:"APPROVED",5:"APPROVED",0:"REVIEW_REQUESTED",[-5]:"CHANGES_REQUESTED",[-10]:"CHANGES_REQUESTED"},_=e=>({id:e.id,name:e.displayName,username:e.uniqueName||e.displayName,email:null,avatarUrl:e.imageUrl}),I=e=>e.startsWith("refs/heads/")?e.replace("refs/heads/",""):e,T=e=>({id:e.pullRequestId.toString(),title:e.title,number:e.codeReviewId,state:D[e.status],isDraft:e.isDraft,commentCount:null,upvoteCount:null,author:_(e.createdBy),createdDate:new Date(e.creationDate),updatedDate:new Date(e.closedDate||e.creationDate),closedDate:e.closedDate?new Date(e.closedDate):null,repository:{name:e.repository.name,owner:{login:void 0}},headCommit:{buildStatus:null},baseRef:{name:I(e.targetRefName)},headRef:{name:I(e.sourceRefName)},url:P(e),assignees:e.reviewers.map(_),reviews:e.reviewers.filter(e=>0!==e.vote).map(e=>({reviewer:_(e),state:$[e.vote]||"REVIEW_REQUESTED"})),additions:null,deletions:null,fileCount:null,commitCount:null,headRepository:null,mergeableState:"UNKNOWN"}),F=(e,t)=>({id:t.id,name:t.name,namespace:e,project:t.project.name,webUrl:t.webUrl,httpsUrl:t.remoteUrl,sshUrl:t.sshUrl,defaultBranch:t.defaultBranch?{name:I(t.defaultBranch)}:null,permission:null}),O=e=>{let t=e.fields,i=t["System.AssignedTo"];return{id:e.id.toString(),number:e.id.toString(),title:t["System.Title"],commentCount:t["System.CommentCount"],author:{avatarUrl:t["System.CreatedBy"]._links.avatar.href,email:null,id:t["System.CreatedBy"].id,name:t["System.CreatedBy"].uniqueName,username:t["System.CreatedBy"].displayName},createdDate:new Date(t["System.CreatedDate"]),updatedDate:new Date(t["System.ChangedDate"]),url:e._links.html.href,assignees:i?[{avatarUrl:i._links.avatar.href,email:null,id:i.id,name:i.uniqueName,username:i.displayName}]:[],description:null,state:null,type:t["System.WorkItemType"],repository:null,upvoteCount:0}},x=class extends b{async getCurrentUser(e={}){if(e.isPAT||this.config.isPAT)throw Error("Azure DevOps does not support PATs for this function.");let t=await this.config.request({url:`${S}/profile/profiles/me`,headers:k(this.config,e)});return{data:{id:t.body.id,name:t.body.displayName,username:t.body.displayName,email:t.body.emailAddress,avatarUrl:null}}}async getCurrentUserForInstance(e,t={}){let i=(await this.config.request({url:`${R}/${encodeURIComponent(e.namespace)}/_apis/ConnectionData`,headers:k(this.config,t)})).body.authorizedUser;if("Anonymous"===i.providerDisplayName)throw Error("Current user not found.");return{data:{id:i.id,name:i.providerDisplayName,username:i.providerDisplayName,email:i.properties.Account.$value,avatarUrl:null}}}async getUserForCommit(e,t={}){if(!e.repo.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let i=(await this.config.request({url:`${R}/${encodeURIComponent(e.repo.namespace)}/${encodeURIComponent(e.repo.project)}/_apis/git/repositories/${encodeURIComponent(e.repo.name)}/commits/${e.oid}`,headers:k(this.config,t)})).body.author;return{data:{name:i.name,email:i.email,avatarUrl:i.imageUrl}}}async getOrgsForUser(e,t={}){return{data:(await this.config.request({url:`${S}/accounts?memberId=${e.userId}&api-version=6.0`,headers:k(this.config,t)})).body.value.map(e=>({id:e.accountId,name:e.accountName}))}}async getAzureProjects(e,t={}){let i=new URL(`${R}/${encodeURIComponent(e.namespace)}/_apis/projects`);i.searchParams.set("$top","100"),e.cursor&&i.searchParams.set("$skip",e.cursor);let r=await this.config.request({url:i.toString(),headers:k(this.config,t)}),s=r.headers["x-ms-continuationtoken"];return{pageInfo:{hasNextPage:!!s,endCursor:s||null},data:r.body.value.map(t=>({id:t.id,name:t.name,namespace:e.namespace}))}}async getRepo(e,t={}){if(!e.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let i=await this.config.request({url:`${R}/${encodeURIComponent(e.namespace)}/${encodeURIComponent(e.project)}/_apis/git/repositories/${encodeURIComponent(e.name)}`,headers:k(this.config,t)});return{data:F(e.namespace,i.body)}}async getRepos(e,t={}){let i=[],r=[];return await Promise.all(e.map(async e=>{try{let r=await this.getRepo(e,t);i.push(r.data)}catch(t){r.push({input:e,error:t})}})),{data:i,errors:r}}async getReposForAzureProject(e,t={}){if(!e.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');return{data:(await this.config.request({url:`${R}/${encodeURIComponent(e.namespace)}/${encodeURIComponent(e.project)}/_apis/git/repositories`,headers:k(this.config,t)})).body.value.map(t=>F(e.namespace,t))}}async getRefs(e,t,i={}){if(!t.repo.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let r=new URL(`${R}/${encodeURIComponent(t.repo.namespace)}/${encodeURIComponent(t.repo.project)}/_apis/git/repositories/${encodeURIComponent(t.repo.name)}/refs`);r.searchParams.set("filter",e),r.searchParams.set("$top","100"),t.cursor&&r.searchParams.set("continuationToken",t.cursor);let s=await this.config.request({url:r.toString(),headers:k(this.config,i)}),o=s.headers["x-ms-continuationtoken"];return{pageInfo:{hasNextPage:!!o,endCursor:o||null},data:s.body.value.map(e=>({name:I(e.name),commit:{oid:e.objectId,authoredDate:null,committedDate:null}}))}}async getBranches(e,t={}){return this.getRefs("heads",e,t)}async getTags(e,t={}){return this.getRefs("tags",e,t)}async getPullRequestsForRepoBase(e,t={},i=100){let{page:r,repo:s,assigneeLogins:o,authorLogin:n}=e||{};if(!s.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let a="searchCriteria.status=1";return o&&o.length&&(a+=`&searchCriteria.reviewerId=${o[0]}`),n&&(a+=`&searchCriteria.creatorId=${n}`),await this.config.request({url:`${t.baseUrl||R}/${encodeURIComponent(s.namespace)}/${encodeURIComponent(s.project||"")}/_apis/git/repositories/${encodeURIComponent(s.name)}/pullRequests?${a}&%24top=${i}&%24skip=${((r||1)-1)*i}`,headers:k(this.config,t)})}async getPullRequestsForRepo(e,t={}){let i=e.page||1,r=await this.getPullRequestsForRepoBase(e,t,100);return{pageInfo:{hasNextPage:100===r.body.value.length,nextPage:i+1},data:r.body.value.map(T)}}async getPullRequestsForRepos(e,t={}){if(!e.repos.every(e=>e.project))throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let{repos:i}=e||{},r=[];return await Promise.all(i.map(async i=>{try{(await this.getPullRequestsForRepoBase({repo:i,...e},t)).body.value.forEach(e=>{r.push(T(e))})}catch(e){if(404!==e.statusCode&&401!==e.statusCode)throw e}})),{data:r}}async closePullRequest(e,t={}){if(!e.repo.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let{repo:{namespace:i,name:r,project:s},pullRequestId:o}=e;if(!(await this.config.request({method:"PATCH",url:`${t.baseUrl||R}/${encodeURIComponent(i)}/${encodeURIComponent(s||"")}/_apis/git/repositories/${r}/pullrequests/${o}?api-version=6.0`,body:JSON.stringify({status:"abandoned"}),headers:{...k(this.config,t),"Content-Type":"application/json"}})).body.status)throw Error("Could not close pull request")}async mergePullRequest(e,t={}){if(!e.repo.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let{repo:{namespace:i,name:r,project:s},pullRequestId:o,expectedSourceSha:n}=e;if(!(await this.config.request({method:"PATCH",url:`${t.baseUrl||R}/${encodeURIComponent(i)}/${encodeURIComponent(s||"")}/_apis/git/repositories/${r}/pullrequests/${o}?api-version=6.0`,body:JSON.stringify({lastMergeSourceCommit:{commitId:n},status:"completed"}),headers:{...k(this.config,t),"Content-Type":"application/json"}})).body.status)throw Error("Could not merge pull request")}async getIssuesForAzureProject(e,t={}){let{page:i,assigneeLogins:r,authorLogin:s,mentionLogin:o}=e||{},n=i||1,a=["[Microsoft.VSTS.Common.ClosedDate] = ''","[System.TeamProject] = @project","[Microsoft.VSTS.Common.ResolvedDate] = ''"];s&&a.push(`[System.CreatedBy] = '${s.replace("'","''")}'`),r&&r[0]&&a.push(`[System.AssignedTo] = '${r[0].replace("'","''")}'`),o&&a.push("[System.Id] IN (@recentMentions)");let l=`Select [Microsoft.VSTS.Common.ClosedDate], [Microsoft.VSTS.Common.ResolvedDate] From WorkItems Where ${a.join(" AND ")} order by [System.CreatedDate] desc`,h=await this.config.request({url:`${t.baseUrl||R}/${encodeURIComponent(e.namespace)}/${encodeURIComponent(e.project)}/_apis/wit/wiql?api-version=6.0`,body:JSON.stringify({query:l}),method:"POST",headers:{...k(this.config,t),"Content-Type":"application/json"}}),c=h.body.workItems.slice((n-1)*200,200*n).map(e=>e.id);if(0==c.length)return{pageInfo:{hasNextPage:!1,nextPage:null},data:[]};let u=await this.config.request({url:`${t.baseUrl||R}/${encodeURIComponent(e.namespace)}/${encodeURIComponent(e.project)}/_apis/wit/workitemsbatch?api-version=6.0`,body:JSON.stringify({ids:c,$expand:"Links"}),method:"POST",headers:{...k(this.config,t),"Content-Type":"application/json"}});return{pageInfo:{hasNextPage:h.body.workItems.length>200*n,nextPage:n+1},data:u.body.value.map(O)}}async setIssueStatus(e,t={}){var i;if(!e.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let{namespace:r,project:s,issueId:o,status:n}=e;if(!(null!=(i=(await this.config.request({method:"PATCH",url:`${t.baseUrl||R}/${encodeURIComponent(r)}/${encodeURIComponent(s||"")}/_apis/wit/workitems/${o}?api-version=6.0`,body:JSON.stringify([{op:"add",path:"/fields/System.State",value:n}]),headers:{...k(this.config,t),"Content-Type":"application/json-patch+json"}})).body.fields)&&i["System.State"]))throw Error("Could not set issue status")}},E=(e,t={})=>A(t.token||e.token,t.isPAT||e.isPAT),B="https://api.bitbucket.org/2.0",U={OPEN:"OPEN",MERGED:"MERGED",DECLINED:"CLOSED"},W=e=>({id:e.uuid,name:e.display_name||e.nickname,username:e.nickname||e.display_name,email:null,avatarUrl:e.links.avatar.href}),N=e=>{var t,i;return{id:e.uuid,namespace:e.workspace.slug,name:e.slug,webUrl:e.links.html.href,httpsUrl:(null==(t=e.links.clone.find(e=>"https"===e.name))?void 0:t.href)??null,sshUrl:(null==(i=e.links.clone.find(e=>"ssh"===e.name))?void 0:i.href)??null,defaultBranch:{name:e.mainbranch.name},permission:null}},q=e=>{let t=e.id;return{id:t.toString(),title:e.title,number:t,state:U[e.state],isDraft:!1,commentCount:e.comment_count,upvoteCount:null,author:W(e.author),createdDate:new Date(e.created_on),updatedDate:new Date(e.updated_on),closedDate:null,repository:{name:e.source.repository.name,owner:{login:void 0}},headCommit:{buildStatus:null},baseRef:{name:e.destination.branch.name},headRef:{name:e.source.branch.name},url:e.links.html.href,assignees:null,reviews:null,additions:null,deletions:null,fileCount:null,commitCount:null,headRepository:null,mergeableState:"UNKNOWN"}},L=class extends b{async refreshToken(e){return{data:(await this.config.request({url:"https://bitbucket.org/site/oauth2/access_token",method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded",Authorization:`Basic ${e.base64ClientIDColonClientSecret}`},body:`grant_type=refresh_token&refresh_token=${e.refreshToken}`})).body}}async getCurrentUser(e={}){return{data:W((await this.config.request({url:`${B}/user`,headers:E(this.config,e)})).body)}}async getUserForCommit(e,t={}){var i;let r=(await this.config.request({url:`${B}/repositories/${e.repo.namespace}/${e.repo.name}/commit/${e.oid}`,headers:E(this.config,t)})).body.author,s=r.raw.match(/([^<]+)<(.+)>/);return{data:{name:s?s[1].trim():null,email:s?s[2]:null,avatarUrl:(null==(i=r.user)?void 0:i.links.avatar.href)||null}}}async getRepo(e,t={}){return{data:N((await this.config.request({url:`${B}/repositories/${e.namespace}/${e.name}`,headers:E(this.config,t)})).body)}}async getRepos(e,t={}){let i=[],r=[];return await Promise.all(e.map(async e=>{try{let r=await this.getRepo(e,t);i.push(r.data)}catch(t){r.push({input:e,error:t})}})),{data:i,errors:r}}async getReposForCurrentUser(e={},t={}){let i=new URL(`${B}/repositories`);i.searchParams.set("role","member"),i.searchParams.set("pagelen","100"),e.cursor&&i.searchParams.set("after",e.cursor);let r=await this.config.request({url:i.toString(),headers:E(this.config,t)}),s=!!r.body.next,o=null;return r.body.next&&(o=new URL(r.body.next).searchParams.get("after")),{pageInfo:{hasNextPage:s,endCursor:o},data:r.body.values.map(N)}}async getBranches(e,t={}){var i;let r=new URL(`${B}/repositories/${e.repo.namespace}/${e.repo.name}/refs/branches`);r.searchParams.set("page",(null==(i=e.page)?void 0:i.toString())||"1"),r.searchParams.set("pagelen","100");let s=await this.config.request({url:r.toString(),headers:E(this.config,t)}),o=!!s.body.next;return{pageInfo:{hasNextPage:o,nextPage:o?s.body.page+1:null},data:s.body.values.map(e=>{let t=new Date(e.target.date);return{name:e.name,commit:{oid:e.target.hash,authoredDate:t,committedDate:t}}})}}async getTags(e,t={}){let i=new URL(`${B}/repositories/${e.repo.namespace}/${e.repo.name}/refs/tags`);i.searchParams.set("pagelen","100"),e.cursor&&i.searchParams.set("page",e.cursor);let r=await this.config.request({url:i.toString(),headers:E(this.config,t)}),s=!!r.body.next,o=null;return r.body.next&&(o=new URL(r.body.next).searchParams.get("page")),{pageInfo:{hasNextPage:s,endCursor:o},data:r.body.values.map(e=>{let t=new Date(e.target.date);return{name:e.name,commit:{oid:e.target.hash,authoredDate:t,committedDate:t}}})}}async getPullRequestsForRepoBase(e,t={}){var i;let r=new URL(`${B}/repositories/${encodeURI(e.repo.namespace)}/${encodeURI(e.repo.name)}/pullrequests?state=OPEN`);return r.searchParams.set("page",(null==(i=e.page)?void 0:i.toString())||"1"),r.searchParams.set("pagelen","50"),await this.config.request({url:r.toString(),headers:E(this.config,t)})}async getPullRequestsForRepo(e,t={}){let i=[],r=await this.getPullRequestsForRepoBase(e,t);r.body.values.forEach(t=>{if(e.authorLogin&&t.author.uuid!==e.authorLogin)return null;i.push(q(t))});let s=!!r.body.next;return{pageInfo:{hasNextPage:s,nextPage:s?r.body.page+1:null},data:i}}async getPullRequestsForRepos(e,t={}){let i=[];return await Promise.all(e.repos.map(async r=>{try{(await this.getPullRequestsForRepoBase({repo:r,...e},t)).body.values.forEach(t=>{if(e.authorLogin&&t.author.uuid!==e.authorLogin)return null;i.push(q(t))})}catch(e){if(404!==e.statusCode&&401!==e.statusCode)throw e}})),{data:i}}async closePullRequest(e,t={}){let{repo:{namespace:i,name:r},pullRequestId:s}=e;if(!(await this.config.request({method:"POST",url:`${B}/repositories/${i}/${r}/pullrequests/${s}/decline`,headers:E(this.config,t)})).body.title)throw Error("Could not close pull request")}async mergePullRequest(e,t={}){let{repo:{namespace:i,name:r},pullRequestId:s}=e;if(!(await this.config.request({method:"POST",url:`${B}/repositories/${i}/${r}/pullrequests/${s}/merge`,headers:E(this.config,t)})).body.title)throw Error("Could not merge pull request")}},M=class extends C{getBaseUrl(e){let t=e.baseUrl||this.config.baseUrl;if(!t)throw Error('Bitbucket Server requires "baseUrl"');return t}getRequestHeaders(e){return A(e.token||this.config.token)}async getRepo(e,t={}){var i,r,s;let o=await this.config.request({url:`${this.getBaseUrl(t)}/projects/${e.namespace}/repos/${e.name}`,headers:this.getRequestHeaders(t)});return{data:{id:o.body.id.toString(),namespace:o.body.project.key,name:o.body.slug,webUrl:(null==(i=o.body.links.self[0])?void 0:i.href)??null,httpsUrl:(null==(r=o.body.links.clone.find(e=>"https"===e.name))?void 0:r.href)??null,sshUrl:(null==(s=o.body.links.clone.find(e=>"ssh"===e.name))?void 0:s.href)??null,defaultBranch:null,permission:null}}}async getRepos(e,t={}){return{data:(await Promise.all(e.map(e=>this.getRepo(e,t)))).map(e=>e.data)}}},Q="https://api.github.com",G=`${Q}/graphql`,Y=/\/api\/v\d+$/,V=e=>{if(e.endsWith("/api/graphql"))throw Error("The graphql endpoint is being used as the baseUrl. This package uses both GraphQL and REST APIs, and the REST version cannot be assumed. Use the REST endpoint as the baseUrl instead.")},z=(e,t)=>{let i=t.baseUrl||e.baseUrl;return i?(V(i=i.replace(/\/$/,"")),Y.test(i)&&(i=i.replace(Y,"")),`${i}/api/graphql`):G},H=(e,t,i)=>{let r=A(i.token||e.token);return r["X-Github-Next-Global-ID"]="1",r["Content-Type"]="application/json",e.request({url:z(e,i),method:"POST",headers:r,body:JSON.stringify(t)})},j={user:!0,"user:email":!0,"read:user":!0},J=e=>e.some(e=>j[e]),K=(e=!1,t=!1)=>`
__typename
id
databaseId
name
login
${t?"email":""}
avatarUrl${e?"(size: $avatarSize)":""}
`,Z=(e=!1)=>`
__typename
id
databaseId
login
avatarUrl${e?"(size: $avatarSize)":""}
`,X=(e,t=!1)=>`
id
databaseId
number
title
state
author {
  ... on User {
    ${K(!1,t)}
  }
  ... on Bot {
    ${Z(!1)}
  }
}
commits(last: 1) {
  totalCount
  nodes {
    commit {
      ... on Commit {
        oid
        status {
          contexts {
            context
            state
            description
            targetUrl
          }
        }
      }
    }
  }
}
baseRef {
  name
  target {
    oid
  }
}
headRef {
  name
  target {
    oid
  }
}
repository {
  name
  owner {
    login
  }
}
headRepository {
  name
  owner {
    login
  }
  url
  sshUrl
}
${e?"isDraft":""}
url
createdAt
comments {
  totalCount
}
reactions(content: THUMBS_UP) {
  totalCount
}
updatedAt
closedAt
assignees(first: 100) {
  nodes {
    ${K(!1,t)}
  }
}
reviewRequests(first: 100) {
  nodes {
    asCodeOwner
    requestedReviewer {
      ... on User {
        ${K(!1,t)}
      }
    }
  }
}
latestReviews(first: 100) {
  nodes {
    author {
      ... on User {
        ${K(!1,t)}
      }
    }
    state
  }
}
additions
deletions
changedFiles
mergeable
`,ee={"-linked":"-linked",archived:"archived",assignee:"assignee",author:"author",base:"base",closed:"closed",commenter:"commenter",comments:"comments",created:"created",draft:"draft",head:"head",label:"label",language:"language",linked:"linked",in:"in",interactions:"interactions",involves:"involves",is:"is",mentions:"mentions",merged:"merged",milestone:"milestone",no:"no",org:"org",project:"project",reactions:"reactions",repo:"repo",review:"review","reviewed-by":"reviewed-by","review-requested":"review-requested",state:"state",status:"status",team:"team","team-review-requested":"team-review-requested",type:"type",updated:"updated",user:"user","user-review-requested":"user-review-requested"},et=RegExp('(([^\\s]+:)?\\"(?:[^\\"\\\\]|\\\\.)*\\"?)|([^\\"\\s]+)',"g"),ei=e=>{let t=[];return(e.match(et)??[]).forEach(e=>{e.includes(":")&&"is:closed"!=e&&ee[e.split(":")[0]]&&t.push(e)}),t},er=(e,t,i,r)=>({query:`
query SearchPullRequests($query: String! $after: String) {
  search(type:ISSUE query:$query first:100 after:$after) {
    pageInfo {
      hasNextPage
      endCursor
    }
    nodes {
      ... on PullRequest {
        ${X(i,r)}
      }
    }
  }
}`,variables:{query:`is:pr is:open ${e}`,after:t}}),es=(e=[])=>e.some(e=>(null==e?void 0:e.message)==="Field 'isDraft' doesn't exist on type 'PullRequest'"),eo=`
id
databaseId
owner {
  login
}
name
url
sshUrl
defaultBranchRef {
  name
}
viewerPermission
`,en={__typename:"User",id:"U_kgDNJ5k",databaseId:10137,name:"Deleted user",login:"ghost",email:"",avatarUrl:"https://avatars.githubusercontent.com/u/10137?v=4"},ea={APPROVED:"APPROVED",CHANGES_REQUESTED:"CHANGES_REQUESTED",COMMENTED:"COMMENTED",REVIEW_REQUESTED:"REVIEW_REQUESTED"},el={MERGEABLE:"MERGEABLE",CONFLICTING:"CONFLICTS",UNKNOWN:"UNKNOWN"},eh=e=>({id:e.databaseId.toString(),graphQLId:e.id,namespace:e.owner.login,name:e.name,webUrl:e.url,httpsUrl:e.url.endsWith(".git")?e.url:`${e.url}.git`,sshUrl:e.sshUrl,defaultBranch:e.defaultBranchRef,permission:e.viewerPermission}),ec={OPEN:"OPEN",CLOSED:"CLOSED",MERGED:"MERGED"},eu=e=>({id:e.databaseId.toString(),graphQLId:e.id,name:e.name??e.login,username:e.login,email:e.email??null,avatarUrl:e.avatarUrl}),ed=e=>{var t,i,r,s,o,n,a,l;let h=null;e.author?(e.author.__typename,h=e.author):h=en;let c=null==(i=null==(t=e.commits.nodes)?void 0:t[0])?void 0:i.commit,u=(null==(r=e.headRef)?void 0:r.target)||c,d=(null==u?void 0:u.oid)===(null==c?void 0:c.oid)?null==(o=null==(s=null==c?void 0:c.status)?void 0:s.contexts)?void 0:o[0]:null,p=((null==(n=e.reviewRequests)?void 0:n.nodes)||[]).filter(e=>!e.asCodeOwner),g=null==(a=e.headRepository)?void 0:a.url;return g&&!g.endsWith(".git")&&(g=`${g}.git`),{id:e.databaseId.toString(),graphQLId:e.id,title:e.title,number:e.number,state:ec[e.state],commentCount:e.comments.totalCount,upvoteCount:e.reactions.totalCount,author:h?eu(h):null,createdDate:new Date(e.createdAt),isDraft:e.isDraft,repository:{name:e.repository.name,owner:{login:e.repository.owner.login}},headRepository:e.headRepository?{name:e.headRepository.name,owner:{login:e.headRepository.owner.login},remoteInfo:{cloneUrlHTTPS:g,cloneUrlSSH:e.headRepository.sshUrl}}:null,headCommit:{buildStatus:d||null},headRef:e.headRef?{name:e.headRef.name}:null,baseRef:e.baseRef?{name:e.baseRef.name}:null,url:e.url,updatedDate:new Date(e.updatedAt),closedDate:e.closedAt?new Date(e.closedAt):null,assignees:e.assignees.nodes?e.assignees.nodes.map(eu):null,reviews:p.map(e=>({reviewer:eu(e.requestedReviewer),state:"REVIEW_REQUESTED"})).concat(((null==(l=e.latestReviews)?void 0:l.nodes)||[]).map(e=>({reviewer:eu(e.author||en),state:ea[e.state]}))),additions:e.additions,deletions:e.deletions,fileCount:e.changedFiles,commitCount:e.commits.totalCount,mergeableState:el[e.mergeable]}},ep=e=>{let t=null;return e.author?(e.author.__typename,t=e.author):t=en,{id:e.databaseId.toString(),graphQLId:e.id,number:e.number,title:e.title,author:eu(t),commentCount:e.comments.totalCount,createdDate:new Date(e.createdAt),description:null,state:null,type:null,repository:{name:e.repository.name,owner:{login:e.repository.owner.login}},url:e.url,updatedDate:new Date(e.updatedAt),assignees:e.assignees.nodes?e.assignees.nodes.map(eu):[],upvoteCount:e.reactions.totalCount}},eg=class extends C{constructor(){super(...arguments),this._scopesCache={}}async getScopes(e){let t=e.token||this.config.token;if(!t)return[];let i=this._scopesCache[t];if(!i){let r=(await H(this.config,{query:"query { rateLimit(dryRun: true) { __typename } }"},e)).headers["x-oauth-scopes"];i=r?r.split(", "):[],this._scopesCache[t]=i}return i}getEnterpriseAvatarUrlIfNeeded(e,t,i){let r=i.baseUrl||this.config.baseUrl;return!r||r.startsWith(Q)?e:t?`https://avatars.githubusercontent.com/u/e?email=${encodeURIComponent(t)}`:""}async getCurrentUser(e={}){var t;let i=await this.getScopes(e),r=null==(t=(await H(this.config,{query:`
query getCurrentUser {
  viewer {
    ${K(!1,J(i))}
  }
}
`},e)).body.data)?void 0:t.viewer;if(!r)throw Error("Current user not found.");return{data:eu(r)}}async getUserForCommit(e,t={}){var i,r;let s=null==(i=(await H(this.config,{query:`
query getUserForCommit(
  $owner: String!
  $name: String!
  $oid: GitObjectID!
  $avatarSize: Int
) {
  repository(owner: $owner, name: $name) {
    object(oid: $oid) {
      ... on Commit {
        author {
          name
          email
          avatarUrl(size: $avatarSize)
        }
      }
    }
  }
}
`,variables:{owner:e.repo.namespace,name:e.repo.name,oid:e.oid,avatarSize:e.avatarSize}},t)).body.data)?void 0:i.repository;if(!s)throw Error("Repository not found.");let o=null==(r=s.object)?void 0:r.author;if(!o)throw Error("Commit not found.");return{data:{name:o.name,email:o.email,avatarUrl:this.getEnterpriseAvatarUrlIfNeeded(o.avatarUrl,o.email,t)}}}async getAccountForEmail(e,t={}){var i,r,s;let o=await this.getScopes(t),n=null==(s=null==(r=null==(i=(await H(this.config,{query:`
query getAccountForEmail($query: String! $avatarSize: Int) {
  search(query: $query, type: USER, first: 1) {
    nodes {
      ... on User {
        ${K(!0,J(o))}
      }
    }
  }
}
`,variables:{query:`in:email ${e.email}`,avatarSize:e.avatarSize}},t)).body.data)?void 0:i.search)?void 0:r.nodes)?void 0:s[0];if(!n)throw Error("User not found.");return{data:eu({...n,avatarUrl:this.getEnterpriseAvatarUrlIfNeeded(n.avatarUrl,n.email,t)})}}async getAccountForUsername(e,t={}){var i;let r=await this.getScopes(t),s=null==(i=(await H(this.config,{query:`
query getUserForUsername($login: String! $avatarSize: Int) {
  user(login: $login) {
    ${K(!0,J(r))}
  }
}
`,variables:{login:e.username,avatarSize:e.avatarSize}},t)).body.data)?void 0:i.user;if(!s)throw Error("User not found.");return{data:eu({...s,avatarUrl:this.getEnterpriseAvatarUrlIfNeeded(s.avatarUrl,s.email,t)})}}async getOrgsForCurrentUser(e={},t={}){var i,r;let s=await H(this.config,{query:`
query getOrgsForCurrentUser($cursor: String, $first: Int!) {
  viewer {
    organizations(first: $first after: $cursor) {
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        id
        databaseId
        name
        login
        email
        avatarUrl
      }
    }
  }
}
`,variables:{cursor:e.cursor,first:100}},t);if(!(null!=(i=s.body.data)&&i.viewer.organizations))throw Error((null==(r=s.body.errors)?void 0:r[0].message)||s.statusText||"Unknown error");let o=s.body.data.viewer.organizations.nodes||[];return{pageInfo:s.body.data.viewer.organizations.pageInfo,data:o.map(e=>({id:e.databaseId.toString(),graphQLId:e.id,username:e.login,name:e.name||null,email:e.email||null,avatarUrl:e.avatarUrl}))}}async getRepo(e,t={}){var i;let r=await H(this.config,{query:`
query getRepo($owner: String!, $name: String!) {
  repository(owner: $owner, name: $name) {
    ${eo}
  }
}
`,variables:{owner:e.namespace,name:e.name}},t);if(!(null!=(i=r.body.data)&&i.repository))throw Error(`Repository ${e.namespace}/${e.name} not found`);return{data:eh(r.body.data.repository)}}async getRepos(e,t={}){let i=e.map(({namespace:e,name:t},i)=>`
      getRepo_${i}: repository(owner: "${e}", name: "${t}") {
        ${eo}
      }
    `).join(`
`),r=await H(this.config,{query:`
query batchGetRepos {
  ${i}
}
`},t);if(!r.body.data)throw Error(r.statusText||"Unknown error");let s=[],o=[];return e.forEach((e,t)=>{let i=r.body.data[`getRepo_${t}`];i?s.push(eh(i)):o.push({input:e})}),{data:s,errors:o}}async getReposForUsernames(e,t={}){var i;if(!e.usernames.length)return{pageInfo:{endCursor:null,hasNextPage:!1},data:[]};let r=await H(this.config,{query:`
query getReposForUsernames($query: String!, $cursor: String, $first: Int!) {
  search(query: $query, type: REPOSITORY, first: $first, after: $cursor) {
    pageInfo {
      endCursor
      hasNextPage
    }
    nodes {
      ... on Repository {
        ${eo}
      }
    }
  }
}
`,variables:{query:`fork:true ${e.usernames.map(e=>`user:${e}`).join(" ")}`,cursor:e.cursor,first:100}},t);if(!r.body.data)throw Error((null==(i=r.body.errors)?void 0:i[0].message)||r.statusText||"Unknown error");let s=r.body.data.search.nodes||[];return{pageInfo:r.body.data.search.pageInfo,data:s.map(eh)}}async getReposForOwners(e,t={}){return this.getReposForUsernames({usernames:e.owners.filter(e=>e.username).map(e=>e.username),cursor:e.cursor},t)}async getRefs(e,t,i={}){var r;let s=null==(r=(await H(this.config,{query:`
query getRefs($owner: String!, $name: String!, $refPrefix: String!, $cursor: String, $first: Int!) {
  repository(owner: $owner, name: $name) {
    refs(refPrefix: $refPrefix first: $first after: $cursor) {
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        name
        target {
          ... on Commit {
            oid
            authoredDate
            committedDate
          }
        }
      }
    }
  }
}
`,variables:{owner:t.repo.namespace,name:t.repo.name,refPrefix:e,cursor:t.cursor,first:100}},i)).body.data)?void 0:r.repository;if(!s)throw Error("Repository not found.");let o=s.refs;return o?{pageInfo:o.pageInfo,data:(o.nodes||[]).map(e=>{var t;let i=null!=(t=e.target)&&t.oid?e.target:null;return{name:e.name,commit:i?{oid:i.oid,authoredDate:new Date(i.authoredDate),committedDate:new Date(i.committedDate)}:null}})}:{pageInfo:{endCursor:null,hasNextPage:!1},data:[]}}async getBranches(e,t={}){return this.getRefs("refs/heads/",e,t)}async getTags(e,t={}){return this.getRefs("refs/tags/",e,t)}async getBlame(e,t={}){var i;let r=null==(i=(await H(this.config,{query:`
query getBlame($owner: String!, $name: String!, $ref: String!, $path: String!) {
  repository(owner: $owner, name: $name) {
    object(expression: $ref) {
      ... on Commit {
        blame(path: $path) {
          ranges {
            startingLine
            endingLine
            commit {
              oid
              parents(first:100) {
                nodes {
                  oid
                }
              }
              authoredDate
              committedDate
              message
              author {
                name
                email
                avatarUrl
              }
              committer {
                name
                email
                avatarUrl
              }
              additions
              deletions
              changedFilesIfAvailable
            }
          }
        }
      }
    }
  }
}
`,variables:{owner:e.repo.namespace,name:e.repo.name,ref:e.ref,path:e.path}},t)).body.data)?void 0:i.repository;if(!r)throw Error("Repository not found.");let s=r.object;if(!s||!("blame"in s))throw Error("Ref not found.");if(0===s.blame.ranges.length)throw Error("File not found.");return{data:{ranges:s.blame.ranges.map(e=>{var t;return{startingLine:e.startingLine,endingLine:e.endingLine,commit:{oid:e.commit.oid,parentOids:(null==(t=e.commit.parents.nodes)?void 0:t.map(e=>e.oid))||[],authoredDate:new Date(e.commit.authoredDate),author:e.commit.author?{name:e.commit.author.name,email:e.commit.author.email,avatarUrl:e.commit.author.avatarUrl}:null,committedDate:new Date(e.commit.committedDate),committer:e.commit.committer?{name:e.commit.committer.name,email:e.commit.committer.email,avatarUrl:e.commit.committer.avatarUrl}:null,message:e.commit.message,fileCount:e.commit.changedFilesIfAvailable,additions:e.commit.additions,deletions:e.commit.deletions}}})}}}async searchPullRequests(e,t={}){var i,r;let s=J(await this.getScopes(t)),o=t=>er(t&&"boolean"==typeof e.isDraft?`${e.query} draft:${e.isDraft}`:e.query,e.cursor,t,s),n=await H(this.config,o(!0),t);n.body.errors&&es(n.body.errors)&&(this.config.baseUrl||t.baseUrl)&&(n=await H(this.config,o(!1),t));let{data:a}=n.body;if(!a)throw Error((null==(i=n.body.errors)?void 0:i[0].message)||n.statusText||"Unknown error");return{pageInfo:{hasNextPage:a.search.pageInfo.hasNextPage,endCursor:a.search.pageInfo.endCursor},data:(null==(r=a.search.nodes)?void 0:r.map(ed))||[]}}async getPullRequestsAssociatedWithUser(e,t={}){var i;let[r,s,o]=(null==(i=e.cursor)?void 0:i.split(";"))||[void 0,void 0,void 0];if(e.cursor&&"null"===r&&"null"===s&&"null"===o)return{pageInfo:{hasNextPage:!1,endCursor:"null;null;null"},data:[]};let[n,a,l]=await Promise.all([this.searchPullRequests({query:`author:${e.username}`,cursor:r},t),this.searchPullRequests({query:`assignee:${e.username}`,cursor:s},t),this.searchPullRequests({query:`review-requested:${e.username}`,cursor:o},t)]),h={},c=[],u=e=>{h[e.id]||(h[e.id]=!0,c.push(e))};return n.data.forEach(u),a.data.forEach(u),l.data.forEach(u),{pageInfo:{hasNextPage:n.pageInfo.hasNextPage||a.pageInfo.hasNextPage||l.pageInfo.hasNextPage,endCursor:`${(null==n?void 0:n.pageInfo.hasNextPage)&&(null==n?void 0:n.pageInfo.endCursor)||"null"};${(null==a?void 0:a.pageInfo.hasNextPage)&&(null==a?void 0:a.pageInfo.endCursor)||"null"};${(null==l?void 0:l.pageInfo.hasNextPage)&&(null==l?void 0:l.pageInfo.endCursor)||"null"}`},data:c}}async getPullRequestsForRepos(e,t={}){let{assigneeLogins:i,updatedBefore:r,authorLogin:s,repos:o,reviewRequestedLogin:n,startQuery:a,mentionLogin:l}=e,h=ei(a||"");return o.forEach(e=>{h.push(`repo:${e.namespace}/${e.name}`)}),i&&i.forEach(e=>{h.push(`assignee:${e}`)}),r&&h.push(`updated:<${r}`),s&&h.push(`author:${s}`),n&&h.push(`review-requested:${n}`),l&&h.push(`mentions:${l}`),await this.searchPullRequests({query:`sort:updated ${h.join(" ")}`,isDraft:e.isDraft,cursor:e.cursor},t)}async closePullRequest(e,t={}){var i,r,s;let{pullRequestGraphQLId:o}=e,n=`mutation ClosePullRequest($pullRequestGraphQLId: ID!) {
  closePullRequest(input: { pullRequestId: $pullRequestGraphQLId }) {
    pullRequest {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await H(this.config,{query:`${n}`,variables:{pullRequestGraphQLId:o}},t)).body.data)?void 0:i.closePullRequest)?void 0:r.pullRequest)&&s.id))throw Error("Could not close pull request")}async mergePullRequest(e,t={}){var i,r,s;let{pullRequestGraphQLId:o,expectedSourceSha:n}=e,a=`mutation MergePullRequest($pullRequestGraphQLId: ID!, $expectedSourceSha: GitObjectID!) {
  mergePullRequest(input: { pullRequestId: $pullRequestGraphQLId, expectedHeadOid: $expectedSourceSha }) {
    pullRequest {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await H(this.config,{query:`${a}`,variables:{pullRequestGraphQLId:o,expectedSourceSha:n}},t)).body.data)?void 0:i.mergePullRequest)?void 0:r.pullRequest)&&s.id))throw Error("Could not merge pull request")}async getIssuesForRepos(e,t={}){var i,r,s,o,n,a;let l=J(await this.getScopes(t)),h=ei(e.startQuery||""),{cursor:c,assigneeLogins:u,updatedBefore:d,authorLogin:p,mentionLogin:g}=e;e.repos.forEach(e=>{h.push(`repo:${e.namespace}/${e.name}`)}),u&&u.forEach(e=>{h.push(`assignee:${e}`)}),d&&h.push(`updated:<${d}`),p&&h.push(`author:${p}`),g&&h.push(`mentions:${g}`);let m=`
query (
  $after: String
  $search: String!
) {
  search(
    type: ISSUE
    first: 100
    after: $after
    query: $search
  ) {
    nodes {
      ... on Issue {
        id
        databaseId
        title
        author {
          ... on User {
            ${K(!1,l)}
          }
          ... on Bot {
            ${Z(!1)}
          }
        }
        createdAt
        number
        updatedAt
        url
        reactions(content: THUMBS_UP) {
          totalCount
        }
        repository {
          name
          owner {
            login
          }
        }
        comments {
          totalCount
        }
        assignees(first: 100) {
          nodes {
            ${K(!1,l)}
          }
        }
      }
    }
    pageInfo {
      endCursor
      hasNextPage
    }
  }
}
`,f=await H(this.config,{query:`${m}`,variables:{after:c??null,search:`sort:updated type:issue state:open ${h.join(" ")}`}},t);if(!f.body.data)throw Error(f.statusText||"Unknown error");let w=(null==(s=null==(r=null==(i=f.body)?void 0:i.data)?void 0:r.search)?void 0:s.nodes)||[];return{pageInfo:null==(a=null==(n=null==(o=f.body)?void 0:o.data)?void 0:n.search)?void 0:a.pageInfo,data:w.map(ep)}}async closeIssueWithReason(e,t,i){var r,s,o;let n=`mutation CloseIssueWithReason($issueGraphQLId: ID!, $closeReason: IssueClosedStateReason!) {
  closeIssue(input: { issueId: $issueGraphQLId, stateReason: $closeReason }) {
    issue {
      id
    }
  }
}`;if(!(null!=(o=null==(s=null==(r=(await H(this.config,{query:n,variables:{issueGraphQLId:e,closeReason:t}},i)).body.data)?void 0:r.closeIssue)?void 0:s.issue)&&o.id))throw Error("Could not close issue with reason")}async closeIssueWithoutReason(e,t){var i,r,s;let o=`mutation SetIssueState($issueGraphQLId: ID!) {
  updateIssue(input: { id: $issueGraphQLId, state: CLOSED }) {
    issue {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await H(this.config,{query:o,variables:{issueGraphQLId:e}},t)).body.data)?void 0:i.updateIssue)?void 0:r.issue)&&s.id))throw Error("Could not close issue")}async reopenIssue(e,t){var i,r,s;let o=`mutation ReOpenIssue($issueGraphQLId: ID!) {
  reopenIssue(input: { issueId: $issueGraphQLId }) {
    issue {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await H(this.config,{query:o,variables:{issueGraphQLId:e}},t)).body.data)?void 0:i.reopenIssue)?void 0:r.issue)&&s.id))throw Error("Could not reopen issue")}async setIssueStatus(e,t={}){let{issueGraphQLId:i,status:r,closeReason:s}=e;if(s&&"OPEN"==r)throw Error("Did not expect closeReason to be set when trying to reopen issue");"OPEN"==r?await this.reopenIssue(i,t):"CLOSED"!=r||s?s&&await this.closeIssueWithReason(i,s,t):await this.closeIssueWithoutReason(i,t)}},em=/\/api\/v\d+$/,ef=e=>{if(e.endsWith("/api/graphql"))throw Error("The graphql endpoint is being used as the baseUrl. This package uses both GraphQL and REST APIs, and the REST version cannot be assumed. Use the REST endpoint as the baseUrl instead.")},ew=(e,t)=>{let i=t.baseUrl||e.baseUrl;return i?(ef(i=i.replace(/\/$/,"")),i):"https://gitlab.com/api/v4"},ev=(e,t)=>{let i=t.baseUrl||e.baseUrl;return i?(ef(i=i.replace(/\/$/,"")),em.test(i)&&(i=i.replace(em,"")),`${i}/api/graphql`):"https://gitlab.com/api/graphql"},ey=(e,t,i)=>{let r=A(i.token||e.token);return e.request({url:ev(e,i),method:"POST",headers:{...r,"Content-Type":"application/json"},body:JSON.stringify(t)})},eb={CAN_BE_MERGED:"MERGEABLE",CANNOT_BE_MERGED:"CONFLICTS",CANNOT_BE_MERGED_RECHECK:"UNKNOWN",UNCHECKED:"UNKNOWN",CHECKING:"UNKNOWN"},eC="gid://gitlab/User/",eA="gid://gitlab/Project/",ek=`
id
path
fullPath
webUrl
httpUrlToRepo
sshUrlToRepo
repository {
  rootRef
}
`,eP=`
id
name
username
publicEmail
avatarUrl
`,eS=`
author {
  ${eP}
}
assignees {
  nodes {
    ${eP}
  }
}
createdAt
description
dueDate
id
iid
state
title
type
updatedAt
upvotes
userNotesCount
webUrl
`,eR=`
id
state
author {
  ${eP}
}
diffStatsSummary {
  additions
  deletions
  fileCount
}
commitCount
draft
userNotesCount
upvotes
title
webUrl
createdAt
updatedAt
mergedAt
iid
targetBranch
sourceBranch
assignees {
  nodes {
    ${eP}
  }
}
reviewers {
  nodes {
    ${eP}
    mergeRequestInteraction {
      approved
      reviewState
    }
  }
}
mergeStatusEnum`,eD=e=>`${e.namespace}/${e.name}`,e$=e=>`${e.namespace}/${e.name}`,e_=e=>{var t;return{id:e.id.replace(eA,""),graphQLId:e.id,namespace:e.fullPath.split("/").slice(0,-1).join("/"),name:e.path,webUrl:e.webUrl,httpsUrl:e.httpUrlToRepo,sshUrl:e.sshUrlToRepo,defaultBranch:null!=(t=e.repository)&&t.rootRef?{name:e.repository.rootRef}:null,permission:null}},eI={opened:"OPEN",merged:"MERGED",closed:"CLOSED"},eT=e=>({id:e.id.replace(eC,""),graphQLId:e.id,name:e.name,username:e.username,email:e.publicEmail,avatarUrl:e.avatarUrl}),eF=(e,t)=>{var i,r,s,o,n;return{id:e.id.replace("gid://gitlab/MergeRequest/",""),graphQLId:e.id,title:e.title,number:parseInt(e.iid,10),state:eI[e.state],commentCount:e.userNotesCount||0,upvoteCount:e.upvotes,author:e.author?eT(e.author):null,createdDate:new Date(e.createdAt),isDraft:e.draft,repository:{name:t.name,owner:{login:t.owner}},headRepository:null,headCommit:{buildStatus:null},baseRef:{name:e.targetBranch},headRef:{name:e.sourceBranch},url:e.webUrl,updatedDate:new Date(e.updatedAt),closedDate:e.mergedAt?new Date(e.mergedAt):null,assignees:null!=(i=e.assignees)&&i.nodes?e.assignees.nodes.map(eT):null,reviews:null!=(r=e.reviewers)&&r.nodes?e.reviewers.nodes.map(e=>{var t,i;return{reviewer:eT(e),state:null!=(t=e.mergeRequestInteraction)&&t.approved?"APPROVED":(null==(i=e.mergeRequestInteraction)||i.reviewState,"CHANGES_REQUESTED")}}):null,additions:(null==(s=e.diffStatsSummary)?void 0:s.additions)||0,deletions:(null==(o=e.diffStatsSummary)?void 0:o.deletions)||0,fileCount:(null==(n=e.diffStatsSummary)?void 0:n.fileCount)||0,commitCount:e.commitCount||0,mergeableState:eb[e.mergeStatusEnum]}},eO=(e,t)=>({author:{avatarUrl:e.author.avatarUrl,email:null,graphQLId:e.author.id,id:e.author.id.replace(eC,""),name:e.author.name,username:e.author.username},assignees:e.assignees.nodes.map(e=>({avatarUrl:e.avatarUrl,email:null,graphQLId:e.id,id:e.id.replace(eC,""),name:e.name,username:e.username})),commentCount:e.userNotesCount,createdDate:new Date(e.createdAt),description:e.description,graphQLId:e.id,id:e.id.replace("gid://gitlab/Issue/",""),number:e.iid,repository:{name:t.name,owner:{login:t.owner}},updatedDate:new Date(e.updatedAt),upvoteCount:e.upvotes,state:e.state,type:e.type,title:e.title,url:e.webUrl}),ex=class extends C{async getCurrentUser(e={}){var t;let i=null==(t=(await ey(this.config,{query:`
query getCurrentUser {
  currentUser {
    ${eP}
  }
}
`},e)).body.data)?void 0:t.currentUser;if(!i)throw Error("Current user not found.");return{data:eT(i)}}async getUserForCommit(e,t={}){var i,r,s,o;let n=eD(e.repo),a=null==(o=null==(s=null==(r=null==(i=(await ey(this.config,{query:`
query getUserForCommit($fullPath: ID!, $oid: String!) {
  project(fullPath: $fullPath) {
    repository {
      tree(ref: $oid) {
        lastCommit {
          authorName
          authorEmail
          authorGravatar
        }
      }
    }
  }
}
`,variables:{fullPath:n,oid:e.oid}},t)).body.data)?void 0:i.project)?void 0:r.repository)?void 0:s.tree)?void 0:o.lastCommit;if(!a)throw Error("Commit not found.");return{data:{name:a.authorName,email:a.authorEmail,avatarUrl:a.authorGravatar}}}async getAccountForEmail(e,t={}){var i,r,s;let o=null==(s=null==(r=null==(i=(await ey(this.config,{query:`
query getAccountForEmail($email: String!) {
  users(search: $email) {
    nodes {
      ${eP}
    }
  }
}
`,variables:{email:e.email}},t)).body.data)?void 0:i.users)?void 0:r.nodes)?void 0:s[0];if(!o)throw Error("User not found.");return{data:eT(o)}}async getAccountForUsername(e,t={}){var i;let r=null==(i=(await ey(this.config,{query:`
query getAccountForUsername($username: String!) {
  user(username: $username) {
    ${eP}
  }
}
`,variables:{username:e.username}},t)).body.data)?void 0:i.user;if(!r)throw Error("User not found.");return{data:eT(r)}}async getRepo(e,t={}){var i;let r=eD(e),s=await ey(this.config,{query:`
query getRepo($fullPath: ID!) {
  project(fullPath: $fullPath) {
    ${ek}
  }
}
`,variables:{fullPath:r}},t);if(!(null!=(i=s.body.data)&&i.project))throw Error(`Repository ${r} not found`);return{data:e_(s.body.data.project)}}async getRepos(e,t={}){let i=e.map(eD).map((e,t)=>`
      getRepo_${t}: project(fullPath: "${e}") {
        ${ek}
      }
    `).join(`
`),r=await ey(this.config,{query:`
query batchGetRepos {
  ${i}
}
`},t);if(!r.body.data)throw Error(r.statusText||"Unknown error");let s=[],o=[];return e.forEach((e,t)=>{let i=r.body.data[`getRepo_${t}`];i?s.push(e_(i)):o.push({input:e})}),{data:s,errors:o}}async getReposForCurrentUser(e={},t={}){var i,r,s,o,n,a;let l=await ey(this.config,{query:`
query getReposForCurrentUser($after: String) {
  projects(membership: true first: 100 after: $after) {
    pageInfo {
      endCursor
      hasNextPage
    }
    nodes {
      ${ek}
    }
  }
}
`,variables:{after:e.cursor}},t);if(!(null!=(i=l.body.data)&&i.projects))throw Error((null==(r=l.body.errors)?void 0:r[0].message)||l.statusText||"Unknown error");let h=(null==(o=null==(s=l.body.data)?void 0:s.projects)?void 0:o.nodes)||[];return{pageInfo:null==(a=null==(n=l.body.data)?void 0:n.projects)?void 0:a.pageInfo,data:h.map(e_)}}async getRefs(e,t,i={}){var r;let s=eD(t.repo),o=new URL(`${ew(this.config,i)}/projects/${encodeURIComponent(s)}/repository/${e}`);o.searchParams.set("page",(null==(r=t.page)?void 0:r.toString())||"1"),o.searchParams.set("per_page","100");let n=await this.config.request({url:o.toString(),headers:A(i.token||this.config.token)}),a=n.headers["x-next-page"];return{pageInfo:{hasNextPage:!!a,nextPage:a?parseInt(a,10):null},data:n.body.map(e=>({name:e.name,commit:{oid:e.commit.id,authoredDate:new Date(e.commit.authored_date),committedDate:new Date(e.commit.committed_date)}}))}}async getBranches(e,t={}){return this.getRefs("branches",e,t)}async getTags(e,t={}){return this.getRefs("tags",e,t)}async getBlame(e,t={}){let i=eD(e.repo),r=new URL(`${ew(this.config,t)}/projects/${encodeURIComponent(i)}/repository/files/${encodeURIComponent(e.path)}/blame`);r.searchParams.set("ref",e.ref);let s=await this.config.request({url:r.toString(),headers:A(t.token||this.config.token)}),o=0;return{data:{ranges:s.body.map(e=>({startingLine:o+1,endingLine:o+=e.lines.length,commit:{oid:e.commit.id,parentOids:e.commit.parent_ids,authoredDate:new Date(e.commit.authored_date),author:{name:e.commit.author_name,email:e.commit.author_email,avatarUrl:null},committedDate:new Date(e.commit.committed_date),committer:{name:e.commit.committer_name,email:e.commit.committer_email,avatarUrl:null},message:e.commit.message,fileCount:null,additions:null,deletions:null}}))}}}getVariablesForPullRequests(e){let{updatedBefore:t,isDraft:i,authorLogin:r,assigneeLogins:s,reviewRequestedLogin:o}=e||{},n={},a=[],l=[],h=(e,t,i)=>{a.push(`$${e}: ${i}`),l.push(`${e}: $${e}`),n[e]=t};return t&&h("updatedBefore",t,"Time"),r&&h("authorUsername",r,"String"),s&&h("assigneeUsername",s[0],"String"),null!=i&&h("draft",i,"Boolean"),o&&h("reviewerUsername",o,"String"),{variables:n,variableTypes:a,mergeRequestArguments:l}}async getPullRequestsForRepo(e,t={}){var i,r,s;let{cursor:o,repo:n}=e||{},a=eD(n),{variables:l,variableTypes:h,mergeRequestArguments:c}=this.getVariablesForPullRequests(e),u={fullPath:a,...l},d=await ey(this.config,{query:`
query getPullRequestsForRepo(
  $fullPath: ID!
  $after: String
  ${h.length?h.join(" "):""}
) {
  project(
    fullPath: $fullPath
  ) {
    name
    fullPath
    mergeRequests(
      first: 100
      state: opened
      sort: UPDATED_DESC
      after: $after
      ${c.length?c.join(" "):""}
    ) {
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        ${eR}
      }
    }
  }
}
`,variables:{...u,after:o}},t),p=[],g=null==(i=d.body.data)?void 0:i.project,m={name:(null==g?void 0:g.name)||"",owner:((null==g?void 0:g.fullPath)||"").split("/").slice(0,-1).join("/")};return((null==(r=null==g?void 0:g.mergeRequests)?void 0:r.nodes)||[]).forEach(e=>{p.push(eF(e,m))}),{pageInfo:null==(s=null==g?void 0:g.mergeRequests)?void 0:s.pageInfo,data:p}}async getPullRequestsForRepos(e,t={}){var i,r,s,o,n;let{cursor:a}=e||{},l=e.repoIds.map(e=>e.toString().startsWith(eA)?e:`${eA}${e}`),{variables:h,variableTypes:c,mergeRequestArguments:u}=this.getVariablesForPullRequests(e),d={projectIds:l,...h},p=await ey(this.config,{query:`
query getPullRequests(
  $projectIds: [ID!]
  $after: String
  ${c.length?c.join(" "):""}
) {
  projects(
    ids: $projectIds
    after: $after
  ) {
    pageInfo {
      endCursor
      hasNextPage
    }
    nodes {
      name
      fullPath
      mergeRequests(
        first: 100
        state: opened
        sort: UPDATED_DESC
        ${u.length?u.join(" "):""}
      ) {
        nodes {
          ${eR}
        }
      }
    }
  }
}
`,variables:{...d,after:a}},t),g=[];return((null==(r=null==(i=p.body.data)?void 0:i.projects)?void 0:r.nodes)||[]).forEach(e=>{var t;let i={name:e.name,owner:e.fullPath.split("/").slice(0,-1).join("/")};((null==(t=e.mergeRequests)?void 0:t.nodes)||[]).forEach(e=>{g.push(eF(e,i))})}),{pageInfo:null==(n=null==(o=null==(s=p.body)?void 0:s.data)?void 0:o.projects)?void 0:n.pageInfo,data:g}}async closePullRequest(e,t={}){var i,r,s;let{repo:{namespace:o,name:n},pullRequestId:a}=e,l=`mutation ClosePullRequest($fullPath: ID!, $pullRequestId: String!) {
	mergeRequestUpdate(input: { projectPath: $fullPath, iid: $pullRequestId, state: CLOSED }) {
    errors,
		mergeRequest {
      id
    }
	}
}`,h=null==(i=(await ey(this.config,{query:l,variables:{fullPath:`${o}/${n}`,pullRequestId:a}},t)).body.data)?void 0:i.mergeRequestUpdate;if(!(null!=(r=null==h?void 0:h.mergeRequest)&&r.id)||(null==(s=null==h?void 0:h.errors)?void 0:s.length)!==0)throw Error("Could not close pull request")}async mergePullRequest(e,t={}){var i,r,s;let{repo:{namespace:o,name:n},pullRequestId:a,expectedSourceSha:l}=e,h=`mutation MergePullRequest($fullPath: ID!, $pullRequestId: String!, $expectedSourceSha: String!) {
	mergeRequestAccept(input: { projectPath: $fullPath, iid: $pullRequestId, sha: $expectedSourceSha }) {
    errors,
		mergeRequest {
      id
    }
	}
}`,c=null==(i=(await ey(this.config,{query:h,variables:{fullPath:`${o}/${n}`,pullRequestId:a,expectedSourceSha:l}},t)).body.data)?void 0:i.mergeRequestAccept;if(!(null!=(r=null==c?void 0:c.mergeRequest)&&r.id)||(null==(s=null==c?void 0:c.errors)?void 0:s.length)!==0)throw Error("Could not merge pull request")}async getIssue(e,t={}){var i,r,s,o,n,a,l;let h=e$(e),c=await ey(this.config,{query:`
query GetSingleIssue($projectId: ID!, $issueId: String!) {
  project(fullPath: $projectId) {
    name
    fullPath
    issue(iid: $issueId) {
      ${eS}
    }
  }
}
`,variables:{issueId:e.id,projectId:h}},t);if(!(null!=(i=c.body.data)&&i.project))throw Error(`Repository ${h} not found`);if(!(null!=(s=null==(r=c.body.data)?void 0:r.project)&&s.issue))throw Error(`Issue ${e.id} not found`);return{data:eO(null==(n=null==(o=c.body.data)?void 0:o.project)?void 0:n.issue,{name:null==(a=c.body.data)?void 0:a.project.name,owner:null==(l=c.body.data)?void 0:l.project.fullPath.split("/").slice(0,-1).join("/")})}}getVariablesForIssues(e){let{updatedBefore:t,authorLogin:i,assigneeLogins:r}=e||{},s={},o=[],n=[],a=(e,t,i)=>{o.push(`$${e}: ${i}`),n.push(`${e}: $${e}`),s[e]=t};return t&&a("updatedBefore",t,"Time"),i&&a("authorUsername",i,"String"),r&&a("assigneeUsername",r[0],"String"),{variables:s,variableTypes:o,issueArguments:n}}async getIssuesForRepo(e,t={}){var i,r,s;let{cursor:o,repo:n}=e||{},a=eD(n),{variables:l,variableTypes:h,issueArguments:c}=this.getVariablesForIssues(e),u={fullPath:a,...l},d=`
      query GetIssuesFromProject(
        $fullPath: ID!
        $after: String
        ${h.length?h.join(" "):""}
      ) {
        project(
          fullPath: $fullPath
        ) {
          name
          fullPath
          issues(
            first: 100
            state: opened
            sort: UPDATED_DESC
            after: $after
            ${c.length?c.join(" "):""}
          ) {
            nodes {
              ${eS}
            }
            pageInfo {
              endCursor
              hasNextPage
            }
          }
        }
      }`,p=await ey(this.config,{query:d,variables:{...u,after:o}},t),g=[],m=null==(i=p.body.data)?void 0:i.project,f={name:(null==m?void 0:m.name)||"",owner:((null==m?void 0:m.fullPath)||"").split("/").slice(0,-1).join("/")};return((null==(r=null==m?void 0:m.issues)?void 0:r.nodes)||[]).forEach(e=>{g.push(eO(e,f))}),{pageInfo:null==(s=null==m?void 0:m.issues)?void 0:s.pageInfo,data:g.sort((e,t)=>(e.updatedDate||e.createdDate).getTime()-(t.updatedDate||t.createdDate).getTime())}}async getIssuesForRepos(e,t={}){var i,r,s,o,n;let{cursor:a}=e||{},l=e.repoIds.map(e=>e.toString().startsWith(eA)?e:`${eA}${e}`),{variables:h,variableTypes:c,mergeRequestArguments:u}=this.getVariablesForPullRequests(e),d={projectIds:l,...h},p=`
      query GetIssuesFromProject(
        $projectIds: [ID!]
        $after: String
        ${c.length?c.join(" "):""}
        ) {
        projects(
          ids: $projectIds
          after: $after
        ) {
          pageInfo {
            endCursor
            hasNextPage
          }
          nodes {
            name
            fullPath
            issues(
              first: 100
              state: opened
              sort: UPDATED_DESC
              ${u.length?u.join(" "):""}
            ) {
              nodes {
                ${eS}
              }
            }
          }
        }
      }`,g=await ey(this.config,{query:p,variables:{...d,after:a}},t),m=[];return((null==(r=null==(i=g.body.data)?void 0:i.projects)?void 0:r.nodes)||[]).forEach(e=>{var t;let i={name:e.name,owner:e.fullPath.split("/").slice(0,-1).join("/")};((null==(t=e.issues)?void 0:t.nodes)||[]).forEach(e=>m.push(eO(e,i)))}),{pageInfo:null==(n=null==(o=null==(s=g.body)?void 0:s.data)?void 0:o.projects)?void 0:n.pageInfo,data:m.sort((e,t)=>(e.updatedDate||e.createdDate).getTime()-(t.updatedDate||t.createdDate).getTime())}}async setIssueStatus(e,t={}){var i,r,s;let{repo:{namespace:o,name:n},issueId:a,status:l}=e,h=`mutation SetIssueState($fullPath: ID!, $issueId: String!, $status: IssueStateEvent!) {
	updateIssue(input: { projectPath: $fullPath, iid: $issueId, stateEvent: $status }) {
    issue {
      id
    }
	}
}`;if(!(null!=(s=null==(r=null==(i=(await ey(this.config,{query:h,variables:{fullPath:`${o}/${n}`,issueId:a,status:l}},t)).body.data)?void 0:i.updateIssue)?void 0:r.issue)&&s.id))throw Error("Could not set issue status")}},eE="https://api.atlassian.com/ex/jira",eB=e=>{var t;let i=e.fields.assignee;return{id:e.id,commentCount:e.fields.comment.comments.length,number:e.key,title:e.fields.summary,url:e.self,createdDate:new Date(e.fields.created),author:{id:e.fields.creator.accountId,name:e.fields.creator.displayName,email:e.fields.creator.emailAddress,avatarUrl:e.fields.creator.avatarUrls["32x32"],username:e.fields.creator.displayName},updatedDate:new Date(e.fields.updated),assignees:i?[{id:i.accountId,name:i.displayName,email:i.emailAddress,avatarUrl:i.avatarUrls["32x32"],username:i.displayName}]:[],description:null,repository:null,state:null,type:e.fields.issuetype.name,upvoteCount:(null==(t=e.fields.votes)?void 0:t.votes)||0}},eU=class extends b{async getJiraResourcesForCurrentUser(e={}){return{data:(await this.config.request({url:`${e.baseUrl||"https://api.atlassian.com/"}/oauth/token/accessible-resources`,headers:A(e.token||this.config.token)})).body.map(e=>({avatarUrl:e.avatarUrl,id:e.id,name:e.name}))}}async getJiraProjectsForResource(e,t={}){let i=new URL(`${t.baseUrl||eE}/${e.resourceId}/rest/api/2/project/search`);i.searchParams.set("maxResults","100"),e.cursor&&i.searchParams.set("startAt",e.cursor);let r=await this.config.request({url:i.toString(),headers:A(t.token||this.config.token)});return{pageInfo:{hasNextPage:0!==r.body.values.length,endCursor:(r.body.startAt+r.body.values.length).toString()},data:r.body.values.map(t=>({name:t.name,resourceId:e.resourceId}))}}async getJiraProjectsForResources(e,t={}){let i=[];return await Promise.all(e.resourceIds.map(async e=>{let r=await this.getJiraProjectsForResource({resourceId:e},t);i.push(...r.data)})),{data:i}}async getIssuesForProject(e,t={}){let{assigneeLogins:i,authorLogin:r,mentionLogin:s,project:o}=e||{},n=[`project = "${o}"`];return r&&n.push(`creator in (${r})`),i&&n.push(`assignee in (${i.join(", ")})`),s&&n.push(`comment ~ ${s}`),{data:(await this.config.request({url:`${t.baseUrl||eE}/${e.resourceId}/rest/api/2/search?jql=${n.join(" AND ")}&startAt=0&maxResults=100&fields=assignee,comment,summary,created,creator,updated,votes,issuetype`,headers:A(t.token||this.config.token)})).body.issues.map(eB)}}async setIssueStatus(e,t={}){let{resourceId:i,issueId:r,status:s}=e;try{await this.config.request({method:"POST",url:`${t.baseUrl||eE}/${i}/rest/api/2/issue/${r}/transitions`,body:JSON.stringify({transition:{id:s}}),headers:{...A(t.token||this.config.token),"Content-Type":"application/json"}})}catch(e){if("Unexpected end of JSON input"==e.message)return;throw Error("Could not set issue status")}}},eW="https://api.trello.com",eN=e=>{let t=new Date(1e3*parseInt(e.id.substring(0,8),16));return{id:e.id,commentCount:e.badges.comments,number:e.idShort.toString(),title:e.name,url:e.url,createdDate:new Date(t.toISOString()),author:null,updatedDate:new Date(e.dateLastActivity),assignees:e.idMembers.map(e=>({id:e,username:null,name:null,email:null,avatarUrl:null})),description:null,state:null,type:null,repository:null,upvoteCount:e.badges.votes}},eq=class extends b{async getBoardsForCurrentUser(e,t={}){return{data:(await this.config.request({url:`${t.baseUrl||eW}/1/members/me/boards?fields=name&key=${e.appKey}&token=${t.token||this.config.token}&filter=open`,headers:A(t.token||this.config.token)})).body.map(e=>({id:e.id,name:e.name}))}}async getIssuesForBoard(e,t={}){let i=["-is:archived","sort:edited"],{appKey:r,boardId:s,filterText:o,assigneeLogins:n}=e||{};n&&i.push("@me");let a=`${o?`${o}`:""}${i.join(" ")} board:${s}`;return{data:(await this.config.request({url:`${t.baseUrl||eW}/1/search?key=${r}&query=${a}&cards_limit=1000&token=${t.token||this.config.token}`,headers:A(t.token||this.config.token)})).body.cards.map(eN)}}async setIssueStatus(e,t={}){let{appKey:i,cardId:r,status:s}=e;if(!(await this.config.request({method:"PUT",url:`${t.baseUrl||eW}/1/cards/${r}?key=${i}&token=${t.token||this.config.token}&idList=${s}`,headers:A(t.token||this.config.token)})).body.id)throw Error("Could not set issue status")}},eL={};d(eL,{getIssueUniqueId:()=>eM,getPullRequestUniqueId:()=>eQ});var eM=(e,t,i,r="")=>{let s=[];return s.push(r),s.push(e),s.push(t),s.push(i),JSON.stringify(s)},eQ=(e,t,i,r,s="")=>{let o=[];return o.push(s),o.push(e),o.push(t),o.push(i),o.push(r),JSON.stringify(o)},eG={};d(eG,{getIssueUniqueId:()=>eY,getPullRequestUniqueId:()=>eV});var eY=(e,t)=>JSON.stringify(["",e,t]),eV=(e,t)=>JSON.stringify(["",e,t]),ez={};d(ez,{getIssueUniqueId:()=>eH,getPullRequestUniqueId:()=>ej});var eH=(e,t,i)=>JSON.stringify([i,e,t]),ej=(e,t,i)=>JSON.stringify([i,e,t]),eJ={};d(eJ,{getIssueUniqueId:()=>eK,getPullRequestRank:()=>eX,getPullRequestUniqueId:()=>eZ});var eK=(e,t="")=>{let i=[];return i.push(t),i.push(e),JSON.stringify(i)},eZ=(e,t="")=>{let i=[];return i.push(t),i.push(e),JSON.stringify(i)},eX=(e,t,i)=>{var r,s,o;let n=0,a,l;return null==(r=e.reviews)||r.forEach(e=>{e.reviewer.id===t&&(a=e.state),"CHANGES_REQUESTED"===e.state?l="CHANGES_REQUESTED":"APPROVED"===e.state&&"CHANGES_REQUESTED"!==l&&(l="APPROVED")}),l||(l="REVIEW_REQUESTED"),(null==(s=e.author)?void 0:s.id)===t?n+=1e3:null!=(o=e.assignees)&&o.find(e=>e.id===t)?n+=900:"REVIEW_REQUESTED"===a?n+=800:i&&(n+=700),"APPROVED"===l?"MERGEABLE"===e.mergeableState?n+=100:"CONFLICTS"===e.mergeableState?n+=90:n+=80:"CHANGES_REQUESTED"==l&&(n+=70),n},e0={};d(e0,{getIssueUniqueId:()=>e1,getPullRequestUniqueId:()=>e2});var e1=(e,t="")=>{let i=[];return i.push(t),i.push(e),JSON.stringify(i)},e2=(e,t="")=>{let i=[];return i.push(t),i.push(e),JSON.stringify(i)},e4={};d(e4,{getIssueUniqueId:()=>e6,getJiraServerIssueUniqueId:()=>e3});var e6=(e,t,i)=>{let r=[];return r.push(""),r.push(e),r.push(t),r.push(i),JSON.stringify(r)},e3=(e,t,i)=>{let r=[];return r.push(i),r.push(""),r.push(e),r.push(t),JSON.stringify(r)},e8={};d(e8,{getIssueUniqueId:()=>e7});var e7=(e,t,i,r="")=>{let s=[];return s.push(r),s.push(e),s.push(t),s.push(i),JSON.stringify(s)},e5=e=>{let t={request:null==e?void 0:e.request};return{azureDevOps:new x({...t,...null==e?void 0:e.azureDevOps}),bitbucket:new L({...t,...null==e?void 0:e.bitbucket}),bitbucketServer:new M({...t,...null==e?void 0:e.bitbucketServer}),github:new eg({...t,...null==e?void 0:e.github}),gitlab:new ex({...t,...null==e?void 0:e.gitlab}),jira:new eU({...t,...null==e?void 0:e.jira}),trello:new eq({...t,...null==e?void 0:e.trello})}},e9={azureDevOps:eL,bitbucket:eG,bitbucketServer:ez,github:eJ,gitlab:e0,jira:e4,trello:e8}},6887:function(e,t,i){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};let s=i(467),o=r(i(3711)),n=r(i(3660)),a=o.default("agent-base");function l(){let{stack:e}=Error();return"string"==typeof e&&e.split("\n").some(e=>-1!==e.indexOf("(https.js:")||-1!==e.indexOf("node:https:"))}function h(e,t){return new h.Agent(e,t)}!function(e){let Agent=class Agent extends s.EventEmitter{constructor(e,t){super();let i=t;"function"==typeof e?this.callback=e:e&&(i=e),this.timeout=null,i&&"number"==typeof i.timeout&&(this.timeout=i.timeout),this.maxFreeSockets=1,this.maxSockets=1,this.maxTotalSockets=1/0,this.sockets={},this.freeSockets={},this.requests={},this.options={}}get defaultPort(){return"number"==typeof this.explicitDefaultPort?this.explicitDefaultPort:l()?443:80}set defaultPort(e){this.explicitDefaultPort=e}get protocol(){return"string"==typeof this.explicitProtocol?this.explicitProtocol:l()?"https:":"http:"}set protocol(e){this.explicitProtocol=e}callback(e,t,i){throw Error('"agent-base" has no default implementation, you must subclass and override `callback()`')}addRequest(e,t){let i=Object.assign({},t);"boolean"!=typeof i.secureEndpoint&&(i.secureEndpoint=l()),null==i.host&&(i.host="localhost"),null==i.port&&(i.port=i.secureEndpoint?443:80),null==i.protocol&&(i.protocol=i.secureEndpoint?"https:":"http:"),i.host&&i.path&&delete i.path,delete i.agent,delete i.hostname,delete i._defaultAgent,delete i.defaultPort,delete i.createConnection,e._last=!0,e.shouldKeepAlive=!1;let r=!1,s=null,o=i.timeout||this.timeout,h=t=>{e._hadError||(e.emit("error",t),e._hadError=!0)},c=e=>{r||(null!==s&&(clearTimeout(s),s=null),h(e))};if("function"!=typeof this.callback){h(Error("`callback` is not defined"));return}this.promisifiedCallback||(this.callback.length>=3?(a("Converting legacy callback function to promise"),this.promisifiedCallback=n.default(this.callback)):this.promisifiedCallback=this.callback),"number"==typeof o&&o>0&&(s=setTimeout(()=>{s=null,r=!0;let e=Error(`A "socket" was not created for HTTP request before ${o}ms`);e.code="ETIMEOUT",h(e)},o)),"port"in i&&"number"!=typeof i.port&&(i.port=Number(i.port));try{a("Resolving socket for %o request: %o",i.protocol,`${e.method} ${e.path}`),Promise.resolve(this.promisifiedCallback(e,i)).then(t=>{if(!r){if(null!=s&&(clearTimeout(s),s=null),t&&"function"==typeof t.addRequest){a("Callback returned another Agent instance %o",t.constructor.name),t.addRequest(e,i);return}if(t){t.once("free",()=>{this.freeSocket(t,i)}),e.onSocket(t);return}h(Error(`no Duplex stream was returned to agent-base for \`${e.method} ${e.path}\``))}},c)}catch(e){Promise.reject(e).catch(c)}}freeSocket(e,t){a("Freeing socket %o %o",e.constructor.name,t),e.destroy()}destroy(){a("Destroying agent %o",this.constructor.name)}};e.Agent=Agent,e.prototype=e.Agent.prototype}(h||(h={})),e.exports=h},3660:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(t,i){return new Promise((r,s)=>{e.call(this,t,i,(e,t)=>{e?s(e):r(t)})})}}},1016:(e,t,i)=>{i.d(t,{u:()=>s});var r=i(1608);function s(e){if(e.scheme===r.cl.Git)try{return JSON.parse(e.query)}catch{}}},9084:(e,t,i)=>{i.d(t,{E:()=>n,k:()=>AnnotationProviderBase});var r=i(7304),s=i(3664),o=i(6448);function n(e){return`${e?.document.uri.toString()}|${e?.viewColumn}`}let AnnotationProviderBase=class AnnotationProviderBase{constructor(e,t,i,s){this.container=e,this.annotationType=t,this.trackedDocument=s,this.editor=i,this.disposable=r.Disposable.from(r.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this))}decorations;disposable;dispose(){this.clear(),this.disposable.dispose()}_annotationContext;get annotationContext(){return this._annotationContext}set annotationContext(e){this._annotationContext=e}_correlationKey;get correlationKey(){return this._correlationKey}_editor;get editor(){return this._editor}set editor(e){this._editor=e,this._correlationKey=n(e)}_status;get status(){return this._status}get statusContextValue(){return null!=this.status?`${this.status}+${this.annotationType}`:void 0}async setStatus(e,t){this.status!==e&&(this._status=e,null!=t&&t===r.window.activeTextEditor&&await (0,s.Qr)("gitlens:annotationStatus",this.statusContextValue))}onTextEditorSelectionChanged(e){this.editor.document===e.textEditor.document&&this.selection?.({line:e.selections[0].active.line})}canReuse(e){return!0}clear(){let e=this.decorations;if(this.decorations=void 0,this.annotationContext=void 0,this.setStatus(void 0,this.editor),null!=this.editor&&e?.length)for(let t of e)try{this.editor.setDecorations(t.decorationType,[]),t.dispose&&t.decorationType.dispose()}catch{}}async provideAnnotation(e,t){this.setStatus("computing",this.editor);try{if(this.annotationContext=e,await this.onProvideAnnotation(e,t))return this.setStatus("computed",this.editor),await this.selection?.(t?.restoring?{line:this.editor.selection.active.line}:e?.selection),!0}catch(e){o.YJ.error(e)}return this.setStatus(void 0,this.editor),!1}refresh(e){if(null==this.editor||!this.decorations?.length)return;let t=[];for(let i of this.decorations){let r=e.get(i.decorationType);null!==r&&(null!=r&&(i.decorationType=r),t.push(i))}this.setDecorations(this.decorations)}restore(e,t){if(!1!==this.editor._disposed){if(this.editor=e,t||null==this.decorations){this.provideAnnotation(this.annotationContext,{recompute:!0,restoring:!0});return}if(this.setStatus("computing",this.editor),this.decorations?.length)for(let e of this.decorations)this.editor.setDecorations(e.decorationType,e.rangesOrOptions);this.setStatus("computed",this.editor)}}setDecorations(e){if(this.decorations?.length){if(!e?.length){this.clear();return}for(let t of this.decorations.filter(t=>!e.some(e=>e.decorationType.key===t.decorationType.key)))try{this.editor.setDecorations(t.decorationType,[]),t.dispose&&t.decorationType.dispose()}catch{}}if(this.decorations=e,e?.length)for(let t of e)this.editor.setDecorations(t.decorationType,t.rangesOrOptions)}}},9640:(e,t,i)=>{let r;i.d(t,{CV:()=>v,qe:()=>w,We:()=>y,gR:()=>b,OK:()=>f,a0:()=>C});var s=i(7304),o=i(1608),n=i(204);function a(e,t){let i=Math.pow(10,t);return Math.round(e*i)/i}let RGBA=class RGBA{_rgbaBrand=void 0;r;g;b;a;constructor(e,t,i,r=1){this.r=0|Math.min(255,Math.max(0,e)),this.g=0|Math.min(255,Math.max(0,t)),this.b=0|Math.min(255,Math.max(0,i)),this.a=a(Math.max(Math.min(1,r),0),3)}static equals(e,t){return e.r===t.r&&e.g===t.g&&e.b===t.b&&e.a===t.a}};let HSLA=class HSLA{_hslaBrand=void 0;h;s;l;a;constructor(e,t,i,r){this.h=0|Math.max(Math.min(360,e),0),this.s=a(Math.max(Math.min(1,t),0),3),this.l=a(Math.max(Math.min(1,i),0),3),this.a=a(Math.max(Math.min(1,r),0),3)}static equals(e,t){return e.h===t.h&&e.s===t.s&&e.l===t.l&&e.a===t.a}static fromRGBA(e){let t=e.r/255,i=e.g/255,r=e.b/255,s=e.a,o=Math.max(t,i,r),n=Math.min(t,i,r),a=0,l=0,h=(n+o)/2,c=o-n;if(c>0){switch(l=Math.min(h<=.5?c/(2*h):c/(2-2*h),1),o){case t:a=(i-r)/c+(i<r?6:0);break;case i:a=(r-t)/c+2;break;case r:a=(t-i)/c+4}a*=60,a=Math.round(a)}return new HSLA(a,l,h,s)}static _hue2rgb(e,t,i){return(i<0&&(i+=1),i>1&&(i-=1),i<1/6)?e+(t-e)*6*i:i<.5?t:i<2/3?e+(t-e)*(2/3-i)*6:e}static toRGBA(e){let t,i,r;let s=e.h/360,{s:o,l:n,a}=e;if(0===o)t=i=r=n;else{let e=n<.5?n*(1+o):n+o-n*o,a=2*n-e;t=HSLA._hue2rgb(a,e,s+1/3),i=HSLA._hue2rgb(a,e,s),r=HSLA._hue2rgb(a,e,s-1/3)}return new RGBA(Math.round(255*t),Math.round(255*i),Math.round(255*r),a)}};let HSVA=class HSVA{_hsvaBrand=void 0;h;s;v;a;constructor(e,t,i,r){this.h=0|Math.max(Math.min(360,e),0),this.s=a(Math.max(Math.min(1,t),0),3),this.v=a(Math.max(Math.min(1,i),0),3),this.a=a(Math.max(Math.min(1,r),0),3)}static equals(e,t){return e.h===t.h&&e.s===t.s&&e.v===t.v&&e.a===t.a}static fromRGBA(e){let t=e.r/255,i=e.g/255,r=e.b/255,s=Math.max(t,i,r),o=s-Math.min(t,i,r);return new HSVA(Math.round(60*(0===o?0:s===t?((i-r)/o%6+6)%6:s===i?(r-t)/o+2:(t-i)/o+4)),0===s?0:o/s,s,e.a)}static toRGBA(e){let{h:t,s:i,v:r,a:s}=e,o=r*i,n=o*(1-Math.abs(t/60%2-1)),a=r-o,[l,h,c]=[0,0,0];return t<60?(l=o,h=n):t<120?(l=n,h=o):t<180?(h=o,c=n):t<240?(h=n,c=o):t<300?(l=n,c=o):t<=360&&(l=o,c=n),new RGBA(l=Math.round((l+a)*255),h=Math.round((h+a)*255),c=Math.round((c+a)*255),s)}};let Color=class Color{static from(e){return e instanceof Color?e:c(e)||Color.red}static fromCssVariable(e,t){return c(t.getPropertyValue(e).trim())||Color.red}static fromHex(e){return u(e)||Color.red}static equals(e,t){return!e&&!t||!!e&&!!t&&e.equals(t)}rgba;_hsla;get hsla(){return this._hsla?this._hsla:HSLA.fromRGBA(this.rgba)}_hsva;get hsva(){return this._hsva?this._hsva:HSVA.fromRGBA(this.rgba)}constructor(e){if(e){if(e instanceof RGBA)this.rgba=e;else if(e instanceof HSLA)this._hsla=e,this.rgba=HSLA.toRGBA(e);else if(e instanceof HSVA)this._hsva=e,this.rgba=HSVA.toRGBA(e);else throw Error("Invalid color ctor argument")}else throw Error("Color needs a value")}equals(e){return null!=e&&!!e&&RGBA.equals(this.rgba,e.rgba)&&HSLA.equals(this.hsla,e.hsla)&&HSVA.equals(this.hsva,e.hsva)}getRelativeLuminance(){let e=Color._relativeLuminanceForComponent(this.rgba.r);return a(.2126*e+.7152*Color._relativeLuminanceForComponent(this.rgba.g)+.0722*Color._relativeLuminanceForComponent(this.rgba.b),4)}static _relativeLuminanceForComponent(e){let t=e/255;return t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4)}luminance(e){return function(e,t){if(0===t)return new Color(new RGBA(0,0,0,e.rgba.a));if(1===t)return new Color(new RGBA(255,255,255,e.rgba.a));let i=e.getRelativeLuminance(),r=20,s=(e,i)=>{let o=e.mix(i,.5),n=o.getRelativeLuminance();return!(1e-7>Math.abs(t-n))&&r--?n>t?s(e,o):s(o,i):o},o=(i>t?s(Color.black,e):s(e,Color.white)).rgba;return new Color(new RGBA(o.r,o.g,o.b,e.rgba.a))}(this,e)}getContrastRatio(e){let t=this.getRelativeLuminance(),i=e.getRelativeLuminance();return t>i?(t+.05)/(i+.05):(i+.05)/(t+.05)}isDarker(){return(299*this.rgba.r+587*this.rgba.g+114*this.rgba.b)/1e3<128}isLighter(){return(299*this.rgba.r+587*this.rgba.g+114*this.rgba.b)/1e3>=128}isLighterThan(e){return this.getRelativeLuminance()>e.getRelativeLuminance()}isDarkerThan(e){return this.getRelativeLuminance()<e.getRelativeLuminance()}lighten(e){return new Color(new HSLA(this.hsla.h,this.hsla.s,this.hsla.l+this.hsla.l*e,this.hsla.a))}darken(e){return new Color(new HSLA(this.hsla.h,this.hsla.s,this.hsla.l-this.hsla.l*e,this.hsla.a))}transparent(e){let{r:t,g:i,b:r,a:s}=this.rgba;return new Color(new RGBA(t,i,r,s*e))}isTransparent(){return 0===this.rgba.a}isOpaque(){return 1===this.rgba.a}opposite(){return new Color(new RGBA(255-this.rgba.r,255-this.rgba.g,255-this.rgba.b,this.rgba.a))}blend(e){let t=e.rgba,i=this.rgba.a,r=t.a,s=i+r*(1-i);return s<1e-6?Color.transparent:new Color(new RGBA(this.rgba.r*i/s+t.r*r*(1-i)/s,this.rgba.g*i/s+t.g*r*(1-i)/s,this.rgba.b*i/s+t.b*r*(1-i)/s,s))}mix(e,t){return function(e,t,i){let r=e.rgba,s=t.rgba;return new Color(new RGBA(r.r+i*(s.r-r.r),r.g+i*(s.g-r.g),r.b+i*(s.b-r.b),r.a+i*(s.a-r.a)))}(this,e,t)}makeOpaque(e){if(this.isOpaque()||1!==e.rgba.a)return this;let{r:t,g:i,b:r,a:s}=this.rgba;return new Color(new RGBA(e.rgba.r-s*(e.rgba.r-t),e.rgba.g-s*(e.rgba.g-i),e.rgba.b-s*(e.rgba.b-r),1))}flatten(...e){let t=e.reduceRight((e,t)=>Color._flatten(t,e));return Color._flatten(this,t)}static _flatten(e,t){let i=1-e.rgba.a;return new Color(new RGBA(i*t.rgba.r+e.rgba.a*e.rgba.r,i*t.rgba.g+e.rgba.a*e.rgba.g,i*t.rgba.b+e.rgba.a*e.rgba.b))}_toString;toString(){var e;return this._toString||(this._toString=(e=this,e.isOpaque()?`#${l(e.rgba.r)}${l(e.rgba.g)}${l(e.rgba.b)}`:`rgba(${e.rgba.r}, ${e.rgba.g}, ${e.rgba.b}, ${Number(e.rgba.a.toFixed(2))})`)),this._toString}static getLighterColor(e,t,i){if(e.isLighterThan(t))return e;i=i||.5;let r=e.getRelativeLuminance(),s=t.getRelativeLuminance();return i=i*(s-r)/s,e.lighten(i)}static getDarkerColor(e,t,i){if(e.isDarkerThan(t))return e;i=i||.5;let r=e.getRelativeLuminance(),s=t.getRelativeLuminance();return i=i*(r-s)/r,e.darken(i)}static white=new Color(new RGBA(255,255,255,1));static black=new Color(new RGBA(0,0,0,1));static red=new Color(new RGBA(255,0,0,1));static blue=new Color(new RGBA(0,0,255,1));static green=new Color(new RGBA(0,255,0,1));static cyan=new Color(new RGBA(0,255,255,1));static lightgrey=new Color(new RGBA(211,211,211,1));static transparent=new Color(new RGBA(0,0,0,0))};function l(e){let t=e.toString(16);return 2!==t.length?`0${t}`:t}let h=/^((?:rgb|hsl)a?)\((-?\d+%?)[,\s]+(-?\d+%?)[,\s]+(-?\d+%?)[,\s]*(-?[\d.]+%?)?\)$/i;function c(e){let t;if(0===(e=e.trim()).length)return null;if(e.charCodeAt(0)===o.rE.Hash)return u(e);let i=h.exec(e);if(null==i)return null;let r=i[1];switch(r){case"rgb":case"hsl":t=[parseInt(i[2],10),parseInt(i[3],10),parseInt(i[4],10),1];break;case"rgba":case"hsla":t=[parseInt(i[2],10),parseInt(i[3],10),parseInt(i[4],10),parseFloat(i[5])];break;default:return null}switch(r){case"rgb":case"rgba":return new Color(new RGBA(t[0],t[1],t[2],t[3]));case"hsl":case"hsla":return new Color(new HSLA(t[0],t[1],t[2],t[3]))}return Color.red}function u(e){let t=(e=e.trim()).length;if(0===t||e.charCodeAt(0)!==o.rE.Hash)return null;switch(t){case 7:return new Color(new RGBA(16*d(e.charCodeAt(1))+d(e.charCodeAt(2)),16*d(e.charCodeAt(3))+d(e.charCodeAt(4)),16*d(e.charCodeAt(5))+d(e.charCodeAt(6)),1));case 9:{let t=16*d(e.charCodeAt(1))+d(e.charCodeAt(2));return new Color(new RGBA(t,16*d(e.charCodeAt(3))+d(e.charCodeAt(4)),16*d(e.charCodeAt(5))+d(e.charCodeAt(6)),(16*d(e.charCodeAt(7))+d(e.charCodeAt(8)))/255))}case 4:{let t=d(e.charCodeAt(1)),i=d(e.charCodeAt(2)),r=d(e.charCodeAt(3));return new Color(new RGBA(16*t+t,16*i+i,16*r+r))}case 5:{let t=d(e.charCodeAt(1)),i=d(e.charCodeAt(2)),r=d(e.charCodeAt(3)),s=d(e.charCodeAt(4));return new Color(new RGBA(16*t+t,16*i+i,16*r+r,(16*s+s)/255))}default:return null}}function d(e){switch(e){case o.rE.Digit0:break;case o.rE.Digit1:return 1;case o.rE.Digit2:return 2;case o.rE.Digit3:return 3;case o.rE.Digit4:return 4;case o.rE.Digit5:return 5;case o.rE.Digit6:return 6;case o.rE.Digit7:return 7;case o.rE.Digit8:return 8;case o.rE.Digit9:return 9;case o.rE.a:case o.rE.A:return 10;case o.rE.b:case o.rE.B:return 11;case o.rE.c:case o.rE.C:return 12;case o.rE.d:case o.rE.D:return 13;case o.rE.e:case o.rE.E:return 14;case o.rE.f:case o.rE.F:return 15}return 0}var p=i(4169),g=i(1072);let m=["#f66a0a","#ef6939","#e96950","#e26862","#db6871","#d3677e","#cc678a","#c46696","#bb66a0","#b365a9","#a965b3","#a064bb","#9664c4","#8a63cc","#7e63d3","#7162db","#6262e2","#5061e9","#3961ef","#0a60f6"];function f(){if(null==r){let e;let{coldColor:t,hotColor:i}=p.i.get("heatmap");r={hot:(e="#0a60f6"===t&&"#f66a0a"===i?m:function(e,t,i){let r=[],s=Color.from(e),o=Color.from(t);r.push(s.toString());for(let e=1;e<19;e++){let t=s.mix(o,e/19);r.push(t.toString())}return r.push(o.toString()),r}(i,t,0)).slice(0,10),cold:e.slice(10,20)};let s=p.i.onDidChange(e=>{p.i.changed(e,["heatmap.ageThreshold","heatmap.hotColor","heatmap.coldColor"])&&(s.dispose(),r=void 0)})}return r}function w(e,t,i){let[r,s,o,n]=A(t,i);e.renderOptions.before.borderColor=`rgba(${r},${s},${o},${n})`}function v(e,t,i,r){let[o,n,a,l]=A(e,t),{fadeLines:h,locations:c}=p.i.get("heatmap"),u=c.includes("gutter"),d=c.includes("line"),g=c.includes("overview"),m=`${o},${n},${a},${l}`,f=r.get(m);return null==f?(f={decorationType:s.window.createTextEditorDecorationType({backgroundColor:d?`rgba(${o},${n},${a},${.15*l})`:void 0,opacity:h?`${t.computeOpacity(e).toFixed(2)} !important`:void 0,isWholeLine:!!d||!!h||void 0,gutterIconPath:u?s.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${o},${n},${a})' fill-opacity='${l}' x='8' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:u?"contain":void 0,overviewRulerLane:g?s.OverviewRulerLane.Center:void 0,overviewRulerColor:g?`rgba(${o},${n},${a},${.7*l})`:void 0}),rangesOrOptions:[i],dispose:!0},r.set(m,f)):f.rangesOrOptions.push(i),f.decorationType}function y(e,t,i,r){let s={renderOptions:{before:{...r}}};e.isUncommitted&&(s.renderOptions.before.color=r.uncommittedColor);let a=n.E.fromTemplate(t,e,i);return s.renderOptions.before.contentText=(0,g.eu)(a.replace(/ /g,o.or.Space),1,1),s}function b(e,t,i,r,o,n){let a,l,h,c=0;for(let e of Object.values(o.tokenOptions))if(void 0!==e){if(null==e.truncateTo){c=-1;break}c+=e.truncateTo}if(c>=0&&(c+=(0,g.K6)((0,g.qy)(r,void 0)))>0&&(c+=3),t.enabled&&(a="solid",l="left"===t.location?"0 0 0 2px":"0 2px 0 0"),c>=0){let e=p.i.getCore("editor.letterSpacing");h=null!=e&&0!==e?`calc(${c}ch + ${Math.round(c*e)+(i?13:-6)}px)`:`calc(${c}ch ${i?"+ 13px":"- 6px"})`}return{backgroundColor:new s.ThemeColor("gitlens.gutterBackgroundColor"),borderStyle:a,borderWidth:l,color:new s.ThemeColor("gitlens.gutterForegroundColor"),fontWeight:n.weight??"normal",fontStyle:n.weight??"normal",height:"100%",margin:"0 26px -1px 0",textDecoration:`${e?"overline solid rgba(0, 0, 0, .2)":"none"};box-sizing: border-box${i?";padding: 0 0 0 18px":""}${n.family?`;font-family: ${n.family}`:""}${n.size?`;font-size: ${n.size}px`:""}`,width:h,uncommittedColor:new s.ThemeColor("gitlens.gutterUncommittedForegroundColor")}}function C(e,t,i,r=!0){let a=n.E.fromTemplate(t,e,{...i,messageTruncateAtNewLine:!0});return{renderOptions:{after:{backgroundColor:new s.ThemeColor("gitlens.trailingLineBackgroundColor"),color:new s.ThemeColor("gitlens.trailingLineForegroundColor"),contentText:(0,g.eu)(a.replace(/ /g,o.or.Space),1,1),fontWeight:"normal",fontStyle:"normal",textDecoration:`none;${r?"":" position: absolute;"}`}}}}function A(e,t){let i=t.computeRelativeAge(e),r=function(e){let t=c(e);return null==t?null:[t.rgba.r,t.rgba.g,t.rgba.b,t.rgba.a]}((e.getTime()<t.coldThresholdTimestamp?t.colors.cold:t.colors.hot)[i]);return[...r??[0,0,0],null==r?0:0===i?1:i<=5?.8:.6]}},3072:(e,t,i)=>{i.d(t,{I:()=>Autolinks,X:()=>v});var r=i(7304),s=i(1608),o=i(7956),n=i(4169),a=i(6944),l=i(4136),h=i(1408),c=i(7348),u=i(6448),d=i(1072),p=Object.defineProperty,g=Object.getOwnPropertyDescriptor,m=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?g(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&p(t,i,o),o};let f=Object.freeze(new Map),w=/<num>/g;function v(e){return{provider:e.provider?{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon}:void 0,id:e.id,prefix:e.prefix,title:e.title,url:e.url,type:e.type,description:e.description}}function y(e){return!("prefix"in e)&&!("url"in e)}let Autolinks=class Autolinks{constructor(e){this.container=e,this._disposable=r.Disposable.from(n.i.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged()}_disposable;_references=[];dispose(){this._disposable?.dispose()}onConfigurationChanged(e){if(n.i.changed(e,"autolinks")){let e=n.i.get("autolinks");this._references=e?.filter(e=>e.prefix&&e.url)?.map(e=>({prefix:e.prefix,url:e.url,title:e.title,alphanumeric:e.alphanumeric,ignoreCase:e.ignoreCase,type:e.type,description:e.description}))??[]}}getAutolinks(e,t,i){let r,s;let o=[];if(t?.provider?.autolinks?.length&&o.push([t.provider,t.provider.autolinks]),this._references.length&&(t?.provider==null||!i?.excludeCustom)&&o.push([void 0,this._references]),0===o.length)return f;let n=new Map;for(let[t,i]of o)for(let o of i){if(!("prefix"in o&&null!=o.prefix&&"url"in o&&null!=o.url)){y(o)&&o.parse(e,n);continue}for(b(o,"plaintext");null!=(r=o.messageRegex.exec(e));)[,,,s]=r,n.set(s,{provider:t,id:s,prefix:o.prefix,url:o.url?.replace(w,s),title:o.title?.replace(w,s),type:o.type,description:o.description?.replace(w,s)})}return n}async getEnrichedAutolinks(e,t){if("string"==typeof e&&(e=this.getAutolinks(e,t)),0===e.size)return;let i=t?.getIntegration();return null==i||(i.maybeConnected??await i.isConnected())||(i=void 0),new Map((0,c.kH)(e,([e,r])=>[e,[t?.provider!=null&&null!=i&&r.provider?.id===i.id&&r.provider?.domain===i.domain?i.getIssueOrPullRequest(r.descriptor??t.provider.repoDesc,e):void 0,r]]))}linkify(e,t,i,r,o,n){let a="plaintext"===t&&null==n;a&&(n=new Map);let l=new Map;for(let i of this._references)this.ensureAutolinkCached(i)&&null!=i.tokenize&&(e=i.tokenize(e,t,l,r,o,n));if(null!=i&&0!==i.length){for(let s of i=[...i].sort((e,t)=>{let i=e.maybeIntegrationConnected,r=t.maybeIntegrationConnected;return i!==r?i?-1:r?1:0:0}))if(null!=s.provider)for(let i of s.provider.autolinks)this.ensureAutolinkCached(i)&&null!=i.tokenize&&(e=i.tokenize(e,t,l,r,o,n))}return 0!==l.size&&(e=e.replace(/(\x00\d+\x00)/g,(e,t)=>l.get(t)??t)),a&&n?.size&&(e+=`
${s.or.Dash.repeat(2)}
${(0,c.kn)((0,c.kH)(n,([e,t])=>`${(0,d.ys)(e)} ${t}`),"\n")}`),e}ensureAutolinkCached(e){if(y(e))return!0;if(!e.prefix||!e.url)return!1;if(void 0!==e.tokenize||null===e.tokenize)return!0;try{e.tokenize=(t,i,r,n,l,c)=>{let u;switch(i){case"markdown":return b(e,i),t.replace(e.messageMarkdownRegex,(t,i,p,g)=>{let m=(0,h.o)(e.url.replace(w,g)),f="";if(e.title){f=` "${e.title.replace(w,g)}`;let t=n?.get(g)?.[0];if(t?.value!=null){if(t.paused){if(null!=c&&!l?.has(g)){let t=e.description?.replace(w,g);null==t&&(t=`Custom Autolink ${e.prefix}${g}`),u=c.size+1,c.set(u,`[${(0,o.eV)()} ${t} $(loading~spin)](${m}${f}")`)}f+=`
${s.or.Dash.repeat(2)}
Loading...`}else{let e=t.value,i=(0,d.Ed)(e.title.trim()),r=i.replace(/"/g,'\\"');null==c||l?.has(g)||(u=c.size+1,c.set(u,`[${(0,o.eV)(e)} **${i}**](${m}${f}")\\
${s.or.Space.repeat(5)}${p} ${e.state} ${(0,a.Yn)(e.closedDate??e.date)}`)),f+=`
${s.or.Dash.repeat(2)}
${r}
${(0,d.Yj)(e.state)}, ${(0,a.Yn)(e.closedDate??e.date)}`}}else if(null!=c&&!l?.has(g)){let t=e.description?.replace(w,g);null==t&&(t=`Custom Autolink ${e.prefix}${g}`),u=c.size+1,c.set(u,`[${(0,o.eV)()} ${t}](${m}${f}")`)}f+='"'}let v=`\0${r.size}\0`;return r.set(v,`[${p}](${m}${f})`),`${i}${v}`});case"html":return b(e,i),t.replace(e.messageHtmlRegex,(t,i,p,g)=>{let m=(0,h.o)(e.url.replace(w,g)),f="";if(e.title){f=`"${(0,d.Ir)(e.title.replace(w,g))}`;let t=n?.get(g)?.[0];if(t?.value!=null){if(t.paused){if(null!=c&&!l?.has(g)){let t=e.description?.replace(w,g);null==t&&(t=`Custom Autolink ${e.prefix}${g}`),u=c.size+1,c.set(u,`<a href="${m}" title=${f}>${(0,o.S6)()} ${t}</a>`)}f+=`
${s.or.Dash.repeat(2)}
Loading...`}else{let e=t.value,i=(0,d.Ir)(e.title.trim()),r=i.replace(/"/g,"&quot;");null==c||l?.has(g)||(u=c.size+1,c.set(u,`<a href="${m}" title=${f}>${(0,o.S6)(e)} <b>${i}</b></a><br /><span>${s.or.Space.repeat(5)}${p} ${e.state} ${(0,a.Yn)(e.closedDate??e.date)}</span>`)),f+=`
${s.or.Dash.repeat(2)}
${r}
${(0,d.Yj)(e.state)}, ${(0,a.Yn)(e.closedDate??e.date)}`}}else if(null!=c&&!l?.has(g)){let t=e.description?.replace(w,g);null==t&&(t=`Custom Autolink ${e.prefix}${g}`),u=c.size+1,c.set(u,`<a href="${m}" title=${f}>${(0,o.S6)()} ${t}</a>`)}f+='"'}let v=`\0${r.size}\0`;return r.set(v,`<a href="${m}" title=${f}>${p}</a>`),`${i}${v}`});default:return b(e,i),t.replace(e.messageRegex,(e,t,i,o)=>{let h=n?.get(o)?.[0];if(h?.value==null)return i;null==c||l?.has(o)||(u=c.size+1,c.set(u,`${i}: ${h.paused?"Loading...":`${h.value.title}  ${s.or.Dot}  ${(0,d.Yj)(h.value.state)}, ${(0,a.Yn)(h.value.closedDate??h.value.date)}`}`));let p=`\0${r.size}\0`;return r.set(p,`${i}${(0,d.ys)(u)}`),`${t}${p}`})}}}catch(t){u.YJ.error(t,`Failed to create autolink generator: prefix=${e.prefix}, url=${e.url}, title=${e.title}`),e.tokenize=null}return!0}};function b(e,t){return"markdown"===t&&null==e.messageMarkdownRegex?e.messageMarkdownRegex=RegExp(`(^|\\s|\\(|\\[|\\{)(${(0,d.Oi)((0,d.Ir)((0,d.Ed)(e.prefix)))}(${e.alphanumeric?"\\w":"\\d"}+))\\b`,e.ignoreCase?"gi":"g"):"html"===t&&null==e.messageHtmlRegex?e.messageHtmlRegex=RegExp(`(^|\\s|\\(|\\[|\\{)(${(0,d.Oi)((0,d.Ir)(e.prefix))}(${e.alphanumeric?"\\w":"\\d"}+))\\b`,e.ignoreCase?"gi":"g"):null==e.messageRegex&&(e.messageRegex=RegExp(`(^|\\s|\\(|\\[|\\{)(${(0,d.Oi)(e.prefix)}(${e.alphanumeric?"\\w":"\\d"}+))\\b`,e.ignoreCase?"gi":"g")),!0}m([(0,l.u_)({args:{0:"<message>",1:!1}})],Autolinks.prototype,"getAutolinks",1),m([(0,l.u_)({args:{0:e=>"string"==typeof e?"<message>":`autolinks=${e.size}`,1:e=>e?.remoteKey}})],Autolinks.prototype,"getEnrichedAutolinks",1),m([(0,l.u_)({args:{0:"<text>",2:e=>e?.length,3:e=>e?.size,4:e=>e?.size}})],Autolinks.prototype,"linkify",1)},9536:(e,t,i)=>{i.d(t,{C:()=>w,a:()=>FileAnnotationController});var r=i(7304),s=i(7824),o=i(4169),n=i(3664),a=i(4136),l=i(8781),h=i(8196),c=i(7348),u=i(3732),d=i(3284),p=i(9084),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor,f=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o),o};let w={gutterBlameAnnotation:r.window.createTextEditorDecorationType({rangeBehavior:r.DecorationRangeBehavior.OpenOpen,textDecoration:"none"}),gutterBlameHighlight:void 0,changesLineChangedAnnotation:void 0,changesLineAddedAnnotation:void 0,changesLineDeletedAnnotation:void 0};let FileAnnotationController=class FileAnnotationController{constructor(e){this.container=e,this._disposable=r.Disposable.from((0,l.qw)(e.onReady)(this.onReady,this),o.i.onDidChange(this.onConfigurationChanged,this),r.window.onDidChangeActiveColorTheme(this.onThemeChanged,this)),this._toggleModes=new Map}_onDidToggleAnnotations=new r.EventEmitter;get onDidToggleAnnotations(){return this._onDidToggleAnnotations.event}_annotationsDisposable;_annotationProviders=new Map;_disposable;_editor;_keyboardScope=void 0;_toggleModes;_windowAnnotationType=void 0;dispose(){this.clearAll(),w.gutterBlameAnnotation?.dispose(),w.gutterBlameHighlight?.dispose(),w.changesLineChangedAnnotation?.dispose(),w.changesLineAddedAnnotation?.dispose(),w.changesLineDeletedAnnotation?.dispose(),this._disposable?.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){let t;let i=null==e;if(o.i.changed(e,["blame.highlight","changes.locations"])&&this.updateDecorations(!1),o.i.changed(e,"fileAnnotations.dismissOnEscape")&&(o.i.get("fileAnnotations.dismissOnEscape")?r.window.visibleTextEditors.some(e=>this.getProvider(e))&&this.attachKeyboardHook():this.detachKeyboardHook()),o.i.changed(e,"blame.toggleMode")&&(t=o.i.get("blame.toggleMode"),this._toggleModes.set("blame",t),i||"file"!==t||this.clearAll()),o.i.changed(e,"changes.toggleMode")&&(t=o.i.get("changes.toggleMode"),this._toggleModes.set("changes",t),i||"file"!==t||this.clearAll()),o.i.changed(e,"heatmap.toggleMode")&&(t=o.i.get("heatmap.toggleMode"),this._toggleModes.set("heatmap",t),i||"file"!==t||this.clearAll()),!i&&o.i.changed(e,["blame","changes","heatmap","hovers","defaultDateFormat","defaultDateSource","defaultDateStyle","defaultGravatarsStyle"]))for(let e of this._annotationProviders.values())null!=e&&this.show(e.editor,e.annotationType??"blame")}onThemeChanged(e){this.updateDecorations(!0)}async onActiveTextEditorChanged(e){if(null!=e&&!(0,d.sj)(e))return;if(this._editor=e,this.isInWindowToggle()){await this.show(e,this._windowAnnotationType);return}let t=this.getProvider(e);null==t?((0,n.Qr)("gitlens:annotationStatus",void 0),this.detachKeyboardHook()):((0,n.Qr)("gitlens:annotationStatus",t.statusContextValue),this.attachKeyboardHook())}onBlameStateChanged(e){let t=r.window.activeTextEditor;if(null!=t){if(e.blameable){o.i.get("fileAnnotations.preserveWhileEditing")&&this.restore(t);return}this.clearCore((0,p.E)(t))}}onDirtyIdleTriggered(e){if(!e.document.isBlameable||!o.i.get("fileAnnotations.preserveWhileEditing"))return;let t=r.window.activeTextEditor;null!=t&&this.restore(t)}onDirtyStateChanged(e){for(let[t,i]of this._annotationProviders)e.document.is(i.editor.document)&&(o.i.get("fileAnnotations.preserveWhileEditing")?e.dirty||this.restore(e.editor):e.dirty&&this.clearCore(t))}onTextDocumentClosed(e){if(this.container.git.isTrackable(e.uri))for(let[t,i]of this._annotationProviders)i.editor.document===e&&this.clearCore(t)}onTextEditorViewColumnChanged(e){let t=this.getProvider(e.textEditor);if(null==t){let t=(0,c.iw)(this._annotationProviders.values(),t=>t.editor.document===e.textEditor.document);if(null==t)return;this.clearCore(t.correlationKey);return}t.restore(e.textEditor)}onVisibleTextEditorsChanged(e){for(let t of e)this.getProvider(t)?.restore(t,!1)}isInWindowToggle(){return"window"===this.getToggleMode(this._windowAnnotationType)}getToggleMode(e){return null==e?"file":this._toggleModes.get(e)??"file"}clear(e){return this.isInWindowToggle()?this.clearAll():this.clearCore((0,p.E)(e),!0)}async clearAll(){for(let[e]of(this._windowAnnotationType=void 0,this._annotationProviders))await this.clearCore(e,!0);this.unsubscribe()}async getAnnotationType(e){let t=this.getProvider(e);if(null==t)return;let i=await this.container.documentTracker.get(e.document);if(i?.isBlameable)return t.annotationType}getProvider(e){if(e?.document!=null)return this._annotationProviders.get((0,p.E)(e))}debouncedRestores=new WeakMap;restore(e,t){let i=this.getProvider(e);if(null==i)return;let r=this.debouncedRestores.get(e);null==r&&(r=(0,h.Cu)(e=>{this.debouncedRestores.delete(e),i.restore(e,t??!0)},500),this.debouncedRestores.set(e,r)),r(e)}async show(e,t,i){if("window"===this.getToggleMode(t)){let i=null==this._windowAnnotationType,s=!i&&this._windowAnnotationType!==t;if(this._windowAnnotationType=t,s&&(await this.clearAll(),i=!0),i)for(let i of r.window.visibleTextEditors)i!==e&&this.show(i,t);if(null==e)return this.subscribe(),!1}if(null==e||(this._editor=e,!(await this.container.documentTracker.getOrAdd(e.document)).isBlameable))return!1;let s=this.getProvider(e);return s?.annotationType===t?(await s.provideAnnotation(i),!0):null!=await r.window.withProgress({location:r.ProgressLocation.Window},async r=>{await (0,n.Qr)("gitlens:annotationStatus","computing");let o=this.showAnnotationsCore(s,e,t,i,r),a=await o;return e===this._editor&&await (0,n.Qr)("gitlens:annotationStatus",a?.statusContextValue),o})}async toggle(e,t,i,r){if(null!=e&&"file"===this._toggleModes.get(t)){let i=await this.container.documentTracker.getOrAdd(e.document);if("changes"===t&&!i.isTracked||!i.isBlameable)return!1}let s=this.getProvider(e);if(null==s)return null==e&&this.isInWindowToggle()?(await this.clearAll(),!1):this.show(e,t,i);let o=s.annotationType!==t||!s.canReuse(i);return!0===r&&!o||(this.isInWindowToggle()?await this.clearAll():await this.clearCore(s.correlationKey,!0),!!o&&this.show(e,t,i))}nextChange(){let e=this.getProvider(r.window.activeTextEditor);e?.nextChange?.()}previousChange(){let e=this.getProvider(r.window.activeTextEditor);e?.previousChange?.()}async attachKeyboardHook(){o.i.get("fileAnnotations.dismissOnEscape")&&null==this._keyboardScope&&(this._keyboardScope=await this.container.keyboard.beginScope({escape:{onDidPressKey:async()=>{let e=this._editor;null!=e&&await this.clear(e)}}}))}async clearCore(e,t){let i=this._annotationProviders.get(e);null!=i&&(this._annotationProviders.delete(e),i.dispose(),this._annotationProviders.size&&e!==(0,p.E)(this._editor)||(await (0,n.Qr)("gitlens:annotationStatus",void 0),await this.detachKeyboardHook()),this._annotationProviders.size||!t&&this.isInWindowToggle()||(this._windowAnnotationType=void 0,this.unsubscribe()),this._onDidToggleAnnotations.fire())}async detachKeyboardHook(){null!=this._keyboardScope&&(await this._keyboardScope.dispose(),this._keyboardScope=void 0)}async showAnnotationsCore(e,t,r,s,o){let n;if(null!=o){let e="annotations";switch(r){case"blame":e="blame annotations";break;case"changes":e="changes annotations";break;case"heatmap":e="heatmap annotations"}o.report({message:`Computing ${e} for ${(0,u.g1)(t.document.fileName)}`})}await this.attachKeyboardHook();let a=await this.container.documentTracker.getOrAdd(t.document);switch(r){case"blame":{let{GutterBlameAnnotationProvider:e}=await i.e(928).then(i.bind(i,5415));n=new e(this.container,t,a);break}case"changes":{let{GutterChangesAnnotationProvider:e}=await i.e(828).then(i.bind(i,6636));n=new e(this.container,t,a);break}case"heatmap":{let{GutterHeatmapBlameAnnotationProvider:e}=await i.e(434).then(i.bind(i,6332));n=new e(this.container,t,a)}}if(null!=n&&await n.validate?.()!==!1){if(null!=e&&await this.clearCore(e.correlationKey,!0),0===this._annotationProviders.size&&this.subscribe(),this._annotationProviders.set(n.correlationKey,n),await n.provideAnnotation(s))return this._onDidToggleAnnotations.fire(),n;await this.clearCore(n.correlationKey,!0)}}subscribe(){this._annotationsDisposable??=r.Disposable.from(r.window.onDidChangeActiveTextEditor((0,h.Cu)(this.onActiveTextEditorChanged,50),this),r.window.onDidChangeTextEditorViewColumn(this.onTextEditorViewColumnChanged,this),r.window.onDidChangeVisibleTextEditors((0,h.Cu)(this.onVisibleTextEditorsChanged,50),this),r.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this),this.container.documentTracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.container.documentTracker.onDidChangeDirtyState(this.onDirtyStateChanged,this),this.container.documentTracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this),(0,s.or)("gitlens.annotations.nextChange",()=>this.nextChange()),(0,s.or)("gitlens.annotations.previousChange",()=>this.previousChange()))}unsubscribe(){this._annotationsDisposable?.dispose(),this._annotationsDisposable=void 0}updateDecorations(e){let t=e?Object.entries(w):void 0;if(this.updateHighlightDecoration(),this.updateChangedDecorations(),!e)return;let i=new Map;for(let[e,r]of t)null!=r&&r!==(w[e]??null)&&i.set(r,w[e]??null);if(0!==i.size)for(let e of r.window.visibleTextEditors)this.getProvider(e)?.refresh(i)}updateChangedDecorations(){let e,t,i;w.changesLineAddedAnnotation?.dispose(),w.changesLineChangedAnnotation?.dispose(),w.changesLineDeletedAnnotation?.dispose();let s=o.i.get("changes.locations");switch(r.window.activeColorTheme.kind){case r.ColorThemeKind.Light:e=[72,152,93],t=[32,144,211],i=[229,20,0];break;case r.ColorThemeKind.HighContrast:default:e=[72,126,2],t=[27,129,168],i=[241,76,76]}w.changesLineAddedAnnotation=r.window.createTextEditorDecorationType({backgroundColor:s.includes("line")?`rgba(${e.join(",")},0.4)`:void 0,isWholeLine:!!s.includes("line")||void 0,gutterIconPath:s.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${e.join(",")})' x='13' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:r.OverviewRulerLane.Left,overviewRulerColor:s.includes("overview")?new r.ThemeColor("editorOverviewRuler.addedForeground"):void 0}),w.changesLineChangedAnnotation=r.window.createTextEditorDecorationType({backgroundColor:s.includes("line")?`rgba(${t.join(",")},0.4)`:void 0,isWholeLine:!!s.includes("line")||void 0,gutterIconPath:s.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${t.join(",")})' x='13' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:r.OverviewRulerLane.Left,overviewRulerColor:s.includes("overview")?new r.ThemeColor("editorOverviewRuler.modifiedForeground"):void 0}),w.changesLineDeletedAnnotation=r.window.createTextEditorDecorationType({gutterIconPath:s.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><polygon fill='rgb(${i.join(",")})' points='13,10 13,18 17,14'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:r.OverviewRulerLane.Left,overviewRulerColor:s.includes("overview")?new r.ThemeColor("editorOverviewRuler.deletedForeground"):void 0})}updateHighlightDecoration(){w.gutterBlameHighlight?.dispose(),w.gutterBlameHighlight=void 0;let e=o.i.get("blame.highlight");if(e.enabled){let{locations:t}=e,i=t.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent("<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='#00bcf2' fill-opacity='0.6' x='7' y='0' width='3' height='18'/></svg>")}`):void 0;w.gutterBlameHighlight=r.window.createTextEditorDecorationType({gutterIconPath:i,gutterIconSize:"contain",isWholeLine:!0,overviewRulerLane:r.OverviewRulerLane.Right,backgroundColor:t.includes("line")?new r.ThemeColor("gitlens.lineHighlightBackgroundColor"):void 0,overviewRulerColor:t.includes("overview")?new r.ThemeColor("gitlens.lineHighlightOverviewRulerColor"):void 0})}}};f([(0,a.Yz)({args:{0:e=>e?.document.uri.toString(!0)}})],FileAnnotationController.prototype,"clear",1),f([(0,a.Yz)()],FileAnnotationController.prototype,"clearAll",1),f([(0,a.Yz)({args:{0:e=>e?.document.uri.toString(!0),2:!1}})],FileAnnotationController.prototype,"show",1),f([(0,a.Yz)({args:{0:e=>e?.document.uri.toString(!0),2:!1}})],FileAnnotationController.prototype,"toggle",1),f([(0,a.Yz)()],FileAnnotationController.prototype,"nextChange",1),f([(0,a.Yz)()],FileAnnotationController.prototype,"previousChange",1),f([(0,a.Yz)()],FileAnnotationController.prototype,"clearCore",1),f([(0,a.u_)({singleLine:!0,if:function(){return null==this._annotationsDisposable}})],FileAnnotationController.prototype,"subscribe",1),f([(0,a.u_)({singleLine:!0,if:function(){return null!=this._annotationsDisposable}})],FileAnnotationController.prototype,"unsubscribe",1)},3412:(e,t,i)=>{i.d(t,{EP:()=>ActionRunners,sD:()=>p});var r,s=i(7304),o=i(1608),n=i(7824),a=i(4169),l=i(3664),h=i(1072),c=i(3284);let u=["createPullRequest","openPullRequest","hover.commands"];var d=((r=d||{})[r.BuiltIn=0]="BuiltIn",r[r.BuiltInPartner=1]="BuiltInPartner",r[r.Partner=2]="Partner",r[r.BuiltInPartnerInstaller=3]="BuiltInPartnerInstaller",r);let p="Built In";let ActionRunnerQuickPickItem=class ActionRunnerQuickPickItem{constructor(e,t){this.runner=e,this._label="string"==typeof e.label?e.label:e.label(t)}_label;get label(){return this._label}get detail(){return this.runner.name}};let NoActionRunnersQuickPickItem=class NoActionRunnersQuickPickItem{runner;get label(){return"No actions were found"}get detail(){}};let g=0;let RegisteredActionRunner=class RegisteredActionRunner{constructor(e,t,i){this.type=e,this.runner=t,this.unregister=i,this.id=(1073741824===g?g=1:g++,g)}id;dispose(){this.unregister()}get name(){return this.runner.name}get label(){return this.runner.label}get order(){switch(this.type){case 0:return 0;case 1:return 1;case 2:return this.partnerId?1:2;case 3:return 3;default:return 100}}get partnerId(){return this.runner.partnerId}run(e){return this.runner.run(e)}};let ActionRunners=class ActionRunners{constructor(e){this.container=e;let t=[a.i.onDidChange(e=>{a.i.changed(e,"partners")&&this._updateAllContextKeys()})];for(let e of u)t.push((0,n.or)(`${o.eq.ActionPrefix}${e}`,(e,t)=>this.run(e,t)));this._disposable=s.Disposable.from(...t)}_onDidChange=new s.EventEmitter;get onDidChange(){return this._onDidChange.event}_actionRunners=new Map;_disposable;dispose(){for(let e of(this._disposable.dispose(),this._actionRunners.values()))for(let t of e)t.dispose();this._actionRunners.clear()}count(e){return this.get(e)?.length??0}get(e){return function(e,t){if(null!=t&&0!==t.length)return null==e?t:t.filter(t=>null==t.partnerId||null!=t.partnerId&&e[t.partnerId]?.enabled!==!1)}(a.i.get("partners"),this._actionRunners.get(e))}has(e){return this.count(e)>0}register(e,t,i=2){let r=this._actionRunners.get(e);null==r&&(r=[],this._actionRunners.set(e,r));let s=e=>{this._updateContextKeys(e),this._onDidChange.fire(e)},o=this._actionRunners,n=new RegisteredActionRunner(i,t,function(){if(1===r.length)o.delete(e),s(e);else{let e=r.indexOf(this);-1!==e&&r.splice(e,1)}});return r.push(n),s(e),{dispose:()=>n.dispose()}}registerBuiltIn(e,t){return this.register(e,{...t,partnerId:void 0,name:p},0)}registerBuiltInPartner(e,t,i){return this.register(t,{...i,partnerId:e},1)}registerBuiltInPartnerInstaller(e,t,i){return this.register(t,{...i,partnerId:e,name:`${i.name} (Not Installed)`},3)}async run(e,t){let i,r=this.get(e.type);if(null!=r&&0!==r.length&&(null!=t&&(r=r.filter(e=>e.id===t)),0!==r.length)){if(r.length>1||r.every(e=>0!==e.type)){let t=r.sort((e,t)=>e.order-t.order||(0,h.sd)(e.name,t.name)).map(t=>new ActionRunnerQuickPickItem(t,e));0===t.length&&t.push(new NoActionRunnersQuickPickItem);let o=s.window.createQuickPick();o.ignoreFocusOut=(0,c.u4)();let n=[];try{let r=await new Promise(i=>{let r,s;switch(n.push(o.onDidHide(()=>i(void 0)),o.onDidAccept(()=>{0!==o.activeItems.length&&i(o.activeItems[0])})),e.type){case"createPullRequest":r="Create Pull Request",s="Choose how to create a pull request";break;case"openPullRequest":r="Open Pull Request",s="Choose how to open the pull request";break;case"hover.commands":r="Need Help or Want to Collaborate?",s="Choose what you would like to do"}o.title=r,o.placeholder=s,o.matchOnDetail=!0,o.items=t,o.show()});if(null==r)return;i=r.runner}finally{o.dispose(),n.forEach(e=>void e.dispose())}}else[i]=r;await i?.run(e)}}async _updateContextKeys(e){await (0,l.Qr)(`gitlens:action:${e}`,this.count(e))}async _updateAllContextKeys(){for(let e of u)await this._updateContextKeys(e)}}},5576:(e,t,i)=>{let r,s;i.d(t,{GC:()=>_,S8:()=>T,U3:()=>f,X0:()=>b,aE:()=>R,ic:()=>I,sh:()=>C});var o=i(7304),n=i(7312),a=i(9964),l=i(1820),h=i(4169),c=i(3664),u=i(8196),d=i(7348),p=i(1072);let g=new Map,m=new o.EventEmitter;m.event((0,u.Cu)(()=>{let e=null!=r?[...(0,d.Gs)(r,([e,t])=>null!=t.uri?[e,{uri:t.uri.toString(),timestamp:t.timestamp}]:void 0)]:void 0;a.Container.instance.storage.store("avatars",e)},1e3));let f=m.event,w="00000000000000000000000000000000",v=new Map,y=[6048e5,6e4,3e5,6e5,36e5,864e5,6048e5];function b(e,t,i){return A(e,t,i)}function C(e,t){return A(e,void 0,{...t,cached:!0})}function A(e,t,i){P(r);let s=(i?.size??16)*2;if(!e){let e=k(`${w}:${s}`,void 0,s,w,i?.defaultStyle);return e.uri??e.fallback}let o=(0,n.m)(e.trim().toLowerCase()),a=`${o}:${s}`,l=k(a,e,s,o,i?.defaultStyle);if(null!=l.uri)return l.uri;if(!i?.cached&&null!=t&&(0,c.wp)("gitlens:hasConnectedRemotes")){let i=g.get(a);return null==i&&Date.now()>=l.timestamp+y[Math.min(l.retries,y.length-1)]&&(i=D(l,a,e,t,{size:s}).then(e=>e??l.uri??l.fallback),g.set(a,i.finally(()=>g.delete(a)))),i??l.fallback}return i?.cached?l.uri:l.uri??l.fallback}function k(e,t,i,s,n){let a=r.get(e);return null==a?(a={uri:null!=t&&0!==t.length?function(e,t=16){let i=(0,l.S)(e);if(null!=i&&(0,p.RJ)(i.authority,"github.com"))return o.Uri.parse(`https://avatars.githubusercontent.com/${i.userId?`u/${i.userId}`:i.login}?size=${t}`)}(t,i):void 0,fallback:S(s,i,n),timestamp:0,retries:0},r.set(e,a)):null==a.fallback&&(a.fallback=S(s,i,n)),a}function P(e){null==e&&(r=new Map(a.Container.instance.storage.get("avatars")?.map(([e,t])=>[e,{uri:o.Uri.parse(t.uri),timestamp:t.timestamp,retries:0}])))}function S(e,t,i){return o.Uri.parse(`https://www.gravatar.com/avatar/${e}?s=${t}&d=${i??(null==s&&(s=h.i.get("defaultGravatarsStyle",void 0,"robohash")),s)}`)}function R(e,t,i){return S((0,n.m)(e.trim().toLowerCase()),t,i)}async function D(e,t,i,s,{size:l=16}={}){P(r);try{let t;if("string"!=typeof s){let e=await a.Container.instance.git.getBestRemoteWithIntegration(s.repoPath);if(e?.hasIntegration()){let i=e.getIntegration();t=await i?.getAccountForCommit(e.provider.repoDesc,s.ref,{avatarSize:l})}}if(t?.avatarUrl==null){e.uri=void 0,e.timestamp=1073741824,e.retries=0;return}return e.uri=o.Uri.parse(t.avatarUrl),e.timestamp=Date.now(),e.retries=0,null!=t.email&&(0,p.RJ)(i,t.email)&&r.set(`${(0,n.m)(t.email.trim().toLowerCase())}:${l}`,{...e}),m.fire({email:i}),e.uri}catch{e.uri=void 0,e.timestamp=Date.now(),e.retries++;return}}let $=new Map([["online","#28ca42"],["away","#cecece"],["busy","#ca5628"],["dnd","#ca5628"],["offline","#cecece"]]);function _(e){let t=v.get(e);if(null==t){let i=(0,p.Al)(`<?xml version="1.0" encoding="utf-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="4" height="16" viewBox="0 0 4 16">
	<circle cx="2" cy="14" r="2" fill="${$.get(e)}"/>
</svg>`);t=encodeURI(`data:image/svg+xml;base64,${i}`),v.set(e,t)}return t}function I(e){switch(e){case"all":a.Container.instance.storage.delete("avatars"),r?.clear(),g.clear();break;case"failed":for(let e of r?.values()??[])null==e.uri&&(e.timestamp=0,e.retries=0);break;case"fallback":for(let e of r?.values()??[])e.fallback=void 0}}function T(e){s=e,I("fallback")}},7452:(e,t,i)=>{let r;i.d(t,{A$:()=>S,CO:()=>k,Ip:()=>$,M9:()=>A,OA:()=>B,Om:()=>E,Un:()=>P,W:()=>D,We:()=>I,Y$:()=>v,Y1:()=>_,c1:()=>F,ey:()=>T,gd:()=>EditorCommand,i6:()=>Command,k7:()=>b,kT:()=>w,kh:()=>R,mc:()=>C,qg:()=>ActiveEditorCommand,sZ:()=>f,w3:()=>y,yi:()=>ActiveEditorCachedCommand});var s=i(7304),o=i(2452),n=i(1080),a=i(7260),l=i(2152),h=i(4408),c=i(6192),u=i(8984),d=i(7824),p=i(8196),g=i(700),m=i(3876);function f(e,t){return t?.document?.uri??e}function w(e){return"editorLine"===e.type}function v(e){return"timeline-item:git"===e.type}function y(e){return"viewItem"===e.type&&(0,o.gh)(e.node.branch)}function b(e){return"viewItem"===e.type&&(0,n.S)(e.node.commit)}function C(e){return"viewItem"===e.type&&a.M.is(e.node.contributor)}function A(e){if("viewItem"!==e.type)return!1;let t=e.node;return null!=t.file&&(null!=t.file.repoPath||null!=t.repoPath)}function k(e){if("viewItem"!==e.type)return!1;let t=e.node;return null!=t.file&&(0,n.S)(t.commit)&&(null!=t.file.repoPath||null!=t.repoPath)}function P(e){if("viewItem"!==e.type)return!1;let t=e.node;return null!=t.file&&null!=t.ref1&&null!=t.ref2&&(null!=t.file.repoPath||null!=t.repoPath)}function S(e){return"viewItem"===e.type&&"string"==typeof e.node.compareRef?.ref&&"string"==typeof e.node.compareWithRef?.ref}function R(e){return"viewItem"===e.type&&e.node instanceof m.e&&e.node instanceof m.y}function D(e){return"viewItem"===e.type&&(0,l.Q7)(e.node.remote)}function $(e){return"viewItem"===e.type&&e.node.repo instanceof h.Oq}function _(e){return"viewItem"===e.type&&"string"==typeof e.node.repoPath}function I(e){return"viewItem"===e.type&&(0,c.K8)(e.node.tag)}function T(e){if("viewItem"!==e.type)return!1;let t=e.node.workspace;return t instanceof u.ey||t instanceof u.ig}function F(e){return null!=e&&null!=e.id&&null!=e.rootUri&&null!=e.inputBox&&null!=e.statusBarCommands}function O(e){return null!=e&&null!=e.id&&null!=e.label&&null!=e.resourceStates&&Array.isArray(e.resourceStates)}function x(e){return null!=e&&null!=e.resourceUri}let Command=class Command{static getMarkdownCommandArgsCore(e,t){return`command:${e}?${encodeURIComponent(JSON.stringify(t)).replace(/([()])/g,"\\$1")}`}contextParsingOptions={expectsEditor:!1};_disposable;constructor(e){if("string"==typeof e){this._disposable=(0,d.or)(e,(...t)=>this._execute(e,...t),this);return}let t=e.map(e=>(0,d.or)(e,(...t)=>this._execute(e,...t),this));this._disposable=s.Disposable.from(...t)}dispose(){this._disposable.dispose()}preExecute(e,...t){return this.execute(...t)}_execute(e,...t){let[i,r]=E(e,{...this.contextParsingOptions},...t);return Array.isArray(i)?(0,p.k3)(this.preExecute,i.map(e=>[e,...r]),this):this.preExecute(i,...r)}};function E(e,t,...i){var r;let o;let n=i[0];if(t?.expectsEditor){if((null==n||null!=n.id&&n.document?.uri!=null)&&(o=n,n=(i=i.slice(1))[0]),i.length>0&&(null==n||n instanceof s.Uri)){let[t,...r]=i;if(null!=t){null==o&&(t.toString()===s.window.activeTextEditor?.document.uri.toString()||e.endsWith("InDiffLeft"))&&(o=s.window.activeTextEditor);let i=r[0];return null!=i&&Array.isArray(i)&&0!==i.length&&i[0]instanceof s.Uri?[{command:e,type:"uris",editor:o,uri:t,uris:i},r.slice(1)]:[{command:e,type:"uri",editor:o,uri:t},r]}i=i.slice(1)}else if(null==o){if(null!=n&&"object"==typeof n&&"lineNumber"in n&&"uri"in n){let[,...t]=i;return[{command:e,type:"editorLine",editor:void 0,line:n.lineNumber-1,uri:n.uri},t]}o=s.window.activeTextEditor}}if(n instanceof g.sl){let[t,...r]=i;if(Array.isArray(n=r[0])&&n[0]instanceof g.sl){let i;[i,...r]=r;let s=[];for(let r of i)r?.constructor===t.constructor&&s.push({command:e,type:"viewItem",node:r,uri:r.uri});return[s,r]}return[{command:e,type:"viewItem",node:t,uri:t.uri},r]}if(x(n)){let t=[],r=0;for(let e of i){if(!x(e))break;r++,t.push(e)}return[{command:e,type:"scm-states",scmResourceStates:t,uri:t[0].resourceUri},i.slice(r)]}if(O(n)){let t=[],r=0;for(let e of i){if(!O(e))break;r++,t.push(e)}return[{command:e,type:"scm-groups",scmResourceGroups:t},i.slice(r)]}if(null!=(r=n)&&null!=r&&null!=r.timestamp&&null!=r.label&&null!=r.ref&&null!=r.previousRef&&null!=r.message){let[t,r,...s]=i;return[{command:e,type:"timeline-item:git",item:t,uri:r},s]}if(F(n)){let[t,...r]=i;return[{command:e,type:"scm",scm:t},r]}return[{command:e,type:"unknown",editor:o,uri:o?.document.uri},i]}let ActiveEditorCommand=class ActiveEditorCommand extends Command{contextParsingOptions={expectsEditor:!0};preExecute(e,...t){return this.execute(e.editor,e.uri,...t)}_execute(e,...t){return super._execute(e,void 0,...t)}};function B(){return r}let ActiveEditorCachedCommand=class ActiveEditorCachedCommand extends ActiveEditorCommand{_execute(e,...t){return r={command:e,args:t},super._execute(e,...t)}};let EditorCommand=class EditorCommand{_disposable;constructor(e){Array.isArray(e)||(e=[e]);let t=[];for(let i of e)t.push(s.commands.registerTextEditorCommand(i,(e,t,...r)=>this.executeCore(i,e,t,...r),this));this._disposable=s.Disposable.from(...t)}dispose(){this._disposable.dispose()}executeCore(e,t,i,...r){return this.execute(t,i,...r)}}},4152:(e,t,i)=>{i.d(t,{W:()=>f});var r=i(7304),s=i(1608),o=i(1080),n=i(2060),a=i(1424),l=i(3828),h=i(7824),c=i(6448),u=i(3732),d=i(3284),p=i(7452),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor;let f=class extends p.i6{constructor(e){super(s.eq.DiffWith),this.container=e}static getMarkdownCommandArgs(e,t){let i;if((0,o.S)(e)){if(null==e.file||null==e.unresolvedPreviousSha)throw Error("Commit has no file");i=e.isUncommitted?{repoPath:e.repoPath,lhs:{sha:"HEAD",uri:e.file.uri},rhs:{sha:"",uri:e.file.uri},line:t}:{repoPath:e.repoPath,lhs:{sha:e.unresolvedPreviousSha,uri:e.file.originalUri??e.file.uri},rhs:{sha:e.sha,uri:e.file.uri},line:t}}else i=e;return super.getMarkdownCommandArgsCore(s.eq.DiffWith,i)}async execute(e){if(e?.lhs!=null&&e?.rhs!=null&&null!=(e={...e,lhs:{...e.lhs},rhs:{...e.rhs},showOptions:null==e.showOptions?void 0:{...e.showOptions}}).repoPath)try{let t=e.lhs.sha,i=e.rhs.sha;if([e.lhs.sha,e.rhs.sha]=await Promise.all([await this.container.git.resolveReference(e.repoPath,e.lhs.sha,e.lhs.uri,{timeout:(0,a.ED)(e.lhs.sha)?100:void 0}),await this.container.git.resolveReference(e.repoPath,e.rhs.sha,e.rhs.uri,{timeout:(0,a.ED)(e.rhs.sha)?100:void 0})]),e.lhs.sha!==n.E1&&(t=e.lhs.sha),e.rhs.sha&&e.rhs.sha!==n.E1){let t=await this.container.git.getFileStatusForCommit(e.repoPath,e.rhs.uri,e.rhs.sha);t?.status==="D"?e.rhs.sha=n.E1:i=e.rhs.sha,t?.status==="A"&&e.lhs.sha.endsWith("^")&&(e.lhs.sha=n.E1)}let[o,l]=await Promise.all([this.container.git.getBestRevisionUri(e.repoPath,e.lhs.uri.fsPath,e.lhs.sha),this.container.git.getBestRevisionUri(e.repoPath,e.rhs.uri.fsPath,e.rhs.sha)]),h=(0,a.c5)(i,{strings:{uncommitted:"Working Tree"}});null==l?h=(0,a.bP)(e.rhs.sha)?"deleted":0===h.length&&e.rhs.sha===n.E1?"not in Working Tree":`deleted${0===h.length?"":` in ${h}`}`:null==o&&(h=`added${0===h.length?"":` in ${h}`}`);let c=e.lhs.sha!==n.E1?(0,a.c5)(t):"";null==o&&0===e.rhs.sha.length&&(null!=l?(c=0===c.length?"":`not in ${c}`,h=""):c=`deleted${0===c.length?"":` in ${c}`}`),null==e.lhs.title&&(null!=o||0!==c.length)&&(e.lhs.title=`${(0,u.g1)(e.lhs.uri.fsPath)}${c?` (${c})`:""}`),null==e.rhs.title&&(e.rhs.title=`${(0,u.g1)(e.rhs.uri.fsPath)}${h?` (${h})`:""}`);let p=null!=e.lhs.title&&null!=e.rhs.title?`${e.lhs.title} ${s.or.ArrowLeftRightLong} ${e.rhs.title}`:e.lhs.title??e.rhs.title;null==e.showOptions&&(e.showOptions={}),null==e.showOptions.viewColumn&&(e.showOptions.viewColumn=r.ViewColumn.Active),null!=e.line&&0!==e.line&&(e.showOptions.selection=new r.Range(e.line,0,e.line,0)),await (0,d.qq)(o??this.container.git.getRevisionUri(n.E1,e.lhs.uri.fsPath,e.repoPath),l??this.container.git.getRevisionUri(n.E1,e.rhs.uri.fsPath,e.repoPath),p,e.showOptions)}catch(e){c.YJ.error(e,"DiffWithCommand","getVersionedFile"),(0,l.qC)("Unable to open compare")}}};f=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o),o})([(0,h.GQ)()],f)},9132:(e,t,i)=>{i.d(t,{e:()=>PickCommandStep,g:()=>er});var r=i(4169),s=i(3664),o=i(7304),n=i(1424),a=i(4408);function l(e,t,i,r){return{...i,item:t,picked:i.picked??(void 0===t?0===e.length:Array.isArray(t)?0===t.length?0===e.length:t.every(t=>e.includes(t)):e.includes(t)),context:r}}var h=i(1072),c=i(1492),u=i(3832);let d=new Map([["create","Create"],["delete","Delete"],["prune","Prune"],["rename","Rename"]]);function p(e,t){return null==t?e:`${d.get(t)} ${e}`}let BranchGitCommand=class BranchGitCommand extends c.AD{subcommand;constructor(e,t){super(e,"branch","branch","Branch",{description:"create, prune, rename, or delete branches"});let i=0;if(t?.state?.subcommand!=null)switch(i++,t?.state.subcommand){case"create":null!=t.state.reference&&i++,!t.state.suggestNameOnly&&null!=t.state.name&&i++;break;case"delete":case"prune":null!=t.state.references&&(!Array.isArray(t.state.references)||0!==t.state.references.length)&&i++;break;case"rename":null!=t.state.reference&&i++,null!=t.state.name&&i++}t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"delete"!==this.subcommand&&"prune"!==this.subcommand&&"rename"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async *steps(e){let t={associatedView:this.container.branchesView,repos:this.container.git.openRepositories,showTags:!1,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;let t=yield*this.pickSubcommandStep(e);if(t===c.QV)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=p("delete"===e.subcommand||"prune"===e.subcommand?"Branches":this.title,e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,u.SQ)(e,t);if(i===c.QV)continue;e.repo=i}}switch(e.subcommand){case"create":!function(e){if(!(e.repo instanceof a.Oq)||"create"!==e.subcommand)throw Error("Missing repository")}(e),yield*this.createCommandSteps(e,t),e.name=void 0;break;case"delete":!function(e){if(!(e.repo instanceof a.Oq)||"delete"!==e.subcommand)throw Error("Missing repository")}(e),yield*this.deleteCommandSteps(e,t);break;case"prune":!function(e){if(!(e.repo instanceof a.Oq)||"prune"!==e.subcommand)throw Error("Missing repository")}(e),yield*this.deleteCommandSteps(e,t);break;case"rename":!function(e){if(!(e.repo instanceof a.Oq)||"rename"!==e.subcommand)throw Error("Missing repository")}(e),yield*this.renameCommandSteps(e,t),e.name=void 0;break;default:(0,c.Qt)(e)}i&&e.counter--}return e.counter<0?c.QV:void 0}*pickSubcommandStep(e){let t=(0,c.eI)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"create",description:"creates a new branch",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified branches",picked:"delete"===e.subcommand,item:"delete"},{label:"prune",description:"deletes local branches with missing upstreams",picked:"prune"===e.subcommand,item:"prune"},{label:"rename",description:"renames the specified branch",picked:"rename"===e.subcommand,item:"rename"}],buttons:[o.QuickInputButtons.Back]}),i=yield t;return(0,c._W)(t,e,i)?i[0].item:c.QV}async *createCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,u.Ep)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to create the new branch from`,picked:e.reference?.ref??(await e.repo.getBranch())?.ref,titleContext:" from",value:(0,n.yc)(e.reference)?e.reference.ref:void 0});if(i===c.QV)break;e.reference=i}if(e.counter<4||null==e.name){let i=yield*(0,u.wp)(e,t,{titleContext:` from ${(0,n.u)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,value:e.name??(0,n._e)(e.reference)});if(i===c.QV)continue;e.name=i}if(this.confirm(e.confirm)){let i=yield*this.createCommandConfirmStep(e,t);if(i===c.QV)continue;e.flags=i}if(e.flags.includes("--worktree")){if((yield*er(this.container,{command:"worktree",state:{subcommand:"create",reference:e.reference,createBranch:e.name}},this.pickedVia))===c.QV)continue;(0,c.Qt)(e);return}(0,c.Qt)(e),e.flags.includes("--switch")?await e.repo.switch(e.reference.ref,{createBranch:e.name}):e.repo.branch(...e.flags,e.name,e.reference.ref)}}*createCommandConfirmStep(e,t){let i=(0,c.GU)((0,u.Qn)(`Confirm ${t.title}`,e,t),[l(e.flags,[],{label:t.title,detail:`Will create a new branch named ${e.name} from ${(0,n.u)(e.reference)}`}),l(e.flags,["--switch"],{label:"Create & Switch to Branch",detail:`Will create and switch to a new branch named ${e.name} from ${(0,n.u)(e.reference)}`}),l(e.flags,["--worktree"],{label:`${t.title} in New Worktree`,description:"avoids modifying your working tree",detail:`Will create a new worktree for a new branch named ${e.name} from ${(0,n.u)(e.reference)}`})],t),r=yield i;return(0,c._W)(i,e,r)?r[0].item:c.QV}*deleteCommandSteps(e,t){let i="prune"===e.subcommand;for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(null==e.references||Array.isArray(e.references)||(e.references=[e.references]),e.counter<3||null==e.references||Array.isArray(e.references)&&0===e.references.length){t.title=p("Branches",e.subcommand);let r=yield*(0,u.CC)(e,t,{filter:i?e=>!e.current&&!!e.upstream?.missing:e=>!e.current,picked:e.references?.map(e=>e.ref),placeholder:i?"Choose branches with missing upstreams to delete":"Choose branches to delete",emptyPlaceholder:i?`No branches with missing upstreams in ${e.repo.formattedName}`:void 0,sort:{current:!1,missingUpstream:!0}});if(r===c.QV)break;e.references=r}t.title=p((0,h.u)("Branch",e.references.length,{only:!0,plural:"Branches"}),"prune"===e.subcommand?"delete":e.subcommand),function(e){if(!Array.isArray(e.references))throw Error("Missing branches")}(e);let r=yield*this.deleteCommandConfirmStep(e,t);r!==c.QV&&(e.flags=r,(0,c.Qt)(e),e.repo.branchDelete(e.references,{force:e.flags.includes("--force"),remote:e.flags.includes("--remotes")}))}}*deleteCommandConfirmStep(e,t){let i=[l(e.flags,[],{label:t.title,detail:`Will delete ${(0,n.u)(e.references)}`})];!e.references.every(e=>e.remote)&&(i.push(l(e.flags,["--force"],{label:`Force ${t.title}`,description:"--force",detail:`Will forcibly delete ${(0,n.u)(e.references)}`})),"prune"!==e.subcommand&&e.references.some(e=>null!=e.upstream)&&i.push(l(e.flags,["--remotes"],{label:`${t.title} & Remote${e.references.filter(e=>!e.remote).length>1?"s":""}`,description:"--remotes",detail:`Will delete ${(0,n.u)(e.references)} and any remote tracking branches`}),l(e.flags,["--force","--remotes"],{label:`Force ${t.title} & Remote${e.references.filter(e=>!e.remote).length>1?"s":""}`,description:"--force --remotes",detail:`Will forcibly delete ${(0,n.u)(e.references)} and any remote tracking branches`})));let r=(0,c.GU)((0,u.Qn)(`Confirm ${t.title}`,e,t),i,t),s=yield r;return(0,c._W)(r,e,s)?s[0].item:c.QV}async *renameCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,u.qQ)(e,t,{filter:e=>!e.remote,picked:e.reference?.ref,placeholder:"Choose a branch to rename"});if(i===c.QV)break;e.reference=i}if(e.counter<4||null==e.name){let i=yield*(0,u.wp)(e,t,{titleContext:` ${(0,n.u)(e.reference,!1)}`,value:e.name??e.reference.name});if(i===c.QV)continue;e.name=i}let i=yield*this.renameCommandConfirmStep(e,t);i!==c.QV&&(e.flags=i,(0,c.Qt)(e),e.repo.branch(...e.flags,e.reference.ref,e.name))}}*renameCommandConfirmStep(e,t){let i=(0,c.GU)((0,u.Qn)(`Confirm ${t.title}`,e,t),[l(e.flags,["-m"],{label:t.title,detail:`Will rename ${(0,n.u)(e.reference)} to ${e.name}`})],t),r=yield i;return(0,c._W)(i,e,r)?r[0].item:c.QV}};let CherryPickGitCommand=class CherryPickGitCommand extends c.AD{constructor(e,t){super(e,"cherry-pick","cherry-pick","Cherry Pick",{description:"integrates changes from specified commits into the current branch"});let i=0;t?.state?.repo!=null&&i++,t?.state?.references!=null&&(!Array.isArray(t.state.references)||0!==t.state.references.length)&&i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}execute(e){e.repo.cherryPick(...e.flags,...e.references.map(e=>e.ref).reverse())}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"cherry"===e}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]),null==e.references||Array.isArray(e.references)||(e.references=[e.references]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,u.SQ)(e,t);if(i===c.QV)break;e.repo=i}}if(null==t.destination){let i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} into ${(0,n.u)(t.destination,{icon:!1})}`,e.counter<2||null==e.references||0===e.references.length){let r=yield*(0,u.Ep)(e,t,{filter:{branches:e=>e.id!==t.destination.id},placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to cherry-pick from`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.references?.[0]?.ref:void 0});if(r===c.QV){i&&e.counter--;continue}(0,n.yc)(r)?(e.references=[r],t.selectedBranchOrTag=void 0):t.selectedBranchOrTag=r}if(e.counter<3&&null!=t.selectedBranchOrTag){let i=(0,n._u)(t.destination.ref,t.selectedBranchOrTag.ref),r=t.cache.get(i);null==r&&(r=this.container.git.getLog(e.repo.path,{ref:i,merges:"first-parent"}),t.cache.set(i,r));let s=yield*(0,u.kt)(e,t,{log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),picked:e.references?.map(e=>e.ref),placeholder:(e,t)=>null==t?`No pickable commits found on ${(0,n.u)(e.selectedBranchOrTag,{icon:!1})}`:`Choose commits to cherry-pick into ${(0,n.u)(e.destination,{icon:!1})}`});if(s===c.QV)continue;e.references=s}if(this.confirm(e.confirm)){let i=yield*this.confirmStep(e,t);if(i===c.QV)continue;e.flags=i}(0,c.Qt)(e),this.execute(e)}return e.counter<0?c.QV:void 0}*confirmStep(e,t){let i=(0,c.GU)((0,u.Qn)(`Confirm ${t.title}`,e,t),[l(e.flags,[],{label:this.title,detail:`Will apply ${(0,n.u)(e.references)} to ${(0,n.u)(t.destination)}`}),l(e.flags,["--edit"],{label:`${this.title} & Edit`,description:"--edit",detail:`Will edit and apply ${(0,n.u)(e.references)} to ${(0,n.u)(t.destination)}`}),l(e.flags,["--no-commit"],{label:`${this.title} without Committing`,description:"--no-commit",detail:`Will apply ${(0,n.u)(e.references)} to ${(0,n.u)(t.destination)} without Committing`})],t),r=yield i;return(0,c._W)(i,e,r)?r[0].item:c.QV}};var g=i(7824),m=i(3732);let CoAuthorsGitCommand=class CoAuthorsGitCommand extends c.AD{constructor(e,t){super(e,"co-authors","co-authors","Add Co-Authors",{description:"adds co-authors to a commit message"});let i=0;t?.state?.repo!=null&&i++,t?.state?.contributors!=null&&(!Array.isArray(t.state.contributors)||0!==t.state.contributors.length)&&i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}async execute(e){let t=await this.container.git.getOrOpenScmRepository(e.repo.path);if(null==t)return;let i=t.inputBox.value,r=i.indexOf("Co-authored-by: ");for(let t of(-1!==r&&(i=i.substring(0,r-1).trimRight()),null==e.contributors||Array.isArray(e.contributors)||(e.contributors=[e.contributors]),e.contributors)){let e;e=i.includes("Co-authored-by: ")?"\n":0!==i.length&&i.endsWith("\n")?"\n\n":"\n\n\n",i+=`${e}Co-authored-by: ${t.getCoauthor()}`}t.inputBox.value=i,await (0,g.CA)("workbench.view.scm")}async *steps(e){let t={repos:this.container.git.openRepositories,activeRepo:void 0,associatedView:this.container.contributorsView,title:this.title},i=await this.container.git.getOpenScmRepositories();i.length&&(t.repos=t.repos.filter(e=>i.find(t=>(0,m.ay)(t.rootUri.fsPath)===e.path)),t.activeRepo=await this.container.git.getOrOpenRepositoryForEditor(),null==t.activeRepo||i.some(e=>e.rootUri.fsPath===t.activeRepo.path)||(t.activeRepo=void 0));let r=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo){if(r=!1,1===t.repos.length)r=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,u.SQ)(e,t);if(i===c.QV)break;e.repo=i}}if(e.counter<2||null==e.contributors){let i=yield*(0,u.ic)(e,t,"Choose contributors to add as co-authors");if(i===c.QV){r&&e.counter--;continue}e.contributors=i}(0,c.Qt)(e),this.execute(e)}return e.counter<0?c.QV:void 0}};var f=i(1608),w=i(9455),v=i(6944);let FetchGitCommand=class FetchGitCommand extends c.AD{constructor(e,t){super(e,"fetch","fetch","Fetch",{description:"fetches changes from one or more remotes"});let i=0;t?.state?.repos!=null&&(!Array.isArray(t.state.repos)||0!==t.state.repos.length)&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}execute(e){return(0,n.MN)(e.reference)?e.repos[0].fetch({branch:e.reference}):this.container.git.fetchAll(e.repos,{all:e.flags.includes("--all"),prune:e.flags.includes("--prune")})}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,w.YN)(e.repos)){if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else{let i=yield*(0,u.MX)(e,t,{skipIfPossible:e.counter>=1});if(i===c.QV)break;e.repos=i}}if(this.confirm(e.confirm)){let r=yield*this.confirmStep(e,t);if(r===c.QV){i&&e.counter--;continue}e.flags=r}(0,c.Qt)(e),this.execute(e)}return e.counter<0?c.QV:void 0}async *confirmStep(e,t){let i,r="";if(1===e.repos.length){let t=await e.repos[0].getLastFetched();0!==t&&(r=`${(0,h.eu)(f.or.Dot,2,2)}Last fetched ${(0,v.Yn)(new Date(t))}`)}if(1===e.repos.length&&(0,n.MN)(e.reference))i=this.createConfirmStep((0,u.Qn)(`Confirm ${t.title}`,e,t,r),[l(e.flags,[],{label:this.title,detail:`Will fetch ${(0,n.u)(e.reference)}`})]);else{let s=1===e.repos.length?`$(repo) ${e.repos[0].formattedName}`:`${e.repos.length} repos`;i=(0,c.GU)((0,u.Qn)(`Confirm ${this.title}`,e,t,r),[l(e.flags,[],{label:this.title,detail:`Will fetch ${s}`}),l(e.flags,["--prune"],{label:`${this.title} & Prune`,description:"--prune",detail:`Will fetch and prune ${s}`}),l(e.flags,["--all"],{label:`${this.title} All`,description:"--all",detail:`Will fetch all remotes of ${s}`}),l(e.flags,["--all","--prune"],{label:`${this.title} All & Prune`,description:"--all --prune",detail:`Will fetch and prune all remotes of ${s}`})],t)}let s=yield i;return(0,c._W)(i,e,s)?s[0].item:c.QV}};var y=i(1144),b=i(1080),C=i(3020);let LogGitCommand=class LogGitCommand extends c.AD{constructor(e,t){super(e,"log","history","Commits",{description:"aka log, shows commit history"});let i=0;t?.state?.repo!=null&&i++,t?.state?.reference!=null&&(i++,"HEAD"!==t.state.reference&&(0,n.yc)(t.state.reference)&&!(0,n.Wi)(t.state.reference)&&i++),this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"log"===e}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,selectedBranchOrTag:void 0,title:this.title},i=!1;for(;this.canStepsContinue(e);){let r;if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,u.SQ)(e,t);if(i===c.QV)break;e.repo=i}}if(!function(e){if(!(e.repo instanceof a.Oq))throw Error("Missing repository")}(e),"HEAD"===e.reference){let t=await e.repo.getBranch();e.reference=t}if(e.counter<2||null==e.reference){let r=yield*(0,u.Ep)(e,t,{placeholder:"Choose a branch or tag to show its commit history",picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.reference?.ref:void 0,ranges:!0});if(r===c.QV){i&&e.counter--;continue}e.reference=r,t.selectedBranchOrTag=void 0}if((!(0,n.yc)(e.reference)||(0,n.Wi)(e.reference))&&(t.selectedBranchOrTag=e.reference),t.title=`${this.title}${(0,h.eu)(f.or.Dot,2,2)}${(0,n.u)(t.selectedBranchOrTag,{icon:!1})}`,e.fileName&&(t.title+=`${(0,h.eu)(f.or.Dot,2,2)}${(0,C.o)(e.fileName,{fileOnly:!0,truncateTo:f.kN-t.title.length-3})}`),e.counter<3&&null!=t.selectedBranchOrTag){let i=t.selectedBranchOrTag.ref,r=t.cache.get(i);null==r&&(r=null!=e.fileName?this.container.git.getLogForFile(e.repo.path,e.fileName,{ref:i}):this.container.git.getLog(e.repo.path,{ref:i}),t.cache.set(i,r));let s=yield*(0,u.eg)(e,t,{ignoreFocusOut:!0,log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found in ${(0,n.u)(e.selectedBranchOrTag,{icon:!1})}`:"Choose a commit",picked:e.reference?.ref});if(s===c.QV)continue;e.reference=s}e.reference instanceof b.Ck&&null==e.reference.file||(e.reference=await this.container.git.getCommit(e.repo.path,e.reference.ref)),e.openPickInView?((0,y.bh)(e.reference,{pin:!1,preserveFocus:!1}),r=c.QV):r=yield*er(this.container,{command:"show",state:{repo:e.repo,reference:e.reference,fileName:e.fileName}},this.pickedVia),e.counter--,r===c.QV&&(0,c.Qt)(e)}return e.counter<0?c.QV:void 0}};var A=i(6776),k=i(8104);let MergeGitCommand=class MergeGitCommand extends c.AD{constructor(e,t){super(e,"merge","merge","Merge",{description:"integrates changes from a specified branch into the current branch"});let i=0;t?.state?.repo!=null&&i++,t?.state?.reference!=null&&i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}execute(e){e.repo.merge(...e.flags,e.reference.ref)}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,pickCommit:!1,pickCommitForItem:!1,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,u.SQ)(e,t);if(i===c.QV)break;e.repo=i}}if(null==t.destination){let i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} into ${(0,n.u)(t.destination,{icon:!1})}`,t.pickCommitForItem=!1,e.counter<2||null==e.reference){let r=new k.qY(t.pickCommit,t,()=>{t.pickCommit=!t.pickCommit,r.on=t.pickCommit}),s=yield*(0,u.Ep)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to merge`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.reference?.ref:void 0,additionalButtons:[r]});if(s===c.QV){i&&e.counter--;continue}e.reference=s,t.selectedBranchOrTag=void 0}if((0,n.yc)(e.reference)||(t.selectedBranchOrTag=e.reference),e.counter<3&&null!=t.selectedBranchOrTag&&(t.pickCommit||t.pickCommitForItem||e.reference.ref===t.destination.ref)){let i=t.selectedBranchOrTag.ref,r=t.cache.get(i);null==r&&(r=this.container.git.getLog(e.repo.path,{ref:i,merges:"first-parent"}),t.cache.set(i,r));let s=yield*(0,u.eg)(e,t,{ignoreFocusOut:!0,log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found on ${(0,n.u)(e.selectedBranchOrTag,{icon:!1})}`:`Choose a commit to merge into ${(0,n.u)(e.destination,{icon:!1})}`,picked:e.reference?.ref});if(s===c.QV)continue;e.reference=s}let r=yield*this.confirmStep(e,t);r!==c.QV&&(e.flags=r,(0,c.Qt)(e),this.execute(e))}return e.counter<0?c.QV:void 0}async *confirmStep(e,t){let i=await this.container.git.getAheadBehindCommitCount(e.repo.path,[(0,n._u)(t.destination.name,e.reference.name)]),r=null!=i?i.ahead+i.behind:0;if(0===r){let i=this.createConfirmStep((0,u.Qn)(t.title,e,t),[],(0,A.wF)(A.QN.Cancel,!0,{label:"OK",detail:`${(0,n.u)(t.destination,{capitalize:!0})} is already up to date with ${(0,n.u)(e.reference)}`}),{placeholder:`Nothing to merge; ${(0,n.u)(t.destination,{label:!1,icon:!1})} is already up to date`}),r=yield i;return(0,c._W)(i,e,r),c.QV}let s=this.createConfirmStep((0,u.Qn)(`Confirm ${t.title}`,e,t),[l(e.flags,[],{label:this.title,detail:`Will merge ${(0,h.u)("commit",r)} from ${(0,n.u)(e.reference)} into ${(0,n.u)(t.destination)}`}),l(e.flags,["--ff-only"],{label:`Fast-forward ${this.title}`,description:"--ff-only",detail:`Will fast-forward merge ${(0,h.u)("commit",r)} from ${(0,n.u)(e.reference)} into ${(0,n.u)(t.destination)}`}),l(e.flags,["--squash"],{label:`Squash ${this.title}`,description:"--squash",detail:`Will squash ${(0,h.u)("commit",r)} from ${(0,n.u)(e.reference)} into one when merging into ${(0,n.u)(t.destination)}`}),l(e.flags,["--no-ff"],{label:`${this.title} without Fast-Forwarding`,description:"--no-ff",detail:`Will create a merge commit when merging ${(0,h.u)("commit",r)} from ${(0,n.u)(e.reference)} into ${(0,n.u)(t.destination)}`}),l(e.flags,["--no-ff","--no-commit"],{label:`${this.title} without Fast-Forwarding or Committing`,description:"--no-ff --no-commit",detail:`Will merge ${(0,h.u)("commit",r)} from ${(0,n.u)(e.reference)} into ${(0,n.u)(t.destination)} without Committing`})]),o=yield s;return(0,c._W)(s,e,o)?o[0].item:c.QV}};var P=i(2452);let PullGitCommand=class PullGitCommand extends c.AD{constructor(e,t){super(e,"pull","pull","Pull",{description:"fetches and integrates changes from a remote into the current branch"});let i=0;t?.state?.repos!=null&&(!Array.isArray(t.state.repos)||0!==t.state.repos.length)&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}async execute(e){if((0,n.MN)(e.reference)&&(!(0,P.gh)(e.reference)||!e.reference.current)){let t=await e.repos[0].getBranch();if(t?.name!==e.reference.name)return e.repos[0].fetch({branch:e.reference,pull:!0})}return this.container.git.pullAll(e.repos,{rebase:e.flags.includes("--rebase")})}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,w.YN)(e.repos)){if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else{let i=yield*(0,u.MX)(e,t,{skipIfPossible:e.counter>=1});if(i===c.QV)break;e.repos=i}}if(this.confirm(e.confirm)){let r=yield*this.confirmStep(e,t);if(r===c.QV){i&&e.counter--;continue}e.flags=r}(0,c.Qt)(e),this.execute(e)}return e.counter<0?c.QV:void 0}async *confirmStep(e,t){let i;if(e.repos.length>1)i=this.createConfirmStep((0,u.Qn)(`Confirm ${t.title}`,e,t),[l(e.flags,[],{label:this.title,detail:`Will pull ${e.repos.length} repos`}),l(e.flags,["--rebase"],{label:`${this.title} with Rebase`,description:"--rebase",detail:`Will pull ${e.repos.length} repos by rebasing`})]);else if((0,n.MN)(e.reference)){if(e.reference.remote)i=this.createConfirmStep((0,u.Qn)(`Confirm ${t.title}`,e,t),[],(0,A.wF)(A.QN.Cancel,!0,{label:`Cancel ${this.title}`,detail:"Cannot pull a remote branch"}));else{let[r]=e.repos,s=await r.getBranch(e.reference.name);i=s?.upstream==null?this.createConfirmStep((0,u.Qn)(`Confirm ${t.title}`,e,t),[],(0,A.wF)(A.QN.Cancel,!0,{label:`Cancel ${this.title}`,detail:"Cannot pull a branch until it has been published"})):this.createConfirmStep((0,u.Qn)(`Confirm ${t.title}`,e,t),[l(e.flags,[],{label:this.title,detail:`Will pull${s.state.behind?` ${(0,h.u)("commit",s.state.behind)} into ${(0,n.u)(s)}`:` into ${(0,n.u)(s)}`}`})])}}else{let[r]=e.repos,[s,o]=await Promise.all([r.getStatus(),r.getLastFetched()]),n="";0!==o&&(n=`${(0,h.eu)(f.or.Dot,2,2)}Last fetched ${(0,v.Yn)(new Date(o))}`);let a=s?.state.behind!=null?` ${(0,h.u)("commit",s.state.behind)} into $(repo) ${r.formattedName}`:` into $(repo) ${r.formattedName}`;i=this.createConfirmStep((0,u.Qn)(`Confirm ${t.title}`,e,t,n),[l(e.flags,[],{label:this.title,detail:`Will pull${a}`}),l(e.flags,["--rebase"],{label:`${this.title} with Rebase`,description:"--rebase",detail:`Will pull and rebase${a}`})],void 0,{additionalButtons:[k.ms],onDidClickButton:async(e,i)=>{if(i!==k.ms||e.busy)return!1;e.title=`Confirm ${t.title}${(0,h.eu)(f.or.Dot,2,2)}Fetching${f.or.Ellipsis}`,e.busy=!0;try{return await r.fetch({progress:!0}),!0}finally{e.busy=!1}}})}let r=yield i;return(0,c._W)(i,e,r)?r[0].item:c.QV}};var S=i(7892);let PushGitCommand=class PushGitCommand extends c.AD{constructor(e,t){super(e,"push","push","Push",{description:"pushes changes from the current branch to a remote"});let i=0;t?.state?.repos!=null&&(!Array.isArray(t.state.repos)||0!==t.state.repos.length)&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}execute(e){let t=e.flags.indexOf("--set-upstream");return -1!==t?this.container.git.pushAll(e.repos,{force:!1,publish:{remote:e.flags[t+1]},reference:e.reference}):this.container.git.pushAll(e.repos,{force:e.flags.includes("--force"),reference:e.reference})}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,w.YN)(e.repos)){if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else if(null!=e.reference){let i=yield*(0,u.SQ)({...e,repos:void 0,repo:e.reference.repoPath},t);if(i===c.QV)break;e.repos=[i]}else{let i=yield*(0,u.MX)(e,t,{skipIfPossible:e.counter>=1});if(i===c.QV)break;e.repos=i}}if(this.confirm(e.confirm)){let r=yield*this.confirmStep(e,t);if(r===c.QV){i&&e.counter--;continue}e.flags=r}(0,c.Qt)(e),this.execute(e)}return e.counter<0?c.QV:void 0}async *confirmStep(e,t){let i;let s=r.i.getCore("git.useForcePushWithLease")??!0,o=s&&(r.i.getCore("git.useForcePushIfIncludes")??!0)&&await this.container.git.supports(e.repos[0].uri,S.B.ForceIfIncludes);if(e.repos.length>1)i=this.createConfirmStep((0,u.Qn)(`Confirm ${t.title}`,e,t),[l(e.flags,[],{label:this.title,detail:`Will push ${e.repos.length} repos`}),l(e.flags,["--force"],{label:`Force ${this.title}${o?" (with lease and if includes)":s?" (with lease)":""}`,description:`--force${s?`-with-lease${o?" --force-if-includes":""}`:""}`,detail:`Will force push${o?" (with lease and if includes)":s?" (with lease)":""} ${e.repos.length} repos`})]);else{let[r]=e.repos,a=[];if((0,n.MN)(e.reference)){if(e.reference.remote)i=this.createConfirmStep((0,u.Qn)(t.title,e,t),[],(0,A.wF)(A.QN.Cancel,!0,{label:"OK",detail:"Cannot push a remote branch"}),{placeholder:"Cannot push a remote branch"});else{let c=await r.getBranch(e.reference.name);if(null!=c&&c?.upstream==null){for(let t of(await r.getRemotes()))a.push(l(e.flags,["--set-upstream",t.name,c.name],{label:`Publish ${c.name} to ${t.name}`,detail:`Will publish ${(0,n.u)(c)} to ${t.name}`}));i=a.length?this.createConfirmStep((0,u.Qn)("Confirm Publish",e,t),a,void 0,{placeholder:"Confirm Publish"}):this.createConfirmStep((0,u.Qn)("Publish",e,t),[],(0,A.wF)(A.QN.Cancel,!0,{label:"OK",detail:"No remotes found"}),{placeholder:"Cannot publish; No remotes found"})}else i=null!=c&&c?.state.behind>0?this.createConfirmStep((0,u.Qn)(`Confirm ${t.title}`,e,t),[l(e.flags,["--force"],{label:`Force ${this.title}${o?" (with lease and if includes)":s?" (with lease)":""}`,description:`--force${s?`-with-lease${o?" --force-if-includes":""}`:""}`,detail:`Will force push${o?" (with lease and if includes)":s?" (with lease)":""} ${c?.state.ahead?` ${(0,h.u)("commit",c.state.ahead)}`:""}${c.getRemoteName()?` to ${c.getRemoteName()}`:""}${null!=c&&c.state.behind>0?`, overwriting ${(0,h.u)("commit",c.state.behind)}${c?.getRemoteName()?` on ${c.getRemoteName()}`:""}`:""}`})],(0,A.wF)(A.QN.Cancel,!0,{label:`Cancel ${this.title}`,detail:`Cannot push; ${(0,n.u)(c)} is behind ${c.getRemoteName()} by ${(0,h.u)("commit",c.state.behind)}`})):null!=c&&c?.state.ahead>0?this.createConfirmStep((0,u.Qn)(`Confirm ${t.title}`,e,t),[l(e.flags,[c.getRemoteName()],{label:this.title,detail:`Will push ${(0,h.u)("commit",c.state.ahead)} from ${(0,n.u)(c)} to ${c.getRemoteName()}`})]):this.createConfirmStep((0,u.Qn)(t.title,e,t),[],(0,A.wF)(A.QN.Cancel,!0,{label:"OK",detail:"No commits found to push"}),{placeholder:"Nothing to push; No commits found to push"})}}else{let c=await r.getStatus(),d={refType:"branch",name:c?.branch??"HEAD",ref:c?.branch??"HEAD",remote:!1,repoPath:r.path};if(c?.state.ahead===0){if(!(0,n.MN)(e.reference)&&null==c.upstream){let t;for(let i of(null!=e.reference?t=` up to and including ${(0,n.u)(e.reference,{label:!1})}`:(e.reference=d,t=""),await r.getRemotes()))a.push(l(e.flags,["--set-upstream",i.name,c.branch],{label:`Publish ${d.name} to ${i.name}`,detail:`Will publish ${(0,n.u)(d)}${t} to ${i.name}`}))}i=a.length?this.createConfirmStep((0,u.Qn)("Confirm Publish",e,t),a,void 0,{placeholder:"Confirm Publish"}):null==c.upstream?this.createConfirmStep((0,u.Qn)("Publish",e,t),[],(0,A.wF)(A.QN.Cancel,!0,{label:"OK",detail:"No remotes found"}),{placeholder:"Cannot publish; No remotes found"}):this.createConfirmStep((0,u.Qn)(t.title,e,t),[],(0,A.wF)(A.QN.Cancel,!0,{label:"OK",detail:`No commits ahead of ${(0,P.IB)(c.upstream)}`}),{placeholder:`Nothing to push; No commits ahead of ${(0,P.IB)(c.upstream)}`})}else{let a,p="",g=await r.getLastFetched();0!==g&&(p=`${(0,h.eu)(f.or.Dot,2,2)}Last fetched ${(0,v.Yn)(new Date(g))}`),a=null!=e.reference?`${c?.state.ahead?` commits up to and including ${(0,n.u)(e.reference,{label:!1})}`:""}${c?.upstream?` to ${(0,P.IB)(c.upstream)}`:""}`:`${c?.state.ahead?` ${(0,h.u)("commit",c.state.ahead)}`:""}${c?.upstream?` to ${(0,P.IB)(c.upstream)}`:""}`,(i=this.createConfirmStep((0,u.Qn)(`Confirm ${t.title}`,e,t,p),[...c?.state.behind?[]:[l(e.flags,[],{label:this.title,detail:`Will push${a}`})],l(e.flags,["--force"],{label:`Force ${this.title}${o?" (with lease and if includes)":s?" (with lease)":""}`,description:`--force${s?`-with-lease${o?" --force-if-includes":""}`:""}`,detail:`Will force push${o?" (with lease and if includes)":s?" (with lease)":""} ${a}${null!=c&&c.state.behind>0?`, overwriting ${(0,h.u)("commit",c.state.behind)}${c?.upstream?` on ${(0,P.IB)(c.upstream)}`:""}`:""}`})],c?.state.behind?(0,A.wF)(A.QN.Cancel,!0,{label:`Cancel ${this.title}`,detail:`Cannot push; ${(0,n.u)(d)} is behind${c?.upstream?` ${(0,P.IB)(c.upstream)}`:""} by ${(0,h.u)("commit",c.state.behind)}`}):void 0)).additionalButtons=[k.ms],i.onDidClickButton=async(e,i)=>{if(i!==k.ms||e.busy)return!1;e.title=`Confirm ${t.title}${(0,h.eu)(f.or.Dot,2,2)}Fetching${f.or.Ellipsis}`,e.busy=!0;try{return await r.fetch({progress:!0}),!0}finally{e.busy=!1}}}}}let a=yield i;return(0,c._W)(i,e,a)?a[0].item:c.QV}};var R=i(3284);let RebaseGitCommand=class RebaseGitCommand extends c.AD{constructor(e,t){super(e,"rebase","rebase","Rebase",{description:"integrates changes from a specified branch into the current branch, by changing the base of the branch and reapplying the commits on top"});let i=0;t?.state?.repo!=null&&i++,t?.state?.reference!=null&&i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}async execute(e){let t;if(e.flags.includes("--interactive")){await this.container.rebaseEditor.enableForNextUse();let e=(0,R.wj)();t=["-c",`"sequence.editor=${e}"`]}e.repo.rebase(t,...e.flags,e.reference.ref)}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,pickCommit:!1,pickCommitForItem:!1,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,u.SQ)(e,t);if(i===c.QV)break;e.repo=i}}if(null==t.destination){let i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} ${(0,n.u)(t.destination,{icon:!1})}`,t.pickCommitForItem=!1,e.counter<2||null==e.reference){let r=new k.qY(t.pickCommit,t,()=>{t.pickCommit=!t.pickCommit,r.on=t.pickCommit}),s=yield*(0,u.Ep)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to rebase`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.reference?.ref:void 0,additionalButtons:[r]});if(s===c.QV){i&&e.counter--;continue}e.reference=s,t.selectedBranchOrTag=void 0}if((0,n.yc)(e.reference)||(t.selectedBranchOrTag=e.reference),e.counter<3&&null!=t.selectedBranchOrTag&&(t.pickCommit||t.pickCommitForItem||e.reference.ref===t.destination.ref)){let i=t.selectedBranchOrTag.ref,r=t.cache.get(i);null==r&&(r=this.container.git.getLog(e.repo.path,{ref:i,merges:"first-parent"}),t.cache.set(i,r));let s=yield*(0,u.eg)(e,t,{ignoreFocusOut:!0,log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found on ${(0,n.u)(e.selectedBranchOrTag,{icon:!1})}`:`Choose a commit to rebase ${(0,n.u)(e.destination,{icon:!1})} onto`,picked:e.reference?.ref});if(s===c.QV)continue;e.reference=s}let r=yield*this.confirmStep(e,t);r!==c.QV&&(e.flags=r,(0,c.Qt)(e),this.execute(e))}return e.counter<0?c.QV:void 0}async *confirmStep(e,t){let i=await this.container.git.getAheadBehindCommitCount(e.repo.path,["revision"===e.reference.refType?(0,n._u)(e.reference.ref,t.destination.ref):(0,n._u)(t.destination.name,e.reference.name)]),r=null!=i?i.ahead+i.behind:0;if(0===r){let i=this.createConfirmStep((0,u.Qn)(t.title,e,t),[],(0,A.wF)(A.QN.Cancel,!0,{label:"OK",detail:`${(0,n.u)(t.destination,{capitalize:!0})} is already up to date with ${(0,n.u)(e.reference)}`}),{placeholder:`Nothing to rebase; ${(0,n.u)(t.destination,{label:!1,icon:!1})} is already up to date`}),r=yield i;return(0,c._W)(i,e,r),c.QV}let s=this.createConfirmStep((0,u.Qn)(`Confirm ${t.title}`,e,t),[l(e.flags,[],{label:this.title,detail:`Will update ${(0,n.u)(t.destination)} by applying ${(0,h.u)("commit",r)} on top of ${(0,n.u)(e.reference)}`}),l(e.flags,["--interactive"],{label:`Interactive ${this.title}`,description:"--interactive",detail:`Will interactively update ${(0,n.u)(t.destination)} by applying ${(0,h.u)("commit",r)} on top of ${(0,n.u)(e.reference)}`})]),o=yield s;return(0,c._W)(s,e,o)?o[0].item:c.QV}};var D=i(1235),$=i(3828),_=i(6448);let I=new Map([["add","Add"],["prune","Prune"],["remove","Remove"]]);let RemoteGitCommand=class RemoteGitCommand extends c.AD{subcommand;constructor(e,t){super(e,"remote","remote","Remote",{description:"add, prune, or remove remotes"});let i=0;if(t?.state?.subcommand!=null)switch(i++,t?.state.subcommand){case"add":null!=t.state.name&&i++,null!=t.state.url&&i++;break;case"prune":case"remove":null!=t.state.remote&&i++}t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"remove"!==this.subcommand&&"prune"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.remotesView,title:this.title},i=!1;for(;this.canStepsContinue(e);){var r,s;if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;let t=yield*this.pickSubcommandStep(e);if(t===c.QV)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=(r=this.title,null==(s=e.subcommand)?r:`${I.get(s)} ${r}`),e.counter<2||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,u.SQ)(e,t);if(i===c.QV)continue;e.repo=i}}switch(e.subcommand){case"add":!function(e){if(!(e.repo instanceof a.Oq)||"add"!==e.subcommand)throw Error("Missing repository")}(e),yield*this.addCommandSteps(e,t),e.name=void 0,e.url=void 0;break;case"prune":!function(e){if(!(e.repo instanceof a.Oq)||"prune"!==e.subcommand)throw Error("Missing repository")}(e),yield*this.pruneCommandSteps(e,t);break;case"remove":!function(e){if(!(e.repo instanceof a.Oq)||"remove"!==e.subcommand)throw Error("Missing repository")}(e),yield*this.removeCommandSteps(e,t);break;default:(0,c.Qt)(e)}i&&e.counter--}return e.counter<0?c.QV:void 0}*pickSubcommandStep(e){let t=(0,c.eI)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"add",description:"adds a new remote",picked:"add"===e.subcommand,item:"add"},{label:"prune",description:"prunes remote branches on the specified remote",picked:"prune"===e.subcommand,item:"prune"},{label:"remove",description:"removes the specified remote",picked:"remove"===e.subcommand,item:"remove"}],buttons:[o.QuickInputButtons.Back]}),i=yield t;return(0,c._W)(t,e,i)?i[0].item:c.QV}async *addCommandSteps(e,t){null==e.flags&&(e.flags=["-f"]);let i=0!==(await e.repo.getRemotes({filter:t=>t.name===e.name})).length;for(;this.canStepsContinue(e);){if(e.counter<3||null==e.name||i){let r=yield*(0,u.UV)(e,t,{placeholder:"Please provide a name for the remote",value:e.name});if(r===c.QV)continue;if(i=0!==(await e.repo.getRemotes({filter:e=>e.name===r})).length){e.counter--;continue}e.name=r}if(e.counter<4||null==e.url){let i=yield*(0,u.Ow)(e,t,{placeholder:"Please provide a URL for the remote",value:e.url});if(i===c.QV)continue;e.url=i}if(this.confirm(e.confirm)){let i=yield*this.addCommandConfirmStep(e,t);if(i===c.QV)continue;e.flags=i}(0,c.Qt)(e),await e.repo.addRemote(e.name,e.url,e.flags.includes("-f")?{fetch:!0}:void 0),!1!==e.reveal&&(0,D.gR)(void 0,{focus:!0,select:!0})}}*addCommandConfirmStep(e,t){let i=(0,c.GU)((0,u.Qn)(`Confirm ${t.title}`,e,t),[l(e.flags,[],{label:t.title,detail:`Will add remote '${e.name}' for ${e.url}`}),l(e.flags,["-f"],{label:`${t.title} and Fetch`,description:"-f",detail:`Will add and fetch remote '${e.name}' for ${e.url}`})],t),r=yield i;return(0,c._W)(i,e,r)?r[0].item:c.QV}async *removeCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null!=e.remote&&"string"==typeof e.remote){let[t]=await e.repo.getRemotes({filter:t=>t.name===e.remote});null!=t?e.remote=t:e.remote=void 0}if(e.counter<3||null==e.remote){let i=yield*(0,u.CS)(e,t,{picked:e.remote?.name,placeholder:"Choose remote to remove"});if(i===c.QV)break;e.remote=i}if(!function(e){if("string"==typeof e.remote)throw Error("Missing remote")}(e),(yield*this.removeCommandConfirmStep(e,t))!==c.QV){(0,c.Qt)(e);try{await e.repo.removeRemote(e.remote.name)}catch(e){_.YJ.error(e),(0,$.qC)("Unable to remove remote")}}}}*removeCommandConfirmStep(e,t){let i=(0,c.GU)((0,u.Qn)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will remove remote '${e.remote.name}'`}],t),r=yield i;return(0,c._W)(i,e,r)?void 0:c.QV}async *pruneCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null!=e.remote&&"string"==typeof e.remote){let[t]=await e.repo.getRemotes({filter:t=>t.name===e.remote});null!=t?e.remote=t:e.remote=void 0}if(e.counter<3||null==e.remote){let i=yield*(0,u.CS)(e,t,{picked:e.remote?.name,placeholder:"Choose a remote to prune"});if(i===c.QV)break;e.remote=i}!function(e){if("string"==typeof e.remote)throw Error("Missing remote")}(e),(yield*this.pruneCommandConfirmStep(e,t))!==c.QV&&((0,c.Qt)(e),e.repo.pruneRemote(e.remote.name))}}*pruneCommandConfirmStep(e,t){let i=(0,c.GU)((0,u.Qn)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will prune remote '${e.remote.name}'`}],t),r=yield i;return(0,c._W)(i,e,r)?void 0:c.QV}};let ResetGitCommand=class ResetGitCommand extends c.AD{constructor(e,t){super(e,"reset","reset","Reset",{description:"resets the current branch to a specified commit"});let i=0;t?.state?.repo!=null&&i++,t?.state?.reference!=null&&i++,this.initialState={counter:i,confirm:t?.confirm??!0,...t?.state},this._canSkipConfirm=!this.initialState.confirm}_canSkipConfirm=!1;get canSkipConfirm(){return this._canSkipConfirm}execute(e){e.repo.reset(...e.flags,e.reference.ref)}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,u.SQ)(e,t);if(i===c.QV)break;e.repo=i}}if(null==t.destination){let i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} ${(0,n.u)(t.destination,{icon:!1})}`,e.counter<2||null==e.reference){let r=t.destination.ref,s=t.cache.get(r);null==s&&(s=this.container.git.getLog(e.repo.path,{ref:r,merges:"first-parent"}),t.cache.set(r,s));let o=yield*(0,u.eg)(e,t,{log:await s,onDidLoadMore:e=>t.cache.set(r,Promise.resolve(e)),placeholder:(e,t)=>null==t?`${e.destination.name} has no commits`:`Choose a commit to reset ${e.destination.name} to`,picked:e.reference?.ref});if(o===c.QV){i&&e.counter--;continue}e.reference=o}if(this.confirm(e.confirm)){let i=yield*this.confirmStep(e,t);if(i===c.QV)continue;e.flags=i}(0,c.Qt)(e),this.execute(e)}return e.counter<0?c.QV:void 0}*confirmStep(e,t){let i=this.createConfirmStep((0,u.Qn)(`Confirm ${t.title}`,e,t),[l(e.flags,[],{label:this.title,detail:`Will reset (leaves changes in the working tree) ${(0,n.u)(t.destination)} to ${(0,n.u)(e.reference)}`}),l(e.flags,["--soft"],{label:`Soft ${this.title}`,description:"--soft",detail:`Will soft reset (leaves changes in the index and working tree) ${(0,n.u)(t.destination)} to ${(0,n.u)(e.reference)}`}),l(e.flags,["--hard"],{label:`Hard ${this.title}`,description:"--hard",detail:`Will hard reset (discards all changes) ${(0,n.u)(t.destination)} to ${(0,n.u)(e.reference)}`})]),r=yield i;return(0,c._W)(i,e,r)?r[0].item:c.QV}};let RevertGitCommand=class RevertGitCommand extends c.AD{constructor(e,t){super(e,"revert","revert","Revert",{description:"undoes the changes of specified commits, by creating new commits with inverted changes"});let i=0;t?.state?.repo!=null&&i++,t?.state?.references!=null&&(!Array.isArray(t.state.references)||0!==t.state.references.length)&&i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}execute(e){e.repo.revert(...e.flags,...e.references.map(e=>e.ref).reverse())}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,title:this.title};null==e.flags&&(e.flags=[]),null==e.references||Array.isArray(e.references)||(e.references=[e.references]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,u.SQ)(e,t);if(i===c.QV)break;e.repo=i}}if(null==t.destination){let i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(e.counter<2||null==e.references||0===e.references.length){let r=t.destination.ref,s=t.cache.get(r);null==s&&(s=this.container.git.getLog(e.repo.path,{ref:r,merges:"first-parent"}),t.cache.set(r,s));let o=yield*(0,u.kt)(e,t,{log:await s,onDidLoadMore:e=>t.cache.set(r,Promise.resolve(e)),placeholder:(e,t)=>null==t?`${e.destination.name} has no commits`:"Choose commits to revert",picked:e.references?.map(e=>e.ref)});if(o===c.QV){i&&e.counter--;continue}e.references=o}let r=yield*this.confirmStep(e,t);r!==c.QV&&(e.flags=r,(0,c.Qt)(e),this.execute(e))}return e.counter<0?c.QV:void 0}*confirmStep(e,t){let i=this.createConfirmStep((0,u.Qn)(`Confirm ${t.title}`,e,t),[l(e.flags,["--no-edit"],{label:this.title,description:"--no-edit",detail:`Will revert ${(0,n.u)(e.references)}`}),l(e.flags,["--edit"],{label:`${this.title} & Edit`,description:"--edit",detail:`Will revert and edit ${(0,n.u)(e.references)}`})]),r=yield i;return(0,c._W)(i,e,r)?r[0].item:c.QV}};var T=i(4516),F=i(548),O=i(2056),x=i(7348),E=i(1644),B=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),U=(e,t,i)=>{if(null!=t){var r;if("object"!=typeof t&&"function"!=typeof t)throw TypeError("Object expected");if(i&&(r=t[B("asyncDispose")]),void 0===r&&(r=t[B("dispose")]),"function"!=typeof r)throw TypeError("Object not disposable");e.push([i,r,t])}else i&&e.push([i]);return t},W=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let N={iconPath:new o.ThemeIcon("person-add"),tooltip:"Pick Authors"},q={iconPath:new o.ThemeIcon("new-file"),tooltip:"Pick Files"},L={iconPath:new o.ThemeIcon("new-folder"),tooltip:"Pick Folder"},M=new Map([["","Search by Message"],["=:","Search by Message"],["message:","Search by Message"],["@:","Search by Author"],["author:","Search by Author"],["#:","Search by Commit SHA"],["commit:","Search by Commit SHA"],["?:","Search by File"],["file:","Search by File"],["~:","Search by Changes"],["change:","Search by Changes"]]);let SearchGitCommand=class SearchGitCommand extends c.AD{constructor(e,t){super(e,"search","search","Commit Search",{description:"aka grep, searches for commits"});let i=0;t?.state?.repo!=null&&i++,t?.state?.query!=null&&!t.prefillOnly&&i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}isMatch(e){return super.isMatch(e)||"grep"===e}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"grep"===e}async *steps(e){let t={container:this.container,repos:this.container.git.openRepositories,associatedView:this.container.searchAndCompareView,commit:void 0,hasVirtualFolders:(0,s.wp)("gitlens:hasVirtualFolders",!1),resultsKey:void 0,resultsPromise:void 0,title:this.title},i=r.i.get("gitCommands.search");null==e.matchAll&&(e.matchAll=i.matchAll),null==e.matchCase&&(e.matchCase=i.matchCase),null==e.matchRegex&&(e.matchRegex=i.matchRegex),null==e.showResultsInSideBar&&(e.showResultsInSideBar=i.showResultsInSideBar??void 0);let o=!1;for(;this.canStepsContinue(e);){let i;if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo){if(o=!1,1===t.repos.length)o=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,u.SQ)(e,t);if(i===c.QV)break;e.repo=i}}if(e.counter<2||null==e.query){let i=yield*this.pickSearchOperatorStep(e,t);if(i===c.QV){o&&e.counter--,e.query=void 0;continue}e.query=i}let r={query:e.query,matchAll:e.matchAll,matchCase:e.matchCase,matchRegex:e.matchRegex},s=(0,T.E$)(r);if((null==t.resultsPromise||t.resultsKey!==s)&&(t.resultsPromise=e.repo.richSearchCommits(r),t.resultsKey=s),e.showResultsInSideBar){this.container.searchAndCompareView.search(e.repo.path,r,{label:{label:`for ${e.query}`}},t.resultsPromise,e.showResultsInSideBar instanceof E.A?e.showResultsInSideBar:void 0);break}if(e.counter<3||null==t.commit){let i=e.repo.path,s=yield*(0,u.eg)(e,t,{ignoreFocusOut:!0,log:await t.resultsPromise,onDidLoadMore:e=>t.resultsPromise=Promise.resolve(e),placeholder:(t,i)=>null==i?`No results for ${e.query}`:`${(0,h.u)("result",i.count,{format:e=>i.hasMore?`${e}+`:void 0})} for ${e.query}`,picked:t.commit?.ref,showInSideBarCommand:new O.uC("$(link-external)  Show Results in Side Bar",()=>void this.container.searchAndCompareView.search(i,r,{label:{label:`for ${e.query}`},reveal:{select:!0,focus:!1,expand:!0}},t.resultsPromise)),showInSideBarButton:{button:k.cG,onDidClick:()=>void this.container.searchAndCompareView.search(i,r,{label:{label:`for ${e.query}`},reveal:{select:!0,focus:!1,expand:!0}},t.resultsPromise)}});if(s===c.QV){e.counter--;continue}t.commit=s}e.openPickInView?((0,y.bh)(t.commit,{pin:!1,preserveFocus:!1}),i=c.QV):i=yield*er(this.container,{command:"show",state:{repo:e.repo,reference:t.commit}},this.pickedVia),e.counter--,i===c.QV&&(0,c.Qt)(e)}return e.counter<0?c.QV:void 0}*pickSearchOperatorStep(e,t){let i=[{label:M.get(""),description:`pattern or message: pattern or =: pattern ${f.or.Dash} use quotes to search for phrases`,alwaysShow:!0,item:"message:"},{label:M.get("author:"),description:"author: pattern or @: pattern",buttons:[N],alwaysShow:!0,item:"author:"},{label:M.get("commit:"),description:"commit: sha or #: sha",alwaysShow:!0,item:"commit:"},t.hasVirtualFolders?void 0:{label:M.get("file:"),description:"file: glob or ?: glob",buttons:[q,L],alwaysShow:!0,item:"file:"},t.hasVirtualFolders?void 0:{label:M.get("change:"),description:"change: pattern or ~: pattern",alwaysShow:!0,item:"change:"}].filter(e=>null!=e),r=new k.gd(e.matchCase),s=new k.mm(e.matchAll),o=new k.WG(e.matchRegex),n=(0,c.eI)({title:(0,u.Qn)(t.title,e,t),placeholder:'e.g. "Updates dependencies" author:eamodio',ignoreFocusOut:!0,matchOnDescription:!0,matchOnDetail:!0,additionalButtons:[r,s,o],items:i,value:e.query,selectValueWhenShown:!1,onDidAccept:async i=>{let r=i.selectedItems[0];return!(0,A.EB)(r)&&(!T.op.has(r.item)||(await Q(r,{},i,n,e,t),!1))},onDidClickButton:(t,i)=>{i===r?(e.matchCase=!e.matchCase,r.on=e.matchCase):i===s?(e.matchAll=!e.matchAll,s.on=e.matchAll):i===o&&(e.matchRegex=!e.matchRegex,o.on=e.matchRegex)},onDidClickItemButton:async function(i,r,s){return r===N?await Q(s,{author:!0},i,n,e,t):r===q?await Q(s,{file:{type:"file"}},i,n,e,t):r===L&&await Q(s,{file:{type:"folder"}},i,n,e,t),!1},onDidChangeValue:r=>{let s=r.value.trim();e.counter=s?3:2;let o=(0,T.Qd)({query:s,matchCase:e.matchCase,matchAll:e.matchAll,matchRegex:e.matchRegex});return r.title=(0,u.Qn)(0===o.size||o.size>1?t.title:`Commit ${M.get(o.keys().next().value)}`,e,t),0===r.value.length?r.items=i:(r.ignoreFocusOut=!0,n.ignoreFocusOut=!0,r.items=[{label:"Search for",description:r.value,item:r.value,picked:!0},...i],r.activeItems=[r.items[0]]),!0}}),a=yield n;return(0,c._W)(n,e,a)?(e.counter--,a[0].item.trim()):(e.counter--,c.QV)}};async function Q(e,t,i,r,s,n){let a=(0,T.Qd)({query:i.value,matchCase:s.matchCase,matchAll:s.matchAll}),l=!1;if(t?.author&&"author:"===e.item){var h=[];try{let e=U(h,(0,c.KO)(r,i)),t=a.get("author:"),o=await (0,F.I)(n.container,s.repo,"Search by Author","Choose contributors to include commits from",{appendReposToTitle:!0,clearButton:!0,ignoreFocusOut:!0,multiselect:!0,picked:e=>null!=t&&(null!=e.email&&t.has(e.email)||null!=e.name&&t.has(e.name)||null!=e.username&&t.has(e.username))});if(e[Symbol.dispose](),null!=o){let e=o.map(e=>e.email??e.name??e.username).filter(e=>null!=e);e.length?a.set("author:",new Set(e)):a.delete("author:")}else l=!0}catch(e){var u=e,d=!0}finally{W(h,u,d)}}else if(t?.file&&"file:"===e.item){var p=[];try{let e=U(p,(0,c.KO)(r,i)),h=a.get("file:"),u=await o.window.showOpenDialog({canSelectFiles:"file"===t.file.type,canSelectFolders:"folder"===t.file.type,canSelectMany:"file"===t.file.type,title:"Search by File",openLabel:"Add to Search",defaultUri:s.repo.folder?.uri});if(e[Symbol.dispose](),u?.length)for(let e of(null==h&&(h=new Set,a.set("file:",h)),u))h.add(n.container.git.getRelativePath(e,s.repo.uri));else l=!0;(null==h||0===h.size)&&a.delete("file:")}catch(e){var g=e,m=!0}finally{W(p,g,m)}}else{let t=a.get(e.item);l=!t?.has("")}i.value=`${(0,x.kn)((0,x.kH)(a.entries(),([e,t])=>`${e}${(0,x.kn)(t,` ${e}`)}`)," ")}${l?` ${e.item}`:""}`,r.onDidChangeValue(i)}var G=i(6560),Y=i(8144);let ShowGitCommand=class ShowGitCommand extends c.AD{constructor(e,t){super(e,"show","show","Show",{description:"shows information about a git reference"});let i=0;t?.state?.repo!=null&&i++,t?.state?.reference!=null&&i++,t?.state?.fileName!=null&&(i+=2),this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}getStepState(e){let t=super.getStepState(e);return{...t,startingStep:e?Math.min(t.startingStep??0,1):0}}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,u.SQ)(e,t);if(i===c.QV)break;e.repo=i}}if(!function(e){if(!(e.repo instanceof a.Oq))throw Error("Missing repository")}(e),(e.counter<2||null==e.reference||!(0,b.S)(e.reference)||null!=e.reference.file)&&(null==e.reference||(0,b.S)(e.reference)||(e.reference=await this.container.git.getCommit(e.reference.repoPath,e.reference.ref)),e.counter<2||null==e.reference)){let r=yield*(0,u.eg)(e,t,{log:{repoPath:e.repo.path,commits:new Map,sha:void 0,range:void 0,count:0,limit:void 0,hasMore:!1},placeholder:"Enter a reference or commit SHA",picked:e.reference?.ref});if(r===c.QV){i&&e.counter--;continue}e.reference=r}if(!function(e){if(!(0,b.S)(e.reference))throw Error("Missing reference")}(e),e.counter<3){null==e.reference.files&&await e.reference.ensureFullDetails();let i=yield*(0,u.yK)(e,t);if(i===c.QV)continue;if(i instanceof Y.qO){let t=yield*i.executeSteps(this.pickedVia);e.counter--,t===c.QV&&(0,c.Qt)(e);continue}if(i instanceof O.Ml&&!(i instanceof G.aG)){(0,c.Qt)(e),i.execute();break}}if(e.counter<4||null==e.fileName){let i=yield*(0,u._I)(e,t,{picked:e.fileName});if(i===c.QV)continue;if(i instanceof G.aG){e.counter-=2;continue}e.fileName=i.file.path}!function(e){if(!e.fileName)throw Error("Missing filename")}(e);let r=yield*(0,u.wx)(e,t);if(r!==c.QV){if(r instanceof G.aG){e.counter-=2;continue}if(r instanceof Y.qO){yield*r.executeSteps(this.pickedVia),e.counter--;continue}if(r instanceof O.Ml){(0,c.Qt)(e),r.execute();break}}}return e.counter<0?c.QV:void 0}};var V=i(1148),z=i(4532);let H=new Map([["apply","Apply"],["drop","Drop"],["list","List"],["pop","Pop"],["push","Push"],["rename","Rename"]]);function j(e,t){return"drop"===t&&(e="Stashes"),null==t?e:`${H.get(t)} ${e}`}let StashGitCommand=class StashGitCommand extends c.AD{subcommand;constructor(e,t){super(e,"stash","stash","Stash",{description:"shelves (stashes) local changes to be reapplied later"});let i=0;if(t?.state?.subcommand!=null)switch(i++,t.state.subcommand){case"apply":case"pop":null!=t.state.reference&&i++;break;case"drop":null!=t.state.references&&i++;break;case"push":null!=t.state.message&&i++;break;case"rename":null!=t.state.reference&&i++,null!=t.state.message&&i++}t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand&&"list"!==this.subcommand}get canSkipConfirm(){return"drop"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.stashesView,readonly:(0,s.wp)("gitlens:readonly",!1)||(0,s.wp)("gitlens:untrusted",!1)||(0,s.wp)("gitlens:hasVirtualFolders",!1),title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,t.readonly&&(e.subcommand="list"),e.counter<1||null==e.subcommand){this.subcommand=void 0;let t=yield*this.pickSubcommandStep(e);if(t===c.QV)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=j(this.title,e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,u.SQ)(e,t);if(i===c.QV)continue;e.repo=i}}switch(e.subcommand){case"apply":case"pop":yield*this.applyOrPopCommandSteps(e,t);break;case"drop":yield*this.dropCommandSteps(e,t);break;case"list":yield*this.listCommandSteps(e,t);break;case"push":yield*this.pushCommandSteps(e,t);break;case"rename":yield*this.renameCommandSteps(e,t),e.message=void 0;break;default:(0,c.Qt)(e)}i&&e.counter--}return e.counter<0?c.QV:void 0}*pickSubcommandStep(e){let t=(0,c.eI)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"apply",description:"integrates changes from the specified stash into the current branch",picked:"apply"===e.subcommand,item:"apply"},{label:"drop",description:"deletes the specified stashes",picked:"drop"===e.subcommand,item:"drop"},{label:"list",description:"lists the saved stashes",picked:"list"===e.subcommand,item:"list"},{label:"pop",description:"integrates changes from the specified stash into the current branch and deletes the stash",picked:"pop"===e.subcommand,item:"pop"},{label:"push",description:"saves your local changes to a new stash and discards them from the working tree and index",picked:"push"===e.subcommand,item:"push"},{label:"rename",description:"renames the specified stash",picked:"rename"===e.subcommand,item:"rename"}],buttons:[o.QuickInputButtons.Back]}),i=yield t;return(0,c._W)(t,e,i)?i[0].item:c.QV}async *applyOrPopCommandSteps(e,t){for(;this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,u.OK)(e,t,{stash:await this.container.git.getStash(e.repo.path),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash to apply to your working tree",picked:e.reference?.ref});if(i===c.QV)break;e.reference=i}if(this.confirm(e.confirm)){let i=yield*this.applyOrPopCommandConfirmStep(e,t);if(i===c.QV)continue;e.subcommand=i}(0,c.Qt)(e);try{if(await e.repo.stashApply("pop"===e.subcommand?`stash@{${e.reference.number}}`:e.reference.ref,{deleteAfter:"pop"===e.subcommand}),e.reference.message){let t=await this.container.git.getScmRepository(e.repo.path);null==t||t.inputBox.value||(t.inputBox.value=e.reference.message)}}catch(e){_.YJ.error(e,t.title),z.w7.is(e,z.ad.WorkingChanges)?o.window.showWarningMessage("Unable to apply stash. Your working tree changes would be overwritten. Please commit or stash your changes before trying again"):(0,$.qC)(e.message)}}}*applyOrPopCommandConfirmStep(e,t){let i=this.createConfirmStep((0,u.Qn)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:"pop"===e.subcommand?`Will delete ${(0,n.u)(e.reference)} and apply the changes to the working tree`:`Will apply the changes from ${(0,n.u)(e.reference)} to the working tree`,item:e.subcommand},{label:j(this.title,"pop"===e.subcommand?"apply":"pop"),detail:"pop"===e.subcommand?`Will apply the changes from ${(0,n.u)(e.reference)} to the working tree`:`Will delete ${(0,n.u)(e.reference)} and apply the changes to the working tree`,item:"pop"===e.subcommand?"apply":"pop"}],void 0,{placeholder:`Confirm ${t.title}`,additionalButtons:[k.OR,k.gt],onDidClickButton:(t,i)=>{i===k.OR?(0,V.bh)(e.reference,{pin:!1,preserveFocus:!0}):i===k.gt&&(0,V.gR)(e.reference,{select:!0,expand:!0})}}),r=yield i;return(0,c._W)(i,e,r)?r[0].item:c.QV}async *dropCommandSteps(e,t){for(;this.canStepsContinue(e);){if(e.counter<3||!e.references?.length){let i=yield*(0,u.qO)(e,t,{stash:await this.container.git.getStash(e.repo.path),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose stashes to delete",picked:e.references?.map(e=>e.ref)});if(i===c.QV)break;e.references=i}if((yield*this.dropCommandConfirmStep(e,t))!==c.QV)for(let i of((0,c.Qt)(e),e.references.sort((e,t)=>parseInt(t.number,10)-parseInt(e.number,10)),e.references))try{await e.repo.stashDelete(`stash@{${i.number}}`,i.ref)}catch(e){_.YJ.error(e,t.title),(0,$.qC)(`Unable to delete stash@{${i.number}}${i.message?`: ${i.message}`:""}`)}}}*dropCommandConfirmStep(e,t){let i=this.createConfirmStep((0,u.Qn)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will delete ${(0,n.u)(e.references)}`}],void 0,{placeholder:`Confirm ${t.title}`}),r=yield i;return(0,c._W)(i,e,r)?void 0:c.QV}async *listCommandSteps(e,t){for(t.title="Stashes";this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,u.OK)(e,t,{stash:await this.container.git.getStash(e.repo.path),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash",picked:e.reference?.ref});if(i===c.QV)break;e.reference=i}let i=yield*er(this.container,{command:"show",state:{repo:e.repo,reference:e.reference}},this.pickedVia);e.counter--,i===c.QV&&(0,c.Qt)(e)}}async *pushCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.message){if(null==e.message){let t=await this.container.git.getScmRepository(e.repo.path);e.message=t?.inputBox.value}let i=yield*this.pushCommandInputMessageStep(e,t);if(i===c.QV)break;e.message=i}if(this.confirm(e.confirm)){let i=yield*this.pushCommandConfirmStep(e,t);if(i===c.QV)continue;e.flags=i}try{e.flags.includes("--snapshot")?await e.repo.stashSaveSnapshot(e.message):await e.repo.stashSave(e.message,e.uris,{includeUntracked:e.flags.includes("--include-untracked"),keepIndex:e.flags.includes("--keep-index"),onlyStaged:e.flags.includes("--staged")}),(0,c.Qt)(e)}catch(r){if(_.YJ.error(r,t.title),r instanceof z.iP&&r.reason===z.gd.ConflictingStagedAndUnstagedLines&&e.flags.includes("--staged")){let t={title:"Yes"},i={title:"No",isCloseAffordance:!0};if(await o.window.showErrorMessage(r.message,{modal:!0},t,i)===t){null==e.uris&&(e.uris=e.onlyStagedUris),e.flags.splice(e.flags.indexOf("--staged"),1);continue}return}let i=r?.message??r?.toString()??"";if(i.includes("newer version of Git")){o.window.showErrorMessage(`Unable to stash changes. ${i}`);return}(0,$.qC)("Unable to stash changes");return}}}async *pushCommandInputMessageStep(e,t){let i=(0,c.eU)({title:(0,u.Qn)(t.title,e,t,null!=e.uris?`${(0,h.eu)(f.or.Dot,2,2)}${1===e.uris.length?(0,C.o)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}`:void 0),placeholder:"Please provide a stash message",value:e.message,prompt:"Enter stash message"}),r=yield i;return(0,c.qW)(i,e,r)&&await (0,c.OK)(i,e,r)?r:c.QV}*pushCommandConfirmStep(e,t){let i=e.flags.includes("--staged"),r=[];i&&r.push("--staged");let s=[];e.uris?.length?(e.flags.includes("--include-untracked")&&r.push("--include-untracked"),s.push(l(e.flags,[...r],{label:t.title,detail:`Will stash changes from ${1===e.uris.length?(0,C.o)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}`})),e.flags.includes("--include-untracked")||s.push(l(e.flags,[...r,"--keep-index"],{label:`${t.title} & Keep Staged`,detail:`Will stash changes from ${1===e.uris.length?(0,C.o)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}, but will keep staged files intact`}))):(s.push(l(e.flags,[...r],{label:t.title,detail:`Will stash ${i?"staged":"uncommitted"} changes`}),l(e.flags,[...r,"--snapshot"],{label:`${t.title} Snapshot`,detail:"Will stash uncommitted changes without changing the working tree"})),i||(s.push(l(e.flags,[...r,"--include-untracked"],{label:`${t.title} & Include Untracked`,description:"--include-untracked",detail:"Will stash uncommitted changes, including untracked files"})),s.push(l(e.flags,[...r,"--keep-index"],{label:`${t.title} & Keep Staged`,description:"--keep-index",detail:`Will stash ${i?"staged":"uncommitted"} changes, but will keep staged files intact`}))));let o=this.createConfirmStep((0,u.Qn)(`Confirm ${t.title}`,e,t),s,void 0,{placeholder:`Confirm ${t.title}`}),n=yield o;return(0,c._W)(o,e,n)?n[0].item:c.QV}async *renameCommandSteps(e,t){for(;this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,u.OK)(e,t,{stash:await this.container.git.getStash(e.repo.path),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash to rename",picked:e.reference?.ref});if(i===c.QV)break;e.reference=i}if(e.counter<4||null==e.message){let i=yield*this.renameCommandInputMessageStep(e,t);if(i===c.QV)continue;e.message=i}if(!this.confirm(e.confirm)||(yield*this.renameCommandConfirmStep(e,t))!==c.QV){(0,c.Qt)(e);try{await e.repo.stashRename(e.reference.name,e.reference.ref,e.message,e.reference.stashOnRef)}catch(e){_.YJ.error(e,t.title),(0,$.qC)(e.message)}}}}async *renameCommandInputMessageStep(e,t){let i=(0,c.eU)({title:(0,u.Qn)(t.title,e,t),placeholder:`Please provide a new message for ${(0,n.u)(e.reference,{icon:!1})}`,value:e.message??e.reference?.message,prompt:"Enter new stash message"}),r=yield i;return(0,c.qW)(i,e,r)&&await (0,c.OK)(i,e,r)?r:c.QV}*renameCommandConfirmStep(e,t){let i=this.createConfirmStep((0,u.Qn)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will rename ${(0,n.u)(e.reference)}`,item:e.subcommand}],void 0,{placeholder:`Confirm ${t.title}`,additionalButtons:[k.OR,k.gt],onDidClickButton:(t,i)=>{i===k.OR?(0,V.bh)(e.reference,{pin:!1,preserveFocus:!0}):i===k.gt&&(0,V.gR)(e.reference,{select:!0,expand:!0})}}),r=yield i;return(0,c._W)(i,e,r)?r[0].item:c.QV}};let StatusGitCommand=class StatusGitCommand extends c.AD{constructor(e,t){super(e,"status","status","Status",{description:"shows status information about a repository"});let i=0;t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,status:void 0,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,u.SQ)(e,t);if(i===c.QV)break;e.repo=i}}if(t.status=await e.repo.getStatus(),null==t.status)return;t.title=`${this.title}${(0,h.eu)(f.or.Dot,2,2)}${(0,n.u)((0,n.op)(t.status.branch,e.repo.path,{refType:"branch",name:t.status.branch,remote:!1,upstream:null!=t.status.upstream?{name:t.status.upstream,missing:!1}:void 0}),{icon:!1})}`;let r=yield*(0,u.SG)(e,t);if(r===c.QV){i&&e.counter--;continue}if(r instanceof Y.qO){let t=yield*r.executeSteps(this.pickedVia);e.counter--,t===c.QV&&(0,c.Qt)(e);continue}if(r instanceof O.Ml){(0,c.Qt)(e),r.execute();break}}}};let SwitchGitCommand=class SwitchGitCommand extends c.AD{constructor(e,t){super(e,"switch","switch","Switch to...",{description:"aka checkout, switches to a specified branch"});let i=0;t?.state?.repos!=null&&(!Array.isArray(t.state.repos)||0!==t.state.repos.length)&&i++,t?.state?.reference!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}_canConfirmOverride;get canConfirm(){return this._canConfirmOverride??!0}async execute(e){await o.window.withProgress({location:o.ProgressLocation.Notification,title:`Switching ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repos`} to ${e.reference.name}`},()=>Promise.all(e.repos.map(t=>t.switch(e.reference.ref,{createBranch:e.createBranch,progress:!1})))),null!=e.fastForwardTo&&e.repos[0].merge("--ff-only",e.fastForwardTo.ref)}isMatch(e){return super.isMatch(e)||"checkout"===e}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"checkout"===e}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,canSwitchToLocalBranch:void 0,promptToCreateBranch:!1,showTags:!1,title:this.title};null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,w.YN)(e.repos)){if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else{let i=yield*(0,u.MX)(e,t,{skipIfPossible:e.counter>=1});if(i===c.QV)break;e.repos=i}}if(e.counter<2||null==e.reference){let r=yield*(0,u.KS)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to switch to`,allowCreate:1===e.repos.length});if(r===c.QV){i&&e.counter--;continue}if("string"==typeof r){yield*er(this.container,{command:"branch",state:{subcommand:"create",repo:e.repos[0],name:r,suggestNameOnly:!0,flags:["--switch"]}},this.pickedVia),(0,c.Qt)(e);return}e.reference=r}if(t.canSwitchToLocalBranch=void 0,(0,n.MN)(e.reference)&&!e.reference.remote){e.createBranch=void 0;let t=await this.container.git.getWorktree(e.reference.repoPath,t=>t.branch===e.reference.name);if(null!=t){if(null!=e.fastForwardTo&&e.repos[0].merge("--ff-only",e.fastForwardTo.ref),(yield*er(this.container,{command:"worktree",state:{subcommand:"open",worktree:t,openOnly:!0,overrides:{disallowBack:!0,confirmation:{title:`Confirm Switch to Worktree \u2022 ${(0,n.u)(e.reference,{icon:!1,label:!1})}`,placeholder:`${(0,n.u)(e.reference,{capitalize:!0,icon:!1})} is linked to a worktree`}}}},this.pickedVia))===c.QV)continue;(0,c.Qt)(e);return}}else if((0,n.MN)(e.reference)&&e.reference.remote){let{values:i}=await this.container.git.getBranches(e.reference.repoPath,{filter:t=>t.upstream?.name===e.reference.name,sort:{orderBy:"date:desc"}});i.length?(t.canSwitchToLocalBranch=i[0],e.createBranch=void 0,t.promptToCreateBranch=!1):t.promptToCreateBranch=!0}if(this.confirm(!!t.promptToCreateBranch||!!t.canSwitchToLocalBranch||e.confirm)){let i=yield*this.confirmStep(e,t);if(i===c.QV)continue;switch(i){case"switchToLocalBranch":e.reference=t.canSwitchToLocalBranch;continue;case"switchToLocalBranchAndFastForward":e.fastForwardTo=e.reference,e.reference=t.canSwitchToLocalBranch;continue;case"switchToNewBranch":{t.title="Switch to New Branch",this._canConfirmOverride=!1;let i=yield*(0,u.wp)(e,t,{titleContext:` from ${(0,n.u)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,value:e.createBranch??(0,n._e)(e.reference)});if(this._canConfirmOverride=void 0,i===c.QV)continue;e.createBranch=i;break}case"switchViaWorktree":case"switchToLocalBranchViaWorktree":case"switchToNewBranchViaWorktree":if((yield*er(this.container,{command:"worktree",state:{subcommand:"create",reference:"switchToLocalBranchViaWorktree"===i?t.canSwitchToLocalBranch:e.reference,createBranch:"switchToNewBranchViaWorktree"===i?e.createBranch:void 0}},this.pickedVia))===c.QV)continue;(0,c.Qt)(e);return}}(0,c.Qt)(e),this.execute(e)}return e.counter<0?c.QV:void 0}*confirmStep(e,t){let i=(0,n.MN)(e.reference)&&!e.reference.remote,r=[];!e.createBranch&&(null!=t.canSwitchToLocalBranch?(r.push((0,O.ZA)("Local")),r.push({label:"Switch to Local Branch",description:"",detail:`Will switch to local ${(0,n.u)(t.canSwitchToLocalBranch)} for ${(0,n.u)(e.reference)}`,item:"switchToLocalBranch"}),1===e.repos.length&&r.push({label:"Switch to Local Branch & Fast-Forward",description:"",detail:`Will switch to and fast-forward local ${(0,n.u)(t.canSwitchToLocalBranch)}`,item:"switchToLocalBranchAndFastForward"})):i&&r.push({label:"Switch to Branch",description:"",detail:`Will switch to ${(0,n.u)(e.reference)}${e.repos.length>1?` in ${e.repos.length} repos`:""}`,item:"switch"})),(!i||e.createBranch||t.promptToCreateBranch)&&(r.length&&r.push((0,O.ZA)("Remote")),r.push({label:"Switch to New Local Branch",description:"",detail:`Will create and switch to a new local branch${e.createBranch?` named ${e.createBranch}`:""} from ${(0,n.u)(e.reference)}${e.repos.length>1?` in ${e.repos.length} repos`:""}`,item:"switchToNewBranch"})),1===e.repos.length&&(r.length&&r.push((0,O.ZA)("Worktree")),i?r.push({label:"Create Worktree for Branch",description:"avoids modifying your working tree",detail:`Will create a new worktree for ${(0,n.u)(e.reference)}`,item:"switchViaWorktree"}):e.createBranch||null==t.canSwitchToLocalBranch?r.push({label:"Create Worktree for New Local Branch",description:"avoids modifying your working tree",detail:`Will create a new worktree for a new local branch${e.createBranch?` named ${e.createBranch}`:""} from ${(0,n.u)(e.reference)}${e.repos.length>1?` in ${e.repos.length} repos`:""}`,item:"switchToNewBranchViaWorktree"}):r.push({label:"Create Worktree for Local Branch",description:"avoids modifying your working tree",detail:`Will create a new worktree for local ${(0,n.u)(t.canSwitchToLocalBranch)}`,item:"switchToLocalBranchViaWorktree"})),i||(r.length&&r.push((0,O.ZA)()),(0,n.MN)(e.reference)?e.createBranch||r.push({label:"Checkout to Remote Branch",description:"(detached)",detail:`Will checkout to ${(0,n.u)(e.reference)}`,item:"switch"}):r.push({label:`Checkout to ${(0,n.eK)(e.reference)}`,description:"(detached)",detail:`Will checkout to ${(0,n.u)(e.reference)}${e.repos.length>1?` in ${e.repos.length} repos`:""}`,item:"switch"}));let s=this.createConfirmStep((0,u.Qn)(`Confirm Switch to ${(0,n.u)(e.reference,{icon:!1,capitalize:!0})}`,e,t),r,void 0,{placeholder:`Confirm ${t.title}`}),o=yield s;return(0,c._W)(s,e,o)?o[0].item:c.QV}};let J=new Map([["create","Create"],["delete","Delete"]]);function K(e,t){return null==t?e:`${J.get(t)} ${e}`}let TagGitCommand=class TagGitCommand extends c.AD{subcommand;constructor(e,t){super(e,"tag","tag","Tag",{description:"create, or delete tags"});let i=0;if(t?.state?.subcommand!=null)switch(i++,t.state.subcommand){case"create":null!=t.state.reference&&i++,null!=t.state.name&&i++,null!=t.state.message&&i++;break;case"delete":null!=t.state.references&&(!Array.isArray(t.state.references)||0!==t.state.references.length)&&i++}t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"delete"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.tagsView,showTags:!1,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;let t=yield*this.pickSubcommandStep(e);if(t===c.QV)break;e.subcommand=t}if(this.subcommand=e.subcommand,e.counter<2||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,u.SQ)(e,t);if(i===c.QV)continue;e.repo=i}}switch(t.title=K("delete"===e.subcommand?"Tags":this.title,e.subcommand),e.subcommand){case"create":yield*this.createCommandSteps(e,t),e.name=void 0;break;case"delete":yield*this.deleteCommandSteps(e,t);break;default:(0,c.Qt)(e)}i&&e.counter--}return e.counter<0?c.QV:void 0}*pickSubcommandStep(e){let t=(0,c.eI)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"create",description:"creates a new tag",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified tags",picked:"delete"===e.subcommand,item:"delete"}],buttons:[o.QuickInputButtons.Back]}),i=yield t;return(0,c._W)(t,e,i)?i[0].item:c.QV}async *createCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,u.Ep)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to create the new tag from`,picked:e.reference?.ref??(await e.repo.getBranch())?.ref,titleContext:" from",value:(0,n.yc)(e.reference)?e.reference.ref:void 0});if(i===c.QV)break;e.reference=i}if(e.counter<4||null==e.name){let i=yield*(0,u.gl)(e,t,{placeholder:"Please provide a name for the new tag",titleContext:` at ${(0,n.u)(e.reference,{capitalize:!0,icon:!1})}`,value:e.name??(0,n._e)(e.reference)});if(i===c.QV)continue;e.name=i}if(e.counter<5||null==e.message){let i=yield*this.createCommandInputMessageStep(e,t);if(i===c.QV)continue;e.message=i}if(0===e.message.length||e.flags.includes("-m")||e.flags.push("-m"),this.confirm(e.confirm)){let i=yield*this.createCommandConfirmStep(e,t);if(i===c.QV)continue;e.flags=i}(0,c.Qt)(e),e.repo.tag(...e.flags,...0!==e.message.length?[`"${e.message}"`]:[],e.name,e.reference.ref)}}async *createCommandInputMessageStep(e,t){let i=(0,c.eU)({title:(0,u.Qn)(`${t.title} at ${(0,n.u)(e.reference,{capitalize:!0,icon:!1})}`,e,t),placeholder:"Please provide an optional message to annotate the tag",value:e.message,prompt:"Enter optional message"}),r=yield i;return(0,c.qW)(i,e,r)&&await (0,c.OK)(i,e,r)?r:c.QV}*createCommandConfirmStep(e,t){let i=(0,c.GU)((0,u.Qn)(`Confirm ${t.title}`,e,t),[l(e.flags,0!==e.message.length?["-m"]:[],{label:t.title,description:0!==e.message.length?"-m":"",detail:`Will create a new tag named ${e.name} at ${(0,n.u)(e.reference)}`}),l(e.flags,0!==e.message.length?["--force","-m"]:["--force"],{label:`Force ${t.title}`,description:`--force${0!==e.message.length?" -m":""}`,detail:`Will forcibly create a new tag named ${e.name} at ${(0,n.u)(e.reference)}`})],t),r=yield i;return(0,c._W)(i,e,r)?r[0].item:c.QV}*deleteCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null==e.references||Array.isArray(e.references)||(e.references=[e.references]),e.counter<3||null==e.references||0===e.references.length){t.title=K("Tags",e.subcommand);let i=yield*(0,u.cZ)(e,t,{picked:e.references?.map(e=>e.ref),placeholder:"Choose tags to delete"});if(i===c.QV)break;e.references=i}t.title=K((0,h.u)("Tag",e.references.length,{only:!0}),e.subcommand),(yield*this.deleteCommandConfirmStep(e,t))!==c.QV&&((0,c.Qt)(e),e.repo.tagDelete(e.references))}}*deleteCommandConfirmStep(e,t){let i=(0,c.GU)((0,u.Qn)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will delete ${(0,n.u)(e.references)}`}],t),r=yield i;return(0,c._W)(i,e,r)?void 0:c.QV}};var Z=i(688),X=i(2060),ee=i(7840);let et=new Map([["create","Create"],["delete","Delete"],["open","Open"],["copy-changes","Copy Changes to"]]);function ei(e,t){return null==t?e:`${et.get(t)} ${e}`}let WorktreeGitCommand=class WorktreeGitCommand extends c.AD{subcommand;constructor(e,t){super(e,"worktree","worktree","Worktree",{description:"open, create, or delete worktrees"});let i=0;if(t?.state?.subcommand!=null)switch(i++,t.state.subcommand){case"create":null!=t.state.uri&&i++,null!=t.state.reference&&i++;break;case"delete":null!=t.state.uris&&(!Array.isArray(t.state.uris)||0!==t.state.uris.length)&&i++;break;case"open":case"copy-changes":null!=t.state.worktree&&i++}t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}_canSkipConfirmOverride;get canSkipConfirm(){return this._canSkipConfirmOverride??"open"===this.subcommand}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.worktreesView,showTags:!1,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=e.overrides?.title??this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;let t=yield*this.pickSubcommandStep(e);if(t===c.QV)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=e.overrides?.title??ei("delete"===e.subcommand?"Worktrees":this.title,e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo){if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,u.SQ)(e,t);if(i===c.QV)continue;e.repo=i}}if("copy-changes"!==e.subcommand&&(e.repo=await e.repo.getMainRepository()??e.repo),!function(e){if(null==e.repo||"string"==typeof e.repo)throw Error("Missing repository")}(e),(yield*(0,u.aq)(e,t,S.i.Worktrees))===c.QV)break;switch(e.subcommand){case"create":yield*this.createCommandSteps(e,t),e.uri=void 0;break;case"delete":null==e.uris||Array.isArray(e.uris)||(e.uris=[e.uris]),yield*this.deleteCommandSteps(e,t);break;case"open":yield*this.openCommandSteps(e,t);break;case"copy-changes":yield*this.copyChangesCommandSteps(e,t);break;default:(0,c.Qt)(e)}i&&e.counter--}return e.counter<0?c.QV:void 0}*pickSubcommandStep(e){let t=(0,c.eI)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"open",description:"opens the specified worktree",picked:"open"===e.subcommand,item:"open"},{label:"create",description:"creates a new worktree",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified worktrees",picked:"delete"===e.subcommand,item:"delete"}],buttons:[o.QuickInputButtons.Back]}),i=yield t;return(0,c._W)(t,e,i)?i[0].item:c.QV}async *createCommandSteps(e,t){for(null==t.defaultUri&&(t.defaultUri=await e.repo.getWorktreesDefaultUri()),null==e.flags&&(e.flags=[]),t.pickedRootFolder=void 0,t.pickedSpecificFolder=void 0,e.confirm=!0,this._canSkipConfirmOverride=void 0;this.canStepsContinue(e);){let i;if(e.counter<3||null==e.reference){let i=yield*(0,u.Ep)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to create the new worktree for`,picked:e.reference?.ref??(await e.repo.getBranch())?.ref,titleContext:" for",value:(0,n.yc)(e.reference)?e.reference.ref:void 0});if(i===c.QV)break;e.reference=i}if(null==e.uri&&(e.uri=t.defaultUri),this.confirm(e.confirm)){let i=yield*this.createCommandConfirmStep(e,t);if(i===c.QV)continue;if("string"==typeof i[0])switch(i[0]){case"changeRoot":{let i=yield*this.createCommandChoosePathStep(e,t,{title:"Choose a Different Root Folder for this Worktree",label:"Choose Root Folder",pickedUri:t.pickedRootFolder,defaultUri:t.pickedRootFolder??t.defaultUri});if(i===c.QV)continue;e.uri=i,t.pickedRootFolder=e.uri,t.pickedSpecificFolder=void 0;continue}case"chooseFolder":{let i=yield*this.createCommandChoosePathStep(e,t,{title:"Choose a Specific Folder for this Worktree",label:"Choose Worktree Folder",pickedUri:t.pickedRootFolder,defaultUri:t.pickedSpecificFolder??t.defaultUri});if(i===c.QV)continue;e.uri=i,t.pickedRootFolder=void 0,t.pickedSpecificFolder=e.uri;continue}}[e.uri,e.flags]=i}if(e.confirm=!0,this._canSkipConfirmOverride=void 0,e.reference?.refType==="branch"&&e.reference?.remote&&!e.flags.includes("-b")&&(e.flags.push("-b"),e.createBranch=(0,n._e)(e.reference),null!=await e.repo.getBranch(e.createBranch)&&(e.createBranch=e.reference.name)),e.flags.includes("-b")){let i;if(null!=e.createBranch){let t=await this.container.git.validateBranchOrTagName(e.repo.path,e.createBranch);t&&(t=null==await e.repo.getBranch(e.createBranch)),t||(i=e.createBranch,e.createBranch=void 0)}if(null==e.createBranch){let r=yield*(0,u.wp)(e,t,{titleContext:` and New Branch from ${(0,n.u)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,value:i??e.createBranch??(0,n._e)(e.reference)});if(r===c.QV){e.flags=[];continue}e.createBranch=r}}let s=e.flags.includes("--direct")?e.uri:o.Uri.joinPath(e.uri,...(e.createBranch??e.reference.name).replace(/\\/g,"/").split("/"));try{null!=e.addRemote&&await e.repo.addRemote(e.addRemote.name,e.addRemote.url,{fetch:!0}),i=await e.repo.createWorktree(s,{commitish:e.reference?.name,createBranch:e.flags.includes("-b")?e.createBranch:void 0,detach:e.flags.includes("--detach"),force:e.flags.includes("--force")}),e.result?.fulfill(i)}catch(t){if(z.Ep.is(t,z.A5.AlreadyCheckedOut)&&!e.flags.includes("--force")){let t={title:"Create New Branch"},i={title:"Create Anyway"},r={title:"Cancel",isCloseAffordance:!0},s=await o.window.showWarningMessage(`Unable to create the new worktree because ${(0,n.u)(e.reference,{icon:!1,quoted:!0})} is already checked out.

Would you like to create a new branch for this worktree or forcibly create it anyway?`,{modal:!0},t,i,r);if(s===t){e.flags.push("-b"),this._canSkipConfirmOverride=!0,e.confirm=!1;continue}if(s===i){e.flags.push("--force"),this._canSkipConfirmOverride=!0,e.confirm=!1;continue}}else if(z.Ep.is(t,z.A5.AlreadyExists)){let e={title:"OK"},t={title:"Open Folder"};o.window.showErrorMessage(`Unable to create a new worktree in '${ee.Q.getFriendlyPath(s)}' because the folder already exists and is not empty.`,e,t).then(e=>{e===t&&(0,R.YH)(s)})}else(0,$.qC)(`Unable to create a new worktree in '${ee.Q.getFriendlyPath(s)}.`)}if((0,c.Qt)(e),null==i)break;!1!==e.reveal&&setTimeout(()=>{this.container.worktreesView.visible&&(0,Z.gR)(i,{select:!0,focus:!1})},100);let a=r.i.get("worktrees.openAfterCreate");if("never"!==a){let r;switch(a){case"always":r=(0,Z.sv)("currentWindow");break;case"alwaysNewWindow":r=(0,Z.sv)("newWindow");break;case"onlyWhenEmpty":r=(0,Z.sv)(o.workspace.workspaceFolders?.length?"newWindow":"currentWindow");break;default:r=[]}yield*this.openCommandSteps({subcommand:"open",repo:e.repo,worktree:i,flags:r,counter:3,confirm:"prompt"===a,openOnly:!0,overrides:{disallowBack:!0}},t)}}}*createCommandChoosePathStep(e,t,i){let r=(0,c.kp)({show:async r=>{let s=await o.window.showOpenDialog({canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1,defaultUri:i.pickedUri??e.uri??t.defaultUri,openLabel:i.label,title:i.title});return null==s||0===s.length?A.QN.Back:s[0]}}),s=yield r;return(0,c.qW)(r,e,s)?s:c.QV}*createCommandConfirmStep(e,t){let i,r=!1;null!=t.pickedSpecificFolder&&(r=!0);let s=t.pickedSpecificFolder??t.pickedRootFolder??e.uri,a=(0,h.ey)(ee.Q.getFriendlyPath(s),60),d=e.repo.uri,p=`${(0,m.g1)(d.path)}.worktrees`;d.toString()!==s.toString()?i=(0,m.k_)(s,d)?o.Uri.joinPath(d,"..",p):(0,m.g1)(s.path)===p?s:o.Uri.joinPath(s,p):(i=o.Uri.joinPath(d,"..",p),r=!1);let g=null!=e.reference?(0,n._e)(e.reference):void 0,f=`<root>/${(0,h.ey)(`${p}/${g?.replace(/\\/g,"/")??""}`,65)}`,w=`<root>/${p}/${e.createBranch||"<new-branch-name>"}`,v=(0,n.MN)(e.reference),y=(0,n.MN)(e.reference)&&e.reference?.remote,b=[];r?(e.createBranch||b.push(l(e.flags,["--direct"],{label:y?"Create Worktree for Local Branch":v?"Create Worktree for Branch":t.title,description:"",detail:`Will create worktree directly in $(folder) ${(0,h.ey)(a,60)}`},s)),b.push(l(e.flags,["-b","--direct"],{label:y?"Create Worktree for New Local Branch":"Create Worktree for New Branch",description:"",detail:`Will create worktree directly in $(folder) ${(0,h.ey)(a,60)}`},s))):(e.createBranch||b.push(l(e.flags,[],{label:y?"Create Worktree for Local Branch":v?"Create Worktree for Branch":t.title,description:"",detail:`Will create worktree in $(folder) ${f}`},i)),b.push(l(e.flags,["-b"],{label:y?"Create Worktree for New Local Branch":"Create Worktree for New Branch",description:"",detail:`Will create worktree in $(folder) ${w}`},i))),r||b.push((0,O.ZA)(),l([],[],{label:"Change Root Folder...",description:`$(folder) ${(0,h.ey)(a,65)}`,picked:!1},"changeRoot")),b.push(l([],[],{label:"Choose a Specific Folder...",description:"",picked:!1},"chooseFolder"));let C=(0,c.GU)((0,u.Qn)(`Confirm ${t.title} \u2022 ${e.createBranch||(0,n.u)(e.reference,{icon:!1,label:!1})}`,e,t),b,t),A=yield C;return(0,c._W)(C,e,A)?[A[0].context,A[0].item]:c.QV}async *deleteCommandSteps(e,t){for(t.worktrees=await e.repo.getWorktrees(),null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.uris||0===e.uris.length){t.title=ei("Worktrees",e.subcommand);let i=yield*(0,u.O)(e,t,{filter:e=>!e.main||!e.opened,includeStatus:!0,picked:e.uris?.map(e=>e.toString()),placeholder:"Choose worktrees to delete"});if(i===c.QV)break;e.uris=i.map(e=>e.uri)}t.title=ei((0,h.u)("Worktree",e.uris.length,{only:!0}),e.subcommand);let i=yield*this.deleteCommandConfirmStep(e,t);if(i!==c.QV)for(let r of(e.flags=i,(0,c.Qt)(e),e.uris)){let i=!1;do{i=!1;let s=e.flags.includes("--force");try{if(s){let e;let i=t.worktrees.find(e=>e.uri.toString()===r.toString());try{e=await i?.getStatus()}catch{}if(e?.hasChanges){let e={title:"Force Delete"},t={title:"Cancel",isCloseAffordance:!0};if(await o.window.showWarningMessage(`The worktree in '${r.fsPath}' has uncommitted changes.

Deleting it will cause those changes to be FOREVER LOST.
This is IRREVERSIBLE!

Are you sure you still want to delete it?`,{modal:!0},e,t)!==e)return}}await e.repo.deleteWorktree(r,{force:s})}catch(t){if(z.kz.is(t)){if(t.reason===z.as.MainWorkingTree)o.window.showErrorMessage("Unable to delete the main worktree");else if(!s){let s={title:"Force Delete"},n={title:"Cancel",isCloseAffordance:!0};await o.window.showErrorMessage(t.reason===z.as.HasChanges?`Unable to delete worktree because there are UNCOMMITTED changes in '${r.fsPath}'.

Forcibly deleting it will cause those changes to be FOREVER LOST.
This is IRREVERSIBLE!

Would you like to forcibly delete it?`:`Unable to delete worktree in '${r.fsPath}'.

Would you like to try to forcibly delete it?`,{modal:!0},s,n)===s&&(e.flags.push("--force"),i=!0)}}else(0,$.qC)(`Unable to delete worktree in '${r.fsPath}.`)}}while(i)}}}*deleteCommandConfirmStep(e,t){let i=(0,c.GU)((0,u.Qn)(`Confirm ${t.title}`,e,t),[l(e.flags,[],{label:t.title,detail:`Will delete ${(0,h.u)("worktree",e.uris.length,{only:1===e.uris.length})}${1===e.uris.length?` in $(folder) ${ee.Q.getFriendlyPath(e.uris[0])}`:""}`}),l(e.flags,["--force"],{label:`Force ${t.title}`,description:"including ANY UNCOMMITTED changes",detail:`Will forcibly delete ${(0,h.u)("worktree",e.uris.length,{only:1===e.uris.length})} ${1===e.uris.length?` in $(folder) ${ee.Q.getFriendlyPath(e.uris[0])}`:""}`})],t),r=yield i;return(0,c._W)(i,e,r)?r[0].item:c.QV}async *openCommandSteps(e,t){for(null==e.flags&&(e.flags=[]),this._canSkipConfirmOverride=!0;this.canStepsContinue(e);){if(e.counter<3||null==e.worktree){t.title=ei("Worktree",e.subcommand),t.worktrees??=await e.repo.getWorktrees();let i=yield*(0,u.gb)(e,t,{includeStatus:!0,picked:e.worktree?.uri?.toString(),placeholder:"Choose worktree to open"});if(i===c.QV)break;e.worktree=i}if(t.title=ei(`Worktree \u2022 ${e.worktree.name}`,e.subcommand),this.confirm(e.confirm)){let i=yield*this.openCommandConfirmStep(e,t);if(i===c.QV)continue;e.flags=i}(0,c.Qt)(e),e.flags.includes("--reveal-explorer")?(0,R.YH)(e.worktree.uri):(0,R.EX)(e.worktree.uri,{location:(0,Z.qR)(e.flags)})}}*openCommandConfirmStep(e,t){let i=[l(e.flags,[],{label:"Open Worktree",detail:"Will open the worktree in the current window"}),l(e.flags,["--new-window"],{label:"Open Worktree in a New Window",detail:"Will open the worktree in a new window"})];e.openOnly||i.push(l(e.flags,["--add-to-workspace"],{label:"Add Worktree to Workspace",detail:"Will add the worktree into the current workspace"}),l(e.flags,["--reveal-explorer"],{label:"Reveal in File Explorer",description:`$(folder) ${(0,h.ey)(ee.Q.getFriendlyPath(e.worktree.uri),40)}`,detail:"Will open the worktree in the File Explorer"}));let r=(0,c.GU)((0,u.Qn)(e.overrides?.confirmation?.title??`Confirm ${t.title}`,e,t),i,t,void 0,{disallowBack:e.overrides?.disallowBack,placeholder:e.overrides?.confirmation?.placeholder??"Confirm Open Worktree"}),s=yield r;return(0,c._W)(r,e,s)?s[0].item:c.QV}async *copyChangesCommandSteps(e,t){for(;this.canStepsContinue(e);){if(t.title=e?.overrides?.title??ei("Worktree",e.subcommand),e.counter<3||null==e.worktree){let i;switch(t.worktrees??=await e.repo.getWorktrees(),e.changes.type){case"index":i="Choose a worktree to copy your staged changes to";break;case"working-tree":i="Choose a worktree to copy your working changes to";break;default:i="Choose a worktree to copy changes to"}let r=yield*(0,u.gb)(e,t,{excludeOpened:!0,includeStatus:!0,picked:e.worktree?.uri?.toString(),placeholder:i});if(r===c.QV)break;e.worktree=r}if(!e.changes.contents||!e.changes.baseSha){let t=await this.container.git.getDiff(e.repo.uri,"index"===e.changes.type?X.QD:X.Oy,"HEAD");if(!t?.contents){o.window.showErrorMessage("No changes to copy"),(0,c.Qt)(e);break}e.changes.contents=t.contents,e.changes.baseSha=t.from}if(!(0,n.kp)(e.changes.baseSha)){let t=await this.container.git.getCommit(e.repo.uri,e.changes.baseSha);null!=t&&(e.changes.baseSha=t.sha)}if(!this.confirm(e.confirm)||(yield*this.copyChangesCommandConfirmStep(e,t))!==c.QV){(0,c.Qt)(e);try{let t=await this.container.git.createUnreachableCommitForPatch(e.worktree.uri,e.changes.contents,e.changes.baseSha,"Copied Changes");if(null==t)return;await this.container.git.applyUnreachableCommitForPatch(e.worktree.uri,t.sha,{stash:!1}),o.window.showInformationMessage("Changes copied successfully")}catch(e){if(e instanceof z.mw){if(e.reason===z.Mp.AppliedWithConflicts)o.window.showWarningMessage("Changes copied with conflicts");else if(e.reason===z.Mp.ApplyAbortedWouldOverwrite){o.window.showErrorMessage("Unable to copy changes as some local changes would be overwritten");return}else{o.window.showErrorMessage(`Unable to copy changes: ${e.message}`);return}}else{o.window.showErrorMessage(`Unable to copy changes: ${e.message}`);return}}yield*this.openCommandSteps({subcommand:"open",repo:e.repo,worktree:e.worktree,flags:[],counter:3,confirm:!0,openOnly:!0,overrides:{disallowBack:!0}},t)}}}async *copyChangesCommandConfirmStep(e,t){let i=await this.container.git.getDiffFiles(e.repo.uri,e.changes.contents),r=i?.files.length??0,s=[];switch(e.changes.type){case"index":s.push({label:"Copy Staged Changes to Worktree",detail:`Will copy the staged changes${r>0?` (${(0,h.u)("file",r)})`:""} to worktree '${e.worktree.name}'`});break;case"working-tree":s.push({label:"Copy Working Changes to Worktree",detail:`Will copy the working changes${r>0?` (${(0,h.u)("file",r)})`:""} to worktree '${e.worktree.name}'`});break;default:s.push(l([],[],{label:"Copy Changes to Worktree",detail:`Will copy the changes${r>0?` (${(0,h.u)("file",r)})`:""} to worktree '${e.worktree.name}'`}))}let o=(0,c.GU)(`Confirm ${t.title} \u2022 ${e.worktree.name}`,s,t),n=yield o;return(0,c._W)(o,e,n)?void 0:c.QV}};function er(e,t,i){let r=new PickCommandStep(e,t),s=r.find(t.command);return null==s?function*(){}():(r.setCommand(s,i),s.executeSteps())}let PickCommandStep=class PickCommandStep{constructor(e,t){this.container=e;let i=(0,s.wp)("gitlens:hasVirtualFolders",!1),o=i||(0,s.wp)("gitlens:readonly",!1)||(0,s.wp)("gitlens:untrusted",!1);if(this.items=[o?void 0:new BranchGitCommand(e,t?.command==="branch"?t:void 0),o?void 0:new CherryPickGitCommand(e,t?.command==="cherry-pick"?t:void 0),i?void 0:new CoAuthorsGitCommand(e,t?.command==="co-authors"?t:void 0),o?void 0:new FetchGitCommand(e,t?.command==="fetch"?t:void 0),new LogGitCommand(e,t?.command==="log"?t:void 0),o?void 0:new MergeGitCommand(e,t?.command==="merge"?t:void 0),o?void 0:new PullGitCommand(e,t?.command==="pull"?t:void 0),o?void 0:new PushGitCommand(e,t?.command==="push"?t:void 0),o?void 0:new RebaseGitCommand(e,t?.command==="rebase"?t:void 0),o?void 0:new RemoteGitCommand(e,t?.command==="remote"?t:void 0),o?void 0:new ResetGitCommand(e,t?.command==="reset"?t:void 0),o?void 0:new RevertGitCommand(e,t?.command==="revert"?t:void 0),new SearchGitCommand(e,t?.command==="search"||t?.command==="grep"?t:void 0),new ShowGitCommand(e,t?.command==="show"?t:void 0),i?void 0:new StashGitCommand(e,t?.command==="stash"?t:void 0),i?void 0:new StatusGitCommand(e,t?.command==="status"?t:void 0),o?void 0:new SwitchGitCommand(e,t?.command==="switch"||t?.command==="checkout"?t:void 0),o?void 0:new TagGitCommand(e,t?.command==="tag"?t:void 0),i?void 0:new WorktreeGitCommand(e,t?.command==="worktree"?t:void 0)].filter(e=>null!=e),"usage"===r.i.get("gitCommands.sortBy")){let e=this.container.storage.getWorkspace("gitComandPalette:usage");null!=e&&this.items.sort((t,i)=>(e[i.key]??0)-(e[t.key]??0))}this.hiddenItems=[]}type="pick";buttons=[];hiddenItems;ignoreFocusOut=!1;items;matchOnDescription=!0;placeholder="Choose a git command";title="GitLens";_command;get command(){return this._command}find(e,t=!1){if(t){let t=e.toLowerCase();return this.items.find(e=>e.isFuzzyMatch(t))??this.hiddenItems.find(e=>e.isFuzzyMatch(t))}return this.items.find(t=>t.isMatch(e))??this.hiddenItems.find(t=>t.isMatch(e))}setCommand(e,t){null!=this._command&&(this._command.picked=!1),null!=e&&(e.picked=!0,e.pickedVia=t),this._command=e,null!=e&&this.updateCommandUsage(e.key,Date.now())}async updateCommandUsage(e,t){let i=this.container.storage.getWorkspace("gitComandPalette:usage");void 0===i&&(i=Object.create(null)),i[e]=t,await this.container.storage.storeWorkspace("gitComandPalette:usage",i)}}},5128:(e,t,i)=>{i.d(t,{q:()=>g});var r=i(1608),s=i(2812),o=i(2060),n=i(2036),a=i(3828),l=i(1296),h=i(7824),c=i(6448),u=i(7452),d=Object.defineProperty,p=Object.getOwnPropertyDescriptor;let g=class extends u.qg{constructor(e){super([r.eq.OpenCommitOnRemote,r.eq.Deprecated_OpenCommitInRemote,r.eq.CopyRemoteCommitUrl]),this.container=e}static getMarkdownCommandArgs(e){return super.getMarkdownCommandArgsCore(r.eq.OpenCommitOnRemote,"string"==typeof e?{sha:e}:e)}preExecute(e,t){let i=e.uri;if("editorLine"===e.type&&(t={...t,line:e.line}),(0,u.k7)(e)){if(e.node.commit.isUncommitted)return Promise.resolve(void 0);t={...t,sha:e.node.commit.sha},i=e.node.uri}return(0,u.Y$)(e)&&(t={sha:e.item.ref},i=e.uri),e.command===r.eq.CopyRemoteCommitUrl&&(t={...t,clipboard:!0}),this.execute(e.editor,i,t)}async execute(e,t,i){let d=null!=(t=(0,u.sZ)(t,e))?await s.wv.fromUri(t):void 0,p=(await l.us(d,e,i?.clipboard?"Copy Remote Commit URL":"Open Commit On Remote"))?.path;if(p){null==d&&(d=s.wv.fromRepoPath(p)),i={...i};try{if(null==i.sha){let t=i.line??e?.selection.active.line;if(null==t)return;let r=await this.container.git.getBlameForLine(d,t,e?.document);if(null==r){(0,a.Sk)("Unable to open commit on remote provider");return}i.sha=r.commit.isUncommitted?await r.commit.getPreviousSha()??o.E1:r.commit.sha}await (0,h.gf)(r.eq.OpenOnRemote,{resource:{type:n.o.Commit,sha:i.sha},repoPath:p,clipboard:i.clipboard})}catch(e){c.YJ.error(e,"OpenCommitOnRemoteCommand"),(0,a.qC)("Unable to open commit on remote provider")}}}};g=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?p(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&d(t,i,o),o})([(0,h.GQ)()],g)},9735:(e,t,i)=>{i.d(t,{k:()=>y});var r=i(7304),s=i(1608),o=i(1144),n=i(2812),a=i(1424),l=i(3828),h=i(3056),c=i(2056),u=i(6776),d=i(7824),p=i(6448),g=i(3732),m=i(1072),f=i(7452),w=Object.defineProperty,v=Object.getOwnPropertyDescriptor;let y=class extends f.qg{constructor(e){super([s.eq.OpenFileAtRevision,s.eq.OpenBlamePriorToChange]),this.container=e}static getMarkdownCommandArgs(e,t,i){let o;return o=e instanceof r.Uri?{revisionUri:e,line:i,annotationType:t}:e,super.getMarkdownCommandArgsCore(s.eq.OpenFileAtRevision,o)}async preExecute(e,t){if(e.command===s.eq.OpenBlamePriorToChange){if(null==(t={...t,annotationType:"blame"}).revisionUri&&null!=e.editor){let i=e.editor.selection.active.line;if(i>=0)try{let r=await n.wv.fromUri(e.editor.document.uri),s=await this.container.git.getBlameForLine(r,i);if(null!=s){if(s.commit.isUncommitted){let e=await s.commit.getPreviousComparisonUrisForLine(i);if(e?.previous!=null)t.revisionUri=this.container.git.getRevisionUri(e.previous);else{(0,l.Ko)(s.commit);return}}else{let e=null!=s?await s?.commit.getPreviousSha():void 0;if(null!=e)t.revisionUri=this.container.git.getRevisionUri(s.commit.getGitUri(!0));else{(0,l.Ko)(s.commit);return}}}}catch(e){p.YJ.error(e,"OpenBlamePriorToChangeCommand")}}if(null==t.revisionUri){(0,l.qC)("Unable to open blame");return}}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=(0,f.sZ)(t,e)))return;let r=await n.wv.fromUri(t);null==(i={...i}).line&&(i.line=e?.selection.active.line??0);try{if(null==i.revisionUri){let e=this.container.git.getLogForFile(r.repoPath,r.fsPath).then(e=>e??(r.sha?this.container.git.getLogForFile(r.repoPath,r.fsPath,{ref:r.sha}):void 0)),n=`Open ${"blame"===i.annotationType?"Blame":"File"} at Revision${(0,m.eu)(s.or.Dot,2,2)}`,l=`${n}${r.getFormattedFileName({suffix:r.sha?`:${(0,a.c5)(r.sha)}`:void 0,truncateTo:s.kN-n.length})}`,d=await (0,h.I)(e,l,`Choose a commit to ${"blame"===i.annotationType?"blame":"open"} the file revision from`,{empty:r.sha?void 0:{getState:async()=>{let e,t;let i=[],o=await this.container.git.getStatusForRepo(r.repoPath);if(null!=o)for(let e of o.files){if("?"===e.workingTreeStatus||"!"===e.workingTreeStatus)continue;let[t,o]=(0,g.O)(e.path,void 0,!0);i.push(new c.Ml({label:t,description:o},void 0,s.eq.OpenFileAtRevision,[this.container.git.getAbsoluteUri(e.path,r.repoPath)]))}return i.length?(e=`${r.getFormattedFileName()} is likely untracked, choose a different file?`,t=`${l} (Untracked?)`):e="No commits found",i.push((0,u.wF)(u.QN.Cancel,void 0,{label:i.length?"Cancel":"OK"})),{items:i,placeholder:e,title:t}}},picked:r.sha,keyboard:{keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await (0,o.Av)(t.item.file,t.item,{annotationType:i.annotationType,line:i.line,preserveFocus:!0,preview:!0})}},showOtherReferences:[c.Ml.fromCommand("Choose a Branch or Tag...",s.eq.OpenFileAtRevisionFrom,[t]),c.Ml.fromCommand("Choose a Stash...",s.eq.OpenFileAtRevisionFrom,[t,{stash:!0}])]});if(d?.file==null)return;await (0,o.Av)(d.file,d,{annotationType:i.annotationType,line:i.line,...i.showOptions});return}await (0,o.Av)(i.revisionUri,{annotationType:i.annotationType,line:i.line,...i.showOptions})}catch(e){p.YJ.error(e,"OpenFileAtRevisionCommand"),(0,l.qC)("Unable to open file at revision")}}};y=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?v(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&w(t,i,o),o})([(0,d.GQ)()],y)},8104:(e,t,i)=>{i.d(t,{IH:()=>b,Ks:()=>m,OR:()=>f,WG:()=>c,am:()=>p,cD:()=>C,cG:()=>v,e4:()=>u,gd:()=>l,gt:()=>g,mm:()=>h,ms:()=>n,qY:()=>d,s9:()=>y,uM:()=>ToggleQuickInputButton,uc:()=>o,ur:()=>a,yS:()=>w});var r=i(7304),s=i(9964);let ToggleQuickInputButton=class ToggleQuickInputButton{constructor(e,t=!1){this.state=e,this._on=t}get iconPath(){let e=this.getToggledState().icon;return"string"==typeof e?{dark:r.Uri.file(s.Container.instance.context.asAbsolutePath(`images/dark/${e}.svg`)),light:r.Uri.file(s.Container.instance.context.asAbsolutePath(`images/light/${e}.svg`))}:e}get tooltip(){return this.getToggledState().tooltip}get on(){return this._on}set on(e){this._on=e}getState(){return"function"==typeof this.state?this.state():this.state}getToggledState(){return this.on?this.getState().on:this.getState().off}};let SelectableQuickInputButton=class SelectableQuickInputButton extends ToggleQuickInputButton{constructor(e,t,i=!1){super({off:{tooltip:e,icon:t.off},on:{tooltip:e,icon:t.on}},i)}};let o={iconPath:new r.ThemeIcon("clear-all"),tooltip:"Clear"},n={iconPath:new r.ThemeIcon("sync"),tooltip:"Fetch"},a={iconPath:new r.ThemeIcon("refresh"),tooltip:"Load More"},l=class extends SelectableQuickInputButton{constructor(e=!1){super("Match Case",{off:"icon-match-case",on:"icon-match-case-selected"},e)}},h=class extends SelectableQuickInputButton{constructor(e=!1){super("Match All",{off:"icon-match-all",on:"icon-match-all-selected"},e)}},c=class extends SelectableQuickInputButton{constructor(e=!1){super("Match using Regular Expressions",{off:"icon-match-regex",on:"icon-match-regex-selected"},e)}},u={iconPath:new r.ThemeIcon("git-commit"),tooltip:"Choose a Specific Commit"},d=class extends ToggleQuickInputButton{constructor(e=!1,t,i){super(()=>({on:{tooltip:"Choose a Specific Commit",icon:new r.ThemeIcon("git-commit")},off:{tooltip:`Choose a Branch${t.showTags?" or Tag":""}`,icon:new r.ThemeIcon("git-branch")}}),e),this.onDidClick=i}},p={iconPath:new r.ThemeIcon("empty-window"),tooltip:"Open in New Window"},g={iconPath:new r.ThemeIcon("search"),tooltip:"Reveal in Side Bar"},m={iconPath:new r.ThemeIcon("settings-gear"),tooltip:"Set as Default Remote"},f={iconPath:new r.ThemeIcon("eye"),tooltip:"Open Details"},w={iconPath:new r.ThemeIcon("compare-changes"),tooltip:"Open Changes"},v={iconPath:new r.ThemeIcon("link-external"),tooltip:"Show Results in Side Bar"},y=class extends SelectableQuickInputButton{constructor(e=!1){super("Show Tags",{off:new r.ThemeIcon("tag"),on:"icon-tag-selected"},e)}},b={iconPath:new r.ThemeIcon("gitlens-confirm-checked"),tooltip:"You will be presented with a required confirmation step before the action is performed"},C=class extends ToggleQuickInputButton{constructor(e=!1,t,i){super(()=>({on:{tooltip:t?"For future actions, you will be presented with confirmation step before the action is performed\nClick to toggle":"You will be presented with confirmation step before the action is performed\nClick to toggle",icon:new r.ThemeIcon("gitlens-confirm-checked")},off:{tooltip:t?"For future actions, you won't be presented with confirmation step before the action is performed\nClick to toggle":"You won't be presented with confirmation step before the action is performed\nClick to toggle",icon:new r.ThemeIcon("gitlens-confirm-unchecked")}}),e),this.onDidClick=i}}},3832:(e,t,i)=>{i.d(t,{CC:()=>j,CS:()=>et,C_:()=>W,Ep:()=>J,I$:()=>Q,KS:()=>K,MX:()=>er,O:()=>el,OK:()=>es,Ok:()=>M,Ow:()=>V,Qn:()=>U,SG:()=>eg,SQ:()=>ei,UV:()=>Y,_I:()=>eu,aq:()=>em,cZ:()=>en,eg:()=>Z,gb:()=>ea,gl:()=>z,ic:()=>ee,kt:()=>X,qO:()=>eo,qQ:()=>H,wp:()=>G,wx:()=>ed,yK:()=>eh});var r=i(7304),s=i(1608),o=i(9964),n=i(6644),a=i(1144),l=i(1888),h=i(1235),c=i(352),u=i(1148),d=i(5920),p=i(688),g=i(2452),m=i(1080),f=i(1424),w=i(2152),v=i(2036),y=i(4408),b=i(6192),C=i(7620),A=i(7880),k=i(6560),P=i(2056),S=i(6776),R=i(8144),D=i(716),$=i(9455),_=i(4169),I=i(3020),T=i(7348),F=i(2356),O=i(1072),x=i(3284),E=i(1492),B=i(8104);function U(e,t,i,r){let o;return 1===i.repos.length?r?`${e}${(0,O.E3)(r,s.kN-e.length)}`:e:(o=null!=t.repo?`${r??""}${(0,O.eu)(s.or.Dot,2,2)}${t.repo.formattedName}`:1===t.repos.length?`${r??""}${(0,O.eu)(s.or.Dot,2,2)}${t.repos[0].formattedName}`:`${(0,O.eu)(s.or.Dot,2,2)}${t.repos.length} repositories`,`${e}${(0,O.E3)(o,s.kN-e.length)}`)}async function W(e,t){return M(e,["branches"],{buttons:t?.buttons,filter:t?.filter!=null?{branches:t.filter}:void 0,picked:t?.picked,sort:t?.sort==null||{branches:t.sort}})}async function N(e,t){return null==e?[]:(await e.getRemotes(t?.filter!=null?{filter:t.filter}:void 0)).map(e=>(0,R.MT)(e,t?.picked!=null&&("string"==typeof t.picked?e.name===t.picked:t.picked.includes(e.name)),{buttons:t?.buttons,upstream:!0}))}async function q(e,t){return M(e,["tags"],{buttons:t?.buttons,filter:t?.filter!=null?{tags:t.filter}:void 0,picked:t?.picked,sort:t?.sort==null||{tags:t.sort}})}async function L(e,{buttons:t,excludeOpened:i,filter:r,includeStatus:s,picked:o}){let n=e instanceof y.Oq?await e.getWorktrees():e,a=[];for(let e of n){let n;if(i&&e.opened||null!=r&&!r(e))continue;let l=!1;if(s)try{n=await e.getStatus()}catch{l=!0}a.push((0,R.WC)(e,null!=o&&("string"==typeof o?e.uri.toString()===o:o.includes(e.uri.toString())),l,{buttons:t,path:!0,status:n}))}return a}async function M(e,t,{buttons:i,filter:r,picked:s,sort:o}={}){let n,a;if(null==e)return[];let l=!1;if(e instanceof y.Oq||1===e.length){l=!0;let i=e instanceof y.Oq?e:e[0],[s,h]=await Promise.allSettled([t.includes("branches")?i.getBranches({filter:r?.branches,sort:"boolean"==typeof o?o:o?.branches}):void 0,t.includes("tags")?i.getTags({filter:r?.tags,sort:!0}):void 0]);n=F.Cv(s)?.values??[],a=F.Cv(h)?.values??[]}else{let[i,s]=await Promise.allSettled([t.includes("branches")?Promise.allSettled(e.map(e=>e.getBranches({filter:r?.branches,sort:"boolean"==typeof o?o:o?.branches}))):void 0,t.includes("tags")?Promise.allSettled(e.map(e=>e.getTags({filter:r?.tags,sort:"boolean"==typeof o?o:o?.tags}))):void 0]),l="fulfilled"===i.status?i.value?.filter(e=>"fulfilled"===e.status)?.map(e=>e.value.values):void 0,h="fulfilled"===s.status?s.value?.filter(e=>"fulfilled"===e.status)?.map(e=>e.value.values):void 0;t.includes("branches")&&null!=l&&(n=(0,g.U5)((0,$.WR)(l,(e,t)=>e.name===t.name))),t.includes("tags")&&null!=h&&(a=(0,b.sD)((0,$.WR)(h,(e,t)=>e.name===t.name)))}return(null==n||0===n.length)&&(null==a||0===a.length)?[]:null!=n&&0!==n.length&&(null==a||0===a.length)?[(0,P.ZA)("Branches"),...await Promise.all(n.filter(e=>!e.remote).map(e=>(0,R.YN)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,current:!!l&&"checkmark",ref:l,status:l,type:"remote"}))),(0,P.ZA)("Remote Branches"),...await Promise.all(n.filter(e=>e.remote).map(e=>(0,R.YN)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,current:!!l&&"checkmark",ref:l,status:l,type:"remote"})))]:null!=a&&0!==a.length&&(null==n||0===n.length)?a.map(e=>(0,R.AB)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,message:!1,ref:l})):[(0,P.ZA)("Branches"),...await Promise.all(n.filter(e=>!e.remote).map(e=>(0,R.YN)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,current:!!l&&"checkmark",ref:l,status:l}))),(0,P.ZA)("Tags"),...a.map(e=>(0,R.AB)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,message:!1,ref:l,type:!0})),(0,P.ZA)("Remote Branches"),...await Promise.all(n.filter(e=>e.remote).map(e=>(0,R.YN)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,current:!!l&&"checkmark",ref:l,status:l,type:"remote"})))]}function Q(e,t){return async(i,r)=>{let s=!1;if(r.startsWith("#")&&(s=!0,r=r.substring(1)),null==e)return!1;if(Array.isArray(e)){if(1!==e.length)return!1;e=e[0]}if(s&&t?.ranges&&(0,f.U1)(r))return i.items=[(0,R.Al)(r,e.path,!0,{alwaysShow:!0,buttons:t?.buttons,ref:!1,icon:!1})],!0;if(!await o.Container.instance.git.validateReference(e.path,r))return!!s&&(i.items=[(0,S.wF)(S.QN.Back,!0,{label:"Enter a reference or commit SHA"})],!0);if(!s&&await o.Container.instance.git.hasBranchOrTag(e.path,{filter:{branches:e=>e.name.includes(r),tags:e=>e.name.includes(r)}}))return!1;let n=await o.Container.instance.git.getCommit(e.path,r);return i.items=[await (0,R.KK)(n,!0,{alwaysShow:!0,buttons:t?.buttons,compact:!0,icon:"avatar"})],!0}}async function*G(e,t,i){let r=(0,E.eU)({title:U(`${t.title}${i.titleContext??""}`,e,t),placeholder:i.placeholder??"Branch name",value:i.value,prompt:i.prompt??"Please provide a new branch name",validate:async t=>{if(null==t)return[!1,void 0];if(0===(t=t.trim()).length)return[!1,"Please enter a valid branch name"];if("repo"in e)return await o.Container.instance.git.validateBranchOrTagName(e.repo.path,t)?await e.repo.getBranch(t)?[!1,`A branch named '${t}' already exists`]:[!0,void 0]:[!1,`'${t}' isn't a valid branch name`];for(let i of e.repos){if(!await o.Container.instance.git.validateBranchOrTagName(i.path,t))return[!1,`'${t}' isn't a valid branch name`];if(await i.getBranch(t))return[!1,`A branch named '${t}' already exists`]}return[!0,void 0]}}),s=yield r;return(0,E.qW)(r,e,s)&&await (0,E.OK)(r,e,s)?s:E.QV}async function*Y(e,t,i){let r=(0,E.eU)({title:U(`${t.title}${i.titleContext??""}`,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter remote name",validate:async t=>null==t?[!1,void 0]:0===(t=t.trim()).length?[!1,"Please enter a valid remote name"]:/[^a-zA-Z0-9-_.]/.test(t)?[!1,`'${t}' isn't a valid remote name`]:"repo"in e&&0!==(await e.repo.getRemotes({filter:e=>e.name===t})).length?[!1,`A remote named '${t}' already exists`]:[!0,void 0]}),s=yield r;return(0,E.qW)(r,e,s)&&await (0,E.OK)(r,e,s)?s:E.QV}async function*V(e,t,i){let r=(0,E.eU)({title:U(`${t.title}${i.titleContext??""}`,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter remote URL",validate:e=>{if(null==e)return[!1,void 0];if(0===(e=e.trim()).length)return[!1,"Please enter a valid remote URL"];let t=C.wT.test(e);return[t,t?void 0:`'${e}' isn't a valid remote URL`]}}),s=yield r;return(0,E.qW)(r,e,s)&&await (0,E.OK)(r,e,s)?s:E.QV}async function*z(e,t,i){let r=(0,E.eU)({title:U(`${t.title}${i.titleContext??""}`,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter tag name",validate:async t=>{if(null==t)return[!1,void 0];if(0===(t=t.trim()).length)return[!1,"Please enter a valid tag name"];if("repo"in e){let i=await o.Container.instance.git.validateBranchOrTagName(e.repo.path,t);return[i,i?void 0:`'${t}' isn't a valid tag name`]}for(let i of e.repos)if(!await o.Container.instance.git.validateBranchOrTagName(i.path,t))return[!1,`'${t}' isn't a valid branch name`];return[!0,void 0]}}),s=yield r;return(0,E.qW)(r,e,s)&&await (0,E.OK)(r,e,s)?s:E.QV}function*H(e,t,{filter:i,picked:r,placeholder:s,titleContext:o}){let a=W(e.repo,{buttons:[B.gt],filter:i,picked:r}).then(e=>0===e.length?[(0,S.wF)(S.QN.Back,!0),(0,S.wF)(S.QN.Cancel)]:e),l=(0,E.eI)({title:U(`${t.title}${o??""}`,e,t),placeholder:t=>t?s:`No branches found in ${e.repo.formattedName}`,matchOnDetail:!0,items:a,onDidClickItemButton:(e,t,{item:i})=>{t===B.gt&&n.gR(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await n.gR(i,{select:!0,focus:!1,expand:!0})}}),h=yield l;return(0,E._W)(l,e,h)?h[0].item:E.QV}function*j(e,t,{filter:i,picked:r,placeholder:s,emptyPlaceholder:o,sort:a,titleContext:l}){let h=W(e.repo,{buttons:[B.gt],filter:i,picked:r,sort:a}).then(e=>e.length?e:[(0,S.wF)(S.QN.Back,!0),(0,S.wF)(S.QN.Cancel)]),c=(0,E.eI)({multiselect:!0,title:U(`${t.title}${l??""}`,e,t),placeholder:t=>t?s:o??`No branches found in ${e.repo.formattedName}`,matchOnDetail:!0,items:h,onDidClickItemButton:(e,t,{item:i})=>{t===B.gt&&n.gR(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await n.gR(i,{select:!0,focus:!1,expand:!0})}}),u=yield c;return(0,E._W)(c,e,u)?u.map(e=>e.item):E.QV}function*J(e,t,{filter:i,picked:r,placeholder:s,titleContext:o,value:l,additionalButtons:h,ranges:c}){t.showTags=!0;let u=new B.s9(t.showTags),p=async()=>M(e.repo,t.showTags?["branches","tags"]:["branches"],{buttons:"boolean"==typeof t.pickCommitForItem?[B.e4,B.gt]:[B.gt],filter:i,picked:r,sort:!0}),g=p().then(e=>0===e.length?[(0,S.wF)(S.QN.Back,!0),(0,S.wF)(S.QN.Cancel)]:e),m=(0,E.eI)({title:U(`${t.title}${o??""}`,e,t),placeholder:i=>i?`${"string"==typeof s?s:s(t)} (or enter a revision using #)`:`No branches${t.showTags?" or tags":""} found in ${e.repo.formattedName}`,matchOnDescription:!0,matchOnDetail:!0,value:l,selectValueWhenShown:!0,items:g,additionalButtons:[...h??[],u],onDidClickItemButton:(e,i,{item:r})=>i===B.e4?(t.pickCommitForItem=!0,!0):(i===B.gt&&((0,f.MN)(r)?n.gR(r,{select:!0,focus:!1,expand:!0}):(0,f._A)(r)?d.gR(r,{select:!0,focus:!1,expand:!0}):(0,f.yc)(r)&&a.bh(r,{pin:!1,preserveFocus:!0})),!1),onDidClickButton:async(i,r)=>{if(r===u){i.busy=!0;try{t.showTags=!t.showTags,u.on=t.showTags;let r=await p();i.placeholder=0===r.length?`${e.repo.formattedName} has no branches${t.showTags?" or tags":""}`:`${"string"==typeof s?s:s(t)} (or enter a revision using #)`,i.items=r}finally{i.busy=!1}}},keys:["right","alt+right","ctrl+right"],onDidPressKey:(e,t,{item:i})=>{(0,f.MN)(i)?n.gR(i,{select:!0,focus:!1,expand:!0}):(0,f._A)(i)?d.gR(i,{select:!0,focus:!1,expand:!0}):(0,f.yc)(i)&&a.bh(i,{pin:!1,preserveFocus:!0})},onValidateValue:Q(e.repo,{ranges:c})}),w=yield m;return(0,E._W)(m,e,w)?w[0].item:E.QV}function*K(e,t,{allowCreate:i,filter:s,picked:o,placeholder:l,titleContext:h,value:c}){t.showTags=1===e.repos.length;let u=new B.s9(t.showTags),p={label:"Create New Branch...",iconPath:new r.ThemeIcon("plus"),alwaysShow:!0,item:""},g=()=>M(e.repos,t.showTags?["branches","tags"]:["branches"],{buttons:[B.gt],filter:{branches:1===e.repos.length?void 0:e=>!e.remote,...s},picked:o??e.reference?.ref,sort:{branches:{orderBy:"date:desc"},tags:{orderBy:"date:desc"}}}),m=g().then(e=>0===e.length?[(0,S.wF)(S.QN.Back,!0),(0,S.wF)(S.QN.Cancel)]:i?[p,...e]:e),w=(0,E.eI)({title:U(`${t.title}${h??""}`,e,t),placeholder:i=>i?`${"string"==typeof l?l:l(t)} (or enter a revision using #)`:`No ${1===e.repos.length?"":"common "}branches${t.showTags?" or tags":""} found in ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repos`}`,matchOnDescription:!0,matchOnDetail:!0,value:c??((0,f.yc)(e.reference)?e.reference.ref:void 0),selectValueWhenShown:!0,items:m,additionalButtons:[u],onDidChangeValue:e=>(p.item=e.value,!0),onDidClickItemButton:(e,t,{item:i})=>{"string"!=typeof i&&t===B.gt&&((0,f.MN)(i)?n.gR(i,{select:!0,focus:!1,expand:!0}):(0,f._A)(i)?d.gR(i,{select:!0,focus:!1,expand:!0}):(0,f.yc)(i)&&a.bh(i,{pin:!1,preserveFocus:!0}))},onDidClickButton:async(i,r)=>{if(r===u){i.busy=!0;try{t.showTags=!t.showTags,u.on=t.showTags;let r=await g();i.placeholder=0===r.length?`No ${1===e.repos.length?"":"common "}branches${t.showTags?" or tags":""} found in ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repos`}`:`${"string"==typeof l?l:l(t)} (or enter a revision using #)`,i.items=r}finally{i.busy=!1}}},keys:["right","alt+right","ctrl+right"],onDidPressKey:(e,t,{item:i})=>{"string"!=typeof i&&((0,f.MN)(i)?n.gR(i,{select:!0,focus:!1,expand:!0}):(0,f._A)(i)?d.gR(i,{select:!0,focus:!1,expand:!0}):(0,f.yc)(i)&&a.bh(i,{pin:!1,preserveFocus:!0}))},onValidateValue:Q(e.repos)}),v=yield w;return(0,E._W)(w,e,v)?v[0].item:E.QV}async function*Z(e,t,{ignoreFocusOut:i,log:r,onDidLoadMore:s,picked:o,placeholder:n,showInSideBarCommand:l,showInSideBarButton:h,titleContext:c}){async function u(e){if(null==e)return[(0,S.wF)(S.QN.Back,!0),(0,S.wF)(S.QN.Cancel)];let t=[B.OR,B.gt];T.KY(e.commits)?.[1].file!=null&&t.splice(0,0,B.yS);let i=[];for await(let r of(0,T.kH)(e.commits.values(),async e=>(0,R.KK)(e,null!=o&&("string"==typeof o?e.ref===o:o.includes(e.ref)),{buttons:t,compact:!0,icon:"avatar"})))i.push(r);return e.hasMore&&i.push((0,S.wF)(S.QN.LoadMore)),i}let d=u(r).then(e=>null!=l?[l,...e]:e),p=(0,E.eI)({title:U(`${t.title}${c??""}`,e,t),placeholder:"string"==typeof n?n:n(t,r),ignoreFocusOut:i,matchOnDescription:!0,matchOnDetail:!0,value:"string"==typeof o&&r?.count===0?o:void 0,selectValueWhenShown:!0,items:d,onDidLoadMore:async e=>(e.keepScrollPosition=!0,r=await r?.more?.(_.i.get("advanced.maxListItems")),s?.(r),"string"!=typeof n&&(e.placeholder=n(t,r)),u(r)),additionalButtons:[...h?.button!=null?[h?.button]:[],...r?.hasMore?[B.ur]:[]],onDidClickItemButton:(e,t,i)=>{if(!P.Ml.is(i))switch(t){case B.OR:a.bh(i.item,{pin:!1,preserveFocus:!0});break;case B.gt:a.gR(i.item,{select:!0,focus:!1,expand:!0});break;case B.yS:{let e=i.item.file?.path;null!=e&&a.t6(e,i.item)}}},onDidClickButton:(e,t)=>{if(null==r)return;let i=e.activeItems.filter(e=>!P.Ml.is(e));t===h?.button&&h.onDidClick(i)},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{let i=e.activeItems.filter(e=>!P.Ml.is(e));"ctrl+right"===t?a.bh(i[0].item,{pin:!1,preserveFocus:!0}):await a.gR(i[0].item,{select:!0,focus:!1,expand:!0})},onValidateValue:Q(e.repo,{buttons:[B.OR,B.gt]})}),g=yield p;return(0,E._W)(p,e,g)?P.Ml.is(g[0])?((0,E.Qt)(e),await g[0].execute(),E.QV):g[0].item:E.QV}function*X(e,t,{log:i,onDidLoadMore:r,picked:s,placeholder:o,titleContext:n}){async function l(e){if(null==e)return[(0,S.wF)(S.QN.Back,!0),(0,S.wF)(S.QN.Cancel)];let t=[];for await(let i of(0,T.kH)(e.commits.values(),async e=>(0,R.KK)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:[B.OR,B.gt],compact:!0,icon:"avatar"})))t.push(i);return t}let h=(0,E.eI)({title:U(`${t.title}${n??""}`,e,t),multiselect:null!=i,placeholder:"string"==typeof o?o:o(t,i),matchOnDescription:!0,matchOnDetail:!0,items:l(i),onDidLoadMore:async e=>(e.keepScrollPosition=!0,i=await i?.more?.(_.i.get("advanced.maxListItems")),r?.(i),"string"!=typeof o&&(e.placeholder=o(t,i)),l(i)),additionalButtons:[...i?.hasMore?[B.ur]:[]],onDidClickItemButton:(e,t,{item:i})=>{switch(t){case B.OR:a.bh(i,{pin:!1,preserveFocus:!0});break;case B.gt:a.gR(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{"ctrl+right"===t?a.bh(i,{pin:!1,preserveFocus:!0}):await a.gR(i,{select:!0,focus:!1,expand:!0})}}),c=yield h;return(0,E._W)(h,e,c)?c.map(e=>e.item):E.QV}function*ee(e,t,i="Choose contributors"){async function r(){let t=(await o.Container.instance.git.getOrOpenScmRepository(e.repo.path))?.inputBox.value,i=[];for(let r of(await o.Container.instance.git.getContributors(e.repo.path)))i.push(await (0,R.iU)(r,t?.includes(r.getCoauthor()),{buttons:[B.gt]}));return i}let s=(0,E.eI)({title:U(t.title,e,t),allowEmpty:!0,multiselect:!0,placeholder:i,matchOnDescription:!0,items:r(),onDidClickItemButton:(e,t,{item:i})=>{t===B.gt&&l.g(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:(e,t,{item:i})=>{l.g(i,{select:!0,focus:!1,expand:!0})}}),n=yield s;return(0,E._W)(s,e,n)?n.map(e=>e.item):E.QV}function*et(e,t,{filter:i,picked:r,placeholder:s,titleContext:o}){let n=N(e.repo,{buttons:[B.gt],filter:i,picked:r}).then(e=>0===e.length?[(0,S.wF)(S.QN.Back,!0),(0,S.wF)(S.QN.Cancel)]:e),a=(0,E.eI)({title:U(`${t.title}${o??""}`,e,t),placeholder:t=>t?s:`No remotes found in ${e.repo.formattedName}`,matchOnDetail:!0,items:n,onDidClickItemButton:(e,t,{item:i})=>{t===B.gt&&h.gR(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await h.gR(i,{select:!0,focus:!1,expand:!0})}}),l=yield a;return(0,E._W)(a,e,l)?l[0].item:E.QV}async function*ei(e,t,i="Choose a repository"){if("string"==typeof e.repo&&(e.repo=o.Container.instance.git.getRepository(e.repo),null!=e.repo))return e.repo;let r=e.repo??await o.Container.instance.git.getOrOpenRepositoryForEditor(),s=(0,E.eI)({title:t.title,placeholder:i,items:0===t.repos.length?[(0,S.wF)(S.QN.Cancel)]:Promise.all(t.repos.map(e=>(0,R.a4)(e,e.id===r?.id,{branch:!0,buttons:[B.gt],fetched:!0,status:!0}))),onDidClickItemButton:(e,i,{item:r})=>{i===B.gt&&c.gR(r.path,t.associatedView,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:(e,i,{item:r})=>{c.gR(r.path,t.associatedView,{select:!0,focus:!1,expand:!0})}}),n=yield s;return(0,E._W)(s,e,n)?n[0].item:E.QV}async function*er(e,t,i){let r;if(i={placeholder:"Choose repositories",skipIfPossible:!1,...i},null!=e.repos){if((0,$.YN)(e.repos)){if(r=(0,$.Gs)(e.repos,e=>t.repos.find(t=>t.path===e)),i.skipIfPossible&&0!==r.length&&e.repos.length===r.length)return r}else r=e.repos}else{let e=await o.Container.instance.git.getOrOpenRepositoryForEditor();r=null!=e?[e]:[]}let s=(0,E.eI)({multiselect:!0,title:t.title,placeholder:i.placeholder,items:0===t.repos.length?[(0,S.wF)(S.QN.Cancel)]:Promise.all(t.repos.map(e=>(0,R.a4)(e,r.some(t=>t.id===e.id),{branch:!0,buttons:[B.gt],fetched:!0,status:!0}))),onDidClickItemButton:(e,i,{item:r})=>{i===B.gt&&c.gR(r.path,t.associatedView,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:(e,i,{item:r})=>{c.gR(r.path,t.associatedView,{select:!0,focus:!1,expand:!0})}}),n=yield s;return(0,E._W)(s,e,n)?n.map(e=>e.item):E.QV}function*es(e,t,{ignoreFocusOut:i,stash:r,picked:s,placeholder:o,titleContext:n}){let a=(0,E.eI)({title:U(`${t.title}${n??""}`,e,t),placeholder:"string"==typeof o?o:o(t,r),ignoreFocusOut:i,matchOnDescription:!0,matchOnDetail:!0,items:null==r?[(0,S.wF)(S.QN.Back,!0),(0,S.wF)(S.QN.Cancel)]:[...(0,T.kH)(r.commits.values(),e=>(0,R.am)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:[B.OR],compact:!0,icon:!0}))],onDidClickItemButton:(e,t,{item:i})=>{t===B.OR&&u.bh(i,{pin:!1,preserveFocus:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await u.bh(i,{pin:!1,preserveFocus:!0})}}),l=yield a;return(0,E._W)(a,e,l)?l[0].item:E.QV}function*eo(e,t,{ignoreFocusOut:i,stash:r,picked:s,placeholder:o,titleContext:n}){let a=(0,E.eI)({title:U(`${t.title}${n??""}`,e,t),multiselect:!0,placeholder:"string"==typeof o?o:o(t,r),ignoreFocusOut:i,matchOnDescription:!0,matchOnDetail:!0,items:null==r?[(0,S.wF)(S.QN.Back,!0),(0,S.wF)(S.QN.Cancel)]:[...(0,T.kH)(r.commits.values(),e=>(0,R.am)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:[B.OR],compact:!0,icon:!0}))],onDidClickItemButton:(e,t,{item:i})=>{t===B.OR&&u.bh(i,{pin:!1,preserveFocus:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await u.bh(i,{pin:!1,preserveFocus:!0})}}),l=yield a;return(0,E._W)(a,e,l)?l.map(e=>e.item):E.QV}function*en(e,t,{filter:i,picked:r,placeholder:s,titleContext:o}){let n=q(e.repo,{buttons:[B.gt],filter:i,picked:r}).then(e=>0===e.length?[(0,S.wF)(S.QN.Back,!0),(0,S.wF)(S.QN.Cancel)]:e),a=(0,E.eI)({multiselect:!0,title:U(`${t.title}${o??""}`,e,t),placeholder:t=>t?s:`No tags found in ${e.repo.formattedName}`,matchOnDetail:!0,items:n,onDidClickItemButton:(e,t,{item:i})=>{t===B.gt&&d.gR(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await d.gR(i,{select:!0,focus:!1,expand:!0})}}),l=yield a;return(0,E._W)(a,e,l)?l.map(e=>e.item):E.QV}function*ea(e,t,{excludeOpened:i,filter:r,includeStatus:s,picked:o,placeholder:n,titleContext:a}){let l=L(t.worktrees??e.repo,{buttons:[B.am,B.gt],excludeOpened:i,filter:r,includeStatus:s,picked:o}).then(e=>0===e.length?[(0,S.wF)(S.QN.Back,!0),(0,S.wF)(S.QN.Cancel)]:e),h=(0,E.eI)({title:U(`${t.title}${a??""}`,e,t),placeholder:t=>t?n:`No worktrees found in ${e.repo.formattedName}`,matchOnDetail:!0,items:l,onDidClickItemButton:(e,t,{item:i})=>{switch(t){case B.am:(0,x.EX)(i.uri,{location:"newWindow"});break;case B.gt:p.gR(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await p.gR(i,{select:!0,focus:!1,expand:!0})}}),c=yield h;return(0,E._W)(h,e,c)?c[0].item:E.QV}function*el(e,t,{filter:i,includeStatus:r,picked:s,placeholder:o,titleContext:n}){let a=L(t.worktrees??e.repo,{buttons:[B.am,B.gt],filter:i,includeStatus:r,picked:s}).then(e=>0===e.length?[(0,S.wF)(S.QN.Back,!0),(0,S.wF)(S.QN.Cancel)]:e),l=(0,E.eI)({multiselect:!0,title:U(`${t.title}${n??""}`,e,t),placeholder:t=>t?o:`No worktrees found in ${e.repo.formattedName}`,matchOnDetail:!0,items:a,onDidClickItemButton:(e,t,{item:i})=>{switch(t){case B.am:(0,x.EX)(i.uri,{location:"newWindow"});break;case B.gt:p.gR(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await p.gR(i,{select:!0,focus:!1,expand:!0})}}),h=yield l;return(0,E._W)(l,e,h)?h.map(e=>e.item):E.QV}function*eh(e,t){let i=(0,E.eI)({title:U((0,f.u)(e.reference,{capitalize:!0,icon:!1}),e,t),placeholder:(0,f.u)(e.reference,{capitalize:!0,icon:!1}),ignoreFocusOut:!0,items:ec(e),onDidClickItemButton:(t,i,r)=>{switch(i){case B.OR:(0,f.QN)(e.reference)?u.bh(e.reference,{pin:!1,preserveFocus:!0}):a.bh(e.reference,{pin:!1,preserveFocus:!0});break;case B.gt:(0,f.QN)(e.reference)?u.gR(e.reference,{select:!0,focus:!1,expand:!0}):a.gR(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,i)=>{await i.onDidPressKey(t)}}),r=yield i;return(0,E._W)(i,e,r)?r[0]:E.QV}async function ec(e){let t;let i=[new k.Qh(e.reference),new k.EF(e.reference)];if((0,m.E$)(e.reference))i.push((0,P.ZA)("Actions"),new R.qO("Apply Stash...",{command:"stash",state:{subcommand:"apply",repo:e.repo,reference:e.reference}}),new R.qO("Rename Stash...",{command:"stash",state:{subcommand:"rename",repo:e.repo,reference:e.reference}}),new R.qO("Drop Stash...",{command:"stash",state:{subcommand:"drop",repo:e.repo,references:[e.reference]}}),(0,P.ZA)(),new k.sd(e.reference));else{let r=await o.Container.instance.git.getRemotesWithProviders(e.repo.path,{sort:!0});r?.length&&i.push((0,P.ZA)((0,w.yj)(r)??"Remote"),new D.U9(r,{type:v.o.Commit,sha:e.reference.sha}),new D.qy(r,{type:v.o.Commit,sha:e.reference.sha})),i.push((0,P.ZA)("Actions"));let s=await o.Container.instance.git.getBranch(e.repo.path),[n,a]=await Promise.all([null!=s?o.Container.instance.git.getCommitBranches(e.repo.path,e.reference.ref,s.name,{commitDate:(0,m.S)(e.reference)?e.reference.committer.date:void 0}):void 0,s?.remote||s?.upstream==null?void 0:e.reference.isPushed()]);n?.length?((t=!a)&&i.push(new R.qO("Push to Commit...",{command:"push",state:{repos:e.repo,reference:e.reference}})),i.push(new R.qO("Revert Commit...",{command:"revert",state:{repo:e.repo,references:[e.reference]}}),new R.qO(`Reset ${s?.name??"Current Branch"} to Commit...`,{command:"reset",state:{repo:e.repo,reference:e.reference}}),new R.qO(`Reset ${s?.name??"Current Branch"} to Previous Commit...`,{command:"reset",state:{repo:e.repo,reference:(0,f.op)(`${e.reference.ref}^`,e.reference.repoPath,{refType:"revision",name:`${e.reference.name}^`,message:e.reference.message})}}))):i.push(new R.qO("Cherry Pick Commit...",{command:"cherry-pick",state:{repo:e.repo,references:[e.reference]}})),i.push(new R.qO(`Rebase ${s?.name??"Current Branch"} onto Commit...`,{command:"rebase",state:{repo:e.repo,reference:e.reference}}),new R.qO("Switch to Commit...",{command:"switch",state:{repos:[e.repo],reference:e.reference}}),(0,P.ZA)(),new R.qO("Create Branch at Commit...",{command:"branch",state:{subcommand:"create",repo:e.repo,reference:e.reference}}),new R.qO("Create Tag at Commit...",{command:"tag",state:{subcommand:"create",repo:e.repo,reference:e.reference}}),(0,P.ZA)("Copy"),new k.Cq(e.reference),new k.sd(e.reference))}return i.push((0,P.ZA)("Open"),new k.I1(e.reference),new k.o2(e.reference),new k.Y8(e.reference),(0,P.ZA)(),new k.ag(e.reference),new k.SG(e.reference)),i.push((0,P.ZA)("Compare"),new k.Wu(e.reference),new k.AX(e.reference)),i.push((0,P.ZA)(),new k.q$(e.reference),new k.ug(e.reference)),i.push((0,P.ZA)("Browse"),new k.kP(e.reference,{openInNewWindow:!1}),new k.kP(e.reference,{before:!0,openInNewWindow:!1}),new k.kP(e.reference,{openInNewWindow:!0}),new k.kP(e.reference,{before:!0,openInNewWindow:!0})),i.unshift(new k.aG(e.reference,{unpublished:t,hint:"Click to see all changed files"})),i}function*eu(e,t,i){e.reference.files;let r=(0,E.eI)({title:U((0,f.u)(e.reference,{capitalize:!0,icon:!1}),e,t),placeholder:(0,f.u)(e.reference,{capitalize:!0,icon:!1}),ignoreFocusOut:!0,items:[new k.aG(e.reference,{picked:null==e.fileName,hint:`Click to see ${(0,m.E$)(e.reference)?"stash":"commit"} actions`}),(0,P.ZA)("Files"),...e.reference.files?.map(t=>new k.ee(e.reference,t,i?.picked===t.path))??[]],matchOnDescription:!0,onDidClickItemButton:(t,i,r)=>{switch(i){case B.OR:(0,f.QN)(e.reference)?u.bh(e.reference,{pin:!1,preserveFocus:!0}):a.bh(e.reference,{pin:!1,preserveFocus:!0});break;case B.gt:(0,f.QN)(e.reference)?u.gR(e.reference,{select:!0,focus:!1,expand:!0}):a.gR(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,i)=>{await i.onDidPressKey(t)}}),s=yield r;return(0,E._W)(r,e,s)?s[0]:E.QV}function*ed(e,t){let i=(0,E.eI)({title:U((0,f.u)(e.reference,{capitalize:!0,icon:!1}),e,t,`${(0,O.eu)(s.or.Dot,2,2)}${(0,I.o)(e.fileName,{fileOnly:!0})}`),placeholder:`${(0,I.o)(e.fileName,{relativeTo:e.repo.path})} in ${(0,f.u)(e.reference,{icon:!1})}`,ignoreFocusOut:!0,items:ep(e),matchOnDescription:!0,onDidClickItemButton:(t,i,r)=>{switch(i){case B.OR:(0,f.QN)(e.reference)?u.bh(e.reference,{pin:!1,preserveFocus:!0}):a.bh(e.reference,{pin:!1,preserveFocus:!0});break;case B.gt:(0,f.QN)(e.reference)?u.gR(e.reference,{select:!0,focus:!1,expand:!0}):a.gR(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,i)=>{await i.onDidPressKey(t)}}),r=yield i;return(0,E._W)(i,e,r)?r[0]:E.QV}async function ep(e){let t=await e.reference.findFile(e.fileName);if(null==t)return[];let i=[new k.Qh(e.reference),new k.EF(e.reference)];if((0,m.E$)(e.reference))i.push((0,P.ZA)(),new k.sd(e.reference),(0,P.ZA)("Actions"),new k.G(e.reference,t),new k.u6(e.reference,t),(0,P.ZA)(),new k.sd(e.reference));else{let r=await o.Container.instance.git.getRemotesWithProviders(e.repo.path,{sort:!0});r?.length&&i.push((0,P.ZA)((0,w.yj)(r)??"Remote"),new D.U9(r,{type:v.o.Revision,fileName:e.fileName,commit:e.reference}),new D.qy(r,{type:v.o.Revision,fileName:e.fileName,commit:e.reference}),(0,P.ZA)(),new D.U9(r,{type:v.o.Commit,sha:e.reference.ref}),new D.qy(r,{type:v.o.Commit,sha:e.reference.sha})),i.push((0,P.ZA)("Actions"),new k.G(e.reference,t),new k.u6(e.reference,t),(0,P.ZA)("Copy"),new k.Cq(e.reference),new k.sd(e.reference))}return i.push((0,P.ZA)("Open"),new k.Kk(e.reference,e.fileName),new k.aC(e.reference,e.fileName),new k.qg(e.reference,e.fileName),(0,P.ZA)()),"D"!==t.status&&i.push(new k.e6(e.reference,t)),i.push(new k.iu(e.reference,t)),i.push((0,P.ZA)("Compare"),new k.Wu(e.reference),new k.AX(e.reference)),i.push((0,P.ZA)("Browse"),new k.kP(e.reference,{openInNewWindow:!1}),new k.kP(e.reference,{before:!0,openInNewWindow:!1}),new k.kP(e.reference,{openInNewWindow:!0}),new k.kP(e.reference,{before:!0,openInNewWindow:!0})),i.unshift(new k.aG(e.reference,{file:t,hint:"Click to see all changed files"})),i}function*eg(e,t){let i=t.status.getUpstreamStatus({expand:!0,separator:", "}),o=t.status.getFormattedDiffStatus({expand:!0,separator:", "}),n=(0,E.eI)({title:U(t.title,e,t),placeholder:i?`${i}, ${o}`:o,ignoreFocusOut:!0,items:function(e,t){let i;let o=[],n=t.status.computeWorkingTreeStatus();return i=0===n.staged&&0===n.unstaged?"No working tree changes":`$(files) ${n.staged?`${(0,O.u)("staged file",n.staged)} (${n.stagedStatus})`:""}${n.unstaged?`${n.staged?", ":""}${(0,O.u)("unstaged file",n.unstaged)} (${n.unstagedStatus})`:""}`,t.status.upstream?(0===t.status.state.ahead&&0===t.status.state.behind?o.push((0,S.wF)(S.QN.Noop,!0,{label:`$(git-branch) ${t.status.branch} is up to date with $(git-branch) ${t.status.upstream}`,detail:i})):0!==t.status.state.ahead&&0!==t.status.state.behind?o.push((0,S.wF)(S.QN.Noop,!0,{label:`$(git-branch) ${t.status.branch} has diverged from $(git-branch) ${t.status.upstream}`,detail:i})):0!==t.status.state.ahead?o.push((0,S.wF)(S.QN.Noop,!0,{label:`$(git-branch) ${t.status.branch} is ahead of $(git-branch) ${t.status.upstream}`,detail:i})):0!==t.status.state.behind&&o.push((0,S.wF)(S.QN.Noop,!0,{label:`$(git-branch) ${t.status.branch} is behind $(git-branch) ${t.status.upstream}`,detail:i})),0!==t.status.state.behind&&o.push(new R.qO(`$(cloud-download) ${(0,O.u)("commit",t.status.state.behind)} behind`,{command:"log",state:{repo:e.repo,reference:(0,f.op)((0,f._u)(t.status.ref,t.status.upstream),e.repo.path)}})),0!==t.status.state.ahead&&o.push(new R.qO(`$(cloud-upload) ${(0,O.u)("commit",t.status.state.ahead)} ahead`,{command:"log",state:{repo:e.repo,reference:(0,f.op)((0,f._u)(t.status.upstream,t.status.ref),e.repo.path)}}))):o.push((0,S.wF)(S.QN.Noop,!0,{label:`$(git-branch) ${t.status.branch} has no upstream`,detail:i})),t.status.files.length&&(o.push(new k.Sg(n.stagedAddsAndChanges.concat(n.unstagedAddsAndChanges))),o.push(new k.O5(n.stagedAddsAndChanges.concat(n.unstagedAddsAndChanges)))),n.staged>0&&(o.push(new k.Sg(n.stagedAddsAndChanges,"Open Staged Files")),o.push(new k.O5(n.stagedAddsAndChanges,"Open Only Staged Files"))),n.unstaged>0&&(o.push(new k.Sg(n.unstagedAddsAndChanges,"Open Unstaged Files")),o.push(new k.O5(n.unstagedAddsAndChanges,"Open Only Unstaged Files"))),t.status.files.length&&o.push(new P.Ml("Close Unchanged Files",new r.ThemeIcon("x"),s.eq.CloseUnchangedFiles)),o}(e,t),keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,i)=>{await i.onDidPressKey(t)}}),a=yield n;return(0,E._W)(n,e,a)?a[0]:E.QV}async function*em(e,t,i){let r;let s=await o.Container.instance.git.access(i,e.repo.path);if(s.allowed)return;let n=[];if(s.subscription.current.account?.verified===!1)n.push((0,S.wF)(S.QN.RequiresVerification,!0)),r="You must verify your email before you can continue";else{if(null==s.subscription.required)return;r="✨ Requires a trial or paid plan for use on privately hosted repos",(0,A.Wk)(s.subscription.required)&&null!=s.subscription.current.account?(r="✨ Requires a paid plan for use on privately hosted repos",n.push((0,S.wF)(S.QN.RequiresPaidSubscription,!0))):null!=s.subscription.current.account||(0,A.UP)(s.subscription.current)?n.push((0,S.wF)(S.QN.ExtendTrial)):n.push((0,S.wF)(S.QN.StartPreviewTrial,!0))}let a=(0,E.eI)({title:U(t.title,e,t),placeholder:r,items:[...n,(0,S.wF)(S.QN.Cancel)]}),l=yield a;return(0,E._W)(a,e,l)?void 0:E.QV}},1492:(e,t,i)=>{i.d(t,{AD:()=>QuickCommand,GU:()=>g,KO:()=>y,OK:()=>u,OY:()=>c,QV:()=>h,Qt:()=>v,_W:()=>d,eI:()=>f,eU:()=>m,iI:()=>n,kp:()=>w,qW:()=>p,uQ:()=>l,yq:()=>a});var r=i(2056),s=i(6776),o=i(4169);function n(e){return"object"==typeof e&&"type"in e&&"custom"===e.type}function a(e){return"object"==typeof e&&"type"in e&&"input"===e.type}function l(e){return"object"==typeof e&&"type"in e&&"pick"===e.type}let h=Symbol("BreakStep");let QuickCommand=class QuickCommand{constructor(e,t,i,r,s){this.container=e,this.key=t,this.label=i,this.title=r,this.description=s?.description,this.detail=s?.detail}description;detail;initialState;_currentStep;_stepsIterator;get canConfirm(){return!0}get canSkipConfirm(){return!0}_picked=!1;get picked(){return this._picked}set picked(e){this._picked=e,e||(this._pickedVia="menu")}_pickedVia="menu";get pickedVia(){return this._pickedVia}set pickedVia(e){this._pickedVia=e}get skipConfirmKey(){return`${this.key}:${this.pickedVia}`}get value(){return this._currentStep}confirm(e){return!this.canConfirm||!this.canSkipConfirm||(null!=e?e:!o.i.get("gitCommands.skipConfirmations").includes(this.skipConfirmKey))}isMatch(e){return this.key===e}isFuzzyMatch(e){return this.label===e}executeSteps(){return this.steps(this.getStepState(!0))}async previous(){return(await this.next(s.QN.Back)).value}async next(e){null==this._stepsIterator&&(this._stepsIterator=this.steps(this.getStepState(!1)));let t=await this._stepsIterator.next(e);return(t.done&&(this.initialState=void 0,this._stepsIterator=void 0),t.value===h)?(this._currentStep=void 0,{...t,value:void 0}):(this._currentStep=t.value,t)}async retry(){return await this.next(s.QN.Noop),this.value}canStepsContinue(e){return e.counter>=(e.startingStep??0)}createConfirmStep(e,t,i,r={}){return g(e,t,{title:this.title},i,r)}getStepState(e){return{counter:0,...this.initialState,startingStep:e?this.initialState?.counter??0:0}}};function c(e){return e instanceof QuickCommand}async function u(e,t,i){if(!p(e,t,i))return!1;let[r]=await e.validate?.(i)??[!0];return!!r&&(t.counter++,!0)}function d(e,t,i){return!!p(e,t,i)&&!!(e.validate?.(i)??!0)&&(t.counter++,!0)}function p(e,t,i){if(null==i)return!1;if((0,s.SE)(i)){switch(i){case s.QN.Back:t.counter--,t.counter<=(t.startingStep??0)&&(t.counter=0);break;case s.QN.Cancel:v(t)}return!1}return!0}function g(e,t,i,o,n){return f({isConfirmationStep:!0,placeholder:`Confirm ${i.title}`,title:e,ignoreFocusOut:!0,items:[...t,(0,r.ZA)(),o??(0,s.wF)(s.QN.Cancel)],selectedItems:[t.find(e=>e.picked)??t[0]],...n})}function m(e){return{type:"input",...e,ignoreFocusOut:!0}}function f(e){return{type:"pick",...e}}function w(e){return{type:"custom",...e}}function v(e){e.counter=-1}function y(e,t){return t.enabled=!1,e.frozen=!0,{[Symbol.dispose]:()=>{e.frozen=!1,t.enabled=!0,t.show()}}}},7288:(e,t,i)=>{i.d(t,{u:()=>d});var r=i(1608),s=i(2152),o=i(1296),n=i(7824),a=i(7348),l=i(7452),h=Object.defineProperty,c=Object.getOwnPropertyDescriptor,u=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?c(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&h(t,i,o),o};let d=class extends l.i6{constructor(e){super(r.eq.ConnectRemoteProvider),this.container=e}static getMarkdownCommandArgs(e){let t;return t=(0,s.Q7)(e)?{remote:e.name,repoPath:e.repoPath}:e,super.getMarkdownCommandArgsCore(r.eq.ConnectRemoteProvider,t)}preExecute(e,t){return(0,l.W)(e)&&(t={...t,remote:e.node.remote.name,repoPath:e.node.remote.repoPath}),this.execute(t)}async execute(e){let t,i,r;if(e?.repoPath==null){let e=new Map;for(let t of this.container.git.openRepositories){let i=await t.getBestRemoteWithIntegration({includeDisconnected:!0});i?.provider!=null&&e.set(t,i)}if(0===e.size)return!1;if(1===e.size){let i;[i,t]=(0,a.KY)(e),r=i.path}else{let i=await (0,o.Gf)(void 0,"Choose which repository to connect to the remote provider",[...e.keys()]);if(i?.item==null)return;r=i.repoPath,t=e.get(i.item)}}else if(e?.remote==null){if(r=e.repoPath,null==(t=await this.container.git.getBestRemoteWithIntegration(r,{includeDisconnected:!0})))return!1}else if(r=e.repoPath,t=(i=await this.container.git.getRemotesWithProviders(r)).find(t=>t.name===e.remote),!t?.hasIntegration())return!1;let s=this.container.integrations.getByRemote(t);if(null==s)return!1;let n=await s.connect();return n&&!(i??await this.container.git.getRemotesWithProviders(r)).some(e=>e.default)&&await t.setAsDefault(!0),n}};d=u([(0,n.GQ)()],d);let p=class extends l.i6{constructor(e){super(r.eq.DisconnectRemoteProvider),this.container=e}static getMarkdownCommandArgs(e){let t;return t=(0,s.Q7)(e)?{remote:e.name,repoPath:e.repoPath}:e,super.getMarkdownCommandArgsCore(r.eq.DisconnectRemoteProvider,t)}preExecute(e,t){return(0,l.W)(e)&&(t={...t,remote:e.node.remote.name,repoPath:e.node.remote.repoPath}),this.execute(t)}async execute(e){let t,i;if(e?.repoPath==null){let e=new Map;for(let t of this.container.git.openRepositories){let i=await t.getBestRemoteWithIntegration({includeDisconnected:!1});null!=i&&e.set(t,i)}if(0===e.size)return;if(1===e.size){let r;[r,t]=(0,a.KY)(e),i=r.path}else{let r=await (0,o.Gf)(void 0,"Choose which repository to disconnect from the remote provider",[...e.keys()]);if(r?.item==null)return;i=r.repoPath,t=e.get(r.item)}}else if(e?.remote==null){if(i=e.repoPath,null==(t=await this.container.git.getBestRemoteWithIntegration(i,{includeDisconnected:!1})))return}else if(i=e.repoPath,t=(await this.container.git.getRemotesWithProviders(i)).find(t=>t.name===e.remote),!t?.hasIntegration())return;let r=this.container.integrations.getByRemote(t);return r?.disconnect()}};p=u([(0,n.GQ)()],p)},6552:(e,t,i)=>{i.d(t,{k:()=>f});var r=i(1608),s=i(3172),o=i(1144),n=i(2812),a=i(1424),l=i(4516),h=i(3828),c=i(7824),u=i(7348),d=i(6448),p=i(7452),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor;let f=class extends p.qg{constructor(e){super([r.eq.ShowCommitInView,r.eq.ShowInDetailsView,r.eq.ShowCommitsInView]),this.container=e}static getMarkdownCommandArgs(e,t){return super.getMarkdownCommandArgsCore(r.eq.ShowCommitInView,"string"==typeof e?{refs:[e],repoPath:t}:e)}preExecute(e,t){return"viewItem"===e.type&&(t={...t},(0,p.k7)(e)&&(t.ref=(0,a.K4)(e.node.commit))),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null!=(i={...i}).ref)return(0,o.bh)(i.ref);if(void 0===i.refs){if(null==(t=(0,p.sZ)(t,e)))return;let r=await n.wv.fromUri(t);if(i.repoPath=r.repoPath,null!=e)try{let t=e.document.isDirty?await this.container.git.getBlameForRangeContents(r,e.selection,e.document.getText()):await this.container.git.getBlameForRange(r,e.selection);if(void 0===t)return(0,h.Sk)("Unable to find commits");i.refs=[...(0,u.Gs)(t.commits.values(),e=>e.isUncommitted?void 0:e.ref)]}catch(e){return d.YJ.error(e,"ShowCommitsInViewCommand","getBlameForRange"),(0,h.qC)("Unable to find commits")}else{if(null==r.sha)return;i.refs=[r.sha]}}return 1===i.refs.length?(0,o.bh)((0,a.op)(i.refs[0],i.repoPath,{refType:"revision"})):(0,s.s)({command:"search",state:{repo:i?.repoPath,query:(0,l.hG)(i.refs),showResultsInSideBar:!0}})}};f=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o),o})([(0,c.GQ)()],f)},884:(e,t,i)=>{i.d(t,{g:()=>p});var r=i(1608),s=i(3172),o=i(1144),n=i(2812),a=i(3828),l=i(7824),h=i(6448),c=i(7452),u=Object.defineProperty,d=Object.getOwnPropertyDescriptor;let p=class extends c.yi{constructor(e){super([r.eq.RevealCommitInView,r.eq.ShowQuickCommit]),this.container=e}static getMarkdownCommandArgs(e,t){return super.getMarkdownCommandArgsCore(r.eq.ShowQuickCommit,"string"==typeof e?{sha:e,repoPath:t}:e)}preExecute(e,t){return e.command===r.eq.RevealCommitInView&&((t={...t}).revealInView=!0),"viewItem"===e.type&&((t={...t}).sha=e.node.uri.sha,(0,c.k7)(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r,l;if(i?.commit==null){if(i?.repoPath!=null&&null!=i.sha)l=i.repoPath,r=n.wv.fromRepoPath(l);else{if(null==(t=(0,c.sZ)(t,e)))return;l=(r=await n.wv.fromUri(t)).repoPath}}else null==i.sha&&(i.sha=i.commit.sha),r=i.commit.getGitUri(),l=i.commit.repoPath,null==t&&(t=i.commit.file?.uri);if(null==(i={...i}).sha){if(null==e)return;let t=e.selection.active.line;if(t<0)return;try{let e=await this.container.git.getBlameForLine(r,t);if(null==e){(0,a.Sk)("Unable to show commit");return}if(e.commit.isUncommitted){(0,a.Xg)("Unable to show commit");return}i.sha=e.commit.sha,l=e.commit.repoPath,i.commit=e.commit}catch(e){h.YJ.error(e,"ShowQuickCommitCommand",`getBlameForLine(${t})`),(0,a.qC)("Unable to show commit");return}}try{if((null==i.commit||null!=i.commit.file)&&(null!=i.repoLog&&(i.commit=i.repoLog.commits.get(i.sha),null==i.commit&&(i.repoLog=void 0)),null==i.repoLog&&(i.commit=await this.container.git.getCommit(l,i.sha))),null==i.commit){(0,a.m4)("Unable to show commit");return}if(i.revealInView){await (0,o.gR)(i.commit,{select:!0,focus:!0,expand:!0});return}await (0,s.s)({command:"show",state:{repo:l,reference:i.commit}})}catch(e){h.YJ.error(e,"ShowQuickCommitCommand"),(0,a.qC)("Unable to show commit")}}};p=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?d(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&u(t,i,o),o})([(0,l.GQ)()],p)},3840:(e,t,i)=>{i.d(t,{o:()=>g});var r=i(7304),s=i(1608),o=i(3172),n=i(2812),a=i(1080),l=i(3828),h=i(7824),c=i(6448),u=i(7452),d=Object.defineProperty,p=Object.getOwnPropertyDescriptor;let g=class extends u.yi{constructor(e){super([s.eq.ShowQuickCommitFile,s.eq.ShowQuickCommitRevision,s.eq.ShowQuickCommitRevisionInDiffLeft,s.eq.ShowQuickCommitRevisionInDiffRight,s.eq.ShowLineCommitInView]),this.container=e}static getMarkdownCommandArgs(e){return super.getMarkdownCommandArgsCore(s.eq.ShowQuickCommitFile,e)}async preExecute(e,t){if("editorLine"===e.type&&(t={...t,line:e.line}),e.command===s.eq.ShowLineCommitInView&&(t={...t,inView:!0}),null!=e.editor&&e.command.startsWith(s.eq.ShowQuickCommitRevision)){let i=await n.wv.fromUri(e.editor.document.uri);t={...t,sha:i.sha}}return"viewItem"===e.type&&(t={...t,sha:e.node.uri.sha},(0,u.k7)(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let d;if(null!=(t=(0,u.sZ)(t,e))){if(null!=(i={...i}).revisionUri?(d=n.wv.fromRevisionUri(r.Uri.parse(i.revisionUri,!0)),i.sha=d.sha):d=await n.wv.fromUri(t),null==i.sha){let t=i.line??e?.selection.active.line;if(null==t)return;try{let e=await this.container.git.getBlameForLine(d,t);if(null==e){(0,l.Sk)("Unable to show commit file details");return}if(e.commit.isUncommitted){(0,l.Xg)("Unable to show commit file details");return}i.sha=e.commit.sha,i.commit=e.commit}catch(e){c.YJ.error(e,"ShowQuickCommitFileDetailsCommand",`getBlameForLine(${t})`),(0,l.qC)("Unable to show commit file details");return}}try{if(null==i.commit&&(null!=i.fileLog&&(i.commit=i.fileLog.commits.get(i.sha),null==i.commit&&(i.fileLog=void 0)),null==i.fileLog)){let e=i.commit?.repoPath??d.repoPath;if(i.commit=await this.container.git.getCommitForFile(e,d,{ref:i.sha}),null==i.commit){(0,l.m4)("Unable to show commit file details");return}}if(null==i.commit){(0,l.m4)("Unable to show commit file details");return}let e=i.commit?.file?.path??d.fsPath;(0,a.S)(i.commit)&&null==i.commit.files&&await i.commit.ensureFullDetails(),i.inView?await (0,h.gf)(s.eq.ShowCommitsInView,{refs:[i.commit.sha],repoPath:i.commit.repoPath}):await (0,o.s)({command:"show",state:{repo:i.commit.repoPath,reference:i.commit,fileName:e}})}catch(e){c.YJ.error(e,"ShowQuickCommitFileDetailsCommand"),(0,l.qC)("Unable to show commit file details")}}}};g=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?p(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&d(t,i,o),o})([(0,h.GQ)()],g)},6848:(e,t,i)=>{i.d(t,{_w:()=>n,gP:()=>a,iJ:()=>o,o$:()=>h,ym:()=>l});var r,s,o=((r=o||{}).CopyRemoteCommitUrl="gitlens.copyRemoteCommitUrl",r.CopyRemoteFileUrl="gitlens.copyRemoteFileUrl",r.DiffWithPrevious="gitlens.diffWithPrevious",r.OpenCommitOnRemote="gitlens.openCommitOnRemote",r.OpenFileOnRemote="gitlens.openFileOnRemote",r.RevealCommitInView="gitlens.revealCommitInView",r.ShowCommitsInView="gitlens.showCommitsInView",r.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",r.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",r.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",r.ShowQuickFileHistory="gitlens.showQuickFileHistory",r.ToggleFileBlame="gitlens.toggleFileBlame",r.ToggleFileChanges="gitlens.toggleFileChanges",r.ToggleFileChangesOnly="gitlens.toggleFileChangesOnly",r.ToggleFileHeatmap="gitlens.toggleFileHeatmap",r),n=((s=n||{}).CopyRemoteCommitUrl="gitlens.copyRemoteCommitUrl",s.CopyRemoteFileUrl="gitlens.copyRemoteFileUrl",s.DiffWithPrevious="gitlens.diffWithPrevious",s.DiffWithWorking="gitlens.diffWithWorking",s.OpenCommitOnRemote="gitlens.openCommitOnRemote",s.OpenFileOnRemote="gitlens.openFileOnRemote",s.RevealCommitInView="gitlens.revealCommitInView",s.ShowCommitsInView="gitlens.showCommitsInView",s.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",s.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",s.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",s.ShowQuickFileHistory="gitlens.showQuickFileHistory",s.ToggleCodeLens="gitlens.toggleCodeLens",s.ToggleFileBlame="gitlens.toggleFileBlame",s.ToggleFileChanges="gitlens.toggleFileChanges",s.ToggleFileChangesOnly="gitlens.toggleFileChangesOnly",s.ToggleFileHeatmap="gitlens.toggleFileHeatmap",s);let a=["defaultItemLimit","formats","pageItemLimit","showRelativeDateMarkers"],l=["branches","commits","commitDetails","contributors","drafts","fileHistory","lineHistory","patchDetails","remotes","repositories","searchAndCompare","stashes","tags","worktrees","workspaces"];function h(e){switch(e){case"silent":return"off";case"errors":return"error";case"verbose":return"info";default:return e}}},1608:(e,t,i)=>{i.d(t,{C_:()=>m,GA:()=>o,O_:()=>r,Qd:()=>p,cl:()=>f,eq:()=>d,kN:()=>s,or:()=>g,rE:()=>u,wR:()=>w});let r="gitlens",s=80,o={".png":"image/png",".gif":"image/gif",".jpg":"image/jpeg",".jpeg":"image/jpeg",".jpe":"image/jpeg",".webp":"image/webp",".tif":"image/tiff",".tiff":"image/tiff",".bmp":"image/bmp"};var n,a,l,h,c,u=((n=u||{})[n.Hash=35]="Hash",n[n.Slash=47]="Slash",n[n.Digit0=48]="Digit0",n[n.Digit1=49]="Digit1",n[n.Digit2=50]="Digit2",n[n.Digit3=51]="Digit3",n[n.Digit4=52]="Digit4",n[n.Digit5=53]="Digit5",n[n.Digit6=54]="Digit6",n[n.Digit7=55]="Digit7",n[n.Digit8=56]="Digit8",n[n.Digit9=57]="Digit9",n[n.Backslash=92]="Backslash",n[n.A=65]="A",n[n.B=66]="B",n[n.C=67]="C",n[n.D=68]="D",n[n.E=69]="E",n[n.F=70]="F",n[n.Z=90]="Z",n[n.a=97]="a",n[n.b=98]="b",n[n.c=99]="c",n[n.d=100]="d",n[n.e=101]="e",n[n.f=102]="f",n[n.z=122]="z",n),d=((a=d||{}).ActionPrefix="gitlens.action.",a.AddAuthors="gitlens.addAuthors",a.BrowseRepoAtRevision="gitlens.browseRepoAtRevision",a.BrowseRepoAtRevisionInNewWindow="gitlens.browseRepoAtRevisionInNewWindow",a.BrowseRepoBeforeRevision="gitlens.browseRepoBeforeRevision",a.BrowseRepoBeforeRevisionInNewWindow="gitlens.browseRepoBeforeRevisionInNewWindow",a.ClearFileAnnotations="gitlens.clearFileAnnotations",a.CloseUnchangedFiles="gitlens.closeUnchangedFiles",a.CloseWelcomeView="gitlens.closeWelcomeView",a.CompareWith="gitlens.compareWith",a.CompareHeadWith="gitlens.compareHeadWith",a.CompareWorkingWith="gitlens.compareWorkingWith",a.ComputingFileAnnotations="gitlens.computingFileAnnotations",a.ConnectRemoteProvider="gitlens.connectRemoteProvider",a.CopyAutolinkUrl="gitlens.copyAutolinkUrl",a.CopyCurrentBranch="gitlens.copyCurrentBranch",a.CopyDeepLinkToBranch="gitlens.copyDeepLinkToBranch",a.CopyDeepLinkToCommit="gitlens.copyDeepLinkToCommit",a.CopyDeepLinkToComparison="gitlens.copyDeepLinkToComparison",a.CopyDeepLinkToFile="gitlens.copyDeepLinkToFile",a.CopyDeepLinkToFileAtRevision="gitlens.copyDeepLinkToFileAtRevision",a.CopyDeepLinkToLines="gitlens.copyDeepLinkToLines",a.CopyDeepLinkToRepo="gitlens.copyDeepLinkToRepo",a.CopyDeepLinkToTag="gitlens.copyDeepLinkToTag",a.CopyDeepLinkToWorkspace="gitlens.copyDeepLinkToWorkspace",a.CopyMessageToClipboard="gitlens.copyMessageToClipboard",a.CopyRemoteBranchesUrl="gitlens.copyRemoteBranchesUrl",a.CopyRemoteBranchUrl="gitlens.copyRemoteBranchUrl",a.CopyRemoteCommitUrl="gitlens.copyRemoteCommitUrl",a.CopyRemoteComparisonUrl="gitlens.copyRemoteComparisonUrl",a.CopyRemoteFileUrl="gitlens.copyRemoteFileUrlToClipboard",a.CopyRemoteFileUrlWithoutRange="gitlens.copyRemoteFileUrlWithoutRange",a.CopyRemoteFileUrlFrom="gitlens.copyRemoteFileUrlFrom",a.CopyRemoteIssueUrl="gitlens.copyRemoteIssueUrl",a.CopyRemotePullRequestUrl="gitlens.copyRemotePullRequestUrl",a.CopyRemoteRepositoryUrl="gitlens.copyRemoteRepositoryUrl",a.CopyShaToClipboard="gitlens.copyShaToClipboard",a.CopyRelativePathToClipboard="gitlens.copyRelativePathToClipboard",a.ApplyPatchFromClipboard="gitlens.applyPatchFromClipboard",a.CopyPatchToClipboard="gitlens.copyPatchToClipboard",a.CopyWorkingChangesToWorktree="gitlens.copyWorkingChangesToWorktree",a.CreatePatch="gitlens.createPatch",a.CreateCloudPatch="gitlens.createCloudPatch",a.CreatePullRequestOnRemote="gitlens.createPullRequestOnRemote",a.DiffDirectory="gitlens.diffDirectory",a.DiffDirectoryWithHead="gitlens.diffDirectoryWithHead",a.DiffFolderWithRevision="gitlens.diffFolderWithRevision",a.DiffFolderWithRevisionFrom="gitlens.diffFolderWithRevisionFrom",a.DiffWith="gitlens.diffWith",a.DiffWithNext="gitlens.diffWithNext",a.DiffWithNextInDiffLeft="gitlens.diffWithNextInDiffLeft",a.DiffWithNextInDiffRight="gitlens.diffWithNextInDiffRight",a.DiffWithPrevious="gitlens.diffWithPrevious",a.DiffWithPreviousInDiffLeft="gitlens.diffWithPreviousInDiffLeft",a.DiffWithPreviousInDiffRight="gitlens.diffWithPreviousInDiffRight",a.DiffLineWithPrevious="gitlens.diffLineWithPrevious",a.DiffWithRevision="gitlens.diffWithRevision",a.DiffWithRevisionFrom="gitlens.diffWithRevisionFrom",a.DiffWithWorking="gitlens.diffWithWorking",a.DiffWithWorkingInDiffLeft="gitlens.diffWithWorkingInDiffLeft",a.DiffWithWorkingInDiffRight="gitlens.diffWithWorkingInDiffRight",a.DiffLineWithWorking="gitlens.diffLineWithWorking",a.DisconnectRemoteProvider="gitlens.disconnectRemoteProvider",a.DisableDebugLogging="gitlens.disableDebugLogging",a.EnableDebugLogging="gitlens.enableDebugLogging",a.DisableRebaseEditor="gitlens.disableRebaseEditor",a.EnableRebaseEditor="gitlens.enableRebaseEditor",a.ExternalDiff="gitlens.externalDiff",a.ExternalDiffAll="gitlens.externalDiffAll",a.FetchRepositories="gitlens.fetchRepositories",a.GenerateCommitMessage="gitlens.generateCommitMessage",a.GetStarted="gitlens.getStarted",a.GKSwitchOrganization="gitlens.gk.switchOrganization",a.InviteToLiveShare="gitlens.inviteToLiveShare",a.OpenAutolinkUrl="gitlens.openAutolinkUrl",a.OpenBlamePriorToChange="gitlens.openBlamePriorToChange",a.OpenBranchesOnRemote="gitlens.openBranchesOnRemote",a.OpenBranchOnRemote="gitlens.openBranchOnRemote",a.OpenCurrentBranchOnRemote="gitlens.openCurrentBranchOnRemote",a.OpenChangedFiles="gitlens.openChangedFiles",a.OpenCommitOnRemote="gitlens.openCommitOnRemote",a.OpenComparisonOnRemote="gitlens.openComparisonOnRemote",a.OpenFileHistory="gitlens.openFileHistory",a.OpenFileFromRemote="gitlens.openFileFromRemote",a.OpenFileOnRemote="gitlens.openFileOnRemote",a.OpenFileOnRemoteFrom="gitlens.openFileOnRemoteFrom",a.OpenFileAtRevision="gitlens.openFileRevision",a.OpenFileAtRevisionFrom="gitlens.openFileRevisionFrom",a.OpenFolderHistory="gitlens.openFolderHistory",a.OpenOnRemote="gitlens.openOnRemote",a.OpenIssueOnRemote="gitlens.openIssueOnRemote",a.OpenCloudPatch="gitlens.openCloudPatch",a.OpenPatch="gitlens.openPatch",a.OpenPullRequestOnRemote="gitlens.openPullRequestOnRemote",a.OpenAssociatedPullRequestOnRemote="gitlens.openAssociatedPullRequestOnRemote",a.OpenRepoOnRemote="gitlens.openRepoOnRemote",a.OpenRevisionFile="gitlens.openRevisionFile",a.OpenRevisionFileInDiffLeft="gitlens.openRevisionFileInDiffLeft",a.OpenRevisionFileInDiffRight="gitlens.openRevisionFileInDiffRight",a.OpenWalkthrough="gitlens.openWalkthrough",a.OpenWorkingFile="gitlens.openWorkingFile",a.OpenWorkingFileInDiffLeft="gitlens.openWorkingFileInDiffLeft",a.OpenWorkingFileInDiffRight="gitlens.openWorkingFileInDiffRight",a.PullRepositories="gitlens.pullRepositories",a.PushRepositories="gitlens.pushRepositories",a.GitCommands="gitlens.gitCommands",a.GitCommandsBranch="gitlens.gitCommands.branch",a.GitCommandsBranchCreate="gitlens.gitCommands.branch.create",a.GitCommandsBranchDelete="gitlens.gitCommands.branch.delete",a.GitCommandsBranchPrune="gitlens.gitCommands.branch.prune",a.GitCommandsBranchRename="gitlens.gitCommands.branch.rename",a.GitCommandsCheckout="gitlens.gitCommands.checkout",a.GitCommandsCherryPick="gitlens.gitCommands.cherryPick",a.GitCommandsHistory="gitlens.gitCommands.history",a.GitCommandsMerge="gitlens.gitCommands.merge",a.GitCommandsRebase="gitlens.gitCommands.rebase",a.GitCommandsRemote="gitlens.gitCommands.remote",a.GitCommandsRemoteAdd="gitlens.gitCommands.remote.add",a.GitCommandsRemotePrune="gitlens.gitCommands.remote.prune",a.GitCommandsRemoteRemove="gitlens.gitCommands.remote.remove",a.GitCommandsReset="gitlens.gitCommands.reset",a.GitCommandsRevert="gitlens.gitCommands.revert",a.GitCommandsShow="gitlens.gitCommands.show",a.GitCommandsStash="gitlens.gitCommands.stash",a.GitCommandsStashDrop="gitlens.gitCommands.stash.drop",a.GitCommandsStashList="gitlens.gitCommands.stash.list",a.GitCommandsStashPop="gitlens.gitCommands.stash.pop",a.GitCommandsStashPush="gitlens.gitCommands.stash.push",a.GitCommandsStashRename="gitlens.gitCommands.stash.rename",a.GitCommandsStatus="gitlens.gitCommands.status",a.GitCommandsSwitch="gitlens.gitCommands.switch",a.GitCommandsTag="gitlens.gitCommands.tag",a.GitCommandsTagCreate="gitlens.gitCommands.tag.create",a.GitCommandsTagDelete="gitlens.gitCommands.tag.delete",a.GitCommandsWorktree="gitlens.gitCommands.worktree",a.GitCommandsWorktreeCreate="gitlens.gitCommands.worktree.create",a.GitCommandsWorktreeDelete="gitlens.gitCommands.worktree.delete",a.GitCommandsWorktreeOpen="gitlens.gitCommands.worktree.open",a.OpenOrCreateWorktreeForGHPR="gitlens.ghpr.views.openOrCreateWorktree",a.PlusHide="gitlens.plus.hide",a.PlusLogin="gitlens.plus.login",a.PlusLogout="gitlens.plus.logout",a.PlusManage="gitlens.plus.manage",a.PlusPurchase="gitlens.plus.purchase",a.PlusReactivateProTrial="gitlens.plus.reactivateProTrial",a.PlusResendVerification="gitlens.plus.resendVerification",a.PlusRestore="gitlens.plus.restore",a.PlusShowPlans="gitlens.plus.showPlans",a.PlusSignUp="gitlens.plus.signUp",a.PlusStartPreviewTrial="gitlens.plus.startPreviewTrial",a.PlusValidate="gitlens.plus.validate",a.QuickOpenFileHistory="gitlens.quickOpenFileHistory",a.RefreshFocus="gitlens.focus.refresh",a.RefreshGraph="gitlens.graph.refresh",a.RefreshHover="gitlens.refreshHover",a.ResetAvatarCache="gitlens.resetAvatarCache",a.ResetAIKey="gitlens.resetAIKey",a.ResetSuppressedWarnings="gitlens.resetSuppressedWarnings",a.ResetTrackedUsage="gitlens.resetTrackedUsage",a.ResetViewsLayout="gitlens.resetViewsLayout",a.RevealCommitInView="gitlens.revealCommitInView",a.ShareAsCloudPatch="gitlens.shareAsCloudPatch",a.SearchCommits="gitlens.showCommitSearch",a.SearchCommitsInView="gitlens.views.searchAndCompare.searchCommits",a.ShowBranchesView="gitlens.showBranchesView",a.ShowCommitDetailsView="gitlens.showCommitDetailsView",a.ShowCommitInView="gitlens.showCommitInView",a.ShowCommitsInView="gitlens.showCommitsInView",a.ShowCommitsView="gitlens.showCommitsView",a.ShowContributorsView="gitlens.showContributorsView",a.ShowDraftsView="gitlens.showDraftsView",a.ShowFileHistoryView="gitlens.showFileHistoryView",a.ShowFocusPage="gitlens.showFocusPage",a.ShowGraph="gitlens.showGraph",a.ShowGraphPage="gitlens.showGraphPage",a.ShowGraphView="gitlens.showGraphView",a.ShowHomeView="gitlens.showHomeView",a.ShowAccountView="gitlens.showAccountView",a.ShowInCommitGraph="gitlens.showInCommitGraph",a.ShowInCommitGraphView="gitlens.showInCommitGraphView",a.ShowInDetailsView="gitlens.showInDetailsView",a.ShowInTimeline="gitlens.showInTimeline",a.ShowLastQuickPick="gitlens.showLastQuickPick",a.ShowLineCommitInView="gitlens.showLineCommitInView",a.ShowLineHistoryView="gitlens.showLineHistoryView",a.OpenOnlyChangedFiles="gitlens.openOnlyChangedFiles",a.ShowPatchDetailsPage="gitlens.showPatchDetailsPage",a.ShowQuickBranchHistory="gitlens.showQuickBranchHistory",a.ShowQuickCommit="gitlens.showQuickCommitDetails",a.ShowQuickCommitFile="gitlens.showQuickCommitFileDetails",a.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",a.ShowQuickFileHistory="gitlens.showQuickFileHistory",a.ShowQuickRepoStatus="gitlens.showQuickRepoStatus",a.ShowQuickCommitRevision="gitlens.showQuickRevisionDetails",a.ShowQuickCommitRevisionInDiffLeft="gitlens.showQuickRevisionDetailsInDiffLeft",a.ShowQuickCommitRevisionInDiffRight="gitlens.showQuickRevisionDetailsInDiffRight",a.ShowQuickStashList="gitlens.showQuickStashList",a.ShowRemotesView="gitlens.showRemotesView",a.ShowRepositoriesView="gitlens.showRepositoriesView",a.ShowSearchAndCompareView="gitlens.showSearchAndCompareView",a.ShowSettingsPage="gitlens.showSettingsPage",a.ShowSettingsPageAndJumpToFileAnnotations="gitlens.showSettingsPage!file-annotations",a.ShowSettingsPageAndJumpToBranchesView="gitlens.showSettingsPage!branches-view",a.ShowSettingsPageAndJumpToCommitsView="gitlens.showSettingsPage!commits-view",a.ShowSettingsPageAndJumpToContributorsView="gitlens.showSettingsPage!contributors-view",a.ShowSettingsPageAndJumpToFileHistoryView="gitlens.showSettingsPage!file-history-view",a.ShowSettingsPageAndJumpToLineHistoryView="gitlens.showSettingsPage!line-history-view",a.ShowSettingsPageAndJumpToRemotesView="gitlens.showSettingsPage!remotes-view",a.ShowSettingsPageAndJumpToRepositoriesView="gitlens.showSettingsPage!repositories-view",a.ShowSettingsPageAndJumpToSearchAndCompareView="gitlens.showSettingsPage!search-compare-view",a.ShowSettingsPageAndJumpToStashesView="gitlens.showSettingsPage!stashes-view",a.ShowSettingsPageAndJumpToTagsView="gitlens.showSettingsPage!tags-view",a.ShowSettingsPageAndJumpToWorkTreesView="gitlens.showSettingsPage!worktrees-view",a.ShowSettingsPageAndJumpToViews="gitlens.showSettingsPage!views",a.ShowSettingsPageAndJumpToCommitGraph="gitlens.showSettingsPage!commit-graph",a.ShowSettingsPageAndJumpToAutolinks="gitlens.showSettingsPage!autolinks",a.ShowStashesView="gitlens.showStashesView",a.ShowTagsView="gitlens.showTagsView",a.ShowTimelinePage="gitlens.showTimelinePage",a.ShowTimelineView="gitlens.showTimelineView",a.ShowWelcomePage="gitlens.showWelcomePage",a.ShowWorktreesView="gitlens.showWorktreesView",a.ShowWorkspacesView="gitlens.showWorkspacesView",a.StashApply="gitlens.stashApply",a.StashSave="gitlens.stashSave",a.StashSaveFiles="gitlens.stashSaveFiles",a.SwitchAIModel="gitlens.switchAIModel",a.SwitchMode="gitlens.switchMode",a.ToggleCodeLens="gitlens.toggleCodeLens",a.ToggleFileBlame="gitlens.toggleFileBlame",a.ToggleFileBlameInDiffLeft="gitlens.toggleFileBlameInDiffLeft",a.ToggleFileBlameInDiffRight="gitlens.toggleFileBlameInDiffRight",a.ToggleFileChanges="gitlens.toggleFileChanges",a.ToggleFileChangesOnly="gitlens.toggleFileChangesOnly",a.ToggleFileHeatmap="gitlens.toggleFileHeatmap",a.ToggleFileHeatmapInDiffLeft="gitlens.toggleFileHeatmapInDiffLeft",a.ToggleFileHeatmapInDiffRight="gitlens.toggleFileHeatmapInDiffRight",a.ToggleGraph="gitlens.toggleGraph",a.ToggleMaximizedGraph="gitlens.toggleMaximizedGraph",a.ToggleLineBlame="gitlens.toggleLineBlame",a.ToggleReviewMode="gitlens.toggleReviewMode",a.ToggleZenMode="gitlens.toggleZenMode",a.ViewsCopy="gitlens.views.copy",a.ViewsOpenDirectoryDiff="gitlens.views.openDirectoryDiff",a.ViewsOpenDirectoryDiffWithWorking="gitlens.views.openDirectoryDiffWithWorking",a.Deprecated_DiffHeadWith="gitlens.diffHeadWith",a.Deprecated_DiffWorkingWith="gitlens.diffWorkingWith",a.Deprecated_OpenBranchesInRemote="gitlens.openBranchesInRemote",a.Deprecated_OpenBranchInRemote="gitlens.openBranchInRemote",a.Deprecated_OpenCommitInRemote="gitlens.openCommitInRemote",a.Deprecated_OpenFileInRemote="gitlens.openFileInRemote",a.Deprecated_OpenInRemote="gitlens.openInRemote",a.Deprecated_OpenRepoInRemote="gitlens.openRepoInRemote",a.Deprecated_ShowFileHistoryInView="gitlens.showFileHistoryInView",a);let p=new Map([["workbench.view.scm",["branches","commits","remotes","repositories","stashes","tags","worktrees","contributors"]],["workbench.view.extension.gitlensPanel",["graph","graphDetails"]],["workbench.view.extension.gitlensInspect",["commitDetails","fileHistory","lineHistory","timeline","searchAndCompare"]],["workbench.view.extension.gitlens",["home","workspaces","account"]]]);var g=((l=g||{}).AngleBracketLeftHeavy="❰",l.AngleBracketRightHeavy="❱",l.ArrowBack="↩",l.ArrowDown="↓",l.ArrowDownUp="⇵",l.ArrowDropRight="⤷",l.ArrowHeadRight="➤",l.ArrowLeft="←",l.ArrowLeftDouble="⇐",l.ArrowLeftRight="↔",l.ArrowLeftRightDouble="⇔",l.ArrowLeftRightDoubleStrike="⇎",l.ArrowLeftRightLong="⟷",l.ArrowRight="→",l.ArrowRightDouble="⇒",l.ArrowRightHollow="⇨",l.ArrowUp="↑",l.ArrowUpDown="⇅",l.ArrowUpRight="↗",l.ArrowsHalfLeftRight="⇋",l.ArrowsHalfRightLeft="⇌",l.ArrowsLeftRight="⇆",l.ArrowsRightLeft="⇄",l.Asterisk="∗",l.Check="✔",l.Dash="—",l.Dot="•",l.Ellipsis="…",l.EnDash="–",l.Envelope="✉",l.EqualsTriple="≡",l.Flag="⚑",l.FlagHollow="⚐",l.MiddleEllipsis="⋯",l.MuchLessThan="≪",l.MuchGreaterThan="≫",l.Pencil="✎",l.Space=" ",l.SpaceThin=" ",l.SpaceThinnest=" ",l.SquareWithBottomShadow="❏",l.SquareWithTopShadow="❐",l.Warning="⚠",l.ZeroWidthSpace="​",l);let m=["left","alt+left","ctrl+left","right","alt+right","ctrl+right","alt+,","alt+.","alt+enter","ctrl+enter","escape"];var f=((h=f||{}).DebugConsole="debug",h.File="file",h.Git="git",h.GitHub="github",h.GitLens="gitlens",h.Output="output",h.PRs="pr",h.Terminal="vscode-terminal",h.Vsls="vsls",h.VslsScc="vsls-scc",h.Virtual="vscode-vfs",h),w=((c=w||{}).Version="gitlens:synced:version",c.PreReleaseVersion="gitlens:synced:preVersion",c.HomeViewWelcomeVisible="gitlens:views:welcome:visible",c)},9964:(e,t,i)=>{let r,s,o,n,a,l,h,c,u,d;i.d(t,{Container:()=>a$,k:()=>a_});var p,g,m,f,w,v,y,b,C=i(7304),A=i(4169);let k=require("child_process"),P=require("fs");var S=i(7072),R=i.n(S),D=i(6520),$=i(6948),_=i(1608),I=((p=I||{})[p.Throw=0]="Throw",p[p.Ignore=1]="Ignore",p),T=i(4532),F=i(1424),O=i(6088),x=i(2452),E=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),B=(e,t,i)=>{if(null!=t){var r;if("object"!=typeof t&&"function"!=typeof t)throw TypeError("Object expected");if(i&&(r=t[E("asyncDispose")]),void 0===r&&(r=t[E("dispose")]),"function"!=typeof r)throw TypeError("Object not disposable");e.push([i,r,t])}else i&&e.push([i]);return t},U=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let W=/^<h>(.+)<n>(.+)<u>(.*)<t>(?:\[(?:ahead ([0-9]+))?[,\s]*(?:behind ([0-9]+))?]|\[(gone)])?<r>(.*)<d>(.*)$/gm;var N=i(9455),q=i(3732),L=i(1072),M=i(1080),Q=i(2060),G=i(7280),Y=i(668),V=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),z=(e,t,i)=>{if(null!=t){var r;if("object"!=typeof t&&"function"!=typeof t)throw TypeError("Object expected");if(i&&(r=t[V("asyncDispose")]),void 0===r&&(r=t[V("dispose")]),"function"!=typeof r)throw TypeError("Object not disposable");e.push([i,r,t])}else i&&e.push([i]);return t},H=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let j=/diff --git a\/(.*) b\/(.*)/,J=/^@@ -(\d+?),(\d+?) \+(\d+?),(\d+?) @@/,K=/(\S)\S*\t([^\t\n]+)(?:\t(.+))?/,Z=/^(\d+?|-)\s+?(\d+?|-)\s+?(.*)(?:\n\s(delete|rename|copy|create))?/,X=/(.+)\s=>\s(.+)/,ee=/(.*?){(.+?)?\s=>\s(.*?)?}(.*)/,et=/^<r> (.*)\s*(?:(?:diff --git a\/(.*) b\/(.*))|(?:(\S)\S*\t([^\t\n]+)(?:\t(.+))?))/gm,ei=/^<r> (\S+)\s*(.*)$/s,er=/^(\S)\S*\t([^\t\n]+)(?:\t(.+)?)?$/gm,es=/(?<files>\d+) files? changed(?:, (?<additions>\d+) insertions?\(\+\))?(?:, (?<deletions>\d+) deletions?\(-\))?/,eo="%x3c",en="%x3e",ea="%x2f",el="%x20";var eh=((g=eh||{})[g.Log=0]="Log",g[g.LogFile=1]="LogFile",g);function ec(e,t){let i=t?.prefix??"",r=[];for(let s in e)r.push(s),i+=`${t?.fieldPrefix??""}${e[s]}${t?.fieldSuffix??(t?.fieldPrefix==null?"%x00":"")}`;let s=["-z",`--format=${i}`];return t?.additionalArgs!=null&&t.additionalArgs.length>0&&s.push(...t.additionalArgs),{arguments:s,parse:function*(e){let i,s={},o=0,n=(0,L.Nk)(e,t?.separator??"\0");if(t?.skip)for(let e=0;e<t.skip;e++)i=n.next();for(;!(i=n.next()).done;)s[r[o++]]=i.value,o===r.length&&(o=0,i=n.next(),t?.parseEntry?.(n,s),yield s,s={})}}}function eu(e){return{arguments:["-z",`--format=${e}`],parse:function*(e){let t;let i=(0,L.Nk)(e,"\0");for(;!(t=i.next()).done;)yield t.value}}}function ed(e){return ec(e,{additionalArgs:["--shortstat"],parseEntry:function(e,t){let i=e.next().value,r=es.exec(i);return r?.groups!=null&&(t.stats={files:Number(r.groups.files||0),additions:Number(r.groups.additions||0),deletions:Number(r.groups.deletions||0)}),e.next(),t},prefix:"%x00%x00",separator:"\0",fieldSuffix:"%x00",skip:2})}let ep=`${eo}${ea}f${en}%n${eo}r${en}${el}%H%n${eo}a${en}${el}%aN%n${eo}e${en}${el}%aE%n${eo}d${en}${el}%at%n${eo}n${en}${el}%cN%n${eo}m${en}${el}%cE%n${eo}c${en}${el}%ct%n${eo}p${en}${el}%P%n${eo}t${en}${el}%D%n${eo}s${en}%n%B%n${eo}${ea}s${en}%n${eo}f${en}`,eg=`${eo}${ea}f${en}%n${eo}r${en}${el}%H%n${eo}a${en}${el}%aN%n${eo}e${en}${el}%aE%n${eo}d${en}${el}%at%n${eo}n${en}${el}%cN%n${eo}m${en}${el}%cE%n${eo}c${en}${el}%ct%n${eo}p${en}${el}%P%n${eo}s${en}%n%B%n${eo}${ea}s${en}%n${eo}f${en}`,em=`${eo}r${en}${el}%H`;function ef(e,t,i,r,s,o,n,a,l,h,c,u){var d=[];try{let p,g,m,f,w;let v=z(d,(0,O.i)(`Git.parseLog(${r}, fileName=${s}, sha=${o})`,{log:!1,logLevel:"debug"}));if(!t)return;let y={},b=0,C=!0,A=(0,L.Nk)(`${t}</f>`),k=A.next();if(k.done)return;void 0!==r&&(r=(0,q.ay)(r));let P=new Map,S=a;e:for(;!(k=A.next()).done&&(w=k.value,!l||!a||!(b>=a));)switch(w.charCodeAt(1)){case 114:y={sha:w.substring(4)};break;case 97:Q.Oy===y.sha?y.author="You":y.author=w.substring(4);break;case 101:y.authorEmail=w.substring(4);break;case 100:y.authorDate=w.substring(4);break;case 110:y.committer=w.substring(4);break;case 109:case 99:y.committedDate=w.substring(4);break;case 112:w=w.substring(4),y.parentShas=0!==w.length?w.split(" "):void 0;break;case 116:w=w.substring(4),y.tips=0!==w.length?w.split(", "):void 0;break;case 115:for(;!(k=A.next()).done&&(w=k.value,"</s>"!==w);)void 0===y.summary?y.summary=w:y.summary+=`
${w}`;null!=y.summary&&10===y.summary.charCodeAt(y.summary.length-1)&&(y.summary=y.summary.slice(0,-1));break;case 102:{k=A.next();let t=!0;for((k.done||"</f>"===k.value)&&(t=!1);t&&!(k=A.next()).done&&(w=k.value,"</f>"!==w);)if(!w.startsWith("warning:")){if(0===i)g=K.exec(w),null!=g&&(void 0===y.files&&(y.files=[]),m=g[3],void 0!==m?y.files.push({status:g[1],path:m,originalPath:g[2]}):y.files.push({status:g[1],path:g[2]}));else{if(g=j.exec(w),null!=g){for([,y.originalPath,y.path]=g,y.path===y.originalPath?(y.originalPath=void 0,y.status=G.fX.Modified):y.status=G.fX.Renamed,A.next(),A.next(),k=A.next(),g=J.exec(k.value),null!==g&&(y.line={sha:y.sha,originalLine:parseInt(g[1],10),line:parseInt(g[3],10)});!(k=A.next()).done&&"</f>"!==k.value;);break}if(k=A.next(),g=Z.exec(`${w}
${k.value}`),null!=g)switch(y.fileStats={additions:Number(g[1])||0,deletions:Number(g[2])||0,changes:0},g[4]){case void 0:default:y.status="M",y.path=g[3];break;case"copy":case"rename":if(y.status="copy"===g[4]?"C":"R",m=g[3],f=ee.exec(m),null!=f){let[,e,t,i,r]=f;i?y.path=`${e}${i}${r}`:y.path=`${e.endsWith("/")&&r.startsWith("/")?e.slice(0,-1):e}${r}`,t?y.originalPath=`${e}${t}${r}`:y.originalPath=`${e.endsWith("/")&&r.startsWith("/")?e.slice(0,-1):e}${r}`}else f=X.exec(m),null!=f?(y.path=f[2],y.originalPath=f[1]):y.path=m;break;case"create":y.status="A",y.path=g[3];break;case"delete":y.status="D",y.path=g[3]}if(k.done||"</f>"===k.value)break}}void 0!==y.files&&(y.path=(0,N.Gs)(y.files,e=>e.path?e.path:void 0).join(", ")),C&&void 0===r&&1===i&&void 0!==s?(r=(0,q.ay)(s.replace(s.startsWith("/")?`/${y.path}`:y.path,"")),p=(0,q.ay)((0,q.U3)(r,s))):p=y.path??(null!=r&&null!=s?(0,q.ay)((0,q.U3)(r,s)):void 0),C=!1;let o=P.get(y.sha);if(void 0===o){if(b++,a&&b>a)break e}else S&&S--;!function(e,t,i,r,s,o,n,a,l){if(null==i){null!=t.author&&(0,Y.a)(a,t.author,t.authorEmail)&&(t.author="You"),null!=t.committer&&(0,Y.a)(a,t.committer,t.committerEmail)&&(t.committer="You");let h=t.originalPath??(o!==t.path?t.path:void 0),c={files:t.files?.map(e=>new G.Gm(s,e.path,e.status,e.originalPath))};1===r&&null!=o&&(c.file=new G.Gm(s,o,t.status,h,void 0,t.fileStats));let u=l?.get(t.sha);null!=u?(i=new M.Ck(e,s,u.sha,u.author,u.committer,u.summary,u.parents,u.message,c,void 0,null!=t.line?[t.line]:[],t.tips,u.stashName,u.stashOnRef),n.set(u.sha,i)):(i=new M.Ck(e,s,t.sha,new M.Sg(t.author,t.authorEmail,new Date(1e3*t.authorDate)),new M.Sg(t.committer,t.committerEmail,new Date(1e3*t.committedDate)),t.summary?.split("\n",1)[0]??"",t.parentShas??[],t.summary??"",c,void 0,null!=t.line?[t.line]:[],t.tips),n.set(t.sha,i))}}(e,y,o,i,r,p,P,n,c)}}return v?.stop({suffix:` parsed ${P.size} commits`}),{repoPath:r,commits:P,sha:o,count:b,limit:a,range:h,hasMore:u??!!(S&&b>S&&1!==S)}}catch(e){var p=e,g=!0}finally{H(d,p,g)}}function ew(e,t,i){var r=[];try{let s,o,n,a,l,h,c;z(r,(0,O.i)("Git.parseLogSimple",{log:!1,logLevel:"debug"}));do{if(c=et.exec(e),null==c)break;if(c[1]===i||t-- >0)continue;[,s,o,n,a,l,h]=c,l=` ${n||o||h||l}`.substr(1),a=null==a||0===a.length?void 0:` ${a}`.substr(1)}while(t>=0)return et.lastIndex=0,[null==s||0===s.length?void 0:` ${s}`.substr(1),l,a]}catch(e){var s=e,o=!0}finally{H(r,s,o)}}function ev(e,t){var i=[];try{let r,s,o;z(i,(0,O.i)("Git.parseLogSimpleRenamed",{log:!1,logLevel:"debug"}));let n=ei.exec(e);if(null==n)return[void 0,void 0,void 0];let[,a,l]=n;for(;n=er.exec(l),null!=n;){if([,r,s,o]=n,t!==s){r=void 0,s=void 0,o=void 0;continue}s=` ${o||s}`.substr(1),r=null==r||0===r.length?void 0:` ${r}`.substr(1);break}return er.lastIndex=0,[null==a||0===a.length||null==s?void 0:` ${a}`.substr(1),s,r]}catch(e){var r=e,s=!0}finally{H(i,r,s)}}var ey=i(6944),eb=i(5019),eC=Object.defineProperty,eA=Object.getOwnPropertyDescriptor,ek=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?eA(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eC(t,i,o),o};let GitReflogRecord=class GitReflogRecord{constructor(e,t,i,r,s,o,n){this.repoPath=e,this.sha=t,this._selector=i,this.date=r,this.command=s,this.commandArgs=o,this.details=n}_previousSha;formatDate(e){return(0,ey._m)(this.date,e??"MMMM Do, YYYY h:mma")}formatDateFromNow(){return(0,ey.Yn)(this.date)}get formattedDate(){return"absolute"===a$.instance.CommitDateFormatting.dateStyle?this.formatDate(a$.instance.CommitDateFormatting.dateFormat):this.formatDateFromNow()}get HEAD(){return null==this._selector||0===this._selector.length?"":this._selector.startsWith("refs/heads")?this._selector.substr(11):this._selector.startsWith("refs/remotes")?this._selector.substr(13):this._selector}get previousSha(){return this._previousSha}get previousShortSha(){return(0,F.c5)(this._previousSha)}get selector(){return this._selector}get shortSha(){return(0,F.c5)(this.sha)}update(e,t){void 0!==e&&(this._previousSha=e),void 0!==t&&(this._selector=t)}};ek([(0,eb.s)(e=>e??"MMMM Do, YYYY h:mma")],GitReflogRecord.prototype,"formatDate",1),ek([(0,eb.s)()],GitReflogRecord.prototype,"HEAD",1),ek([(0,eb.s)()],GitReflogRecord.prototype,"previousShortSha",1),ek([(0,eb.s)()],GitReflogRecord.prototype,"shortSha",1);var eP=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),eS=(e,t,i)=>{if(null!=t){var r;if("object"!=typeof t&&"function"!=typeof t)throw TypeError("Object expected");if(i&&(r=t[eP("asyncDispose")]),void 0===r&&(r=t[eP("dispose")]),"function"!=typeof r)throw TypeError("Object not disposable");e.push([i,r,t])}else i&&e.push([i]);return t},eR=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let eD=/^<r>(.+)<d>(.+?)@{(.+)}<s>(\w*)(.*?)(?::(.*))?$/gm,e$=/.*?\/?HEAD$/,e_="%x3c",eI="%x3e",eT=`${e_}r${eI}%H${e_}d${eI}%gD${e_}s${eI}%gs`;var eF=i(7620),eO=i(6192),ex=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),eE=(e,t,i)=>{if(null!=t){var r;if("object"!=typeof t&&"function"!=typeof t)throw TypeError("Object expected");if(i&&(r=t[ex("asyncDispose")]),void 0===r&&(r=t[ex("dispose")]),"function"!=typeof r)throw TypeError("Object not disposable");e.push([i,r,t])}else i&&e.push([i]);return t},eB=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let eU=/^<n>(.+)<\*r>(.*)<r>(.*)<d>(.*)<ad>(.*)<s>(.*)$/gm;var eW=i(4136),eN=i(7348),eq=i(6448),eL=i(7812),eM=i(3e3),eQ=i(3284),eG=i(5496);let eY="win32"===D.platform,eV=/[\\/]/,ez=/\.ps1$/i,eH=/\.(bat|cmd)$/i,ej=/\.(js)$/i;function eJ(e){if(eV.test(e))return e;let t=(0,S.join)(".",e);try{let e=(0,P.statSync)(t);if(e?.isFile()&&eK(e))return t}catch{}let i=D.env.PATH;if(null!=i&&0!==i.length){let t;for(let r of i.split(eY?";":":")){let i=(0,S.join)(r,e);try{if(t=(0,P.statSync)(i),t?.isFile()&&eK(t))return i}catch{}}}return e}function eK(e){if(eY)return!0;let t=!e.gid||null!=D.getgid&&e.gid===D.getgid(),i=!e.uid||null!=D.getuid&&e.uid===D.getuid();return!!(1&e.mode||8&e.mode&&t||64&e.mode&&i)}let eZ=/stdout maxBuffer( length)? exceeded/;let RunError=class RunError extends Error{constructor(e,t,i){super(e.message),this.original=e,this.stdout=t,this.stderr=i,t=t.trim(),i=i.trim(),Error.captureStackTrace?.(this,RunError)}get cmd(){return this.original.cmd}get killed(){return this.original.killed}get code(){return this.original.code}get signal(){return this.original.signal}};let CancelledRunError=class CancelledRunError extends RunError{constructor(e,t,i,r="SIGTERM"){super({name:"CancelledRunError",message:"Cancelled",cmd:e,killed:t,code:i,signal:r},"",""),Error.captureStackTrace?.(this,CancelledRunError)}};function eX(e,t,r,s){let{stdin:o,stdinEncoding:n,...a}={maxBuffer:1048576e3,...s},l=!1;return new Promise((h,c)=>{let u=(0,k.execFile)(e,t,a,async(o,n,d)=>{if(!l){if(s?.exitCodeOnly){h(o?.code??u.exitCode);return}if(null!=o){let e,t;if(eZ.test(o.message)&&(o.message=`Command output exceeded the allocated stdout buffer. Set 'options.maxBuffer' to a larger value than ${a.maxBuffer} bytes`),"utf8"===r||"binary"===r||"buffer"===r)e=n.toString(),t=d.toString();else{let s=(await i.e(208).then(i.t.bind(i,2124,23))).decode;e=s(Buffer.from(n,"binary"),r),t=s(Buffer.from(d,"binary"),r)}c(new RunError(o,e,t));return}d&&eq.YJ.warn(`Warning(${e} ${t.join(" ")}): ${d}`),"utf8"===r||"binary"===r||"buffer"===r?h(n):h((0,(await i.e(208).then(i.t.bind(i,2124,23))).decode)(Buffer.from(n,"binary"),r))}});s?.cancellation?.onCancellationRequested(()=>{let t=u.kill();l=!0,s?.exitCodeOnly?h(0):c(new CancelledRunError(e,t))}),null!=o&&u.stdin?.end(o,n??"utf8")})}async function e0(e){return new Promise(t=>(0,P.access)(e,P.constants.F_OK,e=>t(null==e)))}var e1=Object.defineProperty,e2=Object.getOwnPropertyDescriptor;let e4=Object.freeze([]),e6=Object.freeze({}),e3=Object.freeze(["-c","color.branch=false"]),e8=Object.freeze(["-c","color.diff=false"]),e7=Object.freeze(["-c","log.showSignature=false"]),e5=Object.freeze(["-c","log.showSignature=false","-c","diff.renameLimit=0"]),e9=Object.freeze(["-c","color.status=false"]),te=new TextDecoder("utf8"),tt="4b825dc642cb6eb9a060e54bf8d69288fbee4904",ti={badRevision:/bad revision '(.*?)'/i,cantLockRef:/cannot lock ref|unable to update local ref/i,changesWouldBeOverwritten:/Your local changes to the following files would be overwritten/i,commitChangesFirst:/Please, commit your changes before you can/i,conflict:/^CONFLICT \([^)]+\): \b/m,invalidObjectName:/invalid object name: (.*)\s/i,invalidObjectNameList:/could not open object name list: (.*)\s/i,noFastForward:/\(non-fast-forward\)/i,noMergeBase:/no merge base/i,noRemoteRepositorySpecified:/No remote repository specified\./i,noUserNameConfigured:/Please tell me who you are\./i,invalidLineCount:/file .+? has only \d+ lines/i,uncommittedChanges:/contains modified or untracked files/i,alreadyExists:/already exists/i,alreadyCheckedOut:/already checked out/i,mainWorkingTree:/is a main working tree/i,noUpstream:/^fatal: The current branch .* has no upstream branch/i,permissionDenied:/Permission.*denied/i,pushRejected:/^error: failed to push some refs to\b/m,rebaseMultipleBranches:/cannot rebase onto multiple branches/i,remoteAhead:/rejected because the remote contains work/i,remoteConnection:/Could not read from remote repository/i,tagConflict:/! \[rejected\].*\(would clobber existing tag\)/m,unmergedFiles:/is not possible because you have unmerged files/i,unstagedChanges:/You have unstaged changes/i},tr={notARepository:/Not a git repository/i,outsideRepository:/is outside repository/i,noPath:/no such path/i,noCommits:/does not have any commits/i,notFound:/Path '.*?' does not exist in/i,foundButNotInRevision:/Path '.*?' exists on disk, but not in/i,headNotABranch:/HEAD does not point to a branch/i,noUpstream:/no upstream configured for branch '(.*?)'/i,unknownRevision:/ambiguous argument '.*?': unknown revision or path not in the working tree|not stored as a remote-tracking branch/i,mustRunInWorkTree:/this operation must be run in a work tree/i,patchWithConflicts:/Applied patch to '.*?' with conflicts/i,noRemoteRepositorySpecified:/No remote repository specified\./i,remoteConnectionError:/Could not read from remote repository/i,notAGitCommand:/'.+' is not a git command/i,tipBehind:/tip of your current branch is behind/i};function ts(e,t,i){let r=e.message||e.toString();if(null!=r&&0!==r.length){for(let e of Object.values(tr))if(e.test(r)){let e=void 0!==i?` [${(0,L.C0)(i)}ms]`:"";return eq.YJ.warn(`[${t}] Git ${r.trim().replace(/fatal: /g,"").replace(/\r?\n|\r/g,` ${_.or.Dot} `)}${e}`),""}let e=ti.badRevision.exec(r);if(null!=e){let[,t]=e;if(t?.endsWith("^3"))return""}}throw e}let to=0;let Git=class Git{pendingCommands=new Map;async git(e,...t){let i,r;if(!C.workspace.isTrusted)throw new T._2;let s=(0,$.a)(),{configs:o,correlationKey:n,errors:a,encoding:l,...h}=e,c={...h,encoding:(l??"utf8")==="utf8"?"utf8":"buffer",env:{...D.env,...this._gitEnv,...e.env??e6,GCM_INTERACTIVE:"NEVER",GCM_PRESERVE_CREDS:"TRUE",LC_ALL:"C"}},u=`[${c.cwd}] git ${t.join(" ")}`,d=`${void 0!==n?`${n}:`:""}${e?.stdin!=null?`${to===Number.MAX_SAFE_INTEGER&&(to=0),to++}:`:""}${u}`,p=this.pendingCommands.get(d);void 0===p?(i=!1,t.unshift("-c","core.quotepath=false","-c","color.ui=false",...null!=o?o:e4),"win32"===D.platform&&t.unshift("-c","core.longpaths=true"),p=eX(await this.path(),t,l??"utf8",c),this.pendingCommands.set(d,p)):(i=!0,eq.YJ.debug(`[GIT  ] ${u} ${_.or.Dot} waiting...`));try{return await p}catch(t){switch(r=t,a){case I.Ignore:return r=void 0,"";case I.Throw:throw t;default:return r=void 0,ts(t,e.cwd,s)}}finally{this.pendingCommands.delete(d),this.logGitCommand(u,r,(0,L.C0)(s),i)}}async gitSpawn(e,...t){let i;if(!C.workspace.isTrusted)throw new T._2;let r=(0,$.a)(),{cancellation:s,configs:o,stdin:n,stdinEncoding:a,...l}=e,h={stdio:[n?"pipe":"ignore",null,null],...l,env:{...D.env,...this._gitEnv,...e.env??e6,GCM_INTERACTIVE:"NEVER",GCM_PRESERVE_CREDS:"TRUE",LC_ALL:"C"}},c=`(spawn) [${h.cwd}] git ${t.join(" ")}`;if(t.unshift("-c","core.quotepath=false","-c","color.ui=false",...void 0!==o?o:e4),"win32"===D.platform&&t.unshift("-c","core.longpaths=true"),s){let e=new AbortController;h.signal=e.signal,s.onCancellationRequested(()=>e.abort())}let u=(0,k.spawn)(await this.path(),t,h);return n&&u.stdin?.end(n,a??"utf8"),u.once("error",e=>i=e),u.once("exit",()=>this.logGitCommand(c,i,(0,L.C0)(r),!1)),u}_gitLocation;_gitLocationPromise;async getLocation(){return null==this._gitLocation&&(null==this._gitLocationPromise&&(this._gitLocationPromise=this._gitLocator()),this._gitLocation=await this._gitLocationPromise),this._gitLocation}_gitLocator;setLocator(e){this._gitLocator=e,this._gitLocationPromise=void 0,this._gitLocation=void 0}_gitEnv;setEnv(e){this._gitEnv=e}async path(){return(await this.getLocation()).path}async version(){return(await this.getLocation()).version}async isAtLeastVersion(e){return -1!==(0,eG.Oo)((0,eG.K0)(await this.version()),(0,eG.K0)(e))}maybeIsAtLeastVersion(e){return null!=this._gitLocation?-1!==(0,eG.Oo)((0,eG.K0)(this._gitLocation.version),(0,eG.K0)(e)):void 0}add(e,t){return this.git({cwd:e},"add","-A","--",t)}apply(e,t,i={}){let r=["apply","--whitespace=warn"];return i.allowConflicts&&r.push("-3"),this.git({cwd:e,stdin:t},...r)}async apply2(e,t,...i){return this.git({cwd:e,cancellation:t?.cancellation,configs:t?.configs??e7,env:t?.env,errors:t?.errors,stdin:t?.stdin},"apply",...i,...t?.stdin?["-"]:e4)}ignoreRevsFileMap=new Map;async blame(e,t,i){let r;let[s,o]=(0,q.O)(t,e,!0),n=["blame","--root","--incremental"];if(i?.ignoreWhitespace&&n.push("-w"),i?.startLine!=null&&null!=i.endLine&&n.push(`-L ${i.startLine},${i.endLine}`),i?.args!=null){let e=i.args.findIndex(e=>"--ignore-revs-file"!==e&&e.startsWith("--ignore-revs-file"));if(-1!==e){let t=/^--ignore-revs-file\s*=?\s*(.*)$/.exec(i.args[e]);null!=t&&i.args.splice(e,1,"--ignore-revs-file",t[1])}n.push(...i.args)}let a=this.maybeIsAtLeastVersion("2.23");void 0===a&&(a=await this.isAtLeastVersion("2.23"));let l=n.indexOf("--ignore-revs-file");if(a){let e;-1!==l?(e=n[l+1],(0,q.ic)(e)||(e=(0,q.En)(o,e))):e=(0,q.En)(o,".git-blame-ignore-revs");let t=this.ignoreRevsFileMap.get(e);if(void 0!==t)a=t;else{try{a=await e0(e)}catch{a=!1}this.ignoreRevsFileMap.set(e,a)}}a||-1===l?a&&-1===l&&n.push("--ignore-revs-file",".git-blame-ignore-revs"):n.splice(l,2),i?.contents!=null?(n.push("--contents","-"),r=i.contents):i?.ref&&((0,F.jN)(i.ref)?(n.push("--contents","-"),r=await this.show(e,t,":")):n.push(i.ref));try{return await this.git({cwd:o,stdin:r,correlationKey:i?.correlationKey},...n,"--",s)}catch(t){let e=ti.invalidObjectNameList.exec(t.message);if(null!=e)throw new T.ck(e[1],t);if(null!=(e=ti.invalidObjectName.exec(t.message)))throw new T.AZ(e[1],t);throw t}}branch__set_upstream(e,t,i,r){return this.git({cwd:e},"branch","--set-upstream-to",`${i}/${r}`,t)}branchOrTag__containsOrPointsAt(e,t,i){let r=[i?.type??"branch"];return i?.all?r.push("-a"):i?.remotes&&r.push("-r"),r.push(i?.mode==="pointsAt"?`--points-at=${t}`:`--contains=${t}`,"--format=%(refname:short)"),i?.name!=null&&r.push(i.name),this.git({cwd:e,configs:e3,errors:I.Ignore},...r)}async cat_file__size(e,t){let i=await this.git({cwd:e},"cat-file","-s",t);return i.length?parseInt(i.trim(),10):0}check_ignore(e,...t){return this.git({cwd:e,errors:I.Ignore,stdin:t.join("\0")},"check-ignore","-z","--stdin")}check_mailmap(e,t){return this.git({cwd:e,errors:I.Ignore},"check-mailmap",t)}async check_ref_format(e,t,i={branch:!0}){let r=["check-ref-format"];i.branch?r.push("--branch"):r.push("--normalize");try{return!!(await this.git({cwd:t??"",errors:I.Throw},...r,e)).trim()}catch{return!1}}checkout(e,t,{createBranch:i,path:r}={}){let s=["checkout"];return i?s.push("-b",i,t,"--"):(s.push(t,"--"),r&&([r,e]=(0,q.O)(r,e,!0),s.push(r))),this.git({cwd:e},...s)}async cherrypick(e,t,i={}){let r=["cherry-pick"];i?.noCommit&&r.push("-n"),r.push(t);try{await this.git({cwd:e,errors:i?.errors},...r)}catch(r){let e=r?.toString()??"",i=T.CY.Other;throw ti.changesWouldBeOverwritten.test(e)||ti.changesWouldBeOverwritten.test(r.stderr??"")?i=T.CY.AbortedWouldOverwrite:(ti.conflict.test(e)||ti.conflict.test(r.stdout??""))&&(i=T.CY.Conflicts),new T.Yj(i,r,t)}}async clone(e,t){let i=0,[,,r]=(0,eF.Ud)(e),s=r.split("/").pop();if(!s)return;let o=(0,S.join)(t,s);for(;await e0(o)&&i<20;)i++,o=(0,S.join)(t,`${r}-${i}`);return await this.git({cwd:t},"clone",e,o),o}async config__get(e,t,i){let r=await this.git({cwd:t??"",errors:I.Ignore,local:i?.local},"config","--get",e);return 0===r.length?void 0:r.trim()}async config__get_regex(e,t,i){let r=await this.git({cwd:t??"",errors:I.Ignore,local:i?.local},"config","--get-regex",e);return 0===r.length?void 0:r.trim()}async config__set(e,t,i){let r=["config","--local"];null==t?r.push("--unset",e):r.push(e,t),await this.git({cwd:i??"",local:!0},...r)}async diff(e,t,i,r,s={}){let o=["diff","--no-ext-diff","--minimal"];null!=s.linesOfContext&&o.push(`-U${s.linesOfContext}`),s.renames&&o.push(`-M${null==s.similarityThreshold?"":`${s.similarityThreshold}%`}`),null!=s.filters&&0!==s.filters.length&&o.push(`--diff-filter=${s.filters.join("")}`),i&&(i.endsWith("^3^")&&(i=tt),o.push((0,F.jN)(i)?"--staged":i)),r&&o.push((0,F.jN)(r)?"--staged":r);try{return await this.git({cwd:e,configs:e8,encoding:s.encoding},...o,"--",t)}catch(n){let o=ti.badRevision.exec(n.message);if(null!==o){let[,n]=o;if(n===i&&null!=n&&n.endsWith("^"))return this.diff(e,t,tt,r,s)}throw n}}async diff2(e,t,...i){return this.git({cwd:e,cancellation:t?.cancellation,configs:t?.configs??e7,errors:t?.errors,stdin:t?.stdin},"diff",...t?.stdin?["--stdin"]:e4,...i,...i.includes("--")?e4:["--"])}async diff__contents(e,t,i,r,s={}){let o=["diff",`-M${null==s.similarityThreshold?"":`${s.similarityThreshold}%`}`,"--no-ext-diff","-U0","--minimal"];null!=s.filters&&0!==s.filters.length&&o.push(`--diff-filter=${s.filters.join("")}`),o.push("--no-index");try{return await this.git({cwd:e,configs:e8,encoding:s.encoding,stdin:r},...o,"--",t,"-")}catch(n){if(n instanceof RunError&&n.stdout)return n.stdout;let o=ti.badRevision.exec(n.message);if(null!==o){let[,n]=o;if(n===i&&null!=n&&n.endsWith("^"))return this.diff__contents(e,t,tt,r,s)}throw n}}diff__name_status(e,t,i,r){let s=["diff","--name-status",`-M${r?.similarityThreshold==null?"":`${r?.similarityThreshold}%`}`,"--no-ext-diff","-z"];return r?.filters?.length&&s.push(`--diff-filter=${r.filters.join("")}`),t&&s.push(t),i&&s.push(i),s.push("--"),r?.path&&s.push(r.path),this.git({cwd:e,configs:e8},...s)}async diff__shortstat(e,t){let i=["diff","--shortstat","--no-ext-diff"];t&&i.push(t);try{return await this.git({cwd:e,configs:e8},...i,"--")}catch(t){let e=t?.toString()??"";if(ti.noMergeBase.test(e))return;throw t}}difftool(e,t,i,r={}){let s=["difftool","--no-prompt",`--tool=${i}`];return r.staged&&s.push("--staged"),r.ref1&&s.push(r.ref1),r.ref2&&s.push(r.ref2),this.git({cwd:e},...s,"--",t)}difftool__dir_diff(e,t,i,r){let s=["difftool","--dir-diff",`--tool=${t}`,i];return r&&s.push(r),this.git({cwd:e},...s)}async fetch(e,t={}){let i=["fetch"];t.prune&&i.push("--prune"),t.branch&&t.remote?t.upstream&&t.pull?i.push("-u",t.remote,`${t.upstream}:${t.branch}`):i.push(t.remote,t.upstream||t.branch):t.remote?i.push(t.remote):t.all&&i.push("--all");try{await this.git({cwd:e},...i)}catch(r){let e=r?.toString()??"",i=T.I5.Other;throw ti.noFastForward.test(e)||ti.noFastForward.test(r.stderr??"")?i=T.I5.NoFastForward:ti.noRemoteRepositorySpecified.test(e)||ti.noRemoteRepositorySpecified.test(r.stderr??"")?i=T.I5.NoRemote:(ti.remoteConnection.test(e)||ti.remoteConnection.test(r.stderr??""))&&(i=T.I5.RemoteConnection),new T.Ui(i,r,t?.branch,t?.remote)}}async push(e,t){let i=["push"];null!=t.force&&(t.force.withLease?(i.push("--force-with-lease"),t.force.ifIncludes&&await this.isAtLeastVersion("2.30.0")&&i.push("--force-if-includes")):i.push("--force")),t.branch&&t.remote?t.upstream?i.push("-u",t.remote,`${t.branch}:${t.upstream}`):t.publish?i.push("--set-upstream",t.remote,t.branch):i.push(t.remote,t.branch):t.remote&&i.push(t.remote);try{await this.git({cwd:e},...i)}catch(r){let e=r?.toString()??"",i=T._y.Other;throw ti.remoteAhead.test(e)||ti.remoteAhead.test(r.stderr??"")?i=T._y.RemoteAhead:tr.tipBehind.test(e)||tr.tipBehind.test(r.stderr??"")?i=T._y.TipBehind:ti.pushRejected.test(e)||ti.pushRejected.test(r.stderr??"")?i=t?.force?.withLease?/! \[rejected\].*\(stale info\)/m.test(r.stderr||"")?T._y.PushRejectedWithLease:t.force.ifIncludes&&/! \[rejected\].*\(remote ref updated since checkout\)/m.test(r.stderr||"")?T._y.PushRejectedWithLeaseIfIncludes:T._y.PushRejected:T._y.PushRejected:ti.permissionDenied.test(e)||ti.permissionDenied.test(r.stderr??"")?i=T._y.PermissionDenied:ti.remoteConnection.test(e)||ti.remoteConnection.test(r.stderr??"")?i=T._y.RemoteConnection:(ti.noUpstream.test(e)||ti.noUpstream.test(r.stderr??""))&&(i=T._y.NoUpstream),new T.ag(i,r,t?.branch,t?.remote)}}async pull(e,t){let i=["pull"];t.tags&&i.push("--tags"),t.rebase&&i.push("-r"),t.remote&&t.branch&&(i.push(t.remote),i.push(t.branch));try{await this.git({cwd:e},...i)}catch(r){let e=r?.toString()??"",i=T.Y9.Other;throw ti.conflict.test(e)||ti.conflict.test(r.stdout??"")?i=T.Y9.Conflict:ti.noUserNameConfigured.test(e)||ti.noUserNameConfigured.test(r.stderr??"")?i=T.Y9.GitIdentity:ti.remoteConnection.test(e)||ti.remoteConnection.test(r.stderr??"")?i=T.Y9.RemoteConnection:ti.unstagedChanges.test(e)||ti.unstagedChanges.test(r.stderr??"")?i=T.Y9.UnstagedChanges:ti.unmergedFiles.test(e)||ti.unmergedFiles.test(r.stderr??"")?i=T.Y9.UnmergedFiles:ti.commitChangesFirst.test(e)||ti.commitChangesFirst.test(r.stderr??"")?i=T.Y9.UncommittedChanges:ti.changesWouldBeOverwritten.test(e)||ti.changesWouldBeOverwritten.test(r.stderr??"")?i=T.Y9.OverwrittenChanges:ti.cantLockRef.test(e)||ti.cantLockRef.test(r.stderr??"")?i=T.Y9.RefLocked:ti.rebaseMultipleBranches.test(e)||ti.rebaseMultipleBranches.test(r.stderr??"")?i=T.Y9.RebaseMultipleBranches:(ti.tagConflict.test(e)||ti.tagConflict.test(r.stderr??""))&&(i=T.Y9.TagConflict),new T.GW(i,r,t?.branch,t?.remote)}}for_each_ref__branch(e,t={all:!1}){let i=["for-each-ref","--format=%3ch%3e%(HEAD)%3cn%3e%(refname)%3cu%3e%(upstream:short)%3ct%3e%(upstream:track)%3cr%3e%(objectname)%3cd%3e%(committerdate:iso8601)","refs/heads"];return t.all&&i.push("refs/remotes"),this.git({cwd:e},...i)}log(e,t,...i){return this.git({cwd:e,cancellation:t?.cancellation,configs:t?.configs??e7,errors:t?.errors,stdin:t?.stdin},"log",...t?.stdin?["--stdin"]:e4,...i,...t?.ref&&!(0,F.jN)(t.ref)?[t.ref]:e4,...i.includes("--")?e4:["--"])}async logStreamTo(e,t,i,r,...s){let o=["log",...s];r?.stdin&&o.push("--stdin");let n=await this.gitSpawn({cwd:e,configs:r?.configs??e7,stdin:r?.stdin},...o,"--"),a=tn(t),l=!1,h=0;return new Promise((e,t)=>{let r=[],s=[];function o(e){r.push(e)}function c(e){t(e)}function u(i){0!==i&&t(Error(r.join(""))),e([s,h])}n.on("error",c),n.on("exit",u),n.stdout.setEncoding("utf8"),n.stdout.on("data",function t(r){s.push(r),h+=r.match(/(?:^\x00*|\x00\x00)[0-9a-f]{40}\x00/g)?.length??0,!l&&a.test(r)&&(l=!0,h>i&&(i=h+50)),l&&!(h<=i)&&(n.removeListener("exit",u),n.removeListener("error",c),n.stdout.removeListener("data",t),n.stderr.removeListener("data",o),n.kill(),e([s,h]))}),n.stderr.setEncoding("utf8"),n.stderr.on("data",o)})}log__file(e,t,i,{all:r,argsOrFormat:s,fileMode:o="full",filters:n,limit:a,merges:l=!1,ordering:h,renames:c=!0,reverse:u=!1,since:d,skip:p,startLine:g,endLine:m}={}){let[f,w]=(0,q.O)(t,e,!0);null==s&&(s=[`--format=${r?ep:eg}`]),"string"==typeof s&&(s=[`--format=${s}`]);let v=["log",...s];return h&&v.push(`--${h}-order`),a&&!u&&v.push(`-n${a+1}`),p&&v.push(`--skip=${p}`),d&&v.push(`--since="${d}"`),r&&v.push("--all","--single-worktree"),l&&v.push("--first-parent"),c&&null!=g&&(c=!1),c&&v.push("--follow"),null!=n&&0!==n.length&&v.push(`--diff-filter=${n.join("")}`),"none"!==o&&(null==g?"simple"===o||(0,q.i)(f)?v.push("--name-status"):v.push("--numstat","--summary"):v.push(`-L ${g},${null==m?g:m}:${f}`)),i&&!(0,F.jN)(i)&&(u?v.push("--reverse","--ancestry-path",`${i}..HEAD`):v.push(i)),null==g&&v.push("--",f),this.git({cwd:w,configs:e7},...v)}async log__file_recent(e,t,i){let r=["log",`-M${i?.similarityThreshold==null?"":`${i?.similarityThreshold}%`}`,"-n1","--format=%H"];i?.ordering&&r.push(`--${i?.ordering}-order`),i?.ref&&r.push(i?.ref);let s=await this.git({cancellation:i?.cancellation,cwd:e,configs:e7,errors:I.Ignore},...r,"--",t);return 0===s.length?void 0:s.trim()}async log__find_object(e,t,i,r,s,o){let n=["log","-n1","--no-renames","--format=%H",`--find-object=${t}`,i];r&&n.push(`--${r}-order`),s&&n.push("--",s);let a=await this.git({cancellation:o,cwd:e,configs:e7,errors:I.Ignore},...n);return 0===a.length?void 0:a.trim()}async log__recent(e,t){let i=["log","-n1","--format=%H"];t&&i.push(`--${t}-order`);let r=await this.git({cwd:e,configs:e7,errors:I.Ignore},...i,"--");return 0===r.length?void 0:r.trim()}async log__recent_committerdate(e,t){let i=["log","-n1","--format=%ct"];t&&i.push(`--${t}-order`);let r=await this.git({cwd:e,configs:e7,errors:I.Ignore},...i,"--");return 0===r.length?void 0:r.trim()}log__search(e,t=e4,i){let r;if(i?.shas!=null){let t=(0,eN.kn)(i.shas,"\n");return this.git({cwd:e,stdin:t},"show","--stdin","--name-status",`--format=${eg}`,"--use-mailmap")}return[t,r]=(0,N.oz)(t,t.indexOf("--")),this.git({cwd:e,configs:["-C",e,...e7],stdin:i?.stdin},"log",...i?.stdin?["--stdin"]:e4,"--name-status",`--format=${eg}`,"--use-mailmap",...t,...i?.ordering?[`--${i.ordering}-order`]:e4,...i?.limit?[`-n${i.limit+1}`]:e4,...i?.skip?[`--skip=${i.skip}`]:e4,...r)}async ls_files(e,t,i){let r=["ls-files"];i?.ref&&((0,F.bP)(i.ref)?(0,F.jN)(i.ref)&&r.push("--stage"):r.push(`--with-tree=${i.ref}`)),!i?.ref&&i?.untracked&&r.push("-o");let s=await this.git({cwd:e,errors:I.Ignore},...r,"--",t);return 0===s.length?void 0:s.trim()}ls_remote(e,t,i){return this.git({cwd:e},"ls-remote",t,i)}ls_remote__HEAD(e,t){return this.git({cwd:e},"ls-remote","--symref",t,"HEAD")}async ls_tree(e,t,i){let r=["ls-tree"];i?r.push("-l",t,"--",i):r.push("-lrt",t,"--");let s=await this.git({cwd:e,errors:I.Ignore},...r);return 0===s.length?void 0:s.trim()}merge_base(e,t,i,r){let s=["merge-base"];return r?.forkPoint&&s.push("--fork-point"),this.git({cwd:e},...s,t,i)}async merge_base__is_ancestor(e,t,i){return 0===await this.git({cwd:e,exitCodeOnly:!0},...["merge-base","--is-ancestor"],t,i)}reflog(e,{all:t,branch:i,limit:r,ordering:s,skip:o}={}){let n=["log","--walk-reflogs",`--format=${eT}`,"--date=iso8601"];return s&&n.push(`--${s}-order`),t&&n.push("--all"),r&&n.push(`-n${r}`),o&&n.push(`--skip=${o}`),i&&n.push(i),this.git({cwd:e,configs:e7},...n,"--")}remote(e){return this.git({cwd:e},"remote","-v")}remote__add(e,t,i,r){let s=["remote","add"];return r?.fetch&&s.push("-f"),this.git({cwd:e},...s,t,i)}remote__prune(e,t){return this.git({cwd:e},"remote","prune",t)}remote__remove(e,t){return this.git({cwd:e},"remote","remove",t)}remote__get_url(e,t){return this.git({cwd:e},"remote","get-url",t)}reset(e,t){return this.git({cwd:e},"reset","-q","--",t)}async rev_list(e,t,i){let r=["rev-list"];i?.all&&r.push("--all"),i?.maxParents!=null&&r.push(`--max-parents=${i.maxParents}`);let s=(await this.git({cwd:e,errors:I.Ignore},...r,t,"--")).trim().split("\n");if(0!==s.length)return s}async rev_list__count(e,t,i){let r=["rev-list","--count"];i&&r.push("--all");let s=await this.git({cwd:e,errors:I.Ignore},...r,t,"--");if(0===(s=s.trim()).length)return;let o=parseInt(s,10);return isNaN(o)?void 0:o}async rev_list__left_right(e,t,i){let r=["rev-list","--left-right","--count"];i?.length&&r.push(...i.map(e=>`--author=^${e.name} <${e.email}>$`));let s=await this.git({cwd:e,errors:I.Ignore},...r,...t,"--");if(0===s.length)return;let o=s.split("	");if(2!==o.length)return;let[n,a]=o,l={ahead:parseInt(n,10),behind:parseInt(a,10)};if(!(isNaN(l.ahead)||isNaN(l.behind)))return l}async rev_parse(e,t){let i=await this.git({cwd:e,errors:I.Ignore},"rev-parse",t);return 0===i.length?void 0:i.trim()}async rev_parse__currentBranch(e,t){try{return[await this.git({cwd:e,errors:I.Throw},"rev-parse","--abbrev-ref","--symbolic-full-name","@","@{u}","--"),void 0]}catch(r){let i=r?.toString()??"";if(ti.badRevision.test(i)||tr.noUpstream.test(i)){let t,i;if(null!=r.stdout&&0!==r.stdout.length)return[r.stdout,void 0];try{let t=await this.symbolic_ref(e,"HEAD");if(null!=t)return[t.trim(),void 0]}catch{}try{let t=await this.symbolic_ref(e,"refs/remotes/origin/HEAD");if(null!=t)return[t.trim().substr(7),void 0]}catch(t){if(/is not a symbolic ref/.test(t.stderr))try{let t=await this.ls_remote__HEAD(e,"origin");if(null!=t){let e=/ref:\s(\S+)\s+HEAD/m.exec(t);if(null!=e){let[,t]=e;return[t.substr(11),void 0]}}}catch{}}let s=await this.config__get("init.defaultBranch",e)??"main",o=await this.config__get_regex(`branch\\.${s}\\.+`,e,{local:!0});if(o){let e=/^branch\..+\.remote\s(.+)$/m.exec(o);null!=e&&(t=e[1]),null!=(e=/^branch\..+\.merge\srefs\/heads\/(.+)$/m.exec(o))&&(i=e[1])}return[`${s}${t&&i?`
${t}/${i}`:""}`,void 0]}if(tr.headNotABranch.test(i)){let i=await this.log__recent(e,t);if(void 0===i)return;return[`(HEAD detached at ${(0,F.c5)(i)})`,i]}ts(r,e);return}}async rev_parse__git_dir(e){let t=await this.git({cwd:e,errors:I.Ignore},"rev-parse","--git-dir","--git-common-dir");if(0===t.length)return;let[i,r]=t.split("\n").map(e=>e.trimStart());return((0,q.ic)(i)||(i=(0,q.En)(e,i)),i=(0,q.ay)(i),r)?((0,q.ic)(r)||(r=(0,q.En)(e,r)),{path:i,commonPath:(r=(0,q.ay)(r))!==i?r:void 0}):{path:i}}async rev_parse__show_toplevel(e){let t;if(!C.workspace.isTrusted)try{if((0,P.accessSync)((0,q.En)(e,"HEAD")),t=await this.git({cwd:e,errors:I.Throw,configs:["-C",e]},"rev-parse","--show-cdup"),""===t.trim())return eq.YJ.log(`Skipping (untrusted workspace); bare clone repository detected in '${e}'`),e4}catch{}try{return t=await this.git({cwd:e,errors:I.Throw},"rev-parse","--show-toplevel"),0===t.length?e4:[!0,(0,q.ay)(t.trimStart().replace(/[\r|\n]+$/,""))]}catch(s){if(s instanceof T._2)return e4;let i=/^fatal: detected dubious ownership in repository at '([^']+)'[\s\S]*git config --global --add safe\.directory '?([^'\n]+)'?$/m.exec(s.stderr);if(i?.length===3)return eq.YJ.log(`Skipping; unsafe repository detected in '${i[1]}'; run 'git config --global --add safe.directory ${i[2]}' to allow it`),[!1];let r=/this operation must be run in a work tree/.test(s.stderr);if(r&&C.workspace.isTrusted&&"true"===(t=await this.git({cwd:e,errors:I.Ignore},"rev-parse","--is-bare-repository")).trim()&&(t=(t=await this.git({cwd:e,errors:I.Ignore},"rev-parse","--git-common-dir")).trim()).length)return[!0,(0,q.ay)(("."===t?e:t).trimStart().replace(/[\r|\n]+$/,""))];if(r||"ENOENT"===s.code){let t=!r&&await e0(e);if(!t){do{let i=(0,q.Jl)(e);if(i===e||0===i.length)return e4;e=i,t=await e0(e)}while(!t)return this.rev_parse__show_toplevel(e)}}return e4}}async rev_parse__verify(e,t,i){let r=["rev-parse","--verify"];await this.isAtLeastVersion("2.30")&&r.push("--end-of-options");let s=await this.git({cwd:e,errors:I.Ignore},...r,i?`${t}:./${i}`:`${t}^{commit}`);return 0===s.length?void 0:s.trim()}async show(e,t,i,r={}){let[s,o]=(0,q.O)(t,e,!0);if((0,F.jN)(i)&&(i=":"),(0,F.bP)(i))throw Error(`ref=${i} is uncommitted`);let n={configs:e7,cwd:o,encoding:r.encoding??"utf8",errors:I.Throw},a=i.endsWith(":")?`${i}./${s}`:`${i}:./${s}`;try{return await this.git(n,"show","--textconv",a,"--")}catch(o){let s=o?.toString()??"";if(":"===i&&ti.badRevision.test(s))return this.show(e,t,"HEAD:",r);if(ti.badRevision.test(s)||tr.notFound.test(s)||tr.foundButNotInRevision.test(s))return;return ts(o,n.cwd)}}show2(e,t,...i){return this.git({cwd:e,cancellation:t?.cancellation,configs:t?.configs??e7},"show",...i,...i.includes("--")?e4:["--"])}show__diff(e,t,i,r,{similarityThreshold:s}={}){let o=["show",`-M${null==s?"":`${s}%`}`,"--format=","--minimal","-U0",i,"--",t];return null!=r&&0!==r.length&&o.push(r),this.git({cwd:e},...o)}show__name_status(e,t,i){return this.git({cwd:e},"show","--name-status","--format=","-z",i,"--",t)}show_ref__tags(e){return this.git({cwd:e,errors:I.Ignore},"show-ref","--tags")}stash__apply(e,t,i){return t?this.git({cwd:e},"stash",i?"pop":"apply",t):Promise.resolve(void 0)}async stash__rename(e,t,i,r,s){return await this.stash__delete(e,t,i),this.git({cwd:e},"stash","store","-m",s?`On ${s}: ${r}`:r,i)}async stash__delete(e,t,i){if(t){if(i){let r=await this.git({cwd:e,errors:I.Ignore},"show","--format=%H","--no-patch",t);if(r?.trim()!==i)throw Error("Unable to delete stash; mismatch with stash number")}return this.git({cwd:e},"stash","drop",t)}}stash__list(e,{args:t,similarityThreshold:i}){return null==t&&(t=["--name-status"]),this.git({cwd:e},"stash","list",...t,`-M${null==i?"":`${i}%`}`)}async stash__create(e){let t=await this.git({cwd:e},...["stash","create"]);return t?.trim()||void 0}async stash__store(e,t,i){let r=["stash","store"];i&&r.push("-m",i),r.push(t),await this.git({cwd:e},...r)}async stash__push(e,t,i){let r;let s=["stash","push"];if((i?.includeUntracked||i?.pathspecs?.length)&&!i?.onlyStaged&&s.push("--include-untracked"),i?.keepIndex&&!i?.includeUntracked&&s.push("--keep-index"),i?.onlyStaged){if(await this.isAtLeastVersion("2.35"))s.push("--staged");else throw Error("Git version 2.35 or higher is required for --staged")}t&&s.push("-m",t),i?.pathspecs?.length?i.stdin?(r=i.pathspecs.join("\0"),s.push("--pathspec-from-file=-","--pathspec-file-nul","--")):s.push("--",...i.pathspecs):s.push("--");try{await this.git({cwd:e,stdin:r},...s)}catch(e){if(e instanceof RunError&&e.stdout.includes("Saved working directory and index state")&&e.stderr.includes("Cannot remove worktree changes"))throw new T.iP(T.gd.ConflictingStagedAndUnstagedLines);throw e}}async status(e,t=1,i){let r=["status",t>=2?`--porcelain=v${t}`:"--porcelain","--branch","-u"];return await this.isAtLeastVersion("2.18")&&r.push(`--find-renames${i?.similarityThreshold==null?"":`=${i.similarityThreshold}%`}`),this.git({cwd:e,configs:e9,env:{GIT_OPTIONAL_LOCKS:"0"}},...r,"--")}symbolic_ref(e,t){return this.git({cwd:e},"symbolic-ref","--short",t)}tag(e){return this.git({cwd:e},"tag","-l","--format=%3cn%3e%(refname)%3c*r%3e%(*objectname)%3cr%3e%(objectname)%3cd%3e%(creatordate:iso8601)%3cad%3e%(authordate:iso8601)%3cs%3e%(subject)")}worktree__add(e,t,{commitish:i,createBranch:r,detach:s,force:o}={}){let n=["worktree","add"];return o&&n.push("--force"),r&&n.push("-b",r),s&&n.push("--detach"),n.push(t),i&&n.push(i),this.git({cwd:e},...n)}worktree__list(e){return this.git({cwd:e},"worktree","list","--porcelain")}worktree__remove(e,t,{force:i}={}){let r=["worktree","remove"];return i&&r.push("--force"),r.push(t),this.git({cwd:e,errors:I.Throw},...r)}async readDotGitFile(e,t,i){try{let r=await C.workspace.fs.readFile(C.Uri.joinPath(e.uri,...t)),s=te.decode(r);if(s=i?.trim??!0?s.trim():s,i?.numeric){let e=Number.parseInt(s,10);return isNaN(e)?void 0:e}return s}catch(e){if(i?.throw)throw e;return}}async runGitCommandViaTerminal(e,t,i,r){let s;let o=(0,eM.b1)(),n=await this.getLocation(),a=(0,q.ay)(n.path??"git"),l=A.i.get("terminal.overrideGitEditor")?`-c "core.editor=${(0,eQ.wj)()}" `:"",h=i.map(e=>e.startsWith("#")||/['();$|>&<]/.test(e)?`"${e}"`:e);if(a.includes(" ")){let i=C.env.shell;eq.YJ.debug(o,`\u2022 git path '${a}' contains spaces, detected shell: '${i}'`),s=`${(eY?/(pwsh|powershell)\.exe/i:/pwsh/i).test(i)?"&":""} "${a}" -C "${e}" ${l}${t} ${h.join(" ")}`}else s=`${a} -C "${e}" ${l}${t} ${h.join(" ")}`;eq.YJ.log(o,`\u2022 '${s}'`),this.logCore(`[TERM] ${s}`);let d=(null==c&&(c=C.window.createTerminal("GitLens"),u=C.window.onDidCloseTerminal(e=>{e===c&&(c=void 0,u?.dispose(),u=void 0)}),a$.instance.context.subscriptions.push(u)),c);d.show(!1),d.sendText(s,r?.execute??!1)}logGitCommand(e,t,i,r){let s=i>eL.a,o=s&&r?" (slow, waiting)":r?" (waiting)":s?" (slow)":"";null!=t?eq.YJ.error("",`[GIT  ] ${e} ${_.or.Dot} ${(t.message||String(t)||"").trim().replace(/fatal: /g,"").replace(/\r?\n|\r/g,` ${_.or.Dot} `)} [${i}ms]${o}`):s?eq.YJ.warn(`[GIT  ] ${e} [*${i}ms]${o}`):eq.YJ.log(`[GIT  ] ${e} [${i}ms]${o}`),this.logCore(`[${s?"*":" "}${i.toString().padStart(6)}ms] ${e}${o}`,t)}_gitOutput;logCore(e,t){eq.YJ.enabled(null!=t?"error":"debug")&&(this._gitOutput??=C.window.createOutputChannel("GitLens (Git)"),this._gitOutput.appendLine(`${eq.YJ.timestamp} ${e}${null!=t?` ${_.or.Dot} FAILED`:""}`),null!=t&&this._gitOutput.appendLine(`
${String(t)}
`))}};function tn(e){return RegExp(`(?:^\0*|\0\0)${e}\0`)}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?e2(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&e1(t,i,o)})([(0,eW.Yz)()],Git.prototype,"runGitCommandViaTerminal",1);var ta=i(8558),tl=i.n(ta),th=i(7312),tc=i(2488),tu=i(2164),td=i(5576),tp=i(7680),tg=i(7892),tm=i(2812),tf=i(7260),tw=i(2152),tv=i(2036),ty=i(4408),tb=i(3216),tC=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),tA=(e,t,i)=>{if(null!=t){var r;if("object"!=typeof t&&"function"!=typeof t)throw TypeError("Object expected");if(i&&(r=t[tC("asyncDispose")]),void 0===r&&(r=t[tC("dispose")]),"function"!=typeof r)throw TypeError("Object not disposable");e.push([i,r,t])}else i&&e.push([i]);return t},tk=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};function tP(e,t,i,r,s){var o=[];try{let n,a,l,h;let c=tA(o,(0,O.i)(`Git.parseBlame(${t})`,{log:!1,logLevel:"debug"}));if(!i)return;let u=new Map,d=new Map,p=[];for(a of(0,L.Nk)(i))if(!((l=a.split(" ")).length<2)){if([n]=l,null==h){h={sha:n,originalLine:parseInt(l[1],10),line:parseInt(l[2],10),lineCount:parseInt(l[3],10)};continue}switch(n){case"author":h.sha===Q.Oy?h.author="You":h.author=a.slice(n.length+1).trim();break;case"author-mail":{if(h.sha===Q.Oy){h.authorEmail=r?.email;continue}h.authorEmail=a.slice(n.length+1).trim();let e=h.authorEmail.indexOf("<");if(e>=0){let t=h.authorEmail.indexOf(">",e);t>e?h.authorEmail=h.authorEmail.substring(e+1,t):h.authorEmail=h.authorEmail.substring(e+1)}break}case"author-time":h.sha===Q.Oy&&null!=s?h.authorTime=s:h.authorTime=1e3*parseInt(l[1],10);break;case"author-tz":h.authorTimeZone=l[1];break;case"committer":(0,F.bP)(h.sha)?h.committer="You":h.committer=a.slice(n.length+1).trim();break;case"committer-mail":{if((0,F.bP)(h.sha)){h.committerEmail=r?.email;continue}h.committerEmail=a.slice(n.length+1).trim();let e=h.committerEmail.indexOf("<");if(e>=0){let t=h.committerEmail.indexOf(">",e);t>e?h.committerEmail=h.committerEmail.substring(e+1,t):h.committerEmail=h.committerEmail.substring(e+1)}break}case"committer-time":h.sha===Q.Oy&&null!=s?h.committerTime=s:h.committerTime=1e3*parseInt(l[1],10);break;case"committer-tz":h.committerTimeZone=l[1];break;case"summary":h.summary=a.slice(n.length+1).trim();break;case"previous":h.previousSha=l[1],h.previousPath=l.slice(2).join(" ");break;case"filename":h.path=a.slice(n.length+1),function(e,t,i,r,s,o,n){let a=r.get(t.sha);if(null==a){if(null!=t.author){null!=n&&(null!=n.name||null!=n.email)&&(null==n.name||n.name===t.author)&&(null==n.email||n.email===t.authorEmail)&&(t.author="You");let e=s.get(t.author);null==e&&(e={name:t.author,lineCount:0},s.set(t.author,e))}a=new M.Ck(e,i,t.sha,new M.Sg(t.author,t.authorEmail,new Date(t.authorTime)),new M.Sg(t.committer,t.committerEmail,new Date(t.committerTime)),t.summary,[],void 0,new G.Gm(i,t.path,G.fX.Modified,t.previousPath&&t.previousPath!==t.path?t.previousPath:void 0,t.previousSha),void 0,[]),r.set(t.sha,a)}for(let e=0,i=t.lineCount;e<i;e++){let i={sha:t.sha,previousSha:a.file.previousSha,originalLine:t.originalLine+e,line:t.line+e};a.lines.push(i),o[i.line-1]=i}}(e,h,t,d,u,p,r),h=void 0}}for(let[,e]of d){if(!e.author.name)continue;let t=u.get(e.author.name);if(void 0==t)return;t.lineCount+=e.lines.length}let g=new Map([...u.entries()].sort((e,t)=>t[1].lineCount-e[1].lineCount));return c?.stop({suffix:` parsed ${p.length} lines, ${d.size} commits`}),{repoPath:t,authors:g,commits:d,lines:p}}catch(e){var n=e,a=!0}finally{tk(o,n,a)}}var tS=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),tR=(e,t,i)=>{if(null!=t){var r;if("object"!=typeof t&&"function"!=typeof t)throw TypeError("Object expected");if(i&&(r=t[tS("asyncDispose")]),void 0===r&&(r=t[tS("dispose")]),"function"!=typeof r)throw TypeError("Object not disposable");e.push([i,r,t])}else i&&e.push([i]);return t},tD=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let t$=/(\d+)\s+files? changed(?:,\s+(\d+)\s+insertions?\(\+\))?(?:,\s+(\d+)\s+deletions?\(-\))?/;function t_(e){let[t,i]=e.split(","),r=Number(t),s=Number(i)||1;return{count:s,position:{start:r,end:r+s-1}}}function tI(e,t=!1){var i=[];try{let r;let s=tR(i,(0,O.i)("Git.parseFileDiff",{log:!1,logLevel:"debug"}));if(!e)return;let o=[],n=e.split("\n"),a=-1;for(;++a<n.length&&!n[a].startsWith("@@"););for(;a<n.length;){if(!(r=n[a]).startsWith("@@")){a++;continue}let[e,t]=r.split("@@")[1].trim().split(" "),i=t_(t.slice(1)),s=t_(e.slice(1)),l=new Map,h=i.position.start;r=n[++a];let c=a;for(;a<n.length&&!r.startsWith("@@");)switch(r[0]){case"-":{let e=h;for(;r?.startsWith("-");)l.set(e++,{current:void 0,previous:r.slice(1),state:"removed"}),r=n[++a];if(r?.startsWith("+")){let e=h;for(;r?.startsWith("+");){let t=l.get(e);null!=t?(t.current=r.slice(1),t.state="changed"):l.set(e,{current:r.slice(1),previous:void 0,state:"added"}),e++,r=n[++a]}h=e}else h=e;break}case"+":l.set(h++,{current:r.slice(1),previous:void 0,state:"added"}),r=n[++a];break;case" ":l.set(h++,{current:r.slice(1),previous:r.slice(1),state:"unchanged"}),r=n[++a];break;default:r=n[++a]}let u={contents:`${n.slice(c,a).join("\n")}
`,current:i,previous:s,lines:l};o.push(u)}return s?.stop({suffix:` parsed ${o.length} hunks`}),{contents:t?e:void 0,hunks:o}}catch(e){var r=e,s=!0}finally{tD(i,r,s)}}function tT(e,t){var i=[];try{let r;let s=tR(i,(0,O.i)("Git.parseDiffNameStatusFiles",{log:!1,logLevel:"debug"}));if(!e)return;let o=[],n=e.split("\0");for(let e=0;e<n.length-1;e++)r=n[e][0],"."===r&&(r="?"),o.push({status:r,path:n[++e],originalPath:r.startsWith("R")||r.startsWith("C")?n[++e]:void 0,repoPath:t});return s?.stop({suffix:` parsed ${o.length} files`}),o}catch(e){var r=e,s=!0}finally{tD(i,r,s)}}var tF=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),tO=(e,t,i)=>{if(null!=t){var r;if("object"!=typeof t&&"function"!=typeof t)throw TypeError("Object expected");if(i&&(r=t[tF("asyncDispose")]),void 0===r&&(r=t[tF("dispose")]),"function"!=typeof r)throw TypeError("Object not disposable");e.push([i,r,t])}else i&&e.push([i]);return t},tx=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let tE=/(?:ahead ([0-9]+))/,tB=/(?:behind ([0-9]+))/;function tU(e,t,i,r){let s,o=t.startsWith(".")?void 0:t[0].trim();return(null==o||0===o.length)&&(o=void 0),t.length>1&&(null==(s="."!==t[1]?t[1].trim():void 0)||0===s.length)&&(s=void 0),new tb.Go(e,o,s,i,r)}var tW=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),tN=(e,t,i)=>{if(null!=t){var r;if("object"!=typeof t&&"function"!=typeof t)throw TypeError("Object expected");if(i&&(r=t[tW("asyncDispose")]),void 0===r&&(r=t[tW("dispose")]),"function"!=typeof r)throw TypeError("Object not disposable");e.push([i,r,t])}else i&&e.push([i]);return t},tq=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let tL=/(?:.+?)\s+(.+?)\s+(.+?)\s+(.+?)\s+(.+)/gm,tM=/^(\S+)\s+(\S+)\s+(\S+)\s+(.*)$/gm;function tQ(e,t){var i=[];try{let r,s,o,n,a;let l=tN(i,(0,O.i)("Git.parseTree",{log:!1,logLevel:"debug"})),h=[];if(!e)return h;for(;a=tL.exec(e),null!=a;)[,r,s,o,n]=a,h.push({ref:t,oid:null==s||0===s.length?"":` ${s}`.substr(1),path:null==n||0===n.length?"":` ${n}`.substr(1),size:Number(o)||0,type:null==r||0===r.length?"":` ${r}`.substr(1)});return l?.stop({suffix:` parsed ${h.length} trees`}),h}catch(e){var r=e,s=!0}finally{tq(i,r,s)}}var tG=i(7840),tY=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),tV=(e,t,i)=>{if(null!=t){var r;if("object"!=typeof t&&"function"!=typeof t)throw TypeError("Object expected");if(i&&(r=t[tY("asyncDispose")]),void 0===r&&(r=t[tY("dispose")]),"function"!=typeof r)throw TypeError("Object not disposable");e.push([i,r,t])}else i&&e.push([i]);return t},tz=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()},tH=i(6116),tj=i(4516),tJ=i(3828),tK=i(9444),tZ=i(6e3),tX=i(8196),t0=i(2356),t1=i(3728),t2=i(6240),t4=i(2404),t6=Object.defineProperty,t3=Object.getOwnPropertyDescriptor;let AICommitMessageProvider=class AICommitMessageProvider{constructor(e,t){this.container=e,this.scmGit=t,this._disposable=A.i.onDidChange(this.onConfigurationChanged,this),this.onConfigurationChanged()}icon=new C.ThemeIcon("sparkle");title="Generate Commit Message (Experimental)";_disposable;_subscription;onConfigurationChanged(e){(null==e||A.i.changed(e,"ai.experimental.generateCommitMessage.enabled"))&&(A.i.get("ai.experimental.generateCommitMessage.enabled")?this._subscription=this.scmGit.registerCommitMessageProvider(this):(this._subscription?.dispose(),this._subscription=void 0))}dispose(){this._subscription?.dispose(),this._disposable.dispose()}async provideCommitMessage(e,t,i){let r=(0,eM.b1)(),s=e.inputBox.value;try{let e=await this.container.ai.generateCommitMessage(t,{cancellation:i,context:s,progress:{location:C.ProgressLocation.Notification,title:"Generating commit message..."}});return s?`${s}

${e}`:e}catch(e){eq.YJ.error(r,e),e instanceof Error&&e.message.startsWith("No changes")&&C.window.showInformationMessage("No changes to generate a commit message from.");return}}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?t3(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&t6(t,i,o)})([(0,eW.Yz)({args:!1})],AICommitMessageProvider.prototype,"provideCommitMessage",1);let UnableToFindGitError=class UnableToFindGitError extends Error{constructor(e){super("Unable to find git"),this.original=e,Error.captureStackTrace?.(this,UnableToFindGitError)}};let InvalidGitConfigError=class InvalidGitConfigError extends Error{constructor(e){super("Invalid Git configuration"),this.original=e,Error.captureStackTrace?.(this,InvalidGitConfigError)}};async function t8(e){let t;let i=(0,O.i)(`findSpecificGit(${e})`,{logLevel:"debug"});try{t=await eX(e,["--version"],"utf8")}catch(e){if(i?.stop({message:` ${_.or.Dot} Unable to find git: ${e}`}),/bad config/i.test(e.message))throw new InvalidGitConfigError(e);throw e}if(!e||"git"===e){let r=function e(t,i){if(!eY)return{cmd:eJ(t),args:i};if(!(0,P.existsSync)(t))for(let r of[".exe",".bat",".cmd",".ps1"]){let s=eJ(`${t}${r}`);if((0,P.existsSync)(s))return e(s,i)}return ez.test(t)?{cmd:(0,S.join)(D.env.SYSTEMROOT??"C:\\WINDOWS","System32","WindowsPowerShell","v1.0","PowerShell.exe"),args:["-ExecutionPolicy","Unrestricted","-NoLogo","-NonInteractive","-File",t].concat(i)}:eH.test(t)?{cmd:(0,S.join)(D.env.SYSTEMROOT??"C:\\WINDOWS","System32","cmd.exe"),args:["/C",t,...i]}:ej.test(t)?{cmd:D.execPath,args:[t].concat(i)}:{cmd:t,args:i}}(e,["--version"]).cmd;try{t=await eX(r,["--version"],"utf8")}catch(e){if(i?.stop({message:` ${_.or.Dot} Unable to find git: ${e}`}),/bad config/i.test(e.message))throw new InvalidGitConfigError(e);throw e}e=r}let r=t.trim().replace(/^git version /,"").trim();return i?.stop({message:` ${_.or.Dot} Found ${r} in ${e}; ${t}`}),{path:e,version:r}}async function t7(){try{let e=(await eX("which",["git"],"utf8")).trim();if("/usr/bin/git"!==e)return t8(e);try{return await eX("xcode-select",["-p"],"utf8"),t8(e)}catch(t){if(2===t.code)return Promise.reject(new UnableToFindGitError(t));return t8(e)}}catch(e){return Promise.reject(e instanceof InvalidGitConfigError||e instanceof UnableToFindGitError?e:new UnableToFindGitError(e))}}function t5(e){return null==e||0===e.length?Promise.reject(new UnableToFindGitError):t8((0,S.join)(e,"Git","cmd","git.exe"))}async function t9(e,t=!0){try{if(null==e||"string"==typeof e)return await t8(e??"git");try{return(0,t0.uW)(...e.map(e=>t8(e)))}catch(e){throw new UnableToFindGitError(e)}}catch(e){if(!t)return Promise.reject(e instanceof InvalidGitConfigError||e instanceof UnableToFindGitError?e:new UnableToFindGitError(e));try{switch(D.platform){case"darwin":return await t7();case"win32":return await t5(D.env.ProgramW6432).then(null,()=>t5(D.env["ProgramFiles(x86)"])).then(null,()=>t5(D.env.ProgramFiles)).then(null,()=>t8("git"));default:return Promise.reject(new UnableToFindGitError)}}catch(e){return Promise.reject(e instanceof InvalidGitConfigError||e instanceof UnableToFindGitError?e:new UnableToFindGitError(e))}}}var ie=Object.defineProperty,it=Object.getOwnPropertyDescriptor,ii=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?it(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ie(t,i,o),o};let ir=Object.freeze([]),is=Promise.resolve(void 0),io=Object.freeze({values:[]}),ia={doesNotExist:/no such file or directory/i},il=/(?<=^\/?)([a-zA-Z])(?=:\/)/,ih=/^user\.(name|email) (.*)$/gm,ic=/(.+)\s<(.+)>/,iu=/(?:(?:(?<wip>WIP) on|On) (?<onref>[^/](?!.*\/\.)(?!.*\.\.)(?!.*\/\/)(?!.*@\{)[^\000-\037\177 ~^:?*[\\]+[^./]):\s*)?(?<summary>.*)$/s,id=["merge","pull"];let LocalGitProvider=class LocalGitProvider{constructor(e,t){this.container=e,this.git=t,this.git.setLocator(this.ensureGit.bind(this)),this._disposables.push(A.i.onDidChange(e=>{A.i.changed(e,"remotes")&&this.resetCaches("remotes")},this),this.container.events.on("git:cache:reset",e=>e.data.repoPath?this.resetCache(e.data.repoPath,...e.data.caches??ir):this.resetCaches(...e.data.caches??ir)))}descriptor={id:"git",name:"Git",virtual:!1};supportedSchemes=new Set([_.cl.File,_.cl.Git,_.cl.GitLens,_.cl.PRs]);_onDidChange=new C.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeRepository=new C.EventEmitter;get onDidChangeRepository(){return this._onDidChangeRepository.event}_onDidCloseRepository=new C.EventEmitter;get onDidCloseRepository(){return this._onDidCloseRepository.event}_onDidOpenRepository=new C.EventEmitter;get onDidOpenRepository(){return this._onDidOpenRepository.event}_branchesCache=new Map;_contributorsCache=new Map;_mergeStatusCache=new Map;_rebaseStatusCache=new Map;_remotesCache=new Map;_repoInfoCache=new Map;_stashesCache=new Map;_tagsCache=new Map;_trackedPaths=new t1.SK;_disposables=[];dispose(){C.Disposable.from(...this._disposables).dispose()}get useCaching(){return A.i.get("advanced.caching.enabled")}onRepositoryChanged(e,t){t.changed(ty.c7.Config,ty.MR.Any)&&this._repoInfoCache.delete(e.path),t.changed(ty.c7.Heads,ty.c7.Remotes,ty.MR.Any)&&(this._branchesCache.delete(e.path),this._contributorsCache.delete(e.path),this._contributorsCache.delete(`stats|${e.path}`)),t.changed(ty.c7.Remotes,ty.c7.RemoteProviders,ty.MR.Any)&&this._remotesCache.delete(e.path),t.changed(ty.c7.Index,ty.c7.Unknown,ty.MR.Any)&&this._trackedPaths.clear(),t.changed(ty.c7.Merge,ty.MR.Any)&&this._mergeStatusCache.delete(e.path),t.changed(ty.c7.Rebase,ty.MR.Any)&&this._rebaseStatusCache.delete(e.path),t.changed(ty.c7.Stash,ty.MR.Any)&&this._stashesCache.delete(e.path),t.changed(ty.c7.Tags,ty.MR.Any)&&this._tagsCache.delete(e.path),this._onDidChangeRepository.fire(t)}_gitLocator;async ensureGit(){return null==this._gitLocator&&(this._gitLocator=this.findGit()),this._gitLocator}async findGit(){let e=(0,eM.b1)();if(!A.i.getCore("git.enabled",null,!0))throw eq.YJ.log(e,'Built-in Git is disabled ("git.enabled": false)'),(0,tJ.IB)(),new UnableToFindGitError;let t=this.getScmGitApi();(async function(){var i;let r=await t;if(null==r)return;for(let t of(i=this.container,"function"==typeof r.registerCommitMessageProvider&&new AICommitMessageProvider(i,r),Object.values(r.git)))if(null!=t&&"object"==typeof t&&"git"in t){for(let i of Object.values(t.git))if(null!=i&&"object"==typeof i&&"GIT_ASKPASS"in i){eq.YJ.debug(e,"Found built-in Git env"),this.git.setEnv(i);break}}let s=new Set,o=(0,tX.Cu)(()=>{if(!this.container.deactivating){for(let e of s)this._onDidCloseRepository.fire({uri:e});s.clear()}},1e3);for(let e of(this._disposables.push(r.onDidCloseRepository(e=>{this.container.deactivating||(s.add(e.rootUri),o())}),r.onDidOpenRepository(e=>this._onDidOpenRepository.fire({uri:e.rootUri}))),r.repositories))this._onDidOpenRepository.fire({uri:e.rootUri})}).call(this);let i=A.i.getCore("git.path")??this.container.storage.getWorkspace("gitPath"),r=(0,$.a)(),s=t9(i),o=t.then(e=>{let t=e?.git.path;if(!t)return s;if(null!=i){if("string"==typeof i){if(t===i)return s}else if(i.includes(t))return s}return t9(t,!1)}),n=await (0,t0.uW)(s,o);return setTimeout(()=>void this.container.storage.storeWorkspace("gitPath",n.path),1e3),null!=e?e.exitDetails=` ${_.or.Dot} Git (${n.version}) found in ${"git"===n.path?"PATH":n.path}`:eq.YJ.log(e,`Git (${n.version}) found in ${"git"===n.path?"PATH":n.path} [${(0,L.C0)(r)}ms]`),-1===(0,eG.Oo)((0,eG.K0)(n.version),(0,eG.K0)("2.7.2"))&&(eq.YJ.log(e,`Git version (${n.version}) is outdated`),(0,tJ.yM)(n.version,"2.7.2")),n}async discoverRepositories(e,t){if(e.scheme!==_.cl.File)return[];try{let i=A.i.getCore("git.autoRepositoryDetection")??!0,r=C.workspace.getWorkspaceFolder(e);if(null==r&&!t?.silent||(await this.ensureGit(),t?.cancellation?.isCancellationRequested))return[];let s=await this.repositorySearch(r??e,t?.depth??(!1===i||"openEditors"===i?0:void 0),t?.cancellation,t?.silent);if(!t?.silent&&(!0===i||"subFolders"===i))for(let e of s)this.getOrOpenScmRepository(e.uri);return!t?.silent&&s.length>0&&this._trackedPaths.clear(),s}catch(e){if(e instanceof InvalidGitConfigError)(0,tJ.G)();else if(e instanceof UnableToFindGitError)(0,tJ.S2)();else{let i=e?.message??"";i&&!t?.silent&&C.window.showErrorMessage(`Unable to initialize Git; ${i}`)}throw e}}openRepository(e,t,i,r,s){s||this.getOrOpenScmRepository(t);let o=[new ty.Oq(this.container,this.onRepositoryChanged.bind(this),this.descriptor,e??C.workspace.getWorkspaceFolder(t),t,i,r??!C.window.state.focused,s)],n=this.toCanonicalMap.get((0,q.oT)(t));return null!=n&&null==this.container.git.getRepository(n)&&o.push(new ty.Oq(this.container,this.onRepositoryChanged.bind(this),this.descriptor,e??C.workspace.getWorkspaceFolder(n),n,i,r??!C.window.state.focused,!0)),o}openRepositoryInitWatcher(){let e=C.workspace.createFileSystemWatcher("**/.git",!1,!0,!0);return{onDidCreate:e.onDidCreate,dispose:()=>void e.dispose()}}_supportedFeatures=new Map;async supports(e){let t=this._supportedFeatures.get(e);if(null!=t)return t;switch(e){case tg.B.Worktrees:return t=await this.git.isAtLeastVersion("2.17.0"),this._supportedFeatures.set(e,t),t;case tg.B.StashOnlyStaged:return t=await this.git.isAtLeastVersion("2.35.0"),this._supportedFeatures.set(e,t),t;case tg.B.ForceIfIncludes:return t=await this.git.isAtLeastVersion("2.30.0"),this._supportedFeatures.set(e,t),t;default:return!0}}async visibility(e){let t=await this.getRemotes(e,{sort:!0});if(0===t.length)return["local",void 0];let i=!0;for await(let e of(0,t0.wX)(t.map(e=>this.getRemoteVisibility(e))))if("fulfilled"===e.status){if("public"===e.value[0])return["public",(0,tw.l3)(e.value[1])];"local"!==e.value[0]&&(i=!1)}return i?["local",void 0]:["private",(0,tw.l3)(t)]}_pendingRemoteVisibility=new Map;async getRemoteVisibility(e){let t;let i=(0,eM.b1)();switch(e.provider?.id){case"github":case"gitlab":case"bitbucket":case"azure-devops":case"gitea":case"gerrit":case"google-source":if(null==(t=e.provider.url({type:tv.o.Repo})))return["private",e];break;default:{if(!(t=e.url).includes("git@"))return(0,q.sA)(t)?["private",e]:["local",e];let[i,r]=t.split("@")[1].split(":");if(!i||!r)return["private",e];t=`https://${i}/${r}`}}let r=this._pendingRemoteVisibility.get(t);if(null==r){let e=new AbortController,i=setTimeout(()=>e.abort(),3e4);(r=(0,tc.I5)(t,{method:"HEAD",agent:(0,tc.aE)(),signal:e.signal})).finally(()=>clearTimeout(i)),this._pendingRemoteVisibility.set(t,r)}try{let t=await r;if(t.ok)return["public",e];eq.YJ.debug(i,`Response=${t.status}`)}catch(e){eq.YJ.error(e,i)}finally{this._pendingRemoteVisibility.delete(t)}return["private",e]}async repositorySearch(e,t,i,r){let s,o,n,a,l;let h=(0,eM.b1)();e instanceof C.Uri?(o=e,s=C.workspace.getWorkspaceFolder(o)):o=e.uri,t=t??A.i.get("advanced.repositorySearchDepth",o)??A.i.getCore("git.repositoryScanMaxDepth",o,1),eq.YJ.log(h,`searching (depth=${t})...`);let c=[],u=await this.findRepositoryUri(o,!0);if(null!=u){n=(0,q.ay)(u.fsPath);let e=this.toCanonicalMap.get((0,q.oT)(u));null!=e&&(a=(0,q.ay)(e.fsPath)),eq.YJ.log(h,`found root repository in '${u.fsPath}'`),c.push(...this.openRepository(s,u,!0,void 0,r))}if(t<=0||i?.isCancellationRequested)return c;let d=new Set(A.i.getCore("git.repositoryScanIgnoredFolders",o,[]));for(let[e,t]of Object.entries({...A.i.getCore("files.exclude",o,{}),...A.i.getCore("search.exclude",o,{})}))t&&(e.includes("*.")||(e.startsWith("**/")&&(e=e.substring(3)),d.add(e)));try{l=await this.repositorySearchCore(o.fsPath,t,d,i)}catch(t){let e=t?.toString()??"";return ia.doesNotExist.test(e)?eq.YJ.log(h,`FAILED${e?` Error: ${e}`:""}`):eq.YJ.error(t,h,"FAILED"),c}for(let e of l){e=(0,q.Jl)(e);let t=(0,q.ay)(e);if(tu.Co&&(t===n||null!=a&&t===a)||(0,L.RJ)(t,n)||null!=a&&(0,L.RJ)(t,a))continue;eq.YJ.log(h,`searching in '${e}'...`),eq.YJ.debug(h,`normalizedRepoPath=${t}, rootPath=${n}, canonicalRootPath=${a}`);let i=await this.findRepositoryUri(C.Uri.file(e),!0);null!=i&&(eq.YJ.log(h,`found repository in '${i.fsPath}'`),c.push(...this.openRepository(s,i,!1,void 0,r)))}return c}repositorySearchCore(e,t,i,r,s=[]){let o=(0,eM.b1)();return r?.isCancellationRequested?Promise.resolve(s):new Promise((n,a)=>{(0,P.readdir)(e,{withFileTypes:!0},async(l,h)=>{let c;if(null!=l){a(l);return}if(0===h.length){n(s);return}for(c of(t--,h)){if(r?.isCancellationRequested)break;if(".git"===c.name)s.push((0,S.resolve)(e,c.name));else if(t>=0&&c.isDirectory()&&!i.has(c.name))try{await this.repositorySearchCore((0,S.resolve)(e,c.name),t,i,r,s)}catch(e){eq.YJ.error(e,o,"FAILED")}}n(s)})})}canHandlePathOrUri(e,t){if(this.supportedSchemes.has(e))return(0,q.oT)(t)}getAbsoluteUri(e,t){if("string"==typeof t){if((0,q.sA)(t))t=C.Uri.parse(t,!0);else{if(!(0,q.ic)(t))throw C.window.showErrorMessage(`Unable to get absolute uri between ${"string"==typeof e?e:e.toString(!0)} and ${t}; Base path '${t}' must be an absolute path`),Error(`Base path '${t}' must be an absolute path`);t=C.Uri.file(t)}}if("string"==typeof e){let i=(0,q.ay)(e);if(!(0,q.ic)(i))return C.Uri.joinPath(t,i)}let i=this.getRelativePath(e,t);return C.Uri.joinPath(t,i)}async getBestRevisionUri(e,t,i){if(i!==Q.E1){if(!i||(0,F.bP)(i)&&!(0,F.jN)(i)){let i=await this.git.ls_files(e,t);return null!=i||null!=(i=await this.git.ls_files(e,t,{untracked:!0}))?this.getAbsoluteUri(t,e):void 0}if((0,F.jN)(i)){let i=await this.getScmRepository(e);if(null==i){let t=this.fromCanonicalMap.get(e);null!=t&&(i=await this.getScmRepository(t.fsPath))}if(null!=i)return this.getScmGitUri(t,e)}return this.getRevisionUri(e,t,i)}}getRelativePath(e,t){if("string"==typeof t){if((0,q.sA)(t))t=C.Uri.parse(t,!0);else{if(!(0,q.ic)(t))throw C.window.showErrorMessage(`Unable to get relative path between ${"string"==typeof e?e:e.toString(!0)} and ${t}; Base path '${t}' must be an absolute path`),Error(`Base path '${t}' must be an absolute path`);t=C.Uri.file(t)}}if("string"==typeof e){if((0,q.sA)(e))e=C.Uri.parse(e,!0);else{if(!(0,q.ic)(e))return(0,q.ay)(e);e=C.Uri.file(e)}}let i=(0,q.U3)(t.fsPath,e.fsPath);return(0,q.ay)(i)}getRevisionUri(e,t,i){let r;if((0,F.bP)(i)&&!(0,F.jN)(i))return this.getAbsoluteUri(t,e);if((t=(0,q.ay)(this.getAbsoluteUri(t,e).fsPath)).startsWith("//")){let e=t.indexOf("/",2);r=t.substring(0,e),t=t.substring(e)}47!==t.charCodeAt(0)&&(t=`/${t}`);let s={ref:i,repoPath:(0,q.ay)(e),uncPath:r};return C.Uri.from({scheme:_.cl.GitLens,authority:(0,tm.An)(s),path:t,query:i?JSON.stringify({ref:(0,F.c5)(i).replaceAll("/"," ∕ ")}):void 0})}async getWorkingUri(e,t){let i,r,s=this.getRelativePath(t,e);for(;;){if(null!=(i=await this.git.ls_files(e,s))){s=(0,L.op)(i,"\n")[0];break}let t=A.i.get("advanced");if(null==(r=await this.git.log__file_recent(e,s,{ordering:t.commitOrdering,similarityThreshold:t.similarityThreshold})))return;if(null==(i=await this.git.log__file(e,".",r,{argsOrFormat:em,fileMode:"simple",filters:["R","C","D"],limit:1,ordering:t.commitOrdering}))||0===i.length)break;let[o,n,a]=ev(i,s);if("D"===a&&null!=n)return;if(null==o||null==n)break;s=n}return t=this.getAbsoluteUri(s,e),await e0(t.fsPath)?t:void 0}async addRemote(e,t,i,r){await this.git.remote__add(e,t,i,r),this.container.events.fire("git:cache:reset",{repoPath:e,caches:["remotes"]})}async pruneRemote(e,t){await this.git.remote__prune(e,t),this.container.events.fire("git:cache:reset",{repoPath:e,caches:["remotes"]})}async removeRemote(e,t){await this.git.remote__remove(e,t),this.container.events.fire("git:cache:reset",{repoPath:e,caches:["remotes"]})}async applyChangesToWorkingFile(e,t,i){let r;let s=(0,eM.b1)();if(null==(t=t??e.sha)||null==e.repoPath)return;null==i&&(i=t,t=`${t}^`);let[o,n]=(0,q.O)(e,e.repoPath);try{r=await this.git.diff(n,o,t,i),await this.git.apply(n,r)}catch(t){let e=t?.toString()??"";if(r&&/patch does not apply/i.test(e)){let e=await C.window.showWarningMessage("Unable to apply changes cleanly. Retry and allow conflicts?",{title:"Yes"},{title:"No",isCloseAffordance:!0});if(null==e||"Yes"!==e.title)return;if("Yes"===e.title)try{await this.git.apply(n,r,{allowConflicts:!0});return}catch(e){t=e}}eq.YJ.error(t,s),(0,tJ.qC)("Unable to apply changes")}}async applyUnreachableCommitForPatch(e,t,i){let r=(0,eM.b1)();if(i?.stash){let t=await this.getStatusForRepo(e);if(t?.files?.length)try{await this.git.stash__push(e,void 0,{includeUntracked:!0})}catch(e){throw eq.YJ.error(e,r),new T.mw(T.Mp.StashFailed,`Unable to apply patch; failed stashing working changes changes${e instanceof T.iP?`: ${e.message}`:""}`,e)}}let s=e,o=await this.getBranch(e),n=i?.branchName==null||o?.name===i.branchName||(await this.getBranches(e,{filter:e=>e.name===i.branchName}))?.values?.length>0,a=i?.branchName!=null&&!n&&i.createBranchIfNeeded;if(i?.createWorktreePath!=null){if(i?.branchName===null||i.branchName===o?.name)throw new T.mw(T.Mp.CreateWorktreeFailed,"Unable to apply patch; failed creating worktree");try{await this.createWorktree(e,i.createWorktreePath,{commitish:i?.branchName!=null&&n?i.branchName:o?.name,createBranch:a?i.branchName:void 0})}catch(e){throw eq.YJ.error(e,r),new T.mw(T.Mp.CreateWorktreeFailed,`Unable to apply patch; failed creating worktree${e instanceof T.Ep?`: ${e.message}`:""}`,e)}let t=await this.container.git.getWorktree(e,e=>(0,q.ay)(e.uri.fsPath)===(0,q.ay)(i.createWorktreePath));if(null==t)throw new T.mw(T.Mp.CreateWorktreeFailed,"Unable to apply patch; failed creating worktree");s=t.uri.fsPath}if(i?.branchName!=null&&o?.name!==i.branchName){let e=a?o?.ref??"HEAD":i.branchName;await this.checkout(s,e,{createBranch:a?i.branchName:void 0})}try{await this.git.cherrypick(s,t,{noCommit:!0,errors:I.Throw})}catch(e){if(eq.YJ.error(e,r),e instanceof T.Yj){if(e.reason===T.CY.Conflicts)throw new T.mw(T.Mp.AppliedWithConflicts,"Patch applied with conflicts",e);if(e.reason===T.CY.AbortedWouldOverwrite)throw new T.mw(T.Mp.ApplyAbortedWouldOverwrite,"Unable to apply patch as some local changes would be overwritten",e)}throw new T.mw(T.Mp.ApplyFailed,`Unable to apply patch${e instanceof T.Yj?`: ${e.message}`:""}`,e)}}async checkout(e,t,i){let r=(0,eM.b1)();try{await this.git.checkout(e,t,i),this.container.events.fire("git:cache:reset",{repoPath:e,caches:["branches","status"]})}catch(i){let e=i?.toString()??"";if(/overwritten by checkout/i.test(e)){(0,tJ.qC)(`Unable to checkout '${t}'. Please commit or stash your changes before switching branches`);return}eq.YJ.error(i,r),(0,tJ.qC)(`Unable to checkout '${t}'`)}}async clone(e,t){let i=(0,eM.b1)();try{return this.git.clone(e,t)}catch(t){eq.YJ.error(t,i),(0,tJ.qC)(`Unable to clone '${e}'`)}}async createUnreachableCommitForPatch(e,t,i,r){let s=(0,eM.b1)(),o=await P.promises.mkdtemp(R().join((0,ta.tmpdir)(),"gl-")),n=(0,q.En)(o,"index");try{let s={GIT_INDEX_FILE:n},o=await this.git.git({cwd:e,env:s},"ls-tree","-z","-r","--full-name",i);await this.git.git({cwd:e,env:s,stdin:o},"update-index","-z","--index-info"),await this.git.apply2(e,{env:s,stdin:t},"--cached");let a=(await this.git.git({cwd:e,env:s},"write-tree"))?.trim(),l=(await this.git.git({cwd:e,env:s},"commit-tree",a,"-p",i,"-m",r))?.trim();return this.getCommit(e,l)}catch(e){throw eq.YJ.error(e,s),e}finally{try{await P.promises.rmdir(o,{recursive:!0})}catch(e){}}}resetCache(e,...t){(0===t.length||t.includes("branches"))&&this._branchesCache.delete(e),(0===t.length||t.includes("contributors"))&&this._contributorsCache.delete(e),(0===t.length||t.includes("remotes"))&&this._remotesCache.delete(e),(0===t.length||t.includes("stashes"))&&this._stashesCache.delete(e),(0===t.length||t.includes("status"))&&(this._mergeStatusCache.delete(e),this._rebaseStatusCache.delete(e)),(0===t.length||t.includes("tags"))&&this._tagsCache.delete(e),0===t.length&&(this._trackedPaths.delete(e),this._repoInfoCache.delete(e))}resetCaches(...e){(0===e.length||e.includes("branches"))&&this._branchesCache.clear(),(0===e.length||e.includes("contributors"))&&this._contributorsCache.clear(),(0===e.length||e.includes("remotes"))&&this._remotesCache.clear(),(0===e.length||e.includes("stashes"))&&this._stashesCache.clear(),(0===e.length||e.includes("status"))&&(this._mergeStatusCache.clear(),this._rebaseStatusCache.clear()),(0===e.length||e.includes("tags"))&&this._tagsCache.clear(),0===e.length&&(this._trackedPaths.clear(),this._repoInfoCache.clear())}async excludeIgnoredUris(e,t){let i=new Map(t.map(e=>[(0,q.ay)(e.fsPath),e])),r=await this.git.check_ignore(e,...i.keys());if(null==r)return t;let s=r.split("\0").filter(e=>!!e);if(0===s.length)return t;for(let e of s)i.delete(e);return[...i.values()]}async fetch(e,t){let i=(0,eM.b1)(),{branch:r,...s}=t??{};try{if((0,F.MN)(r)){let[i,s]=(0,x.Mp)(r);if(null==s)return;await this.git.fetch(e,{branch:i,remote:s,upstream:(0,F.aL)(r),pull:t?.pull})}else await this.git.fetch(e,s);this.container.events.fire("git:cache:reset",{repoPath:e})}catch(e){if(eq.YJ.error(e,i),!T.Ui.is(e))throw e;C.window.showErrorMessage(e.message)}}async push(e,t){let i,r,s,o,n;let a=(0,eM.b1)();if((0,F.MN)(t?.reference))null!=t.publish?(i=t.reference.name,r=t.publish.remote,s=(0,F.aL)(t.reference)):([i,r]=(0,x.Mp)(t.reference),s=void 0);else{let n=await this.getBranch(e);if(null==n)return;i=t?.reference!=null?`${t.reference.ref}:${t?.publish!=null?"refs/heads/":""}${n.getNameWithoutRemote()}`:n.name,r=n.getRemoteName()??t?.publish?.remote,s=t?.reference==null&&t?.publish!=null?n.name:void 0,t?.publish?.remote!=null&&t?.reference!=null&&(o={branch:n.getNameWithoutRemote(),remote:r,remoteBranch:n.getNameWithoutRemote()})}if(t?.publish==null&&null==r&&null==s)throw new T.ag(T._y.Other);if(t?.force){let e=A.i.getCore("git.useForcePushWithLease")??!0;n=e?{withLease:e,ifIncludes:A.i.getCore("git.useForcePushIfIncludes")??!0}:{withLease:e}}try{await this.git.push(e,{branch:i,remote:r,upstream:s,force:n,publish:t?.publish!=null}),null!=o&&await this.git.branch__set_upstream(e,o.branch,o.remote,o.remoteBranch),this.container.events.fire("git:cache:reset",{repoPath:e})}catch(e){if(eq.YJ.error(e,a),!T.ag.is(e))throw e;C.window.showErrorMessage(e.message)}}async pull(e,t){let i=(0,eM.b1)(),r=t?.branch;if(!(0,F.MN)(r)&&null==(r=await this.getBranch(e)))return;let[s,o]=(0,x.Mp)(r);if(null!=o||null!=r.upstream)try{await this.git.pull(e,{branch:s,remote:o,rebase:t?.rebase,tags:t?.tags}),this.container.events.fire("git:cache:reset",{repoPath:e})}catch(e){if(eq.YJ.error(e,i),!T.GW.is(e))throw e;C.window.showErrorMessage(e.message)}}toCanonicalMap=new Map;fromCanonicalMap=new Map;unsafePaths=new Set;async findRepositoryUri(e,t){let i;let r=(0,eM.b1)();try{let s;if(null==t&&(t=((await C.workspace.fs.stat(e)).type&C.FileType.Directory)===C.FileType.Directory),t||(e=C.Uri.joinPath(e,"..")),[s,i]=await this.git.rev_parse__show_toplevel(e.fsPath),s?this.unsafePaths.delete(e.fsPath):!1===s&&this.unsafePaths.add(e.fsPath),!i)return;let o=C.Uri.file(i);if(tu.Yf&&0!==o.authority.length&&0===e.authority.length){let t=il.exec(e.path);if(null!=t){let[,e]=t;try{let t=await new Promise(t=>P.realpath.native(`${e}:\\`,{encoding:"utf8"},(e,i)=>t(null!=e?void 0:i)));if(null!=t){let r=(0,q.Oq)(o.fsPath,t);return i=(0,q.ay)(o.fsPath.replace(t,`${e.toLowerCase()}:${r||t.endsWith("\\")?"\\":""}`)),C.Uri.file(i)}}catch{}}return C.Uri.file((0,q.ay)(e.fsPath))}let n=this.toCanonicalMap.get(i);if(null==n){let t;[i,t]=await new Promise(t=>{(0,P.realpath)(e.fsPath,{encoding:"utf8"},(s,o)=>{if(null!=s){eq.YJ.debug(r,`fs.realpath failed; repoPath=${i}`),t([i,void 0]);return}if((0,q.Oq)(e.fsPath,o)){eq.YJ.debug(r,`No symlink detected; repoPath=${i}`),t([i,void 0]);return}let n=(0,q.ay)(o),a=(0,q.KS)(`${i}/`,`${n}/`,"/"),l=(0,q.ay)(e.fsPath);n=a<n.length-1?l.substring(0,l.length-(n.length-a)):l,eq.YJ.debug(r,`Symlink detected; repoPath=${i}, path=${e.fsPath}, resolvedPath=${o}`),t([i,n])})}),null!=t&&(this.toCanonicalMap.set(i,C.Uri.file(t)),this.fromCanonicalMap.set(t,C.Uri.file(i)))}return i?C.Uri.file(i):void 0}catch(e){eq.YJ.error(e,r);return}}getAheadBehindCommitCount(e,t,i){return this.git.rev_list__left_right(e,t,i?.authors)}async getBlame(e,t){let i=(0,eM.b1)();if(t?.isDirty)return this.getBlameContents(e,t.getText());let r="blame";null!=e.sha&&(r+=`:${e.sha}`);let s=await this.container.documentTracker.getOrAdd(t??e);if(this.useCaching){if(null!=s.state){let e=s.state.getBlame(r);if(null!=e)return eq.YJ.debug(i,`Cache hit: '${r}'`),e.item}eq.YJ.debug(i,`Cache miss: '${r}'`),s.state??=new t4.u}let o=this.getBlameCore(e,s,r,i);return null!=s.state&&(eq.YJ.debug(i,`Cache add: '${r}'`),s.state.setBlame(r,{item:o})),o}async getBlameCore(e,t,i,r){let s=await this.isTrackedWithDetails(e);if(null==s)return eq.YJ.log(r,`Skipping blame; '${e.fsPath}' is not tracked`),is;let[o,n]=s;try{let[t,i,r]=await Promise.allSettled([this.git.blame(n,o,{ref:e.sha,args:A.i.get("advanced.blame.customArguments"),ignoreWhitespace:A.i.get("blame.ignoreWhitespace")}),this.getCurrentUser(n),C.workspace.fs.stat(e)]);return tP(this.container,n,(0,t0.Cv)(t),(0,t0.Cv)(i),t0.Cv(r)?.mtime)}catch(e){if(eq.YJ.error(e,r),null!=t.state){let s=e?.toString()??"";return eq.YJ.debug(r,`Cache replace (with empty promise): '${i}'; reason=${s}`),t.state.setBlame(i,{item:is,errorMessage:s}),t.setBlameFailure(e),(e instanceof T.ck||e instanceof T.AZ)&&(0,tJ.gv)(e),is}return}}async getBlameContents(e,t){let i=(0,eM.b1)(),r=`blame:${(0,th.m)(t)}`,s=await this.container.documentTracker.getOrAdd(e);if(this.useCaching){if(null!=s.state){let e=s.state.getBlame(r);if(null!=e)return eq.YJ.debug(i,`Cache hit: ${r}`),e.item}eq.YJ.debug(i,`Cache miss: ${r}`),s.state??=new t4.u}let o=this.getBlameContentsCore(e,t,s,r,i);return null!=s.state&&(eq.YJ.debug(i,`Cache add: '${r}'`),s.state.setBlame(r,{item:o})),o}async getBlameContentsCore(e,t,i,r,s){let o=await this.isTrackedWithDetails(e);if(null==o)return eq.YJ.log(s,`Skipping blame; '${e.fsPath}' is not tracked`),is;let[n,a]=o;try{let[i,s,o]=await Promise.allSettled([this.git.blame(a,n,{contents:t,args:A.i.get("advanced.blame.customArguments"),correlationKey:`:${r}`,ignoreWhitespace:A.i.get("blame.ignoreWhitespace")}),this.getCurrentUser(a),C.workspace.fs.stat(e)]);return tP(this.container,a,(0,t0.Cv)(i),(0,t0.Cv)(s),t0.Cv(o)?.mtime)}catch(e){if(eq.YJ.error(e,s),null!=i.state){let t=e?.toString()??"";return eq.YJ.debug(s,`Cache replace (with empty promise): '${r}'; reason=${t}`),i.state.setBlame(r,{item:is,errorMessage:t}),i.setBlameFailure(e),(e instanceof T.ck||e instanceof T.AZ)&&(0,tJ.gv)(e),is}return}}async getBlameForLine(e,t,i,r){if(i?.isDirty)return this.getBlameForLineContents(e,t,i.getText(),r);let s=(0,eM.b1)();if(!r?.forceSingleLine&&this.useCaching){let r=await this.getBlame(e,i);if(null==r)return;let s=r.lines[t];if(null==s){if(r.lines.length!==t)return;s=r.lines[t-1]}let o=r.commits.get(s.sha);if(null==o)return;return{author:{...r.authors.get(o.author.name),lineCount:o.lines.length},commit:o,line:s}}let o=t+1,[n,a]=(0,q.O)(e,e.repoPath);try{let[i,r,s]=await Promise.allSettled([this.git.blame(a,n,{ref:e.sha,args:A.i.get("advanced.blame.customArguments"),ignoreWhitespace:A.i.get("blame.ignoreWhitespace"),startLine:o,endLine:o}),this.getCurrentUser(a),C.workspace.fs.stat(e)]),l=tP(this.container,a,(0,t0.Cv)(i),(0,t0.Cv)(r),t0.Cv(s)?.mtime);if(null==l)return;return{author:(0,eN.KY)(l.authors.values()),commit:(0,eN.KY)(l.commits.values()),line:l.lines[t]}}catch(e){eq.YJ.error(e,s),(e instanceof T.ck||e instanceof T.AZ)&&(0,tJ.gv)(e);return}}async getBlameForLineContents(e,t,i,r){if(!r?.forceSingleLine&&this.useCaching){let r=await this.getBlameContents(e,i);if(null==r)return;let s=r.lines[t];if(null==s){if(r.lines.length!==t)return;s=r.lines[t-1]}let o=r.commits.get(s.sha);if(null==o)return;return{author:{...r.authors.get(o.author.name),lineCount:o.lines.length},commit:o,line:s}}let s=t+1,[o,n]=(0,q.O)(e,e.repoPath);try{let[r,a,l]=await Promise.allSettled([this.git.blame(n,o,{contents:i,args:A.i.get("advanced.blame.customArguments"),ignoreWhitespace:A.i.get("blame.ignoreWhitespace"),startLine:s,endLine:s}),this.getCurrentUser(n),C.workspace.fs.stat(e)]),h=tP(this.container,n,(0,t0.Cv)(r),(0,t0.Cv)(a),t0.Cv(l)?.mtime);if(null==h)return;return{author:(0,eN.KY)(h.authors.values()),commit:(0,eN.KY)(h.commits.values()),line:h.lines[t]}}catch{return}}async getBlameForRange(e,t){let i=await this.getBlame(e);if(null!=i)return this.getBlameRange(i,e,t)}async getBlameForRangeContents(e,t,i){let r=await this.getBlameContents(e,i);if(null!=r)return this.getBlameRange(r,e,t)}getBlameRange(e,t,i){if(0===e.lines.length||0===i.start.line&&i.end.line===e.lines.length-1)return{allLines:e.lines,...e};let r=e.lines.slice(i.start.line,i.end.line+1),s=new Set(r.map(e=>e.sha)),o=i.start.line+1,n=i.end.line+1,a=new Map,l=new Map;for(let t of e.commits.values()){if(!s.has(t.sha))continue;let e=t.with({lines:t.lines.filter(e=>e.line>=o&&e.line<=n)});l.set(t.sha,e);let i=a.get(e.author.name);null==i&&(i={name:e.author.name,lineCount:0},a.set(i.name,i)),i.lineCount+=e.lines.length}let h=new Map([...a.entries()].sort((e,t)=>t[1].lineCount-e[1].lineCount));return{repoPath:t.repoPath,authors:h,commits:l,lines:r,allLines:e.lines}}async getBranch(e){let{values:[t]}=await this.getBranches(e,{filter:e=>e.current});if(null!=t)return t;let i=A.i.get("advanced.commitOrdering"),r=await this.git.rev_parse__currentBranch(e,i);if(null==r)return;let[s,o]=r[0].split("\n");if((0,x.Os)(s)){let[n,a]=await Promise.allSettled([this.getRebaseStatus(e),this.git.log__recent_committerdate(e,i)]),l=(0,t0.Cv)(a);t=new x.SY(this.container,e,t0.Cv(n)?.incoming.name??s,!1,!0,null!=l?new Date(1e3*Number(l)):void 0,r[1],o?{name:o,missing:!1}:void 0,void 0,void 0,void 0,null!=n)}return t}async getBranches(e,t){if(null==e)return io;let i=this.useCaching?this._branchesCache.get(e):void 0;null==i&&(i=(async function(){try{let t=await this.git.for_each_ref__branch(e,{all:!0});if(null==t||0===t.length){let t;let i=A.i.get("advanced.commitOrdering"),r=await this.git.rev_parse__currentBranch(e,i);if(null!=r){let[s,o]=r[0].split("\n"),[n,a]=await Promise.all([(0,x.Os)(s)?this.getRebaseStatus(e):void 0,this.git.log__recent_committerdate(e,i)]);t=new x.SY(this.container,e,n?.incoming.name??s,!1,!0,null!=a?new Date(1e3*Number(a)):void 0,r[1],{name:o,missing:!1},void 0,void 0,void 0,null!=n)}return null!=t?{values:[t]}:io}return{values:function(e,t,i){var r=[];try{let s,o,n,a,l,h,c,u,d,p;let g=B(r,(0,O.i)(`Git.parseBranches(${i})`,{log:!1,logLevel:"debug"})),m=[];if(!t)return m;for(;p=W.exec(t),null!=p;){if([,s,o,n,a,l,h,c,u]=p,o.startsWith("refs/remotes/")){if((o=o.substr(13)).endsWith("/HEAD"))continue;d=!0}else o=o.substr(11),d=!1;m.push(new x.SY(e,i,o,d,42===s.charCodeAt(0),u?new Date(u):void 0,null==c||0===c.length?void 0:` ${c}`.substr(1),null==n||0===n.length?void 0:{name:` ${n}`.substr(1),missing:!!h},Number(a)||0,Number(l)||0))}return g?.stop({suffix:` parsed ${m.length} branches`}),m}catch(e){var s=e,o=!0}finally{U(r,s,o)}}(this.container,t,e)}}catch(t){return this._branchesCache.delete(e),io}}).call(this),this.useCaching&&t?.cursor==null&&this._branchesCache.set(e,i));let r=await i;return t?.filter!=null&&(r={...r,values:r.values.filter(t.filter)}),t?.sort&&(0,x.U5)(r.values,"boolean"==typeof t.sort?void 0:t.sort),r}async getChangedFilesCount(e,t){let i=await this.git.diff__shortstat(e,t);if(i)return function(e){var t=[];try{let i=tR(t,(0,O.i)("Git.parseDiffShortStat",{log:!1,logLevel:"debug"}));if(!e)return;let r=t$.exec(e);if(null==r)return;let[,s,o,n]=r,a={changedFiles:null==s?0:parseInt(s,10),additions:null==o?0:parseInt(o,10),deletions:null==n?0:parseInt(n,10)};return i?.stop({suffix:` parsed ${a.changedFiles} files, +${a.additions} -${a.deletions}`}),a}catch(e){var i=e,r=!0}finally{tD(t,i,r)}}(i)}async getCommit(e,t){let i=await this.getLog(e,{limit:2,ref:t});if(null!=i)return i.commits.get(t)??(0,eN.KY)(i.commits.values())}async getCommitBranches(e,t,i,r){if(null!=i){let r=await this.git.branchOrTag__containsOrPointsAt(e,t,{type:"branch",mode:"contains",name:i});return r?[r?.trim()]:[]}let s=await this.git.branchOrTag__containsOrPointsAt(e,t,{type:"branch",...r});return s?(0,N.Gs)(s.split("\n"),e=>e.trim()||void 0):[]}getCommitCount(e,t){return this.git.rev_list__count(e,t)}async getCommitForFile(e,t,i){let r=(0,eM.b1)(),[s,o]=(0,q.O)(t,e);try{let e;let t=await this.getLogForFile(o,s,{limit:2,ref:i?.ref,range:i?.range});if(null==t)return;if(i?.ref){let e=t.commits.get(i.ref);if(null==e&&!i?.firstIfNotFound&&((0,F.kp)(i.ref)||(0,F.bP)(i.ref)))return}return e??(0,eN.KY)(t.commits.values())}catch(e){eq.YJ.error(e,r);return}}async getCommitsForGraph(e,t,i){let r;let s=i?.limit??A.i.get("graph.defaultItemLimit")??5e3,h=A.i.get("graph.pageItemLimit")??1e3,c=A.i.get("graph.commitOrdering",void 0,"date"),u=i?.include?.stats,d=i?.include?.stats&&!u?(null==n&&(n=ed({sha:"%H",author:"%aN",authorEmail:"%aE",authorDate:"%at",committerDate:"%ct",parents:"%P",tips:"%D",message:"%B"})),n):(null==o&&(o=ec({sha:"%H",author:"%aN",authorEmail:"%aE",authorDate:"%at",committerDate:"%ct",parents:"%P",tips:"%D",message:"%B"})),o),p=(null==l&&(l=eu("%H")),l),g=(null==a&&(a=ed({sha:"%H"})),a),[m,f,w,v,y]=await Promise.allSettled([this.git.log(e,void 0,...p.arguments,"-n1",i?.ref??"HEAD"),this.getStash(e),this.getBranches(e),this.getRemotes(e),this.getCurrentUser(e)]),b=t0.Cv(w)?.values,C=null!=b?new Map(b.map(e=>[e.name,e])):new Map,k=b?.find(e=>e.current),P=k?.upstream?.name,S=(0,t0.Cv)(y),R=(0,t0.Cv)(v),D=null!=R?new Map(R.map(e=>[e.name,e])):new Map,$=(0,eN.KY)(p.parse((0,t0.Cv)(m)??"")),_=new Map,I=(0,t0.Cv)(f);null!=I&&0!==I.commits.size&&(r=(0,eN.kn)((0,eN.kH)(I.commits.values(),e=>e.sha.substring(0,9)),"\n"));let T=A.i.get("graph.avatars",void 0,!0),O=new Map,E=new Set,B=new Set,U=new Map,W=0,N=0,q=0;async function L(s,o,n){let a,l,p,m,f,w,v,y,b,A,k,R,$,M,Q,G,V,z,H,j,J,K,Z,X,ee,et,ei,er;let es=W;N++;let eo=s;for(;;){let t;let u=[...d.arguments,`--${c}-order`,"--all"];if(n?.skip&&u.push(`--skip=${n.skip}`),o)[t,s]=await this.git.logStreamTo(e,o,s,r?{stdin:r}:void 0,...u);else if(u.push(`-n${eo+1}`),t=await this.git.log(e,r?{stdin:r}:void 0,...u),n&&!tn(n.sha).test(t)){if(l===t.length)return{repoPath:e,avatars:O,ids:E,includes:i?.include,branches:C,remotes:D,downstreams:_,rows:[]};l=t.length,eo=(0===eo?h:eo)*2,n.skip-=Math.floor(.1*n.skip);continue}if(!t)return{repoPath:e,avatars:O,ids:E,includes:i?.include,branches:C,remotes:D,downstreams:_,rows:[]};a=t,0!==s&&(s=eo);break}let en=[],ea=new Map,el=!1,eh=!1,ec=0;for(let i of d.parse(a))if(ec++,!E.has(i.sha)&&(W++,!U.has(i.sha))){if(E.add(i.sha),$=[],Q=[],V=[],b={},el=!1,i.tips){for(ei of(ea.clear(),i.tips.split(", ")))if("refs/stash"!==ei){if(ei.startsWith("tag: ")){et=ei.substring(5),ee=(0,eO.Gs)(e,et),y={webviewItem:"gitlens:tag",webviewItemValue:{type:"tag",ref:(0,F.op)(et,e,{id:ee,refType:"tag",name:et})}},G={id:ee,name:et,annotated:!0,context:(0,t2.QX)(y)},V.push(G);continue}if((el=ei.startsWith("HEAD"))&&(B.add(i.sha),"HEAD"!==ei&&(ei=ei.substring(8))),(K=(0,x.IB)(ei))&&null!=(j=D.get(K))){if("HEAD"===(v=(0,x.ak)(ei)))continue;J=(0,x.Sg)(e,!0,ei),m=((T?j.provider?.avatarUri:void 0)??tw.ak(this.container,j,t))?.toString(!0),y={webviewItem:"gitlens:branch+remote",webviewItemValue:{type:"branch",ref:(0,F.op)(ei,e,{id:J,refType:"branch",name:ei,remote:!0,upstream:{name:j.name,missing:!1}})}},M={id:J,name:v,owner:j.name,url:j.url,avatarUrl:m,context:(0,t2.QX)(y),current:ei===P,hostingServiceType:j.provider?.id},Q.push(M),null==(A=ea.get(v))&&(A={remotes:[]},ea.set(v,A)),null==A.remotes&&(A.remotes=[]),A.remotes.push(y.webviewItemValue.ref);continue}if(f=C.get(ei),w=f?.id??(0,x.Sg)(e,!1,ei),y={webviewItem:`gitlens:branch${el?"+current":""}${f?.upstream!=null?"+tracking":""}`,webviewItemValue:{type:"branch",ref:(0,F.op)(ei,e,{id:w,refType:"branch",name:ei,remote:!1,upstream:f?.upstream})}},R={id:w,name:ei,isCurrentHead:el,context:(0,t2.QX)(y),upstream:f?.upstream!=null?{name:f.upstream.name,id:(0,x.Sg)(e,!0,f.upstream.name)}:void 0},$.push(R),f?.upstream?.name!=null){let e=_.get(f.upstream.name);null==e&&(e=[],_.set(f.upstream.name,e)),e.push(ei)}null==(A=ea.get(ei))&&(A={},ea.set(ei,A)),el&&(A.head=!0),A.local=y.webviewItemValue.ref}for([k,A]of ea)null!=A.remotes&&(null!=A.local&&A.remotes.length>0||A.remotes.length>1)&&(null==b.refGroups&&(b.refGroups={}),b.refGroups[k]=(0,t2.QX)({webviewItemGroup:`gitlens:refGroup${A.head?"+current":""}`,webviewItemGroupValue:{type:"refGroup",refs:null!=A.local?[A.local,...A.remotes]:A.remotes}}))}if(Z=I?.commits.get(i.sha),H=i.parents?i.parents.split(" "):[],B.has(i.sha))for(z of H)B.add(z);null!=Z&&H.length>1&&(U.set(H[1],i.sha),U.set(H[2],i.sha),H.splice(1,2)),null!=Z||O.has(i.authorEmail)||null==(p=(0,td.sh)(i.authorEmail))||O.set(i.authorEmail,p.toString(!0)),eh=(0,Y.a)(S,i.author,i.authorEmail),null!=Z?b.row=(0,t2.QX)({webviewItem:"gitlens:stash",webviewItemValue:{type:"stash",ref:(0,F.op)(i.sha,e,{refType:"stash",name:Z.name,number:Z.number})}}):(b.row=(0,t2.QX)({webviewItem:`gitlens:commit${el?"+HEAD":""}${B.has(i.sha)?"+current":""}`,webviewItemValue:{type:"commit",ref:(0,F.op)(i.sha,e,{refType:"revision",message:i.message})}}),b.avatar=(0,t2.QX)({webviewItem:`gitlens:contributor${eh?"+current":""}`,webviewItemValue:{type:"contributor",repoPath:e,name:i.author,email:i.authorEmail,current:eh}})),en.push({sha:i.sha,parents:H,author:eh?"You":i.author,email:i.authorEmail,date:1e3*Number("author-date"===c?i.authorDate:i.committerDate),message:(0,tp.I)(i.message.trim()),type:null!=Z?"stash-node":H.length>1?"merge-node":"commit-node",heads:$,remotes:Q,tags:V,contexts:b}),null!=i.stats&&(null==X&&(X=new Map),X.set(i.sha,i.stats))}let eu=n?.sha,ed=(0,eN.GS)(E);return n=null!=ed?{sha:ed,skip:W-N}:void 0,u&&(null==X&&(X=new Map),q++,er={isLoaded:()=>0===q,promise:new Promise(async t=>{try{let t=[...g.arguments];0===es?t.push(`-n${W}`):t.push(`-n${W-es}`,`--skip=${es}`),t.push(`--${c}-order`,"--all");let i=await this.git.log(e,r?{stdin:r}:void 0,...t);if(i)for(let e of g.parse(i))X.set(e.sha,e.stats)}finally{q--,t()}})}),{repoPath:e,avatars:O,ids:E,includes:i?.include,remappedIds:U,branches:C,remotes:D,downstreams:_,rows:en,id:o,rowsStats:X,rowsStatsDeferred:er,paging:{limit:0===s?ec:s,startingCursor:eu,hasMore:0!==s&&ec>s},more:async(e,t)=>L.call(this,e,t,n)}}return L.call(this,s,$)}async getCommitTags(e,t,i){let r=await this.git.branchOrTag__containsOrPointsAt(e,t,{type:"tag",...i});return r?(0,N.Gs)(r.split("\n"),e=>e.trim()||void 0):[]}getConfig(e,t){return this.git.config__get(t,e)}setConfig(e,t,i){return this.git.config__set(t,i,e)}async getContributors(e,t){if(null==e)return[];let i=`${e}${t?.ref?`|${t.ref}`:""}`;t?.all&&(i+=":all"),t?.merges&&(i+=`:merges:${t.merges}`),t?.stats&&(i+=":stats");let o=this.useCaching?this._contributorsCache.get(i):void 0;return null==o&&(o=(async function(){try{e=(0,q.ay)(e);let i=await this.getCurrentUser(e),o=t?.stats?(null==s&&(s=ed({sha:"%H",author:"%aN",email:"%aE",date:"%at"})),s):(null==r&&(r=ec({sha:"%H",author:"%aN",email:"%aE",date:"%at"})),r),n=[...o.arguments,"--full-history","--use-mailmap"],a=t?.merges??!0;a?n.push("first-parent"===a?"--first-parent":"--no-min-parents"):n.push("--no-merges"),t?.all&&n.push("--all","--single-worktree");let l=await this.git.log(e,{ref:t?.ref},...n),h=new Map;for(let t of o.parse(l)){let r=`${t.author}|${t.email}`,s=h.get(r);if(null==s)s=new tf.M(e,t.author,t.email,1,new Date(1e3*Number(t.date)),(0,Y.a)(i,t.author,t.email),t.stats),h.set(r,s);else{s.count++;let e=new Date(1e3*Number(t.date));e>s.date&&(s.date=e)}}return[...h.values()]}catch(e){return this._contributorsCache.delete(i),[]}}).call(this),this.useCaching&&this._contributorsCache.set(i,o)),o}async getCurrentUser(e){if(!e)return;let t=(0,eM.b1)(),i=this._repoInfoCache.get(e),r=i?.user;if(null!=r)return r;if(null!==r){r={name:void 0,email:void 0};try{let t=await this.git.config__get_regex("^user\\.",e,{local:!0});if(t){let e,i,s;for(;s=ih.exec(t),null!=s;)[,e,i]=s,r[e]=` ${i}`.substr(1)}else{if(r.name=D.env.GIT_AUTHOR_NAME||D.env.GIT_COMMITTER_NAME||ta.userInfo()?.username||void 0,!r.name){this._repoInfoCache.set(e,{...i,user:null});return}r.email=D.env.GIT_AUTHOR_EMAIL||D.env.GIT_COMMITTER_EMAIL||D.env.EMAIL||`${r.name}@${(0,ta.hostname)()}`}let s=`${r.name} <${r.email}>`,o=await this.git.check_mailmap(e,s);if(null!=o&&0!==o.length&&s!==o){let e=ic.exec(o);null!=e&&([,r.name,r.email]=e)}return this._repoInfoCache.set(e,{...i,user:r}),r}catch(r){eq.YJ.error(r,t),this._repoInfoCache.set(e,{...i,user:null});return}}}async getDefaultBranchName(e,t){if(null!=e){if(!t)try{let t=await this.git.symbolic_ref(e,"HEAD");if(null!=t)return t.trim()}catch{}t=t??"origin";try{let i=await this.git.ls_remote__HEAD(e,t);if(null==i)return;let r=/ref:\s(\S+)\s+HEAD/m.exec(i);if(null==r)return;let[,s]=r;return s.substr(11)}catch{return}}}async getDiff(e,t,i,r){let s;let o=(0,eM.b1)(),n=[`-U${r?.context??3}`];t===Q.Oy?null!=i?n.push(i):i="HEAD":t===Q.QD?(n.push("--staged"),null!=i?n.push(i):i="HEAD"):null==i?""===t||"HEAD"===t.toUpperCase()?(i="HEAD",n.push(i)):(i=`${t}^`,n.push(i,t)):n.push(i,t),r?.uris&&n.push("--",...r.uris.map(e=>e.fsPath));try{s=await this.git.diff2(e,{errors:I.Throw},...n)}catch(e){eq.YJ.error(e,o);return}return{contents:s,from:i,to:t}}async getDiffFiles(e,t){let i=await this.git.apply2(e,{stdin:t},"--numstat","--summary","-z");if(i)return{files:function(e,t){var i=[];try{let r=tR(i,(0,O.i)("Git.parseApplyFiles",{log:!1,logLevel:"debug"}));if(!e)return[];let s=new Map,o=e.split("\0"),n=o.pop();for(let e of o){if(!(e=e.trim()))continue;let[i,r,o]=e.split("	");s.set((0,q.ay)(o),new G.Gm(t,o,"M",void 0,void 0,{changes:0,additions:parseInt(i,10),deletions:parseInt(r,10)}))}for(let e of n.split("\n")){if(!(e=e.trim()))continue;let i=/(rename) (.*?)\{(.+?)\s+=>\s+(.+?)\}(?: \(\d+%\))|(create|delete) mode \d+ (.+)/.exec(e);if(null==i)continue;let[,r,o,n,a,l,h]=i;if(null!=r){a=(0,q.ay)((0,q.En)(o,a)),n=(0,q.ay)((0,q.En)(o,n));let e=s.get(a);s.set(a,new G.Gm(t,a,"R",n,void 0,e.stats))}else{let e=s.get((0,q.ay)(h));s.set(h,new G.Gm(t,e.path,"create"===l?"A":"D",void 0,void 0,e.stats))}}return r?.stop({suffix:` parsed ${s.size} files`}),[...s.values()]}catch(e){var r=e,s=!0}finally{tD(i,r,s)}}(i,e)}}async getDiffForFile(e,t,i){let r=(0,eM.b1)(),s="diff";null!=t&&(s+=`:${t}`),null!=i&&(s+=`:${i}`);let o=await this.container.documentTracker.getOrAdd(e);if(this.useCaching){if(null!=o.state){let e=o.state.getDiff(s);if(null!=e)return eq.YJ.debug(r,`Cache hit: '${s}'`),e.item}eq.YJ.debug(r,`Cache miss: '${s}'`),o.state??=new t4.u}let n=await ip(e),a=this.getDiffForFileCore(e.repoPath,e.fsPath,t,i,{encoding:n},o,s,r);return null!=o.state&&(eq.YJ.debug(r,`Cache add: '${s}'`),o.state.setDiff(s,{item:a})),a}async getDiffForFileCore(e,t,i,r,s,o,n,a){let[l,h]=(0,q.O)(t,e);try{let e=await this.git.diff(h,l,i,r,{...s,filters:["M"],linesOfContext:0,renames:!0,similarityThreshold:A.i.get("advanced.similarityThreshold")});return tI(e)}catch(e){if(null!=o.state){let t=e?.toString()??"";return eq.YJ.debug(a,`Cache replace (with empty promise): '${n}'`),o.state.setDiff(n,{item:is,errorMessage:t}),is}return}}async getDiffForFileContents(e,t,i){let r=(0,eM.b1)(),s=`diff:${(0,th.m)(i)}`,o=await this.container.documentTracker.getOrAdd(e);if(this.useCaching){if(null!=o.state){let e=o.state.getDiff(s);if(null!=e)return eq.YJ.debug(r,`Cache hit: ${s}`),e.item}eq.YJ.debug(r,`Cache miss: ${s}`),o.state??=new t4.u}let n=await ip(e),a=this.getDiffForFileContentsCore(e.repoPath,e.fsPath,t,i,{encoding:n},o,s,r);return null!=o.state&&(eq.YJ.debug(r,`Cache add: '${s}'`),o.state.setDiff(s,{item:a})),a}async getDiffForFileContentsCore(e,t,i,r,s,o,n,a){let[l,h]=(0,q.O)(t,e);try{let e=await this.git.diff__contents(h,l,i,r,{...s,filters:["M"],similarityThreshold:A.i.get("advanced.similarityThreshold")});return tI(e)}catch(e){if(null!=o.state){let t=e?.toString()??"";return eq.YJ.debug(a,`Cache replace (with empty promise): '${n}'`),o.state.setDiff(n,{item:is,errorMessage:t}),is}return}}async getDiffForLine(e,t,i,r){try{let s=await this.getDiffForFile(e,i,r);if(null==s)return;let o=t+1,n=s.hunks.find(e=>e.current.position.start<=o&&e.current.position.end>=o);if(null==n)return;let a=n.lines.get(o);if(null==a)return;return{hunk:n,line:a}}catch(e){return}}async getDiffStatus(e,t,i,r){try{let s=await this.git.diff__name_status(e,t,i,{similarityThreshold:A.i.get("advanced.similarityThreshold")??void 0,...r});if(!s)return;let o=tT(s,e);return null==o||0===o.length?void 0:o}catch(e){return}}async getFileStatusForCommit(e,t,i){if(i===Q.E1||(0,F.bP)(i))return;let[r,s]=(0,q.O)(t,e),o=await this.git.show__name_status(s,r,i);if(!o)return;let n=tT(o,e);if(null!=n&&0!==n.length)return n[0]}async getFirstCommitSha(e){let t=await this.git.rev_list(e,"HEAD",{maxParents:0});return t?.[0]}async getGitDir(e){let t;let i=this._repoInfoCache.get(e);if(i?.gitDir!=null)return i.gitDir;let r=await this.git.rev_parse__git_dir(e);return t=null!=r?{uri:C.Uri.file(r.path),commonUri:null!=r.commonPath?C.Uri.file(r.commonPath):void 0}:{uri:this.getAbsoluteUri(".git",e)},this._repoInfoCache.set(e,{...i,gitDir:t}),t}async getLastFetchedTimestamp(e){try{let t=await this.getGitDir(e),i=await C.workspace.fs.stat(C.Uri.joinPath(t.uri,"FETCH_HEAD"));if(i.size>0)return i.mtime}catch{}}async getLog(e,t){let i=(0,eM.b1)();try{let i;let r=t?.limit??A.i.get("advanced.maxListItems")??0,s=A.i.get("advanced.similarityThreshold"),o=[`--format=${t?.all?ep:eg}`,`-M${null==s?"":`${s}%`}`];t?.status!==null&&o.push(`--${t?.status??"name-status"}`,"--full-history"),t?.all&&o.push("--all");let n=t?.merges??!0;n?(r<=2&&o.push("-m"),o.push("first-parent"===n?"--first-parent":"--no-min-parents")):o.push("--no-merges");let a=t?.ordering??A.i.get("advanced.commitOrdering");a&&o.push(`--${a}-order`),t?.authors?.length&&o.push("--use-mailmap",...t.authors.map(e=>`--author=^${e.name} <${e.email}>$`)),t?.since&&(i=!0,o.push(`--since="${t.since}"`)),t?.until&&(i=!0,o.push(`--until="${t.until}"`)),t?.extraArgs?.length&&(t.extraArgs.some(e=>e.startsWith("-n")||e.startsWith("--until=")||e.startsWith("--since="))&&(i=!0),o.push(...t.extraArgs)),r&&(i=void 0,o.push(`-n${r+1}`));let l=await this.git.log(e,{configs:e5,ref:t?.ref,stdin:t?.stdin},...o),h=ef(this.container,l,eh.Log,e,void 0,t?.ref,await this.getCurrentUser(e),r,!1,void 0,void 0,i);if(null!=h&&(h.query=i=>this.getLog(e,{...t,limit:i}),h.hasMore)){let e;if(null!=t){let i;({extraArgs:i,...e}=t)}h.more=this.getLogMoreFn(h,e)}return h}catch(e){eq.YJ.error(e,i);return}}async getLogRefsOnly(e,t){let i=(0,eM.b1)(),r=t?.limit??A.i.get("advanced.maxListItems")??0;try{let i=eu("%H"),s=[...i.arguments,"--full-history"],o=t?.ordering??A.i.get("advanced.commitOrdering");o&&s.push(`--${o}-order`),r&&s.push(`-n${r+1}`),t?.since&&s.push(`--since="${t.since}"`);let n=t?.merges??!0;n?s.push("first-parent"===n?"--first-parent":"--no-min-parents"):s.push("--no-merges"),t?.authors?.length&&(s.includes("--use-mailmap")||s.push("--use-mailmap"),s.push(...t.authors.map(e=>`--author=^${e.name} <${e.email}>$`)));let a=await this.git.log(e,{ref:t?.ref},...s);return new Set(i.parse(a))}catch(e){eq.YJ.error(e,i);return}}getLogMoreFn(e,t){return async i=>{let r,s;let o=null!=i&&"object"==typeof i?i.until:void 0,n="number"==typeof i?i:void 0;if(o&&(0,eN.K6)(e.commits.values(),e=>e.ref===o))return e;if(n=n??A.i.get("advanced.maxSearchItems")??0,(0,F.U1)(e.sha)){let i=await this.getLog(e.repoPath,{...t,limit:0===n?0:(t?.limit??0)+n});return null==i?{...e,hasMore:!1,more:void 0}:i}let a=(0,eN.GS)(e.commits.values()),l=a?.ref;if(t?.all){let e=a?.committer.date;r=null!=e?Math.ceil(e.getTime()/1e3)+1:void 0}let h=null==o?n:0;for(;;){let i=await this.getLog(e.repoPath,{...t,limit:h,...r?{until:r,extraArgs:["--boundary"]}:{ref:null==o?`${l}^`:`${o}^..${l}^`}});if(null==i)return{...e,hasMore:!1,more:void 0};let a=e.commits.size,c=new Map([...e.commits,...i.commits]);if(a===c.size&&0!==h){if(s===i.commits.size)return{...e,hasMore:!1,more:void 0};s=i.commits.size,h*=2;continue}null!=r&&null!=l&&i.commits.has(l);let u={repoPath:e.repoPath,commits:c,sha:e.sha,range:void 0,count:c.size,limit:null==o?(e.limit??0)+n:void 0,hasMore:null!=o||i.hasMore,startingCursor:eN.GS(e.commits)?.[0],endingCursor:i.endingCursor,pagedCommits:()=>{for(let t of e.commits.keys())i.commits.delete(t);return i.commits},query:i=>this.getLog(e.repoPath,{...t,limit:i})};return u.hasMore&&(u.more=this.getLogMoreFn(u,t)),u}}}async getLogForFile(e,t,i){if(null==e)return;let r=(0,eM.b1)(),s=this.getRelativePath(t,e);if(null!=e&&e===s)throw Error(`File name cannot match the repository path; path=${s}`);let o={reverse:!1,...i};null==o.renames&&(o.renames=A.i.get("advanced.fileHistoryFollowsRenames")),null==o.merges&&(o.merges=A.i.get("advanced.fileHistoryShowMergeCommits"));let n="log";null!=o.ref&&(n+=`:${o.ref}`),null==o.all&&(o.all=A.i.get("advanced.fileHistoryShowAllBranches")),o.all&&(n+=":all"),o.limit=o.limit??A.i.get("advanced.maxListItems")??0,o.limit&&(n+=`:n${o.limit}`),o.merges&&(n+=":merges"),o.renames&&(n+=":follow"),o.reverse&&(n+=":reverse"),o.since&&(n+=`:since=${o.since}`),o.skip&&(n+=`:skip${o.skip}`);let a=await this.container.documentTracker.getOrAdd(tm.wv.fromFile(s,e,o.ref));if(!o.force&&this.useCaching&&null==o.range){if(null!=a.state){let i=a.state.getLog(n);if(null!=i)return eq.YJ.debug(r,`Cache hit: '${n}'`),i.item;if(null!=o.ref||null!=o.limit&&0!==o.limit){let i=a.state.getLog(`log${o.renames?":follow":""}${o.reverse?":reverse":""}`);if(null!=i){if(null==o.ref)return eq.YJ.debug(r,`Cache hit: ~'${n}'`),i.item;eq.YJ.debug(r,`Cache ?: '${n}'`);let s=await i.item;if(null!=s&&!s.hasMore&&s.commits.has(o.ref)){eq.YJ.debug(r,`Cache hit: '${n}'`);let i=!0,a=0,l=new Map((0,eN.Gs)(s.commits.entries(),([e,t])=>{if(i){if(e!==o?.ref)return;i=!1}if(a++,o?.limit==null||!(a>o.limit))return[e,t]})),h={...o};return{...s,limit:h.limit,count:l.size,commits:l,query:i=>this.getLogForFile(e,t,{...h,limit:i})}}}}}eq.YJ.debug(r,`Cache miss: '${n}'`),a.state??=new t4.u}let l=this.getLogForFileCore(e,s,o,a,n,r);return null!=a.state&&null==o.range&&(eq.YJ.debug(r,`Cache add: '${n}'`),a.state.setLog(n,{item:l})),l}async getLogForFileCore(e,t,{ref:i,range:r,...s},o,n,a){let l=await this.isTrackedWithDetails(t,e,i);if(null==l)return eq.YJ.log(a,`Skipping log; '${t}' is not tracked`),is;let[h,c]=l;try{null!=r&&r.start.line>r.end.line&&(r=new C.Range(r.end,r.start));let o=await this.git.log__file(c,h,i,{ordering:A.i.get("advanced.commitOrdering"),...s,startLine:null==r?void 0:r.start.line+1,endLine:null==r?void 0:r.end.line+1});if(!o&&null==i){let e=await this.getStatusForFile(c,h);e?.originalPath!=null&&(o=await this.git.log__file(c,e.originalPath,i,{ordering:A.i.get("advanced.commitOrdering"),...s,startLine:null==r?void 0:r.start.line+1,endLine:null==r?void 0:r.end.line+1}))}let n=ef(this.container,o,(0,q.i)(h)?eh.Log:eh.LogFile,c,h,i,await this.getCurrentUser(c),s.limit,s.reverse??!1,r);if(null!=n){let o={...s,ref:i,range:r};n.query=i=>this.getLogForFile(e,t,{...o,limit:i}),n.hasMore&&(n.more=this.getLogForFileMoreFn(n,t,o))}return n}catch(e){if(null!=o.state&&null==r&&!s.reverse){let t=e?.toString()??"";return eq.YJ.debug(a,`Cache replace (with empty promise): '${n}'`),o.state.setLog(n,{item:is,errorMessage:t}),is}return}}getLogForFileMoreFn(e,t,i){return async r=>{let s;let o=null!=r&&"object"==typeof r?r.until:void 0,n="number"==typeof r?r:void 0;if(o&&(0,eN.K6)(e.commits.values(),e=>e.ref===o))return e;n=n??A.i.get("advanced.maxSearchItems")??0;let a=(0,eN.GS)(e.commits.values());if(null!=a&&(s=a.ref,null!=a.file)){let e=a.file.originalPath??a.file.path;e!==t&&(t=e)}let l=await this.getLogForFile(e.repoPath,t,{...i,limit:null==o?n:0,ref:i.all?void 0:null==o?`${s}^`:`${o}^..${s}^`,skip:i.all?e.count:void 0});if(null==l)return{...e,hasMore:!1,more:void 0};let h=new Map([...e.commits,...l.commits]),c={repoPath:e.repoPath,commits:h,sha:e.sha,range:e.range,count:h.size,limit:null==o?(e.limit??0)+n:void 0,hasMore:null!=o||l.hasMore,query:r=>this.getLogForFile(e.repoPath,t,{...i,limit:r})};if(i.renames){let e=(0,eN.iw)(l.commits.values(),e=>!!e.file?.originalPath&&e.file?.originalPath!==t);t=e?.file?.originalPath??t}return c.hasMore&&(c.more=this.getLogForFileMoreFn(c,t,i)),c}}async getMergeBase(e,t,i,r){let s=(0,eM.b1)();try{let s=await this.git.merge_base(e,t,i,r);if(null==s)return;return s.split("\n")[0].trim()||void 0}catch(e){eq.YJ.error(e,s);return}}async getMergeStatus(e){let t=this.useCaching?this._mergeStatusCache.get(e):void 0;return null==t&&(t=(async function(){let t=await this.git.rev_parse__verify(e,"MERGE_HEAD");if(null==t)return;let[i,r,s]=await Promise.allSettled([this.getBranch(e),this.getMergeBase(e,"MERGE_HEAD","HEAD"),this.getCommitBranches(e,"MERGE_HEAD",void 0,{all:!0,mode:"pointsAt"})]),o=(0,t0.Cv)(i),n=(0,t0.Cv)(r),a=(0,t0.Cv)(s);return{type:"merge",repoPath:e,mergeBase:n,HEAD:(0,F.op)(t,e,{refType:"revision"}),current:(0,F.uE)(o),incoming:a?.length===1?(0,F.op)(a[0],e,{refType:"branch",name:a[0],remote:!1}):void 0}}).call(this),this.useCaching&&this._mergeStatusCache.set(e,t)),t}async getRebaseStatus(e){let t=this.useCaching?this._rebaseStatusCache.get(e):void 0;return null==t&&(t=(async function(){let t,i;let r=await this.getGitDir(e),[s,o]=await Promise.allSettled([this.git.readDotGitFile(r,["rebase-merge","head-name"]),this.git.readDotGitFile(r,["rebase-apply","head-name"])]),n=(0,t0.Cv)(s),a=(0,t0.Cv)(o),l=a??n;if(null==l)return;let h=null!=a?"rebase-apply":"rebase-merge",[c,u,d,p,g,m]=await Promise.allSettled([this.git.rev_parse__verify(e,"REBASE_HEAD"),this.git.readDotGitFile(r,[h,"orig-head"]),this.git.readDotGitFile(r,[h,"onto"]),this.git.readDotGitFile(r,[h,"msgnum"],{numeric:!0}),this.git.readDotGitFile(r,[h,"end"],{numeric:!0}),this.git.readDotGitFile(r,[h,"message"],{throw:!0}).catch(()=>this.git.readDotGitFile(r,[h,"message-squashed"]))]),f=(0,t0.Cv)(u),w=(0,t0.Cv)(d);if(null==f||null==w)return;let v=(0,t0.Cv)(c);t=null!=v?await this.getMergeBase(e,v,"HEAD"):await this.getMergeBase(e,w,f),l.startsWith("refs/heads/")&&(l=l.substr(11).trim());let[y,b]=await Promise.allSettled([this.getCommitBranches(e,w,void 0,{all:!0,mode:"pointsAt"}),this.getCommitTags(e,w,{mode:"pointsAt"})]),C=(0,t0.Cv)(y),A=(0,t0.Cv)(b);if(null!=C){for(let t of C)if(!t.startsWith("(no branch, rebasing")){i=(0,F.op)(t,e,{refType:"branch",name:t,remote:!1});break}}if(null==i&&null!=A){for(let t of A)if(!t.startsWith("(no branch, rebasing")){i=(0,F.op)(t,e,{refType:"tag",name:t});break}}return{type:"rebase",repoPath:e,mergeBase:t,HEAD:(0,F.op)(v??f,e,{refType:"revision"}),onto:(0,F.op)(w,e,{refType:"revision"}),current:i,incoming:(0,F.op)(l,e,{refType:"branch",name:l,remote:!1}),steps:{current:{number:(0,t0.Cv)(p)??0,commit:null!=v?(0,F.op)(v,e,{refType:"revision",message:(0,t0.Cv)(m)}):void 0},total:(0,t0.Cv)(g)??0}}}).call(this),this.useCaching&&this._rebaseStatusCache.set(e,t)),t}async getNextComparisonUris(e,t,i,r=0){if(!i)return;let s=this.getRelativePath(t,e);if((0,F.jN)(i))return{current:tm.wv.fromFile(s,e,i),next:tm.wv.fromFile(s,e,void 0)};let o=await this.getNextUri(e,t,i,r);if(null==o){let r=await this.getStatusForFile(e,t);return null!=r&&null!=r.indexStatus?{current:tm.wv.fromFile(s,e,i),next:tm.wv.fromFile(s,e,Q.QD)}:{current:tm.wv.fromFile(s,e,i),next:tm.wv.fromFile(s,e,void 0)}}return{current:0===r?tm.wv.fromFile(s,e,i):await this.getNextUri(e,t,i,r-1),next:o}}async getNextUri(e,t,i,r=0){let s;if(!i||(0,F.jN)(i))return;i===Q.E1&&(i=void 0,s=["A"]);let o=this.getRelativePath(t,e),n=await this.git.log__file(e,o,i,{argsOrFormat:em,fileMode:"simple",filters:s,limit:r+1,ordering:A.i.get("advanced.commitOrdering"),reverse:!0});if(null==n||0===n.length)return;let[a,l,h]=ew(n,r);if("D"===h){if(null==(n=await this.git.log__file(e,".",a,{argsOrFormat:em,fileMode:"simple",filters:["R","C"],limit:1,ordering:A.i.get("advanced.commitOrdering")}))||0===n.length)return tm.wv.fromFile(l??o,e,a);let[t,i]=ev(n,l??o);return tm.wv.fromFile(i??l??o,e,t??a??Q.E1)}return tm.wv.fromFile(l??o,e,a)}async getOldestUnpushedRefForFile(e,t){let[i,r]=(0,q.O)(t,e),s=await this.git.log__file(r,i,"@{u}..",{argsOrFormat:["-z","--format=%H"],fileMode:"none",ordering:A.i.get("advanced.commitOrdering"),renames:!0});if(!s)return;let o=s.lastIndexOf("\0",s.length-2);return -1===o?void 0:s.slice(o+1,s.length-2)}async getPreviousComparisonUris(e,t,i,r=0){if(i===Q.E1)return;let s=this.getRelativePath(t,e);if(i){if((0,F.jN)(i)){let o=0===r?tm.wv.fromFile(s,e,i):await this.getPreviousUri(e,t,void 0,r-1);if(null==o||o.sha===Q.E1)return;return{current:o,previous:await this.getPreviousUri(e,t,void 0,r)}}}else{let o=await this.getStatusForFile(e,t);if(null!=o){if(null!=o.indexStatus)return(null==o.workingTreeStatus&&r++,0===r)?{current:tm.wv.fromFile(s,e,void 0),previous:tm.wv.fromFile(s,e,Q.QD)}:{current:tm.wv.fromFile(s,e,Q.QD),previous:await this.getPreviousUri(e,t,i,r-1)};if(null!=o.workingTreeStatus&&0===r)return{current:tm.wv.fromFile(s,e,void 0),previous:await this.getPreviousUri(e,t,void 0,r)}}else 0===r&&r++}let o=0===r?tm.wv.fromFile(s,e,i):await this.getPreviousUri(e,t,i,r-1);if(null!=o&&o.sha!==Q.E1)return{current:o,previous:await this.getPreviousUri(e,t,i,r)}}async getPreviousComparisonUrisForLine(e,t,i,r,s=0){let o;if(r===Q.E1)return;let n=this.getRelativePath(t,e);if(r){if((0,F.jN)(r)){let o=0===s?tm.wv.fromFile(n,e,r):await this.getPreviousUri(e,t,void 0,s-1,i);if(o.sha===Q.E1)return;return{current:o,previous:await this.getPreviousUri(e,t,void 0,s,i),line:i}}let a=new tm.wv(t,{repoPath:e,sha:r}),l=await this.getBlameForLine(a,i);if(null==l)return;r=l.commit.sha,n=l.commit.file?.path??l.commit.file?.originalPath??n,t=this.getAbsoluteUri(n,e),i=l.line.originalLine-1,0===s&&l.commit.file?.previousSha&&(o=tm.wv.fromFile(n,e,l.commit.file.previousSha))}else{let a=new tm.wv(t,e),l=await C.workspace.openTextDocument(t),h=l.isDirty?await this.getBlameForLineContents(a,i,l.getText()):await this.getBlameForLine(a,i);if(null==h)return;if(h.commit.isUncommitted){let r=await this.getStatusForFile(e,t);return null!=r&&null!=r.indexStatus?{current:tm.wv.fromFile(n,e,void 0),previous:tm.wv.fromFile(n,e,Q.QD),line:i}:{current:tm.wv.fromFile(n,e,void 0),previous:await this.getPreviousUri(e,t,void 0,s,i),line:i}}r=h.commit.sha,n=h.commit.file?.path??h.commit.file?.originalPath??n,t=this.getAbsoluteUri(n,e),i=h.line.originalLine-1,0===s&&h.commit.file?.previousSha&&(o=tm.wv.fromFile(n,e,h.commit.file.previousSha))}let a=0===s?tm.wv.fromFile(n,e,r):await this.getPreviousUri(e,t,r,s-1,i);if(a.sha!==Q.E1)return{current:a,previous:o??await this.getPreviousUri(e,t,r,s,i),line:i}}async getPreviousUri(e,t,i,r=0,s){let o;if(i===Q.E1)return;let n=(0,eM.b1)();i===Q.Oy&&(i=void 0);let a=this.getRelativePath(t,e);try{o=await this.git.log__file(e,a,i,{argsOrFormat:em,fileMode:"simple",limit:r+2,ordering:A.i.get("advanced.commitOrdering"),startLine:null!=s?s+1:void 0})}catch(s){let r=s?.toString()??"";if((null==i||(0,F.jN)(i))&&ti.invalidLineCount.test(r)){if(null==i){let i=await this.getStatusForFile(e,t);if(i?.indexStatus!=null)return tm.wv.fromFile(a,e,Q.QD)}return i=await this.git.log__file_recent(e,a,{ordering:A.i.get("advanced.commitOrdering")}),tm.wv.fromFile(a,e,i??Q.E1)}throw eq.YJ.error(s,n),s}if(null==o||0===o.length)return;let[l,h]=ew(o,r,i);if(null==i||i!==l)return tm.wv.fromFile(h??a,e,l??Q.E1)}async getIncomingActivity(e,t){let i=(0,eM.b1)(),r=t?.limit??A.i.get("advanced.maxListItems")??0;try{let i=await this.git.reflog(e,{ordering:A.i.get("advanced.commitOrdering"),...t,limit:100*r});if(null==i)return;let s=function(e,t,i,r,s){var o=[];try{let n,a,l,h,c,u,d,p,g,m,f,w;let v=eS(o,(0,O.i)(`Git.parseRefLog(${t})`,{log:!1,logLevel:"debug"}));if(!e)return;let y=[],b=0,C=0;for(;w=eD.exec(e),null!=w;){if([,n,a,l,h,c,u]=w,C++,void 0!==f){if(n===f.sha&&(l!==m||!e$.test(f.selector)||e$.test(a)))continue;if(n!==f.sha&&(null!=d&&p===m&&g==f.sha&&e$.test(f.selector)?f.update(n,d):f.update(n),y.push(f),f=void 0,m=void 0,b++,0!==r&&b>=r))break}if("HEAD"===h){d=a,p=l,g=n;continue}i.includes(h)&&(f=new GitReflogRecord(t,` ${n}`.substr(1),` ${a}`.substr(1),new Date(l),` ${h}`.substr(1),null==c||0===c.length?void 0:c.substr(1),null==u||0===u.length?void 0:u.substr(1)),m=l)}return eD.lastIndex=0,v?.stop({suffix:` parsed ${y.length} records`}),{repoPath:t,records:y,count:b,total:C,limit:r,hasMore:0!==r&&b>=r||0!==s&&C>=s}}catch(e){var n=e,a=!0}finally{eR(o,n,a)}}(i,e,id,r,100*r);return s?.hasMore&&(s.more=this.getReflogMoreFn(s,t)),s}catch(e){eq.YJ.error(e,i);return}}getReflogMoreFn(e,t){return async i=>{i=i??A.i.get("advanced.maxSearchItems")??0;let r=await this.getIncomingActivity(e.repoPath,{...t,limit:i,skip:e.total});if(null==r)return{...e,hasMore:!1,more:void 0};let s={repoPath:e.repoPath,records:[...e.records,...r.records],count:e.count+r.count,total:e.total+r.total,limit:(e.limit??0)+i,hasMore:r.hasMore};return s.hasMore&&(s.more=this.getReflogMoreFn(s,t)),s}}async getRemotes(e,t){if(null==e)return[];let i=(0,eM.b1)(),r=this.useCaching?this._remotesCache.get(e):void 0;null==r&&(r=(async function(){let t=(0,tH.A)(A.i.get("remotes",this.container.git.getRepository(e)?.folder?.uri??null));try{let i=await this.git.remote(e);return(0,eF.wv)(this.container,i,e,(0,tH.k)(this.container,t))}catch(t){return this._remotesCache.delete(e),eq.YJ.error(t,i),[]}}).call(this),this.useCaching&&this._remotesCache.set(e,r));let s=await r;return t?.sort&&(0,tw.O)(s),s}getRevisionContent(e,t,i){let[r,s]=(0,q.O)(t,e);return this.git.show(s,r,i,{encoding:"buffer"})}async getStash(e){if(null==e)return;let t=this.useCaching?this._stashesCache.get(e):void 0;if(void 0===t){let i=function(e){let t="%x00",i=[];for(let r in e)i.push(r),t+=`%x00${e[r]}`;return{arguments:["-z",`--format=${t}`,"--name-status"],parse:function*(e){let t,r,s;for(let o of(0,L.Nk)(e,"\0\0\0")){let e;t={},r=[],(s=(0,L.Nk)(o,"\0")).next(),s.next();let n=0;for(;!(e=s.next()).done;)if(n<i.length)t[i[n++]]=e.value;else{let t={status:e.value.trim(),path:void 0};e=s.next(),t.path=e.value,(t.status.startsWith("R")||t.status.startsWith("C"))&&(e=s.next(),t.originalPath=e.value),r.push(t)}t.files=r,yield t}}}}({sha:"%H",date:"%at",committedDate:"%ct",parents:"%P",stashName:"%gd",summary:"%gs"}),r=await this.git.stash__list(e,{args:i.arguments,similarityThreshold:A.i.get("advanced.similarityThreshold")}),s=new Map;for(let t of i.parse(r)){let i,r,o;let n=iu.exec(t.summary);n?.groups!=null?(i=n.groups.onref,o=0===(r=n.groups.summary.trim()).length?"WIP":n.groups.wip?`WIP: ${r}`:r):o=t.summary.trim(),s.set(t.sha,new M.Ck(this.container,e,t.sha,new M.Sg("You",void 0,new Date(1e3*t.date)),new M.Sg("You",void 0,new Date(1e3*t.committedDate)),o.split("\n",1)[0]??"",t.parents.split(" "),o,t.files?.map(t=>new G.Gm(e,t.path,t.status,t.originalPath))??[],void 0,[],void 0,t.stashName,i))}t={repoPath:e,commits:s},this.useCaching&&this._stashesCache.set(e,t??null)}return t??void 0}async getStatusForFile(e,t){let i=await this.getStatusForRepo(e);if(!i?.files.length)return;let[r]=(0,q.O)(t,e);return i.files.find(e=>e.path===r)}async getStatusForFiles(e,t){let[i]=(0,q.O)(t,e);if(!i.endsWith("/*"))return this.getStatusForFile(e,t).then(e=>null!=e?[e]:void 0);i=i.substring(0,i.length-1);let r=await this.getStatusForRepo(e);if(r?.files.length)return r.files.filter(e=>e.path.startsWith(i))}async getStatusForRepo(e){if(null==e)return;let t=await this.git.isAtLeastVersion("2.11")?2:1,i=function(e,t,i){var r=[];try{let s=tO(r,(0,O.i)(`Git.parseStatus(${t}, v=${i})`,{log:!1,logLevel:"debug"}));if(!e)return;let o=e.split("\n").filter(e=>!!e);if(0===o.length)return;let n=i<2?function(e,t){let i,r;let s=[],o={ahead:0,behind:0},n=-1;for(;++n<e.length;){let a=e[n];if(a.startsWith("##")){let e=a.split(" ");if([i,r]=e[1].split("..."),e.length>2){let t=e.slice(2).join(" "),i=tE.exec(t);o.ahead=null==i?0:Number(i[1])||0;let r=tB.exec(t);o.behind=null==r?0:Number(r[1])||0}}else{let e=a.substring(0,2),i=a.substring(3);if(e.startsWith("R")||e.startsWith("C")){let[r,o]=i.replace(/"/g,"").split("->");s.push(tU(t,e,o.trim(),r.trim()))}else s.push(tU(t,e,i))}}return new tb.kL((0,q.ay)(t),i??"","",s,o,r)}(o,t):function(e,t){let i,r,s;let o=[],n={ahead:0,behind:0},a=-1;for(;++a<e.length;){let l=e[a];if(l.startsWith("#")){let e=l.split(" ");switch(e[1]){case"branch.oid":r=e[2];break;case"branch.head":i=e[2];break;case"branch.upstream":s=e[2];break;case"branch.ab":n.ahead=Number(e[2].substring(1)),n.behind=Number(e[3].substring(1))}}else{let e=l.split(" ");switch(e[0][0]){case"1":o.push(tU(t,e[1],e.slice(8).join(" ")));break;case"2":{let i=e.slice(9).join(" ").split("	");o.push(tU(t,e[1],i[0],i[1]));break}case"u":o.push(tU(t,e[1],e.slice(10).join(" ")));break;case"?":o.push(tU(t,"??",e.slice(1).join(" ")))}}}return new tb.kL((0,q.ay)(t),i??"",r??"",o,n,s)}(o,t);return s?.stop({suffix:` parsed ${n.files.length} files`}),n}catch(e){var s=e,o=!0}finally{tx(r,s,o)}}(await this.git.status(e,t,{similarityThreshold:A.i.get("advanced.similarityThreshold")??void 0}),e,t);if(i?.detached){let t=await this.getRebaseStatus(e);if(null!=t)return new tb.kL(e,t.incoming.name,i.sha,i.files,i.state,i.upstream,!0)}return i}async getTags(e,t){if(null==e)return io;let i=this.useCaching?this._tagsCache.get(e):void 0;null==i&&(i=(async function(){try{let t=await this.git.tag(e);return{values:function(e,t){var i=[];try{let r,s,o,n,a,l,h;let c=eE(i,(0,O.i)(`Git.parseTags(${t})`,{log:!1,logLevel:"debug"})),u=[];if(!e)return u;for(;h=eU.exec(e),null!=h;)[,r,s,o,n,a,l]=h,r=r.substr(10),u.push(new eO.WU(t,r,` ${s||o}`.substr(1),` ${l}`.substr(1),n?new Date(n):void 0,null==a||0===a.length?void 0:new Date(a)));return c?.stop({suffix:` parsed ${u.length} tags`}),u}catch(e){var r=e,s=!0}finally{eB(i,r,s)}}(t,e)}}catch(t){return this._tagsCache.delete(e),io}}).call(this),this.useCaching&&this._tagsCache.set(e,i));let r=await i;return t?.filter!=null&&(r={...r,values:r.values.filter(t.filter)}),t?.sort&&(0,eO.sD)(r.values,"boolean"==typeof t.sort?void 0:t.sort),r}async getTreeEntryForRevision(e,t,i){if(null==e||!t)return;let[r,s]=(0,q.O)(t,e);if((0,F.jN)(i)){let[t]=function(e){var t=[];try{let i,r,s,o,n;let a=tN(t,(0,O.i)("Git.parseLsFiles",{log:!1,logLevel:"debug"})),l=[];if(!e)return l;for(;n=tM.exec(e),null!=n;)[,r,s,o,i]=n,l.push({mode:null==r||0===r.length?"":` ${r}`.substr(1),oid:null==s||0===s.length?"":` ${s}`.substr(1),path:null==i||0===i.length?"":` ${i}`.substr(1),stage:parseInt(o,10)});return a?.stop({suffix:` parsed ${l.length} files`}),l}catch(e){var i=e,r=!0}finally{tq(t,i,r)}}(await this.git.ls_files(s,r,{ref:i}));if(null==t)return;let o=await this.git.cat_file__size(e,t.oid);return{ref:i,oid:t.oid,path:r,size:o,type:"blob"}}return tQ(await this.git.ls_tree(s,i,r),i)[0]}async getTreeForRevision(e,t){return null==e?[]:tQ(await this.git.ls_tree(e,t),t)}async hasBranchOrTag(e,t){let[{values:i},{values:r}]=await Promise.all([this.getBranches(e,{filter:t?.filter?.branches,sort:!1}),this.getTags(e,{filter:t?.filter?.tags,sort:!1})]);return 0!==i.length||0!==r.length}async hasCommitBeenPushed(e,t){return null!=e&&this.git.merge_base__is_ancestor(e,t,"@{u}")}hasUnsafeRepositories(){return 0!==this.unsafePaths.size}isTrackable(e){return this.supportedSchemes.has(e.scheme)}async isTracked(e){return await this.isTrackedWithDetails(e)!=null}async isTrackedWithDetails(e,t,i){let r,s;if("string"==typeof e){if(i===Q.E1)return;s=this.container.git.getRepository(C.Uri.file(e)),t||=s?.path,[r,t]=(0,q.O)(e,t)}else{if(!this.isTrackable(e)||(0,tm.my)(e)&&(i=e.sha)===Q.E1)return;s=this.container.git.getRepository(e),t=t||s?.path,[r,t]=(0,q.O)(e,t)}let o=t?`${t}/${r}`:r,n=o;n=`${i??""}:${n.startsWith("/")?n:`/${n}`}`;let a=this._trackedPaths.get(n);return null!=a||(a=this.isTrackedCore(o,r,t??"",i,s),this._trackedPaths.set(n,a),a=await a,this._trackedPaths.set(n,a)),a}async isTrackedCore(e,t,i,r,s){if(r===Q.E1)return;let o=(0,eM.b1)();try{for(;;){i||([t,i]=(0,q.O)(e,"",!0));let o=!!await this.git.ls_files(i,t);if(o)return[t,i];if(i){let[i,r]=(0,q.O)(e,"",!0);if(i!==t&&(o=!!await this.git.ls_files(r,i))){if(s=await this.container.git.getOrOpenRepository(C.Uri.file(e),{detectNested:!0}),null!=s)return(0,q.O)(e,s.path);return[i,r]}}if(o||!r||(0,F.bP)(r)||(o=!!await this.git.ls_files(i,t,{ref:r}))||(o=!!await this.git.ls_files(i,t,{ref:`${r}^`})),!o){if(null!=s){let r=t.indexOf("/");if(r<0||r===t.length-1)return;let o=await this.container.git.getOrOpenRepository(C.Uri.file(e),{detectNested:!0});if(null!=o&&o!==s){[t,i]=(0,q.O)(e,s.path),s=void 0;continue}}return}return[t,i]}}catch(e){eq.YJ.error(e,o);return}}async getDiffTool(e){return await this.git.config__get("diff.guitool",e,{local:!0})??this.git.config__get("diff.tool",e,{local:!0})}async openDiffTool(e,t,i){let r=(0,eM.b1)(),[s,o]=(0,q.O)(t,e);try{let e=i?.tool;if(!e){let t=(0,eM.b1)();if(e=A.i.get("advanced.externalDiffTool")||await this.getDiffTool(o),null==e)throw Error("No diff tool found");eq.YJ.log(t,`Using tool=${e}`)}await this.git.difftool(o,s,e,i)}catch(t){let e=t?.toString()??"";if("No diff tool found"===e||/Unknown .+? tool/.test(e)){let e="View Git Docs";await C.window.showWarningMessage("Unable to open changes because the specified diff tool cannot be found or no Git diff tool is configured",e)===e&&C.env.openExternal(C.Uri.parse("https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool"));return}eq.YJ.error(t,r),(0,tJ.qC)("Unable to open compare")}}async openDirectoryCompare(e,t,i,r){let s=(0,eM.b1)();try{if(!r){let t=(0,eM.b1)();if(r=A.i.get("advanced.externalDirectoryDiffTool")||await this.getDiffTool(e),null==r)throw Error("No diff tool found");eq.YJ.log(t,`Using tool=${r}`)}await this.git.difftool__dir_diff(e,r,t,i)}catch(t){let e=t?.toString()??"";if("No diff tool found"===e||/Unknown .+? tool/.test(e)){let e="View Git Docs";await C.window.showWarningMessage("Unable to open directory compare because the specified diff tool cannot be found or no Git diff tool is configured",e)===e&&C.env.openExternal(C.Uri.parse("https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool"));return}eq.YJ.error(t,s),(0,tJ.qC)("Unable to open directory compare")}}async resolveReference(e,t,i,r){let s;if(!t||t===Q.E1||null==i&&(0,F.kp)(t)||null!=i&&(0,F.bP)(t))return t;if(null==i)return!r?.force&&!(0,F.ED)(t)||t.endsWith("^3")?t:await this.git.rev_parse__verify(e,t)??t;let o=this.getRelativePath(i,e);r?.timeout!=null&&(s=new tK._G(r.timeout));let[n,a]=await Promise.allSettled([this.git.rev_parse__verify(e,t,o),this.git.log__file_recent(e,o,{ref:t,cancellation:s?.token})]);if(null==(0,t0.Cv)(n))return Q.E1;let l=(0,t0.Cv)(a),h=s?.token.isCancellationRequested;return s?.dispose(),h?t:l??t}async richSearchCommits(e,t,i){t={matchAll:!1,matchCase:!1,matchRegex:!0,...t};try{let r,s;let o=i?.limit??A.i.get("advanced.maxSearchItems")??0,n=A.i.get("advanced.similarityThreshold"),a=await this.getCurrentUser(e),{args:l,files:h,shas:c}=(0,tj._2)(t,a);if(l.push(`-M${null==n?"":`${n}%`}`,"--"),0!==h.length&&l.push(...h),null==c){let t=await this.getStash(e);if(t?.commits.size){for(let e of(r=new Map,t.commits.values()))for(let t of(r.set(e.sha,e),e.parents))r.set(t,e);s=(0,eN.kn)((0,eN.kH)(t.commits.values(),e=>e.sha.substring(0,9)),"\n")}}let u=await this.git.log__search(e,c?.size?void 0:l,{ordering:A.i.get("advanced.commitOrdering"),...i,limit:o,shas:c,stdin:s}),d=ef(this.container,u,eh.Log,e,void 0,void 0,a,o,!1,void 0,r);if(null!=d){let r=function(e){return async s=>{s=s??A.i.get("advanced.maxSearchItems")??0;let o=await this.richSearchCommits(e.repoPath,t,{...i,limit:s,skip:e.count});if(null==o)return{...e,hasMore:!1,more:void 0};let n=new Map([...e.commits,...o.commits]),a={repoPath:e.repoPath,commits:n,sha:e.sha,range:e.range,count:n.size,limit:(e.limit??0)+s,hasMore:o.hasMore,query:r=>this.richSearchCommits(e.repoPath,t,{...i,limit:r})};return a.hasMore&&(a.more=r.call(this,a)),a}};d.query=r=>this.richSearchCommits(e,t,{...i,limit:r}),d.hasMore&&(d.more=r.call(this,d))}return d}catch(e){return}}async searchCommits(e,t,i){t={matchAll:!1,matchCase:!1,matchRegex:!0,...t};let r=(0,tj.E$)(t);try{let o;let n=(null==h&&(h=ec({sha:"%H",authorDate:"%at",committerDate:"%ct"})),h),a=t.query.includes("@me")?await this.getCurrentUser(e):void 0,{args:l,files:c,shas:u}=(0,tj._2)(t,a);if(u?.size){let s=await this.git.show2(e,{cancellation:i?.cancellation},"-s",...n.arguments,...u.values(),...l,"--"),o=0,a=new Map((0,eN.kH)(n.parse(s),e=>[e.sha,{i:o++,date:1e3*Number(i?.ordering==="author-date"?e.authorDate:e.committerDate)}]));return{repoPath:e,query:t,comparisonKey:r,results:a}}let d=i?.limit??A.i.get("advanced.maxSearchItems")??0,p=A.i.get("advanced.similarityThreshold"),g=await this.getStash(e);g?.commits.size&&(o=(0,eN.kn)((0,eN.kH)(g.commits.values(),e=>e.sha.substring(0,9)),"\n"));let m=[...n.arguments,`-M${null==p?"":`${p}%`}`,"--use-mailmap"],f=new Map,w=0;async function s(a,h){let u;if(i?.cancellation?.isCancellationRequested)return{repoPath:e,query:t,comparisonKey:r,results:f};try{u=await this.git.log(e,{cancellation:i?.cancellation,configs:["-C",e,...e7],errors:I.Throw,stdin:o},...m,...l,...i?.ordering?[`--${i.ordering}-order`]:ir,...a?[`-n${a+1}`]:ir,...h?.skip?[`--skip=${h.skip}`]:ir,"--",...c)}catch(s){if(s instanceof CancelledRunError||i?.cancellation?.isCancellationRequested)return{repoPath:e,query:t,comparisonKey:r,results:f};throw new T.mI(s)}if(i?.cancellation?.isCancellationRequested)return{repoPath:e,query:t,comparisonKey:r,results:f};let d=w;for(let e of n.parse(u)){if(f.has(e.sha)){a--;continue}f.set(e.sha,{i:w++,date:1e3*Number(i?.ordering==="author-date"?e.authorDate:e.committerDate)})}d=w-d;let p=eN.GS(f)?.[0];return h=null!=p?{sha:p,skip:w}:void 0,{repoPath:e,query:t,comparisonKey:r,results:f,paging:0!==a&&d>a?{limit:a,hasMore:!0}:void 0,more:async e=>s.call(this,e,h)}}return s.call(this,d)}catch(e){if(e instanceof T.mI)throw e;throw new T.mI(e)}}async runGitCommandViaTerminal(e,t,i,r){await this.git.runGitCommandViaTerminal(e,t,i,r)}validateBranchOrTagName(e,t){return this.git.check_ref_format(t,e)}async validatePatch(e,t){try{return await this.git.apply2(e,{stdin:t},"--check"),!0}catch(e){if(e instanceof Error&&e.message){if(e.message.includes("No valid patches in input"))return!1;return!0}return!1}}async validateReference(e,t){return null!=t&&0!==t.length&&(!!(t===Q.E1||(0,F.bP)(t))||await this.git.rev_parse__verify(e,t)!=null)}async stageFile(e,t){await this.git.add(e,"string"==typeof t?t:(0,q.O)(t,e)[0])}async stageDirectory(e,t){await this.git.add(e,"string"==typeof t?t:(0,q.O)(t,e)[0])}async unstageFile(e,t){await this.git.reset(e,"string"==typeof t?t:(0,q.O)(t,e)[0])}async unstageDirectory(e,t){await this.git.reset(e,"string"==typeof t?t:(0,q.O)(t,e)[0])}async stashApply(e,t,i){try{await this.git.stash__apply(e,t,!!i?.deleteAfter)}catch(e){if(e instanceof Error){let t=e.message??"";if(t.includes("Your local changes to the following files would be overwritten by merge"))throw new T.w7(T.ad.WorkingChanges,e);if(t.includes("Auto-merging")&&t.includes("CONFLICT")||e instanceof RunError&&(e.stdout.includes("Auto-merging")&&e.stdout.includes("CONFLICT")||e.stdout.includes("needs merge"))){C.window.showInformationMessage("Stash applied with conflicts");return}throw new T.w7(`Unable to apply stash \u2014 ${t.trim().replace(/\n+?/g,"; ")}`,e)}throw new T.w7(`Unable to apply stash \u2014 ${String(e)}`,e)}}async stashDelete(e,t,i){await this.git.stash__delete(e,t,i),this.container.events.fire("git:cache:reset",{repoPath:e,caches:["stashes"]})}async stashRename(e,t,i,r,s){await this.git.stash__rename(e,t,i,r,s),this.container.events.fire("git:cache:reset",{repoPath:e,caches:["stashes"]})}async stashSave(e,t,i,r){try{if(!i?.length){await this.git.stash__push(e,t,r);return}await this.ensureGitVersion("2.13.2","Stashing individual files"," Please retry by stashing everything or install a more recent version of Git and try again.");let s=i.map(t=>`./${(0,q.O)(t,e)[0]}`),o="2.30.0",n=await this.git.isAtLeastVersion(o);n&&r?.onlyStaged&&i.length&&(n=!1),!n&&(0,N.kr)(s)>3e4&&await this.ensureGitVersion(o,`Stashing so many files (${s.length}) at once`," Please retry by stashing fewer files or install a more recent version of Git and try again."),await this.git.stash__push(e,t,{...r,pathspecs:s,stdin:n})}finally{this.container.events.fire("git:cache:reset",{repoPath:e,caches:["stashes","status"]})}}async stashSaveSnapshot(e,t){let i=await this.git.stash__create(e);null!=i&&(await this.git.stash__store(e,i,t),this.container.events.fire("git:cache:reset",{repoPath:e,caches:["stashes"]}))}async createWorktree(e,t,i){let r=(0,eM.b1)();try{await this.git.worktree__add(e,t,i),i?.createBranch&&this.container.events.fire("git:cache:reset",{repoPath:e,caches:["branches"]})}catch(t){eq.YJ.error(t,r);let e=String(t);if(ti.alreadyCheckedOut.test(e))throw new T.Ep(T.A5.AlreadyCheckedOut,t);if(ti.alreadyExists.test(e))throw new T.Ep(T.A5.AlreadyExists,t);throw new T.Ep(void 0,t)}}async getWorktrees(e){return await this.ensureGitVersion("2.7.6","Displaying worktrees"," Please install a more recent version of Git and try again."),function(e,t){var i=[];try{let r,s,o,n,a,l,h;let c=tV(i,(0,O.i)(`Git.parseWorktrees(${t})`,{log:!1,logLevel:"debug"})),u=[];if(!e)return u;null!=t&&(t=(0,q.ay)(t));let d=!0;for(r of(0,L.Nk)(e)){if(s=r.indexOf(" "),-1===s?(o=r,n=""):(o=r.substring(0,s),n=r.substring(s+1)),0===o.length&&null!=h){u.push(new tG.Q(d,h.bare?"bare":h.detached?"detached":"branch",t,C.Uri.file(h.path),h.locked??!1,h.prunable??!1,h.sha,h.branch)),h=void 0,d=!1;continue}switch(null==h&&(h={}),o){case"worktree":h.path=n;break;case"bare":h.bare=!0;break;case"HEAD":h.sha=n;break;case"branch":h.branch=n.substr(11);break;case"detached":h.detached=!0;break;case"locked":[,a]=n.split(" ",2),h.locked=a?.trim()||!0;break;case"prunable":[,l]=n.split(" ",2),h.prunable=l?.trim()||!0}}return c?.stop({suffix:` parsed ${u.length} worktrees`}),u}catch(e){var r=e,s=!0}finally{tz(i,r,s)}}(await this.git.worktree__list(e),e)}async getWorktreesDefaultUri(e){let t=A.i.get("worktrees.defaultLocation");if(null==t)return;t.startsWith("~")&&(t=(0,q.En)((0,ta.homedir)(),t.slice(1)));let i=this.container.git.getRepository(e)?.folder;return t=(0,L.qy)(t,{userHome:(0,ta.homedir)(),workspaceFolder:i?.uri.fsPath,workspaceFolderBasename:i?.name}),this.getAbsoluteUri(t,e)}async deleteWorktree(e,t,i){let r=(0,eM.b1)();await this.ensureGitVersion("2.17.0","Deleting worktrees"," Please install a more recent version of Git and try again.");try{await this.git.worktree__remove(e,(0,q.ay)(t),i)}catch(t){eq.YJ.error(t,r);let e=String(t);if(ti.mainWorkingTree.test(e))throw new T.kz(T.as.MainWorkingTree,t);if(ti.uncommittedChanges.test(e))throw new T.kz(T.as.HasChanges,t);throw new T.kz(void 0,t)}}_scmGitApi;async getScmGitApi(){return this._scmGitApi??(this._scmGitApi=this.getScmGitApiCore())}async getScmGitApiCore(){try{let e=C.extensions.getExtension("vscode.git");if(null==e)return;let t=e.isActive?e.exports:await e.activate();return t?.getAPI(1)}catch{return}}getScmGitUri(e,t){let i=this.fromCanonicalMap.get(t),r=this.getAbsoluteUri(e,i??t);return C.Uri.from({scheme:_.cl.Git,path:r.path,query:JSON.stringify({path:r.fsPath,ref:"~"})})}async getOpenScmRepositories(){let e=(0,eM.b1)();try{let e=await this.getScmGitApi();return e?.repositories??[]}catch(t){return eq.YJ.error(t,e),[]}}async getScmRepository(e){let t=(0,eM.b1)();try{let t=await this.getScmGitApi();return t?.getRepository(C.Uri.file(e))??void 0}catch(e){eq.YJ.error(e,t);return}}async getOrOpenScmRepository(e){let t=(0,eM.b1)();try{let i=e instanceof C.Uri?e:C.Uri.file(e),r=await this.getScmGitApi();if(null==r)return;let s=r.getRepository(i);return(null==s||null!=s&&s.rootUri.toString()!==i.toString())&&(eq.YJ.debug(t,null==s?"• no existing repository found, opening repository...":`\u2022 existing, non-matching repository '${s.rootUri.toString(!0)}' found, opening repository...`),s=await r.openRepository?.(i)),s??void 0}catch(e){eq.YJ.error(e,t);return}}async ensureGitVersion(e,t,i){if(!await this.git.isAtLeastVersion(e))throw Error(`${t} requires a newer version of Git (>= ${e}) than is currently installed (${await this.git.version()}).${i}`)}};async function ip(e){let t=A.i.getCore("files.encoding",e);return null==t||"utf8"===t?"utf8":(0,(await i.e(208).then(i.t.bind(i,2124,23))).encodingExists)(t)?t:"utf8"}ii([(0,eW.Yz)()],LocalGitProvider.prototype,"findGit",1),ii([(0,eW.u_)({exit:!0})],LocalGitProvider.prototype,"discoverRepositories",1),ii([(0,eW.u_)({exit:!0})],LocalGitProvider.prototype,"openRepository",1),ii([(0,eW.u_)({singleLine:!0})],LocalGitProvider.prototype,"openRepositoryInitWatcher",1),ii([(0,eW.u_)({exit:e=>`returned ${e[0]}`})],LocalGitProvider.prototype,"visibility",1),ii([(0,eW.u_)({args:{0:e=>e.url},exit:e=>`returned ${e[0]}`})],LocalGitProvider.prototype,"getRemoteVisibility",1),ii([(0,eW.Yz)({args:!1,singleLine:!0,prefix:(e,t)=>`${e.prefix}(${(t instanceof C.Uri?t:t.uri).fsPath})`,exit:e=>`returned ${e.length} repositories ${0!==e.length?eq.YJ.toLoggable(e):""}`})],LocalGitProvider.prototype,"repositorySearch",1),ii([(0,eW.u_)({args:{2:!1,3:!1},exit:!0})],LocalGitProvider.prototype,"repositorySearchCore",1),ii([(0,eW.Yz)({exit:!0})],LocalGitProvider.prototype,"getBestRevisionUri",1),ii([(0,eW.Yz)({exit:!0})],LocalGitProvider.prototype,"getWorkingUri",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"addRemote",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"pruneRemote",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"removeRemote",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"applyChangesToWorkingFile",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"applyUnreachableCommitForPatch",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"checkout",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"clone",1),ii([(0,eW.Yz)({args:{1:"<contents>",3:"<message>"}})],LocalGitProvider.prototype,"createUnreachableCommitForPatch",1),ii([(0,eW.Yz)({singleLine:!0})],LocalGitProvider.prototype,"resetCache",1),ii([(0,eW.Yz)({singleLine:!0})],LocalGitProvider.prototype,"resetCaches",1),ii([(0,eW.Yz)({args:{1:e=>e.length}})],LocalGitProvider.prototype,"excludeIgnoredUris",1),ii([(0,tZ.I)(),(0,eW.Yz)()],LocalGitProvider.prototype,"fetch",1),ii([(0,tZ.I)(),(0,eW.Yz)()],LocalGitProvider.prototype,"push",1),ii([(0,tZ.I)(),(0,eW.Yz)()],LocalGitProvider.prototype,"pull",1),ii([(0,tZ.I)(),(0,eW.u_)({exit:!0})],LocalGitProvider.prototype,"findRepositoryUri",1),ii([(0,eW.Yz)({args:{1:e=>e.join(",")}})],LocalGitProvider.prototype,"getAheadBehindCommitCount",1),ii([(0,tZ.I)((e,t)=>`${e.toString()}|${t?.isDirty}`),(0,eW.Yz)({args:{1:e=>e?.isDirty}})],LocalGitProvider.prototype,"getBlame",1),ii([(0,eW.Yz)({args:{1:"<contents>"}})],LocalGitProvider.prototype,"getBlameContents",1),ii([(0,tZ.I)((e,t,i,r)=>`${e.toString()}|${t}|${i?.isDirty}|${r?.forceSingleLine}`),(0,eW.Yz)({args:{2:e=>e?.isDirty}})],LocalGitProvider.prototype,"getBlameForLine",1),ii([(0,eW.Yz)({args:{2:"<contents>"}})],LocalGitProvider.prototype,"getBlameForLineContents",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getBlameForRange",1),ii([(0,eW.Yz)({args:{2:"<contents>"}})],LocalGitProvider.prototype,"getBlameForRangeContents",1),ii([(0,eW.Yz)({args:{0:"<blame>"}})],LocalGitProvider.prototype,"getBlameRange",1),ii([(0,tZ.I)(),(0,eW.Yz)()],LocalGitProvider.prototype,"getBranch",1),ii([(0,eW.Yz)({args:{1:!1}})],LocalGitProvider.prototype,"getBranches",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getChangedFilesCount",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getCommit",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getCommitBranches",1),ii([(0,eW.Yz)({exit:!0})],LocalGitProvider.prototype,"getCommitCount",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getCommitForFile",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getCommitsForGraph",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getCommitTags",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getContributors",1),ii([(0,tZ.I)(),(0,eW.Yz)()],LocalGitProvider.prototype,"getCurrentUser",1),ii([(0,eW.Yz)({exit:!0})],LocalGitProvider.prototype,"getDefaultBranchName",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getDiff",1),ii([(0,eW.Yz)({args:{1:!1}})],LocalGitProvider.prototype,"getDiffFiles",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getDiffForFile",1),ii([(0,eW.Yz)({args:{1:"<contents>"}})],LocalGitProvider.prototype,"getDiffForFileContents",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getDiffForLine",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getDiffStatus",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getFileStatusForCommit",1),ii([(0,eW.Yz)({exit:!0})],LocalGitProvider.prototype,"getFirstCommitSha",1),ii([(0,tZ.I)(),(0,eW.u_)({exit:e=>`returned ${e.uri.toString(!0)}, commonUri=${e.commonUri?.toString(!0)}`})],LocalGitProvider.prototype,"getGitDir",1),ii([(0,eW.u_)()],LocalGitProvider.prototype,"getLastFetchedTimestamp",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getLog",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getLogRefsOnly",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getLogForFile",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getMergeBase",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getMergeStatus",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getRebaseStatus",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getNextComparisonUris",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getNextUri",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getOldestUnpushedRefForFile",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getPreviousComparisonUris",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getPreviousComparisonUrisForLine",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getPreviousUri",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getIncomingActivity",1),ii([(0,eW.Yz)({args:{1:!1}})],LocalGitProvider.prototype,"getRemotes",1),ii([(0,tZ.I)(),(0,eW.Yz)()],LocalGitProvider.prototype,"getRevisionContent",1),ii([(0,tZ.I)(),(0,eW.Yz)()],LocalGitProvider.prototype,"getStash",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getStatusForFile",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getStatusForFiles",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getStatusForRepo",1),ii([(0,eW.Yz)({args:{1:!1}})],LocalGitProvider.prototype,"getTags",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getTreeEntryForRevision",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getTreeForRevision",1),ii([(0,eW.Yz)({args:{1:!1}})],LocalGitProvider.prototype,"hasBranchOrTag",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"hasCommitBeenPushed",1),ii([(0,eW.Yz)({exit:e=>`returned ${null!=e?`[${e[0]},[${e[1]}]`:"false"}`})],LocalGitProvider.prototype,"isTrackedWithDetails",1),ii([(0,eW.u_)()],LocalGitProvider.prototype,"isTrackedCore",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getDiffTool",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"openDiffTool",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"openDirectoryCompare",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"resolveReference",1),ii([(0,eW.Yz)({args:{1:e=>`[${e.matchAll?"A":""}${e.matchCase?"C":""}${e.matchRegex?"R":""}]: ${e.query.length>500?`${e.query.substring(0,500)}...`:e.query}`}})],LocalGitProvider.prototype,"richSearchCommits",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"searchCommits",1),ii([(0,eW.Yz)({args:{2:!1}})],LocalGitProvider.prototype,"runGitCommandViaTerminal",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"validateBranchOrTagName",1),ii([(0,eW.Yz)({args:{1:!1}})],LocalGitProvider.prototype,"validatePatch",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"validateReference",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"stageFile",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"stageDirectory",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"unstageFile",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"unstageDirectory",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"stashApply",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"stashDelete",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"stashRename",1),ii([(0,eW.Yz)({args:{2:e=>e?.length}})],LocalGitProvider.prototype,"stashSave",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"stashSaveSnapshot",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"createWorktree",1),ii([(0,tZ.I)(),(0,eW.Yz)()],LocalGitProvider.prototype,"getWorktrees",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getWorktreesDefaultUri",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"deleteWorktree",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getScmGitApiCore",1),ii([(0,eW.Yz)()],LocalGitProvider.prototype,"getOpenScmRepositories",1),ii([(0,eW.Yz)({exit:!0})],LocalGitProvider.prototype,"getScmRepository",1),ii([(0,eW.Yz)({exit:!0})],LocalGitProvider.prototype,"getOrOpenScmRepository",1);let VslsGit=class VslsGit extends Git{constructor(e){super(),this.localGit=e}async git(e,...t){if(e.local)return e.cwd="",this.localGit.git(e,...t);let i=await a$.instance.vsls.guest();if(null==i)throw Error("No guest");return i.git(e,...t)}async gitSpawn(e,...t){throw Error("Git spawn not supported in Live Share")}async logStreamTo(e,t,i,r,...s){let o=await a$.instance.vsls.guest();if(null==o)throw Error("No guest");return o.gitLogStreamTo(e,t,i,r,...s)}};let VslsGitProvider=class VslsGitProvider extends LocalGitProvider{descriptor={id:"vsls",name:"Live Share",virtual:!1};supportedSchemes=new Set([_.cl.Vsls,_.cl.VslsScc]);async discoverRepositories(e){if(!this.supportedSchemes.has(e.scheme))return[];let t=(0,eM.b1)();try{let t=await this.container.vsls.guest(),i=await t?.getRepositoriesForUri(e);if(null==i||0===i.length)return[];return i.flatMap(e=>this.openRepository(void 0,C.Uri.parse(e.folderUri,!0),e.root,void 0,e.closed))}catch(e){return eq.YJ.error(e,t),[]}}canHandlePathOrUri(e,t){let i=super.canHandlePathOrUri(e,t);return null!=i?`${e}:${i}`:void 0}getAbsoluteUri(e,t){e=(0,q.eO)(e);let i=("string"!=typeof t?t.scheme:void 0)??("string"!=typeof e?e.scheme:void 0)??_.cl.Vsls;return super.getAbsoluteUri(e,t).with({scheme:i})}async findRepositoryUri(e,t){let i;let r=(0,eM.b1)();try{let r;if(null==t&&(t=((await C.workspace.fs.stat(e)).type&C.FileType.Directory)===C.FileType.Directory),t||(e=C.Uri.joinPath(e,"..")),[r,i]=await this.git.rev_parse__show_toplevel(e.fsPath),r?this.unsafePaths.delete(e.fsPath):this.unsafePaths.add(e.fsPath),!i)return;return i?C.Uri.parse(i,!0):void 0}catch(e){eq.YJ.error(e,r);return}}getLastFetchedTimestamp(e){return Promise.resolve(void 0)}};async function ig(){let e;let t=iw();for(;;){try{e=await C.workspace.fs.stat(t)}catch{break}if(new Date().getTime()-e.ctime>3e4)break;await (0,t0.Sy)(100)}try{await C.workspace.fs.writeFile(t,new Uint8Array(0))}catch(e){return eq.YJ.error(e,"acquireSharedFolderWriteLock"),!1}return!0}async function im(){try{let e=iw();await C.workspace.fs.delete(e)}catch(e){return eq.YJ.error(e,"releaseSharedFolderWriteLock"),!1}return!0}function iw(){return C.Uri.file(R().join(tl().homedir(),".gk","lockfile"))}function iv(){return C.Uri.file(R().join(tl().homedir(),".gk","repoMapping.json"))}function iy(){return C.Uri.file(R().join(tl().homedir(),".gk","cloudWorkspaces.json"))}let RepositoryLocalPathMappingProvider=class RepositoryLocalPathMappingProvider{constructor(e){this.container=e}dispose(){}_localRepoDataMap=void 0;async ensureLocalRepoDataMap(){null==this._localRepoDataMap&&await this.loadLocalRepoDataMap()}async getLocalRepoDataMap(){return await this.ensureLocalRepoDataMap(),this._localRepoDataMap??{}}async getLocalRepoPaths(e){let t=[];if(null!=e.remoteUrl){let i=await this._getLocalRepoPaths(e.remoteUrl);null!=i&&t.push(...i)}if(null!=e.repoInfo){let{provider:i,owner:r,repoName:s}=e.repoInfo;if(null!=i&&null!=r&&null!=s){let e=await this._getLocalRepoPaths(`${i}/${r}/${s}`);null!=e&&t.push(...e)}}return t}async _getLocalRepoPaths(e){let t=await this.getLocalRepoDataMap();return t[e]?.paths}async loadLocalRepoDataMap(){let e=iv();try{let t=await C.workspace.fs.readFile(e);this._localRepoDataMap=JSON.parse(t.toString())??{}}catch(e){eq.YJ.error(e,"loadLocalRepoDataMap")}}async writeLocalRepoPath(e,t){if(null!=e.remoteUrl&&await this._writeLocalRepoPath(e.remoteUrl,t),e.repoInfo?.provider!=null&&e.repoInfo?.owner!=null&&e.repoInfo?.repoName!=null){let{provider:i,owner:r,repoName:s}=e.repoInfo,o=`${i}/${r}/${s}`;await this._writeLocalRepoPath(o,t)}}async _writeLocalRepoPath(e,t){if(!await ig())return;await this.loadLocalRepoDataMap(),null==this._localRepoDataMap&&(this._localRepoDataMap={}),null==this._localRepoDataMap[e]?this._localRepoDataMap[e]={paths:[t]}:null==this._localRepoDataMap[e].paths?this._localRepoDataMap[e].paths=[t]:this._localRepoDataMap[e].paths.includes(t)||this._localRepoDataMap[e].paths.push(t);let i=iv(),r=new Uint8Array(Buffer.from(JSON.stringify(this._localRepoDataMap)));try{await C.workspace.fs.writeFile(i,r)}catch(e){eq.YJ.error(e,"writeLocalRepoPath")}await im()}};let WorkspacesLocalPathMappingProvider=class WorkspacesLocalPathMappingProvider{_cloudWorkspacePathMap=void 0;async ensureCloudWorkspacePathMap(){null==this._cloudWorkspacePathMap&&await this.loadCloudWorkspacePathMap()}async getCloudWorkspacePathMap(){return await this.ensureCloudWorkspacePathMap(),this._cloudWorkspacePathMap??{}}async loadCloudWorkspacePathMap(){let e=iy();try{let t=await C.workspace.fs.readFile(e);this._cloudWorkspacePathMap=JSON.parse(t.toString())?.workspaces??{}}catch(e){eq.YJ.error(e,"loadCloudWorkspacePathMap")}}async getCloudWorkspaceRepoPath(e,t){let i=await this.getCloudWorkspacePathMap();return i[e]?.repoPaths?.[t]}async getCloudWorkspaceCodeWorkspacePath(e){let t=await this.getCloudWorkspacePathMap();return t[e]?.externalLinks?.[".code-workspace"]}async removeCloudWorkspaceCodeWorkspaceFilePath(e){if(!await ig()||(await this.loadCloudWorkspacePathMap(),this._cloudWorkspacePathMap?.[e]?.externalLinks?.[".code-workspace"]==null))return;delete this._cloudWorkspacePathMap[e].externalLinks[".code-workspace"];let t=iy(),i=new Uint8Array(Buffer.from(JSON.stringify({workspaces:this._cloudWorkspacePathMap})));try{await C.workspace.fs.writeFile(t,i)}catch(e){eq.YJ.error(e,"writeCloudWorkspaceCodeWorkspaceFilePathToMap")}await im()}async confirmCloudWorkspaceCodeWorkspaceFilePath(e){let t=await this.getCloudWorkspacePathMap(),i=t[e]?.externalLinks?.[".code-workspace"];if(null==i)return!1;try{return await C.workspace.fs.stat(C.Uri.file(i)),!0}catch{return!1}}async writeCloudWorkspaceRepoDiskPathToMap(e,t,i){if(!await ig())return;await this.loadCloudWorkspacePathMap(),null==this._cloudWorkspacePathMap&&(this._cloudWorkspacePathMap={}),null==this._cloudWorkspacePathMap[e]&&(this._cloudWorkspacePathMap[e]={repoPaths:{},externalLinks:{}}),null==this._cloudWorkspacePathMap[e].repoPaths&&(this._cloudWorkspacePathMap[e].repoPaths={}),this._cloudWorkspacePathMap[e].repoPaths[t]=i;let r=iy(),s=new Uint8Array(Buffer.from(JSON.stringify({workspaces:this._cloudWorkspacePathMap})));try{await C.workspace.fs.writeFile(r,s)}catch(e){eq.YJ.error(e,"writeCloudWorkspaceRepoDiskPathToMap")}await im()}async writeCloudWorkspaceCodeWorkspaceFilePathToMap(e,t){if(!await ig())return;await this.loadCloudWorkspacePathMap(),null==this._cloudWorkspacePathMap&&(this._cloudWorkspacePathMap={}),null==this._cloudWorkspacePathMap[e]&&(this._cloudWorkspacePathMap[e]={repoPaths:{},externalLinks:{}}),null==this._cloudWorkspacePathMap[e].externalLinks&&(this._cloudWorkspacePathMap[e].externalLinks={}),this._cloudWorkspacePathMap[e].externalLinks[".code-workspace"]=t;let i=iy(),r=new Uint8Array(Buffer.from(JSON.stringify({workspaces:this._cloudWorkspacePathMap})));try{await C.workspace.fs.writeFile(i,r)}catch(e){eq.YJ.error(e,"writeCloudWorkspaceCodeWorkspaceFilePathToMap")}await im()}async getLocalWorkspaceData(){let e,t;try{if(e=C.Uri.file(R().join(tl().homedir(),".gk","localWorkspaces.json")),t=await C.workspace.fs.readFile(e),t?.length)return JSON.parse(t.toString())}catch(i){try{if(e=C.Uri.file(R().join(tl().homedir(),`${"windows"===(0,tu.Kk)()?"/AppData/Roaming/":""}.gitkraken`,"workspaces","workspaces.json")),t=await C.workspace.fs.readFile(e),t?.length)return JSON.parse(t.toString())}catch(e){eq.YJ.error(e,"getLocalWorkspaceData")}}return{workspaces:{}}}async writeCodeWorkspaceFile(e,t,i){let r,s;try{s=await C.workspace.fs.readFile(e),r=JSON.parse(s.toString())}catch(e){r={folders:[],settings:{}}}r.folders=t.map(e=>({path:e})),i?.workspaceId!=null&&(r.settings["gitkraken.workspaceId"]=i.workspaceId),i?.workspaceAutoAddSetting!=null&&(r.settings["gitkraken.workspaceAutoAddSetting"]=i.workspaceAutoAddSetting);let o=new Uint8Array(Buffer.from(JSON.stringify(r)));try{await C.workspace.fs.writeFile(e,o),i?.workspaceId!=null&&await this.writeCloudWorkspaceCodeWorkspaceFilePathToMap(i.workspaceId,e.fsPath)}catch(e){return eq.YJ.error(e,"writeCodeWorkspaceFile"),!1}return!0}async updateCodeWorkspaceFileSettings(e,t){let i,r;try{r=await C.workspace.fs.readFile(e),i=JSON.parse(r.toString())}catch(e){return!1}null!=t.workspaceAutoAddSetting&&(i.settings["gitkraken.workspaceAutoAddSetting"]=t.workspaceAutoAddSetting);let s=new Uint8Array(Buffer.from(JSON.stringify(i)));try{await C.workspace.fs.writeFile(e,s)}catch(e){return eq.YJ.error(e,"updateCodeWorkspaceFileSettings"),!1}return!0}};function ib(){return null==d&&(d=new Git),d}async function iC(e){let t=ib(),r=[new LocalGitProvider(e,t),new VslsGitProvider(e,new VslsGit(t))];if(A.i.get("virtualRepositories.enabled")){let t=(await i.e(176).then(i.bind(i,5528))).GitHubGitProvider;r.push(new t(e))}return r}async function iA(e){let t=[{label:"OpenAI",kind:C.QuickPickItemKind.Separator},{label:"OpenAI",description:"GPT-4 Turbo",provider:"openai",model:"gpt-4-turbo-preview"},{label:"OpenAI",description:"GPT-4",provider:"openai",model:"gpt-4"},{label:"OpenAI",description:"GPT-4 32k",provider:"openai",model:"gpt-4-32k"},{label:"OpenAI",description:"GPT-3.5 Turbo",provider:"openai",model:"gpt-3.5-turbo-1106"},{label:"Anthropic",kind:C.QuickPickItemKind.Separator},{label:"Anthropic",description:"Claude 2.1",provider:"anthropic",model:"claude-2.1"},{label:"Anthropic",description:"Claude 2.0",provider:"anthropic",model:"claude-2"},{label:"Anthropic",description:"Claude Instant",provider:"anthropic",model:"claude-instant-1"}];null!=e?t=t.filter(t=>t.kind!==C.QuickPickItemKind.Separator&&t.provider===e):e=A.i.get("ai.experimental.provider")??"openai";let i=A.i.get(`ai.experimental.${e}.model`);for(let r of(null==i&&(i="anthropic"===e?"claude-2.1":"gpt-4-turbo-preview"),t))if(r.kind!==C.QuickPickItemKind.Separator&&r.model===i){r.description=`${r.description}  \u2713`,r.picked=!0;break}return await C.window.showQuickPick(t,{title:"Switch AI Model",placeHolder:"select an AI model to use for experimental AI features",matchOnDescription:!0})}let AnthropicProvider=class AnthropicProvider{constructor(e){this.container=e}id="anthropic";name="Anthropic";dispose(){}get model(){return A.i.get("ai.experimental.anthropic.model")||null}async getOrChooseModel(){let e=this.model;if(null!=e)return e;let t=await iA(this.id);if(null!=t)return await A.i.updateEffective(`ai.experimental.${t.provider}.model`,t.model),t.model}async generateCommitMessage(e,t){let i=await ik(this.container.storage);if(null==i)return;let r=await this.getOrChooseModel();if(null==r)return;let s=0,o=iR(r,2600);for(;;){let n=e.substring(0,o),a=A.i.get("experimental.generateCommitMessagePrompt");a.endsWith(".")||(a+=".");let l={model:r,prompt:`

Human: You are an advanced AI programming assistant tasked with summarizing code changes into a concise and meaningful commit message. Compose a commit message that:
- Strictly synthesizes meaningful information from the provided code diff
- Utilizes any additional user-provided context to comprehend the rationale behind the code changes
- Is clear and brief, with an informal yet professional tone, and without superfluous descriptions
- Avoids unnecessary phrases such as "this commit", "this change", and the like
- Avoids direct mention of specific code identifiers, names, or file names, unless they are crucial for understanding the purpose of the changes
- Most importantly emphasizes the 'why' of the change, its benefits, or the problem it addresses rather than only the 'what' that changed

Follow the user's instructions carefully, don't repeat yourself, don't include the code in the output, or make anything up!

Human: Here is the code diff to use to generate the commit message:

${n}

${t?.context?`Human: Here is additional context which should be taken into account when generating the commit message:

${t.context}`:""}

Human: ${a}

Assistant:`,stream:!1,max_tokens_to_sample:5e3},h=await this.fetch(i,l);if(!h.ok){let e;try{e=await h.json()}catch{}if(s++<2&&e?.error?.type==="invalid_request_error"&&e?.error?.message?.includes("prompt is too long")){o-=500*s;continue}throw Error(`Unable to generate commit message: (${this.name}:${h.status}) ${e?.error?.message||h.statusText})`)}return e.length>o&&C.window.showWarningMessage(`The diff of the staged changes had to be truncated to ${o} characters to fit within the Anthropic's limits.`),(await h.json()).completion.trim()}}async explainChanges(e,t){let i=await ik(this.container.storage);if(null==i)return;let r=await this.getOrChooseModel();if(null==r)return;let s=0,o=iR(r,3e3);for(;;){let n=t.substring(0,o),a=`${"claude-2.1"!==r?"\n\nHuman: ":""}You are an advanced AI programming assistant tasked with summarizing code changes into an explanation that is both easy to understand and meaningful. Construct an explanation that:
- Concisely synthesizes meaningful information from the provided code diff
- Incorporates any additional context provided by the user to understand the rationale behind the code changes
- Places the emphasis on the 'why' of the change, clarifying its benefits or addressing the problem that necessitated the change, beyond just detailing the 'what' has changed

Do not make any assumptions or invent details that are not supported by the code diff or the user-provided context.

Human: Here is additional context provided by the author of the changes, which should provide some explanation to why these changes where made. Please strongly consider this information when generating your explanation:

${e}

Human: Now, kindly explain the following code diff in a way that would be clear to someone reviewing or trying to understand these changes:

${n}

Human: Remember to frame your explanation in a way that is suitable for a reviewer to quickly grasp the essence of the changes, the issues they resolve, and their implications on the codebase.

Assistant:`,l={model:r,prompt:a,stream:!1,max_tokens_to_sample:5e3},h=await this.fetch(i,l);if(!h.ok){let e;try{e=await h.json()}catch{}if(s++<2&&e?.error?.type==="invalid_request_error"&&e?.error?.message?.includes("prompt is too long")){o-=500*s;continue}throw Error(`Unable to explain commit: (${this.name}:${h.status}) ${e?.error?.message||h.statusText})`)}return t.length>o&&C.window.showWarningMessage(`The diff of the commit changes had to be truncated to ${o} characters to fit within the OpenAI's limits.`),(await h.json()).completion.trim()}}fetch(e,t){return(0,tc.I5)("https://api.anthropic.com/v1/complete",{headers:{Accept:"application/json",Authorization:`Bearer ${e}`,"Content-Type":"application/json","X-API-Key":e,"anthropic-version":"2023-06-01"},method:"POST",body:JSON.stringify(t)})}};async function ik(e){let t=await e.getSecret("gitlens.anthropic.key");if(!t){let i=C.window.createInputBox();i.ignoreFocusOut=!0;let r=[];try{let e={iconPath:new C.ThemeIcon("link-external"),tooltip:"Open the Anthropic API Key Page"};t=await new Promise(t=>{r.push(i.onDidHide(()=>t(void 0)),i.onDidChangeValue(e=>{if(e&&!/(?:sk-)?[a-zA-Z0-9-_]{32,}/.test(e)){i.validationMessage="Please enter a valid Anthropic API key";return}i.validationMessage=void 0}),i.onDidAccept(()=>{let e=i.value.trim();if(!e||!/(?:sk-)?[a-zA-Z0-9-_]{32,}/.test(e)){i.validationMessage="Please enter a valid Anthropic API key";return}t(e)}),i.onDidTriggerButton(t=>{t===e&&C.env.openExternal(C.Uri.parse("https://console.anthropic.com/account/keys"))})),i.password=!0,i.title="Connect to Anthropic",i.placeholder="Please enter your Anthropic API key to use this feature",i.prompt=(0,eQ.gO)("input-prompt-links")?'Enter your [Anthropic API Key](https://console.anthropic.com/account/keys "Get your Anthropic API key")':"Enter your Anthropic API Key",i.buttons=[e],i.show()})}finally{i.dispose(),r.forEach(e=>void e.dispose())}if(!t)return;e.storeSecret("gitlens.anthropic.key",t)}return t}let OpenAIProvider=class OpenAIProvider{constructor(e){this.container=e}id="openai";name="OpenAI";dispose(){}get model(){return A.i.get("ai.experimental.openai.model")||null}get url(){return A.i.get("ai.experimental.openai.url")||"https://api.openai.com/v1/chat/completions"}async getOrChooseModel(){let e=this.model;if(null!=e)return e;let t=await iA(this.id);if(null!=t)return await A.i.updateEffective(`ai.experimental.${t.provider}.model`,t.model),t.model}async generateCommitMessage(e,t){let i=await iP(this.container.storage);if(null==i)return;let r=await this.getOrChooseModel();if(null==r)return;let s=0,o=iR(r,2600);for(;;){let n=e.substring(0,o),a=A.i.get("experimental.generateCommitMessagePrompt");a.endsWith(".")||(a+=".");let l={model:r,messages:[{role:"system",content:`You are an advanced AI programming assistant tasked with summarizing code changes into a concise and meaningful commit message. Compose a commit message that:
- Strictly synthesizes meaningful information from the provided code diff
- Utilizes any additional user-provided context to comprehend the rationale behind the code changes
- Is clear and brief, with an informal yet professional tone, and without superfluous descriptions
- Avoids unnecessary phrases such as "this commit", "this change", and the like
- Avoids direct mention of specific code identifiers, names, or file names, unless they are crucial for understanding the purpose of the changes
- Most importantly emphasizes the 'why' of the change, its benefits, or the problem it addresses rather than only the 'what' that changed

Follow the user's instructions carefully, don't repeat yourself, don't include the code in the output, or make anything up!`},{role:"user",content:`Here is the code diff to use to generate the commit message:

${n}`},...t?.context?[{role:"user",content:`Here is additional context which should be taken into account when generating the commit message:

${t.context}`}]:[],{role:"user",content:a}]},h=await this.fetch(i,l);if(!h.ok){let e;if(404===h.status)throw Error(`Unable to generate commit message: Your API key doesn't seem to have access to the selected '${r}' model`);if(429===h.status)throw Error(`Unable to generate commit message: (${this.name}:${h.status}) Too many requests (rate limit exceeded) or your API key is associated with an expired trial`);try{e=await h.json()}catch{}if(s++<2&&e?.error?.code==="context_length_exceeded"){o-=500*s;continue}throw Error(`Unable to generate commit message: (${this.name}:${h.status}) ${e?.error?.message||h.statusText}`)}return e.length>o&&C.window.showWarningMessage(`The diff of the staged changes had to be truncated to ${o} characters to fit within the OpenAI's limits.`),(await h.json()).choices[0].message.content.trim()}}async explainChanges(e,t){let i=await iP(this.container.storage);if(null==i)return;let r=await this.getOrChooseModel();if(null==r)return;let s=0,o=iR(r,3e3);for(;;){let n=t.substring(0,o),a={model:r,messages:[{role:"system",content:`You are an advanced AI programming assistant tasked with summarizing code changes into an explanation that is both easy to understand and meaningful. Construct an explanation that:
- Concisely synthesizes meaningful information from the provided code diff
- Incorporates any additional context provided by the user to understand the rationale behind the code changes
- Places the emphasis on the 'why' of the change, clarifying its benefits or addressing the problem that necessitated the change, beyond just detailing the 'what' has changed

Do not make any assumptions or invent details that are not supported by the code diff or the user-provided context.`},{role:"user",content:`Here is additional context provided by the author of the changes, which should provide some explanation to why these changes where made. Please strongly consider this information when generating your explanation:

${e}`},{role:"user",content:`Now, kindly explain the following code diff in a way that would be clear to someone reviewing or trying to understand these changes:

${n}`},{role:"user",content:"Remember to frame your explanation in a way that is suitable for a reviewer to quickly grasp the essence of the changes, the issues they resolve, and their implications on the codebase."}]},l=await this.fetch(i,a);if(!l.ok){let e;if(404===l.status)throw Error(`Unable to explain commit: Your API key doesn't seem to have access to the selected '${r}' model`);if(429===l.status)throw Error(`Unable to explain commit: (${this.name}:${l.status}) Too many requests (rate limit exceeded) or your API key is associated with an expired trial`);try{e=await l.json()}catch{}if(s++<2&&e?.error?.code==="context_length_exceeded"){o-=500*s;continue}throw Error(`Unable to explain commit: (${this.name}:${l.status}) ${e?.error?.message||l.statusText}`)}return t.length>o&&C.window.showWarningMessage(`The diff of the commit changes had to be truncated to ${o} characters to fit within the OpenAI's limits.`),(await l.json()).choices[0].message.content.trim()}}fetch(e,t){let i=this.url,r=i.includes(".azure.com");return(0,tc.I5)(i,{headers:{Accept:"application/json","Content-Type":"application/json",...r?{"api-key":e}:{Authorization:`Bearer ${e}`}},method:"POST",body:JSON.stringify(t)})}};async function iP(e){let t=await e.getSecret("gitlens.openai.key");if(!t){let i=C.window.createInputBox();i.ignoreFocusOut=!0;let r=[];try{let e={iconPath:new C.ThemeIcon("link-external"),tooltip:"Open the OpenAI API Key Page"};t=await new Promise(t=>{r.push(i.onDidHide(()=>t(void 0)),i.onDidChangeValue(e=>{if(e&&!/(?:sk-)?[a-zA-Z0-9]{32,}/.test(e)){i.validationMessage="Please enter a valid OpenAI API key";return}i.validationMessage=void 0}),i.onDidAccept(()=>{let e=i.value.trim();if(!e||!/(?:sk-)?[a-zA-Z0-9]{32,}/.test(e)){i.validationMessage="Please enter a valid OpenAI API key";return}t(e)}),i.onDidTriggerButton(t=>{t===e&&C.env.openExternal(C.Uri.parse("https://platform.openai.com/account/api-keys"))})),i.password=!0,i.title="Connect to OpenAI",i.placeholder="Please enter your OpenAI API key to use this feature",i.prompt=(0,eQ.gO)("input-prompt-links")?'Enter your [OpenAI API Key](https://platform.openai.com/account/api-keys "Get your OpenAI API key")':"Enter your OpenAI API Key",i.buttons=[e],i.show()})}finally{i.dispose(),r.forEach(e=>void e.dispose())}if(!t)return;e.storeSecret("gitlens.openai.key",t)}return t}let AIProviderService=class AIProviderService{constructor(e){this.container=e}_provider;dispose(){this._provider?.dispose()}get providerId(){return this._provider?.id}async generateCommitMessage(e,t){let i;if(Array.isArray(e))i=e.join("\n");else{let r=(0,ty.Oc)(e)?e:this.container.git.getRepository(e);if(null==r)throw Error("Unable to find repository");let s=await this.container.git.getDiff(r.uri,Q.QD);if(!s?.contents&&(s=await this.container.git.getDiff(r.uri,Q.Oy),!s?.contents))throw Error("No changes to generate a commit message from.");if(t?.cancellation?.isCancellationRequested)return;i=s.contents}let r=await this.getOrChooseProvider();if(null!=r&&await iS(r,this.container.storage)&&!t?.cancellation?.isCancellationRequested)return t?.progress!=null?C.window.withProgress(t.progress,async()=>r.generateCommitMessage(i,{context:t?.context})):r.generateCommitMessage(i,{context:t?.context})}async explainCommit(e,t,i){let r;if("string"==typeof e||e instanceof C.Uri){if("string"!=typeof t||!t)throw Error("Invalid arguments provided");r=await this.container.git.getCommit(e,t)}else{if("string"==typeof t)throw Error("Invalid arguments provided");r=(0,M.S)(e)?e:await this.container.git.getCommit(e.repoPath,e.ref),i=t}if(null==r)throw Error("Unable to find commit");let s=await this.container.git.getDiff(r.repoPath,r.sha);if(!s?.contents)throw Error("No changes found to explain.");let o=await this.getOrChooseProvider();if(null!=o&&await iS(o,this.container.storage))return(r.hasFullDetails()||(await r.ensureFullDetails(),(0,M.sH)(r)),i?.progress!=null)?C.window.withProgress(i.progress,async()=>o.explainChanges(r.message,s.contents)):o.explainChanges(r.message,s.contents)}reset(){let{providerId:e}=this;null!=e&&(this.container.storage.deleteSecret(`gitlens.${e}.key`),this.container.storage.delete(`confirm:ai:tos:${e}`),this.container.storage.deleteWorkspace(`confirm:ai:tos:${e}`))}supports(e){return"anthropic"===e||"openai"===e}async switchProvider(){await this.getOrChooseProvider(!0)}async getOrChooseProvider(e){let t=e?void 0:A.i.get("ai.experimental.provider")||void 0;if(null==t||!this.supports(t)){let e=await iA();if(null==e)return;t=e.provider,await A.i.updateEffective("ai.experimental.provider",t),await A.i.updateEffective(`ai.experimental.${t}.model`,e.model)}return t!==this._provider?.id&&(this._provider?.dispose(),"anthropic"===t?this._provider=new AnthropicProvider(this.container):(this._provider=new OpenAIProvider(this.container),"openai"!==t&&await A.i.updateEffective("ai.experimental.provider","openai"))),this._provider}};async function iS(e,t){if(t.get(`confirm:ai:tos:${e.id}`,!1)||t.getWorkspace(`confirm:ai:tos:${e.id}`,!1))return!0;let i={title:"Yes"},r={title:"Always for this Workspace"},s={title:"Always"},o=await C.window.showInformationMessage(`This GitLens experimental feature requires sending a diff of the code changes to ${e.name}. This may contain sensitive information.

Do you want to continue?`,{modal:!0},i,r,s,{title:"No",isCloseAffordance:!0});return o===i||(o===r?(t.storeWorkspace(`confirm:ai:tos:${e.id}`,!0),!0):o===s&&(t.store(`confirm:ai:tos:${e.id}`,!0),!0))}function iR(e,t){let i;switch(e){case"gpt-4-turbo-preview":case"gpt-4-0125-preview":case"gpt-4-1106-preview":i=128e3;break;case"gpt-4-32k":case"gpt-4-32k-0613":i=32768;break;case"gpt-4":case"gpt-4-0613":i=8192;break;case"gpt-3.5-turbo-1106":case"gpt-3.5-turbo-16k":i=16385;break;case"gpt-3.5-turbo":default:i=4096;break;case"claude-2.1":i=2e5;break;case"claude-2":case"claude-instant-1":i=1e5}let r=3.1*i-t/3.1;return Math.floor(r-.1*r)}var iD=i(3072),i$=i(9536),i_=i(204),iI=i(9148),iT=i(8781),iF=i(9640),iO=Object.defineProperty,ix=Object.getOwnPropertyDescriptor,iE=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?ix(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iO(t,i,o),o};let iB=C.window.createTextEditorDecorationType({after:{margin:"0 0 0 3em",textDecoration:"none"},rangeBehavior:C.DecorationRangeBehavior.OpenOpen});let LineAnnotationController=class LineAnnotationController{constructor(e){this.container=e,this._disposable=C.Disposable.from((0,iT.qw)(e.onReady)(this.onReady,this),A.i.onDidChange(this.onConfigurationChanged,this),e.fileAnnotations.onDidToggleAnnotations(this.onFileAnnotationsToggled,this),e.integrations.onDidChangeConnectionState((0,tX.Cu)(()=>void this.refresh(C.window.activeTextEditor),250)))}_cancellation;_disposable;_editor;_enabled=!1;dispose(){this.clearAnnotations(this._editor),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){A.i.changed(e,"currentLine")&&(A.i.changed(e,"currentLine.enabled")&&(A.i.get("currentLine.enabled")?(this._enabled=!0,this.resume()):(this._enabled=!1,this.setLineTracker(!1))),this.refresh(C.window.activeTextEditor))}_suspended=!1;get suspended(){return!this._enabled||this._suspended}resume(){return this.setLineTracker(!0),!!this._suspended&&(this._suspended=!1,!0)}suspend(){return this.setLineTracker(!1),!this._suspended&&(this._suspended=!0,!0)}onActiveLinesChanged(e){if(!e.pending&&void 0!==e.selections){this.refresh(e.editor);return}this.clear(e.editor)}onFileAnnotationsToggled(){this.refresh(C.window.activeTextEditor)}clear(e){this._cancellation?.cancel(),this._editor!==e&&null!=this._editor&&this.clearAnnotations(this._editor),this.clearAnnotations(e)}async toggle(e){this._enabled=!(this._enabled&&!this.suspended),this._enabled?this.resume()&&await this.refresh(e):this.suspend()&&await this.refresh(e)}clearAnnotations(e){void 0!==e&&!0!==e._disposed&&e.setDecorations(iB,[])}getPullRequestsForLines(e,t){let i=new Map;if(0===t.size)return i;let r=this.container.git.getBestRemoteWithIntegration(e);for(let[,e]of t){if(e.commit.isUncommitted)continue;let t=i.get(e.commit.ref);null==t&&(t=r.then(t=>e.commit.getAssociatedPullRequest(t)),i.set(e.commit.ref,t))}return i}async refresh(e){let t;if(null==e&&null==this._editor)return;let i=(0,eM.b1)(),r=this.container.lineTracker.selections;if(null==e||null==r||!(0,eQ.sj)(e)){(0,eM._W)(i,` ${_.or.Dot} Skipped because there is no valid editor or no valid selections`),this.clear(this._editor);return}this._editor!==e&&(this.clear(this._editor),this._editor=e);let s=A.i.get("currentLine");if(this.suspended){(0,eM._W)(i,` ${_.or.Dot} Skipped because the controller is suspended`),this.clear(e);return}let o=await this.container.documentTracker.getOrAdd(e.document);if(!o.isBlameable&&this.suspended){null!=i&&(i.exitDetails=` ${_.or.Dot} Skipped because the ${this.suspended?"controller is suspended":`document(${o.uri.toString(!0)}) is not blameable`}`),this.clear(e);return}if(null==e.document||!this.container.lineTracker.includes(r)){null!=i&&(i.exitDetails=` ${_.or.Dot} Skipped because the ${null==e.document?"editor is gone":`selection(s)=${r.map(e=>`[${e.anchor}-${e.active}]`).join()} are no longer current`}`);return}null!=i&&(i.exitDetails=` ${_.or.Dot} selection(s)=${r.map(e=>`[${e.anchor}-${e.active}]`).join()}`);let n=!0,a=new Map,l=new Map;for(let e of r){let t=this.container.lineTracker.getState(e.active);if(t?.commit==null){eq.YJ.debug(i,`Line ${e.active} returned no commit`);continue}null!=t.commit.message||a.has(t.commit.ref)||a.set(t.commit.ref,t.commit.ensureFullDetails()),l.set(e.active,t),t.commit.isUncommitted||(n=!1)}let h=o.uri.repoPath;if(e.document.uri.scheme===_.cl.Vsls||e.document.uri.scheme===_.cl.VslsScc){let e=A.i.get("hovers");t={autolinks:e.autolinks.enabled,dateFormat:A.i.get("defaultDateFormat"),format:e.detailsMarkdownFormat,pullRequests:e.pullRequests.enabled}}let c=!n&&null!=h&&s.pullRequests.enabled&&i_.E.has(s.format,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState");this._cancellation?.cancel(),this._cancellation=new C.CancellationTokenSource;let u=this._cancellation.token,d=i_.E.has(s.format,"tips")?this.container.git.getBranchesAndTagsTipsFn(h):void 0;async function p(e,i,r,n,a){let h=[];for(let[c,u]of l){let l=u.commit;if(null==l||l.isUncommitted&&""===s.uncommittedChangesFormat)continue;let d=n?.get(l.ref),p=(0,iF.a0)(l,l.isUncommitted?s.uncommittedChangesFormat??s.format:s.format,{dateFormat:null===s.dateFormat?A.i.get("defaultDateFormat"):s.dateFormat,getBranchAndTagTips:r,pullRequest:d?.value,pullRequestPendingMessage:`PR ${_.or.Ellipsis}`},s.scrollable);p.range=i.document.validateRange(new C.Range(c,1073741824,c,1073741824)),null!=t&&(p.hoverMessage=await (0,iI.Oq)(e,l,o.uri,c,{...t,pullRequest:d?.value,timeout:a})),h.push(p)}i.setDecorations(iB,h)}let g=c?await (0,tK.Cu)(this.getPullRequestsForLines(h,l),!0,u,100,async t=>{if("timedout"!==t.reason||u.isCancellationRequested||e!==this._editor)return;eq.YJ.debug(i,`${_.or.Dot} pull request queries took too long (over 100 ms)`);let[r,s]=await Promise.allSettled([d,t.value]);if(u.isCancellationRequested||e!==this._editor)return;let o=(0,t0.Cv)(s),n=(0,t0.Cv)(r);eq.YJ.debug(i,`${_.or.Dot} pull request queries completed; updating...`),p(this.container,e,n,o)}):void 0,[m]=await Promise.allSettled([d,...a.values()]);u.isCancellationRequested||await p(this.container,e,(0,t0.Cv)(m),g,100)}setLineTracker(e){if(e){this.container.lineTracker.subscribed(this)||this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this));return}this.container.lineTracker.unsubscribe(this)}};iE([(0,eW.Yz)()],LineAnnotationController.prototype,"resume",1),iE([(0,eW.Yz)()],LineAnnotationController.prototype,"suspend",1),iE([(0,eW.u_)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map(e=>`[${e.anchor}-${e.active}]`).join(",")}, pending=${!!e.pending}, reason=${e.reason}`}})],LineAnnotationController.prototype,"onActiveLinesChanged",1),iE([(0,eW.u_)({args:!1,singleLine:!0})],LineAnnotationController.prototype,"clear",1),iE([(0,eW.Yz)({args:!1})],LineAnnotationController.prototype,"toggle",1),iE([(0,eW.u_)({args:!1})],LineAnnotationController.prototype,"refresh",1);var iU=i(3412);let CacheProvider=class CacheProvider{_cache=new Map;constructor(e){}dispose(){this._cache.clear()}delete(e,t){this._cache.delete(`${e}:${t}`)}get(e,t,i,r){let s=this._cache.get(`${e}:${t}`);if(null==s||null!=s.expiresAt&&s.expiresAt>0&&s.expiresAt<Date.now()||null!=s.etag&&s.etag!==i){let{value:s,expiresAt:o}=r();return this.set(e,t,s,i,o)?.value}return s.value}getIssueOrPullRequest(e,t,i,r){let{key:s,etag:o}=iW(t,i);return null==t?this.get("issuesOrPrsById",`id:${e}:${s}`,o,r):this.get("issuesOrPrsByIdAndRepo",`id:${e}:${s}:${JSON.stringify(t)}}`,o,r)}getPullRequestForBranch(e,t,i,r){let{key:s,etag:o}=iW(t,i);return this.get("prByBranch",`branch:${e}:${s}`,o,this.wrapPullRequestCacheable(r,s,o))}getPullRequestForSha(e,t,i,r){let{key:s,etag:o}=iW(t,i);return this.get("prsBySha",`sha:${e}:${s}`,o,this.wrapPullRequestCacheable(r,s,o))}getRepositoryDefaultBranch(e,t,i){let{key:r,etag:s}=iW(e,t);return this.get("defaultBranch",`repo:${r}`,s,i)}getRepositoryMetadata(e,t,i){let{key:r,etag:s}=iW(e,t);return this.get("repoMetadata",`repo:${r}`,s,i)}set(e,t,i,r,s){let o;return(0,t0.um)(i)?(i.then(i=>{this.set(e,t,i,r,s)},()=>{this.delete(e,t)}),o={value:i,etag:r}):o={value:i,etag:r,expiresAt:s??function(e,t){let i=Date.now(),r=i+36e5;switch(e){case"defaultBranch":case"repoMetadata":return 0;case"issuesOrPrsById":case"issuesOrPrsByIdAndRepo":{if(null==t)return 0;if(!t.closed)return r;let e=i-(t.closedDate??t.date).getTime();return i+(e>12096e5?12:1)*36e5}case"prByBranch":case"prsBySha":{if(null==t)return"prByBranch"===e?r:0;if("opened"===t.state)return r;let s=i-(t.closedDate??t.mergedDate??t.date).getTime();return i+(s>12096e5?12:1)*36e5}default:return null==t?0:r}}(e,i)},this._cache.set(`${e}:${t}`,o),o}wrapPullRequestCacheable(e,t,i){return()=>{let r=e();return(0,t0.um)(r.value)&&r.value.then(e=>{null!=e&&this.set("issuesOrPrsById",`id:${e.id}:${t}`,e,i)}),r}}};function iW(e,t){return{key:e.key,etag:`${e.key}:${t?.maybeConnected??!1}`}}var iN=i(3664);let GitCodeLensController=class GitCodeLensController{constructor(e){this.container=e,this._disposable=C.Disposable.from((0,iT.qw)(e.onReady)(this.onReady,this),A.i.onDidChange(this.onConfigurationChanged,this))}_canToggle=!1;_disposable;_provider;_providerDisposable;dispose(){this._providerDisposable?.dispose(),this._disposable?.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){if(A.i.changed(e,["codeLens","defaultDateFormat","defaultDateSource","defaultDateStyle"])){null!=e&&eq.YJ.log("CodeLens config changed; resetting CodeLens provider");let t=A.i.get("codeLens");t.enabled&&(t.recentChange.enabled||t.authors.enabled)?this.ensureProvider():(this._providerDisposable?.dispose(),this._provider=void 0),this._canToggle=t.recentChange.enabled||t.authors.enabled,(0,iN.Qr)("gitlens:disabledToggleCodeLens",!this._canToggle)}}onBlameStateChanged(e){null!=this._provider&&e.blameable&&(eq.YJ.log("Blame state changed; resetting CodeLens provider"),this._provider.reset())}onDirtyIdleTriggered(e){null!=this._provider&&e.document.isBlameable&&(eq.YJ.log("Dirty idle triggered; resetting CodeLens provider"),this._provider.reset())}toggleCodeLens(){if(this._canToggle){if(eq.YJ.log("toggleCodeLens()"),null!=this._provider){this._providerDisposable?.dispose(),this._provider=void 0;return}this.ensureProvider()}}async ensureProvider(){if(null!=this._provider){this._provider.reset();return}this._providerDisposable?.dispose();let{GitCodeLensProvider:e}=await i.e(496).then(i.bind(i,756));this._provider=new e(this.container),this._providerDisposable=C.Disposable.from(C.languages.registerCodeLensProvider(e.selector,this._provider),this.container.documentTracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.container.documentTracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this))}};var iq=i(6848);let iL=new Set(["commit:selected","draft:selected","file:selected"]),iM=new Map;let EventBus=class EventBus{_emitter=new C.EventEmitter;dispose(){this._emitter.dispose()}fire(e,t,i){iL.has(e)&&iM.set(e,t),this._emitter.fire({name:e,data:t,source:i?.source})}fireAsync(e,t,i){queueMicrotask(()=>this.fire(e,t,i))}getCachedEventArgs(e){return iM.get(e)}on(e,t,i){return this._emitter.event(function(r){e===r.name&&t.call(i,r)},i)}};let iQ={done:!0,value:void 0};let StringIterator=class StringIterator{_value="";_pos=0;reset(e){return this._value=e,this._pos=0,this}next(){return this._pos+=1,this}hasNext(){return this._pos<this._value.length-1}cmp(e){return e.charCodeAt(0)-this._value.charCodeAt(this._pos)}value(){return this._value[this._pos]}};let PathIterator=class PathIterator{constructor(e=!0,t=!0){this._splitOnBackslash=e,this._caseSensitive=t}_value;_from;_to;reset(e){return this._value=e.replace(/\\$|\/$/,""),this._from=0,this._to=0,this.next()}hasNext(){return this._to<this._value.length}next(){this._from=this._to;let e=!0;for(;this._to<this._value.length;this._to++){let t=this._value.charCodeAt(this._to);if(t===_.rE.Slash||this._splitOnBackslash&&t===_.rE.Backslash){if(e)this._from++;else break}else e=!1}return this}cmp(e){return this._caseSensitive?(0,L.IV)(e,this._value,0,e.length,this._from,this._to):(0,L.ug)(e,this._value,0,e.length,this._from,this._to)}value(){return this._value.substring(this._from,this._to)}};let TernarySearchTreeNode=class TernarySearchTreeNode{segment;value;key;left;mid;right;isEmpty(){return!this.left&&!this.mid&&!this.right&&!this.value}};let TernarySearchTree=class TernarySearchTree{static forPaths(){return new TernarySearchTree(new PathIterator)}static forStrings(){return new TernarySearchTree(new StringIterator)}_iter;_root;constructor(e){this._iter=e}clear(){this._root=void 0}set(e,t){let i;let r=this._iter.reset(e);for(this._root||(this._root=new TernarySearchTreeNode,this._root.segment=r.value()),i=this._root;;){let e=r.cmp(i.segment);if(e>0)i.left||(i.left=new TernarySearchTreeNode,i.left.segment=r.value()),i=i.left;else if(e<0)i.right||(i.right=new TernarySearchTreeNode,i.right.segment=r.value()),i=i.right;else if(r.hasNext())r.next(),i.mid||(i.mid=new TernarySearchTreeNode,i.mid.segment=r.value()),i=i.mid;else break}let s=i.value;return i.value=t,i.key=e,s}get(e){return this._getNode(e)?.value}_getNode(e){let t=this._iter.reset(e),i=this._root;for(;i;){let e=t.cmp(i.segment);if(e>0)i=i.left;else if(e<0)i=i.right;else if(t.hasNext())t.next(),i=i.mid;else break}return i}has(e){let t=this._getNode(e);return!(t?.value===void 0&&t?.mid===void 0)}delete(e){this._delete(e,!1)}deleteSuperstr(e){this._delete(e,!0)}_delete(e,t){let i=this._iter.reset(e),r=[],s=this._root;for(;s;){let e=i.cmp(s.segment);if(e>0)r.push([1,s]),s=s.left;else if(e<0)r.push([-1,s]),s=s.right;else if(i.hasNext())i.next(),r.push([0,s]),s=s.mid;else{for(t?(s.left=void 0,s.mid=void 0,s.right=void 0):s.value=void 0;r.length>0&&s.isEmpty();){let[e,t]=r.pop();switch(e){case 1:t.left=void 0;break;case 0:t.mid=void 0;break;case -1:t.right=void 0}s=t}break}}}findSubstr(e){let t;let i=this._iter.reset(e),r=this._root;for(;r;){let e=i.cmp(r.segment);if(e>0)r=r.left;else if(e<0)r=r.right;else if(i.hasNext())i.next(),t=r.value||t,r=r.mid;else break}return r?.value||t}findSuperstr(e,t=!1){let i=this._iter.reset(e),r=this._root;for(;r;){let e=i.cmp(r.segment);if(e>0)r=r.left;else if(e<0)r=r.right;else if(i.hasNext())i.next(),r=r.mid;else{if(!r.mid)return;return r=r.mid,{[Symbol.iterator]:()=>this._nodeIterator(r,t)}}}}_nodeIterator(e,t=!1){let i,r,s;return{next:()=>(s||(s=[],r=0,this._forEach(e,e=>s.push(e),t)),r>=s.length)?iQ:(i?i.value=s[r++]:i={done:!1,value:s[r++]},i)}}forEach(e){this._forEach(this._root,e)}_forEach(e,t,i=!1){void 0!==e&&(this._forEach(e.left,t,i),e.value&&t(e.value,e.key),i||this._forEach(e.mid,t,i),this._forEach(e.right,t,i))}any(){return void 0!==this._root&&!this._root.isEmpty()}count(e){return void 0===this._root||this._root.isEmpty()?0:(0,eN.UB)(this.entries(),void 0===e?void 0:([,t])=>e(t))}entries(){return this._iterator(this._root)}values(){return(0,eN.kH)(this.entries(),([,e])=>e)}highlander(){let e,t;if(void 0===this._root||this._root.isEmpty())return;let i=this.entries(),r=0;for(;!(e=i.next()).done;)if(t=e.value,++r>1)return;return t}some(e){return!(void 0===this._root||this._root.isEmpty())&&(0,eN.K6)(this.entries(),([,t])=>e(t))}*[Symbol.iterator](){yield*this._iterator(this._root)}*_iterator(e){e&&(yield*this._iterator(e.left),e.value&&(yield[e.key,e.value]),yield*this._iterator(e.mid),yield*this._iterator(e.right))}};var iG=Object.defineProperty,iY=Object.getOwnPropertyDescriptor,iV=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?iY(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iG(t,i,o),o};let iz=new Uint8Array(0);function iH(e){let t=(0,tm.my)(e)?e:tm.wv.fromRevisionUri(e);return{path:t.relativePath,ref:t.sha,repoPath:t.repoPath}}let GitFileSystemProvider=class GitFileSystemProvider{constructor(e){this.container=e,this._disposable=C.Disposable.from(C.workspace.registerFileSystemProvider(_.cl.GitLens,this,{isCaseSensitive:tu.Co,isReadonly:!0}))}_disposable;_searchTreeMap=new Map;dispose(){this._disposable.dispose()}_onDidChangeFile=new C.EventEmitter;get onDidChangeFile(){return this._onDidChangeFile.event}copy(e,t,i){throw C.FileSystemError.NoPermissions(e)}createDirectory(e){throw C.FileSystemError.NoPermissions(e)}delete(e,t){throw C.FileSystemError.NoPermissions(e)}async readDirectory(e){let{path:t,ref:i,repoPath:r}=iH(e),s=await this.getTree(t,i,r);if(void 0===s)throw C.FileSystemError.FileNotFound(e);return[...(0,eN.kH)(s,e=>[null!=t&&0!==t.length?(0,q.ay)((0,q.U3)(t,e.path)):e.path,ij(e.type)])]}async readFile(e){let{path:t,ref:i,repoPath:r}=iH(e);if(i===Q.E1)return iz;let s=await this.container.git.getRevisionContent(r,t,i);return null!=s?s:iz}rename(e,t,i){throw C.FileSystemError.NoPermissions(e)}async stat(e){let t;let{path:i,ref:r,repoPath:s}=iH(e);if(r===Q.E1)return{type:C.FileType.File,size:0,ctime:0,mtime:0};let o=this._searchTreeMap.get(r);if(null!=o)t=(await o).get(`/~/${i}`);else{if(null==i||0===i.length){if(null==await this.getTree(i,r,s))throw C.FileSystemError.FileNotFound(e);return{type:C.FileType.Directory,size:0,ctime:0,mtime:0}}t=await this.container.git.getTreeEntryForRevision(s,i,r)}if(null==t)throw C.FileSystemError.FileNotFound(e);return{type:ij(t.type),size:t.size,ctime:0,mtime:0}}watch(){return{dispose:()=>{}}}writeFile(e){throw C.FileSystemError.NoPermissions(e)}async createSearchTree(e,t){let i=TernarySearchTree.forPaths(),r=await this.container.git.getTreeForRevision(t,e);for(let e of(i.set("~",{ref:"",oid:"",path:"~",size:0,type:"tree"}),r))i.set(`~/${e.path}`,e);return i}getOrCreateSearchTree(e,t){let i=this._searchTreeMap.get(e);return void 0===i&&(i=this.createSearchTree(e,t),this._searchTreeMap.set(e,i)),i}async getTree(e,t,i){return(await this.getOrCreateSearchTree(t,i)).findSuperstr(`/~/${e}`,!0)}};function ij(e){switch(e){case"blob":return C.FileType.File;case"tree":return C.FileType.Directory;default:return C.FileType.Unknown}}iV([(0,eW.u_)()],GitFileSystemProvider.prototype,"readDirectory",1),iV([(0,eW.u_)()],GitFileSystemProvider.prototype,"readFile",1),iV([(0,eW.u_)()],GitFileSystemProvider.prototype,"stat",1);var iJ=i(2804),iK=i(7880),iZ=i(7068),iX=i(7824),i0=Object.defineProperty,i1=Object.getOwnPropertyDescriptor,i2=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?i1(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&i0(t,i,o),o};let i4=Object.freeze([]),i6=Object.freeze({dispose:()=>{}}),i3=new Map([["master",100],["main",15],["default",10],["develop",5],["development",1]]);let GitProviderService=class GitProviderService{constructor(e){this.container=e,this._initializing=(0,t0.Qv)(),this._disposable=C.Disposable.from(e.subscription.onDidChange(this.onSubscriptionChanged,this),C.window.onDidChangeWindowState(this.onWindowStateChanged,this),C.workspace.onDidChangeWorkspaceFolders(this.onWorkspaceFoldersChanged,this),A.i.onDidChange(this.onConfigurationChanged,this),e.integrations.onDidChangeConnectionState(e=>{"connected"===e.reason&&(0,td.ic)("failed"),this.resetCaches("providers"),this.updateContext()}),C.workspace.isTrusted?i6:C.workspace.onDidGrantWorkspaceTrust(()=>{C.workspace.isTrusted&&C.workspace.workspaceFolders?.length&&this.discoverRepositories(C.workspace.workspaceFolders,{force:!0})}),...this.registerCommands()),this.container.BranchDateFormatting.reset(),this.container.CommitDateFormatting.reset(),this.container.CommitShaFormatting.reset(),this.container.PullRequestDateFormatting.reset(),this.updateContext()}_onDidChangeProviders=new C.EventEmitter;get onDidChangeProviders(){return this._onDidChangeProviders.event}fireProvidersChanged(e,t){this.container.telemetry.enabled&&(this.container.telemetry.setGlobalAttributes({"providers.count":this._providers.size,"providers.ids":(0,eN.kn)(this._providers.keys(),",")}),this.container.telemetry.sendEvent("providers/changed",{"providers.added":e?.length??0,"providers.removed":t?.length??0})),this._etag=Date.now(),this._onDidChangeProviders.fire({added:e??[],removed:t??[],etag:this._etag})}_onDidChangeRepositories=new C.EventEmitter;get onDidChangeRepositories(){return this._onDidChangeRepositories.event}fireRepositoriesChanged(e,t){if(this.container.telemetry.enabled){let i=this.openRepositories.map(e=>e.uri.scheme);this.container.telemetry.setGlobalAttributes({"repositories.count":i.length,"repositories.schemes":(0,N.Se)(i,",")}),this.container.telemetry.sendEvent("repositories/changed",{"repositories.added":e?.length??0,"repositories.removed":t?.length??0})}this._etag=Date.now(),this._accessCache.clear(),this._reposVisibilityCache=void 0,this._onDidChangeRepositories.fire({added:e??[],removed:t??[],etag:this._etag}),e?.length&&this.container.telemetry.enabled&&setTimeout(async()=>{for(let t of e){let e=new Set;for(let i of(await t.getRemotes()))e.add(i.provider?.id??"unknown");this.container.telemetry.sendEvent("repository/opened",{"repository.id":t.idHash,"repository.scheme":t.uri.scheme,"repository.closed":t.closed,"repository.folder.scheme":t.folder?.uri.scheme,"repository.provider.id":t.provider.id,"repository.remoteProviders":(0,eN.kn)(e,",")})}},0)}_onDidChangeRepository=new C.EventEmitter;get onDidChangeRepository(){return this._onDidChangeRepository.event}supportedSchemes=new Set;_bestRemotesCache=new Map;_disposable;_initializing;_pendingRepositories=new Map;_providers=new Map;_repositories=new iZ.y4;_visitedPaths=new t1.AH;dispose(){this._disposable.dispose(),this._providers.clear(),this._repositories.forEach(e=>e.dispose()),this._repositories.clear()}_etag=0;get etag(){return this._etag}onConfigurationChanged(e){(A.i.changed(e,"defaultDateFormat")||A.i.changed(e,"defaultDateSource")||A.i.changed(e,"defaultDateStyle"))&&(this.container.BranchDateFormatting.reset(),this.container.CommitDateFormatting.reset(),this.container.PullRequestDateFormatting.reset()),A.i.changed(e,"advanced.abbreviatedShaLength")&&this.container.CommitShaFormatting.reset(),A.i.changed(e,"views.contributors.showAllBranches")&&this.resetCaches("contributors"),null!=e&&A.i.changed(e,"integrations.enabled")&&this.updateContext()}registerCommands(){return[(0,iX.or)("gitlens.plus.resetRepositoryAccess",()=>this.clearAllRepoVisibilityCaches()),(0,iX.or)("gitlens.plus.refreshRepositoryAccess",()=>this.clearAllOpenRepoVisibilityCaches())]}onSubscriptionChanged(e){this._accessCache.clear(),this._subscription=e.current}onWindowStateChanged(e){e.focused?this._repositories.forEach(e=>e.resume()):this._repositories.forEach(e=>e.suspend())}onWorkspaceFoldersChanged(e){if(this.container.telemetry.enabled){let e=C.workspace.workspaceFolders?.map(e=>e.uri.scheme);this.container.telemetry.setGlobalAttributes({"folders.count":e?.length??0,"folders.schemes":null!=e?(0,N.Se)(e,", "):""})}if(e.added.length&&this.discoverRepositories(e.added),e.removed.length){let t=[];for(let i of e.removed){let e=this._repositories.getClosest(i.uri);null!=e&&(this._repositories.remove(e.uri,!1),t.push(e))}t.length&&(this.updateContext(),queueMicrotask(()=>{this.fireRepositoriesChanged([],t),t.forEach(e=>e.dispose())}))}}get hasProviders(){return 0!==this._providers.size}get registeredProviders(){return[...(0,eN.kH)(this._providers.values(),e=>({...e.descriptor}))]}get openRepositories(){if(0===this.repositoryCount)return i4;let e=[...(0,eN.IF)(this.repositories,e=>!e.closed)];return 0===e.length?e:ty.Oq.sort(e)}get openRepositoryCount(){return 0===this.repositoryCount?0:(0,eN.UB)(this.repositories,e=>!e.closed)}get repositories(){return this._repositories.values()}get repositoryCount(){return this._repositories.count}get highlander(){return 1===this.repositoryCount||1===this.openRepositoryCount?(0,eN.KY)(this._repositories.values()):void 0}register(e,t){if(e!==t.descriptor.id)throw Error(`Id '${e}' must match provider id '${t.descriptor.id}'`);if(this._providers.has(e))throw Error(`Provider '${e}' has already been registered`);for(let i of(this._providers.set(e,t),t.supportedSchemes))this.supportedSchemes.add(i);let i=[],r=t.openRepositoryInitWatcher?.();null!=r&&i.push(r,r.onDidCreate(e=>{let t=C.workspace.getWorkspaceFolder(e);null!=t&&this.discoverRepositories([t],{force:!0})}));let s=C.Disposable.from(t,...i,t.onDidChange(()=>{eq.YJ.debug(`GitProvider(${e}).onDidChange()`);let{workspaceFolders:t}=C.workspace;t?.length&&this.discoverRepositories(t,{force:!0})}),t.onDidChangeRepository(async i=>{if(eq.YJ.debug(`GitProvider(${e}).onDidChangeRepository(e=${i.repository.toString()})`),i.changed(ty.c7.Remotes,ty.c7.RemoteProviders,ty.MR.Any)&&this._bestRemotesCache.clear(),i.changed(ty.c7.Closed,ty.MR.Any)?(this.updateContext(),queueMicrotask(()=>this.fireRepositoriesChanged([],[i.repository]))):i.changed(ty.c7.Opened,ty.MR.Any)&&(this.updateContext(),queueMicrotask(()=>this.fireRepositoriesChanged([i.repository],[]))),i.changed(ty.c7.Remotes,ty.MR.Any)){let e=await t.getRemotes(i.repository.path),r=this.getVisibilityInfoFromCache(i.repository.path);null!=r&&this.checkVisibilityCachedRemotes(i.repository.path,r,e)}this._onDidChangeRepository.fire(i)}),t.onDidCloseRepository(t=>{let i=this._repositories.get(t.uri);eq.YJ.debug(`GitProvider(${e}).onDidCloseRepository(e=${i?.toString()??t.uri.toString()})`),null!=i&&(i.closed=!0)}),t.onDidOpenRepository(t=>{let i=this._repositories.get(t.uri);eq.YJ.debug(`GitProvider(${e}).onDidOpenRepository(e=${i?.toString()??t.uri.toString()})`),null!=i?i.closed=!1:this.getOrOpenRepository(t.uri)}));return this.fireProvidersChanged([t]),null!=this._initializing&&this.onWorkspaceFoldersChanged({added:C.workspace.workspaceFolders??[],removed:[]}),{dispose:()=>{s.dispose(),this._providers.delete(e);let i=[];for(let t of[...this._repositories.values()])t?.provider.id===e&&(this._repositories.remove(t.uri,!1),i.push(t));let{deactivating:r}=this.container;r||this.updateContext(),i.length&&queueMicrotask(()=>{r||this.fireRepositoriesChanged([],i),i.forEach(e=>e.dispose())}),r||this.fireProvidersChanged([],[t])}}}async registrationComplete(){let e=(0,eM.b1)(),{workspaceFolders:t}=C.workspace;t?.length?(await this.discoverRepositories(t),0===this.repositoryCount&&tu.e6&&setTimeout(()=>{({workspaceFolders:t}=C.workspace),t?.length&&this.discoverRepositories(t,{force:!0})},1e3)):(this._initializing?.fulfill(this._etag),this._initializing=void 0,this.updateContext());let i=A.i.getCore("git.autoRepositoryDetection");this.container.telemetry.enabled&&setTimeout(()=>this.container.telemetry.sendEvent("providers/registrationComplete",{"config.git.autoRepositoryDetection":i}),0),(0,eM._W)(e,` ${_.or.Dot} repositories=${this.repositoryCount}, workspaceFolders=${t?.length}, git.autoRepositoryDetection=${i}`)}getOpenProviders(){return[...this.getOpenRepositoriesByProvider().keys()].map(e=>this._providers.get(e))}getOpenRepositories(e){return(0,eN.IF)(this.repositories,t=>!t.closed&&(null==e||e===t.provider.id))}getOpenRepositoriesByProvider(){let e=[...(0,eN.IF)(this.repositories,e=>!e.closed)];return 0===e.length?new Map:(0,eN.ms)(e,e=>e.provider.id)}hasOpenRepositories(e){return(0,eN.K6)(this.repositories,t=>!t.closed&&(null==e||e===t.provider.id))}_discoveredWorkspaceFolders=new Map;_discoveringRepositories;get isDiscoveringRepositories(){return(0,t0.Y7)(this._discoveringRepositories)??(0,t0.Y7)(this._initializing)}async discoverRepositories(e,t){this._discoveringRepositories?.pending&&(await this._discoveringRepositories.promise,this._discoveringRepositories=void 0);let i=this._initializing??(0,t0.Qv)();this._discoveringRepositories=i,this._initializing=void 0;try{let i=[];for(let r of e){if(!t?.force&&this._discoveredWorkspaceFolders.has(r))continue;let e=this.discoverRepositoriesCore(r);i.push(e),this._discoveredWorkspaceFolders.set(r,e)}if(0===i.length)return;let r=await Promise.allSettled(i),s=(0,eN.sX)((0,eN.IF)(r,e=>"fulfilled"===e.status),e=>e.value),o=[];for(let e of s)this._repositories.add(e),e.closed||o.push(e);this.updateContext(),o.length&&queueMicrotask(()=>this.fireRepositoriesChanged(o))}finally{queueMicrotask(()=>{i.fulfill(this._etag)})}}async discoverRepositoriesCore(e){let{provider:t}=this.getProvider(e.uri);try{return await t.discoverRepositories(e.uri)}catch(i){return this._discoveredWorkspaceFolders.delete(e),eq.YJ.error(i,`${t.descriptor.name} Provider(${t.descriptor.id}) failed discovering repositories in ${e.uri.toString(!0)}`),[]}}async findRepositories(e,t){let{provider:i}=this.getProvider(e);return i.discoverRepositories(e,t)}_subscription;async getSubscription(){return this._subscription??(this._subscription=await this.container.subscription.getSubscription())}_accessCache=new Map;async access(e,t){if(null==t){let i=this._accessCache.get(void 0);return null==i&&(i=this.accessCore(e,t),this._accessCache.set(void 0,i)),i}let{path:i}=this.getProvider(t),r=this._accessCache.get(i);return null==r&&(r=this.accessCore(e,t),this._accessCache.set(i,r)),r}async accessCore(e,t){let i=await this.getSubscription();this.container.telemetry.enabled&&queueMicrotask(()=>void this.visibility());let r=i.plan.effective.id;if((0,iK.Wk)(r))return{allowed:i.account?.verified!==!1,subscription:{current:i}};function s(e,t=!1){let{path:r}=this.getProvider(e),s=t?void 0:this._accessCache.get(r);return null==s&&(s=this.visibility(e).then(e=>"private"===e?{allowed:!1,subscription:{current:i,required:iK._o.Pro},visibility:e}:{allowed:!0,subscription:{current:i},visibility:e},()=>({allowed:!0,subscription:{current:i}})),this._accessCache.set(r,s)),s}if(null==t){let e=this.openRepositories;if(0===e.length)return{allowed:!1,subscription:{current:i}};if(1===e.length)return s.call(this,e[0].path);switch(await this.visibility()){case"private":return{allowed:!1,subscription:{current:i,required:iK._o.Pro},visibility:"private"};case"mixed":return{allowed:"mixed",subscription:{current:i,required:iK._o.Pro}};default:return{allowed:!0,subscription:{current:i},visibility:"public"}}}return s.call(this,t,!0)}async ensureAccess(e,t){let{allowed:i,subscription:r}=await this.access(e,t);if(!1===i)throw new iJ.oh(r.current,r.required)}supports(e,t){let{provider:i}=this.getProvider(e);return i.supports(t)}_reposVisibilityCache;_repoVisibilityCache;ensureRepoVisibilityCache(){if(null==this._repoVisibilityCache){let e=this.container.storage.get("repoVisibility")?.map(([e,t])=>[e,{visibility:t.visibility,timestamp:t.timestamp,remotesHash:t.remotesHash}]);this._repoVisibilityCache=new Map(e)}}clearRepoVisibilityCache(e){if(null==e)this._repoVisibilityCache=void 0,this.container.storage.delete("repoVisibility");else{e?.forEach(e=>this._repoVisibilityCache?.delete(e));let t=Array.from(this._repoVisibilityCache?.entries()??[]);0===t.length?this.container.storage.delete("repoVisibility"):this.container.storage.store("repoVisibility",t)}}getVisibilityInfoFromCache(e){this.ensureRepoVisibilityCache();let t=this._repoVisibilityCache?.get(e);if(null!=t){if(Date.now()-t.timestamp>2592e6){this.clearRepoVisibilityCache([e]);return}return t}}checkVisibilityCachedRemotes(e,t,i){if(null==t)return!0;if("public"===t.visibility){if(0==i.length||!i.some(e=>e.remoteKey===t.remotesHash))return this.clearRepoVisibilityCache([e]),!1}else if("private"===t.visibility&&(0,tw.l3)(i)!==t.remotesHash)return this.clearRepoVisibilityCache([e]),!1;return!0}updateVisibilityCache(e,t){this.ensureRepoVisibilityCache(),this._repoVisibilityCache?.set(e,t),this.container.storage.store("repoVisibility",Array.from(this._repoVisibilityCache.entries()))}clearAllRepoVisibilityCaches(){this.clearRepoVisibilityCache()}clearAllOpenRepoVisibilityCaches(){let e=this.openRepositories.map(e=>this.getProvider(e.path).path);this.clearRepoVisibilityCache(e)}async visibility(e){if(null==e){let e=this._reposVisibilityCache;return null==e&&(e=await this.visibilityCore(),this.container.telemetry.enabled&&(this.container.telemetry.setGlobalAttribute("repositories.visibility",e),this.container.telemetry.sendEvent("repositories/visibility")),this._reposVisibilityCache=e),e}let{path:t}=this.getProvider(e),i=this.getVisibilityInfoFromCache(t)?.visibility;return null==i&&(i=await this.visibilityCore(e),this.container.telemetry.enabled&&setTimeout(()=>{let t=this.getRepository(e);this.container.telemetry.sendEvent("repository/visibility",{"repository.visibility":i,"repository.id":t?.idHash,"repository.scheme":t?.uri.scheme,"repository.closed":t?.closed,"repository.folder.scheme":t?.folder?.uri.scheme,"repository.provider.id":t?.provider.id})},0)),i}async visibilityCore(e){async function t(e){let{provider:t,path:i}=this.getProvider(e),r=await t.getRemotes(i,{sort:!0}),s=this.getVisibilityInfoFromCache(i);if(null==s||!this.checkVisibilityCachedRemotes(i,s,r)){let[e,r]=await t.visibility(i);return"local"!==e&&this.updateVisibilityCache(i,{visibility:e,timestamp:Date.now(),remotesHash:r}),e}return s.visibility}if(null==e){let e=this.openRepositories;if(0===e.length)return"private";if(1===e.length)return t.call(this,e[0].path);let i=!1,r=!1,s=!1;for await(let o of(0,t0.wX)(e.map(e=>t.call(this,e.path))))if("fulfilled"===o.status){if("public"===o.value){if(s||r)return"mixed";i=!0}else if("local"===o.value){if(i||r)return"mixed";s=!0}else if("private"===o.value){if(i||s)return"mixed";r=!0}}return i?"public":s?"local":"private"}return t.call(this,e)}_context={enabled:!1,disabled:!1};async setEnabledContext(e){let t=!e;if(e||null==this._initializing||(t=!this.container.storage.getWorkspace("assumeRepositoriesOnStartup")),this.container.telemetry.setGlobalAttribute("enabled",e),this._context.enabled===e&&this._context.disabled===t)return;let i=[];this._context.enabled!==e&&(this._context.enabled=e,i.push((0,iN.Qr)("gitlens:enabled",e))),this._context.disabled!==t&&(this._context.disabled=t,i.push((0,iN.Qr)("gitlens:disabled",t))),await Promise.allSettled(i),null==this._initializing&&this.container.storage.storeWorkspace("assumeRepositoriesOnStartup",e).catch()}_sendProviderContextTelemetryDebounced;updateContext(){if(this.container.deactivating)return;let e=this.openRepositoryCount,t=0!==e;async function i(){let e=A.i.get("integrations.enabled"),i=this.container.telemetry.enabled,r=new Set,s=!1,o=!1,n=!1;if(t)for(let t of this._repositories.values()){if(i)for(let e of(await t.getRemotes()))r.add(e.provider?.id??"unknown");if(!n&&e&&(n=await t.hasRemoteWithIntegration({includeDisconnected:!1}))&&(o=!0,s=!0),!o&&e&&(o=await t.hasRemoteWithIntegration())&&(s=!0),s||(s=await t.hasRemotes()),s&&(o&&n||!e))break}i&&(this.container.telemetry.setGlobalAttributes({"repositories.hasRemotes":s,"repositories.hasRichRemotes":o,"repositories.hasConnectedRemotes":n,"repositories.remoteProviders":(0,eN.kn)(r,",")}),null==this._sendProviderContextTelemetryDebounced&&(this._sendProviderContextTelemetryDebounced=(0,tX.Cu)(()=>this.container.telemetry.sendEvent("providers/context"),2500)),this._sendProviderContextTelemetryDebounced()),await Promise.allSettled([(0,iN.Qr)("gitlens:hasRemotes",s),(0,iN.Qr)("gitlens:hasRichRemotes",o),(0,iN.Qr)("gitlens:hasConnectedRemotes",n)])}this.setEnabledContext(t),null==this._initializing&&(this.container.telemetry.setGlobalAttributes({enabled:t,"repositories.count":e}),t&&(i.call(this),this._providers.forEach(e=>e.updateContext?.())))}getProvider(e){let t;if(null==e||"string"!=typeof e&&!this.supportedSchemes.has(e.scheme))throw new iJ.UZ(e);"string"==typeof e?t=(0,q.wD)(e)??_.cl.File:{scheme:t}=e;let i=new Set;for(let r of this._providers.values()){let s=r.canHandlePathOrUri(t,e);null!=s&&i.add({provider:r,path:s})}if(0===i.size)throw new iJ.UZ(e);if(i.size>1){for(let e of i)if(this.hasOpenRepositories(e.provider.descriptor.id))return e}return(0,eN.KY)(i)}getAbsoluteUri(e,t){if(null==t)return"string"==typeof e?(0,q.sA)(e)?C.Uri.parse(e,!0):C.Uri.file(e):e;if("string"!=typeof t&&"string"==typeof e){let i=(0,q.ay)(e);if(!(0,q.ic)(i))return C.Uri.joinPath(t,i)}let{provider:i}=this.getProvider(t);return i.getAbsoluteUri(e,t)}async getBestRevisionUri(e,t,i){if(null==e||i===Q.E1)return;let{provider:r,path:s}=this.getProvider(e);return r.getBestRevisionUri(s,r.getRelativePath(t,s),i)}getRelativePath(e,t){let{provider:i}=this.getProvider(e instanceof C.Uri?e:t);return i.getRelativePath(e,t)}getRevisionUri(e,t,i){let r,s;"string"==typeof e?(s=e,r="string"==typeof t?t:t?.originalPath??t?.path??""):(s=e.sha,i=e.repoPath,r=(0,q.oT)(e));let{provider:o,path:n}=this.getProvider(i);return o.getRevisionUri(n,o.getRelativePath(r,n),s)}getWorkingUri(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getWorkingUri(r,t)}addRemote(e,t,i,r){let{provider:s,path:o}=this.getProvider(e);return s.addRemote(o,t,i,r)}pruneRemote(e,t){let{provider:i,path:r}=this.getProvider(e);return i.pruneRemote(r,t)}removeRemote(e,t){let{provider:i,path:r}=this.getProvider(e);return i.removeRemote(r,t)}applyChangesToWorkingFile(e,t,i){let{provider:r}=this.getProvider(e);return r.applyChangesToWorkingFile(e,t,i)}async applyUnreachableCommitForPatch(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.applyUnreachableCommitForPatch?.(s,t,i)}checkout(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.checkout(s,t,i)}async clone(e,t){let{provider:i}=this.getProvider(t);return i.clone?.(e,t)}async createUnreachableCommitForPatch(e,t,i,r){let{provider:s,path:o}=this.getProvider(e);return s.createUnreachableCommitForPatch?.(o,t,i,r)}resetCaches(...e){(0===e.length||e.includes("providers"))&&this._bestRemotesCache.clear(),this.container.events.fire("git:cache:reset",{caches:e})}excludeIgnoredUris(e,t){let{provider:i,path:r}=this.getProvider(e);return i.excludeIgnoredUris(r,t)}fetch(e,t){let{provider:i,path:r}=this.getProvider(e);return i.fetch(r,t)}async fetchAll(e,t){if(null==e&&(e=this.openRepositories),0!==e.length){if(1===e.length){await e[0].fetch(t);return}await C.window.withProgress({location:C.ProgressLocation.Notification,title:`Fetching ${e.length} repositories`},()=>Promise.all(e.map(e=>e.fetch({progress:!1,...t}))))}}pull(e,t){let{provider:i,path:r}=this.getProvider(e);return i.pull(r,t)}async pullAll(e,t){if(null==e&&(e=this.openRepositories),0!==e.length){if(1===e.length){await e[0].pull(t);return}await C.window.withProgress({location:C.ProgressLocation.Notification,title:`Pulling ${e.length} repositories`},()=>Promise.all(e.map(e=>e.pull({progress:!1,...t}))))}}push(e,t){let{provider:i,path:r}=this.getProvider(e);return i.push(r,t)}async pushAll(e,t){if(null==e&&(e=this.openRepositories),0!==e.length){if(1===e.length){await e[0].push(t);return}await C.window.withProgress({location:C.ProgressLocation.Notification,title:`Pushing ${e.length} repositories`},()=>Promise.all(e.map(e=>e.push({progress:!1,...t}))))}}getAheadBehindCommitCount(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.getAheadBehindCommitCount(s,t,i)}async getBlame(e,t){let{provider:i}=this.getProvider(e);return i.getBlame(e,t)}async getBlameContents(e,t){let{provider:i}=this.getProvider(e);return i.getBlameContents(e,t)}async getBlameForLine(e,t,i,r){let{provider:s}=this.getProvider(e);return s.getBlameForLine(e,t,i,r)}async getBlameForLineContents(e,t,i,r){let{provider:s}=this.getProvider(e);return s.getBlameForLineContents(e,t,i,r)}async getBlameForRange(e,t){let{provider:i}=this.getProvider(e);return i.getBlameForRange(e,t)}async getBlameForRangeContents(e,t,i){let{provider:r}=this.getProvider(e);return r.getBlameForRangeContents(e,t,i)}getBlameRange(e,t,i){let{provider:r}=this.getProvider(t);return r.getBlameRange(e,t,i)}async getBranch(e){if(null==e)return;let{provider:t,path:i}=this.getProvider(e);return t.getBranch(i)}async getBranchAheadRange(e){if(e.state.ahead>0)return(0,F._u)(e.upstream?.name,e.ref);if(null==e.upstream){let{values:t}=await this.getBranches(e.repoPath,{filter:e=>i3.has(e.name)});if(t.length>0){let i;for(let e of t){let t=i3.get(e.name);if((null==i||i.weight<t)&&(i={weight:t,branch:e}),100===i.weight)break}let r=i.branch.upstream?.name??i.branch.ref;if(r!==e.ref)return(0,F._u)(r,e.ref)}}}async getBranches(e,t){if(null==e)return{values:[]};let{provider:i,path:r}=this.getProvider(e);return i.getBranches(r,t)}async getBranchesAndTagsTipsFn(e,t){let[i,r]=await Promise.allSettled([this.getBranches(e),this.getTags(e)]),s=t0.Cv(i)?.values??[],o=t0.Cv(r)?.values??[],n=(0,eN.uU)(s.concat(o),e=>e.sha,e=>{if(t){if(e.name===t)return;if("branch"===e.refType&&e.getNameWithoutRemote()===t)return{name:e.name,compactName:e.getRemoteName(),type:e.refType}}return{name:e.name,compactName:void 0,type:e.refType}});return(e,t)=>{let i=n.get(e);if(null!=i&&0!==i.length){if(!t?.compact)return i.map(e=>`${t?.icons?`${"tag"===e.type?"$(tag)":"$(git-branch)"} `:""}${e.name}`).join(", ");if(i.length>1){let[e]=i;return`${t?.icons?`${"tag"===e.type?"$(tag)":"$(git-branch)"} `:""}${e.compactName??e.name}, ${_.or.Ellipsis}`}return i.map(e=>`${t?.icons?`${"tag"===e.type?"$(tag)":"$(git-branch)"} `:""}${e.compactName??e.name}`).join(", ")}}}getChangedFilesCount(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getChangedFilesCount(r,t)}async getCommit(e,t){let{provider:i,path:r}=this.getProvider(e);if(t===Q.Oy||t===Q.QD){let i=new Date,s=await this.getCurrentUser(e);return new M.Ck(this.container,r,t,new M.Sg("You",s?.email??void 0,i),new M.Sg("You",s?.email??void 0,i),"Uncommitted changes",[],"Uncommitted changes",void 0,void 0,[])}return i.getCommit(r,t)}getCommitBranches(e,t,i,r){let{provider:s,path:o}=this.getProvider(e);return s.getCommitBranches(o,t,i,r)}getCommitCount(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getCommitCount(r,t)}async getCommitForFile(e,t,i){if(null==e)return;let{provider:r,path:s}=this.getProvider(e);return r.getCommitForFile(s,t,i)}getCommitsForGraph(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.getCommitsForGraph(s,t,i)}getCommitTags(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.getCommitTags(s,t,i)}async getConfig(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getConfig?.(r,t)}async setConfig(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.setConfig?.(s,t,i)}async getContributors(e,t){if(null==e)return[];let{provider:i,path:r}=this.getProvider(e);return i.getContributors(r,t)}getCurrentUser(e){let{provider:t,path:i}=this.getProvider(e);return t.getCurrentUser(i)}async getDefaultBranchName(e,t){if(null==e)return;let{provider:i,path:r}=this.getProvider(e);return i.getDefaultBranchName(r,t)}async getDiff(e,t,i,r){let{provider:s,path:o}=this.getProvider(e);return s.getDiff?.(o,t,i,r)}async getDiffFiles(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getDiffFiles?.(r,t)}getDiffForFile(e,t,i){let{provider:r}=this.getProvider(e);return r.getDiffForFile(e,t,i)}getDiffForFileContents(e,t,i){let{provider:r}=this.getProvider(e);return r.getDiffForFileContents(e,t,i)}getDiffForLine(e,t,i,r){let{provider:s}=this.getProvider(e);return s.getDiffForLine(e,t,i,r)}getDiffStatus(e,t,i,r){let{provider:s,path:o}=this.getProvider(e);return s.getDiffStatus(o,t,i,r)}async getFileStatusForCommit(e,t,i){if(i===Q.E1||(0,F.bP)(i))return;let{provider:r,path:s}=this.getProvider(e);return r.getFileStatusForCommit(s,t,i)}getGitDir(e){let{provider:t,path:i}=this.getProvider(e);return Promise.resolve(t.getGitDir?.(i))}getLastFetchedTimestamp(e){let{provider:t,path:i}=this.getProvider(e);return t.getLastFetchedTimestamp(i)}async getLog(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getLog(r,t)}async getLogRefsOnly(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getLogRefsOnly(r,t)}async getLogForFile(e,t,i){if(null==e)return;let{provider:r,path:s}=this.getProvider(e);return r.getLogForFile(s,t,i)}async getMergeBase(e,t,i,r){let{provider:s,path:o}=this.getProvider(e);return s.getMergeBase(o,t,i,r)}async getMergeStatus(e){let{provider:t,path:i}=this.getProvider(e);return t.getMergeStatus(i)}async getRebaseStatus(e){let{provider:t,path:i}=this.getProvider(e);return t.getRebaseStatus(i)}getNextComparisonUris(e,t,i,r=0){if(!i)return Promise.resolve(void 0);let{provider:s,path:o}=this.getProvider(e);return s.getNextComparisonUris(o,t,i,r)}async getOldestUnpushedRefForFile(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getOldestUnpushedRefForFile(r,t)}getPreviousComparisonUris(e,t,i,r=0){if(i===Q.E1)return Promise.resolve(void 0);let{provider:s,path:o}=this.getProvider(e);return s.getPreviousComparisonUris(o,t,i,r)}getPreviousComparisonUrisForLine(e,t,i,r,s=0){if(r===Q.E1)return Promise.resolve(void 0);let{provider:o,path:n}=this.getProvider(e);return o.getPreviousComparisonUrisForLine(n,t,i,r,s)}async getIncomingActivity(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getIncomingActivity(r,t)}async getBestRemoteWithProvider(e,t){return(await this.getBestRemotesWithProviders(e,t))[0]}async getBestRemotesWithProviders(e,t){if(null==e)return[];"string"==typeof e&&(e=this.getAbsoluteUri(e));let i=(0,iZ.w3)(e),r=this._bestRemotesCache.get(i);return null==r&&(r=(async function(){let i=await this.getRemotesWithProviders(e,{sort:!0},t);if(0===i.length)return[];if(1===i.length)return[...i];if(t?.isCancellationRequested)throw new iJ.WO;let r=i.find(e=>e.default)?.name,s=(await this.getBranch(i[0].repoPath))?.getRemoteName(),o=[],n=!1;for(let e of i){let i;switch(e.name){case r:i=1e3;break;case s:i=6;break;case"upstream":i=5;break;case"origin":i=4;break;default:i=0}if(i>0&&i<1e3&&!n){let r=e.getIntegration();if(null!=r&&(r.maybeConnected||void 0===r.maybeConnected&&await r.isConnected())){if(t?.isCancellationRequested)throw new iJ.WO;let s=await r.getRepositoryMetadata(e.provider.repoDesc,t);if(t?.isCancellationRequested)throw new iJ.WO;null!=s&&(i+=s.isFork?-3:3,n=!s.isFork)}}o.push([i,e])}return o.sort(([e,t],[i,r])=>0===i&&0===e?(0,L.sd)(t.name,r.name):i-e),o.map(e=>e[1])}).call(this),this._bestRemotesCache.set(i,r)),[...await r]}async getBestRemoteWithIntegration(e,t,i){let r=await this.getBestRemotesWithProviders(e,i),s=t?.includeDisconnected??!1;for(let e of r)if(e.hasIntegration()){let i=this.container.integrations.getByRemote(e);if(null!=i){if(t?.filter?.(e,i)===!1)continue;if(s||!0===i.maybeConnected||void 0===i.maybeConnected&&(e.default||1===r.length)&&await i.isConnected())return e}}}async getRemotes(e,t,i){if(null==e)return[];let{provider:r,path:s}=this.getProvider(e);return r.getRemotes(s,t)}async getRemotesWithProviders(e,t,i){return(await this.getRemotes(e,t,i)).filter(e=>null!=e.provider)}async getRemotesWithIntegrations(e,t,i){return(await this.getRemotes(e,t,i)).filter(e=>e.hasIntegration())}getBestRepository(e,t){let i=this.repositoryCount;if(0!==i){if(1===i)return this.highlander;if(null!=e&&e instanceof C.Uri){let t=this.getRepository(e);if(null!=t)return t;e=void 0}return(null!=(t=e??t??C.window.activeTextEditor)?this.getRepository(t.document.uri):void 0)??this.highlander}}getBestRepositoryOrFirst(e,t){let i=this.repositoryCount;if(0!==i){if(1===i)return(0,eN.KY)(this._repositories.values());if(null!=e&&e instanceof C.Uri){let t=this.getRepository(e);if(null!=t)return t;e=void 0}return(null!=(t=e??t??C.window.activeTextEditor)?this.getRepository(t.document.uri):void 0)??(0,eN.KY)(this._repositories.values())}}async getOrOpenRepository(e,t){let i,r,s;if(null==e)return;let o=(0,eM.b1)();if("string"==typeof e){if(!e)return;i=this.getAbsoluteUri(e)}else i=e;let n=(0,q.oT)(i);if(null==(r=this.getRepository(i))&&this._discoveringRepositories?.pending&&(await this._discoveringRepositories.promise,r=this.getRepository(i)),t?.detectNested??A.i.get("detectNestedRepositories",i)){if(!t?.force&&this._visitedPaths.has(n))return r;{let e=await C.workspace.fs.stat(i),n=(0,q.oT)(i);if(eq.YJ.debug(o,`Ensuring URI is a folder; repository=${r?.toString()}, uri=${i.toString(!0)} stats.type=${e.type}, bestPath=${n}, visitedPaths.has=${this._visitedPaths.has(n)}`),(e.type&C.FileType.Directory)!==C.FileType.Directory&&(i=C.Uri.joinPath(i,".."),!t?.force&&this._visitedPaths.has(n)))return r;s=!0}}else if(null!=r)return r;let a=(0,iZ.w3)(i),l=this._pendingRepositories.get(a);return null==l&&(l=(async function(){let e;let{provider:l}=this.getProvider(i),h=await l.findRepositoryUri(i,s);if(this._visitedPaths.set(n),null==h)return;if(0!==this._repositories.count){if(null!=(r=this._repositories.get(h)))return r;e=this._repositories.getClosest(l.getAbsoluteUri(i,h))}let c=A.i.getCore("git.autoRepositoryDetection")??!0,u=t?.closeOnOpen??(!0!==c&&"openEditors"!==c);eq.YJ.log(o,`Repository found in '${h.toString(!0)}'`);let d=l.openRepository(e?.folder,h,!1,void 0,u),p=[];for(let e of d)this._repositories.add(e),e.closed||p.push(e);return this._pendingRepositories.delete(a),this.updateContext(),p.length&&queueMicrotask(()=>this.fireRepositoriesChanged(p)),r=1===d.length?d[0]:this.getRepository(i)}).call(this),this._pendingRepositories.set(a,l)),l}async getOrOpenRepositoryForEditor(e){return null==(e=e??C.window.activeTextEditor)?this.highlander:this.getOrOpenRepository(e.document.uri)}getRepository(e){if(0!==this.repositoryCount&&null!=e){if("string"==typeof e){if(!e)return;return this._repositories.getClosest(this.getAbsoluteUri(e))}return this._repositories.getClosest(e)}}async getLocalInfoFromRemoteUri(e,t){for(let i of this.openRepositories)for(let r of(await i.getRemotes())){let s=await r?.provider?.getLocalInfoFromRemoteUri(i,e,t);if(null!=s)return s}}async getStash(e){if(null==e)return;let{provider:t,path:i}=this.getProvider(e);return t.getStash(i)}async getStatusForFile(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getStatusForFile(r,t)}async getStatusForFiles(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getStatusForFiles(r,t)}async getStatusForRepo(e){if(null==e)return;let{provider:t,path:i}=this.getProvider(e);return t.getStatusForRepo(i)}async getTags(e,t){if(null==e)return{values:[]};let{provider:i,path:r}=this.getProvider(e);return i.getTags(r,t)}async getTreeEntryForRevision(e,t,i){if(null==e||!t)return;let{provider:r,path:s}=this.getProvider(e);return r.getTreeEntryForRevision(s,r.getRelativePath(t,s),i)}async getTreeForRevision(e,t){if(null==e)return[];let{provider:i,path:r}=this.getProvider(e);return i.getTreeForRevision(r,t)}getRevisionContent(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.getRevisionContent(s,t,i)}async getFirstCommitSha(e){let{provider:t,path:i}=this.getProvider(e);try{return await t.getFirstCommitSha?.(i)}catch{return}}getUniqueRepositoryId(e){return this.getFirstCommitSha(e)}async hasBranchOrTag(e,t){if(null==e)return!1;let{provider:i,path:r}=this.getProvider(e);return i.hasBranchOrTag(r,t)}async hasCommitBeenPushed(e,t){if(null==e)return!1;let{provider:i,path:r}=this.getProvider(e);return i.hasCommitBeenPushed(r,t)}async hasRemotes(e){if(null==e)return!1;let t=this.getRepository(e);return null!=t&&t.hasRemotes()}async hasTrackingBranch(e){if(null==e)return!1;let t=this.getRepository(e);return null!=t&&t.hasUpstreamBranch()}hasUnsafeRepositories(){for(let e of this._providers.values())if(e.hasUnsafeRepositories?.())return!0;return!1}isRepositoryForEditor(e,t){return null!=(t=t??C.window.activeTextEditor)&&e===this.getRepository(t.document.uri)}isTrackable(e){if(!this.supportedSchemes.has(e.scheme))return!1;let{provider:t}=this.getProvider(e);return t.isTrackable(e)}async isTracked(e){if(!this.supportedSchemes.has(e.scheme))return!1;let{provider:t}=this.getProvider(e);return t.isTracked(e)}async getDiffTool(e){if(null==e)return;let{provider:t,path:i}=this.getProvider(e);return t.getDiffTool(i)}async openDiffTool(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.openDiffTool(s,t,i)}async openDirectoryCompare(e,t,i,r){let{provider:s,path:o}=this.getProvider(e);return s.openDirectoryCompare(o,t,i,r)}async resolveReference(e,t,i,r){if(null!=i&&(0,F.w1)(t)&&(t="HEAD"),!t||t===Q.E1||null==i&&(0,F.kp)(t)||null!=i&&(0,F.bP)(t))return t;let{provider:s,path:o}=this.getProvider(e);return s.resolveReference(o,t,i,r)}async richSearchCommits(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.richSearchCommits(s,t,i)}searchCommits(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.searchCommits(s,t,i)}async runGitCommandViaTerminal(e,t,i,r){let{provider:s,path:o}=this.getProvider(e);return s.runGitCommandViaTerminal?.(o,t,i,r)}validateBranchOrTagName(e,t){let{provider:i,path:r}=this.getProvider(e);return i.validateBranchOrTagName(r,t)}async validatePatch(e,t){try{let{provider:i,path:r}=this.getProvider(e);return await i.validatePatch?.(r||void 0,t)??!1}catch{return!1}}async validateReference(e,t){if(null==t||0===t.length)return!1;if(t===Q.E1||(0,F.bP)(t))return!0;let{provider:i,path:r}=this.getProvider(e);return i.validateReference(r,t)}stageFile(e,t){let{provider:i,path:r}=this.getProvider(e);return i.stageFile(r,t)}stageDirectory(e,t){let{provider:i,path:r}=this.getProvider(e);return i.stageDirectory(r,t)}unstageFile(e,t){let{provider:i,path:r}=this.getProvider(e);return i.unstageFile(r,t)}unstageDirectory(e,t){let{provider:i,path:r}=this.getProvider(e);return i.unstageDirectory(r,t)}async stashApply(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.stashApply?.(s,t,i)}async stashDelete(e,t,i){let{provider:r,path:s}=this.getProvider(e);return r.stashDelete?.(s,t,i)}async stashRename(e,t,i,r,s){let{provider:o,path:n}=this.getProvider(e);return o.stashRename?.(n,t,i,r,s)}async stashSave(e,t,i,r){let{provider:s,path:o}=this.getProvider(e);return s.stashSave?.(o,t,i,r)}async stashSaveSnapshot(e,t){let{provider:i,path:r}=this.getProvider(e);return i.stashSaveSnapshot?.(r,t)}createWorktree(e,t,i){let{provider:r,path:s}=this.getProvider(e);return Promise.resolve(r.createWorktree?.(s,t,i))}async getWorktree(e,t){let{provider:i,path:r}=this.getProvider(e);return(await i.getWorktrees?.(r)??[]).find(t)}async getWorktrees(e){let{provider:t,path:i}=this.getProvider(e);return await t.getWorktrees?.(i)??[]}async getWorktreesDefaultUri(e){let{provider:t,path:i}=this.getProvider(e),r=await t.getWorktreesDefaultUri?.(i);return null!=r||null!=(r=this.getRepository(i)?.uri)&&(r=C.Uri.joinPath(r,"..")),r}deleteWorktree(e,t,i){let{provider:r,path:s}=this.getProvider(e);return Promise.resolve(r.deleteWorktree?.(s,t,i))}async getOpenScmRepositories(){let e=await Promise.allSettled([...this._providers.values()].map(e=>e.getOpenScmRepositories()));return[...(0,eN.sX)((0,eN.IF)(e,e=>"fulfilled"===e.status),e=>e.value)]}getScmRepository(e){let{provider:t,path:i}=this.getProvider(e);return t.getScmRepository(i)}getOrOpenScmRepository(e){let{provider:t,path:i}=this.getProvider(e);return t.getOrOpenScmRepository(i)}};i2([(0,eW.u_)({args:{0:e=>`(${e?.length??0}) ${e?.map(e=>e.descriptor.id).join(", ")}`,1:e=>`(${e?.length??0}) ${e?.map(e=>e.descriptor.id).join(", ")}`}})],GitProviderService.prototype,"fireProvidersChanged",1),i2([(0,eW.u_)({args:{0:e=>`(${e?.length??0}) ${e?.map(e=>e.id).join(", ")}`,1:e=>`(${e?.length??0}) ${e?.map(e=>e.id).join(", ")}`}})],GitProviderService.prototype,"fireRepositoriesChanged",1),i2([(0,eW.u_)()],GitProviderService.prototype,"onSubscriptionChanged",1),i2([(0,eW.u_)({args:{0:e=>`focused=${e.focused}`}})],GitProviderService.prototype,"onWindowStateChanged",1),i2([(0,eW.u_)({args:{0:e=>`added=${e.added.length}, removed=${e.removed.length}`},singleLine:!0})],GitProviderService.prototype,"onWorkspaceFoldersChanged",1),i2([(0,eW.Yz)({args:{1:!1},singleLine:!0})],GitProviderService.prototype,"register",1),i2([(0,eW.Yz)({singleLine:!0})],GitProviderService.prototype,"registrationComplete",1),i2([(0,eW.Yz)({args:{0:e=>e.length}})],GitProviderService.prototype,"discoverRepositories",1),i2([(0,eW.u_)({exit:!0})],GitProviderService.prototype,"discoverRepositoriesCore",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"findRepositories",1),i2([(0,eW.u_)({exit:!0})],GitProviderService.prototype,"access",1),i2([(0,eW.u_)({exit:!0})],GitProviderService.prototype,"accessCore",1),i2([(0,eW.u_)({exit:!0})],GitProviderService.prototype,"supports",1),i2([(0,eW.u_)({exit:e=>`returned ${e?.visibility}`})],GitProviderService.prototype,"getVisibilityInfoFromCache",1),i2([(0,eW.u_)()],GitProviderService.prototype,"clearAllRepoVisibilityCaches",1),i2([(0,eW.u_)()],GitProviderService.prototype,"clearAllOpenRepoVisibilityCaches",1),i2([(0,eW.u_)({exit:!0})],GitProviderService.prototype,"visibility",1),i2([(0,eW.u_)({exit:!0})],GitProviderService.prototype,"visibilityCore",1),i2([(0,eW.u_)()],GitProviderService.prototype,"setEnabledContext",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getBestRevisionUri",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getRevisionUri",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getWorkingUri",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"addRemote",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"pruneRemote",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"removeRemote",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"applyChangesToWorkingFile",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"applyUnreachableCommitForPatch",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"checkout",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"clone",1),i2([(0,eW.Yz)({args:{1:"<contents>",3:"<message>"}})],GitProviderService.prototype,"createUnreachableCommitForPatch",1),i2([(0,eW.Yz)({singleLine:!0})],GitProviderService.prototype,"resetCaches",1),i2([(0,eW.Yz)({args:{1:e=>e.length}})],GitProviderService.prototype,"excludeIgnoredUris",1),i2([(0,tZ.I)(),(0,eW.Yz)()],GitProviderService.prototype,"fetch",1),i2([(0,tZ.I)((e,t)=>`${null==e?"":e.map(e=>e.id).join(",")}|${JSON.stringify(t)}`),(0,eW.Yz)({args:{0:e=>e?.map(e=>e.name).join(", ")}})],GitProviderService.prototype,"fetchAll",1),i2([(0,tZ.I)(),(0,eW.Yz)()],GitProviderService.prototype,"pull",1),i2([(0,tZ.I)((e,t)=>`${null==e?"":e.map(e=>e.id).join(",")}|${JSON.stringify(t)}`),(0,eW.Yz)({args:{0:e=>e?.map(e=>e.name).join(", ")}})],GitProviderService.prototype,"pullAll",1),i2([(0,tZ.I)(),(0,eW.Yz)()],GitProviderService.prototype,"push",1),i2([(0,tZ.I)(e=>null==e?"":e.map(e=>e.id).join(",")),(0,eW.Yz)({args:{0:e=>e?.map(e=>e.name).join(", ")}})],GitProviderService.prototype,"pushAll",1),i2([(0,eW.Yz)({args:{1:e=>e.join(",")}})],GitProviderService.prototype,"getAheadBehindCommitCount",1),i2([(0,eW.Yz)({args:{1:e=>e?.isDirty}})],GitProviderService.prototype,"getBlame",1),i2([(0,eW.Yz)({args:{1:"<contents>"}})],GitProviderService.prototype,"getBlameContents",1),i2([(0,eW.Yz)({args:{2:e=>e?.isDirty}})],GitProviderService.prototype,"getBlameForLine",1),i2([(0,eW.Yz)({args:{2:"<contents>"}})],GitProviderService.prototype,"getBlameForLineContents",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getBlameForRange",1),i2([(0,eW.Yz)({args:{2:"<contents>"}})],GitProviderService.prototype,"getBlameForRangeContents",1),i2([(0,eW.Yz)({args:{0:"<blame>"}})],GitProviderService.prototype,"getBlameRange",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getBranch",1),i2([(0,eW.Yz)({args:{0:e=>e.name}})],GitProviderService.prototype,"getBranchAheadRange",1),i2([(0,eW.Yz)({args:{1:!1}})],GitProviderService.prototype,"getBranches",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getBranchesAndTagsTipsFn",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getChangedFilesCount",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getCommit",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getCommitBranches",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getCommitCount",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getCommitForFile",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getCommitsForGraph",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getCommitTags",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getConfig",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"setConfig",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getContributors",1),i2([(0,tZ.I)(),(0,eW.Yz)()],GitProviderService.prototype,"getCurrentUser",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getDefaultBranchName",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getDiff",1),i2([(0,eW.Yz)({args:{1:!1}})],GitProviderService.prototype,"getDiffFiles",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getDiffForFile",1),i2([(0,eW.Yz)({args:{1:"<contents>"}})],GitProviderService.prototype,"getDiffForFileContents",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getDiffForLine",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getDiffStatus",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getFileStatusForCommit",1),i2([(0,eW.u_)()],GitProviderService.prototype,"getGitDir",1),i2([(0,eW.u_)()],GitProviderService.prototype,"getLastFetchedTimestamp",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getLog",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getLogRefsOnly",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getLogForFile",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getMergeBase",1),i2([(0,tZ.I)(),(0,eW.Yz)()],GitProviderService.prototype,"getMergeStatus",1),i2([(0,tZ.I)(),(0,eW.Yz)()],GitProviderService.prototype,"getRebaseStatus",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getNextComparisonUris",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getOldestUnpushedRefForFile",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getPreviousComparisonUris",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getPreviousComparisonUrisForLine",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getIncomingActivity",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getBestRemoteWithProvider",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getBestRemotesWithProviders",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getBestRemoteWithIntegration",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getRemotes",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getRemotesWithProviders",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getRemotesWithIntegrations",1),i2([(0,eW.Yz)({exit:!0})],GitProviderService.prototype,"getBestRepository",1),i2([(0,eW.Yz)({exit:!0})],GitProviderService.prototype,"getBestRepositoryOrFirst",1),i2([(0,eW.Yz)({exit:!0})],GitProviderService.prototype,"getOrOpenRepository",1),i2([(0,eW.Yz)({args:{0:e=>null!=e?`TextEditor(${eq.YJ.toLoggable(e.document.uri)})`:void 0}})],GitProviderService.prototype,"getOrOpenRepositoryForEditor",1),i2([(0,eW.Yz)({exit:!0})],GitProviderService.prototype,"getRepository",1),i2([(0,tZ.I)(),(0,eW.Yz)()],GitProviderService.prototype,"getStash",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getStatusForFile",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getStatusForFiles",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getStatusForRepo",1),i2([(0,eW.Yz)({args:{1:!1}})],GitProviderService.prototype,"getTags",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getTreeEntryForRevision",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getTreeForRevision",1),i2([(0,tZ.I)(),(0,eW.Yz)()],GitProviderService.prototype,"getRevisionContent",1),i2([(0,eW.Yz)({exit:!0})],GitProviderService.prototype,"getFirstCommitSha",1),i2([(0,eW.Yz)({exit:!0})],GitProviderService.prototype,"getUniqueRepositoryId",1),i2([(0,eW.Yz)({args:{1:!1},exit:!0})],GitProviderService.prototype,"hasBranchOrTag",1),i2([(0,eW.Yz)({args:{1:!1},exit:!0})],GitProviderService.prototype,"hasCommitBeenPushed",1),i2([(0,eW.Yz)({exit:!0})],GitProviderService.prototype,"hasRemotes",1),i2([(0,eW.Yz)({exit:!0})],GitProviderService.prototype,"hasTrackingBranch",1),i2([(0,eW.Yz)({exit:!0})],GitProviderService.prototype,"hasUnsafeRepositories",1),i2([(0,eW.Yz)({args:{0:e=>e.uri.toString(!0),1:e=>null!=e?`TextEditor(${eq.YJ.toLoggable(e.document.uri)})`:void 0},exit:!0})],GitProviderService.prototype,"isRepositoryForEditor",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getDiffTool",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"openDiffTool",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"openDirectoryCompare",1),i2([(0,tZ.I)(),(0,eW.Yz)()],GitProviderService.prototype,"resolveReference",1),i2([(0,eW.Yz)({args:{1:e=>`[${e.matchAll?"A":""}${e.matchCase?"C":""}${e.matchRegex?"R":""}]: ${e.query.length>500?`${e.query.substring(0,500)}...`:e.query}`}})],GitProviderService.prototype,"richSearchCommits",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"searchCommits",1),i2([(0,eW.Yz)({args:!1})],GitProviderService.prototype,"runGitCommandViaTerminal",1),i2([(0,eW.Yz)({exit:!0})],GitProviderService.prototype,"validateBranchOrTagName",1),i2([(0,eW.Yz)({args:{1:!1},exit:!0})],GitProviderService.prototype,"validatePatch",1),i2([(0,eW.Yz)({exit:!0})],GitProviderService.prototype,"validateReference",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"stageFile",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"stageDirectory",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"unstageFile",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"unstageDirectory",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"stashApply",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"stashDelete",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"stashRename",1),i2([(0,eW.Yz)({args:{2:e=>e?.length}})],GitProviderService.prototype,"stashSave",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"stashSaveSnapshot",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"createWorktree",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getWorktree",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getWorktrees",1),i2([(0,eW.Yz)({exit:!0})],GitProviderService.prototype,"getWorktreesDefaultUri",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"deleteWorktree",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getOpenScmRepositories",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getScmRepository",1),i2([(0,eW.Yz)()],GitProviderService.prototype,"getOrOpenScmRepository",1);var i8=i(6892),i7=Object.defineProperty,i5=Object.getOwnPropertyDescriptor,i9=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?i5(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&i7(t,i,o),o};let LineHoverController=class LineHoverController{constructor(e){this.container=e,this._disposable=C.Disposable.from((0,iT.qw)(e.onReady)(this.onReady,this),A.i.onDidChange(this.onConfigurationChanged,this))}_disposable;_hoverProviderDisposable;_uri;dispose(){this.unregister(),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){if(!A.i.changed(e,"hovers.enabled")&&!A.i.changed(e,"hovers.currentLine.enabled"))return;let t=A.i.get("hovers");t.enabled&&t.currentLine.enabled?(this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this)),this.register(C.window.activeTextEditor)):(this.container.lineTracker.unsubscribe(this),this.unregister())}onActiveLinesChanged(e){if(!e.pending){if(null==e.editor||null==e.selections){this.unregister();return}this.isRegistered(e.editor?.document.uri)||this.register(e.editor)}}async provideDetailsHover(e,t,i){if(!this.container.lineTracker.includes(t.line))return;let r=this.container.lineTracker.getState(t.line),s=r?.commit;if(null==s)return;let o=A.i.get("hovers");if(o.annotations.details&&"blame"===await this.container.fileAnnotations.getAnnotationType(C.window.activeTextEditor))return;let n="line"===o.currentLine.over;if(!n&&this.container.lineAnnotations.suspended)return;let a=e.validateRange(new C.Range(t.line,n?t.character:1073741824,t.line,1073741824));if(!n&&a.start.character!==t.character)return;let l=t.line,h=l+1;l=(s.lines.find(e=>e.line===h)??s.lines[0]).originalLine-1;let c=await this.container.documentTracker.get(e);if(null==c||i.isCancellationRequested)return;let u=await (0,iI.Oq)(this.container,s,c.uri,l,{autolinks:o.autolinks.enabled,cancellation:i,dateFormat:A.i.get("defaultDateFormat"),format:o.detailsMarkdownFormat,pullRequests:o.pullRequests.enabled,timeout:250})??"Cancelled";return new C.Hover(u,a)}async provideChangesHover(e,t,i){if(!this.container.lineTracker.includes(t.line))return;let r=this.container.lineTracker.getState(t.line),s=r?.commit;if(null==s)return;let o=A.i.get("hovers");if(o.annotations.changes&&"blame"===await this.container.fileAnnotations.getAnnotationType(C.window.activeTextEditor))return;let n="line"===o.currentLine.over;if(!n&&this.container.lineAnnotations.suspended)return;let a=e.validateRange(new C.Range(t.line,n?t.character:1073741824,t.line,1073741824));if(!n&&a.start.character!==t.character)return;let l=await this.container.documentTracker.get(e);if(null==l)return;let h=await (0,iI._K)(this.container,s,l.uri,t.line,l.document);if(null!=h)return new C.Hover(h,a)}isRegistered(e){return null!=this._hoverProviderDisposable&&i8.K.equals(this._uri,e)}register(e){if(this.unregister(),null==e)return;let t=A.i.get("hovers");if(!t.enabled||!t.currentLine.enabled||!t.currentLine.details&&!t.currentLine.changes)return;this._uri=e.document.uri;let i=[];t.currentLine.changes&&i.push(C.languages.registerHoverProvider({pattern:this._uri.fsPath},{provideHover:this.provideChangesHover.bind(this)})),t.currentLine.details&&i.push(C.languages.registerHoverProvider({pattern:this._uri.fsPath},{provideHover:this.provideDetailsHover.bind(this)})),this._hoverProviderDisposable=C.Disposable.from(...i)}unregister(){this._uri=void 0,null!=this._hoverProviderDisposable&&(this._hoverProviderDisposable.dispose(),this._hoverProviderDisposable=void 0)}};i9([(0,eW.u_)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map(e=>`[${e.anchor}-${e.active}]`).join(",")}, pending=${!!e.pending}, reason=${e.reason}`}})],LineHoverController.prototype,"onActiveLinesChanged",1),i9([(0,eW.u_)({args:{0:e=>eq.YJ.toLoggable(e.uri),1:e=>`${e.line}:${e.character}`,2:!1}})],LineHoverController.prototype,"provideDetailsHover",1),i9([(0,eW.u_)({args:{0:e=>eq.YJ.toLoggable(e.uri),1:e=>`${e.line}:${e.character}`,2:!1}})],LineHoverController.prototype,"provideChangesHover",1);var re=Object.defineProperty,rt=Object.getOwnPropertyDescriptor,ri=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rt(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&re(t,i,o),o};let DraftService=class DraftService{constructor(e,t){this.container=e,this.connection=t}dispose(){}async createDraft(e,t,i,r){let s=(0,eM.b1)();try{let o;let n=await Promise.allSettled(i.map(e=>this.getCreateDraftPatchRequestFromChange(e)));if(!n.length)throw Error("No changes found");let a=[],l=[];for(let e of n)"fulfilled"===e.status?e.value.contents&&(a.push(e.value),null==o&&(o=e.value.user)):l.push(e.reason);if(l.length)throw AggregateError(l,"Unable to create draft");let h=await this.connection.fetchGkDevApi("v1/drafts",{method:"POST",body:JSON.stringify({type:e,title:t,description:r?.description,visibility:r?.visibility??"public"})});h.ok||await rr("Unable to create draft",h,s);let c=(await h.json()).data,u=c.id,d=await this.connection.fetchGkDevApi(`v1/drafts/${u}/changesets`,{method:"POST",body:JSON.stringify({gitUserName:o?.name,gitUserEmail:o?.email,patches:a.map(e=>e.patch)})});d.ok||await rr(`Unable to create changeset for draft '${u}'`,d,s);let p=(await d.json()).data,g=[],m=0;for(let e of p.patches){let{url:t,method:i,headers:r}=e.secureUploadData,{contents:s,repository:o}=a[m++];if(null==s)throw Error(`No contents found for ${e.baseCommitSha}`);let n=await this.container.git.getDiffFiles(o.path,s),l=n?.files.map(t=>({...t,gkRepositoryId:e.gitRepositoryId}))??[];await this.connection.fetch(t,{method:i,headers:{"Content-Type":"text/plain",Host:r?.Host?.["0"]??""},body:s}),g.push({type:"cloud",id:e.id,createdAt:new Date(e.createdAt),updatedAt:new Date(e.updatedAt??e.createdAt),draftId:e.draftId,changesetId:e.changesetId,userId:p.userId,baseBranchName:e.baseBranchName,baseRef:e.baseCommitSha,gkRepositoryId:e.gitRepositoryId,secureLink:void 0,contents:s,files:l,repository:o})}let f=await this.connection.fetchGkDevApi(`v1/drafts/${u}/publish`,{method:"POST"});f.ok||await rr(`Failed to publish draft '${u}'`,f,s);let w=await this.connection.fetchGkDevApi(`v1/drafts/${u}`,{method:"GET"});w.ok||await rr(`Unable to open draft '${u}'`,w,s);let v=(await w.json()).data,y={id:v.createdBy,name:void 0,email:void 0},{account:b}=await this.container.subscription.getSubscription();return v.createdBy===b?.id&&(y.name=`${b.name} (you)`,y.email=b.email),{draftType:"cloud",type:v.type,id:u,createdAt:new Date(v.createdAt),updatedAt:new Date(v.updatedAt??v.createdAt),author:y,isMine:!0,organizationId:v.organizationId||void 0,role:v.role,isPublished:v.isPublished,title:v.title,description:v.description,deepLinkUrl:c.deepLink,visibility:v.visibility,latestChangesetId:v.latestChangesetId,changesets:[{id:p.id,createdAt:new Date(p.createdAt),updatedAt:new Date(p.updatedAt??p.createdAt),draftId:p.draftId,parentChangesetId:p.parentChangesetId,userId:p.userId,gitUserName:p.gitUserName,gitUserEmail:p.gitUserEmail,deepLinkUrl:p.deepLink,patches:g}]}}catch(e){throw eq.YJ.error(e,s),e}}async getCreateDraftPatchRequestFromChange(e){let t;let i=(0,F.bP)(e.revision.to),[r,s,o,n,a]=await Promise.allSettled([i?this.container.git.getBranch(e.repository.uri).then(e=>null!=e?[e.name]:void 0):this.container.git.getCommitBranches(e.repository.uri,e.revision.to).then(t=>t.length?t:this.container.git.getCommitBranches(e.repository.uri,e.revision.from)),null==e.contents?this.container.git.getDiff(e.repository.path,e.revision.to,e.revision.from):void 0,this.container.git.getFirstCommitSha(e.repository.uri),this.container.git.getBestRemoteWithProvider(e.repository.uri),this.container.git.getCurrentUser(e.repository.uri)]),l=(0,t0.Cv)(o),h=(0,t0.Cv)(n);if(null==h){if(null==l)throw Error("No remote or initial commit found");t={initialCommitSha:l}}else t={initialCommitSha:l,remote:{url:h.url,domain:h.domain,path:h.path},provider:null!=h.provider.gkProviderId?{id:h.provider.gkProviderId,repoDomain:h.provider.domain,repoName:h.provider.path}:void 0};let c=(0,t0.Cv)(s),u=e.contents??c?.contents;if(null==u)throw Error(`Unable to diff ${e.revision.from} and ${e.revision.to}`);let d=(0,t0.Cv)(a),p=(0,t0.Cv)(r),g=p?.[0]??"",m=e.revision.from;if(!(0,F.kp)(m)){let t=await this.container.git.getCommit(e.repository.uri,m);null!=t&&(m=t.sha)}return{patch:{baseCommitSha:m,baseBranchName:g,gitRepoData:t},contents:u,repository:e.repository,user:d}}async deleteDraft(e){await this.connection.fetchGkDevApi(`v1/drafts/${e}`,{method:"DELETE"})}async getDraft(e){let t=(0,eM.b1)(),[i,r]=await Promise.allSettled([this.connection.fetchGkDevApi(`v1/drafts/${e}`,{method:"GET"}),this.getChangesets(e)]);if("rejected"===i.status)throw eq.YJ.error(i.reason,t,`Unable to open draft '${e}': ${i.reason}`),Error(`Unable to open draft '${e}': ${i.reason}`);if("rejected"===r.status)throw eq.YJ.error(r.reason,t,`Unable to open changeset for draft '${e}': ${r.reason}`),Error(`Unable to open changesets for draft '${e}': ${r.reason}`);let s=(0,t0.Cv)(i);s?.ok||await rr(`Unable to open draft '${e}'`,s,t);let o=(await s.json()).data,n=(0,t0.Cv)(r),a={id:o.createdBy,name:void 0,email:void 0},l=!1,{account:h}=await this.container.subscription.getSubscription();return o.createdBy===h?.id&&(a.name=`${h.name} (you)`,a.email=h.email,l=!0),{draftType:"cloud",type:o.type,id:o.id,createdAt:new Date(o.createdAt),updatedAt:new Date(o.updatedAt??o.createdAt),author:a,isMine:l,organizationId:o.organizationId||void 0,role:o.role,isPublished:o.isPublished,title:o.title,description:o.description,deepLinkUrl:o.deepLink,visibility:o.visibility,latestChangesetId:o.latestChangesetId,changesets:n}}async getDrafts(){let e=(0,eM.b1)(),t=await this.connection.fetchGkDevApi("/v1/drafts",{method:"GET"});t.ok||await rr("Unable to open drafts",t,e);let i=(await t.json()).data,{account:r}=await this.container.subscription.getSubscription();return i.map(e=>{let t=e.createdBy===r?.id;return{draftType:"cloud",type:e.type,id:e.id,author:t?{id:e.createdBy,name:`${r.name} (you)`,email:r.email}:{id:e.createdBy,name:"Unknown",email:void 0},isMine:t,organizationId:e.organizationId||void 0,role:e.role,isPublished:e.isPublished,title:e.title,description:e.description,deepLinkUrl:e.deepLink,visibility:e.visibility,createdAt:new Date(e.createdAt),updatedAt:new Date(e.updatedAt??e.createdAt),latestChangesetId:e.latestChangesetId}})}async getChangesets(e){let t=(0,eM.b1)();try{let i=await this.connection.fetchGkDevApi(`/v1/drafts/${e}/changesets`,{method:"GET"});i.ok||await rr(`Unable to open changesets for draft '${e}'`,i,t);let r=(await i.json()).data,s=[];for(let e of r){let t=[];for(let i of e.patches)t.push({type:"cloud",id:i.id,createdAt:new Date(i.createdAt),updatedAt:new Date(i.updatedAt??i.createdAt),draftId:i.draftId,changesetId:i.changesetId,userId:e.userId,baseBranchName:i.baseBranchName,baseRef:i.baseCommitSha,gkRepositoryId:i.gitRepositoryId,secureLink:i.secureDownloadData});s.push({id:e.id,createdAt:new Date(e.createdAt),updatedAt:new Date(e.updatedAt??e.createdAt),draftId:e.draftId,parentChangesetId:e.parentChangesetId,userId:e.userId,gitUserName:e.gitUserName,gitUserEmail:e.gitUserEmail,deepLinkUrl:e.deepLink,patches:t})}return s}catch(e){throw eq.YJ.error(e,t),e}}async getPatch(e){let t=await this.getPatchCore(e),i=await this.getPatchDetails(t);return t.contents=i.contents,t.files=i.files,t.repository=i.repository,t}async getPatchCore(e){let t=(0,eM.b1)(),i=await this.connection.fetchGkDevApi(`/v1/patches/${e}`,{method:"GET"});i.ok||await rr(`Unable to open patch '${e}'`,i,t);let r=(await i.json()).data;return{type:"cloud",id:r.id,createdAt:new Date(r.createdAt),updatedAt:new Date(r.updatedAt??r.createdAt),draftId:r.draftId,changesetId:r.changesetId,userId:r.userId,baseBranchName:r.baseBranchName,baseRef:r.baseCommitSha,gkRepositoryId:r.gitRepositoryId,secureLink:r.secureDownloadData}}async getPatchDetails(e){let t="string"==typeof e?await this.getPatchCore(e):e,[i,r]=await Promise.allSettled([this.getPatchContentsCore(t.secureLink),this.container.repositoryIdentity.getRepositoryOrIdentity(t.gkRepositoryId,{openIfNeeded:!0,skipRefValidation:!0})]),s=(0,t0.Cv)(i),o=(0,t0.Cv)(r),n="";(0,ty.Oc)(o)&&(n=o.path);let a=await this.container.git.getDiffFiles(n,s),l=a?.files.map(e=>({...e,gkRepositoryId:t.gkRepositoryId}))??[];return{id:t.id,contents:s,files:l,repository:o}}async getPatchContentsCore(e){let{url:t,method:i,headers:r}=e;return(await this.connection.fetch(t,{method:i,headers:{Accept:"text/plain",Host:r?.Host?.["0"]??""}})).text()}async updateDraftVisibility(e,t){let i=(0,eM.b1)();try{let r=await this.connection.fetchGkDevApi(`/v1/drafts/${e}`,{method:"PATCH",body:JSON.stringify({visibility:t})});return r?.ok===!1&&await rr(`Unable to update draft '${e}'`,r,i),(await r.json()).data}catch(e){throw eq.YJ.error(e,i),e}}async getDraftUsers(e){let t=(0,eM.b1)();try{let i=await this.connection.fetchGkDevApi(`/v1/drafts/${e}/users`,{method:"GET"});return i?.ok===!1&&await rr(`Unable to get users for draft '${e}'`,i,t),(await i.json()).data}catch(e){throw eq.YJ.error(e,t),e}}async addDraftUsers(e,t){let i=(0,eM.b1)();try{if(0===t.length)throw Error("No changes found");let r=await this.connection.fetchGkDevApi(`/v1/drafts/${e}/users`,{method:"POST",body:JSON.stringify({id:e,users:t})});return r?.ok===!1&&await rr(`Unable to add users for draft '${e}'`,r,i),(await r.json()).data}catch(e){throw eq.YJ.error(e,i),e}}async removeDraftUser(e,t){let i=(0,eM.b1)();try{let r=await this.connection.fetchGkDevApi(`/v1/drafts/${e}/users/${t}`,{method:"DELETE"});return r?.ok===!1&&await rr(`Unable to update user ${t} for draft '${e}'`,r,i),!0}catch(e){throw eq.YJ.error(e,i),e}}};async function rr(e,t,i){let r;try{r=await t?.json()}catch{}let s="string"==typeof r?.error?r.error:r?.error?.message??t?.statusText,o=null!=t?`${e}: (${t?.status}) ${s}`:e;throw eq.YJ.error(void 0,i,o),Error(o)}ri([(0,eW.Yz)({args:{2:!1}})],DraftService.prototype,"createDraft",1),ri([(0,eW.Yz)()],DraftService.prototype,"deleteDraft",1),ri([(0,eW.Yz)()],DraftService.prototype,"getDraft",1),ri([(0,eW.Yz)()],DraftService.prototype,"getDrafts",1),ri([(0,eW.Yz)()],DraftService.prototype,"getChangesets",1),ri([(0,eW.Yz)()],DraftService.prototype,"getPatch",1),ri([(0,eW.Yz)({args:{0:e=>"string"==typeof e?e:e.id}})],DraftService.prototype,"getPatchDetails",1),ri([(0,eW.Yz)()],DraftService.prototype,"updateDraftVisibility",1),ri([(0,eW.Yz)()],DraftService.prototype,"getDraftUsers",1),ri([(0,eW.Yz)()],DraftService.prototype,"addDraftUsers",1),ri([(0,eW.Yz)()],DraftService.prototype,"removeDraftUser",1);var rs=i(6772),ro=Object.defineProperty,rn=Object.getOwnPropertyDescriptor,ra=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rn(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ro(t,i,o),o};let rl="did-authenticate";let AuthenticationConnection=class AuthenticationConnection{constructor(e,t){this.container=e,this.connection=t}_cancellationSource;_deferredCodeExchanges=new Map;_pendingStates=new Map;_statusBarItem;dispose(){}abort(){return null==this._cancellationSource?Promise.resolve():(this._cancellationSource.cancel(),new Promise(e=>setTimeout(e,50)))}async getAccountInfo(e){let t;let i=(0,eM.b1)();try{t=await this.connection.fetchApi("user",void 0,{token:e})}catch(e){throw eq.YJ.error(e,i),e}if(!t.ok)throw eq.YJ.error(void 0,`Getting account info failed: (${t.status}) ${t.statusText}`),Error(t.statusText);let r=await t.json();return{id:r.id,accountName:r.username}}async login(e,t,i=!1){this.updateStatusBarItem(!0);let r=(0,th.uq)(),s=this._pendingStates.get(t)??[];this._pendingStates.set(t,[...s,r]);let o=await C.env.asExternalUri(C.Uri.parse(`${C.env.uriScheme}://${this.container.context.extension.id}/${rl}`)),n=this.connection.getGkDevAccountsUri(i?"register":"login",`${e.includes("gitlens")?"source=gitlens&":""}state=${encodeURIComponent(r)}&redirect_uri=${encodeURIComponent(o.toString())}`);await (0,eQ.GS)(n.toString(!0));let a=this._deferredCodeExchanges.get(t);null==a&&(a=(0,iT.U7)(this.container.uri.onDidReceiveAuthenticationUri,this.getUriHandlerDeferredExecutor()),this._deferredCodeExchanges.set(t,a)),null!=this._cancellationSource&&(this._cancellationSource.cancel(),this._cancellationSource=void 0),this._cancellationSource=new C.CancellationTokenSource;try{let e=await Promise.race([a.promise,new Promise(e=>this.openCompletionInputFallback(this._cancellationSource.token,e)),new Promise((e,t)=>this._cancellationSource?.token.onCancellationRequested(()=>t("Cancelled"))),new Promise((e,t)=>setTimeout(t,12e4,"Cancelled"))]);return await this.getTokenFromCodeAndState(t,e,r)}finally{this._cancellationSource?.cancel(),this._cancellationSource=void 0,this._pendingStates.delete(t),a?.cancel(),this._deferredCodeExchanges.delete(t),this.updateStatusBarItem(!1)}}async openCompletionInputFallback(e,t){let i;let r=C.window.createInputBox();r.ignoreFocusOut=!0;let s=[];try{if(e.isCancellationRequested)return;i=await new Promise(t=>{s.push(e.onCancellationRequested(()=>r.hide()),r.onDidHide(()=>t(void 0)),r.onDidChangeValue(e=>{if(!e){r.validationMessage="Please enter a valid code";return}r.validationMessage=void 0}),r.onDidAccept(()=>t(r.value))),r.title="GitKraken Sign In",r.placeholder="Please enter the provided authorization code",r.prompt="If the auto-redirect fails, paste the authorization code",r.show()})}finally{r.dispose(),s.forEach(e=>void e.dispose())}null!=i&&t(i)}async getTokenFromCodeAndState(e,t,i){let r=this._pendingStates.get(e);if(null==r||!r.includes(i))throw Error("Getting token failed: Invalid state");let s=await this.connection.fetchGkDevApi("oauth/access_token",{method:"POST",body:JSON.stringify({grant_type:"authorization_code",client_id:"gitkraken.gitlens",code:t,state:i})},{unAuthenticated:!0});if(!s.ok)throw Error(`Getting token failed: (${s.status}) ${s.statusText}`);let o=await s.json();if(null==o.access_token)throw Error("Getting token failed: No access token returned");return o.access_token}getUriHandlerDeferredExecutor(){return(e,t,i)=>{let r=new URLSearchParams(e.query).get("code");if(null==r){i("Code not returned");return}t(r)}}updateStatusBarItem(e){e&&null==this._statusBarItem&&(this._statusBarItem=C.window.createStatusBarItem("gitlens.plus.signIn",C.StatusBarAlignment.Left),this._statusBarItem.name="GitKraken Sign in",this._statusBarItem.text="Signing in to GitKraken...",this._statusBarItem.show()),e||null==this._statusBarItem||(this._statusBarItem.dispose(),this._statusBarItem=void 0)}};ra([(0,eW.u_)({args:!1,exit:e=>`returned ${e.id}`})],AuthenticationConnection.prototype,"getAccountInfo",1),ra([(0,eW.u_)()],AuthenticationConnection.prototype,"login",1);var rh=Object.defineProperty,rc=Object.getOwnPropertyDescriptor,ru=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rc(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rh(t,i,o),o};let rd="gitlens+",rp=["gitlens"];let AccountAuthenticationProvider=class AccountAuthenticationProvider{constructor(e,t){this.container=e,this._authConnection=new AuthenticationConnection(e,t),this._sessionsPromise=this.getSessionsFromStorage(),this._disposable=C.Disposable.from(this._authConnection,C.authentication.registerAuthenticationProvider(rd,"GitKraken: GitLens",this,{supportsMultipleAccounts:!1}),this.container.storage.onDidChangeSecrets(()=>this.checkForUpdates()))}_onDidChangeSessions=new C.EventEmitter;get onDidChangeSessions(){return this._onDidChangeSessions.event}_disposable;_authConnection;_sessionsPromise;dispose(){this._disposable.dispose()}get secretStorageKey(){return`gitlens.plus.auth:${this.container.env}`}abort(){return this._authConnection.abort()}async createSession(e){let t=(0,eM.b1)(),i=e.includes("signUp");i&&(e=e.filter(e=>"signUp"!==e));let r=rg(e=e.sort());try{let t=await this._authConnection.login(e,r,i),s=await this.createSessionForToken(t,e),o=await this._sessionsPromise,n=o.findIndex(e=>e.id===s.id||rg(e.scopes)===r);return n>-1?o.splice(n,1,s):o.push(s),await this.storeSessions(o),this._onDidChangeSessions.fire({added:[s],removed:[],changed:[]}),s}catch(e){if("Cancelled"===e)throw e;throw eq.YJ.error(e,t),C.window.showErrorMessage(`Unable to sign in to GitKraken: ${e instanceof iJ.WO?"request timed out":e}. Please try again. If this issue persists, please contact support.`),e}}async getSessions(e){let t=(0,eM.b1)(),i=rg(e=e?.sort()),r=await this._sessionsPromise,s=null!=e?r.filter(e=>rg(e.scopes)===i):r;return(0,eM._W)(t,` \u2022 Found ${s.length} sessions`),s}async removeSession(e){let t=(0,eM.b1)();try{let t=await this._sessionsPromise,i=t.findIndex(t=>t.id===e);if(-1===i){eq.YJ.log(`Unable to remove session ${e}; Not found`);return}let r=t[i];t.splice(i,1),await this.storeSessions(t),this._onDidChangeSessions.fire({added:[],removed:[r],changed:[]})}catch(e){throw eq.YJ.error(e,t),C.window.showErrorMessage(`Unable to sign out of GitKraken: ${e}`),e}}async removeSessionsByScopes(e){let t=(0,eM.b1)();try{e=e?.sort();let t=rg(e),i=[],r=0,s=await this._sessionsPromise;for(let e of s){if(rg(e.scopes)!==t){r++;continue}s.splice(r,1),i.push(e)}if(0===i.length)return;await this.storeSessions(s),this._onDidChangeSessions.fire({added:[],removed:i,changed:[]})}catch(e){throw eq.YJ.error(e,t),C.window.showErrorMessage(`Unable to sign out of GitKraken: ${e}`),e}}async checkForUpdates(){let e=await this._sessionsPromise;this._sessionsPromise=this.getSessionsFromStorage();let t=await this._sessionsPromise,i=[],r=[];for(let r of t)e.some(e=>e.id===r.id)||i.push(r);for(let i of e)t.some(e=>e.id===i.id)||r.push(i);(i.length||r.length)&&(eq.YJ.debug(`Firing sessions changed event; added=${i.length}, removed=${r.length}`),this._onDidChangeSessions.fire({added:i,removed:r,changed:[]}))}async createSessionForToken(e,t){let i=await this._authConnection.getAccountInfo(e);return{id:(0,th.uq)(),accessToken:e,account:{label:i.accountName,id:i.id},scopes:t}}async getSessionsFromStorage(){let e;try{let t=await this.container.storage.getSecret(this.secretStorageKey);if(!t||"[]"===t)return[];try{e=JSON.parse(t)}catch(e){try{await this.container.storage.deleteSecret(this.secretStorageKey)}catch{}throw e}}catch(e){return eq.YJ.error(e,"Unable to read sessions from storage"),[]}let t=e.map(async e=>{let t;let i=rg(e.scopes);if(eq.YJ.debug(`Read session from storage with scopes=${i}`),null==e.account)try{t=await this._authConnection.getAccountInfo(e.accessToken),eq.YJ.debug(`Verified session with scopes=${i}`)}catch(e){if("Unauthorized"===e.message)return}return{id:e.id,account:{label:null!=e.account?e.account.label??e.account.displayName??"<unknown>":t?.accountName??"<unknown>",id:e.account?.id??t?.id??"<unknown>"},scopes:e.scopes,accessToken:e.accessToken}}),i=(await Promise.allSettled(t)).filter(e=>"fulfilled"===e.status).map(e=>e.value).filter(e=>!!e);return eq.YJ.debug(`Found ${i.length} verified sessions`),i.length!==e.length&&await this.storeSessions(i),i}async storeSessions(e){try{this._sessionsPromise=Promise.resolve(e),await this.container.storage.storeSecret(this.secretStorageKey,JSON.stringify(e))}catch(t){eq.YJ.error(t,`Unable to store ${e.length} sessions`)}}};function rg(e){return e?.join("|")}ru([(0,eW.u_)()],AccountAuthenticationProvider.prototype,"createSession",1),ru([(0,eW.u_)()],AccountAuthenticationProvider.prototype,"getSessions",1),ru([(0,eW.u_)()],AccountAuthenticationProvider.prototype,"removeSession",1),ru([(0,eW.u_)()],AccountAuthenticationProvider.prototype,"removeSessionsByScopes",1);var rm=Object.defineProperty,rf=Object.getOwnPropertyDescriptor,rw=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rf(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rm(t,i,o),o};let OrganizationService=class OrganizationService{constructor(e,t){this.container=e,this.connection=t,this._disposable=C.Disposable.from((0,tX.qw)(e.onReady)(async()=>{let e=await this.getActiveOrganizationId();this.updateOrganizationPermissions(e)}),e.subscription.onDidChange(this.onSubscriptionChanged,this))}_disposable;_organizations;_fullOrganizations;_organizationSettings;dispose(){this._disposable.dispose()}async getOrganizations(e){let t=(0,eM.b1)(),i=e?.userId??(await this.container.subscription.getSubscription(!0))?.account?.id;if(null==i)return this.updateOrganizations(void 0),this._organizations;if(void 0===this._organizations||e?.force){let r;if(!e?.force&&(this.loadStoredOrganizations(i),null!=this._organizations))return this._organizations;try{r=await this.connection.fetchApi("user/organizations-light",{method:"GET"},{token:e?.accessToken})}catch(e){return eq.YJ.error(e,t),C.window.showErrorMessage(`Unable to get organizations due to error: ${e}`,"OK"),this.updateOrganizations(void 0),this._organizations}if(!r.ok)return eq.YJ.error("",t,`Unable to get organizations; status=(${r.status}): ${r.statusText}`),C.window.showErrorMessage(`Unable to get organizations; Status: ${r.statusText}`,"OK"),this.updateOrganizations(null),this._organizations;let s=(await r.json()).map(e=>({id:e.id,name:e.name,role:e.role}));await this.storeOrganizations(s,i),this.updateOrganizations(s)}return this._organizations}loadStoredOrganizations(e){let t=this.container.storage.get(`gk:${e}:organizations`);if(null==t)return;let{timestamp:i,data:r}=t;null==i||Date.now()-i>864e5||this.updateOrganizations(r)}async storeOrganizations(e,t){return this.container.storage.store(`gk:${t}:organizations`,{v:1,timestamp:Date.now(),data:e})}onSubscriptionChanged(e){e.current?.account?.id==null&&this.updateOrganizations(void 0),this.updateOrganizationPermissions(e.current?.activeOrganization?.id)}updateOrganizations(e){this._organizations=e,(0,iN.Qr)("gitlens:gk:hasOrganizations",(e??[]).length>1)}async updateOrganizationPermissions(e){let t=null!=e?await this.getOrganizationSettings(e):void 0;if(null==t){(0,iN.Qr)("gitlens:gk:organization:ai:enabled",!0),(0,iN.Qr)("gitlens:gk:organization:drafts:enabled",!0),(0,iN.Qr)("gitlens:gk:organization:drafts:byob",!1);return}(0,iN.Qr)("gitlens:gk:organization:ai:enabled",t.aiSettings.enabled??!0),(0,iN.Qr)("gitlens:gk:organization:drafts:enabled",t.draftsSettings.enabled??!0),(0,iN.Qr)("gitlens:gk:organization:drafts:byob",null!=t.draftsSettings.bucket)}async getFullOrganization(e,t){if(!this._fullOrganizations?.has(e)||t?.force===!0){let t=await this.container.subscription.getAuthenticationSession(),i=await this.connection.fetchApi(`organization/${e}`,{method:"GET"},{token:t?.accessToken});if(!i.ok){eq.YJ.error("",(0,eM.b1)(),`Unable to get organization; status=(${i.status}): ${i.statusText}`);return}let r=await i.json();null==this._fullOrganizations&&(this._fullOrganizations=new Map),r.members.sort((e,t)=>(e.name??e.username).localeCompare(t.name??t.username)),this._fullOrganizations.set(e,r)}return this._fullOrganizations.get(e)}async getOrganizationMembers(e,t){let i=await this.getFullOrganization(e,t);return null!=i?i.members:[]}async getActiveOrganizationId(e=!0){let t=await this.container.subscription.getSubscription(e);return t?.activeOrganization?.id}async getOrganizationSettings(e,t){let i=e??await this.getActiveOrganizationId();if(null!=i){if(!this._organizationSettings?.has(i)||t?.force===!0){let e=await this.container.subscription.getAuthenticationSession(),t=await this.connection.fetchApi("v1/organizations/settings",{method:"GET"},{token:e?.accessToken});if(!t.ok){eq.YJ.error("",(0,eM.b1)(),`Unable to get organization settings; status=(${t.status}): ${t.statusText}`);return}let r=await t.json();if(null!=r.error){eq.YJ.error("",(0,eM.b1)(),`Unable to get organization settings; status=(${t.status}): ${r.error}`);return}null==this._organizationSettings&&(this._organizationSettings=new Map),this._organizationSettings.set(i,r.data)}return this._organizationSettings.get(i)}}};rw([(0,tZ.I)()],OrganizationService.prototype,"getOrganizations",1),rw([(0,tZ.I)()],OrganizationService.prototype,"loadStoredOrganizations",1),rw([(0,tZ.I)()],OrganizationService.prototype,"getFullOrganization",1),rw([(0,tZ.I)()],OrganizationService.prototype,"getOrganizationMembers",1),rw([(0,tZ.I)()],OrganizationService.prototype,"getOrganizationSettings",1);var rv=i(4204);function ry(e,t,i){let r,s,o;let n={id:e.user.id,name:e.user.name,email:e.user.email,verified:"activated"===e.user.status,createdOn:e.user.createdDate},a=Object.entries(e.licenses.effectiveLicenses),l=Object.entries(e.licenses.paidLicenses);(l=l.filter(e=>"expired"!==e[1].latestStatus&&"cancelled"!==e[1].latestStatus)).length>1&&l.sort((e,t)=>(0,iK.uQ)(rb(t[0]))+rA(t[1].latestStatus)-((0,iK.uQ)(rb(e[0]))+rA(e[1].latestStatus))),a.length>1&&a.sort((e,t)=>(0,iK.uQ)(rb(t[0]))+rA(t[1].latestStatus)-((0,iK.uQ)(rb(e[0]))+rA(e[1].latestStatus)));let h=new Map,c=new Map;for(let e of a){let[,t]=e;null!=t.organizationId&&null==h.get(t.organizationId)&&h.set(t.organizationId,e)}for(let e of l){let[,t]=e;null!=t.organizationId&&null==c.get(t.organizationId)&&c.set(t.organizationId,e)}let u=t.filter(e=>!c.has(e.id)&&!h.has(e.id));null!=i&&(l=l.filter(([,e])=>e.organizationId===i||null==e.organizationId),a=a.filter(([,e])=>e.organizationId===i||null==e.organizationId));let d=l.length>0?l[0]:void 0,p=a.length>0?a[0]:void 0,g=null!=i?c.get(i)??d:d;if(null!=g){let[e,t]=g;r=(0,iK.sD)(rb(e),rC(e),t.reactivationCount??0,t.organizationId,new Date(t.latestStartDate),new Date(t.latestEndDate))}null==r&&(r=(0,iK.sD)(iK._o.FreePlus,!1,0,void 0,null!=e.user.firstGitLensCheckIn?new Date(e.user.firstGitLensCheckIn):null!=e.user.createdDate?new Date(e.user.createdDate):void 0,void 0,void 0,e.nextOptInDate));let m=null!=i?h.get(i)??p:p;if(null!=m){let[t,i]=m;s=(0,iK.sD)(rb(t),rC(t),i.reactivationCount??0,i.organizationId,new Date(i.latestStartDate),new Date(i.latestEndDate),"cancelled"===i.latestStatus,i.nextOptInDate??e.nextOptInDate)}return(null==s||(0,iK.uQ)(r.id)>=(0,iK.uQ)(s.id))&&(s={...r}),null!=i?o=t.find(e=>e.id===i):s?.organizationId!=null?o=t.find(e=>e.id===s.organizationId):u.length>0&&(o=u[0]),{plan:{actual:r,effective:s},account:n,activeOrganization:o}}function rb(e){switch(e){case"gitlens-pro":case"bundle-pro":case"gitkraken_v1-pro":return iK._o.Pro;case"gitlens-teams":case"bundle-teams":case"gitkraken_v1-teams":return iK._o.Teams;case"gitlens-hosted-enterprise":case"gitlens-self-hosted-enterprise":case"gitlens-standalone-enterprise":case"bundle-hosted-enterprise":case"bundle-self-hosted-enterprise":case"bundle-standalone-enterprise":case"gitkraken_v1-hosted-enterprise":case"gitkraken_v1-self-hosted-enterprise":case"gitkraken_v1-standalone-enterprise":return iK._o.Enterprise;default:return iK._o.FreePlus}}function rC(e){switch(e){case"bundle-pro":case"bundle-teams":case"bundle-hosted-enterprise":case"bundle-self-hosted-enterprise":case"bundle-standalone-enterprise":return!0;default:return!1}}function rA(e){switch(e){case"active":return 100;case"expired":case"cancelled":return -100;case"in_trial":case"trial":return 1;case"canceled":case"non_renewing":return 0;default:return -200}}var rk=i(5008),rP=Object.defineProperty,rS=Object.getOwnPropertyDescriptor,rR=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rS(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rP(t,i,o),o};let SubscriptionService=class SubscriptionService{constructor(e,t,i){this.container=e,this.connection=t,this._disposable=C.Disposable.from((0,tX.qw)(e.onReady)(this.onReady,this),this.container.accountAuthentication.onDidChangeSessions(e=>setTimeout(()=>this.onAuthenticationChanged(e),0),this),A.i.onDidChange(e=>{A.i.changed(e,"plusFeatures")&&this.updateContext()}));let r=this.getStoredSubscription();this._getCheckInData=()=>Promise.resolve(void 0),null!=r&&((0,eG.op)(i,"< 14.0")&&(r.previewTrial=void 0),r.account?.id!=null&&(this._getCheckInData=()=>this.loadStoredCheckInData(r.account.id))),this.changeSubscription(r,{silent:!0}),setTimeout(()=>void this.ensureSession(!1),1e4)}_onDidChange=new C.EventEmitter;get onDidChange(){return this._onDidChange.event}_disposable;_subscription;_getCheckInData;_statusBarSubscription;_validationTimer;dispose(){this._statusBarSubscription?.dispose(),this._disposable.dispose()}async onAuthenticationChanged(e){let t=this._session;if(null==t&&null!=this._sessionPromise&&(t=await this._sessionPromise),null!=t&&e.removed?.some(e=>e.id===t.id)){this._session=void 0,this._sessionPromise=void 0,this.logout();return}let i=e.added?.[0]??e.changed?.[0];if(null!=i){if(i.id===t?.id&&i.accessToken===t?.accessToken)return;this._session=t,this.validate({force:!0})}}_etag=0;get etag(){return this._etag}onReady(){this._disposable=C.Disposable.from(this._disposable,this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),...this.registerCommands()),this.updateContext()}onRepositoriesChanged(e){this.updateContext()}registerCommands(){return this.container.viewCommands,[(0,iX.or)(_.eq.GKSwitchOrganization,()=>this.switchOrganization()),(0,iX.or)(_.eq.PlusLogin,()=>this.loginOrSignUp()),(0,iX.or)(_.eq.PlusSignUp,()=>this.loginOrSignUp(!0)),(0,iX.or)(_.eq.PlusLogout,()=>this.logout()),(0,iX.or)(_.eq.PlusStartPreviewTrial,()=>this.startPreviewTrial()),(0,iX.or)(_.eq.PlusReactivateProTrial,()=>this.reactivateProTrial()),(0,iX.or)(_.eq.PlusManage,()=>this.manage()),(0,iX.or)(_.eq.PlusPurchase,()=>this.purchase()),(0,iX.or)(_.eq.PlusResendVerification,()=>this.resendVerification()),(0,iX.or)(_.eq.PlusValidate,()=>this.validate({force:!0})),(0,iX.or)(_.eq.PlusShowPlans,()=>this.showPlans()),(0,iX.or)(_.eq.PlusHide,()=>A.i.updateEffective("plusFeatures.enabled",!1)),(0,iX.or)(_.eq.PlusRestore,()=>A.i.updateEffective("plusFeatures.enabled",!0)),(0,iX.or)("gitlens.plus.reset",()=>this.logout(!0))]}async getAuthenticationSession(e=!1){return this.ensureSession(e)}async getSubscription(e=!1){let t=this.ensureSession(!1);return e||await t,this._subscription}async learnAboutPreviewOrTrial(){let e=await this.getSubscription();e.state===iK.cx.FreeInPreviewTrial?(0,eQ.IR)(this.container.context.extension.id,"gitlens.welcome","gitlens.welcome.preview",!1):e.state===iK.cx.FreePlusInTrial&&(0,eQ.IR)(this.container.context.extension.id,"gitlens.welcome","gitlens.welcome.trial",!1)}async loginOrSignUp(e=!1){if(!await (0,rk.u)())return!1;await this.container.accountAuthentication.abort(),this.showAccountView();let t=!!await this.ensureSession(!0,{signUp:e});if(t){let{account:e,plan:{actual:t,effective:i}}=this._subscription;if(e?.verified===!1){let e={title:"Resend Verification",isCloseAffordance:!0};await C.window.showInformationMessage(`You must verify your email before you can access ${i.name}.`,e,{title:"Cancel"})===e&&this.resendVerification()}else if((0,iK.mi)(this._subscription)){let e=(0,iK.ae)(this._subscription,"days"),t={title:"Learn More"};await C.window.showInformationMessage(`Welcome to ${i.name} (Trial). You can now try Pro features on privately hosted repos for ${(0,L.u)("more day",e??0)}.`,{modal:!0},{title:"OK",isCloseAffordance:!0},t)===t&&this.learnAboutPreviewOrTrial()}else(0,iK.i8)(this._subscription)?C.window.showInformationMessage(`Welcome to ${t.name}. You can now use Pro features on privately hosted repos.`,"OK"):C.window.showInformationMessage(`Welcome to ${t.name}. You can use Pro features on local & publicly hosted repos.`,"OK")}return t}async logout(e=!1){return this.logoutCore(e)}async logoutCore(e=!1){if(this._lastValidatedDate=void 0,null!=this._validationTimer&&(clearInterval(this._validationTimer),this._validationTimer=void 0),await this.container.accountAuthentication.abort(),this._sessionPromise=void 0,null!=this._session?(this.container.accountAuthentication.removeSession(this._session.id),this._session=void 0):this.container.accountAuthentication.removeSessionsByScopes(rp),e&&this.container.debugging){this.changeSubscription(void 0);return}this.changeSubscription({...this._subscription,plan:{actual:(0,iK.sD)(iK._o.Free,!1,0,void 0,this._subscription.plan?.actual?.startedOn!=null?new Date(this._subscription.plan.actual.startedOn):void 0),effective:(0,iK.sD)(iK._o.Free,!1,0,void 0,this._subscription.plan?.effective?.startedOn!=null?new Date(this._subscription.plan.actual.startedOn):void 0)},account:void 0,activeOrganization:void 0})}manage(){C.env.openExternal(this.connection.getAccountsUri())}async purchase(){await (0,rk.u)()&&(null==this._subscription.account?this.showPlans():C.env.openExternal(this.connection.getAccountsUri("subscription","product=gitlens&license=PRO")),await this.showAccountView())}async resendVerification(){if(this._subscription.account?.verified)return!0;let e=(0,eM.b1)();this.showAccountView(!0);let t=await this.ensureSession(!1);if(null==t)return!1;try{let i=await this.connection.fetchApi("resend-email",{method:"POST",body:JSON.stringify({id:t.account.id})},{token:t.accessToken});if(!i.ok)return eq.YJ.error("",e,`Unable to resend verification email; status=(${i.status}): ${i.statusText}`),C.window.showErrorMessage(`Unable to resend verification email; Status: ${i.statusText}`,"OK"),!1;let r={title:"Recheck"};if(await C.window.showInformationMessage("Once you have verified your email address, click 'Recheck'.",r,{title:"Cancel"})===r)return await this.validate({force:!0}),!0}catch(t){eq.YJ.error(t,e),C.window.showErrorMessage("Unable to resend verification email","OK")}return!1}async showAccountView(e=!1){(!e||A.i.get("plusFeatures.enabled",void 0,!0))&&!this.container.accountView.visible&&await (0,iX.gf)(_.eq.ShowAccountView)}showPlans(){C.env.openExternal(this.connection.getSiteUri("gitlens/pricing"))}async startPreviewTrial(e){let t;if(!await (0,rk.u)())return;let{plan:i,previewTrial:r}=this._subscription;if(null!=r){if(this.showAccountView(),!e&&i.effective.id===iK._o.Free){let e={title:"Start Pro Trial",isCloseAffordance:!0};await C.window.showInformationMessage("Your 3-day preview has ended. Start a free GitLens Pro trial to get an additional 7 days.\n\n✨ A trial or paid plan is required to use Pro features on privately hosted repos.",{modal:!0},e,{title:"Cancel"})===e&&this.loginOrSignUp()}return}if((0,iK.S6)(this._subscription))return;let s=new Date,o=new Date(s);this.container.debugging?(o=(0,ey.QZ)(o,{minutes:1}),t=0):(o.setHours(23,59,59,999),o=(0,ey.QZ)(o,{days:3}),t=3),r={startedOn:s.toISOString(),expiresOn:o.toISOString()},this.changeSubscription({...this._subscription,plan:{...this._subscription.plan,effective:(0,iK.sD)(iK._o.Pro,!1,0,void 0,s,o)},previewTrial:r}),e||setTimeout(async()=>{let e={title:"Learn More"};await C.window.showInformationMessage(`You can now preview Pro features for ${(0,L.u)("day",t)}. After which, you can start a free GitLens Pro trial for an additional 7 days.`,{title:"OK",isCloseAffordance:!0},e)===e&&this.learnAboutPreviewOrTrial()},1)}async reactivateProTrial(){if(!await (0,rk.u)())return;let e=(0,eM.b1)(),t=await this.ensureSession(!1);if(null==t)return;let i=await this.connection.fetchApi("user/reactivate-trial",{method:"POST",body:JSON.stringify({client:"gitlens"})});if(!i.ok){if(409===i.status){C.window.showErrorMessage("Unable to reactivate trial: User not eligible. Please try again. If this issue persists, please contact support.","OK");return}C.window.showErrorMessage(`Unable to reactivate trial: (${i.status}) ${i.statusText}. Please try again. If this issue persists, please contact support.`,"OK");return}try{if(await this.checkInAndValidate(t,{force:!0}),(0,iK.mi)(this._subscription)){let e=(0,iK.ae)(this._subscription,"days"),t={title:"See What's New"};await C.window.showInformationMessage(`Your new trial has been activated! Enjoy access to Pro features on privately hosted repos for another ${(0,L.u)("day",e??0)}.`,{modal:!0},{title:"OK",isCloseAffordance:!0},t)===t&&C.env.openExternal(C.Uri.parse("https://help.gitkraken.com/gitlens/gitlens-release-notes-current/"))}}catch(t){eq.YJ.error(t,e)}}async validate(e){let t=(0,eM.b1)(),i=await this.ensureSession(!1);if(null==i){this.changeSubscription(this._subscription);return}try{await this.checkInAndValidate(i,e)}catch(e){eq.YJ.error(e,t)}}_lastValidatedDate;async checkInAndValidate(e,t){let i=(0,eM.b1)();if(!t?.force&&null!=this._lastValidatedDate&&Date.now()-this._lastValidatedDate.getTime()<432e5&&!(0,iK.eM)(this._subscription)){(0,eM._W)(i,` (${(0,ey.Yn)(this._lastValidatedDate.getTime(),!0)})...`,"skipped");return}let r=this.checkInAndValidateCore(e);if(!t?.showSlowProgress)return r;let s=await (0,tK.sZ)(r,void 0,3e3);return s.paused?C.window.withProgress({location:C.ProgressLocation.Notification,title:"Validating your GitKraken account..."},()=>s.value):s.value}async checkInAndValidateCore(e){let t=(0,eM.b1)();this._lastValidatedDate=void 0;try{let t={id:e.account.id,platform:(0,tu.Kk)(),gitlensVersion:this.container.version,machineId:C.env.machineId,sessionId:C.env.sessionId,vscodeEdition:C.env.appName,vscodeHost:C.env.appHost,vscodeVersion:C.version,previewStartedOn:this._subscription.previewTrial?.startedOn,previewExpiresOn:this._subscription.previewTrial?.expiresOn},i=await this.connection.fetchApi("gitlens/checkin",{method:"POST",body:JSON.stringify(t)},{token:e.accessToken});if(!i.ok)throw this._getCheckInData=()=>Promise.resolve(void 0),new iJ.U7("Unable to validate account",void 0,i.status,i.statusText);let r=await i.json();return this._getCheckInData=()=>Promise.resolve(r),this.storeCheckInData(r),await this.validateAndUpdateSubscriptions(r,e),r}catch(e){if(this._getCheckInData=()=>Promise.resolve(void 0),eq.YJ.error(e,t),e instanceof iJ.U7)throw e;throw new iJ.U7("Unable to validate account",e)}finally{this.startDailyValidationTimer()}}startDailyValidationTimer(){null!=this._validationTimer&&clearInterval(this._validationTimer),this._validationTimer=setInterval(()=>{(null==this._lastValidatedDate||this._lastValidatedDate.getDate()!==new Date().getDate())&&this.ensureSession(!1,{force:!0})},216e5)}storeCheckInData(e){e.user?.id!=null&&this.container.storage.store(`gk:${e.user.id}:checkin`,{v:1,timestamp:Date.now(),data:e})}async loadStoredCheckInData(e){let t=(0,eM.b1)(),i=this.container.storage.get(`gk:${e}:checkin`);if(i?.timestamp==null||Date.now()-i.timestamp>864e5){let e=await this.getAuthenticationSession(!1);if(null==e)return;try{return await this.checkInAndValidate(e,{force:!0})}catch(e){eq.YJ.error(e,t);return}}return i?.data}async validateAndUpdateSubscriptions(e,t){let i;let r=(0,eM.b1)();try{i=await this.container.organizations.getOrganizations({force:!0,accessToken:t.accessToken,userId:t.account.id})??[]}catch(e){eq.YJ.error(e,r),i=[]}let s=A.i.get("gitKraken.activeOrganizationId")??void 0;""===s?s=void 0:null==s||i.some(e=>e.id===s)||(s=void 0,A.i.updateEffective("gitKraken.activeOrganizationId",void 0));let o=ry(e,i,s);this._lastValidatedDate=new Date,this.changeSubscription({...this._subscription,...o},{store:!0})}_sessionPromise;_session;async ensureSession(e,t){return(null!=this._sessionPromise&&await this._sessionPromise,t?.force||null==this._session)?null!==this._session||e?(void 0===this._sessionPromise&&(this._sessionPromise=this.getOrCreateSession(e,t?.signUp).then(e=>(this._session=e,this._sessionPromise=void 0,this._session),()=>(this._session=null,this._sessionPromise=void 0,this._session))),await this._sessionPromise??void 0):void 0:this._session}async getOrCreateSession(e,t=!1){let i;let r=(0,eM.b1)();try{i=await C.authentication.getSession(rd,t?[...rp,"signUp"]:rp,{createIfNone:e,silent:!e})}catch(e){if(i=null,e instanceof Error&&e.message.includes("User did not consent"))return(0,eM._W)(r," • User declined authentication"),await this.logoutCore(),null;eq.YJ.error(e,r)}if(null==i)return(0,eM._W)(r," • No valid session was found"),await this.logoutCore(),i??null;try{await this.checkInAndValidate(i,{showSlowProgress:e,force:e})}catch(t){if(eq.YJ.error(t,r),this.container.telemetry.sendEvent("account/validation/failed",{"account.id":i.account.id,exception:String(t),code:t.original?.code,statusCode:t.statusCode}),(0,eM._W)(r,` \u2022 Account validation failed (${t.statusCode??t.original?.code})`,"FAILED"),t instanceof iJ.U7){let r=i.account.label;if(t.original?.code!=="ENOTFOUND"&&null!=t.statusCode&&t.statusCode<500&&t.statusCode>=400){if(i=null,await this.logoutCore(),e){let e=401===t.statusCode;queueMicrotask(async()=>{let i={title:"Retry Sign In"};await C.window.showErrorMessage(`Unable to sign in to your (${r}) GitKraken account. Please try again. If this issue persists, please contact support.${e?"":` Error=${t.message}`}`,i)===i&&this.loginOrSignUp()})}}else i=i??null}}return i}changeSubscription(e,t){null==e&&(e={plan:{actual:(0,iK.sD)(iK._o.Free,!1,0,void 0),effective:(0,iK.sD)(iK._o.Free,!1,0,void 0)},account:void 0,state:iK.cx.Free}),(0,iK.eM)(e)&&(e={...e,plan:{...e.plan,effective:e.plan.actual}}),!(0,iK.i8)(e)&&null!=e.previewTrial&&((0,iK.sR)(e.previewTrial.expiresOn)??0)>0&&(e={...e,plan:{...e.plan,effective:(0,iK.sD)(iK._o.Pro,!1,0,void 0,new Date(e.previewTrial.startedOn),new Date(e.previewTrial.expiresOn))}}),e.state=(0,iK.I1)(e),(0,iK.y)(e);let i=this._subscription,r=null!=i&&JSON.stringify(i)===JSON.stringify(e);if(r){t?.store&&this.storeSubscription(e);return}queueMicrotask(()=>{let t=rD(e);this.container.telemetry.setGlobalAttributes(t),t={...t,...r?{}:rD(i,"previous")},this.container.telemetry.sendEvent(null==i?"subscription":"subscription/changed",t)}),this.storeSubscription(e),this._subscription=e,this._etag=Date.now(),t?.silent||(this.updateContext(),null!=i&&this._onDidChange.fire({current:e,previous:i,etag:this._etag}))}getStoredSubscription(){let e,t;let i=this.container.storage.get("premium:subscription");return i?.data!=null?({lastValidatedAt:e,...t}=i.data,this._lastValidatedDate=null!=e?new Date(e):void 0):t=void 0,null!=t&&(t.plan.actual.name=(0,iK.c)(t.plan.actual.id),t.plan.effective.name=(0,iK.c)(t.plan.effective.id)),t}async storeSubscription(e){return this.container.storage.store("premium:subscription",{v:1,data:{...e,lastValidatedAt:this._lastValidatedDate?.getTime()}})}_cancellationSource;_updateAccessContextDebounced;updateContext(){this._updateAccessContextDebounced?.cancel(),null==this._updateAccessContextDebounced&&(this._updateAccessContextDebounced=(0,tX.Cu)(this.updateAccessContext.bind(this),500)),null!=this._cancellationSource&&this._cancellationSource.cancel(),this._cancellationSource=new C.CancellationTokenSource,this._updateAccessContextDebounced(this._cancellationSource.token),this.updateStatusBar();let{plan:{actual:e},state:t}=this._subscription;(0,iN.Qr)("gitlens:plus",e.id!=iK._o.Free?e.id:void 0),(0,iN.Qr)("gitlens:plus:state",t)}async updateAccessContext(e){let t,i=!1;if(0!==this.container.git.repositoryCount&&({allowed:i}=await this.container.git.access(),e.isCancellationRequested))return;let r=A.i.get("plusFeatures.enabled")??!0;if(!r&&"mixed"===i)for(let i of(t=[],this.container.git.repositories)){if(i.closed)continue;let r=await this.container.git.access(void 0,i.uri);if(e.isCancellationRequested)return;r.allowed||t.push(i.uri.toString())}(0,iN.Qr)("gitlens:plus:enabled",!!i||r),(0,iN.Qr)("gitlens:plus:required",!1===i),(0,iN.Qr)("gitlens:plus:disallowedRepos",t)}updateStatusBar(){let{account:e,plan:{effective:t},state:i}=this._subscription;if(t.id===iK._o.Free){this._statusBarSubscription?.dispose(),this._statusBarSubscription=void 0;return}let r=(0,iK.mi)(this._subscription);if(!r&&e?.verified!==!1){this._statusBarSubscription?.dispose(),this._statusBarSubscription=void 0;return}if(null==this._statusBarSubscription&&(this._statusBarSubscription=C.window.createStatusBarItem("gitlens.plus.subscription",C.StatusBarAlignment.Left,1)),this._statusBarSubscription.name="GitKraken Subscription",this._statusBarSubscription.command=_.eq.ShowAccountView,e?.verified===!1)this._statusBarSubscription.text=`$(warning) ${t.name} (Unverified)`,this._statusBarSubscription.backgroundColor=new C.ThemeColor("statusBarItem.warningBackground"),this._statusBarSubscription.tooltip=new C.MarkdownString(r?`**Please verify your email**

You must verify your email before you can start your **${t.name}** trial.

Click for details`:`**Please verify your email**

You must verify your email before you can use Pro features on privately hosted repos.

Click for details`,!0);else{let e=(0,iK.ae)(this._subscription,"days"),r=i===iK.cx.FreePlusInTrial&&t.trialReactivationCount>0;this._statusBarSubscription.text=`${t.name} (Trial)`,this._statusBarSubscription.tooltip=new C.MarkdownString(`${r?`[See what's new](https://help.gitkraken.com/gitlens/gitlens-release-notes-current/) with
			${(0,L.u)("day",e??0,{infix:" more "})}
			in your **${t.name}** trial.`:`You have ${(0,L.u)("day",e??0)} remaining in your **${t.name}** trial.`} Once your trial ends, you'll need a paid plan to continue using \u2728 features.

Try our
			[other developer tools](https://www.gitkraken.com/suite) also included in your trial.`,!0)}this._statusBarSubscription.show()}async switchOrganization(){let e;let t=(0,eM.b1)(),i=await this._getCheckInData();if(null==i)return;try{e=await this.container.organizations.getOrganizations()}catch(e){eq.YJ.error(e,t);return}if(null==e||0===e.length)return;let r=e.map(e=>({label:e.name,org:e})),s=await C.window.showQuickPick(r,{title:"Switch Organization",placeHolder:"Select the active organization for your GitKraken account"}),o=this._subscription?.activeOrganization;if(s?.org==null||null!=o&&s.org.id===o.id)return;let n=ry(i,e,s.org.id);A.i.get("gitKraken.activeOrganizationId")!==s.org.id&&await A.i.updateEffective("gitKraken.activeOrganizationId",s.org.id),this.changeSubscription({...this._subscription,...n},{store:!0})}};function rD(e,t){return null==e?{}:{...(0,rv.YX)(e.account,{arrays:"join",prefix:`${t?`${t}.`:""}account`,skipPaths:["name","email"],skipNulls:!0,stringify:!0}),...(0,rv.YX)(e.plan,{prefix:`${t?`${t}.`:""}subscription`,skipPaths:["actual.name","effective.name"],skipNulls:!0,stringify:!0}),...(0,rv.YX)(e.previewTrial,{prefix:`${t?`${t}.`:""}subscription.previewTrial`,skipPaths:["actual.name","effective.name"],skipNulls:!0,stringify:!0}),"subscription.state":e.state}}rR([(0,eW.u_)()],SubscriptionService.prototype,"learnAboutPreviewOrTrial",1),rR([(0,eW.Yz)()],SubscriptionService.prototype,"loginOrSignUp",1),rR([(0,eW.Yz)()],SubscriptionService.prototype,"logout",1),rR([(0,eW.Yz)()],SubscriptionService.prototype,"manage",1),rR([(0,eW.Yz)()],SubscriptionService.prototype,"purchase",1),rR([(0,tZ.I)(),(0,eW.Yz)()],SubscriptionService.prototype,"resendVerification",1),rR([(0,eW.Yz)()],SubscriptionService.prototype,"showAccountView",1),rR([(0,tZ.I)(),(0,eW.Yz)()],SubscriptionService.prototype,"startPreviewTrial",1),rR([(0,tZ.I)(),(0,eW.Yz)()],SubscriptionService.prototype,"reactivateProTrial",1),rR([(0,tZ.I)(e=>`${e?.force??!1}`),(0,eW.Yz)()],SubscriptionService.prototype,"validate",1),rR([(0,eW.u_)({args:{0:e=>e?.account?.label}})],SubscriptionService.prototype,"checkInAndValidate",1),rR([(0,tZ.I)(e=>e.account.id),(0,eW.u_)({args:{0:e=>e?.account?.label}})],SubscriptionService.prototype,"checkInAndValidateCore",1),rR([(0,eW.u_)()],SubscriptionService.prototype,"validateAndUpdateSubscriptions",1),rR([(0,tZ.I)(),(0,eW.u_)()],SubscriptionService.prototype,"ensureSession",1),rR([(0,eW.u_)()],SubscriptionService.prototype,"getOrCreateSession",1),rR([(0,eW.u_)()],SubscriptionService.prototype,"changeSubscription",1);var r$=Object.defineProperty,r_=Object.getOwnPropertyDescriptor,rI=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?r_(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&r$(t,i,o),o};let ServerConnection=class ServerConnection{constructor(e){this.container=e}dispose(){}get baseGkDevAccountsUri(){return"staging"===this.container.env?C.Uri.parse("https://staging.gitkraken.dev"):"dev"===this.container.env?C.Uri.parse("https://dev.gitkraken.dev"):C.Uri.parse("https://gitkraken.dev")}getGkDevAccountsUri(e,t){let i=null!=e?C.Uri.joinPath(this.baseGkDevAccountsUri,e):this.baseGkDevAccountsUri;return null!=t&&(i=i.with({query:t})),i}get accountsUri(){return"staging"===this.container.env?C.Uri.parse("https://stagingapp.gitkraken.com"):"dev"===this.container.env?C.Uri.parse("https://devapp.gitkraken.com"):C.Uri.parse("https://app.gitkraken.com")}getAccountsUri(e,t){let i=null!=e?C.Uri.joinPath(this.accountsUri,e):this.accountsUri;return null!=t&&(i=i.with({query:t})),i}get baseApiUri(){return"staging"===this.container.env?C.Uri.parse("https://stagingapi.gitkraken.com"):"dev"===this.container.env?C.Uri.parse("https://devapi.gitkraken.com"):C.Uri.parse("https://api.gitkraken.com")}getApiUrl(...e){return C.Uri.joinPath(this.baseApiUri,...e).toString()}get baseGkDevApiUri(){return"staging"===this.container.env?C.Uri.parse("https://staging-api.gitkraken.dev"):"dev"===this.container.env?C.Uri.parse("https://dev-api.gitkraken.dev"):C.Uri.parse("https://api.gitkraken.dev")}getGkDevApiUrl(...e){return C.Uri.joinPath(this.baseGkDevApiUri,...e).toString()}get siteUri(){let{env:e}=this.container;return"staging"===e?C.Uri.parse("https://staging.gitkraken.com"):"dev"===e?C.Uri.parse("https://dev.gitkraken.com"):C.Uri.parse("https://gitkraken.com")}getSiteUri(e,t){let i=null!=e?C.Uri.joinPath(this.siteUri,e):this.siteUri;return null!=t&&(i=i.with({query:t})),i}get userAgent(){return`${this.container.debugging?"GitLens-Debug":this.container.prerelease?"GitLens-Pre":"GitLens"}/${this.container.version} (${C.env.appName}/${C.version}; ${(0,tu.Kk)()})`}get clientName(){return this.container.debugging?"gitlens-vsc-debug":this.container.prerelease?"gitlens-vsc-pre":"gitlens-vsc"}async fetch(e,t,i){let r;let s=(0,eM.b1)();if(i?.cancellation?.isCancellationRequested)throw new iJ.WO;let o=new AbortController;i?.cancellation!=null?(r=i.timeout,i.cancellation.onCancellationRequested(()=>o.abort())):r=i?.timeout??6e4;let n=null!=r?setTimeout(()=>o.abort(),r):void 0;try{let i=(0,tc.I5)(e,{agent:(0,tc.aE)(),...t,headers:{"User-Agent":this.userAgent,...t?.headers},signal:o?.signal});return i.finally(()=>clearTimeout(n)),await i}catch(e){if(eq.YJ.error(e,s),"AbortError"===e.name)throw new iJ.WO(e);throw e}}async fetchApi(e,t,i){return this.gkFetch(this.getApiUrl(e),t,i)}async fetchApiGraphQL(e,t,i,r){return this.fetchApi(e,{method:"POST",...i,body:JSON.stringify(t)},r)}async fetchGkDevApi(e,t,i){return this.gkFetch(this.getGkDevApiUrl(e),t,i)}async gkFetch(e,t,i){let r=(0,eM.b1)();try{let r;({token:r,...i}=i??{}),i?.unAuthenticated||(r??=await this.getAccessToken());let s={Authorization:`Bearer ${r}`,"Content-Type":"application/json","Client-Name":this.clientName,"Client-Version":this.container.version,...t?.headers},o=(await this.container.subscription.getSubscription(!0)).activeOrganization?.id;return null!=o&&(s["gk-org-id"]=o),this.fetch(e,{...t,headers:s},i)}catch(e){throw eq.YJ.error(e,r),e}}async getAccessToken(){let e=await this.container.subscription.getAuthenticationSession();if(null!=e)return e.accessToken;throw new iJ.CW}};rI([(0,eb.s)()],ServerConnection.prototype,"baseGkDevAccountsUri",1),rI([(0,eb.s)()],ServerConnection.prototype,"accountsUri",1),rI([(0,eb.s)()],ServerConnection.prototype,"baseApiUri",1),rI([(0,eb.s)()],ServerConnection.prototype,"baseGkDevApiUri",1),rI([(0,eb.s)()],ServerConnection.prototype,"siteUri",1),rI([(0,eb.s)()],ServerConnection.prototype,"userAgent",1),rI([(0,eb.s)()],ServerConnection.prototype,"clientName",1);var rT=((m=rT||{}).GitHub="github",m.GitLab="gitlab",m.Bitbucket="bitbucket",m.Jira="jira",m.Trello="trello",m.AzureDevOps="azureDevOps",m),rF=((f=rF||{}).GitHubEnterprise="github-enterprise",f.GitLabSelfHosted="gitlab-self-hosted",f);let rO=["github-enterprise","gitlab-self-hosted"];var rx=((w=rx||{}).Author="author",w.Assignee="assignee",w.ReviewRequested="review-requested",w.Mention="mention",w),rE=((v=rE||{}).Author="author",v.Assignee="assignee",v.Mention="mention",v),rB=((y=rB||{}).Project="project",y.Repo="repo",y.Repos="repos",y);let rU={github:{domain:"github.com",id:"github",issuesPagingMode:"repos",pullRequestsPagingMode:"repos",supportedPullRequestFilters:["author","assignee","review-requested","mention"],supportedIssueFilters:["author","assignee","mention"],scopes:["repo","read:user","user:email"]},"github-enterprise":{domain:"",id:"github-enterprise",issuesPagingMode:"repos",pullRequestsPagingMode:"repos",supportedPullRequestFilters:["author","assignee","review-requested","mention"],supportedIssueFilters:["author","assignee","mention"],scopes:["repo","read:user","user:email"]},gitlab:{domain:"gitlab.com",id:"gitlab",issuesPagingMode:"repo",pullRequestsPagingMode:"repo",supportedPullRequestFilters:["author","assignee","review-requested"],supportedIssueFilters:["author","assignee"],scopes:["read_api","read_user","read_repository"]},"gitlab-self-hosted":{domain:"",id:"gitlab-self-hosted",issuesPagingMode:"repo",pullRequestsPagingMode:"repo",supportedPullRequestFilters:["author","assignee","review-requested"],supportedIssueFilters:["author","assignee"],scopes:["read_api","read_user","read_repository"]},bitbucket:{domain:"bitbucket.org",id:"bitbucket",pullRequestsPagingMode:"repo",supportedPullRequestFilters:["author"],scopes:["account:read","repository:read","pullrequest:read","issue:read"]},azureDevOps:{domain:"dev.azure.com",id:"azureDevOps",issuesPagingMode:"project",pullRequestsPagingMode:"repo",supportedPullRequestFilters:["author","assignee"],supportedIssueFilters:["author","assignee","mention"],scopes:["vso.code","vso.identity","vso.project","vso.profile","vso.work"]},jira:{domain:"atlassian.net",id:"jira",scopes:[]},trello:{domain:"trello.com",id:"trello",scopes:[]}};let AzureDevOpsAuthenticationProvider=class AzureDevOpsAuthenticationProvider{getSessionId(e){return e?.domain??""}async createSession(e){let t,i=e?.organization;if(!i){let t=C.window.createInputBox();t.ignoreFocusOut=!0;let r=[];try{i=await new Promise(i=>{r.push(t.onDidHide(()=>i(void 0)),t.onDidChangeValue(()=>t.validationMessage=void 0),t.onDidAccept(()=>{let e=t.value.trim();if(!e){t.validationMessage="An organization is required";return}i(e)})),t.title=`Azure DevOps Authentication${e?.domain?`  \u2022 ${e.domain}`:""}`,t.placeholder="Organization",t.prompt="Enter your Azure DevOps organization",t.show()})}finally{t.dispose(),r.forEach(e=>void e.dispose())}}if(!i)return;let r=C.window.createInputBox();r.ignoreFocusOut=!0;let s=[];try{let o={iconPath:new C.ThemeIcon("link-external"),tooltip:"Open the Azure DevOps Access Tokens Page"};t=await new Promise(t=>{s.push(r.onDidHide(()=>t(void 0)),r.onDidChangeValue(()=>r.validationMessage=void 0),r.onDidAccept(()=>{let e=r.value.trim();if(!e){r.validationMessage="A personal access token is required";return}t(e)}),r.onDidTriggerButton(t=>{t===o&&C.env.openExternal(C.Uri.parse(`https://${e?.domain??"dev.azure.com"}/${i}/_usersSettings/tokens`))})),r.password=!0,r.title=`Azure DevOps Authentication${e?.domain?`  \u2022 ${e.domain}`:""}`,r.placeholder=`Requires ${e?.scopes.join(", ")??"all"} scopes`,r.prompt=(0,eQ.gO)("input-prompt-links")?`Paste your [Azure DevOps Personal Access Token](https://${e?.domain??"dev.azure.com"}/${i}/_usersSettings/tokens "Get your Azure DevOps Access Token")`:"Paste your Azure DevOps Personal Access Token",r.buttons=[o],r.show()})}finally{r.dispose(),s.forEach(e=>void e.dispose())}if(t)return{id:this.getSessionId(e),accessToken:(0,L.Al)(`:${t}`),scopes:e?.scopes??[],account:{id:"",label:""}}}};let BitbucketAuthenticationProvider=class BitbucketAuthenticationProvider{getSessionId(e){return e?.domain??""}async createSession(e){let t,i=e?.username;if(!i){let t={iconPath:new C.ThemeIcon("link-external"),tooltip:"Open the Bitbucket Settings Page"},r=C.window.createInputBox();r.ignoreFocusOut=!0;let s=[];try{i=await new Promise(i=>{s.push(r.onDidHide(()=>i(void 0)),r.onDidChangeValue(()=>r.validationMessage=void 0),r.onDidAccept(()=>{let e=r.value.trim();if(!e){r.validationMessage="A Bitbucket username is required";return}i(e)}),r.onDidTriggerButton(i=>{i===t&&C.env.openExternal(C.Uri.parse(`https://${e?.domain??"bitbucket.org"}/account/settings/`))})),r.title=`Bitbucket Authentication${e?.domain?`  \u2022 ${e.domain}`:""}`,r.placeholder="Username",r.prompt=(0,eQ.gO)("input-prompt-links")?`Enter your [Bitbucket Username](https://${e?.domain??"bitbucket.org"}/account/settings/ "Get your Bitbucket App Password")`:"Enter your Bitbucket Username",r.show()})}finally{r.dispose(),s.forEach(e=>void e.dispose())}}if(!i)return;let r=C.window.createInputBox();r.ignoreFocusOut=!0;let s=[];try{let i={iconPath:new C.ThemeIcon("link-external"),tooltip:"Open the Bitbucket App Passwords Page"};t=await new Promise(t=>{s.push(r.onDidHide(()=>t(void 0)),r.onDidChangeValue(()=>r.validationMessage=void 0),r.onDidAccept(()=>{let e=r.value.trim();if(!e){r.validationMessage="An app password is required";return}t(e)}),r.onDidTriggerButton(t=>{t===i&&C.env.openExternal(C.Uri.parse(`https://${e?.domain??"bitbucket.org"}/account/settings/app-passwords/`))})),r.password=!0,r.title=`Bitbucket Authentication${e?.domain?`  \u2022 ${e.domain}`:""}`,r.placeholder=`Requires ${e?.scopes.join(", ")??"all"} scopes`,r.prompt=(0,eQ.gO)("input-prompt-links")?`Paste your [Bitbucket App Password](https://${e?.domain??"bitbucket.org"}/account/settings/app-passwords/ "Get your Bitbucket App Password")`:"Paste your Bitbucket App Password",r.buttons=[i],r.show()})}finally{r.dispose(),s.forEach(e=>void e.dispose())}if(t)return{id:this.getSessionId(e),accessToken:(0,L.Al)(`${i}:${t}`),scopes:e?.scopes??[],account:{id:"",label:""}}}};let GitHubEnterpriseAuthenticationProvider=class GitHubEnterpriseAuthenticationProvider{getSessionId(e){return e?.domain??""}async createSession(e){let t;let i=C.window.createInputBox();i.ignoreFocusOut=!0;let r=[];try{let s={iconPath:new C.ThemeIcon("link-external"),tooltip:"Open the GitHub Access Tokens Page"};t=await new Promise(t=>{r.push(i.onDidHide(()=>t(void 0)),i.onDidChangeValue(()=>i.validationMessage=void 0),i.onDidAccept(()=>{let e=i.value.trim();if(!e){i.validationMessage="A personal access token is required";return}t(e)}),i.onDidTriggerButton(t=>{t===s&&C.env.openExternal(C.Uri.parse(`https://${e?.domain??"github.com"}/settings/tokens`))})),i.password=!0,i.title=`GitHub Authentication${e?.domain?`  \u2022 ${e.domain}`:""}`,i.placeholder=`Requires ${e?.scopes.join(", ")??"all"} scopes`,i.prompt=(0,eQ.gO)("input-prompt-links")?`Paste your [GitHub Personal Access Token](https://${e?.domain??"github.com"}/settings/tokens "Get your GitHub Access Token")`:"Paste your GitHub Personal Access Token",i.buttons=[s],i.show()})}finally{i.dispose(),r.forEach(e=>void e.dispose())}if(t)return{id:this.getSessionId(e),accessToken:t,scopes:e?.scopes??[],account:{id:"",label:""}}}};let GitLabAuthenticationProvider=class GitLabAuthenticationProvider{getSessionId(e){return e?.domain??""}async createSession(e){let t;let i=C.window.createInputBox();i.ignoreFocusOut=!0;let r=[];try{let s={iconPath:new C.ThemeIcon("link-external"),tooltip:"Open the GitLab Access Tokens Page"};t=await new Promise(t=>{r.push(i.onDidHide(()=>t(void 0)),i.onDidChangeValue(()=>i.validationMessage=void 0),i.onDidAccept(()=>{let e=i.value.trim();if(!e){i.validationMessage="A personal access token is required";return}t(e)}),i.onDidTriggerButton(t=>{t===s&&C.env.openExternal(C.Uri.parse(`https://${e?.domain??"gitlab.com"}/-/profile/personal_access_tokens`))})),i.password=!0,i.title=`GitLab Authentication${e?.domain?`  \u2022 ${e.domain}`:""}`,i.placeholder=`Requires ${e?.scopes.join(", ")??"all"} scopes`,i.prompt=(0,eQ.gO)("input-prompt-links")?`Paste your [GitLab Personal Access Token](https://${e?.domain??"gitlab.com"}/-/profile/personal_access_tokens "Get your GitLab Access Token")`:"Paste your GitLab Personal Access Token",i.buttons=[s],i.show()})}finally{i.dispose(),r.forEach(e=>void e.dispose())}if(t)return{id:this.getSessionId(e),accessToken:t,scopes:e?.scopes??[],account:{id:"",label:""}}}};var rW=Object.defineProperty,rN=Object.getOwnPropertyDescriptor,rq=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rN(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rW(t,i,o),o};let IntegrationAuthenticationService=class IntegrationAuthenticationService{constructor(e){this.container=e}providers=new Map;dispose(){this.providers.clear()}async createSession(e,t){let i=this.ensureProvider(e),r=await i.createSession(t);if(null==r)return;let s=this.getSecretKey(e,i.getSessionId(t));return await this.container.storage.storeSecret(s,JSON.stringify(r)),r}async getSession(e,t,i){if(this.supports(e)){let r;let s=this.ensureProvider(e),o=this.getSecretKey(e,s.getSessionId(t));i?.forceNewSession&&await this.container.storage.deleteSecret(o);try{let e=await this.container.storage.getSecret(o);e&&(r=JSON.parse(e))}catch(e){try{await this.container.storage.deleteSecret(o)}catch{}if(!i?.createIfNeeded)throw e}return i?.createIfNeeded&&null==r?this.createSession(e,t):r}if(null==t)return;let{createIfNeeded:r,forceNewSession:s}=i??{};return(0,tc.uE)(this.container.integrations.ignoreSSLErrors({id:e,domain:t?.domain}),()=>C.authentication.getSession(e,t.scopes,{createIfNone:s?void 0:r,silent:!r&&!s||void 0,forceNewSession:!!s||void 0}))}async deleteSession(e,t){let i=this.ensureProvider(e),r=this.getSecretKey(e,i.getSessionId(t));await this.container.storage.deleteSecret(r)}supports(e){switch(e){case rT.AzureDevOps:case rT.Bitbucket:case rF.GitHubEnterprise:case rT.GitLab:case rF.GitLabSelfHosted:return!0;default:return!1}}getSecretKey(e,t){return`gitlens.integration.auth:${e}|${t}`}ensureProvider(e){let t=this.providers.get(e);if(null==t){switch(e){case rT.AzureDevOps:t=new AzureDevOpsAuthenticationProvider;break;case rT.Bitbucket:t=new BitbucketAuthenticationProvider;break;case rF.GitHubEnterprise:t=new GitHubEnterpriseAuthenticationProvider;break;case rT.GitLab:case rF.GitLabSelfHosted:t=new GitLabAuthenticationProvider;break;default:throw Error(`Provider '${e}' is not supported`)}this.providers.set(e,t)}return t}};rq([(0,eW.u_)()],IntegrationAuthenticationService.prototype,"createSession",1),rq([(0,eW.u_)()],IntegrationAuthenticationService.prototype,"getSession",1),rq([(0,eW.u_)()],IntegrationAuthenticationService.prototype,"deleteSession",1);var rL=Object.defineProperty,rM=Object.getOwnPropertyDescriptor,rQ=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rM(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rL(t,i,o),o};let ProviderIntegration=class ProviderIntegration{constructor(e,t){this.container=e,this.api=t}_onDidChange=new C.EventEmitter;get onDidChange(){return this._onDidChange.event}get authProviderDescriptor(){return{domain:this.domain,scopes:this.authProvider.scopes}}get icon(){return this.id}get connectedKey(){return`connected:${this.key}`}get maybeConnected(){return void 0===this._session?void 0:null!==this._session}_session;session(){return void 0===this._session?this.ensureSession(!1):this._session??void 0}async connect(){try{return!!await this.ensureSession(!0)}catch(e){return!1}}async disconnect(e){if(e?.currentSessionOnly&&null===this._session)return;let t=null!=this._session;if(t&&!e?.silent){if(e?.currentSessionOnly)(0,tJ.ue)(this.name);else{let e;let t={title:"Disable"},i={title:"Disable & Sign Out"},r={title:"Cancel",isCloseAffordance:!0};if(null==(e=this.container.integrationAuthentication.supports(this.authProvider.id)?await C.window.showWarningMessage(`Are you sure you want to disable the rich integration with ${this.name}?

Note: signing out clears the saved authentication.`,{modal:!0},t,i,r):await C.window.showWarningMessage(`Are you sure you want to disable the rich integration with ${this.name}?`,{modal:!0},t,r))||e===r)return;e===i&&this.container.integrationAuthentication.deleteSession(this.authProvider.id,this.authProviderDescriptor)}}this.resetRequestExceptionCount(),this._session=null,!t||(e?.currentSessionOnly||this.container.storage.storeWorkspace(this.connectedKey,!1),this._onDidChange.fire(),e?.silent||e?.currentSessionOnly||this.container.integrations.disconnected(this.key))}async reauthenticate(){void 0!==this._session&&(this._session=void 0,await this.ensureSession(!0,!0))}refresh(){this.ensureSession(!1)}requestExceptionCount=0;resetRequestExceptionCount(){this.requestExceptionCount=0}handleProviderException(e,t,i){return e instanceof iJ.WO||(eq.YJ.error(e,t),(e instanceof iJ.yA||e instanceof iJ.OW)&&this.trackRequestException()),i}trackRequestException(){this.requestExceptionCount++,this.requestExceptionCount>=5&&null!==this._session&&this.disconnect({currentSessionOnly:!0})}async isConnected(){return await this.session()!=null}async getAccountForCommit(e,t,i){let r=(0,eM.b1)();if(this.maybeConnected??await this.isConnected())try{let r=await this.getProviderAccountForCommit(this._session,e,t,i);return this.resetRequestExceptionCount(),r}catch(e){return this.handleProviderException(e,r,void 0)}}async getAccountForEmail(e,t,i){let r=(0,eM.b1)();if(this.maybeConnected??await this.isConnected())try{let r=await this.getProviderAccountForEmail(this._session,e,t,i);return this.resetRequestExceptionCount(),r}catch(e){return this.handleProviderException(e,r,void 0)}}async getDefaultBranch(e){let t=(0,eM.b1)();if(this.maybeConnected??await this.isConnected())return this.container.cache.getRepositoryDefaultBranch(e,this,()=>({value:(async()=>{try{let t=await this.getProviderDefaultBranch(this._session,e);return this.resetRequestExceptionCount(),t}catch(e){return this.handleProviderException(e,t,void 0)}})()}))}async getRepositoryMetadata(e,t){let i=(0,eM.b1)();if(this.maybeConnected??await this.isConnected())return this.container.cache.getRepositoryMetadata(e,this,()=>({value:(async()=>{try{let t=await this.getProviderRepositoryMetadata(this._session,e);return this.resetRequestExceptionCount(),t}catch(e){return this.handleProviderException(e,i,void 0)}})()}))}async getIssueOrPullRequest(e,t){let i=(0,eM.b1)();if(this.maybeConnected??await this.isConnected())return this.container.cache.getIssueOrPullRequest(t,e,this,()=>({value:(async()=>{try{let i=await this.getProviderIssueOrPullRequest(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,void 0)}})()}))}async getPullRequestForBranch(e,t,i){let r=(0,eM.b1)();if(this.maybeConnected??await this.isConnected())return this.container.cache.getPullRequestForBranch(t,e,this,()=>({value:(async()=>{try{let r=await this.getProviderPullRequestForBranch(this._session,e,t,i);return this.resetRequestExceptionCount(),r}catch(e){return this.handleProviderException(e,r,void 0)}})()}))}async getPullRequestForCommit(e,t){let i=(0,eM.b1)();if(this.maybeConnected??await this.isConnected())return this.container.cache.getPullRequestForSha(t,e,this,()=>({value:(async()=>{try{let i=await this.getProviderPullRequestForCommit(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,void 0)}})()}))}async getMyIssuesForRepos(e,t){let i;let r=this.authProvider.id;if(this.maybeConnected??await this.isConnected()){if(r!==rT.GitLab&&(this.api.isRepoIdsInput(e)||r===rT.AzureDevOps&&!e.every(e=>null!=e.project&&null!=e.namespace))){eq.YJ.warn(`Unsupported input for provider ${r}`,"getIssuesForRepos");return}if(r===rT.AzureDevOps){let s=new Set,o=new Set;for(let t of e)s.add(t.namespace),o.add(t.project);if(s.size>1){eq.YJ.warn(`Multiple organizations not supported for provider ${r}`,"getIssuesForRepos");return}if(0===s.size){eq.YJ.warn(`No organizations found for provider ${r}`,"getIssuesForRepos");return}let n=s.values().next().value;if(t?.filters!=null){let e;if(!this.api.providerSupportsIssueFilters(r,t.filters)){eq.YJ.warn(`Unsupported filters for provider ${r}`,"getIssuesForRepos");return}try{e=await this.api.getCurrentUserForInstance(r,n)}catch(e){eq.YJ.error(e,"getIssuesForRepos");return}if(null==e){eq.YJ.warn(`Unable to get current user for ${r}`,"getIssuesForRepos");return}let s=e.name;if(null==s){eq.YJ.warn(`Unable to get user property for filter for ${r}`,"getIssuesForRepos");return}i={authorLogin:t.filters.includes(rE.Author)?s:void 0,assigneeLogins:t.filters.includes(rE.Assignee)?[s]:void 0,mentionLogin:t.filters.includes(rE.Mention)?s:void 0}}let a=JSON.parse(t?.cursor??"{}").cursors??[],l=Array.from(o.values()).map(e=>({namespace:n,project:e,cursor:void 0}));a.length>0&&(l=a);try{let e={cursors:[]},t=!1,r=[];return await Promise.all(l.map(async s=>{let o=await this.api.getIssuesForAzureProject(s.namespace,s.project,{...i,cursor:s.cursor});r.push(...o.values),o.paging?.more&&(t=!0,e.cursors.push({namespace:s.namespace,project:s.project,cursor:o.paging.cursor}))})),{values:r,paging:{more:t,cursor:JSON.stringify(e)}}}catch(e){eq.YJ.error(e,"getIssuesForRepos");return}}if(t?.filters!=null){let e;try{e=await this.api.getCurrentUser(r)}catch(e){eq.YJ.error(e,"getIssuesForRepos");return}if(null==e){eq.YJ.warn(`Unable to get current user for ${r}`,"getIssuesForRepos");return}let s=e.username;if(null==s){eq.YJ.warn(`Unable to get user property for filter for ${r}`,"getIssuesForRepos");return}i={authorLogin:t.filters.includes(rE.Author)?s:void 0,assigneeLogins:t.filters.includes(rE.Assignee)?[s]:void 0,mentionLogin:t.filters.includes(rE.Mention)?s:void 0}}if(this.api.getProviderIssuesPagingMode(r)===rB.Repo&&!this.api.isRepoIdsInput(e)){let s=JSON.parse(t?.cursor??"{}").cursors??[],o=e.map(e=>({repo:e,cursor:void 0}));s.length>0&&(o=s);try{let e={cursors:[]},s=!1,n=[];return await Promise.all(o.map(async o=>{let a=await this.api.getIssuesForRepo(r,o.repo,{...i,cursor:o.cursor,baseUrl:t?.customUrl});n.push(...a.values),a.paging?.more&&(s=!0,e.cursors.push({repo:o.repo,cursor:a.paging.cursor}))})),{values:n,paging:{more:s,cursor:JSON.stringify(e)}}}catch(e){eq.YJ.error(e,"getIssuesForRepos");return}}try{return await this.api.getIssuesForRepos(r,e,{...i,cursor:t?.cursor,baseUrl:t?.customUrl})}catch(e){eq.YJ.error(e,"getIssuesForRepos");return}}}async getMyPullRequestsForRepos(e,t){let i;let r=this.authProvider.id;if(this.maybeConnected??await this.isConnected()){if(r!==rT.GitLab&&(this.api.isRepoIdsInput(e)||r===rT.AzureDevOps&&!e.every(e=>null!=e.project&&null!=e.namespace))){eq.YJ.warn(`Unsupported input for provider ${r}`);return}if(t?.filters!=null){let s,o;if(!this.api.providerSupportsPullRequestFilters(r,t.filters)){eq.YJ.warn(`Unsupported filters for provider ${r}`,"getPullRequestsForRepos");return}if(r===rT.AzureDevOps){let t=new Set;for(let i of e)t.add(i.namespace);if(t.size>1){eq.YJ.warn(`Multiple organizations not supported for provider ${r}`,"getPullRequestsForRepos");return}if(0===t.size){eq.YJ.warn(`No organizations found for provider ${r}`,"getPullRequestsForRepos");return}let i=t.values().next().value;try{s=await this.api.getCurrentUserForInstance(r,i)}catch(e){eq.YJ.error(e,"getPullRequestsForRepos");return}}else try{s=await this.api.getCurrentUser(r)}catch(e){eq.YJ.error(e,"getPullRequestsForRepos");return}if(null==s){eq.YJ.warn(`Unable to get current user for ${r}`,"getPullRequestsForRepos");return}switch(r){case rT.Bitbucket:case rT.AzureDevOps:o=s.id;break;default:o=s.username}if(null==o){eq.YJ.warn(`Unable to get user property for filter for ${r}`,"getPullRequestsForRepos");return}i={authorLogin:t.filters.includes(rx.Author)?o:void 0,assigneeLogins:t.filters.includes(rx.Assignee)?[o]:void 0,reviewRequestedLogin:t.filters.includes(rx.ReviewRequested)?o:void 0,mentionLogin:t.filters.includes(rx.Mention)?o:void 0}}if(this.api.getProviderPullRequestsPagingMode(r)===rB.Repo&&!this.api.isRepoIdsInput(e)){let s=JSON.parse(t?.cursor??"{}").cursors??[],o=e.map(e=>({repo:e,cursor:void 0}));s.length>0&&(o=s);try{let e={cursors:[]},s=!1,n=[];return await Promise.all(o.map(async o=>{let a=await this.api.getPullRequestsForRepo(r,o.repo,{...i,cursor:o.cursor,baseUrl:t?.customUrl});n.push(...a.values),a.paging?.more&&(s=!0,e.cursors.push({repo:o.repo,cursor:a.paging.cursor}))})),{values:n,paging:{more:s,cursor:JSON.stringify(e)}}}catch(e){eq.YJ.error(e,"getPullRequestsForRepos");return}}try{return this.api.getPullRequestsForRepos(r,e,{...i,cursor:t?.cursor,baseUrl:t?.customUrl})}catch(e){eq.YJ.error(e,"getPullRequestsForRepos");return}}}async searchMyIssues(e,t){let i=(0,eM.b1)();if(this.maybeConnected??await this.isConnected())try{let i=await this.searchProviderMyIssues(this._session,null!=e?Array.isArray(e)?e:[e]:void 0,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,void 0)}}async searchMyPullRequests(e,t){let i=(0,eM.b1)();if(this.maybeConnected??await this.isConnected())try{let i=await this.searchProviderMyPullRequests(this._session,null!=e?Array.isArray(e)?e:[e]:void 0,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,void 0)}}async ensureSession(e,t=!1){let i;if(null!=this._session)return this._session;if(A.i.get("integrations.enabled")){if(e)await this.container.storage.deleteWorkspace(this.connectedKey);else if(!1===this.container.storage.getWorkspace(this.connectedKey))return;try{i=await this.container.integrationAuthentication.getSession(this.authProvider.id,this.authProviderDescriptor,{createIfNeeded:e,forceNewSession:t})}catch(e){if(await this.container.storage.deleteWorkspace(this.connectedKey),e instanceof Error&&e.message.includes("User did not consent"))return;i=null}return void 0!==i||e||await this.container.storage.deleteWorkspace(this.connectedKey),this._session=i??null,this.resetRequestExceptionCount(),null!=i&&(await this.container.storage.storeWorkspace(this.connectedKey,!0),queueMicrotask(()=>{this._onDidChange.fire(),this.container.integrations.connected(this.key)})),i??void 0}}getIgnoreSSLErrors(){return this.container.integrations.ignoreSSLErrors(this)}};async function rG(e,t){let i=`Connecting to a ${e} instance for rich integration features requires a trial or paid plan.`;for(;;){let e=await t.subscription.getSubscription();if(e.account?.verified===!1){let e={title:"Resend Verification"},r={title:"Cancel",isCloseAffordance:!0};if(await C.window.showWarningMessage(`${i}

You must verify your email before you can continue.`,{modal:!0},e,r)===e&&await t.subscription.resendVerification())continue;return!1}let r=e.plan.effective.id;if((0,iK.Wk)(r))break;if(null!=e.account||(0,iK.UP)(e)){if(null==e.account){let e={title:"Start Pro Trial"},r={title:"Cancel",isCloseAffordance:!0};if(await C.window.showWarningMessage(`${i}

Do you want to continue to use \u2728 features on privately hosted repos, free for an additional 7 days?`,{modal:!0},e,r)===e&&await t.subscription.loginOrSignUp())continue}else{let e={title:"Upgrade to Pro"},r={title:"Cancel",isCloseAffordance:!0};await C.window.showWarningMessage(`${i}

Do you want to continue to use \u2728 features on privately hosted repos?`,{modal:!0},e,r)===e&&t.subscription.purchase()}}else{let e={title:"Preview Pro"},r={title:"Cancel",isCloseAffordance:!0};if(await C.window.showWarningMessage(`${i}

Do you want to preview \u2728 features for 3 days?`,{modal:!0},e,r)!==e)return!1;t.subscription.startPreviewTrial();break}return!1}return!0}rQ([(0,eW.Yz)()],ProviderIntegration.prototype,"connect",1),rQ([(0,tZ.I)(),(0,eW.Yz)()],ProviderIntegration.prototype,"disconnect",1),rQ([(0,eW.Yz)()],ProviderIntegration.prototype,"reauthenticate",1),rQ([(0,eW.u_)()],ProviderIntegration.prototype,"trackRequestException",1),rQ([(0,tZ.I)(),(0,eW.u_)({exit:!0})],ProviderIntegration.prototype,"isConnected",1),rQ([(0,tZ.I)(),(0,eW.u_)()],ProviderIntegration.prototype,"getAccountForCommit",1),rQ([(0,tZ.I)(),(0,eW.u_)()],ProviderIntegration.prototype,"getAccountForEmail",1),rQ([(0,eW.u_)()],ProviderIntegration.prototype,"getDefaultBranch",1),rQ([(0,eW.u_)()],ProviderIntegration.prototype,"getRepositoryMetadata",1),rQ([(0,eW.u_)()],ProviderIntegration.prototype,"getIssueOrPullRequest",1),rQ([(0,eW.u_)()],ProviderIntegration.prototype,"getPullRequestForBranch",1),rQ([(0,eW.u_)()],ProviderIntegration.prototype,"getPullRequestForCommit",1),rQ([(0,eW.u_)()],ProviderIntegration.prototype,"searchMyIssues",1),rQ([(0,eW.u_)()],ProviderIntegration.prototype,"searchMyPullRequests",1),rQ([(0,tZ.I)()],ProviderIntegration.prototype,"ensureSession",1);let rY=rU[rT.AzureDevOps],rV=Object.freeze({id:rY.id,scopes:rY.scopes});let AzureDevOpsIntegration=class AzureDevOpsIntegration extends ProviderIntegration{authProvider=rV;id=rT.AzureDevOps;key=this.id;name="Azure DevOps";get domain(){return rY.domain}get apiBaseUrl(){return"https://dev.azure.com"}async getReposForAzureProject(e,t,i){if(this.maybeConnected??await this.isConnected())try{return await this.api.getReposForAzureProject(e,t,{cursor:i?.cursor})}catch(e){eq.YJ.error(e,"getReposForAzureProject");return}}async getProviderAccountForCommit(e,t,i,r){return Promise.resolve(void 0)}async getProviderAccountForEmail(e,t,i,r){return Promise.resolve(void 0)}async getProviderDefaultBranch(e,t){return Promise.resolve(void 0)}async getProviderIssueOrPullRequest(e,t,i){return Promise.resolve(void 0)}async getProviderPullRequestForBranch(e,t,i,r){return Promise.resolve(void 0)}async getProviderPullRequestForCommit(e,t,i){return Promise.resolve(void 0)}async getProviderRepositoryMetadata(e,t){return Promise.resolve(void 0)}async searchProviderMyPullRequests(e,t){return Promise.resolve(void 0)}async searchProviderMyIssues(e,t){return Promise.resolve(void 0)}};let rz=rU[rT.Bitbucket],rH=Object.freeze({id:rz.id,scopes:rz.scopes});let BitbucketIntegration=class BitbucketIntegration extends ProviderIntegration{authProvider=rH;id=rT.Bitbucket;key=this.id;name="Bitbucket";get domain(){return rz.domain}get apiBaseUrl(){return"https://api.bitbucket.org/2.0"}async getProviderAccountForCommit(e,t,i,r){return Promise.resolve(void 0)}async getProviderAccountForEmail(e,t,i,r){return Promise.resolve(void 0)}async getProviderDefaultBranch(e,t){return Promise.resolve(void 0)}async getProviderIssueOrPullRequest(e,t,i){return Promise.resolve(void 0)}async getProviderPullRequestForBranch(e,t,i,r){return Promise.resolve(void 0)}async getProviderPullRequestForCommit(e,t,i){return Promise.resolve(void 0)}async getProviderRepositoryMetadata(e,t){return Promise.resolve(void 0)}async searchProviderMyPullRequests(e,t){return Promise.resolve(void 0)}async searchProviderMyIssues(e,t){return Promise.resolve(void 0)}};var rj=Object.defineProperty,rJ=Object.getOwnPropertyDescriptor;let rK=rU[rT.GitHub],rZ=Object.freeze({id:rK.id,scopes:rK.scopes}),rX=rU[rF.GitHubEnterprise],r0=Object.freeze({id:rX.id,scopes:rX.scopes});let GitHubIntegrationBase=class GitHubIntegrationBase extends ProviderIntegration{async getProviderAccountForCommit({accessToken:e},t,i,r){return(await this.container.github)?.getAccountForCommit(this,e,t.owner,t.name,i,{...r,baseUrl:this.apiBaseUrl})}async getProviderAccountForEmail({accessToken:e},t,i,r){return(await this.container.github)?.getAccountForEmail(this,e,t.owner,t.name,i,{...r,baseUrl:this.apiBaseUrl})}async getProviderDefaultBranch({accessToken:e},t){return(await this.container.github)?.getDefaultBranch(this,e,t.owner,t.name,{baseUrl:this.apiBaseUrl})}async getProviderIssueOrPullRequest({accessToken:e},t,i){return(await this.container.github)?.getIssueOrPullRequest(this,e,t.owner,t.name,Number(i),{baseUrl:this.apiBaseUrl})}async getProviderPullRequestForBranch({accessToken:e},t,r,s){let{include:o,...n}=s??{},a=(await i.e(176).then(i.bind(i,7172))).toGitHubPullRequestState;return(await this.container.github)?.getPullRequestForBranch(this,e,t.owner,t.name,r,{...n,include:o?.map(e=>a(e)),baseUrl:this.apiBaseUrl})}async getProviderPullRequestForCommit({accessToken:e},t,i){return(await this.container.github)?.getPullRequestForCommit(this,e,t.owner,t.name,i,{baseUrl:this.apiBaseUrl})}async getProviderRepositoryMetadata({accessToken:e},t){return(await this.container.github)?.getRepositoryMetadata(this,e,t.owner,t.name,{baseUrl:this.apiBaseUrl})}async searchProviderMyPullRequests({accessToken:e},t,i){return(await this.container.github)?.searchMyPullRequests(this,e,{repos:t?.map(e=>`${e.owner}/${e.name}`),baseUrl:this.apiBaseUrl},i)}async searchProviderMyIssues({accessToken:e},t,i){return(await this.container.github)?.searchMyIssues(this,e,{repos:t?.map(e=>`${e.owner}/${e.name}`),baseUrl:this.apiBaseUrl},i)}};let GitHubIntegration=class GitHubIntegration extends GitHubIntegrationBase{authProvider=rZ;id=rT.GitHub;key=this.id;name="GitHub";get domain(){return rK.domain}get apiBaseUrl(){return"https://api.github.com"}};let GitHubEnterpriseIntegration=class GitHubEnterpriseIntegration extends GitHubIntegrationBase{constructor(e,t,i){super(e,t),this.api=t,this._domain=i}authProvider=r0;id=rF.GitHubEnterprise;key=`${this.id}:${this.domain}`;name="GitHub Enterprise";get domain(){return this._domain}get apiBaseUrl(){return`https://${this._domain}/api/v3`}async connect(){return!!await rG(`${this.name} instance`,this.container)&&super.connect()}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rJ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rj(t,i,o)})([(0,eW.Yz)()],GitHubEnterpriseIntegration.prototype,"connect",1);var r1=Object.defineProperty,r2=Object.getOwnPropertyDescriptor;let r4=rU[rT.GitLab],r6=Object.freeze({id:r4.id,scopes:r4.scopes}),r3=rU[rF.GitLabSelfHosted],r8=Object.freeze({id:r3.id,scopes:r3.scopes});let GitLabIntegrationBase=class GitLabIntegrationBase extends ProviderIntegration{async getProviderAccountForCommit({accessToken:e},t,i,r){return(await this.container.gitlab)?.getAccountForCommit(this,e,t.owner,t.name,i,{...r,baseUrl:this.apiBaseUrl})}async getProviderAccountForEmail({accessToken:e},t,i,r){return(await this.container.gitlab)?.getAccountForEmail(this,e,t.owner,t.name,i,{...r,baseUrl:this.apiBaseUrl})}async getProviderDefaultBranch({accessToken:e},t){return(await this.container.gitlab)?.getDefaultBranch(this,e,t.owner,t.name,{baseUrl:this.apiBaseUrl})}async getProviderIssueOrPullRequest({accessToken:e},t,i){return(await this.container.gitlab)?.getIssueOrPullRequest(this,e,t.owner,t.name,Number(i),{baseUrl:this.apiBaseUrl})}async getProviderPullRequestForBranch({accessToken:e},t,r,s){let{include:o,...n}=s??{},a=(await i.e(454).then(i.bind(i,108))).toGitLabMergeRequestState;return(await this.container.gitlab)?.getPullRequestForBranch(this,e,t.owner,t.name,r,{...n,include:o?.map(e=>a(e)),baseUrl:this.apiBaseUrl})}async getProviderPullRequestForCommit({accessToken:e},t,i){return(await this.container.gitlab)?.getPullRequestForCommit(this,e,t.owner,t.name,i,{baseUrl:this.apiBaseUrl})}async getProviderRepositoryMetadata({accessToken:e},t){return(await this.container.gitlab)?.getRepositoryMetadata(this,e,t.owner,t.name,{baseUrl:this.apiBaseUrl})}searchProviderMyPullRequests(e,t){return Promise.resolve(void 0)}searchProviderMyIssues(e,t){return Promise.resolve(void 0)}};let GitLabIntegration=class GitLabIntegration extends GitLabIntegrationBase{authProvider=r6;id=rT.GitLab;key=this.id;name="GitLab";get domain(){return r4.domain}get apiBaseUrl(){return"https://gitlab.com/api"}};let GitLabSelfHostedIntegration=class GitLabSelfHostedIntegration extends GitLabIntegrationBase{constructor(e,t,i){super(e,t),this.api=t,this._domain=i}authProvider=r8;id=rF.GitLabSelfHosted;key=`${this.id}:${this.domain}`;name="GitLab Self-Hosted";get domain(){return this._domain}get apiBaseUrl(){return`https://${this._domain}/api`}async connect(){return!!await rG(`${this.name} instance`,this.container)&&super.connect()}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?r2(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&r1(t,i,o)})([(0,eW.Yz)()],GitLabSelfHostedIntegration.prototype,"connect",1);var r7=i(9712),r5=i.n(r7);let ProvidersApi=class ProvidersApi{constructor(e){this.container=e;let t=r5()();this.providers={[rT.GitHub]:{...rU[rT.GitHub],provider:t.github,getCurrentUserFn:t.github.getCurrentUser.bind(t.github),getPullRequestsForReposFn:t.github.getPullRequestsForRepos.bind(t.github),getIssuesForReposFn:t.github.getIssuesForRepos.bind(t.github)},[rF.GitHubEnterprise]:{...rU[rF.GitHubEnterprise],provider:t.github,getCurrentUserFn:t.github.getCurrentUser.bind(t.github),getPullRequestsForReposFn:t.github.getPullRequestsForRepos.bind(t.github),getIssuesForReposFn:t.github.getIssuesForRepos.bind(t.github)},[rT.GitLab]:{...rU[rT.GitLab],provider:t.gitlab,getCurrentUserFn:t.gitlab.getCurrentUser.bind(t.gitlab),getPullRequestsForReposFn:t.gitlab.getPullRequestsForRepos.bind(t.gitlab),getPullRequestsForRepoFn:t.gitlab.getPullRequestsForRepo.bind(t.gitlab),getIssuesForReposFn:t.gitlab.getIssuesForRepos.bind(t.gitlab),getIssuesForRepoFn:t.gitlab.getIssuesForRepo.bind(t.gitlab)},[rF.GitLabSelfHosted]:{...rU[rF.GitLabSelfHosted],provider:t.gitlab,getCurrentUserFn:t.gitlab.getCurrentUser.bind(t.gitlab),getPullRequestsForReposFn:t.gitlab.getPullRequestsForRepos.bind(t.gitlab),getPullRequestsForRepoFn:t.gitlab.getPullRequestsForRepo.bind(t.gitlab),getIssuesForReposFn:t.gitlab.getIssuesForRepos.bind(t.gitlab),getIssuesForRepoFn:t.gitlab.getIssuesForRepo.bind(t.gitlab)},[rT.Bitbucket]:{...rU[rT.Bitbucket],provider:t.bitbucket,getCurrentUserFn:t.bitbucket.getCurrentUser.bind(t.bitbucket),getPullRequestsForReposFn:t.bitbucket.getPullRequestsForRepos.bind(t.bitbucket),getPullRequestsForRepoFn:t.bitbucket.getPullRequestsForRepo.bind(t.bitbucket)},[rT.AzureDevOps]:{...rU[rT.AzureDevOps],provider:t.azureDevOps,getCurrentUserForInstanceFn:t.azureDevOps.getCurrentUserForInstance.bind(t.azureDevOps),getPullRequestsForReposFn:t.azureDevOps.getPullRequestsForRepos.bind(t.azureDevOps),getPullRequestsForRepoFn:t.azureDevOps.getPullRequestsForRepo.bind(t.azureDevOps),getIssuesForAzureProjectFn:t.azureDevOps.getIssuesForAzureProject.bind(t.azureDevOps),getReposForAzureProjectFn:t.azureDevOps.getReposForAzureProject.bind(t.azureDevOps)},[rT.Jira]:{...rU[rT.Jira],provider:t.jira},[rT.Trello]:{...rU[rT.Trello],provider:t.trello}}}providers;getScopesForProvider(e){return this.providers[e]?.scopes}getProviderDomain(e){return this.providers[e]?.domain}getProviderPullRequestsPagingMode(e){return this.providers[e]?.pullRequestsPagingMode}getProviderIssuesPagingMode(e){return this.providers[e]?.issuesPagingMode}providerSupportsPullRequestFilters(e,t){return this.providers[e]?.supportedPullRequestFilters!=null&&t.every(t=>this.providers[e]?.supportedPullRequestFilters?.includes(t))}providerSupportsIssueFilters(e,t){return this.providers[e]?.supportedIssueFilters!=null&&t.every(t=>this.providers[e]?.supportedIssueFilters?.includes(t))}isRepoIdsInput(e){return null!=e&&Array.isArray(e)&&e.every(e=>"string"==typeof e||"number"==typeof e)}async getProviderToken(e,t){let i=null==e.domain||null==e.scopes?void 0:{domain:e.domain,scopes:e.scopes};try{return(await this.container.integrationAuthentication.getSession(e.id,i,{createIfNeeded:t?.createSessionIfNeeded}))?.accessToken}catch{return}}async getPullRequestsForRepos(e,t,i){let r;let s=this.providers[e];if(null==s)throw Error(`Provider with id ${e} not registered`);let o=await this.getProviderToken(s);if(null==o)throw Error(`Not connected to provider ${e}`);if(null==s.getPullRequestsForReposFn)throw Error(`Provider with id ${e} does not support getting pull requests for repositories`);try{r=JSON.parse(i?.cursor??"{}")}catch{r={}}let n=r.value,a=r.type,l={};"page"===a?l={page:n}:"cursor"===a&&(l={cursor:n});let h={...this.isRepoIdsInput(t)?{repoIds:t}:{repos:t},...i,...l},c=await s.getPullRequestsForReposFn(h,{token:o,isPAT:!0}),u=c.pageInfo?.hasNextPage??!1,d="{}";return c.pageInfo?.endCursor!=null?d=JSON.stringify({value:c.pageInfo?.endCursor,type:"cursor"}):c.pageInfo?.nextPage!=null&&(d=JSON.stringify({value:c.pageInfo?.nextPage,type:"page"})),{values:c.data,paging:{cursor:d,more:u}}}async getPullRequestsForRepo(e,t,i){let r;let s=this.providers[e];if(null==s)throw Error(`Provider with id ${e} not registered`);let o=await this.getProviderToken(s);if(null==o)throw Error(`Not connected to provider ${e}`);if(null==s.getPullRequestsForRepoFn)throw Error(`Provider with id ${e} does not support getting pull requests for a repository`);try{r=JSON.parse(i?.cursor??"{}")}catch{r={}}let n=r.value,a=r.type,l={};"page"===a?l={page:n}:"cursor"===a&&(l={cursor:n});let h=await s.getPullRequestsForRepoFn({repo:t,...i,...l},{token:o,isPAT:!0}),c=h.pageInfo?.hasNextPage??!1,u="{}";return h.pageInfo?.endCursor!=null?u=JSON.stringify({value:h.pageInfo?.endCursor,type:"cursor"}):h.pageInfo?.nextPage!=null&&(u=JSON.stringify({value:h.pageInfo?.nextPage,type:"page"})),{values:h.data,paging:{cursor:u,more:c}}}async getIssuesForRepos(e,t,i){let r;let s=this.providers[e];if(null==s)throw Error(`Provider with id ${e} not registered`);let o=await this.getProviderToken(s);if(null==o)throw Error(`Not connected to provider ${e}`);if(null==s.getIssuesForReposFn)throw Error(`Provider with id ${e} does not support getting issues for repositories`);if(s.id===rT.AzureDevOps)throw Error(`Provider with id ${e} does not support getting issues for repositories; use getIssuesForAzureProject instead`);try{r=JSON.parse(i?.cursor??"{}")}catch{r={}}let n=r.value,a=r.type,l={};"page"===a?l={page:n}:"cursor"===a&&(l={cursor:n});let h={...this.isRepoIdsInput(t)?{repoIds:t}:{repos:t},...i,...l},c=await s.getIssuesForReposFn(h,{token:o,isPAT:!0}),u=c.pageInfo?.hasNextPage??!1,d="{}";return c.pageInfo?.endCursor!=null?d=JSON.stringify({value:c.pageInfo?.endCursor,type:"cursor"}):c.pageInfo?.nextPage!=null&&(d=JSON.stringify({value:c.pageInfo?.nextPage,type:"page"})),{values:c.data,paging:{cursor:d,more:u}}}async getIssuesForRepo(e,t,i){let r;let s=this.providers[e];if(null==s)throw Error(`Provider with id ${e} not registered`);let o=await this.getProviderToken(s);if(null==o)throw Error(`Not connected to provider ${e}`);if(null==s.getIssuesForRepoFn)throw Error(`Provider with id ${e} does not support getting issues for a repository`);if(s.id===rT.AzureDevOps)throw Error(`Provider with id ${e} does not support getting issues for a repository; use getIssuesForAzureProject instead`);try{r=JSON.parse(i?.cursor??"{}")}catch{r={}}let n=r.value,a=r.type,l={};"page"===a?l={page:n}:"cursor"===a&&(l={cursor:n});let h=await s.getIssuesForRepoFn({repo:t,...i,...l},{token:o,isPAT:!0}),c=h.pageInfo?.hasNextPage??!1,u="{}";return h.pageInfo?.endCursor!=null?u=JSON.stringify({value:h.pageInfo?.endCursor,type:"cursor"}):h.pageInfo?.nextPage!=null&&(u=JSON.stringify({value:h.pageInfo?.nextPage,type:"page"})),{values:h.data,paging:{cursor:u,more:c}}}async getIssuesForAzureProject(e,t,i){let r;let s=this.providers[rT.AzureDevOps];if(null==s)throw Error(`Provider with id ${rT.AzureDevOps} not registered`);let o=await this.getProviderToken(s);if(null==o)throw Error(`Not connected to provider ${rT.AzureDevOps}`);if(null==s.getIssuesForAzureProjectFn)throw Error(`Provider with id ${rT.AzureDevOps} does not support getting issues for an Azure project`);try{r=JSON.parse(i?.cursor??"{}")}catch{r={}}let n=r.value,a=r.type,l={};"page"===a?l={page:n}:"cursor"===a&&(l={cursor:n});let h=await s.getIssuesForAzureProjectFn({namespace:e,project:t,...i,...l},{token:o,isPAT:!0}),c=h.pageInfo?.hasNextPage??!1,u="{}";return h.pageInfo?.endCursor!=null?u=JSON.stringify({value:h.pageInfo?.endCursor,type:"cursor"}):h.pageInfo?.nextPage!=null&&(u=JSON.stringify({value:h.pageInfo?.nextPage,type:"page"})),{values:h.data,paging:{cursor:u,more:c}}}async getReposForAzureProject(e,t,i){let r;let s=this.providers[rT.AzureDevOps];if(null==s)throw Error(`Provider with id ${rT.AzureDevOps} not registered`);let o=await this.getProviderToken(s);if(null==o)throw Error(`Not connected to provider ${rT.AzureDevOps}`);if(null==s.getReposForAzureProjectFn)throw Error(`Provider with id ${rT.AzureDevOps} does not support getting repositories for Azure projects`);try{r=JSON.parse(i?.cursor??"{}")}catch{r={}}let n=r.value,a=r.type,l={};"page"===a?l={page:n}:"cursor"===a&&(l={cursor:n});let h=await s.getReposForAzureProjectFn({namespace:e,project:t,...l},{token:o,isPAT:!0}),c=h.pageInfo?.hasNextPage??!1,u="{}";return h.pageInfo?.endCursor!=null?u=JSON.stringify({value:h.pageInfo?.endCursor,type:"cursor"}):h.pageInfo?.nextPage!=null&&(u=JSON.stringify({value:h.pageInfo?.nextPage,type:"page"})),{values:h.data,paging:{cursor:u,more:c}}}async getCurrentUser(e){let t=this.providers[e];if(null==t)throw Error(`Provider with id ${e} not registered`);let i=await this.getProviderToken(t);if(null==i)throw Error(`Not connected to provider ${e}`);if(null==t.getCurrentUserFn)throw Error(`Provider with id ${e} does not support getting current user`);let{data:r}=await t.getCurrentUserFn({token:i,isPAT:!0});return r}async getCurrentUserForInstance(e,t){let i=this.providers[e];if(null==i)throw Error(`Provider with id ${e} not registered`);let r=await this.getProviderToken(i);if(null==r)throw Error(`Not connected to provider ${e}`);if(null==i.getCurrentUserForInstanceFn)throw Error(`Provider with id ${e} does not support getting current user for an instance`);let{data:s}=await i.getCurrentUserForInstanceFn({namespace:t},{token:r,isPAT:!0});return s}};var r9=Object.defineProperty,se=Object.getOwnPropertyDescriptor,st=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?se(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&r9(t,i,o),o};let IntegrationService=class IntegrationService{constructor(e){this.container=e,this._providersApi=new ProvidersApi(e),this._disposable=C.Disposable.from(A.i.onDidChange(e=>{A.i.changed(e,"remotes")&&this._ignoreSSLErrors.clear()}),C.authentication.onDidChangeSessions(this.onAuthenticationSessionsChanged,this))}_onDidChangeConnectionState=new C.EventEmitter;get onDidChangeConnectionState(){return this._onDidChangeConnectionState.event}_connectedCache=new Set;_disposable;_integrations=new Map;_providersApi;dispose(){this._disposable?.dispose()}onAuthenticationSessionsChanged(e){for(let t of this._integrations.values())e.provider.id===t.authProvider.id&&t.refresh()}connected(e){this._connectedCache.has(e)||(this._connectedCache.add(e),this.container.telemetry.sendEvent("remoteProviders/connected",{"remoteProviders.key":e}),setTimeout(()=>this._onDidChangeConnectionState.fire({key:e,reason:"connected"}),250))}disconnected(e){this._connectedCache.delete(e),this.container.telemetry.sendEvent("remoteProviders/disconnected",{"remoteProviders.key":e}),setTimeout(()=>this._onDidChangeConnectionState.fire({key:e,reason:"disconnected"}),250)}isConnected(e){return null==e?0!==this._connectedCache.size:this._connectedCache.has(e)}get(e,t){let i=rO.includes(e)?`${e}:${t}`:e,r=this._integrations.get(i);if(null==r){switch(e){case rT.GitHub:r=new GitHubIntegration(this.container,this._providersApi);break;case rF.GitHubEnterprise:if(null==t)throw Error(`Domain is required for '${e}' integration`);r=new GitHubEnterpriseIntegration(this.container,this._providersApi,t);break;case rT.GitLab:r=new GitLabIntegration(this.container,this._providersApi);break;case rF.GitLabSelfHosted:if(null==t)throw Error(`Domain is required for '${e}' integration`);r=new GitLabSelfHostedIntegration(this.container,this._providersApi,t);break;case rT.Bitbucket:r=new BitbucketIntegration(this.container,this._providersApi);break;case rT.AzureDevOps:r=new AzureDevOpsIntegration(this.container,this._providersApi);break;default:throw Error(`Provider '${e}' is not supported`)}this._integrations.set(i,r)}return r}getByRemote(e){if(e?.provider!=null)switch(e.provider.id){case"azure-devops":return this.get(rT.AzureDevOps);case"bitbucket":return this.get(rT.Bitbucket);case"github":if(e.provider.custom&&null!=e.provider.domain)return this.get(rF.GitHubEnterprise,e.provider.domain);return this.get(rT.GitHub);case"gitlab":if(e.provider.custom&&null!=e.provider.domain)return this.get(rF.GitLabSelfHosted,e.provider.domain);return this.get(rT.GitLab);default:return}}async getMyIssues(e,t){let i=new Map;for(let t of this._integrations.values())(null==e||e.includes(t.id))&&i.set(t,void 0);if(0!==i.size)return this.getMyIssuesCore(i,t)}async getMyIssuesCore(e,t){let i=[];for(let[r,s]of e)null!=r&&i.push(r.searchMyIssues(s,t));let r=await Promise.allSettled(i);return[...(0,eN.YX)((0,eN.Gs)(r,e=>"fulfilled"===e.status?e.value:void 0))]}async getMyIssuesForRemotes(e){if(Array.isArray(e)||(e=[e]),!e.length)return;if(1===e.length){let[t]=e;if(t?.provider==null)return;let i=this.getByRemote(t);return i?.searchMyIssues(t.provider.repoDesc)}let t=new Map;for(let i of e){if(i?.provider==null)continue;let e=i.getIntegration();if(null==e)continue;let r=t.get(e);null==r&&(r=[],t.set(e,r)),r.push(i.provider.repoDesc)}return this.getMyIssuesCore(t)}async getMyPullRequests(e,t){let i=new Map;for(let t of this._integrations.values())(null==e||e.includes(t.id))&&i.set(t,void 0);if(0!==i.size)return this.getMyPullRequestsCore(i,t)}async getMyPullRequestsCore(e,t){let i=[];for(let[r,s]of e)null!=r&&i.push(r.searchMyPullRequests(s,t));let r=await Promise.allSettled(i);return[...(0,eN.YX)((0,eN.Gs)(r,e=>"fulfilled"===e.status?e.value:void 0))]}async getMyPullRequestsForRemotes(e){if(Array.isArray(e)||(e=[e]),!e.length)return;if(1===e.length){let[t]=e;if(t?.provider==null)return;let i=this.getByRemote(t);return i?.searchMyPullRequests(t.provider.repoDesc)}let t=new Map;for(let i of e){if(i?.provider==null)continue;let e=i.getIntegration();if(null==e)continue;let r=t.get(e);null==r&&(r=[],t.set(e,r)),r.push(i.provider.repoDesc)}return this.getMyPullRequestsCore(t)}supports(e){switch(e){case"azure-devops":case"bitbucket":case"github":case"gitlab":return!0;default:return!1}}_ignoreSSLErrors=new Map;ignoreSSLErrors(e){if(tu.e6)return!1;let t=this._ignoreSSLErrors.get(e.id);if(void 0===t){let i=A.i.get("remotes")?.find(t=>t.type.toLowerCase()===e.id&&t.domain===e.domain);t=i?.ignoreSSLErrors??!1,this._ignoreSSLErrors.set(e.id,t)}return t}};st([(0,eW.u_)({args:{0:e=>Array.isArray(e)?e.map(e=>e.name):e.name}})],IntegrationService.prototype,"getMyIssuesForRemotes",1),st([(0,eW.u_)({args:{0:e=>Array.isArray(e)?e.map(e=>e.name):e.name}})],IntegrationService.prototype,"getMyPullRequestsForRemotes",1);var si=Object.defineProperty,sr=Object.getOwnPropertyDescriptor,ss=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?sr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&si(t,i,o),o};let RepositoryIdentityService=class RepositoryIdentityService{constructor(e,t){this.container=e,this.connection=t}dispose(){}getRepository(e,t){return this.locateRepository(e,t)}async getRepositoryOrIdentity(e,t){let i=await this.getRepositoryIdentity(e);return await this.locateRepository(i,t)??i}async locateRepository(e,t){let i;let r="string"==typeof e?await this.getRepositoryIdentity(e):e,s=await this.container.repositoryPathMapping.getLocalRepoPaths({remoteUrl:r.remote?.url,repoInfo:null!=r.provider?{provider:r.provider.id,owner:r.provider.repoDomain,repoName:r.provider.repoName}:void 0});if(s.length){for(let e of s){let t=this.container.git.getRepository(C.Uri.file(e));if(null!=t){i=t;break}}null==i&&t?.openIfNeeded&&(i=await this.container.git.getOrOpenRepository(C.Uri.file(s[0]),{closeOnOpen:!0}))}else{let[,e,s]=r.remote?.url!=null?(0,eF.Ud)(r.remote.url):[];for(let o of this.container.git.repositories)if(null!=e&&null!=s&&(await o.getRemotes({filter:t=>t.matches(e,s)})).length>0||!t?.skipRefValidation&&null!=r.initialCommitSha&&"-"!==r.initialCommitSha&&await this.container.git.validateReference(o.uri,r.initialCommitSha)){i=o;break}}if(null==i&&t?.prompt){let e={title:"Locate Repository"};if(await C.window.showInformationMessage(`Unable to locate a repository for ${r.name}`,{modal:!0},e,{title:"Cancel",isCloseAffordance:!0})!==e)return;let t=(await C.window.showOpenDialog({title:`Choose a location for ${r.name}`,canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1}))?.[0];if(null==t)return;let s=await this.container.git.getOrOpenRepository(t,{closeOnOpen:!0,detectNested:!1});if(null==s)return;(null==r.initialCommitSha||await this.container.git.validateReference(s.uri,r.initialCommitSha))&&(i=s,await this.addFoundRepositoryToMap(i,r))}return i}async getRepositoryIdentity(e){let t;let i=await this.connection.fetchGkDevApi(`/v1/git-repositories/${e}`,{method:"GET"}),r=(await i.json()).data;if("name"in r&&"string"==typeof r.name)t=r.name;else if(r.provider?.repoName!=null)t=r.provider.repoName;else if(r.remote?.url!=null&&r.remote?.domain!=null&&r.remote?.path!=null){let e=(0,tH.k)(this.container)(r.remote.url,r.remote.domain,r.remote.path);t=e?.repoName??r.remote.path}else t=r.remote?.path??`Unknown ${r.initialCommitSha?` (${(0,F.c5)(r.initialCommitSha)})`:""}`;return{id:r.id,createdAt:new Date(r.createdAt),updatedAt:new Date(r.updatedAt),name:t,initialCommitSha:r.initialCommitSha,remote:r.remote,provider:r.provider}}async addFoundRepositoryToMap(e,t){let i=e.uri.fsPath;for(let t of(await e.getRemotes())){let e=t.provider?.url({type:tv.o.Repo});null!=e&&await this.container.repositoryPathMapping.writeLocalRepoPath({remoteUrl:e},i)}t?.provider?.id!=null&&t?.provider?.repoDomain!=null&&t?.provider?.repoName!=null&&await this.container.repositoryPathMapping.writeLocalRepoPath({repoInfo:{provider:t.provider.id,owner:t.provider.repoDomain,repoName:t.provider.repoName}},i)}};ss([(0,eW.Yz)()],RepositoryIdentityService.prototype,"getRepository",1),ss([(0,eW.Yz)()],RepositoryIdentityService.prototype,"getRepositoryOrIdentity",1),ss([(0,eW.Yz)()],RepositoryIdentityService.prototype,"locateRepository",1),ss([(0,eW.Yz)()],RepositoryIdentityService.prototype,"getRepositoryIdentity",1);var so=i(7452),sn=i(700),sa=i(5804);let GraphStatusBarController=class GraphStatusBarController{_disposable;_statusBarItem;constructor(e){this._disposable=C.Disposable.from(A.i.onDidChange(this.onConfigurationChanged,this),e.subscription.onDidChange(this.onSubscriptionChanged,this),(0,tX.qw)(e.onReady)(()=>queueMicrotask(()=>this.updateStatusBar())),(0,iN.kz)(e=>{("gitlens:enabled"===e||"gitlens:plus:enabled"===e)&&this.updateStatusBar()}),{dispose:()=>this._statusBarItem?.dispose()})}dispose(){this._disposable.dispose()}onConfigurationChanged(e){(A.i.changed(e,"graph.statusBar.enabled")||A.i.changed(e,"plusFeatures.enabled"))&&this.updateStatusBar()}onSubscriptionChanged(e){this.updateStatusBar()}updateStatusBar(){A.i.get("graph.statusBar.enabled")&&(0,iN.wp)("gitlens:enabled")&&(0,rk.A)()?(null==this._statusBarItem&&(this._statusBarItem=C.window.createStatusBarItem("gitlens.graph",C.StatusBarAlignment.Left,9997),this._statusBarItem.name="GitLens Commit Graph",this._statusBarItem.command=_.eq.ShowGraph,this._statusBarItem.text="$(gitlens-graph)",this._statusBarItem.tooltip=new C.MarkdownString("Visualize commits on the Commit Graph ✨"),this._statusBarItem.accessibilityInformation={label:"Show the GitLens Commit Graph"}),this._statusBarItem.show()):(this._statusBarItem?.dispose(),this._statusBarItem=void 0)}};var sl=i(1296),sh=i(8984),sc=Object.defineProperty,su=Object.getOwnPropertyDescriptor,sd=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?su(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sc(t,i,o),o};let WorkspacesApi=class WorkspacesApi{constructor(e,t){this.container=e,this.connection=t}async getWorkspace(e,t){let i;if(t?.includeRepositories){let e=`(first: ${t?.repoCount??sh.u}`;t?.repoPage&&(e+=`, page: ${t.repoPage}`),e+=")",i=`
				provider_data {
					repositories ${e} {
						total_count
						page_info {
							end_cursor
							has_next_page
						}
						nodes {
							id
							name
							repository_id
							provider
							provider_project_name
							provider_organization_id
							provider_organization_name
							url
						}
					}
				}
			`}let r=`
			id
			description
			name
			organization {
				id
			}
			provider
			azure_organization_id
			azure_project
			repo_relation
			${i??""}
		`,s=`
			query getWorkspace {
				project(id: "${e}") { ${r} }
			}
		`,o=await this.fetch({query:s});if(!o.ok)throw eq.YJ.error(void 0,`Getting workspace failed: (${o.status}) ${o.statusText}`),Error(o.statusText);return await o.json()}async getWorkspaces(e){let t,i;if(e?.includeRepositories){let i=`(first: ${e?.repoCount??sh.u}`;e?.repoPage&&(i+=`, page: ${e.repoPage}`),i+=")",t=`
				provider_data {
					repositories ${i} {
						total_count
						page_info {
							end_cursor
							has_next_page
						}
						nodes {
							id
							name
							repository_id
							provider
							provider_project_name
							provider_organization_id
							provider_organization_name
							url
						}
					}
				}
			`}let r=`
			total_count
			page_info {
				end_cursor
				has_next_page
			}
			nodes {
				id
				description
				name
				organization {
					id
				}
				provider
				azure_organization_id
				azure_project
				repo_relation
				${t??""}
			}
		`,s=`(first: ${e?.count??sh.es}`;e?.cursor?s+=`, after: "${e.cursor}"`:e?.page&&(s+=`, page: ${e.page}`),s+=")";let o=`
			query getWorkpaces {
				memberProjects: projects ${s} { ${r} }
			}
		`,n=await this.fetch({query:o});if(!n.ok)throw eq.YJ.error(void 0,`Getting workspaces failed: (${n.status}) ${n.statusText}`),Error(n.statusText);let a=new Set,l=await n.json();if(l?.data!=null){for(let e of Object.values(l.data))if(null!=e){if(null==i)for(let t of(i={data:{projects:e}},e.nodes))a.add(t.id);else for(let t of e.nodes)a.has(t.id)||(a.add(t.id),i.data.projects.nodes.push(t))}return null!=i&&(i.data.projects.total_count=a.size),i}}async getWorkspaceRepositories(e,t){let i=`(first: ${t?.count??sh.u}`;t?.cursor?i+=`, after: "${t.cursor}"`:t?.page&&(i+=`, page: ${t.page}`),i+=")";let r=await this.fetch({query:`
					query getWorkspaceRepos {
						project (id: "${e}") {
							provider_data {
								repositories ${i} {
									total_count
									page_info {
										end_cursor
										has_next_page
									}
									nodes {
										id
										name
										repository_id
										provider
										provider_project_name
										provider_organization_id
										provider_organization_name
										url
									}
								}
							}
						}
					}
				`});if(!r.ok)throw eq.YJ.error(void 0,`Getting workspace repos failed: (${r.status}) ${r.statusText}`),Error(r.statusText);return await r.json()}async createWorkspace(e){if(!e.name||!e.description||!e.provider||e.provider===sh.j2.Azure&&(!e.azureOrganizationName||!e.azureProjectName)||(e.provider===sh.j2.GitHubEnterprise||e.provider===sh.j2.GitLabSelfHosted)&&!e.hostUrl)return;let t=await this.fetch({query:`
					mutation createWorkspace {
						create_project(
							input: {
						  		type: GK_PROJECT
						  		name: "${e.name}"
						  		description: "${e.description}"
						  		provider: ${e.provider}
								${e.hostUrl?`host_url: "${e.hostUrl}"`:""}
								${e.azureOrganizationName?`azure_organization_id: "${e.azureOrganizationName}"`:""}
								${e.azureProjectName?`azure_project: "${e.azureProjectName}"`:""}
						  		profile_id: "shared-services"
							}
						) {
							id,
							name,
							description,
							organization {
								id
							}
							provider
							azure_organization_id
							azure_project
							repo_relation
						}
					}
				`});if(!t.ok)throw eq.YJ.error(void 0,`Creating workspace failed: (${t.status}) ${t.statusText}`),Error(t.statusText);return await t.json()}async deleteWorkspace(e){let t=await this.fetch({query:`
					mutation deleteWorkspace {
						delete_project(
							id: "${e}"
						) {
							id
						}
					}
				`});if(!t.ok)throw eq.YJ.error(void 0,`Deleting workspace failed: (${t.status}) ${t.statusText}`),Error(t.statusText);let i=await t.json();if(i?.errors?.some(e=>e.message.includes("permission"))){let e="Adding repositories to workspace failed: you do not have permission to delete this workspace";throw eq.YJ.error(void 0,e),Error(e)}return i}async addReposToWorkspace(e,t){if(0===t.length)return;let i="[";i+=t.map(e=>`{ provider_organization_id: "${e.owner}", name: "${e.repoName}" }`).join(",")+"]";let r=1,s=t.map(e=>`Repository${r++}: repository(provider_organization_id: "${e.owner}", name: "${e.repoName}") {
			id
			name
			repository_id
			provider
			provider_project_name
			provider_organization_id
			provider_organization_name
			url
		}`).join(","),o=await this.fetch({query:`
					mutation addReposToWorkspace {
						add_repositories_to_project(
							input: {
								project_id: "${e}",
								repositories: ${i}
							}
						) {
							id
							provider_data {
								${s}
							}
						}
					}
				`});if(!o.ok)throw eq.YJ.error(void 0,`Adding repositories to workspace failed: (${o.status}) ${o.statusText}`),Error(o.statusText);let n=await o.json();if(n?.errors?.some(e=>e.message.includes("permission"))){let e="Adding repositories to workspace failed: you do not have permission to add repositories to this workspace";throw eq.YJ.error(void 0,e),Error(e)}return n}async removeReposFromWorkspace(e,t){if(0===t.length)return;let i="[";i+=t.map(e=>`{ provider_organization_id: "${e.owner}", name: "${e.repoName}" }`).join(",")+"]";let r=await this.fetch({query:`
					mutation removeReposFromWorkspace {
						remove_repositories_from_project(
							input: {
								project_id: "${e}",
								repositories: ${i}
							}
						) {
							id
						}
					}
				`});if(!r.ok)throw eq.YJ.error(void 0,`Removing repositories from workspace failed: (${r.status}) ${r.statusText}`),Error(r.statusText);let s=await r.json();if(s?.errors?.some(e=>e.message.includes("permission"))){let e="Adding repositories to workspace failed: you do not have permission to remove repositories from this workspace";throw eq.YJ.error(void 0,e),Error(e)}return s}async fetch(e,t){return this.connection.fetchApiGraphQL("api/projects/graphql",e,t)}};sd([(0,eW.Yz)()],WorkspacesApi.prototype,"getWorkspace",1),sd([(0,eW.Yz)()],WorkspacesApi.prototype,"getWorkspaces",1),sd([(0,eW.Yz)()],WorkspacesApi.prototype,"getWorkspaceRepositories",1),sd([(0,eW.Yz)()],WorkspacesApi.prototype,"createWorkspace",1),sd([(0,eW.Yz)()],WorkspacesApi.prototype,"deleteWorkspace",1),sd([(0,eW.Yz)()],WorkspacesApi.prototype,"addReposToWorkspace",1),sd([(0,eW.Yz)()],WorkspacesApi.prototype,"removeReposFromWorkspace",1);var sp=Object.defineProperty,sg=Object.getOwnPropertyDescriptor,sm=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?sg(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sp(t,i,o),o};let WorkspacesService=class WorkspacesService{constructor(e,t){this.container=e,this.connection=t,this._workspacesApi=new WorkspacesApi(this.container,this.connection),this._workspacesPathProvider=new WorkspacesLocalPathMappingProvider,this._currentWorkspaceId=sw(),this._currentWorkspaceAutoAddSetting=C.workspace.getConfiguration("gitkraken")?.get("workspaceAutoAddSetting")??"disabled",this._disposable=C.Disposable.from(e.subscription.onDidChange(this.onSubscriptionChanged,this))}_onDidResetWorkspaces=new C.EventEmitter;get onDidResetWorkspaces(){return this._onDidResetWorkspaces.event}_cloudWorkspaces;_disposable;_localWorkspaces;_workspacesApi;_workspacesPathProvider;_currentWorkspaceId;_currentWorkspaceAutoAddSetting="disabled";_currentWorkspace;dispose(){this._disposable.dispose()}get currentWorkspaceId(){return this._currentWorkspaceId}get currentWorkspace(){return this._currentWorkspace}onSubscriptionChanged(e){(null==e.current.account||e.current.account.id!==e.previous?.account?.id||e.current.state!==e.previous?.state)&&this.resetWorkspaces({cloud:!0})}async loadCloudWorkspaces(e=!1){let t;let i=await this.container.subscription.getSubscription();if(i?.account==null)return{cloudWorkspaces:void 0,cloudWorkspaceInfo:"Please sign in to use cloud workspaces."};let r=[];try{let i=await this._workspacesApi.getWorkspaces({includeRepositories:!e,includeOrganizations:!0});t=i?.data?.projects?.nodes}catch{return{cloudWorkspaces:void 0,cloudWorkspaceInfo:"Failed to load cloud workspaces."}}let s=0,o=i.state===iK.cx.FreeInPreviewTrial||i.state===iK.cx.FreePlusInTrial||i.state===iK.cx.Paid;if(t?.length)for(let i of t){let t=await this._workspacesPathProvider.getCloudWorkspaceCodeWorkspacePath(i.id);if(!o&&i.organization?.id){s+=1;continue}let n=i.provider_data?.repositories?.nodes,a=null!=n?n.map(e=>({...e,workspaceId:i.id})):n;null!=a||e||(a=[]),r.push(new sh.ey(this.container,i.id,i.name,i.organization?.id,i.provider,i.repo_relation,null!=this._currentWorkspaceId&&this._currentWorkspaceId===i.id,i.provider===sh.w1.Azure?{organizationId:i.azure_organization_id??void 0,project:i.azure_project??void 0}:void 0,a,t))}return{cloudWorkspaces:r,cloudWorkspaceInfo:s>0?`${s} shared workspaces hidden - upgrade to GitLens Pro to access.`:void 0}}async loadLocalWorkspaces(){let e=[];for(let t of Object.values((await this._workspacesPathProvider.getLocalWorkspaceData())?.workspaces||{}))e.push(new sh.ig(this.container,t.localId,t.name,t.repositories.map(e=>({localPath:e.localPath,name:e.localPath.split(/[\\/]/).pop()??"unknown",workspaceId:t.localId})),null!=this._currentWorkspaceId&&this._currentWorkspaceId===t.localId));return{localWorkspaces:e,localWorkspaceInfo:void 0}}getCloudWorkspace(e){return this._cloudWorkspaces?.find(t=>t.id===e)}getLocalWorkspace(e){return this._localWorkspaces?.find(t=>t.id===e)}async getWorkspaces(e){let t={cloudWorkspaces:[],localWorkspaces:[],cloudWorkspaceInfo:void 0,localWorkspaceInfo:void 0};if(null==this._cloudWorkspaces||e?.force){let i=await this.loadCloudWorkspaces(e?.excludeRepositories);this._cloudWorkspaces=i.cloudWorkspaces,t.cloudWorkspaceInfo=i.cloudWorkspaceInfo}if(null==this._localWorkspaces||e?.force){let e=await this.loadLocalWorkspaces();this._localWorkspaces=e.localWorkspaces,t.localWorkspaceInfo=e.localWorkspaceInfo}let i=[...this._cloudWorkspaces??[],...this._localWorkspaces??[]].find(e=>e.current);return null!=i&&(this._currentWorkspaceId=i.id,this._currentWorkspace=i),t.cloudWorkspaces=this._cloudWorkspaces??[],t.localWorkspaces=this._localWorkspaces??[],t}async getCloudWorkspaceRepositories(e){let t=await this._workspacesApi.getWorkspaceRepositories(e),i=t?.data?.project?.provider_data?.repositories?.nodes;return i?.map(t=>({...t,workspaceId:e}))??[]}async addMissingCurrentWorkspaceRepos(e){if(null==this._currentWorkspaceId)return;let t=[...this._cloudWorkspaces??[],...this._localWorkspaces??[]].find(e=>e.current);if(null==t)try{let e=await this._workspacesApi.getWorkspace(this._currentWorkspaceId,{includeRepositories:!0});if(e?.data?.project==null)return;let i=e.data.project.provider_data?.repositories?.nodes,r=null!=i?i.map(t=>({...t,workspaceId:e.data.project.id})):[];t=new sh.ey(this.container,e.data.project.id,e.data.project.name,e.data.project.organization?.id,e.data.project.provider,e.data.project.repo_relation,!0,e.data.project.provider===sh.w1.Azure?{organizationId:e.data.project.azure_organization_id??void 0,project:e.data.project.azure_project??void 0}:void 0,r,C.workspace.workspaceFile?.fsPath)}catch{return}if(!e?.force&&"disabled"===this._currentWorkspaceAutoAddSetting||!t?.current||(this._currentWorkspace=t,!(await t.getRepositoryDescriptors())?.length))return;let i=[...(await this.resolveWorkspaceRepositoriesByName(t,{resolveFromPath:!0,usePathMapping:!0})).values()].map(e=>e.repository),r=new Map;for(let e of this.container.git.openRepositories)r.set(e.id,e);let s=i.filter(e=>!r.has(e.id));if(0===s.length){e?.force&&C.window.showInformationMessage("No new repositories found to add.",{modal:!0});return}let o=[];if(!e?.force&&"prompt"===this._currentWorkspaceAutoAddSetting){let e={title:"Change Auto-Add Behavior..."},t={title:"Cancel",isCloseAffordance:!0},i=await C.window.showInformationMessage("New repositories found in the linked GitKraken workspace. Would you like to add them to the current VS Code workspace?",{title:"Add..."},e,t);if(null==i||i===t)return;if(i===e){this.chooseCodeWorkspaceAutoAddSetting({current:!0});return}}if(e?.force||"prompt"===this._currentWorkspaceAutoAddSetting){let e=await (0,sl.qW)("Add Repositories to Workspace","Choose which repositories to add to the current workspace",s);if(0===e.length)return;o=e.map(e=>e.repoPath)}else o=s.map(e=>e.path);if(0===o.length)return;let n=C.workspace.workspaceFolders?.length??0;C.window.withProgress({location:C.ProgressLocation.Notification,title:"Adding new repositories from linked cloud workspace...",cancellable:!1},()=>new Promise(e=>{C.workspace.updateWorkspaceFolders(n,0,...o.map(e=>({uri:C.Uri.file(e)}))),e(!0)}))}resetWorkspaces(e){(e?.cloud??!0)&&(this._cloudWorkspaces=void 0),(e?.local??!0)&&(this._localWorkspaces=void 0),this._onDidResetWorkspaces.fire()}async getCloudWorkspaceRepoPath(e,t){return this._workspacesPathProvider.getCloudWorkspaceRepoPath(e,t)}async updateCloudWorkspaceRepoLocalPath(e,t,i){await this._workspacesPathProvider.writeCloudWorkspaceRepoDiskPathToMap(e,t,i)}async getRepositoriesInParentFolder(e){let t=(await C.window.showOpenDialog({title:"Choose a folder containing repositories for this workspace",canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1}))?.[0];if(!(null==t||e?.isCancellationRequested))try{return this.container.git.findRepositories(t,{cancellation:e,depth:1,silent:!0})}catch(e){return}}async locateAllCloudWorkspaceRepos(e,t){let i=this.getCloudWorkspace(e);if(null==i)return;let r=await i.getRepositoryDescriptors();if(null==r||0===r.length)return;let s=await this.getRepositoriesInParentFolder(t);if(!(null==s||0===s.length||t?.isCancellationRequested)){for(let i of(await this.resolveWorkspaceRepositoriesByName(e,{cancellation:t,repositories:s})).values())if(await this.locateWorkspaceRepo(e,i.descriptor,i.repository),t?.isCancellationRequested)return}}async locateWorkspaceRepo(e,t,i){let r,s;if(null==i||i instanceof C.Uri){let e=i;if(null==e&&(e=(await C.window.showOpenDialog({title:`Choose a location for ${t.name}`,canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1}))?.[0]),null==e||null==(r=await this.container.git.getOrOpenRepository(e,{closeOnOpen:!0,detectNested:!1})))return}else r=i;let o=r.uri.fsPath,n=await r.getRemotes(),a=[];for(let e of n){let t=e.provider?.url({type:tv.o.Repo});null!=t&&a.push(t)}for(let e of a)await this.container.repositoryPathMapping.writeLocalRepoPath({remoteUrl:e},o);let l=this.getCloudWorkspace(e)??this.getLocalWorkspace(e);null==s&&l?.type==="cloud"&&(s=l.provider),null!=t.id&&null!=t.url&&null!=s&&(await this.container.repositoryPathMapping.writeLocalRepoPath({remoteUrl:t.url,repoInfo:{provider:s,owner:t.provider_organization_id,repoName:t.name}},o),await this.updateCloudWorkspaceRepoLocalPath(e,t.id,o))}async createCloudWorkspace(e){let t,i,r,s,o,n,a;let l=C.window.createInputBox();l.title="Create Cloud Workspace";let h=C.window.createQuickPick();h.title="Create Cloud Workspace";let c={GitHub:sh.j2.GitHub,"GitHub Enterprise":sh.j2.GitHubEnterprise};l.ignoreFocusOut=!0;let u=[];if(e?.repos!=null&&e.repos.length>0){for(let t of e.repos)if(0===(await t.getRemotes({filter:e=>"github.com"===e.domain})).length){await C.window.showErrorMessage("Only GitHub is supported for this operation. Please ensure all open repositories are hosted on GitHub.",{modal:!0});return}n=sh.j2.GitHub}try{if(!(t=await new Promise(e=>{u.push(l.onDidHide(()=>e(void 0)),l.onDidAccept(()=>{let t=l.value.trim();if(!t){l.validationMessage="Please enter a non-empty name for the workspace";return}e(t)})),l.placeholder="Please enter a name for the new workspace",l.prompt="Enter your workspace name",l.show()}))||!(i=await new Promise(e=>{u.push(l.onDidHide(()=>e(void 0)),l.onDidAccept(()=>{let t=l.value.trim();if(!t){l.validationMessage="Please enter a non-empty description for the workspace";return}e(t)})),l.value="",l.title="Create Workspace",l.placeholder="Please enter a description for the new workspace",l.prompt="Enter your workspace description",l.show()}))||(null==n&&(n=await new Promise(e=>{u.push(h.onDidHide(()=>e(void 0)),h.onDidAccept(()=>{0!==h.activeItems.length&&e(c[h.activeItems[0].label])})),h.placeholder="Please select a provider for the new workspace",h.items=Object.keys(c).map(e=>({label:e})),h.canSelectMany=!1,h.show()})),!n||(n==sh.j2.GitHubEnterprise||n==sh.j2.GitLabSelfHosted)&&!(r=await new Promise(e=>{u.push(l.onDidHide(()=>e(void 0)),l.onDidAccept(()=>{let t=l.value.trim();if(!t){l.validationMessage="Please enter a non-empty host URL for the workspace";return}e(t)})),l.value="",l.placeholder="Please enter a host URL for the new workspace",l.prompt="Enter your workspace host URL",l.show()}))||n==sh.j2.Azure&&(!(s=await new Promise(e=>{u.push(l.onDidHide(()=>e(void 0)),l.onDidAccept(()=>{let t=l.value.trim();if(!t){l.validationMessage="Please enter a non-empty organization name for the workspace";return}e(t)})),l.value="",l.placeholder="Please enter an organization name for the new workspace",l.prompt="Enter your workspace organization name",l.show()}))||!(o=await new Promise(e=>{u.push(l.onDidHide(()=>e(void 0)),l.onDidAccept(()=>{let t=l.value.trim();if(!t){l.validationMessage="Please enter a non-empty project name for the workspace";return}e(t)})),l.value="",l.placeholder="Please enter a project name for the new workspace",l.prompt="Enter your workspace project name",l.show()})))))return}finally{l.dispose(),h.dispose(),u.forEach(e=>void e.dispose())}let d={name:t,description:i,provider:n,hostUrl:r,azureOrganizationName:s,azureProjectName:o};try{let e=await this._workspacesApi.createWorkspace(d);a=e?.data?.create_project}catch{return}if(null!=a){null==this._cloudWorkspaces&&(this._cloudWorkspaces=[]);let t=await this._workspacesPathProvider.getCloudWorkspaceCodeWorkspacePath(a.id);this._cloudWorkspaces?.push(new sh.ey(this.container,a.id,a.name,a.organization?.id,a.provider,a.repo_relation,null!=this._currentWorkspaceId&&this._currentWorkspaceId===a.id,a.provider===sh.w1.Azure?{organizationId:a.azure_organization_id??void 0,project:a.azure_project??void 0}:void 0,[],t));let i=this.getCloudWorkspace(a.id);null!=i&&await this.addCloudWorkspaceRepos(i.id,{repos:e?.repos,suppressNotifications:!0})}}async deleteCloudWorkspace(e){let t=await C.window.showWarningMessage("Are you sure you want to delete this workspace? This cannot be undone.",{modal:!0},{title:"Confirm"},{title:"Cancel",isCloseAffordance:!0});if(null!=t&&"Cancel"!=t.title)try{let t=await this._workspacesApi.deleteWorkspace(e);t?.data?.delete_project?.id===e&&(this._cloudWorkspaces=this._cloudWorkspaces?.filter(t=>t.id!==e))}catch(e){C.window.showErrorMessage(e.message)}}async filterReposForProvider(e,t){let i=[];for(let r of e)(await r.getRemotes({filter:e=>e.provider?.id===sh.gB[t]})).length&&i.push(r);return i}async filterReposForCloudWorkspace(e,t){let i=this.getCloudWorkspace(t)??this.getLocalWorkspace(t);if(null==i)return e;let r=[...(await i.getRepositoriesByName()).values()].map(e=>e.repository);return e.filter(e=>!r.find(t=>t.id===e.id))}async addCloudWorkspaceRepos(e,t){let i=this.getCloudWorkspace(e);if(null==i)return;let r=[],s=t?.repos;if(!t?.repos){let r=await this.filterReposForProvider(this.container.git.openRepositories,i.provider);r=await this.filterReposForCloudWorkspace(r,e);let o=[{label:"Choose repositories from a folder",description:void 0,choice:sh.WI.ParentFolder}];r.length>0&&o.unshift({label:"Choose repositories from the current window",description:void 0,choice:sh.WI.CurrentWindow}),o[0].picked=!0;let n=await C.window.showQuickPick(o,{placeHolder:"Choose repositories from the current window or a folder",ignoreFocusOut:!0});if(null==n)return;n.choice===sh.WI.ParentFolder&&await C.window.withProgress({location:C.ProgressLocation.Notification,title:"Finding repositories to add to the workspace...",cancellable:!0},async(s,o)=>{let n=await this.getRepositoriesInParentFolder(o);if(null!=n){if(0===n.length){t?.suppressNotifications||C.window.showInformationMessage("No repositories found in the chosen folder.",{modal:!0});return}if(!o.isCancellationRequested){if(0===(r=await this.filterReposForProvider(n,i.provider)).length){t?.suppressNotifications||C.window.showInformationMessage(`No matching repositories found for provider ${i.provider}.`,{modal:!0});return}o.isCancellationRequested||0!==(r=await this.filterReposForCloudWorkspace(r,e)).length||t?.suppressNotifications||C.window.showInformationMessage("All possible repositories are already in this workspace.",{modal:!0})}}});let a=await (0,sl.qW)("Add Repositories to Workspace","Choose which repositories to add to the workspace",r);if(0===a.length)return;s=a.map(e=>e.repoPath)}if(null==s)return;for(let e of s){let t=e instanceof ty.Oq?e:await this.container.git.getOrOpenRepository(C.Uri.file(e),{closeOnOpen:!0});if(null==t)continue;let i=sf(await t.getRemote("origin")||(await t.getRemotes())?.[0]);null!=i&&r.push({owner:i.owner,repoName:i.repoName,repo:t,url:i.url})}if(0===r.length)return;let o=[],n=new Set((await i.getRepositoryDescriptors()).map(e=>e.id));await C.window.withProgress({location:C.ProgressLocation.Notification,title:`Adding repositories to workspace ${i.name}...`,cancellable:!1},async()=>{try{let t=await this._workspacesApi.addReposToWorkspace(e,r.map(e=>({owner:e.owner,repoName:e.repoName})));if(t?.data.add_repositories_to_project==null)return;o=Object.values(t.data.add_repositories_to_project.provider_data).filter(e=>null!=e).map(t=>({...t,workspaceId:e}))}catch(e){C.window.showErrorMessage(e.message);return}for(let{repo:t,repoName:s,url:a}of(o.length>0&&i.addRepositories(o),o.length<r.length&&(o=(await i.getRepositoryDescriptors({force:!0})).filter(e=>!n.has(e.id))),r)){let i=o.find(e=>e.name.toLowerCase()===s||e.url===a);null!=i&&await this.locateWorkspaceRepo(e,i,t)}})}async removeCloudWorkspaceRepo(e,t){let i=this.getCloudWorkspace(e);if(null==i)return;let r=await C.window.showWarningMessage(`Are you sure you want to remove ${t.name} from this workspace? This cannot be undone.`,{modal:!0},{title:"Confirm"},{title:"Cancel",isCloseAffordance:!0});if(null!=r&&"Cancel"!=r.title)try{let r=await this._workspacesApi.removeReposFromWorkspace(e,[{owner:t.provider_organization_id,repoName:t.name}]);if(r?.data.remove_repositories_from_project==null)return;i.removeRepositories([t.name])}catch(e){C.window.showErrorMessage(e.message)}}async resolveWorkspaceRepositoriesByName(e,t){let i=new Map,r=e instanceof sh.ey||e instanceof sh.ig?e:this.getLocalWorkspace(e)??this.getCloudWorkspace(e);if(null==r)return i;let s=await r.getRepositoryDescriptors();if(null==s||0===s.length)return i;let o=t?.repositories??this.container.git.repositories,n=new Map,a=new Map;for(let e of o){if(t?.cancellation?.isCancellationRequested)break;if(a.set((0,q.ay)(e.uri.fsPath.toLowerCase()),e),r instanceof sh.ey)for(let t of(await e.getRemotes())){let i=sf(t);null!=i&&n.set(`${i.provider}/${i.owner}/${i.repoName}`,e)}}for(let e of s){let r=null,s=null;null==e.id?r=e.localPath:t?.usePathMapping===!0&&(r=await this.getMappedPathForCloudWorkspaceRepoDescriptor(e)),null!=r&&(s=a.get((0,q.ay)(r.toLowerCase()))),null==s&&null!=e.id&&null!=e.provider&&(s=n.get(`${e.provider.toLowerCase()}/${e.provider_organization_id.toLowerCase()}/${e.name.toLowerCase()}`)),null!=r&&null==s&&t?.resolveFromPath===!0&&(s=await this.container.git.getOrOpenRepository(C.Uri.file(r),{closeOnOpen:!0,force:!0})),null!=s&&i.set(e.name,{descriptor:e,repository:s})}return i}async saveAsCodeWorkspaceFile(e){let t=this.getCloudWorkspace(e)??this.getLocalWorkspace(e);if(null==t)return;let i=await t.getRepositoryDescriptors();if(null==i)return;let r=await t.getRepositoriesByName();if(0===r.size){C.window.showErrorMessage("No repositories in this workspace could be found locally. Please locate at least one repository.",{modal:!0});return}let s=[];for(let e of r.values()){let t=e.repository;t.virtual||s.push(t.uri.fsPath)}if(s.length<i.length){let e=await C.window.showWarningMessage("Some repositories in this workspace could not be located locally. Do you want to continue?",{modal:!0},{title:"Continue"},{title:"Cancel",isCloseAffordance:!0});if(null==e||"Cancel"==e.title)return}let o=await C.window.showSaveDialog({defaultUri:C.Uri.file(`${t.name}.code-workspace`),filters:{"Code Workspace":["code-workspace"]},title:"Choose a location for the new code workspace file"});if(null==o)return;let n=await this.chooseCodeWorkspaceAutoAddSetting();if(!await this._workspacesPathProvider.writeCodeWorkspaceFile(o,s,{workspaceId:e,workspaceAutoAddSetting:n})){C.window.showErrorMessage("Could not create the new workspace file. Check logs for details");return}t.setLocalPath(o.fsPath);let a={title:"Cancel",isCloseAffordance:!0},l=await C.window.showInformationMessage(`Workspace file created for ${t.name}. Would you like to open it now?`,{modal:!0},{title:"Open in New Window",location:"newWindow"},{title:"Open in Current Window",location:"currentWindow"},a);null!=l&&l!==a&&this.openCodeWorkspaceFile(e,{location:l.location})}async chooseCodeWorkspaceAutoAddSetting(e){if(e?.current&&(null==C.workspace.workspaceFile||null==this._currentWorkspaceId||null==this._currentWorkspaceAutoAddSetting))return"disabled";let t=e?.current?this._currentWorkspaceAutoAddSetting:"disabled",i=[{label:"Add on Workspace (Window) Open",description:"enabled"===this._currentWorkspaceAutoAddSetting?"current":void 0,option:"enabled"},{label:"Prompt on Workspace (Window) Open",description:"prompt"===this._currentWorkspaceAutoAddSetting?"current":void 0,option:"prompt"},{label:"Never",description:"disabled"===this._currentWorkspaceAutoAddSetting?"current":void 0,option:"disabled"}],r=await C.window.showQuickPick(i,{placeHolder:"Choose the behavior of automatically adding missing repositories to the current VS Code workspace",title:"Linked Workspace: Automatically Add Repositories"});if(r?.option==null)return t;let s=r.option;if(e?.current&&null!=C.workspace.workspaceFile){if(!await this._workspacesPathProvider.updateCodeWorkspaceFileSettings(C.workspace.workspaceFile,{workspaceAutoAddSetting:s}))return this._currentWorkspaceAutoAddSetting;this._currentWorkspaceAutoAddSetting=s}return s}async openCodeWorkspaceFile(e,t){let i=this.getCloudWorkspace(e)??this.getLocalWorkspace(e);if(null==i)return;if(null==i.localPath){let t=await C.window.showInformationMessage(`The workspace file for ${i.name} has not been created. Would you like to create it now?`,{modal:!0},{title:"Create"},{title:"Cancel",isCloseAffordance:!0});if(null==t||"Cancel"==t.title)return;return void this.saveAsCodeWorkspaceFile(e)}let r=t?.location==="currentWindow"?"currentWindow":"newWindow";if(!t?.location){let e=await C.window.showInformationMessage(`How would you like to open the workspace file for ${i.name}?`,{modal:!0},{title:"Open in New Window",location:"newWindow"},{title:"Open in Current Window",location:"currentWindow"},{title:"Cancel",isCloseAffordance:!0});if(null==e||"Cancel"==e.title)return;r=e.location??"newWindow"}if(!await this._workspacesPathProvider.confirmCloudWorkspaceCodeWorkspaceFilePath(i.id)){await this._workspacesPathProvider.removeCloudWorkspaceCodeWorkspaceFilePath(i.id),i.setLocalPath(void 0);let e=await C.window.showInformationMessage(`The workspace file for ${i.name} could not be found. Would you like to locate it now?`,{modal:!0},{title:"Locate"},{title:"Cancel",isCloseAffordance:!0});if(e?.title!=="Locate")return;let t=(await C.window.showOpenDialog({defaultUri:C.Uri.file(i.localPath),canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{"Code Workspace":["code-workspace"]},title:"Locate the workspace file"}))?.[0]?.fsPath;if(null==t)return;await this._workspacesPathProvider.writeCloudWorkspaceCodeWorkspaceFilePathToMap(i.id,t),i.setLocalPath(t)}(0,eQ.EX)(C.Uri.file(i.localPath),{location:r})}async getMappedPathForCloudWorkspaceRepoDescriptor(e){let t=await this.getCloudWorkspaceRepoPath(e.workspaceId,e.id);return null==t&&(t=(await this.container.repositoryPathMapping.getLocalRepoPaths({remoteUrl:e.url??void 0,repoInfo:{repoName:e.name,provider:e.provider??void 0,owner:e.provider_organization_id}}))?.[0]),t}};function sf(e){if(e.provider?.owner==null)return;let t=e.provider.path.split("/").pop();if(null!=t)return{provider:e.provider.id.toLowerCase(),owner:e.provider.owner.toLowerCase(),repoName:t.toLowerCase(),url:e.provider.url({type:tv.o.Repo})}}function sw(){return C.workspace.getConfiguration("gitkraken")?.get("workspaceId")}sm([(0,eW.Yz)()],WorkspacesService.prototype,"getWorkspaces",1),sm([(0,eW.Yz)()],WorkspacesService.prototype,"addMissingCurrentWorkspaceRepos",1),sm([(0,eW.Yz)()],WorkspacesService.prototype,"resetWorkspaces",1),sm([(0,eW.Yz)({args:{1:!1,2:!1}})],WorkspacesService.prototype,"locateWorkspaceRepo",1),sm([(0,eW.Yz)({args:!1})],WorkspacesService.prototype,"createCloudWorkspace",1),sm([(0,eW.Yz)()],WorkspacesService.prototype,"deleteCloudWorkspace",1),sm([(0,eW.Yz)({args:{1:!1}})],WorkspacesService.prototype,"addCloudWorkspaceRepos",1),sm([(0,eW.Yz)({args:{1:!1}})],WorkspacesService.prototype,"removeCloudWorkspaceRepo",1),sm([(0,eW.Yz)({args:{1:!1}})],WorkspacesService.prototype,"resolveWorkspaceRepositoriesByName",1),sm([(0,eW.Yz)()],WorkspacesService.prototype,"saveAsCodeWorkspaceFile",1),sm([(0,eW.Yz)()],WorkspacesService.prototype,"chooseCodeWorkspaceAutoAddSetting",1),sm([(0,eW.Yz)()],WorkspacesService.prototype,"openCodeWorkspaceFile",1);var sv=Object.defineProperty,sy=Object.getOwnPropertyDescriptor,sb=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?sy(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sv(t,i,o),o};let StatusBarController=class StatusBarController{constructor(e){this.container=e,this._disposable=C.Disposable.from((0,iT.qw)(e.onReady)(this.onReady,this),A.i.onDidChange(this.onConfigurationChanged,this))}_cancellation;_disposable;_selectedSha;_statusBarBlame;_statusBarMode;dispose(){this.clearBlame(),this._statusBarBlame?.dispose(),this._statusBarMode?.dispose(),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){if(A.i.changed(e,"mode")){let t=A.i.get("mode.statusBar.enabled")?this.container.mode:void 0;if(t?.statusBarItemName){let i="left"!==A.i.get("mode.statusBar.alignment")?C.StatusBarAlignment.Right:C.StatusBarAlignment.Left;A.i.changed(e,"mode.statusBar.alignment")&&this._statusBarMode?.alignment!==i&&(this._statusBarMode?.dispose(),this._statusBarMode=void 0),this._statusBarMode=this._statusBarMode??C.window.createStatusBarItem("gitlens.mode",i,i===C.StatusBarAlignment.Right?999:1),this._statusBarMode.name="GitLens Modes",this._statusBarMode.command=_.eq.SwitchMode,this._statusBarMode.text=t.statusBarItemName,this._statusBarMode.tooltip=new C.MarkdownString(`**${t.statusBarItemName}** ${_.or.Dash} ${t.description}

---

Click to Switch GitLens Modes`,!0),this._statusBarMode.accessibilityInformation={label:`GitLens Mode: ${t.statusBarItemName}
Click to Switch GitLens Modes`},this._statusBarMode.show()}else this._statusBarMode?.dispose(),this._statusBarMode=void 0}if(A.i.changed(e,"statusBar")){if(A.i.get("statusBar.enabled")){let t="left"!==A.i.get("statusBar.alignment")?C.StatusBarAlignment.Right:C.StatusBarAlignment.Left;A.i.changed(e,"statusBar.alignment")&&this._statusBarBlame?.alignment!==t&&(this._statusBarBlame?.dispose(),this._statusBarBlame=void 0),this._statusBarBlame=this._statusBarBlame??C.window.createStatusBarItem("gitlens.blame",t,t===C.StatusBarAlignment.Right?1e3:0),this._statusBarBlame.name="GitLens Current Line Blame",this._statusBarBlame.command=A.i.get("statusBar.command"),A.i.changed(e,"statusBar.enabled")&&this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this))}else A.i.changed(e,"statusBar.enabled")&&(this.container.lineTracker.unsubscribe(this),this._statusBarBlame?.dispose(),this._statusBarBlame=void 0)}}onActiveLinesChanged(e){let t=!(A.i.get("statusBar.reduceFlicker")&&"selection"===e.reason&&(e.pending||null!=e.selections));if(!e.pending&&null!=e.selections){let i=this.container.lineTracker.getState(e.selections[0].active);if(i?.commit!=null){this.updateBlame(e.editor,i);return}t=!0}if(t){if(this.clearBlame(),e.suspended&&e.editor?.document.isDirty&&null!=this._statusBarBlame){let t=this._statusBarBlame,i=this.container.documentTracker.get(e.editor.document);queueMicrotask(async()=>{let e=await i;null!=e&&e.isBlameable&&(t.tooltip=new C.MarkdownString,t.tooltip.isTrusted={enabledCommands:[_.eq.ShowSettingsPage]},e.canDirtyIdle?(t.text="$(watch) Blame Paused",t.tooltip.appendMarkdown(`Blame will resume after a [${A.i.get("advanced.blame.delayAfterEdit")} ms delay](${so.i6.getMarkdownCommandArgsCore(_.eq.ShowSettingsPage,[void 0,"advanced.blame.delayAfterEdit"])} 'Change the after edit delay') to limit the performance impact because there are unsaved changes`)):(t.text="$(debug-pause) Blame Paused",t.tooltip.appendMarkdown(`Blame will resume after saving because there are unsaved changes and the file is over the [${A.i.get("advanced.blame.sizeThresholdAfterEdit")} line threshold](${so.i6.getMarkdownCommandArgsCore(_.eq.ShowSettingsPage,[void 0,"advanced.blame.sizeThresholdAfterEdit"])} 'Change the after edit line threshold') to limit the performance impact`)),t.show())})}}else this._statusBarBlame?.text.startsWith("$(git-commit)")&&(this._statusBarBlame.text=`$(watch)${this._statusBarBlame.text.substring(13)}`)}clearBlame(){this._selectedSha=void 0,this._cancellation?.cancel(),this._statusBarBlame?.hide()}async updateBlame(e,t){let i,r;let s=A.i.get("statusBar");if(!s.enabled||null==this._statusBarBlame||!(0,eQ.sj)(e)){this._cancellation?.cancel(),this._selectedSha=void 0;return}let{commit:o}=t;if(null==o){this._cancellation?.cancel();return}if(this._selectedSha===o.sha&&!o.isUncommitted){this._statusBarBlame?.text.startsWith("$(watch)")&&(this._statusBarBlame.text=`$(git-commit)${this._statusBarBlame.text.substring(8)}`);return}let n=(0,eM.b1)();this._selectedSha=o.sha,this._cancellation?.cancel(),this._cancellation=new C.CancellationTokenSource;let a=this._cancellation.token;switch(s.command){case iq._w.CopyRemoteCommitUrl:i="Click to Copy Remote Commit URL";break;case iq._w.CopyRemoteFileUrl:this._statusBarBlame.command=_.eq.CopyRemoteFileUrl,i="Click to Copy Remote File Revision URL";break;case iq._w.DiffWithPrevious:this._statusBarBlame.command=_.eq.DiffLineWithPrevious,i="Click to Open Line Changes with Previous Revision";break;case iq._w.DiffWithWorking:this._statusBarBlame.command=_.eq.DiffLineWithWorking,i="Click to Open Line Changes with Working File";break;case iq._w.OpenCommitOnRemote:i="Click to Open Commit on Remote";break;case iq._w.OpenFileOnRemote:i="Click to Open Revision on Remote";break;case iq._w.RevealCommitInView:i="Click to Reveal Commit in the Side Bar";break;case iq._w.ShowCommitsInView:i="Click to Search for Commit";break;case iq._w.ShowQuickCommitDetails:i="Click to Show Commit";break;case iq._w.ShowQuickCommitFileDetails:i="Click to Show Commit (file)";break;case iq._w.ShowQuickCurrentBranchHistory:i="Click to Show Branch History";break;case iq._w.ShowQuickFileHistory:i="Click to Show File History";break;case iq._w.ToggleCodeLens:i="Click to Toggle Git CodeLens";break;case iq._w.ToggleFileBlame:i="Click to Toggle File Blame";break;case iq._w.ToggleFileChanges:null!=o.file&&(this._statusBarBlame.command=(0,iX.iK)({title:"Toggle File Changes",command:_.eq.ToggleFileChanges,arguments:[o.file.uri,{type:"changes",context:{sha:o.sha,only:!1,selection:!1}}]})),i="Click to Toggle File Changes";break;case iq._w.ToggleFileChangesOnly:null!=o.file&&(this._statusBarBlame.command=(0,iX.iK)({title:"Toggle File Changes",command:_.eq.ToggleFileChanges,arguments:[o.file.uri,{type:"changes",context:{sha:o.sha,only:!0,selection:!1}}]})),i="Click to Toggle File Changes";break;case iq._w.ToggleFileHeatmap:i="Click to Toggle File Heatmap"}this._statusBarBlame.tooltip=new C.MarkdownString(`Loading... 

---

${i}`),this._statusBarBlame.accessibilityInformation={label:`${this._statusBarBlame.text}
${i}`};let l=await this.container.git.getBestRemotesWithProviders(o.repoPath),[h]=l,c=A.i.get("defaultDateFormat"),u=i_.E.has(s.format,"tips")||i_.E.has(s.tooltipFormat,"tips")?this.container.git.getBranchesAndTagsTipsFn(o.repoPath):void 0,d=!o.isUncommitted&&h?.hasIntegration()&&s.pullRequests.enabled&&(i_.E.has(s.format,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState")||i_.E.has(s.tooltipFormat,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState"));function p(e,t,r){e.text=`$(git-commit) ${i_.E.fromTemplate(s.format,o,{dateFormat:null===s.dateFormat?c:s.dateFormat,getBranchAndTagTips:t,messageTruncateAtNewLine:!0,pullRequest:r,pullRequestPendingMessage:"PR $(watch)",remotes:l})}`,e.accessibilityInformation={label:`${e.text}
${i}`}}async function g(e,t,i,r){return(0,iI.Oq)(e,o,o.getGitUri(),o.lines[0].line-1,{autolinks:!0,cancellation:a,dateFormat:c,format:s.tooltipFormat,getBranchAndTagTips:t,pullRequest:i,pullRequests:d&&null!=i,remotes:l,timeout:r})}d&&(r=await (0,tK.sZ)(o.getAssociatedPullRequest(h),a,100,async e=>{if("timedout"!==e.reason||null==this._statusBarBlame)return;eq.YJ.debug(n,`${_.or.Dot} pull request query took too long (over 100 ms)`);let[t,r]=await Promise.allSettled([u,e.value]);if(a.isCancellationRequested||null==this._statusBarBlame)return;let s=(0,t0.Cv)(r),o=(0,t0.Cv)(t);eq.YJ.debug(n,`${_.or.Dot} pull request query completed; updating...`),p(this._statusBarBlame,o,s);let l=await g(this.container,o,s);null!=l&&(this._statusBarBlame.tooltip=l.appendMarkdown(`

---

${i}`))}));let m=null!=u?await u:void 0;if(a.isCancellationRequested)return;p(this._statusBarBlame,m,r?.value),this._statusBarBlame.show();let f=await (0,tK.sZ)(g(this.container,m,r?.value,20),a,100,async e=>{if("timedout"!==e.reason||null==this._statusBarBlame)return;let t=await e.value;null!=t&&(this._statusBarBlame.tooltip=t.appendMarkdown(`

---

${i}`))});a.isCancellationRequested||f.paused||null==f.value||(this._statusBarBlame.tooltip=f.value.appendMarkdown(`

---

${i}`))}};sb([(0,eW.u_)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map(e=>`[${e.anchor}-${e.active}]`).join(",")}, pending=${!!e.pending}, reason=${e.reason}`}})],StatusBarController.prototype,"onActiveLinesChanged",1),sb([(0,eW.u_)({args:{0:!1,1:e=>e.commit?.sha}})],StatusBarController.prototype,"updateBlame",1);var sC=Object.defineProperty,sA=Object.getOwnPropertyDescriptor,sk=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?sA(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sC(t,i,o),o};let sP=Object.create(null),sS=[];let KeyboardScope=class KeyboardScope{_mapping;constructor(e){for(let t in this._mapping=e,this._mapping)this._mapping[t]=this._mapping[t]??sP;sS.push(this._mapping)}async dispose(){let e=sS.indexOf(this._mapping),t=(0,eM.b1)();(0,eM._W)(t,` \u2022 index=${e}`),e===sS.length-1?(sS.pop(),await this.updateKeyCommandsContext(sS[sS.length-1])):sS.splice(e,1)}_paused=!0;get paused(){return this._paused}async clearKeyCommand(e){let t=(0,eM.b1)(),i=sS[sS.length-1];if(i!==this._mapping||null==i[e]){(0,eM._W)(t," • skipped");return}i[e]=void 0,await (0,iN.Qr)(`${_.O_}:key:${e}`,!1)}async pause(e){if(this._paused)return;this._paused=!0;let t=Object.keys(this._mapping).reduce((t,i)=>(t[i]=null==e||e.includes(i)?void 0:this._mapping[i],t),Object.create(null));await this.updateKeyCommandsContext(t)}async resume(){this._paused&&(this._paused=!1,await this.updateKeyCommandsContext(this._mapping))}async start(){await this.resume()}async setKeyCommand(e,t){let i=(0,eM.b1)(),r=sS[sS.length-1];if(r!==this._mapping){(0,eM._W)(i," • skipped");return}let s=!!r[e];r[e]=t,s||await (0,iN.Qr)(`${_.O_}:key:${e}`,!0)}async updateKeyCommandsContext(e){await Promise.all(_.C_.map(t=>(0,iN.Qr)(`${_.O_}:key:${t}`,!!e?.[t])))}};sk([(0,eW.Yz)({args:!1,prefix:e=>`${e.prefix}[${sS.length}]`})],KeyboardScope.prototype,"dispose",1),sk([(0,eW.Yz)({args:!1,prefix:(e,t)=>`${e.prefix}[${sS.length}](${t})`})],KeyboardScope.prototype,"clearKeyCommand",1),sk([(0,eW.Yz)({args:!1,prefix:e=>`${e.prefix}(paused=${e.instance._paused})`})],KeyboardScope.prototype,"pause",1),sk([(0,eW.Yz)({args:!1,prefix:e=>`${e.prefix}(paused=${e.instance._paused})`})],KeyboardScope.prototype,"resume",1),sk([(0,eW.Yz)({args:!1,prefix:(e,t)=>`${e.prefix}[${sS.length}](${t})`})],KeyboardScope.prototype,"setKeyCommand",1);let Keyboard=class Keyboard{_disposable;constructor(){let e=_.C_.map(e=>(0,iX.or)(`${_.O_}.key.${e}`,()=>this.execute(e),this));this._disposable=C.Disposable.from(...e)}dispose(){this._disposable.dispose()}createScope(e){return new KeyboardScope({...e})}async beginScope(e){let t=this.createScope(e);return await t.start(),t}async execute(e){let t=(0,eM.b1)();if(!sS.length){(0,eM._W)(t," • skipped, no mappings");return}try{let i=sS[sS.length-1][e];if("function"==typeof i&&(i=await i()),"function"!=typeof i?.onDidPressKey){(0,eM._W)(t," • skipped, no callback");return}await i.onDidPressKey(e)}catch(e){eq.YJ.error(e,t)}}};sk([(0,eW.Yz)({args:!1,prefix:(e,t)=>`${e.prefix}[${sS.length}](${void 0===t?"":Object.keys(t).join(",")})`})],Keyboard.prototype,"createScope",1),sk([(0,eW.Yz)({args:!1,prefix:(e,t)=>`${e.prefix}[${sS.length}](${void 0===t?"":Object.keys(t).join(",")})`})],Keyboard.prototype,"beginScope",1),sk([(0,eW.Yz)()],Keyboard.prototype,"execute",1);let TelemetryService=class TelemetryService{constructor(e){this.container=e,e.context.subscriptions.push(A.i.onDidChange(t=>{A.i.changed(t,"telemetry.enabled")&&this.ensureTelemetry(e)}),C.env.onDidChangeTelemetryEnabled(()=>this.ensureTelemetry(e))),this.ensureTelemetry(e)}_enabled=!1;get enabled(){return this._enabled}provider;globalAttributes=new Map;eventQueue=[];dispose(){this.provider?.dispose(),this.provider=void 0}_initializationTimer;ensureTelemetry(e){if(this._enabled=C.env.isTelemetryEnabled&&A.i.get("telemetry.enabled",void 0,!0),!this._enabled){null!=this._initializationTimer&&(clearTimeout(this._initializationTimer),this._initializationTimer=void 0),this.eventQueue.length=0,this.provider?.dispose(),this.provider=void 0;return}null==this._initializationTimer&&(this._initializationTimer=setTimeout(()=>this.initializeTelemetry(e),7500))}async initializeTelemetry(e){if(null!=this._initializationTimer&&(clearTimeout(this._initializationTimer),this._initializationTimer=void 0),this.provider=new(await i.e(240).then(i.bind(i,9108))).OpenTelemetryProvider({env:e.env,extensionId:e.id,extensionVersion:e.version,machineId:C.env.machineId,sessionId:C.env.sessionId,language:C.env.language,platform:(0,tu.Kk)(),vscodeEdition:C.env.appName,vscodeHost:C.env.appHost,vscodeRemoteName:C.env.remoteName??"",vscodeShell:C.env.shell,vscodeUIKind:String(C.env.uiKind),vscodeVersion:C.version},(0,tc.aE)(),e.debugging),this.eventQueue.length){let e=[...this.eventQueue];for(let{type:t,name:i,data:r,global:s}of(this.eventQueue.length=0,e))"sendEvent"===t&&(this.provider.setGlobalAttributes(s),this.provider.sendEvent(i,sR(r)))}this.provider.setGlobalAttributes(this.globalAttributes)}sendEvent(e,t,i,r){if(this._enabled){if(null==this.provider){this.eventQueue.push({type:"sendEvent",name:e,data:t,global:new Map(this.globalAttributes),startTime:i??Date.now(),endTime:r??Date.now()});return}this.provider.sendEvent(e,sR(t),i,r)}}startEvent(e,t,i){if(this._enabled){if(null!=this.provider){let r=this.provider.startEvent(e,sR(t),i);return{dispose:()=>r?.end()}}return i=i??Date.now(),{dispose:()=>this.sendEvent(e,t,i,Date.now())}}}setGlobalAttribute(e,t){null==t?this.globalAttributes.delete(e):this.globalAttributes.set(e,t),this.provider?.setGlobalAttributes(this.globalAttributes)}setGlobalAttributes(e){for(let[t,i]of Object.entries(e))null==i?this.globalAttributes.delete(t):this.globalAttributes.set(t,i);this.provider?.setGlobalAttributes(this.globalAttributes)}deleteGlobalAttribute(e){this.globalAttributes.delete(e),this.provider?.setGlobalAttributes(this.globalAttributes)}};function sR(e){if(null==e)return;let t=Object.create(null);for(let[i,r]of Object.entries(e))null!=r&&(t[i]=r);return t}let UsageTracker=class UsageTracker{constructor(e,t){this.container=e,this.storage=t}_onDidChange=new C.EventEmitter;get onDidChange(){return this._onDidChange.event}dispose(){}get(e){return this.storage.get("usages")?.[e]}async reset(e){let t=this.storage.get("usages");if(null!=t){if(null==e){await this.storage.delete("usages"),this._onDidChange.fire(void 0);return}t=(0,rv.Ks)(t,e,void 0),await this.storage.store("usages",t),this._onDidChange.fire({key:e,usage:void 0})}}async track(e){let t=this.storage.get("usages");null==t&&(t=Object.create(null));let i=Date.now(),r=t[e];null==r?(r={count:0,firstUsedAt:i,lastUsedAt:i},t[e]=r):(r.count!==Number.MAX_SAFE_INTEGER&&r.count++,r.lastUsedAt=i),this.container.telemetry.sendEvent("usage/track",{"usage.key":e,"usage.count":r.count}),await this.storage.store("usages",t),this._onDidChange.fire({key:e,usage:r})}};let sD=/\b(g(?:it)?\b\s*)\b(branch|checkout|cherry-pick|fetch|grep|log|merge|pull|push|rebase|reset|revert|show|stash|status|tag)\b/gi,s$=/\b((?!.*\/\.)(?!.*\.\.)(?!.*\/\/)(?!.*@\{)[^\000-\037\177 ,~^:?*[\\]+[^ ./])\b/gi,s_=/^[0-9a-f]{7,40}\.\.\.?[0-9a-f]{7,40}$/,sI=/^[0-9a-f]{7,40}$/;let GitTerminalLinkProvider=class GitTerminalLinkProvider{constructor(e){this.container=e,this.disposable=C.window.registerTerminalLinkProvider(this)}disposable;dispose(){this.disposable.dispose()}async provideTerminalLinks(e){let t,i,r;if(0===e.line.trim().length)return[];let s=this.container.git.highlander?.path;if(!s)return[];let o=A.i.get("terminalLinks.showDetailsView"),n=[],a=new RegExp(s$,s$.flags),l=new RegExp(sD,sD.flags);for(;;){if(null!=(r=l.exec(e.line))){let[e,t,i]=r,s={startIndex:r.index+t.length,length:i.length,tooltip:"Open in Git Command Palette",command:{command:_.eq.GitCommands,args:{command:i}}};n.push(s)}if(null==(r=a.exec(e.line)))break;let[h,c]=r;if("HEAD"===c.toUpperCase()){let e={startIndex:r.index,length:c.length,tooltip:"Show HEAD",command:{command:_.eq.ShowQuickBranchHistory,args:{branch:"HEAD",repoPath:s}}};n.push(e);continue}void 0===t&&(t=await this.container.git.getBranches(s));let u=t.values.find(e=>e.name===c);if(null==u&&(u=t.values.find(e=>(0,x.ak)(e.name)===c)),null!=u){let e={startIndex:r.index,length:c.length,tooltip:"Show Branch",command:{command:_.eq.ShowQuickBranchHistory,args:{repoPath:s,branch:u.name}}};n.push(e);continue}void 0===i&&(i=await this.container.git.getTags(s));let d=i.values.find(e=>e.name===c);if(null!=d){let e={startIndex:r.index,length:c.length,tooltip:"Show Tag",command:{command:_.eq.ShowQuickBranchHistory,args:{repoPath:s,tag:d.name}}};n.push(e);continue}if(!sI.test(c)){if(s_.test(c)){let e={startIndex:r.index,length:c.length,tooltip:"Show Commits",command:{command:_.eq.GitCommands,args:{command:"log",state:{repo:s,reference:(0,F.op)(c,s,{refType:"revision"})}}}};n.push(e)}continue}if(await this.container.git.validateReference(s,c)){let e={startIndex:r.index,length:c.length,tooltip:"Show Commit",command:o?{command:_.eq.ShowInDetailsView,args:{repoPath:s,refs:[c]}}:{command:_.eq.ShowQuickCommit,args:{repoPath:s,sha:c}}};n.push(e)}}return n}handleTerminalLink(e){C.commands.executeCommand(e.command.command,e.command.args)}};let GitDocumentTracker=class GitDocumentTracker{constructor(e){this.container=e,this._disposable=C.Disposable.from((0,iT.qw)(e.onReady)(this.onReady,this),A.i.onDidChange(this.onConfigurationChanged,this),C.window.onDidChangeActiveTextEditor(this.onActiveTextEditorChanged,this),C.workspace.onDidChangeTextDocument(this.onTextDocumentChanged,this),C.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this),C.workspace.onDidSaveTextDocument(this.onTextDocumentSaved,this),this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),this.container.git.onDidChangeRepository(this.onRepositoryChanged,this)),this._dirtyIdleTriggerDelay=A.i.get("advanced.blame.delayAfterEdit")}_onDidChangeBlameState=new C.EventEmitter;get onDidChangeBlameState(){return this._onDidChangeBlameState.event}_onDidChangeContent=new C.EventEmitter;get onDidChangeContent(){return this._onDidChangeContent.event}_onDidChangeDirtyState=new C.EventEmitter;get onDidChangeDirtyState(){return this._onDidChangeDirtyState.event}_onDidTriggerDirtyIdle=new C.EventEmitter;get onDidTriggerDirtyIdle(){return this._onDidTriggerDirtyIdle.event}_dirtyIdleTriggerDelay;_dirtyIdleTriggeredDebounced;_dirtyStateChangedDebounced;_disposable;_documentMap=new Map;dispose(){this._disposable.dispose(),this.clear()}onReady(){this.onConfigurationChanged(),this.onActiveTextEditorChanged(C.window.activeTextEditor)}_timer;onActiveTextEditorChanged(e){if(null!=e&&!(0,eQ.sj)(e))return;if(this._dirtyIdleTriggeredDebounced?.flush(),this._dirtyIdleTriggeredDebounced?.cancel(),this._dirtyIdleTriggeredDebounced=void 0,this._dirtyStateChangedDebounced?.flush(),this._dirtyStateChangedDebounced?.cancel(),this._dirtyStateChangedDebounced=void 0,null!=this._timer&&(clearTimeout(this._timer),this._timer=void 0),null==e){this._timer=setTimeout(()=>{this._timer=void 0,(0,iN.Qr)("gitlens:activeFileStatus",void 0)},250);return}let t=this._documentMap.get(e.document);if(null!=t){t.then(e=>e.activate(),()=>{});return}this.addCore(e.document)}onConfigurationChanged(e){null!=e&&(A.i.changed(e,"blame.ignoreWhitespace")||A.i.changed(e,"advanced.caching.enabled"))&&this.refreshDocuments(),A.i.changed(e,"advanced.blame.delayAfterEdit")&&(this._dirtyIdleTriggerDelay=A.i.get("advanced.blame.delayAfterEdit"),this._dirtyIdleTriggeredDebounced?.flush(),this._dirtyIdleTriggeredDebounced?.cancel(),this._dirtyIdleTriggeredDebounced=void 0)}onRepositoriesChanged(e){this.refreshDocuments({addedOrChangedRepoPaths:e.added.length?new Set(e.added.map(e=>e.path.toLowerCase())):void 0,removedRepoPaths:e.removed.length?new Set(e.removed.map(e=>e.path.toLowerCase())):void 0})}onRepositoryChanged(e){e.changed(ty.c7.Index,ty.c7.Heads,ty.c7.Status,ty.c7.Unknown,ty.MR.Any)&&this.refreshDocuments({addedOrChangedRepoPaths:new Set([e.repository.path])})}debouncedTextDocumentChanges=new WeakMap;onTextDocumentChanged(e){let{scheme:t}=e.document.uri;if(!this.container.git.supportedSchemes.has(t))return;let i=this.debouncedTextDocumentChanges.get(e.document);null==i&&(i=(0,tX.Cu)(e=>this.onTextDocumentChangedCore(e),50,([e],[t])=>[{...t,contentChanges:[...e.contentChanges,...t.contentChanges]}]),this.debouncedTextDocumentChanges.set(e.document,i)),i(e)}async onTextDocumentChangedCore(e){this.debouncedTextDocumentChanges.delete(e.document);let t=await (this._documentMap.get(e.document)??this.addCore(e.document));t.refresh("doc-changed");let i=e.document.isDirty,r=C.window.activeTextEditor;null!=this._dirtyIdleTriggeredDebounced&&(i?this._dirtyIdleTriggeredDebounced({editor:r,document:t}):this._dirtyIdleTriggeredDebounced.cancel()),r?.document===e.document&&this._onDidChangeContent.fire({editor:r,document:t,contentChanges:e.contentChanges}),(t.forceDirtyStateChangeOnNextDocumentChange||t.dirty!==i)&&(t.resetForceDirtyStateChangeOnNextDocumentChange(),t.dirty=i,null!=r&&r.document===e.document&&this.fireDocumentDirtyStateChanged({editor:r,document:t,dirty:t.dirty}))}onTextDocumentClosed(e){this.remove(e)}async onTextDocumentSaved(e){let t=this._documentMap.get(e);if(null!=t){(await t).update({forceBlameChange:!0});return}(0,eQ.Qp)(e)&&this.addCore(e)}async add(e){let t;if((0,tm.my)(e))try{t=await C.workspace.openTextDocument(e.documentUri())}catch(r){let i=r?.toString()??"";if(C.env.language.startsWith("en")){if(i.includes("File seems to be binary and cannot be opened as text"))t=new BinaryTextDocument(e);else if(i.includes("File not found")||i.includes("Unable to read file")||i.includes("Unable to resolve non-existing file"))t=new MissingRevisionTextDocument(e);else throw r}else if(i.includes("cannot open"))t=new MissingRevisionTextDocument(e);else throw r}else t=e instanceof C.Uri?await C.workspace.openTextDocument(e):e;return this.addCore(t)}async addCore(e){let t=t4.G.create(e,!1,{onDidBlameStateChange:e=>this._onDidChangeBlameState.fire(e)},this.container);return this._documentMap.set(e,t),t}async clear(){for(let e of this._documentMap.values())(await e).dispose();this._documentMap.clear()}get(e){if(e instanceof C.Uri){let t=(0,eQ.wv)(e);if(null==t)return;e=t}return this._documentMap.get(e)}async getOrAdd(e){return e instanceof C.Uri&&(e=(0,eQ.wv)(e)??e),this.get(e)??this.add(e)}has(e){if(e instanceof C.Uri){let t=(0,eQ.wv)(e);if(null==t)return!1;e=t}return this._documentMap.has(e)}async resetCache(e,t){let i=this.get(e);if(null!=i)switch(t){case"blame":(await i).state?.clearBlame();break;case"diff":(await i).state?.clearDiff();break;case"log":(await i).state?.clearLog()}}async remove(e,t){let i;null!=t&&(i=this._documentMap.get(e)),this._documentMap.delete(e),(t??await i)?.dispose()}fireDocumentDirtyStateChanged(e){if(e.dirty){queueMicrotask(()=>{this._dirtyStateChangedDebounced?.cancel(),C.window.activeTextEditor===e.editor&&this._onDidChangeDirtyState.fire(e)}),this._dirtyIdleTriggerDelay>0&&(this._dirtyIdleTriggeredDebounced??=(0,tX.Cu)(e=>{!this._dirtyIdleTriggeredDebounced?.pending()&&e.document.setIsDirtyIdle()&&this._onDidTriggerDirtyIdle.fire(e)},this._dirtyIdleTriggerDelay),this._dirtyIdleTriggeredDebounced({editor:e.editor,document:e.document}));return}this._dirtyStateChangedDebounced??=(0,tX.Cu)(e=>{C.window.activeTextEditor===e.editor&&this._onDidChangeDirtyState.fire(e)},250),this._dirtyStateChangedDebounced(e)}async refreshDocuments(e){if(0!==this._documentMap.size)for await(let t of this._documentMap.values()){let i=t.uri.repoPath?.toLocaleLowerCase();null!=i&&(e?.removedRepoPaths?.has(i)?this.remove(t.document,t):(null==e||e?.addedOrChangedRepoPaths?.has(i))&&t.refresh("repo-changed"))}}};let EmptyTextDocument=class EmptyTextDocument{constructor(e){this.gitUri=e,this.uri=e.documentUri(),this.eol=C.EndOfLine.LF,this.fileName=this.uri.fsPath,this.isClosed=!1,this.isDirty=!1,this.isUntitled=!1,this.languageId="",this.lineCount=0,this.version=0}eol;fileName;isClosed;isDirty;isUntitled;languageId;lineCount;uri;version;getText(e){throw Error("Method not supported.")}getWordRangeAtPosition(e,t){throw Error("Method not supported.")}lineAt(e){throw Error("Method not supported.")}offsetAt(e){throw Error("Method not supported.")}positionAt(e){throw Error("Method not supported.")}save(){throw Error("Method not supported.")}validatePosition(e){throw Error("Method not supported.")}validateRange(e){throw Error("Method not supported.")}};let BinaryTextDocument=class BinaryTextDocument extends EmptyTextDocument{};let MissingRevisionTextDocument=class MissingRevisionTextDocument extends EmptyTextDocument{};var sT=Object.defineProperty,sF=Object.getOwnPropertyDescriptor,sO=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?sF(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sT(t,i,o),o};let LineTracker=class LineTracker{constructor(e,t){this.container=e,this.documentTracker=t}_onDidChangeActiveLines=new C.EventEmitter;get onDidChangeActiveLines(){return this._onDidChangeActiveLines.event}_disposable;_editor;_state=new Map;_subscriptions=new Map;_subscriptionOnlyWhenTracking;dispose(){for(let e of this._subscriptions.keys())this.unsubscribe(e)}onActiveTextEditorChanged(e){e!==this._editor&&(null==e||(0,eQ.sj)(e))&&(this._editor=e,this._selections=sE(e?.selections),this._suspended?this.resume({force:!0}):this.notifyLinesChanged("editor"))}onBlameStateChanged(e){this.notifyLinesChanged("editor")}onContentChanged(e){this.selections?.length&&e.contentChanges.some(e=>this.selections.some(t=>e.range.end.line>=t.active&&t.active>=e.range.start.line||e.range.start.line>=t.active&&t.active>=e.range.end.line))&&this.notifyLinesChanged("editor")}onDirtyIdleTriggered(e){this.resume()}onDirtyStateChanged(e){e.dirty?this.suspend():this.resume({force:!0})}onTextEditorSelectionChanged(e){if(this._editor!==e.textEditor&&!(0,eQ.sj)(e.textEditor))return;let t=sE(e.selections);this._editor===e.textEditor&&this.includes(t)||(this._editor=e.textEditor,this._selections=t,this.notifyLinesChanged(this._editor===e.textEditor?"selection":"editor"))}_selections;get selections(){return this._selections}_suspended=!1;get suspended(){return this._suspended}getState(e){return this._state.get(e)}resetState(e){if(null!=e){this._state.delete(e);return}this._state.clear()}setState(e,t){this._state.set(e,t)}includes(e,t){if("number"!=typeof e)return sx(e,this._selections);if(null==this._selections||0===this._selections.length)return!1;let i=t?.activeOnly??!0;for(let t of this._selections)if(e===t.active||!i&&(t.anchor>=e&&e>=t.active||t.active>=e&&e>=t.anchor))return!0;return!1}refresh(){this.notifyLinesChanged("editor")}resume(e){(e?.force||this._suspended)&&(this._suspended=!1,this._subscriptionOnlyWhenTracking??=this.documentTracker.onDidChangeContent(this.onContentChanged,this),e?.silent||this.notifyLinesChanged("editor"))}suspend(e){!e?.force&&this._suspended||(this._suspended=!0,this._subscriptionOnlyWhenTracking?.dispose(),this._subscriptionOnlyWhenTracking=void 0,e?.silent||this.notifyLinesChanged("editor"))}subscribed(e){return this._subscriptions.has(e)}subscribe(e,t){let i=(0,eM.b1)(),r=0===this._subscriptions.size,s=this._subscriptions.get(e);return null==s?(s=[t],this._subscriptions.set(e,s)):s.push(t),r?((0,eM._W)(i," • starting line tracker..."),this.resume({force:!0,silent:!0}),this._disposable=C.Disposable.from({dispose:()=>this.suspend({force:!0,silent:!0})},C.window.onDidChangeActiveTextEditor((0,tX.Cu)(this.onActiveTextEditorChanged,0),this),C.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this),this.documentTracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.documentTracker.onDidChangeDirtyState(this.onDirtyStateChanged,this),this.documentTracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this)),queueMicrotask(()=>this.onActiveTextEditorChanged(C.window.activeTextEditor))):(0,eM._W)(i," • already started..."),{dispose:()=>this.unsubscribe(e)}}unsubscribe(e){let t=this._subscriptions.get(e);if(null!=t){for(let i of(this._subscriptions.delete(e),t))i.dispose();0===this._subscriptions.size&&(this._fireLinesChangedDebounced?.cancel(),this._disposable?.dispose(),this._disposable=void 0)}}async fireLinesChanged(e){let t=!1;this.suspended||e.pending||null==e.selections||null==e.editor||(t=await this.updateState(e.selections,e.editor)),this._onDidChangeActiveLines.fire(t?e:{...e,selections:void 0,suspended:this.suspended})}_fireLinesChangedDebounced;notifyLinesChanged(e){"editor"===e&&this.resetState();let t={editor:this._editor,selections:this.selections,reason:e};if(null==t.selections){queueMicrotask(()=>{t.editor===C.window.activeTextEditor&&(this._fireLinesChangedDebounced?.cancel(),this.fireLinesChanged(t))});return}null==this._fireLinesChangedDebounced&&(this._fireLinesChangedDebounced=(0,tX.Cu)(e=>{e.editor===C.window.activeTextEditor&&sx(e.selections,sE(e.editor?.selections))&&this.fireLinesChanged(e)},250)),this._fireLinesChangedDebounced.pending()||this.fireLinesChanged({...t,pending:!0}),this._fireLinesChangedDebounced(t)}async updateState(e,t){let i=(0,eM.b1)();if(!this.includes(e))return(0,eM._W)(i,` \u2022 lines no longer match`),!1;let r=await this.documentTracker.getOrAdd(t.document);if(!r.isBlameable)return(0,eM._W)(i,` \u2022 document is not blameable`),!1;if(1===e.length){let s=await this.container.git.getBlameForLine(r.uri,e[0].active,t?.document);if(null==s)return(0,eM._W)(i,` \u2022 blame failed`),!1;null!=s.commit&&s.commit.file,this.setState(s.line.line-1,{commit:s.commit})}else{let s=await this.container.git.getBlame(r.uri,t.document);if(null==s)return(0,eM._W)(i,` \u2022 blame failed`),!1;for(let t of e){let e=s.lines[t.active],i=s.commits.get(e.sha);null!=i&&i.file,null==i?this.resetState(t.active):this.setState(t.active,{commit:i})}}return this.includes(e)?r.isBlameable?(t.document.isDirty&&r.setForceDirtyStateChangeOnNextDocumentChange(),!0):((0,eM._W)(i,` \u2022 document is not blameable`),!1):((0,eM._W)(i,` \u2022 lines no longer match`),!1)}};function sx(e,t){return null==e&&null==t||null!=e&&null!=t&&e.length===t.length&&e.every((e,i)=>{let r=t[i];return e.active===r.active&&e.anchor===r.anchor})}function sE(e){return e?.map(e=>({active:e.active.line,anchor:e.anchor.line}))}sO([(0,eW.u_)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}, blameable=${e.blameable}`}})],LineTracker.prototype,"onBlameStateChanged",1),sO([(0,eW.u_)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}`}})],LineTracker.prototype,"onContentChanged",1),sO([(0,eW.u_)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}`}})],LineTracker.prototype,"onDirtyIdleTriggered",1),sO([(0,eW.u_)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}, dirty=${e.dirty}`}})],LineTracker.prototype,"onDirtyStateChanged",1),sO([(0,eW.u_)()],LineTracker.prototype,"resume",1),sO([(0,eW.u_)()],LineTracker.prototype,"suspend",1),sO([(0,eW.u_)({args:!1,singleLine:!0})],LineTracker.prototype,"subscribe",1),sO([(0,eW.u_)({args:!1,singleLine:!0})],LineTracker.prototype,"unsubscribe",1),sO([(0,eW.u_)({args:{0:e=>e?.map(e=>e.active).join(","),1:e=>e.document.uri.toString(!0)},exit:!0})],LineTracker.prototype,"updateState",1);var sB=i(1144),sU=i(9663),sW=i(6708);let DeepLinkService=class DeepLinkService{constructor(e){this.container=e,this._context={state:sW.IH.Idle},this._disposables.push(e.uri.onDidReceiveUri(async e=>{let t=(0,sW.wb)(e);if(null!=t&&this._context.state===sW.IH.Idle){if(this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories,!t.type||!t.mainId&&!t.remoteUrl&&!t.repoPath&&!t.targetId){C.window.showErrorMessage("Unable to resolve link"),eq.YJ.warn(`Unable to resolve link - missing basic properties: ${e.toString()}`);return}if(!Object.values(sW.In).includes(t.type)){C.window.showErrorMessage("Unable to resolve link"),eq.YJ.warn(`Unable to resolve link - unknown link type: ${e.toString()}`);return}if(t.type!==sW.In.Repository&&null==t.targetId&&null==t.mainId){C.window.showErrorMessage("Unable to resolve link"),eq.YJ.warn(`Unable to resolve link - no main/target id provided: ${e.toString()}`);return}if(t.type===sW.In.Comparison&&null==t.secondaryTargetId){C.window.showErrorMessage("Unable to resolve link"),eq.YJ.warn(`Unable to resolve link - no secondary target id provided: ${e.toString()}`);return}this.setContextFromDeepLink(t,e.toString()),await this.processDeepLink()}}));let t=this.container.storage.get("deepLinks:pending");null!=t&&(this.container.storage.delete("deepLinks:pending"),this.processPendingDeepLink(t))}_disposables=[];_context;_onDeepLinkProgressUpdated=new C.EventEmitter;dispose(){C.Disposable.from(...this._disposables).dispose()}resetContext(){this._context={state:sW.IH.Idle,url:void 0,mainId:void 0,repo:void 0,remoteUrl:void 0,remote:void 0,secondaryRemote:void 0,repoPath:void 0,filePath:void 0,targetId:void 0,secondaryTargetId:void 0,secondaryRemoteUrl:void 0,targetType:void 0,targetSha:void 0}}setContextFromDeepLink(e,t){this._context={...this._context,mainId:e.mainId,targetType:e.type,url:t,remoteUrl:e.remoteUrl,repoPath:e.repoPath,filePath:e.filePath,targetId:e.targetId,secondaryTargetId:e.secondaryTargetId,secondaryRemoteUrl:e.secondaryRemoteUrl}}async processPendingDeepLink(e){if(null==e.url)return;let t=(0,sW.wb)(C.Uri.parse(e.url));if(null==t)return;this._context={state:sW.IH.CloneOrAddRepo},this.setContextFromDeepLink(t,e.url);let i=sW.od.OpenRepo;if(this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories,null!=e.repoPath){let t=C.Uri.parse(e.repoPath);try{let e=await this.container.git.getOrOpenRepository(t,{detectNested:!1});null!=e&&(this._context.repo=e,i=sW.od.RepoOpened)}catch{}}queueMicrotask(()=>{this.processDeepLink(i)})}async getShaForBranch(e){let{repo:t,remote:i,secondaryRemote:r}=this._context;if(!t)return;let s=e;null==i||s.startsWith(`${i.name}/`)?null==r||s.startsWith(`${r.name}/`)||(s=`${r.name}/${s}`):s=`${i.name}/${s}`;let o=await t.getBranch(s);if(o?.sha!=null)return o.sha;if(e.includes(":")){let[i,r]=e.split(":");if(null!=i&&null!=s){let[e,n]=i.split("/");if(null!=e&&null!=n){for(let i of(await t.getRemotes()))if(i.provider?.owner===e&&(s=`${i.name}/${r}`,o=await t.getBranch(s),o?.sha!=null))return o.sha}}}if(o=await t.getBranch(e),o?.sha!=null)return o.sha}async getShaForTag(e){let{repo:t}=this._context;if(!t)return;let i=await t.getTag(e);if(i?.sha!=null)return i.sha}async getShaForCommit(e){let{repo:t}=this._context;if(t&&await this.container.git.validateReference(t.path,e))return e}async getShasForComparison(e,t){let i=await this.getRefSha(e);if(null==i)return;let r=await this.getRefSha(t);if(null!=r)return[i,r]}async getRefSha(e){if(""===e)return e;if((0,F.kp)(e))return this.getShaForCommit(e);let t=e.toLocaleLowerCase();if(!t.startsWith("refs/tags/")&&!t.startsWith("tags/")){let t=await this.getShaForBranch(e);if(null!=t)return t}let i=await this.getShaForTag(e);return null!=i?i:this.getShaForCommit(e)}async getShasForTargets(){let{repo:e,targetType:t,targetId:i,secondaryTargetId:r}=this._context;if(null!=e&&t!==sW.In.Repository&&null!=i){if(t===sW.In.Branch)return this.getShaForBranch(i);if(t===sW.In.Tag)return this.getShaForTag(i);if(t===sW.In.Commit)return this.getShaForCommit(i);if(t===sW.In.File)return this.getRefSha(i);if(t===sW.In.Comparison){if(null==r)return;return this.getShasForComparison(i,r)}}}async showOpenTypePrompt(e){let t=[{title:"Open Folder",action:"folder"},{title:"Open Workspace",action:"workspace"}];null!=this._context.remoteUrl&&t.push({title:"Clone",action:"clone"}),e?.includeCurrent&&t.push({title:"Use Current Window",action:"current"}),t.push({title:"Cancel",isCloseAffordance:!0});let i=await C.window.showInformationMessage(e?.customMessage??"No matching repository found. Please choose an option.",{modal:!0},...t);return i?.action}async showOpenLocationPrompt(e){let t=[{title:"Open",action:"currentWindow"},{title:"Open in New Window",action:"newWindow"}];"workspace"!==e&&t.push({title:"Add to Workspace",action:"addToWorkspace"}),t.push({title:"Cancel",isCloseAffordance:!0});let i=await C.window.showInformationMessage(`Please choose an option to open the repository ${"clone"===e?"after cloning":e}.`,{modal:!0},...t);return i?.action}async showFetchPrompt(){let e=await C.window.showInformationMessage("The link target(s) couldn't be found. Would you like to fetch from the remote?",{modal:!0},{title:"Fetch",action:!0},{title:"Cancel",isCloseAffordance:!0});return e?.action||!1}async showAddRemotePrompt(e,t){let i;let r=await C.window.showInformationMessage(`Unable to find a remote for '${e}'. Would you like to add a new remote?`,{modal:!0},{title:"Yes"},{title:"No",isCloseAffordance:!0});return r?.title!=="Yes"?i:i=await C.window.showInputBox({prompt:"Enter a name for the remote",validateInput:e=>e?t.includes(e)?"A remote with that name already exists":void 0:"A name is required"})}async processDeepLink(e=sW.od.DeepLinkEventFired){let t="",i=e;if(i===sW.od.DeepLinkCancelled&&this._context.state===sW.IH.Idle)return;let r=[],{targetType:s}=this._context;for(queueMicrotask(()=>void C.window.withProgress({cancellable:!0,location:C.ProgressLocation.Notification,title:`Opening ${(0,sW.gJ)(s??sW.In.Repository)} link...`},(e,t)=>(e.report({increment:0}),new Promise(i=>{t.onCancellationRequested(()=>{queueMicrotask(()=>this.processDeepLink(sW.od.DeepLinkCancelled)),i()}),this._onDeepLinkProgressUpdated.event(({message:t,increment:r})=>{e.report({message:t,increment:r}),100===r&&i()})}))));;){this._context.state=sW.cn[this._context.state][i];let{state:e,mainId:s,repo:o,url:n,remoteUrl:a,secondaryRemoteUrl:l,remote:h,secondaryRemote:c,repoPath:u,filePath:d,targetId:p,secondaryTargetId:g,targetSha:m,secondaryTargetSha:f,targetType:w}=this._context;switch(this._onDeepLinkProgressUpdated.fire(sW.eM[e]),e){case sW.IH.Idle:i===sW.od.DeepLinkErrored&&(C.window.showErrorMessage("Unable to resolve link"),eq.YJ.warn(`Unable to resolve link - ${t}: ${n}`)),this.resetContext();return;case sW.IH.AccountCheck:if(null==w){i=sW.od.DeepLinkErrored,t="No link type provided.";break}if(!sW.M5.includes(w)){i=sW.od.AccountCheckPassed;break}if(!await (0,sU.us)(`Opening ${(0,sW.gJ)(w)} links requires a GitKraken account.`,this.container)){i=sW.od.DeepLinkErrored,t="Account required to open link";break}i=sW.od.AccountCheckPassed;break;case sW.IH.PlanCheck:if(null==w){i=sW.od.DeepLinkErrored,t="No link type provided.";break}if(!sW.EF.includes(w)){i=sW.od.PlanCheckPassed;break}if(!await (0,sU.GK)(`A paid plan is required to open ${(0,sW.gJ)(w)} links.`,this.container)){i=sW.od.DeepLinkErrored,t="Paid plan required to open link";break}i=sW.od.PlanCheckPassed;break;case sW.IH.TypeMatch:switch(w){case sW.In.Draft:i=sW.od.LinkIsDraftType;break;case sW.In.Workspace:i=sW.od.LinkIsWorkspaceType;break;default:i=sW.od.LinkIsRepoType}break;case sW.IH.RepoMatch:case sW.IH.AddedRepoMatch:{let o;if(!s&&!a&&!u){i=sW.od.DeepLinkErrored,t="No repository id, remote url or path was provided.";break}let n=s,l=a;null!=o&&(this._context.remoteUrl=o.remote?.url??void 0,l=o.remote?.url,this._context.mainId=o.initialCommitSha??void 0,n=o.initialCommitSha);let h="",c="";for(let e of(null!=l&&([,h,c]=(0,eF.Ud)(l)),this.container.git.repositories)){if(null!=u&&(0,q.ay)(e.path.toLowerCase())===(0,q.ay)(u.toLowerCase())){this._context.repo=e,i=sW.od.RepoMatched;break}if(null!=h&&null!=c){let t=await e.getRemotes({filter:e=>e.matches(h,c)});if(t.length>0){this._context.repo=e,this._context.remote=t[0],i=sW.od.RepoMatched;break}}if(null!=n&&"-"!==n&&await this.container.git.validateReference(e.path,n)){this._context.repo=e,i=sW.od.RepoMatched;break}}if(!this._context.repo&&e===sW.IH.RepoMatch&&(r=await this.container.repositoryPathMapping.getLocalRepoPaths({remoteUrl:l})).length>0){for(let e of this.container.git.repositories)if(r.some(t=>(0,q.ay)(e.path.toLowerCase())===(0,q.ay)(t.toLowerCase()))){this._context.repo=e,i=sW.od.RepoMatched;break}if(null==this._context.repo){i=sW.od.RepoMatchedInLocalMapping;break}}this._context.repo||(e===sW.IH.RepoMatch?i=sW.od.RepoMatchFailed:(i=sW.od.DeepLinkErrored,t="No matching repository found."));break}case sW.IH.CloneOrAddRepo:{let e,o,n;if(!s&&!a&&!u){i=sW.od.DeepLinkErrored,t="Missing repository id, remote url and path.";break}if(r.length>0){if(null==(e=await C.window.showQuickPick([...r,"Choose a different location"],{placeHolder:"Matching repository found. Choose a location to open it."}))){i=sW.od.DeepLinkCancelled;break}"Choose a different location"!==e&&(n=C.Uri.file(e),o="folder")}if(null==o&&(o=await this.showOpenTypePrompt({customMessage:"Choose a different location"===e?"Please choose an option to open the repository":void 0})),!o){i=sW.od.DeepLinkCancelled;break}let l=await this.showOpenLocationPrompt(o);if(!l||(null==n&&(n=(await C.window.showOpenDialog({title:`Choose a ${"workspace"===o?"workspace":"folder"} to ${"clone"===o?"clone the repository to":"open the repository"}`,canSelectFiles:"workspace"===o,canSelectFolders:"workspace"!==o,canSelectMany:!1,..."workspace"===o&&{filters:{Workspaces:["code-workspace"]}}}))?.[0]),!n)){i=sW.od.DeepLinkCancelled;break}if(null!=n&&null!=a&&"clone"===o){let e;try{e=await C.window.withProgress({location:C.ProgressLocation.Notification,title:`Cloning repository for link: ${this._context.url}}`},async()=>this.container.git.clone(a,n?.fsPath??""))}catch{i=sW.od.DeepLinkErrored,t="Unable to clone repository";break}if(!e){i=sW.od.DeepLinkErrored,t="Unable to clone repository";break}n=C.Uri.file(e)}if("current"!==o&&"workspace"!==o&&!r.includes(n.fsPath)){let e=await this.container.git.getOrOpenRepository(n,{closeOnOpen:!0,detectNested:!1});null!=e&&await this.container.repositoryPathMapping.writeLocalRepoPath({remoteUrl:a},e.uri.fsPath)}"addToWorkspace"===l&&(C.workspace.workspaceFolders?.length||0)>1?i=sW.od.OpenRepo:(await this.container.storage.store("deepLinks:pending",{url:this._context.url,repoPath:n.toString()}),i=sW.od.DeepLinkStored),(0,eQ.EX)(n,{location:l});break}case sW.IH.OpeningRepo:this._disposables.push((0,iT.qw)(this.container.git.onDidChangeRepositories)(()=>{queueMicrotask(()=>this.processDeepLink(sW.od.RepoAdded))}));return;case sW.IH.RemoteMatch:if(u&&o&&!a&&!l){i=sW.od.RemoteMatchUnneeded;break}if(!o||!a&&!l){i=sW.od.DeepLinkErrored,t="Missing repository or remote url.";break}if(a&&!h){let e=await o.getRemotes({filter:e=>e.url===a});e.length>0&&(this._context.remote=e[0])}if(l&&!c){let e=await o.getRemotes({filter:e=>e.url===l});e.length>0&&(this._context.secondaryRemote=e[0])}i=a&&!this._context.remote||l&&!this._context.secondaryRemote?sW.od.RemoteMatchFailed:sW.od.RemoteMatched;break;case sW.IH.AddRemote:{let e,r;if(!o||!a&&!l){i=sW.od.DeepLinkErrored,t="Missing repository or remote url.";break}if(a&&!h&&(e=await this.showAddRemotePrompt(a,(await o.getRemotes()).map(e=>e.name)))){try{await o.addRemote(e,a,{fetch:!0})}catch{i=sW.od.DeepLinkErrored,t="Failed to add remote.";break}if([this._context.remote]=await o.getRemotes({filter:e=>e.url===a}),!this._context.remote){i=sW.od.DeepLinkErrored,t="Failed to add remote.";break}}if(l&&!c&&(r=await this.showAddRemotePrompt(l,(await o.getRemotes()).map(e=>e.name)))){try{await o.addRemote(r,l,{fetch:!0})}catch{i=sW.od.DeepLinkErrored,t="Failed to add remote.";break}if([this._context.secondaryRemote]=await o.getRemotes({filter:e=>e.url===l}),!this._context.secondaryRemote){i=sW.od.DeepLinkErrored,t="Failed to add remote.";break}}this._context.secondaryRemote&&!this._context.remote&&(this._context.remote=this._context.secondaryRemote),e||r?this._context.remote||(i=sW.od.DeepLinkErrored,t="Failed to add remote."):i=sW.od.DeepLinkCancelled,i=sW.od.RemoteAdded;break}case sW.IH.TargetMatch:case sW.IH.FetchedTargetMatch:if(!o||!w){i=sW.od.DeepLinkErrored,t="Missing repository or target type.";break}if(w===sW.In.Repository){i=sW.od.TargetMatchedForGraph;break}if(w===sW.In.Comparison)[this._context.targetSha,this._context.secondaryTargetSha]=await this.getShasForTargets()??[];else if(w===sW.In.File&&null==p){i=sW.od.TargetMatchedForFile;break}else this._context.targetSha=await this.getShasForTargets();if(null==this._context.targetSha||null==this._context.secondaryTargetSha&&w===sW.In.Comparison){e===sW.IH.TargetMatch&&null!=h?i=sW.od.TargetMatchFailed:(i=sW.od.DeepLinkErrored,t=`No matching ${null==m?"target":"secondary target"} found.`);break}switch(w){case sW.In.File:i=sW.od.TargetMatchedForFile;break;case sW.In.Comparison:i=sW.od.TargetsMatchedForComparison;break;default:i=sW.od.TargetMatchedForGraph}break;case sW.IH.Fetch:if(!o||!h){i=sW.od.DeepLinkErrored,t="Missing repository or remote.";break}if(!await this.showFetchPrompt()){i=sW.od.DeepLinkCancelled;break}try{await o.fetch({remote:h.name,progress:!0})}catch{i=sW.od.DeepLinkErrored,t="Error fetching remote.";break}if(c&&c.name!==h.name)try{await o.fetch({remote:c.name,progress:!0})}catch{}i=sW.od.TargetFetched;break;case sW.IH.OpenGraph:if(!o||!w){i=sW.od.DeepLinkErrored,t="Missing repository or target type.";break}if(w===sW.In.Repository){await (0,iX.gf)(_.eq.ShowInCommitGraph,o),i=sW.od.DeepLinkResolved;break}if(!m){i=sW.od.DeepLinkErrored,t=`Cannot find target ${w} in repo.`;break}await (0,iX.gf)(_.eq.ShowInCommitGraph,{ref:(0,F.op)(m,o.path)}),i=sW.od.DeepLinkResolved;break;case sW.IH.OpenComparison:if(!o){i=sW.od.DeepLinkErrored,t="Missing repository.";break}if(null==p||null==g||null==m||null==f){i=sW.od.DeepLinkErrored,t="Missing target or secondary target.";break}await this.container.searchAndCompareView.compare(o.path,""===g||(0,F.kp)(g)?g:{label:g,ref:f},""===p||(0,F.kp)(p)?p:{label:p,ref:m}),i=sW.od.DeepLinkResolved;break;case sW.IH.OpenDraft:if(!p){i=sW.od.DeepLinkErrored,t="Missing cloud patch id.";break}await (0,iX.gf)(_.eq.OpenCloudPatch,{id:p,patchId:g}),i=sW.od.DeepLinkResolved;break;case sW.IH.OpenWorkspace:if(!s){i=sW.od.DeepLinkErrored,t="Missing workspace id.";break}await this.container.workspacesView.revealWorkspaceNode(s,{select:!0,focus:!0,expand:!0}),i=sW.od.DeepLinkResolved;break;case sW.IH.OpenFile:{let e,r;if(null==d||!o){i=sW.od.DeepLinkErrored,t="Missing file path.";break}if(null!=g){let t=g.split("-");if(1===t.length){let i=parseInt(t[0]);isNaN(i)||(e=new C.Range(i<1?0:i-1,0,i,0))}else if(2===t.length){let i=parseInt(t[0]),r=parseInt(t[1]);isNaN(i)||isNaN(r)||(e=new C.Range(i<1?0:i-1,0,r,0))}}if(null==m)try{await (0,eQ.fL)(C.Uri.file(`${o.path}/${d}`),{preview:!1,selection:e,throwOnError:!0}),i=sW.od.DeepLinkResolved;break}catch(e){i=sW.od.DeepLinkErrored,t=`Unable to open file${e?.message?`: ${e.message}`:""}`;break}try{r=this.container.git.getRevisionUri(m,d,u??o.uri.fsPath)}catch{}if(null==r){i=sW.od.DeepLinkErrored,t="Unable to get revision uri.";break}try{await (0,sB.Av)(r,{preview:!1,selection:e}),i=sW.od.DeepLinkResolved;break}catch{i=sW.od.DeepLinkErrored,t="Unable to open file.";break}}default:i=sW.od.DeepLinkErrored,t="Unknown state."}}}async copyDeepLinkUrl(e,t,i,r){let s=await ("string"==typeof e?null!=t?this.generateDeepLinkUrl(e,t,i,r):this.generateDeepLinkUrl(e):this.generateDeepLinkUrl(e,t));await C.env.clipboard.writeText(s.toString())}async copyFileDeepLinkUrl(e,t,i,r,s){let o=await this.generateFileDeepLinkUr(e,t,i,r,s);await C.env.clipboard.writeText(o.toString())}async generateDeepLinkUrl(e,t,i,r){let s,o,n,a;let l=A.i.get("deepLinks.schemeOverride"),h=l?!0===l?C.env.uriScheme:l:"vscode",c="";if("dev"===this.container.env?c="dev.":"staging"===this.container.env&&(c="staging."),null==t&&"string"==typeof e){let t=new URL(`https://${c}gitkraken.dev/link/workspaces/${e}`);return t.searchParams.set("origin","gitlens"),t}let u="string"!=typeof e?e.repoPath:e,d=await this.container.git.getUniqueRepositoryId(u)??"-";if("string"!=typeof e)switch(e.refType){case"branch":s=sW.In.Branch,o=e.remote?(0,x.ak)(e.name):e.name;break;case"revision":s=sW.In.Commit,o=e.ref;break;case"tag":s=sW.In.Tag,o=e.name}null!=i&&null!=r&&(s=sW.In.Comparison,o=i.label??i.ref,n=r.label??r.ref),a=s===sW.In.Comparison?`/${s}/${n}...${o}`:null!=s&&s!==sW.In.Repository?`/${s}/${o}`:"";let p=new URL(`${h}://${this.container.context.extension.id}/link/${sW.In.Repository}/${d}${a}`);null!=t&&p.searchParams.set("url",t);let g=new URL(`https://${c}gitkraken.dev/link/${encodeURIComponent(Buffer.from(p.href).toString("base64"))}`);return g.searchParams.set("origin","gitlens"),g}async generateFileDeepLinkUr(e,t,i,r,s){let o=sW.In.File,n=A.i.get("deepLinks.schemeOverride"),a=n?!0===n?C.env.uriScheme:n:"vscode",l="";"dev"===this.container.env?l="dev.":"staging"===this.container.env&&(l="staging.");let h=await this.container.git.getUniqueRepositoryId(e)??"-",c="";null!=r&&(1===r.length?c=`${r[0]}`:2===r.length&&(r[0]===r[1]?c=`${r[0]}`:r[0]<r[1]&&(c=`${r[0]}-${r[1]}`)));let u=new URL(`${a}://${this.container.context.extension.id}/link/${sW.In.Repository}/${h}/${o}/${t}`);if(u.searchParams.set("url",i),""!==c&&u.searchParams.set("lines",c),null!=s)switch(s.refType){case"branch":case"tag":u.searchParams.set("ref",s.name);break;case"revision":u.searchParams.set("ref",s.ref)}let d=new URL(`https://${l}gitkraken.dev/link/${encodeURIComponent(Buffer.from(u.href).toString("base64"))}`);return d.searchParams.set("origin","gitlens"),d}};var sN=Object.defineProperty,sq=Object.getOwnPropertyDescriptor;let UriService=class UriService{constructor(e){this.container=e,this._disposable=C.window.registerUriHandler(this)}_disposable;_onDidReceiveAuthenticationUri=new C.EventEmitter;get onDidReceiveAuthenticationUri(){return this._onDidReceiveAuthenticationUri.event}_onDidReceiveUri=new C.EventEmitter;get onDidReceiveUri(){return this._onDidReceiveUri.event}dispose(){this._disposable.dispose()}handleUri(e){let[,t]=e.path.split("/");if(t===rl){this._onDidReceiveAuthenticationUri.fire(e);return}this._onDidReceiveUri.fire(e)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?sq(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sN(t,i,o)})([(0,eW.Yz)({args:{0:e=>e.with({query:""}).toString(!0)}})],UriService.prototype,"handleUri",1);var sL=i(8924),sM=Object.defineProperty,sQ=Object.getOwnPropertyDescriptor;let RepositoriesSubscribeableNode=class RepositoriesSubscribeableNode extends sL.q{splatted=!0;constructor(e){super("repositories",tm.oP,e)}async getSplattedChild(){return null==this.children&&await this.getChildren(),this.children?.length===1?this.children[0]:void 0}etag(){return(0,tX.yo)(this.view.container.git.etag,this.view.container.subscription.etag)}subscribe(){return C.Disposable.from((0,iT.gd)(this.view.container.git.onDidChangeRepositories,this.onRepositoriesChanged,this),(0,iT.gd)(this.view.container.subscription.onDidChange,this.onSubscriptionChanged,this))}onRepositoriesChanged(e){this.triggerChange(!0)}onSubscriptionChanged(e){e.current.plan!==e.previous.plan&&this.triggerChange(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?sQ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sM(t,i,o)})([(0,eW.u_)()],RepositoriesSubscribeableNode.prototype,"subscribe",1);var sG=i(7412),sY=i(3560),sV=i(9620),sz=i(3876),sH=i(23),sj=i(9160);let BranchTrackingStatusFilesNode=class BranchTrackingStatusFilesNode extends sn.sl{constructor(e,t,i,r,s){super("tracking-status-files",tm.wv.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.status=r,this.direction=s,this.updateContext({branch:i,branchStatus:r,branchStatusUpstreamType:s}),this._uniqueId=(0,sn.QP)(this.type,this.context)}get ref1(){return this.branch.ref}get ref2(){return this.status.upstream}get repoPath(){return this.status.repoPath}async getFilesComparison(){let e=await this.getGroupedFiles();return{files:[...(0,eN.kH)(e,([,e])=>e[e.length-1])],repoPath:this.repoPath,ref1:this.ref1,ref2:this.ref2,title:"ahead"===this.direction?`Changes to push to ${this.ref2}`:`Changes to pull from ${this.ref2}`}}async getGroupedFiles(){let e=await this.view.container.git.getLog(this.repoPath,{limit:0,ref:(0,F._u)(this.ref2,this.ref1,"behind"===this.direction?"...":"..")});if(null==e)return new Map;await Promise.allSettled((0,eN.kH)((0,eN.IF)(e.commits.values(),e=>null==e.files),e=>e.ensureFullDetails()));let t=[...(0,eN.sX)(e.commits.values(),e=>e.files?.map(t=>({...t,commit:e}))??[])];return t.sort((e,t)=>t.commit.date.getTime()-e.commit.date.getTime()),(0,eN.ms)(t,e=>e.path)}async getChildren(){let e=await this.getGroupedFiles(),t=[...(0,eN.kH)(e.values(),e=>new sj.k(this.view,this,e[e.length-1],this.repoPath,e.map(e=>e.commit),this.direction))];if("list"!==this.view.config.files.layout){let e=(0,N.IJ)(t,e=>e.uri.relativePath.split("/"),(...e)=>(0,q.ay)((0,q.En)(...e)),this.view.config.files.compact);t=new sH.s(this.view,this,e,this.repoPath,"",void 0,!1).getChildren()}else t.sort((e,t)=>e.priority-t.priority||(0,L.sd)(e.label,t.label));return t}async getTreeItem(){let e=await this.view.container.git.getChangedFilesCount(this.repoPath,"behind"===this.direction?`${this.ref1}...${this.ref2}`:`${this.ref2}...`),t=e?.changedFiles??0,i=`${(0,L.u)("file",t)} changed`,r=new C.TreeItem(i,C.TreeItemCollapsibleState.Collapsed);return r.id=this.id,r.contextValue=sn.UZ.BranchStatusFiles,r}};var sJ=i(3304),sK=i(4924),sZ=i(9940),sX=Object.defineProperty,s0=Object.getOwnPropertyDescriptor,s1=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?s0(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sX(t,i,o),o};let BranchTrackingStatusNode=class BranchTrackingStatusNode extends sn.sl{constructor(e,t,i,r,s,o=!1,n){super("tracking-status",tm.wv.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.status=r,this.upstreamType=s,this.root=o,this.options=n,this.updateContext({branch:i,branchStatus:r,branchStatusUpstreamType:s,root:o}),this._uniqueId=(0,sn.QP)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}get repoPath(){return this.uri.repoPath}async getFilesComparison(){if("ahead"===this.upstreamType){let e=new BranchTrackingStatusFilesNode(this.view,this,this.branch,this.status,this.upstreamType),t=await e?.getFilesComparison();if(null==t)return;let i=this.options?.unpublishedCommits!=null?(0,eN.GS)(this.options.unpublishedCommits):void 0;if(null==i)return;let r=await this.view.container.git.resolveReference(this.repoPath,`${i}^`);return{...t,ref1:r,ref2:t.ref1,title:`Changes to push to ${t.ref2}`}}let e=(await this.getChildren()).find(e=>e.is("tracking-status-files"));return e?.getFilesComparison()}async getChildren(){let e;if("same"===this.upstreamType||"missing"===this.upstreamType||"none"===this.upstreamType)return[];let t=await this.getLog();if(null==t)return[];if("ahead"===this.upstreamType){let i=(e=[...t.commits.values()])[e.length-1];if(null==await i.getPreviousSha()){let t=await this.view.container.git.getLog(this.uri.repoPath,{limit:2,ref:i.sha});null!=t&&(e[e.length-1]=(0,eN.KY)(t.commits.values()))}}else e=t.commits.values();let i=[],r=!0;return!this.options?.showAheadCommits&&"ahead"===this.upstreamType&&this.status.upstream&&this.status.state.ahead>0?(r=!1,i.push(...await new BranchTrackingStatusFilesNode(this.view,this,this.branch,this.status,this.upstreamType).getChildren())):(i.push(...(0,sZ.c)((0,eN.kH)(e,e=>new sJ.s(this.view,this,e,"ahead"===this.upstreamType,this.branch)),this,1)),t.hasMore&&i.push(new sK.Ck(this.view,this,i[i.length-1]))),r&&i.unshift(new BranchTrackingStatusFilesNode(this.view,this,this.branch,this.status,this.upstreamType)),i}async getTreeItem(){let e,t,i,r,s,o,n=0;if("missing"!==this.upstreamType&&"none"!==this.upstreamType){let e=this.view.container.git.getRepository(this.repoPath);n=await e?.getLastFetched()??0}switch(this.upstreamType){case"ahead":{let n=await this.branch.getRemote();e=`Changes to push to ${n?.name??(0,x.IB)(this.status.upstream)}${n?.provider?.name?` on ${n?.provider.name}`:""}`,t=(0,L.u)("commit",this.status.state.ahead),o=`Outgoing changes to push

Branch $(git-branch) ${this.branch.name} is ${(0,L.u)("commit",this.status.state.ahead,{infix:"$(arrow-up) "})} ahead of $(git-branch) ${this.status.upstream}${n?.provider?.name?` on ${n.provider.name}`:""}`,i=C.TreeItemCollapsibleState.Collapsed,r=this.root?sn.UZ.StatusAheadOfUpstream:sn.UZ.BranchStatusAheadOfUpstream,s=new C.ThemeIcon("cloud-upload",new C.ThemeColor("gitlens.unpublishedChangesIconColor"));break}case"behind":{let n=await this.branch.getRemote();e=`Changes to pull from ${n?.name??(0,x.IB)(this.status.upstream)}${n?.provider?.name?` on ${n.provider.name}`:""}`,t=(0,L.u)("commit",this.status.state.behind),o=`Incoming changes to pull

Branch $(git-branch) ${this.branch.name} is ${(0,L.u)("commit",this.status.state.behind,{infix:"$(arrow-down) "})} behind $(git-branch) ${this.status.upstream}${n?.provider?.name?` on ${n.provider.name}`:""}`,i=C.TreeItemCollapsibleState.Collapsed,r=this.root?sn.UZ.StatusBehindUpstream:sn.UZ.BranchStatusBehindUpstream,s=new C.ThemeIcon("cloud-download",new C.ThemeColor("gitlens.unpulledChangesIconColor"));break}case"same":{let a=await this.branch.getRemote();e=`Up to date with ${a?.name??(0,x.IB)(this.status.upstream)}${a?.provider?.name?` on ${a.provider.name}`:""}`,t=n?`Last fetched ${(0,ey.Yn)(new Date(n))}`:"",o=`Branch $(git-branch) ${this.branch.name} is up to date with $(git-branch) ${this.status.upstream}${a?.provider?.name?` on ${a.provider.name}`:""}`,i=C.TreeItemCollapsibleState.None,r=this.root?sn.UZ.StatusSameAsUpstream:sn.UZ.BranchStatusSameAsUpstream,s=new C.ThemeIcon("cloud");break}case"missing":{let n=await this.branch.getRemote();e=`Missing upstream branch${n?.provider?.name?` on ${n.provider.name}`:""}`,t=this.status.upstream,o=`Branch $(git-branch) ${this.branch.name} is missing upstream $(git-branch) ${this.status.upstream}${n?.provider?.name?` on ${n.provider.name}`:""}`,i=C.TreeItemCollapsibleState.None,r=this.root?sn.UZ.StatusMissingUpstream:sn.UZ.BranchStatusSameAsUpstream,s=new C.ThemeIcon("warning",new C.ThemeColor("gitlens.decorations.branchMissingUpstreamForegroundColor"));break}case"none":{let t=await this.view.container.git.getRemotesWithProviders(this.branch.repoPath),n=(0,tw.U$)(t),a=n?.length?n[0].name:void 0;e=`Publish ${this.branch.name} to ${a??"a remote"}`,o=`Branch $(git-branch) ${this.branch.name} hasn't been published to ${a??"a remote"}`,i=C.TreeItemCollapsibleState.None,r=this.root?sn.UZ.StatusNoUpstream:sn.UZ.BranchStatusNoUpstream,s=new C.ThemeIcon("cloud-upload",t.length?new C.ThemeColor("gitlens.unpublishedChangesIconColor"):void 0)}}let a=new C.TreeItem(e,i);a.id=this.id,a.contextValue=r,a.description=t,n&&(o+=`

Last fetched ${(0,ey.Yn)(new Date(n))}`),a.iconPath=s;let l=new C.MarkdownString(o,!0);return l.supportHtml=!0,l.isTrusted=!0,a.tooltip=l,a}refresh(e){e&&(this._log=void 0)}_log;async getLog(){if("same"!==this.upstreamType&&"none"!==this.upstreamType){if(null==this._log){let e="ahead"===this.upstreamType?(0,F._u)(this.status.upstream,this.status.ref):(0,F._u)(this.status.ref,this.status.upstream);this._log=await this.view.container.git.getLog(this.uri.repoPath,{limit:this.limit??this.view.config.defaultItemLimit,ref:e})}return this._log}}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await C.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());null!=t&&t.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}};s1([(0,tZ.I)(),(0,eW.u_)()],BranchTrackingStatusNode.prototype,"refresh",1),s1([(0,tZ.I)()],BranchTrackingStatusNode.prototype,"loadMore",1);var s2=i(2056),s4=i(7464),s6=i(1452),s3=i(1916),s8=i(9708),s7=Object.defineProperty,s5=Object.getOwnPropertyDescriptor,s9=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?s5(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&s7(t,i,o),o};let CompareBranchNode=class CompareBranchNode extends sL.q{constructor(e,t,i,r,s,o=!1){super("compare-branch",e,t,i),this.parent=i,this.branch=r,this.showComparison=s,this.root=o,this.updateContext({branch:r,root:o,storedComparisonId:this.getStorageId()}),this._uniqueId=(0,sn.QP)(this.type,this.context),this.loadCompareWith()}_compareWith;etag(){return 0}get ahead(){return{ref1:this._compareWith?.ref||"HEAD",ref2:this.branch.ref}}get behind(){return{ref1:this.branch.ref,ref2:this._compareWith?.ref||"HEAD"}}_isFiltered;get filterByAuthors(){let e=this.getState("filterCommits"),t=!!e?.length;return null!=this._isFiltered&&this._isFiltered!==t&&this.updateContext({comparisonFiltered:t}),this._isFiltered=t,e}get repoPath(){return this.branch.repoPath}subscribe(){return(0,iT.gd)(this.view.onDidChangeNodesCheckedState,this.onNodesCheckedStateChanged,this)}onNodesCheckedStateChanged(e){let t=(0,s6.O0)(this.getStorageId());e.items.some(([e])=>e.id?.startsWith(t))&&this.storeCompareWith(!1)}async getChildren(){if(null==this._compareWith)return[];if(null==this.children){let e=this.ahead,t=this.behind,i=await this.view.container.git.getAheadBehindCommitCount(this.branch.repoPath,[(0,F._u)(t.ref1,t.ref2,"...")],{authors:this.filterByAuthors}),r=await this.view.container.git.getMergeBase(this.repoPath,t.ref1,t.ref2,{forkPoint:!0})??await this.view.container.git.getMergeBase(this.repoPath,t.ref1,t.ref2),s=[new s3.g(this.view,this,this.repoPath,"Behind",{query:this.getCommitsQuery((0,F._u)(t.ref1,t.ref2,"..")),comparison:t,direction:"behind",files:{ref1:this.compareWithWorkingTree?"":r??t.ref1,ref2:t.ref2,query:this.getBehindFilesQuery.bind(this)}},{description:(0,L.u)("commit",i?.behind??0),expand:!1}),new s3.g(this.view,this,this.repoPath,"Ahead",{query:this.getCommitsQuery((0,F._u)(e.ref1,this.compareWithWorkingTree?"":e.ref2,"..")),comparison:e,direction:"ahead",files:{ref1:r??e.ref1,ref2:this.compareWithWorkingTree?"":e.ref2,query:this.getAheadFilesQuery.bind(this)}},{description:(0,L.u)("commit",i?.ahead??0),expand:!1})];this.filterByAuthors?.length||s.push(new s8.m(this.view,this,this.repoPath,this._compareWith.ref||"HEAD",this.compareWithWorkingTree?"":this.branch.ref,this.getFilesQuery.bind(this),void 0,{expand:!1})),this.children=s}return this.children}getTreeItem(){let e,t,i;null==this._compareWith?(t=`Compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with <branch, tag, or ref>`,e=C.TreeItemCollapsibleState.None,i=`Click to compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with a branch, tag, or ref`):(t=`Compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with ${(0,F.c5)(this._compareWith.ref,{strings:{working:"Working Tree"}})}`,e=C.TreeItemCollapsibleState.Collapsed);let r=new C.TreeItem(t,e);return r.id=this.id,r.contextValue=`${sn.UZ.CompareBranch}${this.branch.current?"+current":""}+${this.comparisonType}${null==this._compareWith?"":"+comparing"}${this.root?"+root":""}${this.filterByAuthors?.length?"+filtered":""}`,null==this._compareWith&&(r.command={title:`Compare ${this.branch.name}${this.compareWithWorkingTree?" (working)":""} with${_.or.Ellipsis}`,command:"gitlens.views.editNode",arguments:[this]}),r.iconPath=new C.ThemeIcon("git-compare"),r.tooltip=i,r}async clear(){this._compareWith=void 0,await this.updateCompareWith(void 0),this.children=void 0,this.view.triggerNodeChange(this)}clearReviewed(){this.storeCompareWith(!0),this.triggerChange()}async edit(){await this.compareWith()}refresh(e){super.refresh(e),this.loadCompareWith()}async setComparisonType(e){null!=this._compareWith?await this.updateCompareWith({...this._compareWith,type:e,checkedFiles:void 0}):this.showComparison=e,this.children=void 0,this.view.triggerNodeChange(this)}get comparisonType(){return this._compareWith?.type??this.showComparison}get compareWithWorkingTree(){return"working"===this.comparisonType}async compareWith(){let e=await (0,s4.m)(this.branch.repoPath,`Compare ${this.branch.name}${this.compareWithWorkingTree?" (working)":""} with`,"Choose a reference (branch, tag, etc) to compare with",{allowRevisions:!0,picked:this.branch.ref,sort:{branches:{current:!0},tags:{}}});null==e||e instanceof s2.Ml||(await this.updateCompareWith({ref:e.ref,notation:void 0,type:this.comparisonType}),this.children=void 0,this.view.triggerNodeChange(this))}async getAheadFilesQuery(){let e=(0,F._u)(this._compareWith?.ref||"HEAD",this.branch.ref||"HEAD","..."),[t,i,r,s]=await Promise.allSettled([this.view.container.git.getDiffStatus(this.repoPath,e),this.compareWithWorkingTree?this.view.container.git.getDiffStatus(this.repoPath,"HEAD"):void 0,this.view.container.git.getChangedFilesCount(this.repoPath,e),this.compareWithWorkingTree?this.view.container.git.getChangedFilesCount(this.repoPath,"HEAD"):void 0]),o=(0,t0.Cv)(t)??[],n=(0,t0.Cv)(r);if(this.compareWithWorkingTree){let e=(0,t0.Cv)(i);if(null!=e){if(0===o.length)o=e;else for(let t of e){let e=o.findIndex(e=>e.path===t.path);-1!==e?o.splice(e,1,t):o.push(t)}}let t=(0,t0.Cv)(s);null!=t&&(n=null==n?t:{additions:n.additions+t.additions,deletions:n.deletions+t.deletions,changedFiles:o.length,approximated:!0})}return{label:`${(0,L.u)("file",o.length,{zero:"No"})} changed`,files:o,stats:n}}async getBehindFilesQuery(){let e=(0,F._u)(this.branch.ref,this._compareWith?.ref||"HEAD","..."),[t,i]=await Promise.allSettled([this.view.container.git.getDiffStatus(this.repoPath,e),this.view.container.git.getChangedFilesCount(this.repoPath,e)]),r=(0,t0.Cv)(t)??[];return{label:`${(0,L.u)("file",r.length,{zero:"No"})} changed`,files:r,stats:(0,t0.Cv)(i)}}getCommitsQuery(e){let t=this.repoPath;return async i=>{let r=await this.view.container.git.getLog(t,{limit:i,ref:e,authors:this.filterByAuthors}),s={log:r,hasMore:r?.hasMore??!0};return s.hasMore&&(s.more=async e=>{s.log=await s.log?.more?.(e)??s.log,s.hasMore=s.log?.hasMore??!0}),s}}async getFilesQuery(){let e;e=this._compareWith?.ref?this.compareWithWorkingTree?this._compareWith.ref:`${this._compareWith.ref}..${this.branch.ref}`:this.branch.ref;let[t,i]=await Promise.allSettled([this.view.container.git.getDiffStatus(this.repoPath,e),this.view.container.git.getChangedFilesCount(this.repoPath,e)]),r=(0,t0.Cv)(t)??[];return{label:`${(0,L.u)("file",r.length,{zero:"No"})} changed`,files:r,stats:(0,t0.Cv)(i)}}getStorageId(){return`${this.branch.id}${this.branch.current?"+current":""}`}loadCompareWith(){let e=this.view.container.storage.getWorkspace("branch:comparisons"),t=this.getStorageId(),i=e?.[t];null!=i&&"string"==typeof i?this._compareWith={ref:i,notation:void 0,type:this.showComparison}:(this._compareWith=i,null!=i&&(0,s6.sP)(this.view,i.checkedFiles))}async storeCompareWith(e){let t=this.getStorageId();e&&(0,s6.SY)(this.view,t);let i=this.view.container.storage.getWorkspace("branch:comparisons");if(null==i){if(null==this._compareWith)return;i=Object.create(null)}if(null!=this._compareWith){let e=(0,s6.Mp)(this.view,t);this._compareWith.checkedFiles=e,i[t]={...this._compareWith}}else{if(null==i[t])return;let{[t]:e,...r}=i;i=r}await this.view.container.storage.storeWorkspace("branch:comparisons",i)}async updateCompareWith(e){this._compareWith=e,await this.storeCompareWith(!0)}};s9([(0,eW.Yz)()],CompareBranchNode.prototype,"clear",1),s9([(0,eW.Yz)()],CompareBranchNode.prototype,"clearReviewed",1),s9([(0,eW.Yz)()],CompareBranchNode.prototype,"edit",1),s9([(0,eW.u_)()],CompareBranchNode.prototype,"refresh",1),s9([(0,eW.Yz)()],CompareBranchNode.prototype,"setComparisonType",1);var oe=i(3028),ot=i(7248),oi=i(8708),or=i(5412);let MergeConflictFileNode=class MergeConflictFileNode extends ot.U{constructor(e,t,i,r){super("conflict-file",tm.wv.fromFile(i,r.repoPath,r.HEAD.ref),e,t,i),this.status=r}toClipboard(){return this.fileName}get baseUri(){return tm.wv.fromFile(this.file,this.status.repoPath,this.status.mergeBase??"HEAD")}get fileName(){return this.file.path}getChildren(){return[new oi.S(this.view,this,this.status,this.file),new or.S(this.view,this,this.status,this.file)]}getTreeItem(){let e=new C.TreeItem(this.label,C.TreeItemCollapsibleState.Collapsed);e.description=this.description,e.contextValue=`${sn.UZ.File}+conflicted`;let t=oe.o.fromTemplate(`\${file}\${ \u2022 changesDetail}\${\\\\
directory}\${

status}\${ (originalPath)} in Index (staged)`,this.file),i=new C.MarkdownString(t,!0);return i.isTrusted=!0,i.supportHtml=!0,e.tooltip=i,e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),e.iconPath=C.ThemeIcon.File,e.command=this.getCommand(),this._label=void 0,this._description=void 0,e}_description;get description(){return null==this._description&&(this._description=oe.o.fromTemplate(this.view.config.formats.files.description,this.file,{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return null==this._folderName&&(this._folderName=(0,q.ye)(this.uri.relativePath)),this._folderName}_label;get label(){return null==this._label&&(this._label=oe.o.fromTemplate(this.view.config.formats.files.label,this.file,{relativePath:this.relativePath})),this._label}get priority(){return 0}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getCommand(){return(0,iX.qx)("vscode.open","Open File",this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),{preserveFocus:!0,preview:!0})}};let MergeConflictFilesNode=class MergeConflictFilesNode extends sn.sl{constructor(e,t,i,r){super("conflict-files",tm.wv.fromRepoPath(i.repoPath),e,t),this.parent=t,this.status=i,this.conflicts=r}get repoPath(){return this.uri.repoPath}getChildren(){let e=this.conflicts.map(e=>new MergeConflictFileNode(this.view,this,e,this.status));if("list"!==this.view.config.files.layout){let t=(0,N.IJ)(e,e=>e.uri.relativePath.split("/"),(...e)=>(0,q.ay)((0,q.En)(...e)),this.view.config.files.compact);e=new sH.s(this.view,this,t,this.repoPath,"",void 0).getChildren()}else e.sort((e,t)=>(0,L.sd)(e.label,t.label));return e}getTreeItem(){return new C.TreeItem((0,L.u)("conflict",this.conflicts.length),C.TreeItemCollapsibleState.Expanded)}};let MergeStatusNode=class MergeStatusNode extends sn.sl{constructor(e,t,i,r,s,o){super("merge-status",tm.wv.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.mergeStatus=r,this.status=s,this.root=o,this.updateContext({branch:i,root:o,status:"merging"}),this._uniqueId=(0,sn.QP)(this.type,this.context)}get repoPath(){return this.uri.repoPath}getChildren(){return this.status?.hasConflicts?[new MergeConflictFilesNode(this.view,this,this.mergeStatus,this.status.conflicts)]:[]}getTreeItem(){let e=this.status?.hasConflicts===!0,t=new C.TreeItem(`${e?"Resolve conflicts before merging":"Merging"} ${null!=this.mergeStatus.incoming?`${(0,F.u)(this.mergeStatus.incoming,{expand:!1,icon:!1})} `:""}into ${(0,F.u)(this.mergeStatus.current,{expand:!1,icon:!1})}`,e?C.TreeItemCollapsibleState.Expanded:C.TreeItemCollapsibleState.None);t.id=this.id,t.contextValue=sn.UZ.Merge,t.description=e?(0,L.u)("conflict",this.status.conflicts.length):void 0,t.iconPath=e?new C.ThemeIcon("warning",new C.ThemeColor("gitlens.decorations.statusMergingOrRebasingConflictForegroundColor")):new C.ThemeIcon("warning",new C.ThemeColor("gitlens.decorations.statusMergingOrRebasingForegroundColor"));let i=new C.MarkdownString(`Merging ${null!=this.mergeStatus.incoming?(0,F.u)(this.mergeStatus.incoming,{label:!1}):""}into ${(0,F.u)(this.mergeStatus.current,{label:!1})}${e?`

Resolve ${(0,L.u)("conflict",this.status.conflicts.length)} before continuing`:""}`,!0);return i.supportHtml=!0,i.isTrusted=!0,t.tooltip=i,t.resourceUri=C.Uri.parse(`gitlens-view://status/merging${e?"/conflicts":""}`),t}};let RebaseCommitNode=class RebaseCommitNode extends sJ.s{async getTreeItem(){let e=new C.TreeItem(`Paused at commit ${this.commit.shortSha}`,this._options.expand?C.TreeItemCollapsibleState.Expanded:C.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=`${sn.UZ.Commit}+rebase`,e.description=i_.E.fromTemplate("${message}",this.commit,{messageTruncateAtNewLine:!0}),e.iconPath=new C.ThemeIcon("debug-pause"),e}getTooltipTemplate(){return`Rebase paused at ${super.getTooltipTemplate()}`}};let RebaseStatusNode=class RebaseStatusNode extends sn.sl{constructor(e,t,i,r,s,o){super("rebase-status",tm.wv.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.rebaseStatus=r,this.status=s,this.root=o,this.updateContext({branch:i,root:o,status:"rebasing"}),this._uniqueId=(0,sn.QP)(this.type,this.context)}get repoPath(){return this.uri.repoPath}async getChildren(){let e=[],t=this.rebaseStatus.steps.current.commit;if(null!=t){let i=null!=t?await this.view.container.git.getCommit(this.rebaseStatus.repoPath,t.ref):void 0;null!=i&&e.push(new RebaseCommitNode(this.view,this,i))}return this.status?.hasConflicts&&e.push(new MergeConflictFilesNode(this.view,this,this.rebaseStatus,this.status.conflicts)),e}getTreeItem(){let e=this.rebaseStatus.steps.total>0,t=e&&null!=this.rebaseStatus.steps.current.commit,i=this.status?.hasConflicts===!0,r=new C.TreeItem(`${i?"Resolve conflicts to continue rebasing":e?"Rebasing":"Pending rebase of"} ${null!=this.rebaseStatus.incoming?(0,F.u)(this.rebaseStatus.incoming,{expand:!1,icon:!1}):""} onto ${(0,F.u)(this.rebaseStatus.current??this.rebaseStatus.onto,{expand:!1,icon:!1})}${e?` (${this.rebaseStatus.steps.current.number}/${this.rebaseStatus.steps.total})`:""}`,t?C.TreeItemCollapsibleState.Expanded:C.TreeItemCollapsibleState.None);r.id=this.id,r.contextValue=sn.UZ.Rebase,r.description=i?(0,L.u)("conflict",this.status.conflicts.length):void 0,r.iconPath=i?new C.ThemeIcon("warning",new C.ThemeColor("gitlens.decorations.statusMergingOrRebasingConflictForegroundColor")):new C.ThemeIcon("warning",new C.ThemeColor("gitlens.decorations.statusMergingOrRebasingForegroundColor"));let s=new C.MarkdownString(`${e?"Rebasing":"Pending rebase of"} ${null!=this.rebaseStatus.incoming?(0,F.u)(this.rebaseStatus.incoming,{label:!1}):""} onto ${(0,F.u)(this.rebaseStatus.current??this.rebaseStatus.onto,{label:!1})}${e?`

Paused at step ${this.rebaseStatus.steps.current.number} of ${this.rebaseStatus.steps.total}${i?`\\
Resolve ${(0,L.u)("conflict",this.status.conflicts.length)} before continuing`:""}`:""}`,!0);return s.supportHtml=!0,s.isTrusted=!0,r.tooltip=s,r.resourceUri=C.Uri.parse(`gitlens-view://status/rebasing${i?"/conflicts":""}`),r}async openEditor(){let e=C.Uri.joinPath(this.uri,".git","rebase-merge","git-rebase-todo");await (0,iX.CA)("vscode.openWith",e,"gitlens.rebase",{preview:!1})}};var os=Object.defineProperty,oo=Object.getOwnPropertyDescriptor,on=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?oo(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&os(t,i,o),o};let BranchNode=class BranchNode extends sz.e{constructor(e,t,i,r,s,o,n){super("branch",e,t,i),this.parent=i,this.repo=r,this.branch=s,this.root=o,this.updateContext({repository:r,branch:s,root:o}),this._uniqueId=(0,sn.QP)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this),this.options={expanded:!1,limitCommits:!1,showAsCommits:!1,showComparison:!1,showCurrent:!this.root,showStatus:!0,showTracking:!this.root,...n}}limit;options;splatted=!0;dispose(){super.dispose(),this.children=void 0}get id(){return this._uniqueId}toClipboard(){return this.branch.name}compacted=!1;get current(){return this.branch.current}get label(){if(this.options.showAsCommits)return"Commits";let e=this.branch.getNameWithoutRemote();return`${this.view.config.branches?.layout!=="tree"||this.compacted||this.root||this.current||this.branch.detached||this.branch.starred?e:this.branch.getBasename()}${this.branch.rebasing?" (Rebasing)":""}`}get ref(){return this.branch}get treeHierarchy(){return this.root||this.current||this.branch.detached||this.branch.starred?[this.branch.name]:this.branch.getNameWithoutRemote().split("/")}_children;get children(){return this._children}set children(e){this._children!==e&&((0,sV.YT)(this._children,e),this._children=e)}async getChildren(){if(null==this.children){let e,t;let i=this.branch,r=0;if(this.view.config.pullRequests.enabled&&this.view.config.pullRequests.showForBranches&&(null!=i.upstream||i.remote)&&(0,iN.wp)("gitlens:hasConnectedRemotes")&&void 0===(t=this.getState("pullRequest"))&&void 0===this.getState("pendingPullRequest")){e=(0,t0.Qv)();let t=this.getAssociatedPullRequest(i,this.root?{include:["opened","merged"]}:void 0);queueMicrotask(async()=>{await e?.promise;let s=!1,o=setTimeout(()=>{s=!0,this.view.triggerNodeChange(this)},250),n=await t;clearTimeout(o),null!=n&&null!=this.children&&this.children.splice(r,0,new sa.c(this.view,this,n,i)),(s||null!=n)&&this.view.triggerNodeChange(this.root?this.parent??this:this)})}let[s,o,n,a,l,h]=await Promise.allSettled([this.getLog(),this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath,i.name),this.options.showStatus&&i.current?this.view.container.git.getStatusForRepo(this.uri.repoPath):void 0,this.options.showStatus&&i.current?this.view.container.git.getMergeStatus(this.uri.repoPath):void 0,this.options.showStatus?this.view.container.git.getRebaseStatus(this.uri.repoPath):void 0,i.remote?void 0:this.view.container.git.getBranchAheadRange(i).then(e=>e?this.view.container.git.getLogRefsOnly(this.uri.repoPath,{limit:0,ref:e,merges:this.options.showMergeCommits}):void 0)]),c=(0,t0.Cv)(s);if(null==c)return[new sK._Y(this.view,this,"No commits could be found.")];let u=[],d=(0,t0.Cv)(n),p=(0,t0.Cv)(a),g=(0,t0.Cv)(l),m=(0,t0.Cv)(h);if(null!=t&&u.push(new sa.c(this.view,this,t,i)),this.options.showStatus&&null!=p)u.push(new MergeStatusNode(this.view,this,i,p,d??await this.view.container.git.getStatusForRepo(this.uri.repoPath),this.root));else if(this.options.showStatus&&null!=g&&(i.current||i.name===g.incoming.name))u.push(new RebaseStatusNode(this.view,this,i,g,d??await this.view.container.git.getStatusForRepo(this.uri.repoPath),this.root));else if(this.options.showTracking){let e={ref:i.ref,repoPath:i.repoPath,state:i.state,upstream:i.upstream?.name};null!=i.upstream?this.root&&i.upstream.missing?u.push(new BranchTrackingStatusNode(this.view,this,i,e,"missing",this.root)):!this.root||e.state.behind||e.state.ahead?(e.state.behind&&u.push(new BranchTrackingStatusNode(this.view,this,i,e,"behind",this.root)),e.state.ahead&&u.push(new BranchTrackingStatusNode(this.view,this,i,e,"ahead",this.root,{unpublishedCommits:m}))):u.push(new BranchTrackingStatusNode(this.view,this,i,e,"same",this.root)):u.push(new BranchTrackingStatusNode(this.view,this,i,e,"none",this.root))}r=0,!1!==this.options.showComparison&&"remotes"!==this.view.type&&u.push(new CompareBranchNode(this.uri,this.view,this,i,this.options.showComparison,this.splatted)),0!==u.length&&u.push(new sK._Y(this.view,this,"",_.or.Dash.repeat(2),""));let f=(0,t0.Cv)(o);u.push(...(0,sZ.c)((0,eN.kH)(c.commits.values(),e=>new sJ.s(this.view,this,e,m?.has(e.ref),i,f)),this)),c.hasMore&&u.push(new sK.Ck(this.view,this,u[u.length-1],{getCount:()=>this.view.container.git.getCommitCount(i.repoPath,i.name)})),this.children=u,setTimeout(()=>e?.fulfill(),1)}return this.children}async getTreeItem(){let e,t;this.splatted=!1;let i=`${this.current?"Current branch":"Branch"} $(git-branch) ${this.branch.getNameWithoutRemote()}${this.branch.rebasing?" (Rebasing)":""}`,r=sn.UZ.Branch;this.current&&(r+="+current"),this.branch.remote&&(r+="+remote"),this.branch.starred&&(r+="+starred"),null==this.branch.upstream||this.branch.upstream.missing||(r+="+tracking"),this.options.showAsCommits&&(r+="+commits"),this.repo.closed&&(r+="+closed");let s="";if(!this.branch.remote){if(null!=this.branch.upstream){let o=_.or.Dash,n=await this.branch.getRemote();if(this.branch.upstream.missing)o=_.or.Warning;else if(null!=n){let e,t;for(let{type:i}of n.urls)if("fetch"===i){if(e=!0,t)break}else if("push"===i&&(t=!0,e))break;e&&t?o=_.or.ArrowsRightLeft:t?o=_.or.ArrowRight:e&&(o=_.or.ArrowLeft)}t=this.options.showAsCommits?`${this.branch.getTrackingStatus({suffix:(0,L.eu)(_.or.Dot,1,1)})}${this.branch.getNameWithoutRemote()}${this.branch.rebasing?" (Rebasing)":""}${(0,L.eu)(o,2,2)}${this.branch.upstream.name}`:`${this.branch.getTrackingStatus({suffix:`${_.or.Space} `})}${o}${_.or.Space} ${this.branch.upstream.name}`,i+=` is ${this.branch.getTrackingStatus({empty:this.branch.upstream.missing?`missing upstream $(git-branch) ${this.branch.upstream.name}`:`up to date with $(git-branch)  ${this.branch.upstream.name}${n?.provider?.name?` on ${n.provider.name}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${this.branch.upstream.name}${n?.provider?.name?` on ${n.provider.name}`:""}`})}`,(this.branch.state.ahead||this.branch.state.behind)&&(this.branch.state.ahead&&(r+="+ahead",e=new C.ThemeColor("gitlens.unpublishedChangesIconColor"),s="-green"),this.branch.state.behind&&(r+="+behind",e=new C.ThemeColor("gitlens.unpulledChangesIconColor"),s=this.branch.state.ahead?"-yellow":"-red"))}else{let e=(0,tw.U$)(await this.view.container.git.getRemotesWithProviders(this.branch.repoPath)),t=e?.length?e[0].name:void 0;i+=` hasn't been published to ${t??"a remote"}`}}null!=this.branch.date&&(t=`${t?`${t}${(0,L.eu)(_.or.Dot,2,2)}`:""}${this.branch.formattedDate}`,i+=`

Last commit ${this.branch.formatDateFromNow()} (${this.branch.formatDate(this.view.container.BranchDateFormatting.dateFormat)})`),(i=new C.MarkdownString(i,!0)).supportHtml=!0,i.isTrusted=!0,this.branch.starred&&i.appendMarkdown("\\\n$(star-full) Favorited");let o=this.getState("pendingPullRequest");null!=o&&i.appendMarkdown(`

$(loading~spin) Loading associated pull request${_.or.Ellipsis}`);let n=new C.TreeItem(this.label,this.options.expanded?C.TreeItemCollapsibleState.Expanded:C.TreeItemCollapsibleState.Collapsed);return n.id=this.id,n.contextValue=r,n.description=t,n.iconPath=null!=o?new C.ThemeIcon("loading~spin"):this.options.showAsCommits?new C.ThemeIcon("git-commit",e):{dark:this.view.container.context.asAbsolutePath(`images/dark/icon-branch${s}.svg`),light:this.view.container.context.asAbsolutePath(`images/light/icon-branch${s}.svg`)},n.tooltip=i,n.resourceUri=C.Uri.parse(`gitlens-view://branch/status/${await this.branch.getStatus()}${this.options.showCurrent&&this.current?"/current":""}`),n}async star(){await this.branch.star(),this.view.refresh(!0)}async unstar(){await this.branch.unstar(),this.view.refresh(!0)}refresh(e){super.refresh?.(e),this.children=void 0,e&&(this._log=void 0,this.deleteState())}async getAssociatedPullRequest(e,t){let i=this.getState("pullRequest");if(void 0!==i)return Promise.resolve(i??void 0);let r=this.getState("pendingPullRequest");return null==r?(r=e.getAssociatedPullRequest(t),this.storeState("pendingPullRequest",r),i=await r,this.storeState("pullRequest",i??null),this.deleteState("pendingPullRequest"),i):r}_log;async getLog(){if(null==this._log){let e=this.limit??(this.root&&!this.options.limitCommits?this.view.config.pageItemLimit:this.view.config.defaultItemLimit);0!==e&&this.branch.state.ahead>e&&(e=Math.min(this.branch.state.ahead+1,2*e)),this._log=await this.view.container.git.getLog(this.uri.repoPath,{limit:e,ref:this.ref.ref,authors:this.options?.authors,merges:this.options?.showMergeCommits})}return this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await C.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());null!=t&&t.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.children=void 0,this.triggerChange(!1)))}};on([(0,eW.Yz)()],BranchNode.prototype,"star",1),on([(0,eW.Yz)()],BranchNode.prototype,"unstar",1),on([(0,tZ.I)()],BranchNode.prototype,"loadMore",1);let BranchOrTagFolderNode=class BranchOrTagFolderNode extends sn.sl{constructor(e,t,i,r,s,o,n,a=!1){super("branch-tag-folder",tm.wv.fromRepoPath(s),e,t),this.parent=t,this.folderType=i,this.root=r,this.repoPath=s,this.folderName=o,this.relativePath=n,this._expanded=a,this._uniqueId=(0,sn.QP)(`${this.type}+${i}+${n??o}`,this.context)}get id(){return this._uniqueId}toClipboard(){return this.folderName}getChildren(){if(void 0===this.root.descendants||void 0===this.root.children)return[];let e=[];for(let t of this.root.children.values()){if(void 0===t.value){let i=t.descendants?.some(e=>e.is("branch")&&e.current);e.push(new BranchOrTagFolderNode(this.view,this.folderName?this:this.parent,this.folderType,t,this.repoPath,t.name,t.relativePath,i));continue}t.value.parent=this.folderName?this:this.parent,e.push(t.value)}return e}getTreeItem(){let e=new C.TreeItem(this.label,this._expanded?C.TreeItemCollapsibleState.Expanded:C.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=sn.UZ.Folder,e.iconPath=C.ThemeIcon.Folder,e.tooltip=this.label,e}get label(){return this.folderName}};var oa=Object.defineProperty,ol=Object.getOwnPropertyDescriptor;let BranchesNode=class BranchesNode extends sY.o{constructor(e,t,i,r){super("branches",e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,sn.QP)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){let e=await this.repo.getBranches({filter:e=>!e.remote,sort:{current:!1}});if(0===e.values.length)return[new sK._Y(this.view,this,"No branches could be found.")];let t=e.values.map(e=>new BranchNode(tm.wv.fromRepoPath(this.uri.repoPath,e.ref),this.view,this,this.repo,e,!1,{showComparison:"repositories"===this.view.type?this.view.config.branches.showBranchComparison:this.view.config.showBranchComparison}));if("list"===this.view.config.branches.layout)return t;let i=(0,N.IJ)(t,e=>e.treeHierarchy,(...e)=>e.join("/"),this.view.config.files.compact,e=>(e.compacted=!0,!0)),r=new BranchOrTagFolderNode(this.view,this,"branch",i,this.repo.path,"",void 0);this.children=r.getChildren()}return this.children}async getTreeItem(){let e=new C.TreeItem("Branches",C.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=sn.UZ.Branches,await this.repo.hasRemotes()&&(e.contextValue+="+remotes"),this.repo.closed&&(e.contextValue+="+closed"),e.iconPath=new C.ThemeIcon("git-branch"),e}refresh(){super.refresh(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ol(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&oa(t,i,o)})([(0,eW.u_)()],BranchesNode.prototype,"refresh",1);var oh=i(3172),oc=i(6644),ou=i(1888),od=i(1235),op=i(352),og=i(1148),om=i(5920),of=i(688),ow=i(548),ov=Object.defineProperty,oy=Object.getOwnPropertyDescriptor,ob=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?oy(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ov(t,i,o),o},oC=((b=oC||{})[b.Disallowed=0]="Disallowed",b[b.Allowed=1]="Allowed",b[b.Custom=2]="Custom",b);function oA(e,t,i,r=1){return(0,iX.or)(e,(...e)=>{if(0!==r){let[s,o,...n]=e;if(s instanceof sn.sl&&Array.isArray(o)&&o[0]instanceof sn.sl)return(o=o.filter(e=>e?.constructor===s.constructor),2===r)?t.apply(i,[s,o,...n]):(0,tX.k3)(t,o.map(e=>[e,...n]),i)}return t.apply(i,e)},i)}let ViewCommands=class ViewCommands{constructor(e){this.container=e,oA("gitlens.views.clearComparison",e=>this.clearComparison(e),this),oA("gitlens.views.clearReviewed",e=>this.clearReviewed(e),this),(0,iX.or)(_.eq.ViewsCopy,async(e,t)=>{if(0===(t=Array.isArray(t)?t:null!=e?[e]:[]).length)return;let i=t.map(e=>e.toClipboard?.()).filter(e=>!!e).join("\n");await C.env.clipboard.writeText(i)},this),oA("gitlens.views.collapseNode",()=>(0,iX.CA)("list.collapseAllToFocus"),this),oA("gitlens.views.dismissNode",e=>(0,sn.gb)(e.view)&&e.view.dismissNode(e),this),oA("gitlens.views.editNode",e=>(0,sn.kP)(e)&&e.edit(),this),oA("gitlens.views.expandNode",e=>e.view.reveal(e,{select:!1,focus:!1,expand:3}),this),oA("gitlens.views.loadMoreChildren",e=>e.loadMore(),this),oA("gitlens.views.loadAllChildren",e=>e.loadAll(),this),oA("gitlens.views.refreshNode",(e,t)=>(null==t&&(0,sn.Ap)(e)&&(e.limit=void 0,e.view.resetNodeLastKnownLimit(e)),e.view.refreshNode(e,null==t||t)),this),oA("gitlens.views.setShowRelativeDateMarkersOn",()=>this.setShowRelativeDateMarkers(!0),this),oA("gitlens.views.setShowRelativeDateMarkersOff",()=>this.setShowRelativeDateMarkers(!1),this),oA("gitlens.views.fetch",this.fetch,this),oA("gitlens.views.publishBranch",this.publishBranch,this),oA("gitlens.views.publishRepository",this.publishRepository,this),oA("gitlens.views.pull",this.pull,this),oA("gitlens.views.push",this.push,this),oA("gitlens.views.pushWithForce",e=>this.push(e,!0),this),oA("gitlens.views.closeRepository",this.closeRepository,this),oA("gitlens.views.setAsDefault",this.setAsDefault,this),oA("gitlens.views.unsetAsDefault",this.unsetAsDefault,this),oA("gitlens.views.openInTerminal",this.openInTerminal,this),oA("gitlens.views.openInIntegratedTerminal",this.openInIntegratedTerminal,this),oA("gitlens.views.star",this.star,this),oA("gitlens.views.unstar",this.unstar,this),oA("gitlens.views.browseRepoAtRevision",this.browseRepoAtRevision,this),oA("gitlens.views.browseRepoAtRevisionInNewWindow",e=>this.browseRepoAtRevision(e,{openInNewWindow:!0}),this),oA("gitlens.views.browseRepoBeforeRevision",e=>this.browseRepoAtRevision(e,{before:!0}),this),oA("gitlens.views.browseRepoBeforeRevisionInNewWindow",e=>this.browseRepoAtRevision(e,{before:!0,openInNewWindow:!0}),this),oA("gitlens.views.addAuthors",this.addAuthors,this),oA("gitlens.views.addAuthor",this.addAuthor,this),oA("gitlens.views.openChanges",this.openChanges,this),oA("gitlens.views.openChangesWithWorking",this.openChangesWithWorking,this),oA("gitlens.views.openPreviousChangesWithWorking",this.openPreviousChangesWithWorking,this),oA("gitlens.views.openFile",this.openFile,this),oA("gitlens.views.openFileRevision",this.openRevision,this),oA("gitlens.views.openChangedFiles",this.openFiles,this),oA("gitlens.views.openOnlyChangedFiles",this.openOnlyChangedFiles),oA("gitlens.views.openChangedFileDiffs",(e,t)=>this.openAllChanges(e,t),this),oA("gitlens.views.openChangedFileDiffsWithWorking",(e,t)=>this.openAllChangesWithWorking(e,t),this),oA("gitlens.views.openChangedFileDiffsIndividually",(e,t)=>this.openAllChanges(e,t,!0),this),oA("gitlens.views.openChangedFileDiffsWithWorkingIndividually",(e,t)=>this.openAllChangesWithWorking(e,t,!0),this),oA("gitlens.views.openChangedFileRevisions",this.openRevisions,this),oA("gitlens.views.applyChanges",this.applyChanges,this),oA("gitlens.views.highlightChanges",this.highlightChanges,this),oA("gitlens.views.highlightRevisionChanges",this.highlightRevisionChanges,this),oA("gitlens.views.restore",this.restore,this),oA("gitlens.views.switchToAnotherBranch",this.switch,this),oA("gitlens.views.switchToBranch",this.switchTo,this),oA("gitlens.views.switchToCommit",this.switchTo,this),oA("gitlens.views.switchToTag",this.switchTo,this),oA("gitlens.views.addRemote",this.addRemote,this),oA("gitlens.views.pruneRemote",this.pruneRemote,this),oA("gitlens.views.removeRemote",this.removeRemote,this),oA("gitlens.views.stageDirectory",this.stageDirectory,this),oA("gitlens.views.stageFile",this.stageFile,this),oA("gitlens.views.unstageDirectory",this.unstageDirectory,this),oA("gitlens.views.unstageFile",this.unstageFile,this),oA("gitlens.views.compareAncestryWithWorking",this.compareAncestryWithWorking,this),oA("gitlens.views.compareWithHead",this.compareHeadWith,this),oA("gitlens.views.compareWithUpstream",this.compareWithUpstream,this),oA("gitlens.views.compareWithSelected",this.compareWithSelected,this),oA("gitlens.views.selectForCompare",this.selectForCompare,this),oA("gitlens.views.compareFileWithSelected",this.compareFileWithSelected,this),oA("gitlens.views.selectFileForCompare",this.selectFileForCompare,this),oA("gitlens.views.compareWithWorking",this.compareWorkingWith,this),oA("gitlens.views.setBranchComparisonToWorking",e=>this.setBranchComparison(e,"working"),this),oA("gitlens.views.setBranchComparisonToBranch",e=>this.setBranchComparison(e,"branch"),this),oA("gitlens.views.cherryPick",this.cherryPick,this,2),oA("gitlens.views.title.createBranch",()=>this.createBranch()),oA("gitlens.views.createBranch",this.createBranch,this),oA("gitlens.views.deleteBranch",this.deleteBranch,this),oA("gitlens.views.renameBranch",this.renameBranch,this),oA("gitlens.views.stash.apply",this.applyStash,this),oA("gitlens.views.stash.delete",this.deleteStash,this,2),oA("gitlens.views.stash.rename",this.renameStash,this),oA("gitlens.views.title.createTag",()=>this.createTag()),oA("gitlens.views.createTag",this.createTag,this),oA("gitlens.views.deleteTag",this.deleteTag,this),oA("gitlens.views.mergeBranchInto",this.merge,this),oA("gitlens.views.pushToCommit",this.pushToCommit,this),oA("gitlens.views.rebaseOntoBranch",this.rebase,this),oA("gitlens.views.rebaseOntoUpstream",this.rebaseToRemote,this),oA("gitlens.views.rebaseOntoCommit",this.rebase,this),oA("gitlens.views.resetCommit",this.resetCommit,this),oA("gitlens.views.resetToCommit",this.resetToCommit,this),oA("gitlens.views.resetToTip",this.resetToTip,this),oA("gitlens.views.revert",this.revert,this),oA("gitlens.views.undoCommit",this.undoCommit,this),oA("gitlens.views.createPullRequest",this.createPullRequest,this),oA("gitlens.views.openPullRequest",this.openPullRequest,this),oA("gitlens.views.openPullRequestChanges",this.openPullRequestChanges,this),oA("gitlens.views.openPullRequestComparison",this.openPullRequestComparison,this),oA("gitlens.views.title.createWorktree",()=>this.createWorktree()),oA("gitlens.views.createWorktree",this.createWorktree,this),oA("gitlens.views.deleteWorktree",this.deleteWorktree,this),oA("gitlens.views.openWorktree",this.openWorktree,this),oA("gitlens.views.revealRepositoryInExplorer",this.revealRepositoryInExplorer,this),oA("gitlens.views.revealWorktreeInExplorer",this.revealWorktreeInExplorer,this),oA("gitlens.views.openWorktreeInNewWindow",e=>this.openWorktree(e,{location:"newWindow"}),this),oA("gitlens.views.setResultsCommitsFilterAuthors",e=>this.setResultsCommitsFilter(e,!0),this),oA("gitlens.views.setResultsCommitsFilterOff",e=>this.setResultsCommitsFilter(e,!1),this)}addAuthors(e){return ou.I((0,sn.OS)(e))}addAuthor(e){return e?.is("contributor")?ou.I(e.repoPath,e.contributor.current?void 0:e.contributor):Promise.resolve()}addRemote(e){return od.WQ((0,sn.OS)(e))}applyChanges(e){return e.is("results-file")?sB.yw(e.file,(0,F.op)(e.ref1,e.repoPath),(0,F.op)(e.ref2,e.repoPath)):e instanceof sz.y&&null!=e.ref&&"HEAD"!==e.ref.ref?sB.yw(e.file,e.ref):Promise.resolve()}applyStash(e){return e.is("stash")?og.iQ(e.repoPath,e.commit):Promise.resolve()}browseRepoAtRevision(e,t){return e instanceof sz.e||e instanceof sz.y?(0,oh.Y)(e.uri,{before:t?.before,openInNewWindow:t?.openInNewWindow}):Promise.resolve()}cherryPick(e,t){return e.is("commit")?null!=t&&0!==t.length?op.KO(e.repoPath,t.map(e=>e.ref)):op.KO(e.repoPath,e.ref):Promise.resolve()}clearComparison(e){e.is("compare-branch")&&e.clear()}clearReviewed(e){let t;if(e.is("results-files")){if(null==(t=e.getParent()))return}else t=e;t.isAny("compare-branch","compare-results")&&t.clearReviewed()}closeRepository(e){e.isAny("repository","repo-folder")&&(e.repo.closed=!0)}async createBranch(e){let t=e instanceof sz.e||e instanceof sz.y?e?.ref:e?.is("tracking-status")?e.branch:void 0;return null==t&&(t=await this.container.git.getBranch(e?.repoPath??this.container.git.getBestRepository()?.uri)),oc.Su(e?.repoPath,t)}async createPullRequest(e){if(!e.isAny("branch","tracking-status"))return Promise.resolve();let t=await e.branch.getRemote();return(0,iX.wb)("createPullRequest",{repoPath:e.repoPath,remote:null!=t?{name:t.name,provider:null!=t.provider?{id:t.provider.id,name:t.provider.name,domain:t.provider.domain}:void 0,url:t.url}:void 0,branch:{name:e.branch.name,upstream:e.branch.upstream?.name,isRemote:e.branch.remote}})}async createTag(e){let t=e instanceof sz.e||e instanceof sz.y?e?.ref:e?.is("tracking-status")?e.branch:void 0;return null==t&&(t=await this.container.git.getBranch(e?.repoPath??this.container.git.getBestRepository()?.uri)),om.Su(e?.repoPath,t)}async createWorktree(e){if(e?.is("worktrees")&&(e=void 0),null==e||e.is("branch"))return of.Su(e?.repoPath,void 0,e?.ref)}deleteBranch(e){return e.is("branch")?oc.aE(e.repoPath,e.branch):Promise.resolve()}deleteStash(e,t){if(!e.is("stash"))return Promise.resolve();let i=t?.length?t.map(e=>e.commit):[e.commit];return og.qK(e.repoPath,i)}renameStash(e){return e.is("stash")?og.wX(e.repoPath,e.commit):Promise.resolve()}deleteTag(e){return e.is("tag")?om.aE(e.repoPath,e.tag):Promise.resolve()}async deleteWorktree(e){if(e.is("worktree"))return of.aE(e.repoPath,e.worktree.uri)}fetch(e){return e.isAny("repository","repo-folder")?op.I5(e.repo):e.is("remote")?od.I5(e.remote.repoPath,e.remote.name):e.isAny("branch","tracking-status")?op.I5(e.repoPath,e.root?void 0:e.branch):Promise.resolve()}async highlightChanges(e){e.isAny("commit-file","stash-file","file-commit","results-file")&&(await this.openFile(e,{preserveFocus:!0,preview:!0}),await this.container.fileAnnotations.toggle(C.window.activeTextEditor,"changes",{sha:e.ref.ref},!0))}async highlightRevisionChanges(e){e.isAny("commit-file","stash-file","file-commit","results-file")&&(await this.openFile(e,{preserveFocus:!0,preview:!0}),await this.container.fileAnnotations.toggle(C.window.activeTextEditor,"changes",{sha:e.ref.ref,only:!0},!0))}merge(e){return e.isAny("branch","tag")?op.Uf(e.repoPath,e.is("branch")?e.branch:e.tag):Promise.resolve()}openInTerminal(e){return e.isAny("tracking-status","repository","repo-folder")?(0,iX.CA)("openInTerminal",C.Uri.file(e.repoPath)):Promise.resolve()}openInIntegratedTerminal(e){return e.isAny("tracking-status","repository","repo-folder")?(0,iX.CA)("openInIntegratedTerminal",C.Uri.file(e.repoPath)):Promise.resolve()}openPullRequest(e){return e.is("pullrequest")?(0,iX.wb)("openPullRequest",{repoPath:e.uri.repoPath,provider:{id:e.pullRequest.provider.id,name:e.pullRequest.provider.name,domain:e.pullRequest.provider.domain},pullRequest:{id:e.pullRequest.id,url:e.pullRequest.url}}):Promise.resolve()}async openPullRequestChanges(e){return e.is("pullrequest")&&e.pullRequest.refs?.base!=null&&null!=e.pullRequest.refs.head?this.container.searchAndCompareView.openComparisonChanges(e.repoPath,{ref:e.pullRequest.refs.head.sha,label:e.pullRequest.refs.head.branch},{ref:e.pullRequest.refs.base.sha,label:e.pullRequest.refs.base.branch},{title:`Changes in Pull Request #${e.pullRequest.id}`}):Promise.resolve()}openPullRequestComparison(e){return e.is("pullrequest")&&e.pullRequest.refs?.base!=null&&null!=e.pullRequest.refs.head?this.container.searchAndCompareView.compare(e.repoPath,{ref:e.pullRequest.refs.head.sha,label:e.pullRequest.refs.head.branch},{ref:e.pullRequest.refs.base.sha,label:e.pullRequest.refs.base.branch}):Promise.resolve()}openWorktree(e,t){e.is("worktree")&&(0,eQ.EX)(e.worktree.uri,t)}pruneRemote(e){return e.is("remote")?od.G(e.remote.repoPath,e.remote.name):Promise.resolve()}async removeRemote(e){return e.is("remote")?od.aE(e.remote.repoPath,e.remote.name):Promise.resolve()}publishBranch(e){return e.isAny("branch","tracking-status")?op.qY(e.repoPath,void 0,e.branch):Promise.resolve()}publishRepository(e){return e.isAny("branch","tracking-status")?(0,iX.w3)("git.publish",C.Uri.file(e.repoPath)):Promise.resolve()}pull(e){return e.isAny("repository","repo-folder")?op.C0(e.repo):e.isAny("branch","tracking-status")?op.C0(e.repoPath,e.root?void 0:e.branch):Promise.resolve()}push(e,t){return e.isAny("repository","repo-folder")?op.qY(e.repo,t):e.isAny("branch","tracking-status")?op.qY(e.repoPath,t,e.root?void 0:e.branch):e.isAny("commit","file-commit")?e.isTip?op.qY(e.repoPath,t):this.pushToCommit(e):Promise.resolve()}pushToCommit(e){return e.isAny("commit","file-commit")?op.qY(e.repoPath,!1,e.commit):Promise.resolve()}rebase(e){return e.isAny("branch","commit","file-commit","tag")?op.oN(e.repoPath,e.ref):Promise.resolve()}rebaseToRemote(e){if(!e.isAny("branch","tracking-status"))return Promise.resolve();let t=e.is("branch")?e.branch.upstream?.name:e.status.upstream;return null==t?Promise.resolve():op.oN(e.repoPath,(0,F.op)(t,e.repoPath,{refType:"branch",name:t,remote:!0}))}renameBranch(e){return e.is("branch")?oc.wX(e.repoPath,e.branch):Promise.resolve()}resetCommit(e){return e.isAny("commit","file-commit")?op.a_(e.repoPath,(0,F.op)(`${e.ref.ref}^`,e.ref.repoPath,{refType:"revision",name:`${e.ref.name}^`,message:e.ref.message})):Promise.resolve()}resetToCommit(e){return e.isAny("commit","file-commit")?op.a_(e.repoPath,e.ref):Promise.resolve()}resetToTip(e){return e.is("branch")?op.a_(e.repoPath,(0,F.op)(e.ref.ref,e.repoPath,{refType:"revision",name:e.ref.name})):Promise.resolve()}restore(e){return e instanceof sz.y?sB.ac(e.file,e.ref):Promise.resolve()}revealRepositoryInExplorer(e){if(e.is("repository"))return(0,eQ.YH)(e.repo.uri)}revealWorktreeInExplorer(e){if(e.is("worktree"))return(0,eQ.YH)(e.worktree.uri)}revert(e){return e.isAny("commit","file-commit")?op.aI(e.repoPath,e.ref):Promise.resolve()}setAsDefault(e){return e.is("remote")?e.setAsDefault():Promise.resolve()}setBranchComparison(e,t){if(e.is("compare-branch"))return e.setComparisonType(t)}setShowRelativeDateMarkers(e){return A.i.updateEffective("views.showRelativeDateMarkers",e)}async stageFile(e){(e.isAny("commit-file","file-commit")||e.is("status-file"))&&(await this.container.git.stageFile(e.repoPath,e.file.path),e.triggerChange())}async stageDirectory(e){e.is("folder")&&e.relativePath&&(await this.container.git.stageDirectory(e.repoPath,e.relativePath),e.triggerChange())}star(e){return e.isAny("branch","repository","repo-folder")?e.star():Promise.resolve()}switch(e){return op.q8((0,sn.OS)(e))}switchTo(e){return e instanceof sz.e?op.q8(e.repoPath,e.is("branch")&&e.branch.current?void 0:e.ref):op.q8((0,sn.OS)(e))}async undoCommit(e){e.isAny("commit","file-commit")&&await sB.wR(this.container,e.ref)}unsetAsDefault(e){return e.is("remote")?e.setAsDefault(!1):Promise.resolve()}async unstageFile(e){e.isAny("commit-file","file-commit","status-file")&&(await this.container.git.unstageFile(e.repoPath,e.file.path),e.triggerChange())}async unstageDirectory(e){e.is("folder")&&e.relativePath&&(await this.container.git.unstageDirectory(e.repoPath,e.relativePath),e.triggerChange())}unstar(e){return e.isAny("branch","repository","repo-folder")?e.unstar():Promise.resolve()}compareHeadWith(e){return e instanceof sz.y?this.compareFileWith(e.repoPath,e.uri,e.ref.ref,void 0,"HEAD"):e instanceof sz.e?this.container.searchAndCompareView.compare(e.repoPath,"HEAD",e.ref):Promise.resolve()}compareWithUpstream(e){return e.is("branch")&&null!=e.branch.upstream?this.container.searchAndCompareView.compare(e.repoPath,e.ref,e.branch.upstream.name):Promise.resolve()}compareWorkingWith(e){return e instanceof sz.y?this.compareFileWith(e.repoPath,e.uri,e.ref.ref,void 0,""):e instanceof sz.e?this.container.searchAndCompareView.compare(e.repoPath,"",e.ref):Promise.resolve()}async compareAncestryWithWorking(e){if(!e.is("branch"))return;let t=await this.container.git.getBranch(e.repoPath);if(null==t)return;let i=await this.container.git.getMergeBase(e.repoPath,t.ref,e.ref.ref);if(null!=i)return this.container.searchAndCompareView.compare(e.repoPath,{ref:i,label:`ancestry with ${e.ref.ref} (${(0,F.c5)(i)})`},"")}compareWithSelected(e){(e instanceof sz.e||e instanceof sz.y)&&this.container.searchAndCompareView.compareWithSelected(e.repoPath,e.ref)}selectForCompare(e){(e instanceof sz.e||e instanceof sz.y)&&this.container.searchAndCompareView.selectForCompare(e.repoPath,e.ref)}async compareFileWith(e,t,i,r,s){return null==r&&(r=await this.container.git.getWorkingUri(e,t)),(0,iX.gf)(_.eq.DiffWith,{repoPath:e,lhs:{sha:i,uri:t},rhs:{sha:s,uri:r??t}})}compareFileWithSelected(e){if(null==this._selectedFile||!(e instanceof sz.y)||null==e.ref)return Promise.resolve();if(this._selectedFile.repoPath!==e.repoPath)return this.selectFileForCompare(e),Promise.resolve();let t=this._selectedFile;return this._selectedFile=void 0,(0,iN.Qr)("gitlens:views:canCompare:file",!1),this.compareFileWith(t.repoPath,t.uri,t.ref,e.uri,e.ref.ref)}_selectedFile;selectFileForCompare(e){e instanceof sz.y&&null!=e.ref&&(this._selectedFile={ref:e.ref.ref,repoPath:e.repoPath,uri:e.uri},(0,iN.Qr)("gitlens:views:canCompare:file",!0))}async openAllChanges(e,t,i){if(e.isAny("compare-results","results-files","tracking-status","tracking-status-files")){let r=await e.getFilesComparison();if(!r?.files.length)return;return null!=r.title&&(t={...t,title:r.title}),(i?sB.ol:sB.bT)(r.files,{repoPath:r.repoPath,lhs:r.ref1,rhs:r.ref2},t)}if(e.isAny("commit","stash"))return(i?sB.ol:sB.bT)(e.commit,t)}openChanges(e){if(e.is("conflict-file")){(0,iX.gf)(_.eq.DiffWith,{lhs:{sha:e.status.HEAD.ref,uri:tm.wv.fromFile(e.file,e.repoPath,void 0,!0)},rhs:{sha:"HEAD",uri:tm.wv.fromFile(e.file,e.repoPath)},repoPath:e.repoPath,line:0,showOptions:{preserveFocus:!1,preview:!1}});return}if(!(e instanceof sz.y)&&!e.is("status-file"))return;let t=e.getCommand();if(t?.arguments!=null)switch(t.command){case _.eq.DiffWith:{let[e]=t.arguments;e.showOptions.preview=!1,(0,iX.gf)(t.command,e);break}case _.eq.DiffWithPrevious:{let[,e]=t.arguments;e.showOptions.preview=!1,(0,iX.oF)(t.command,void 0,e);break}default:throw Error(`Unexpected command: ${t.command}`)}}async openAllChangesWithWorking(e,t,i){if(e.isAny("compare-results","results-files","tracking-status","tracking-status-files")){let r=await e.getFilesComparison();if(!r?.files.length)return;return(i?sB.SW:sB.qM)(r.files,{repoPath:r.repoPath,ref:r.ref1||r.ref2},t)}if(e.isAny("commit","stash"))return(i?sB.SW:sB.qM)(e.commit,t)}async openChangesWithWorking(e){if(e.is("status-file"))return(0,iX.oF)(_.eq.DiffWithWorking,void 0,{uri:e.uri,showOptions:{preserveFocus:!0,preview:!0}});if(e.is("conflict-file"))return(0,iX.oF)(_.eq.DiffWithWorking,void 0,{uri:e.baseUri,showOptions:{preserveFocus:!0,preview:!0}});if(e.is("file-commit")&&e.commit.file?.hasConflicts){let t=await e.getConflictBaseUri();if(null!=t)return(0,iX.oF)(_.eq.DiffWithWorking,void 0,{uri:t,showOptions:{preserveFocus:!0,preview:!0}})}return e instanceof sz.y?sB.i_(e.file,{repoPath:e.repoPath,ref:e.is("results-file")?e.ref2:e.ref.ref}):Promise.resolve()}async openPreviousChangesWithWorking(e){return e instanceof sz.y?sB.i_(e.file,{repoPath:e.repoPath,ref:e.is("results-file")?e.ref1:`${e.ref.ref}^`}):Promise.resolve()}openFile(e,t){return e instanceof sz.y||e.isAny("conflict-file","status-file","file-history","line-history")?sB.U5(e.uri,{preserveFocus:!0,preview:!1,...t}):Promise.resolve()}async openFiles(e){if(e.isAny("compare-results","results-files","tracking-status","tracking-status-files")){let t=await e.getFilesComparison();if(!t?.files.length)return;return sB.YJ(t.files,{repoPath:t.repoPath,ref:t.ref1||t.ref2})}if(e.isAny("commit","stash"))return sB.YJ(e.commit)}async openOnlyChangedFiles(e){if(e.is("compare-results")||e.is("results-files")||e.is("tracking-status")||e.is("tracking-status-files")){let t=await e.getFilesComparison();if(!t?.files.length)return;return sB.is(t.files)}if(e.isAny("commit","stash"))return sB.is(e.commit)}async openRevision(e,t){if(!e.isAny("commit-file","file-commit","results-file","stash-file","conflict-file","status-file"))return Promise.resolve();let i=(t={showOptions:{preserveFocus:!0,preview:!1},...t}).revisionUri;return null==i&&(i=e.isAny("results-file","conflict-file")?this.container.git.getRevisionUri(e.uri):e.commit.file?.status==="D"?this.container.git.getRevisionUri(await e.commit.getPreviousSha()??Q.E1,e.commit.file.path,e.commit.repoPath):this.container.git.getRevisionUri(e.uri)),sB.Av(i,t.showOptions??{preserveFocus:!0,preview:!1})}async openRevisions(e,t){if(e.isAny("compare-results","results-files","tracking-status","tracking-status-files")){let t=await e.getFilesComparison();if(!t?.files.length)return;return sB.gd(t.files,{repoPath:t.repoPath,lhs:t.ref2,rhs:t.ref1})}if(e.isAny("commit","stash"))return sB.gd(e.commit,t)}async setResultsCommitsFilter(e,t){if(!e?.isAny("compare-results","compare-branch"))return;let i=this.container.git.getRepository(e.repoPath);if(null!=i){if(t){let r=e.getState("filterCommits");if(null==r){let e=await this.container.git.getCurrentUser(i.uri);r=null!=e?[e]:void 0}let s=await (0,ow.I)(this.container,i,"Filter Commits",i.virtual?"Choose a contributor to show commits from":"Choose contributors to show commits from",{appendReposToTitle:!0,clearButton:!0,multiselect:!i.virtual,picked:e=>r?.some(t=>tf.w(e,t))??!1});if(null==s)return;0===s.length?(t=!1,e.deleteState("filterCommits")):e.storeState("filterCommits",s)}else e.deleteState("filterCommits");e.triggerChange(!0)}}};ob([(0,eW.Yz)()],ViewCommands.prototype,"addAuthors",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"addAuthor",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"addRemote",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"applyChanges",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"applyStash",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"browseRepoAtRevision",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"cherryPick",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"clearComparison",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"clearReviewed",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"closeRepository",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"createBranch",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"createPullRequest",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"createTag",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"createWorktree",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"deleteBranch",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"deleteStash",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"renameStash",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"deleteTag",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"deleteWorktree",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"fetch",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"highlightChanges",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"highlightRevisionChanges",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"merge",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"openInTerminal",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"openInIntegratedTerminal",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"openPullRequest",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"openPullRequestChanges",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"openPullRequestComparison",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"openWorktree",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"pruneRemote",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"removeRemote",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"publishBranch",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"publishRepository",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"pull",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"push",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"pushToCommit",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"rebase",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"rebaseToRemote",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"renameBranch",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"resetCommit",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"resetToCommit",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"resetToTip",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"restore",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"revealRepositoryInExplorer",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"revealWorktreeInExplorer",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"revert",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"setAsDefault",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"setBranchComparison",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"setShowRelativeDateMarkers",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"stageFile",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"stageDirectory",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"star",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"switch",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"switchTo",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"undoCommit",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"unsetAsDefault",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"unstageFile",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"unstageDirectory",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"unstar",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"compareHeadWith",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"compareWithUpstream",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"compareWorkingWith",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"compareAncestryWithWorking",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"compareWithSelected",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"selectForCompare",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"compareFileWithSelected",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"selectFileForCompare",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"openAllChanges",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"openChanges",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"openAllChangesWithWorking",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"openChangesWithWorking",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"openPreviousChangesWithWorking",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"openFile",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"openFiles",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"openOnlyChangedFiles",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"openRevision",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"openRevisions",1),ob([(0,eW.Yz)()],ViewCommands.prototype,"setResultsCommitsFilter",1);var ok=Object.defineProperty,oP=Object.getOwnPropertyDescriptor,oS=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?oP(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ok(t,i,o),o};let BranchesRepositoryNode=class BranchesRepositoryNode extends sG.Q{async getChildren(){return null==this.child&&(this.child=new BranchesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(ty.c7.Config,ty.c7.Heads,ty.c7.Index,ty.c7.Remotes,ty.c7.RemoteProviders,ty.c7.Status,ty.c7.Unknown,ty.MR.Any)}};let BranchesViewNode=class BranchesViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(null==this.children){let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message=this.view.container.git.isDiscoveringRepositories?"Loading branches...":"No branches could be found.",[];this.view.message=void 0;let t=1===e.length;this.children=e.map(e=>new BranchesRepositoryNode(tm.wv.fromRepoPath(e.path),this.view,this,e,t))}if(1===this.children.length){let[e]=this.children,t=await e.repo.getBranches({filter:e=>!e.remote});return 0===t.values.length?(this.view.message="No branches could be found.",this.view.title="Branches",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Branches (${t.values.length})`,e.getChildren())}return this.view.title="Branches",this.children}getTreeItem(){return new C.TreeItem("Branches",C.TreeItemCollapsibleState.Expanded)}};let BranchesView=class BranchesView extends sV.y2{configKey="branches";constructor(e){super(e,"branches","Branches","branchesView")}get canReveal(){return this.config.reveal||!A.i.get("views.repositories.showBranches")}getRoot(){return new BranchesViewNode(this)}registerCommands(){return this.container.viewCommands,[oA(this.getQualifiedCommand("copy"),()=>(0,iX.gf)(_.eq.ViewsCopy,this.activeSelection,this.selection),this),oA(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("branches"),this.refresh(!0)),this),oA(this.getQualifiedCommand("setLayoutToList"),()=>this.setLayout("list"),this),oA(this.getQualifiedCommand("setLayoutToTree"),()=>this.setLayout("tree"),this),oA(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),oA(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),oA(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),oA(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),oA(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),oA(this.getQualifiedCommand("setShowBranchComparisonOn"),()=>this.setShowBranchComparison(!0),this),oA(this.getQualifiedCommand("setShowBranchComparisonOff"),()=>this.setShowBranchComparison(!1),this),oA(this.getQualifiedCommand("setShowBranchPullRequestOn"),()=>this.setShowBranchPullRequest(!0),this),oA(this.getQualifiedCommand("setShowBranchPullRequestOff"),()=>this.setShowBranchPullRequest(!1),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||A.i.changed(e,"defaultDateFormat")||A.i.changed(e,"defaultDateLocale")||A.i.changed(e,"defaultDateShortFormat")||A.i.changed(e,"defaultDateSource")||A.i.changed(e,"defaultDateStyle")||A.i.changed(e,"defaultGravatarsStyle")||A.i.changed(e,"defaultTimeFormat")||A.i.changed(e,"sortBranchesBy")||A.i.changed(e,"sortRepositoriesBy"))}findBranch(e,t){if(e.remote)return;let{repoPath:i}=e;return this.findNode(t=>t.branch?.ref===e.ref,{allowPaging:!0,maxDepth:4,canTraverse:e=>e instanceof BranchesViewNode||(e instanceof BranchesRepositoryNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}async findCommit(e,t){let{repoPath:i}=e,r=await this.container.git.getCommitBranches(e.repoPath,e.ref,void 0,(0,M.S)(e)?{commitDate:e.committer.date}:void 0);if(0!==r.length)return this.findNode(t=>t.commit?.ref===e.ref,{allowPaging:!0,maxDepth:5,canTraverse:async t=>t instanceof BranchesViewNode||(t instanceof BranchesRepositoryNode||t instanceof BranchOrTagFolderNode?t.repoPath===i:!!(t instanceof BranchNode&&t.repoPath===i&&r.includes(t.branch.name))&&(await t.loadMore({until:e.ref}),!0)),token:t})}revealBranch(e,t){return C.window.withProgress({location:C.ProgressLocation.Notification,title:`Revealing ${(0,F.u)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findBranch(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealCommit(e,t){return C.window.withProgress({location:C.ProgressLocation.Notification,title:`Revealing ${(0,F.u)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findCommit(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof sG.Q&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof BranchesViewNode||e instanceof sG.Q});return void 0!==i&&await this.reveal(i,t),i}setLayout(e){return A.i.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return A.i.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return A.i.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return A.i.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"branch")}async setShowBranchPullRequest(e){await A.i.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await A.i.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}};oS([(0,tZ.I)(()=>"")],BranchesView.prototype,"revealBranch",1),oS([(0,tZ.I)(()=>"")],BranchesView.prototype,"revealCommit",1),oS([(0,tZ.I)(()=>"")],BranchesView.prototype,"revealRepository",1);var oR=Object.defineProperty,oD=Object.getOwnPropertyDescriptor,o$=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?oD(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&oR(t,i,o),o};let CommitsRepositoryNode=class CommitsRepositoryNode extends sG.Q{async getChildren(){if(null==this.child){let e=await this.repo.getBranch();if(null==e)return this.view.message="No commits could be found.",[];this.view.message=void 0;let t=this.view.state.filterCommits.get(this.repo.id);this.child=new BranchNode(this.uri,this.view,this.splatted?this.parent??this:this,this.repo,e,!0,{expanded:!0,limitCommits:!this.splatted,showComparison:this.view.config.showBranchComparison,showCurrent:!1,showMergeCommits:!this.view.state.hideMergeCommits,showTracking:!0,authors:t})}return this.child.getChildren()}async refresh(e=!1){e?this.child=void 0:this.parent?.triggerChange(!1),await this.ensureSubscription()}async subscribe(){let e=await this.repo?.getLastFetched()??0,t=ty.Oq.getLastFetchedUpdateInterval(e);return 0!==e&&t>0?C.Disposable.from(await super.subscribe(),(0,tX._m)(()=>{t!==ty.Oq.getLastFetchedUpdateInterval(e)&&this.resetSubscription(),this.splatted?this.view.triggerNodeChange(this.parent??this):this.view.triggerNodeChange(this)},t)):super.subscribe()}changed(e){return e.changed(ty.c7.Config,ty.c7.Heads,ty.c7.Index,ty.c7.Remotes,ty.c7.RemoteProviders,ty.c7.Status,ty.c7.Unknown,ty.MR.Any)}};o$([(0,tZ.I)(),(0,eW.u_)()],CommitsRepositoryNode.prototype,"refresh",1),o$([(0,eW.u_)()],CommitsRepositoryNode.prototype,"subscribe",1);let CommitsViewNode=class CommitsViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(null==this.children){let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message=this.view.container.git.isDiscoveringRepositories?"Loading commits...":"No commits could be found.",[];this.view.message=void 0;let t=1===e.length;this.children=e.map(e=>new CommitsRepositoryNode(tm.wv.fromRepoPath(e.path),this.view,this,e,t,{showBranchAndLastFetched:!0}))}let e=A.i.get("plusFeatures.enabled")&&null==this.view.container.usage.get("graphView:shown")&&null==this.view.container.usage.get("graphWebview:shown")?new sK.ac(this.view,this,(0,iX.AR)(_.eq.ShowGraph,"Show Commit Graph"),"Visualize commits on the Commit Graph ✨",void 0,"Visualize commits on the Commit Graph ✨",new C.ThemeIcon("gitlens-graph")):void 0;if(1===this.children.length){let[t]=this.children,i=await t.repo.getBranch();if(null!=i){let e=await t.repo.getLastFetched()??0,r=i.getTrackingStatus();this.view.description=`${r?`${r} ${_.or.Dot} `:""}${i.name}${i.rebasing?" (Rebasing)":""}${e?` ${_.or.Dot} Last fetched ${ty.Oq.formatLastFetched(e)}`:""}`}return null==e?t.getChildren():[e,...await t.getChildren()]}return null==e?this.children:[e,...this.children]}getTreeItem(){return new C.TreeItem("Commits",C.TreeItemCollapsibleState.Expanded)}};let CommitsView=class CommitsView extends sV.y2{configKey="commits";constructor(e){super(e,"commits","Commits","commitsView"),this.disposables.push(e.usage.onDidChange(this.onUsageChanged,this))}onUsageChanged(e){(null==e||"graphView:shown"===e.key||"graphWebview:shown"===e.key)&&this.refresh()}get canReveal(){return this.config.reveal||!A.i.get("views.repositories.showCommits")}_state={filterCommits:new Map};get state(){return this._state}getRoot(){return new CommitsViewNode(this)}registerCommands(){return this.container.viewCommands,[oA(this.getQualifiedCommand("copy"),()=>(0,iX.gf)(_.eq.ViewsCopy,this.activeSelection,this.selection),this),oA(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("branches","status","tags"),this.refresh(!0)),this),oA(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),oA(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),oA(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),oA(this.getQualifiedCommand("setCommitsFilterAuthors"),e=>this.setCommitsFilter(e,!0),this),oA(this.getQualifiedCommand("setCommitsFilterOff"),e=>this.setCommitsFilter(e,!1),this),oA(this.getQualifiedCommand("setShowMergeCommitsOn"),()=>this.setShowMergeCommits(!0),this),oA(this.getQualifiedCommand("setShowMergeCommitsOff"),()=>this.setShowMergeCommits(!1),this),oA(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),oA(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),oA(this.getQualifiedCommand("setShowBranchComparisonOn"),()=>this.setShowBranchComparison(!0),this),oA(this.getQualifiedCommand("setShowBranchComparisonOff"),()=>this.setShowBranchComparison(!1),this),oA(this.getQualifiedCommand("setShowBranchPullRequestOn"),()=>this.setShowBranchPullRequest(!0),this),oA(this.getQualifiedCommand("setShowBranchPullRequestOff"),()=>this.setShowBranchPullRequest(!1),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||A.i.changed(e,"defaultDateFormat")||A.i.changed(e,"defaultDateLocale")||A.i.changed(e,"defaultDateShortFormat")||A.i.changed(e,"defaultDateSource")||A.i.changed(e,"defaultDateStyle")||A.i.changed(e,"defaultGravatarsStyle")||A.i.changed(e,"defaultTimeFormat")||A.i.changed(e,"plusFeatures.enabled")||A.i.changed(e,"sortRepositoriesBy"))}async findCommit(e,t){let{repoPath:i}=e,r=await this.container.git.getBranch(e.repoPath);if(null!=r&&(await this.container.git.getCommitBranches(e.repoPath,e.ref,r.name,{commitDate:(0,M.S)(e)?e.committer.date:void 0})).length)return this.findNode(t=>t.commit?.ref===e.ref,{allowPaging:!0,maxDepth:2,canTraverse:async t=>{if(t instanceof CommitsViewNode){let i=await t.getSplattedChild?.();return i instanceof CommitsRepositoryNode&&(i=await i.getSplattedChild?.())instanceof BranchNode&&await i.loadMore({until:e.ref}),!0}if(t instanceof CommitsRepositoryNode&&t.repoPath===i){let i=await t.getSplattedChild?.();if(i instanceof BranchNode)return await i.loadMore({until:e.ref}),!0}return t instanceof BranchTrackingStatusNode&&t.repoPath===i},token:t})}async revealCommit(e,t){return C.window.withProgress({location:C.ProgressLocation.Notification,title:`Revealing ${(0,F.u)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findCommit(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof sG.Q&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof CommitsViewNode||e instanceof sG.Q});return void 0!==i&&await this.reveal(i,t),i}setFilesLayout(e){return A.i.updateEffective(`views.${this.configKey}.files.layout`,e)}async setCommitsFilter(e,t){let i;if(null!=e){if(e.is("repo-folder"))i=e.repo;else{let t=e;do if(t=t.getParent(),t?.is("repo-folder")){i=t.repo;break}while(null!=t)}}if(t){if(null==(i??=await (0,sl.a0)("Filter Commits","Choose a repository")))return;let e=this.state.filterCommits.get(i.id);if(null==e){let t=await this.container.git.getCurrentUser(i.uri);e=null!=t?[t]:void 0}let r=await (0,ow.I)(this.container,i,"Filter Commits",i.virtual?"Choose a contributor to show commits from":"Choose contributors to show commits from",{appendReposToTitle:!0,clearButton:!0,multiselect:!i.virtual,picked:t=>e?.some(e=>tf.w(t,e))??!1});if(null==r)return;0===r.length?(t=!1,this.state.filterCommits.delete(i.id)):this.state.filterCommits.set(i.id,r)}else null!=i?this.state.filterCommits.delete(i.id):this.state.filterCommits.clear();(0,iN.Qr)("gitlens:views:commits:filtered",0!==this.state.filterCommits.size),this.refresh(!0)}setShowMergeCommits(e){(0,iN.Qr)("gitlens:views:commits:hideMergeCommits",!e),this.state.hideMergeCommits=!e,this.refresh(!0)}setShowAvatars(e){return A.i.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return A.i.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"working")}async setShowBranchPullRequest(e){await A.i.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await A.i.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}};o$([(0,tZ.I)(()=>"")],CommitsView.prototype,"revealCommit",1),o$([(0,tZ.I)(()=>"")],CommitsView.prototype,"revealRepository",1);var o_=Object.defineProperty,oI=Object.getOwnPropertyDescriptor,oT=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?oI(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&o_(t,i,o),o};let ContributorNode=class ContributorNode extends sn.sl{constructor(e,t,i,r,s){super("contributor",e,t,i),this.parent=i,this.contributor=r,this.options=s,this.updateContext({contributor:r}),this._uniqueId=(0,sn.QP)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}toClipboard(){return`${this.contributor.name}${this.contributor.email?` <${this.contributor.email}>`:""}`}get repoPath(){return this.contributor.repoPath}async getChildren(){let e=await this.getLog();if(null==e)return[new sK._Y(this.view,this,"No commits could be found.")];let t=await this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath),i=[...(0,sZ.c)((0,eN.kH)(e.commits.values(),e=>new sJ.s(this.view,this,e,void 0,void 0,t)),this)];return e.hasMore&&i.push(new sK.Ck(this.view,this,i[i.length-1])),i}async getTreeItem(){let e,t;let i=this.options?.presence?.get(this.contributor.email),r=new C.TreeItem(this.contributor.current?`${this.contributor.label} (you)`:this.contributor.label,C.TreeItemCollapsibleState.Collapsed);if(r.id=this.id,r.contextValue=this.contributor.current?`${sn.UZ.Contributor}+current`:sn.UZ.Contributor,r.description=`${null!=i&&"offline"!==i.status?`${i.statusText} ${_.or.Space}${_.or.Dot}${_.or.Space} `:""}${null!=this.contributor.date?`${this.contributor.formatDateFromNow()}, `:""}${(0,L.u)("commit",this.contributor.count)}`,this.view.config.avatars){let r=A.i.get("hovers.avatarSize");if(e=await this.contributor.getAvatarUri({defaultStyle:A.i.get("defaultGravatarsStyle"),size:r}),null!=i){let s=`${this.contributor.count?"You are":`${this.contributor.label} is`} ${"dnd"===i.status?"in ":""}${i.statusText.toLocaleLowerCase()}`;t=`![${s}](${e.toString(!0)}|width=${r},height=${r} "${s}")![${s}](${(0,td.GC)(i.status)} "${s}")`}else t=`![${this.contributor.label}](${e.toString(!0)}|width=${r},height=${r} "${this.contributor.label}")`}let s=new Intl.NumberFormat,o=null!=this.contributor.stats?`\\
${(0,L.u)("file",this.contributor.stats.files,{format:s.format})} changed, ${(0,L.u)("addition",this.contributor.stats.additions,{format:s.format})}, ${(0,L.u)("deletion",this.contributor.stats.deletions,{format:s.format})}`:"",n=this.contributor.email?`__[${this.contributor.name}](mailto:${this.contributor.email} "Email ${this.contributor.label} (${this.contributor.email})")__`:`__${this.contributor.label}__`,a=null!=this.contributor.date?`Last commit ${this.contributor.formatDateFromNow()} (${this.contributor.formatDate()})\\
`:"",l=new C.MarkdownString(`${null!=t?t:""} &nbsp;${n} 

${a}${(0,L.u)("commit",this.contributor.count,{format:s.format})}${o}`);return l.supportHtml=!0,l.isTrusted=!0,r.tooltip=l,r.iconPath=e,r}refresh(e){e&&(this._log=void 0)}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.getLog(this.uri.repoPath,{all:this.options?.all,ref:this.options?.ref,limit:this.limit??this.view.config.defaultItemLimit,merges:this.options?.showMergeCommits,authors:[{name:this.contributor.name,email:this.contributor.email,username:this.contributor.username,id:this.contributor.id}]})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await C.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());null!=t&&t.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}};oT([(0,tZ.I)(),(0,eW.u_)()],ContributorNode.prototype,"refresh",1),oT([(0,tZ.I)()],ContributorNode.prototype,"loadMore",1);var oF=Object.defineProperty,oO=Object.getOwnPropertyDescriptor,ox=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?oO(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&oF(t,i,o),o};let ContributorsNode=class ContributorsNode extends sY.o{constructor(e,t,i,r,s){super("contributors",e,t,i),this.parent=i,this.repo=r,this.options=s,this.updateContext({repository:r}),this._uniqueId=(0,sn.QP)(this.type,this.context)}splatted=!0;get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){let e;let t=this.options?.all??A.i.get("views.contributors.showAllBranches");if(!t)try{let t=await this.view.container.git.getBranch(this.uri.repoPath);t?.upstream?.name==null||t.upstream.missing||(e="@{u}")}catch{}let i=this.options?.stats??A.i.get("views.contributors.showStatistics"),r=await this.repo.getContributors({all:t,merges:this.options?.showMergeCommits,ref:e,stats:i});if(0===r.length)return[new sK._Y(this.view,this,"No contributors could be found.")];tf.M.sort(r);let s=this.view.container.vsls.enabled?await this.getPresenceMap(r):void 0;this.children=r.map(i=>new ContributorNode(this.uri,this.view,this,i,{all:t,ref:e,presence:s,showMergeCommits:this.options?.showMergeCommits}))}return this.children}getTreeItem(){this.splatted=!1;let e=new C.TreeItem("Contributors",C.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=sn.UZ.Contributors,e.iconPath=new C.ThemeIcon("organization"),e}updateAvatar(e){if(null!=this.children)for(let t of this.children)t.contributor.email===e&&t.triggerChange()}refresh(){super.refresh(!0)}async getPresenceMap(e){let t=e.find(e=>e.current)?.email;if(null!=t)return this.view.container.vsls.getContactsPresence([t])}};ox([(0,eW.u_)()],ContributorsNode.prototype,"refresh",1),ox([(0,eW.u_)({args:!1})],ContributorsNode.prototype,"getPresenceMap",1);var oE=Object.defineProperty,oB=Object.getOwnPropertyDescriptor,oU=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?oB(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&oE(t,i,o),o};let ContributorsRepositoryNode=class ContributorsRepositoryNode extends sG.Q{async getChildren(){return null==this.child&&(this.child=new ContributorsNode(this.uri,this.view,this,this.repo,{showMergeCommits:!this.view.state.hideMergeCommits})),this.child.getChildren()}async subscribe(){return C.Disposable.from(await super.subscribe(),(0,td.U3)(e=>this.child?.updateAvatar(e.email)))}changed(e){return e.changed(ty.c7.Config,ty.c7.Heads,ty.c7.Remotes,ty.c7.Unknown,ty.MR.Any)}};oU([(0,eW.u_)()],ContributorsRepositoryNode.prototype,"subscribe",1);let ContributorsViewNode=class ContributorsViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(null==this.children){let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message=this.view.container.git.isDiscoveringRepositories?"Loading contributors...":"No contributors could be found.",[];this.view.message=void 0;let t=1===e.length;this.children=e.map(e=>new ContributorsRepositoryNode(tm.wv.fromRepoPath(e.path),this.view,this,e,t))}if(1===this.children.length){let[e]=this.children,t=await e.getChildren();return 0===t.length?(this.view.message="No contributors could be found.",this.view.title="Contributors",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Contributors (${t.length})`,t)}return this.view.title="Contributors",this.children}getTreeItem(){return new C.TreeItem("Contributors",C.TreeItemCollapsibleState.Expanded)}};let ContributorsView=class ContributorsView extends sV.y2{configKey="contributors";constructor(e){super(e,"contributors","Contributors","contributorsView"),(0,iN.Qr)("gitlens:views:contributors:hideMergeCommits",!0)}get canReveal(){return this.config.reveal||!A.i.get("views.repositories.showContributors")}_state={hideMergeCommits:!0};get state(){return this._state}getRoot(){return new ContributorsViewNode(this)}registerCommands(){return this.container.viewCommands,[oA(this.getQualifiedCommand("copy"),()=>(0,iX.gf)(_.eq.ViewsCopy,this.activeSelection,this.selection),this),oA(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("contributors"),this.refresh(!0)),this),oA(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),oA(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),oA(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),oA(this.getQualifiedCommand("setShowAllBranchesOn"),()=>this.setShowAllBranches(!0),this),oA(this.getQualifiedCommand("setShowAllBranchesOff"),()=>this.setShowAllBranches(!1),this),oA(this.getQualifiedCommand("setShowMergeCommitsOn"),()=>this.setShowMergeCommits(!0),this),oA(this.getQualifiedCommand("setShowMergeCommitsOff"),()=>this.setShowMergeCommits(!1),this),oA(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),oA(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),oA(this.getQualifiedCommand("setShowStatisticsOn"),()=>this.setShowStatistics(!0),this),oA(this.getQualifiedCommand("setShowStatisticsOff"),()=>this.setShowStatistics(!1),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||A.i.changed(e,"defaultDateFormat")||A.i.changed(e,"defaultDateLocale")||A.i.changed(e,"defaultDateShortFormat")||A.i.changed(e,"defaultDateSource")||A.i.changed(e,"defaultDateStyle")||A.i.changed(e,"defaultGravatarsStyle")||A.i.changed(e,"defaultTimeFormat")||A.i.changed(e,"sortContributorsBy")||A.i.changed(e,"sortRepositoriesBy"))}findContributor(e,t){let{repoPath:i,username:r,email:s,name:o}=e;return this.findNode(e=>e instanceof ContributorNode&&e.contributor.username===r&&e.contributor.email===s&&e.contributor.name===o,{maxDepth:2,canTraverse:e=>e instanceof ContributorsViewNode||e instanceof ContributorsRepositoryNode&&e.repoPath===i,token:t})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof sG.Q&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof ContributorsViewNode||e instanceof sG.Q});return void 0!==i&&await this.reveal(i,t),i}async revealContributor(e,t){return C.window.withProgress({location:C.ProgressLocation.Notification,title:`Revealing contributor '${e.name}' in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findContributor(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}setFilesLayout(e){return A.i.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAllBranches(e){return A.i.updateEffective(`views.${this.configKey}.showAllBranches`,e)}setShowMergeCommits(e){(0,iN.Qr)("gitlens:views:contributors:hideMergeCommits",!e),this.state.hideMergeCommits=!e,this.refresh(!0)}setShowAvatars(e){return A.i.updateEffective(`views.${this.configKey}.avatars`,e)}setShowStatistics(e){return A.i.updateEffective(`views.${this.configKey}.showStatistics`,e)}};oU([(0,tZ.I)(()=>"")],ContributorsView.prototype,"revealRepository",1),oU([(0,tZ.I)(()=>"")],ContributorsView.prototype,"revealContributor",1);var oW=i(2216);let DraftNode=class DraftNode extends sn.sl{constructor(e,t,i,r){super("draft",e,t,i),this.parent=i,this.draft=r,this.updateContext({draft:r}),this._uniqueId=(0,sn.QP)(this.type,this.context)}get id(){return this._uniqueId}toClipboard(){return this.draft.title??this.draft.description??""}getChildren(){return[]}getTreeItem(){let e=this.draft.title??`Draft (${this.draft.id})`,t=new C.TreeItem(e,C.TreeItemCollapsibleState.None),i=A.i.get("defaultDateFormat")??"MMMM Do, YYYY h:mma",r=this.draft.updatedAt.getTime()-this.draft.createdAt.getTime()>=1e3;t.id=this.id;let s=sn.UZ.Draft;return this.draft.isMine&&(s+="+mine"),t.contextValue=s,t.iconPath=new C.ThemeIcon("cloud"),t.tooltip=new C.MarkdownString(`${e}${this.draft.description?`\\
${this.draft.description}`:""}

Created ${(0,ey.Yn)(this.draft.createdAt)} &nbsp; _(${(0,ey._m)(this.draft.createdAt,i)})_${r?` \\
Last updated ${(0,ey.Yn)(this.draft.updatedAt)} &nbsp; _(${(0,ey._m)(this.draft.updatedAt,i)})_`:""}`),t.description=(0,ey.Yn)(this.draft.updatedAt),t.command={title:"Show Patch",command:this.view.getQualifiedCommand("open"),arguments:[this]},t}};let GroupingNode=class GroupingNode extends sn.sl{constructor(e,t,i,r=C.TreeItemCollapsibleState.Expanded,s,o,n,a){super("grouping",tm.oP,e),this.label=t,this.childrenOrFn=i,this.collapsibleState=r,this.description=s,this.tooltip=o,this.iconPath=n,this.contextValue=a}getChildren(){return"function"==typeof this.childrenOrFn?this.childrenOrFn():this.childrenOrFn}getTreeItem(){let e=new C.TreeItem(this.label,this.collapsibleState);return e.id=this.id,e.contextValue=this.contextValue??sn.UZ.Grouping,e.description=this.description,e.tooltip=this.tooltip,e.iconPath=this.iconPath,e}};var oN=Object.defineProperty,oq=Object.getOwnPropertyDescriptor;let DraftsViewNode=class DraftsViewNode extends sY.o{constructor(e){super("drafts",tm.oP,e)}async getChildren(){if(null==this.children){let e=[];try{let t=await this.view.container.drafts.getDrafts();t.sort((e,t)=>t.createdAt.getTime()-e.createdAt.getTime());let i=(0,eN.uU)(t,e=>e.isMine?"mine":"shared",e=>new DraftNode(this.uri,this.view,this,e)),r=i.get("mine"),s=i.get("shared");r?.length&&(s?.length?e.push(new GroupingNode(this.view,"Created by Me",r)):e.push(...r)),s?.length&&e.push(new GroupingNode(this.view,"Shared with Me",s))}catch(e){if(!(e instanceof iJ.CW))throw e}this.children=e}return this.children}getTreeItem(){return new C.TreeItem("Drafts",C.TreeItemCollapsibleState.Expanded)}};let DraftsView=class DraftsView extends sV.y2{configKey="drafts";_disposable;constructor(e){super(e,"drafts","Cloud Patches","draftsView"),this.description=`PREVIEW\xa0\xA0\u2601\uFE0F`}dispose(){this._disposable?.dispose(),super.dispose()}get canSelectMany(){return!1}getRoot(){return new DraftsViewNode(this)}onVisibilityChanged(e){null==this._disposable&&(this._disposable=C.Disposable.from(this.container.subscription.onDidChange(()=>this.refresh(!0),this))),super.onVisibilityChanged(e)}async show(e){if(await (0,rk.u)())return super.show(e)}get canReveal(){return!1}registerCommands(){return this.container.viewCommands,[oA(this.getQualifiedCommand("copy"),()=>(0,iX.gf)(_.eq.ViewsCopy,this.activeSelection,this.selection),this),oA(this.getQualifiedCommand("refresh"),()=>this.refresh(!0),this),oA(this.getQualifiedCommand("create"),async()=>{await (0,iX.gf)(_.eq.CreateCloudPatch),this.ensureRoot().triggerChange(!0)},this),oA(this.getQualifiedCommand("delete"),async e=>{let t={title:"Delete"};await C.window.showInformationMessage(`Are you sure you want to delete Cloud Patch '${e.draft.title}'?`,{modal:!0},t,{title:"Cancel",isCloseAffordance:!0})===t&&(await this.container.drafts.deleteDraft(e.draft.id),e.getParent()?.triggerChange(!0))},this),oA(this.getQualifiedCommand("open"),async e=>{let t=e.draft;if(null==t.changesets)try{t=await this.container.drafts.getDraft(e.draft.id)}catch(t){C.window.showErrorMessage(`Unable to open Cloud Patch '${e.draft.id}'`);return}(0,oW.A)({mode:"view",draft:t})},this)]}async findDraft(e,t){return this.findNode(t=>t.draft?.id===e.id,{allowPaging:!1,maxDepth:2,canTraverse:e=>e instanceof DraftsViewNode,token:t})}async revealDraft(e,t){let i=await this.findDraft(e);if(null!=i)return await this.ensureRevealNode(i,t),i}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?oq(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&oN(t,i,o)})([(0,tZ.I)(()=>"")],DraftsView.prototype,"revealDraft",1);var oL=i(9116),oM=Object.defineProperty,oQ=Object.getOwnPropertyDescriptor,oG=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?oQ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&oM(t,i,o),o};let FileHistoryNode=class FileHistoryNode extends sL.q{constructor(e,t,i,r,s){super("file-history",e,t,i),this.parent=i,this.folder=r,this.branch=s,null!=s&&this.updateContext({branch:s}),this._uniqueId=(0,sn.QP)(`${this.type}+${e.toString()}`,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;splatted=!0;get id(){return this._uniqueId}toClipboard(){return this.uri.fileName}async getChildren(){this.view.description=`${this.label}${this.parent instanceof FileHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`;let e=[];if(null==this.uri.repoPath)return e;let t=null!=this.branch?await this.view.container.git.getBranchAheadRange(this.branch):void 0,[i,r,s,o,n]=await Promise.all([this.getLog(),null==this.uri.sha?this.view.container.git.getStatusForFiles(this.uri.repoPath,this.getPathOrGlob()):void 0,null==this.uri.sha?this.view.container.git.getCurrentUser(this.uri.repoPath):void 0,null!=this.branch?this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath,this.branch.name):void 0,t?this.view.container.git.getLogRefsOnly(this.uri.repoPath,{limit:0,ref:t}):void 0]);if(r?.length){if(this.folder){let t=(0,eN.kH)((0,eN.oT)((0,eN.sX)(r,e=>e.getPseudoCommits(this.view.container,s)),e=>e.sha,(e,t)=>e.with({files:{files:[...e.files??(null!=e.file?[e.file]:[]),...t.files??(null!=t.file?[t.file]:[])]}})),e=>new sJ.s(this.view,this,e));e.push(...t)}else{let[t]=r,i=t.getPseudoCommits(this.view.container,s);i.length&&e.push(...i.map(e=>new oL.I(this.view,this,t,e)))}}return(null!=i&&(e.push(...(0,sZ.c)((0,eN.Gs)(i.commits.values(),e=>this.folder?new sJ.s(this.view,this,e,n?.has(e.ref),this.branch,void 0,{expand:!1}):null!=e.file?new oL.I(this.view,this,e.file,e,{branch:this.branch,getBranchAndTagTips:o,unpublished:n?.has(e.ref)}):void 0),this)),i.hasMore&&e.push(new sK.Ck(this.view,this,e[e.length-1]))),0===e.length)?[new sK._Y(this.view,this,"No file history could be found.")]:e}getTreeItem(){this.splatted=!1;let e=this.label,t=new C.TreeItem(e,C.TreeItemCollapsibleState.Expanded);return t.contextValue=sn.UZ.FileHistory,t.description=this.uri.directory,t.tooltip=`History of ${this.uri.fileName}
${this.uri.directory}/${null==this.uri.sha?"":`

${this.uri.sha}`}`,this.view.description=`${e}${this.parent instanceof FileHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`,t}get label(){return this.folder&&""===this.uri.fileName?`${(0,q.g1)(this.uri.path)}${this.uri.sha?` ${this.uri.sha===Q.E1?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`:`${this.uri.fileName}${this.uri.sha?` ${this.uri.sha===Q.E1?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`}subscribe(){let e=this.view.container.git.getRepository(this.uri);if(null!=e)return C.Disposable.from((0,iT.gd)(e.onDidChange,this.onRepositoryChanged,this),(0,iT.gd)(e.onDidChangeFileSystem,this.onFileSystemChanged,this,[e.watchFileSystem()]),(0,iT.gd)(A.i.onDidChange,e=>{A.i.changed(e,"advanced.fileHistoryFollowsRenames")&&this.view.resetNodeLastKnownLimit(this)},this))}etag(){return Date.now()}onRepositoryChanged(e){e.changed(ty.c7.Index,ty.c7.Heads,ty.c7.Remotes,ty.c7.RemoteProviders,ty.c7.Status,ty.c7.Unknown,ty.MR.Any)&&(eq.YJ.debug(`FileHistoryNode.onRepositoryChanged(${e.toString()}); triggering node refresh`),this.triggerChange(!0))}onFileSystemChanged(e){if(this.folder){if(!e.uris.some(e=>e.fsPath.startsWith(this.uri.fsPath)))return}else if(!e.uris.some(e=>e.toString()===this.uri.toString()))return;eq.YJ.debug(`FileHistoryNode.onFileSystemChanged(${this.uri.toString(!0)}); triggering node refresh`),this.triggerChange(!0)}refresh(e){e&&(this._log=void 0)}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.getLogForFile(this.uri.repoPath,this.getPathOrGlob(),{limit:this.limit??this.view.config.pageItemLimit,ref:this.uri.sha})),this._log}getPathOrGlob(){return this.folder?C.Uri.joinPath(this.uri,"*"):this.uri}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await C.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());null!=t&&t.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1,this.splatted)))}};oG([(0,eW.u_)()],FileHistoryNode.prototype,"subscribe",1),oG([(0,tZ.I)(),(0,eW.u_)()],FileHistoryNode.prototype,"refresh",1),oG([(0,eb.s)()],FileHistoryNode.prototype,"getPathOrGlob",1),oG([(0,tZ.I)()],FileHistoryNode.prototype,"loadMore",1);var oY=Object.defineProperty,oV=Object.getOwnPropertyDescriptor,oz=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?oV(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&oY(t,i,o),o};let FileHistoryTrackerNode=class FileHistoryTrackerNode extends sL.q{_base;splatted=!0;constructor(e){super("file-history-tracker",tm.oP,e)}dispose(){super.dispose(),this.child=void 0}_child;get child(){return this._child}set child(e){this._child!==e&&(this._child?.dispose(),this._child=e)}async getChildren(){if(null==this.child){let e;if(!this.hasUri)return this.view.description=void 0,this.view.message="There are no editors open that can provide file history information.",[];this.view.message=void 0;let t={...this.uri,repoPath:this.uri.repoPath,sha:this._base??this.uri.sha},i=new tm.wv(this.uri,t),r=!1;try{((await C.workspace.fs.stat(this.uri)).type&C.FileType.Directory)===C.FileType.Directory&&(r=!0)}catch{}this.view.title=r?"Folder History":"File History",t.sha&&"HEAD"!==t.sha?(0,F.kp)(t.sha)||({values:[e]}=await this.view.container.git.getBranches(this.uri.repoPath,{filter:e=>e.name===t.sha})):e=await this.view.container.git.getBranch(this.uri.repoPath),this.child=new FileHistoryNode(i,this.view,this,r,e)}return this.child.getChildren()}getTreeItem(){this.splatted=!1;let e=new C.TreeItem("File History",C.TreeItemCollapsibleState.Expanded);return e.contextValue=sn.UZ.ActiveFileHistory,e}get followingEditor(){return this.canSubscribe}get hasUri(){return this._uri!=tm.oP&&null!=this._uri.repoPath}async changeBase(){let e=await (0,s4.m)(this.uri.repoPath,"Change File History Base","Choose a reference to set as the new base",{allowRevisions:!0,picked:this._base,sort:{branches:{current:!0},tags:{}}});if(null!=e){if((0,F.MN)(e)){let t=await this.view.container.git.getBranch(this.uri.repoPath);this._base=t?.name===e.name?void 0:e.ref}else this._base=e.ref;null!=this.child&&(this.setUri(),await this.triggerChange())}}async refresh(e=!1){let t;let i=(0,eM.b1)();if(!this.canSubscribe)return!1;e&&(null!=this._uri&&this._uri!==tm.oP&&await this.view.container.documentTracker.resetCache(this._uri,"log"),this.reset());let r=C.window.activeTextEditor;if(null==r||!this.view.container.git.isTrackable(r.document.uri))return!!(!this.hasUri||this.view.container.git.isTrackable(this.uri)&&C.window.visibleTextEditors.some(e=>e.document?.uri.path===this.uri.path))||(this.reset(),(0,eM._W)(i,`, uri=${eq.YJ.toLoggable(this._uri)}`),!1);if(r.document.uri.path===this.uri.path)return(0,eM._W)(i,`, uri=${eq.YJ.toLoggable(this._uri)}`),!0;let s=await tm.wv.fromUri(r.document.uri);if(null!=s.sha){let e=await this.view.container.git.getWorkingUri(s.repoPath,s);null!=e&&(t=e)}return!!(this.hasUri&&i8.K.equals(t??s,this.uri))||(null!=t&&(s=await tm.wv.fromUri(t)),null==s.repoPath?this.reset():(this.setUri(s),this.child=void 0),(0,eM._W)(i,`, uri=${eq.YJ.toLoggable(this._uri)}`),!1)}reset(){this.setUri(),this.child=void 0}setEditorFollowing(e){e&&this.setUri(),this.canSubscribe=e,e||this.triggerChange()}async showHistoryForUri(e){this.setUri(e),await this.triggerChange()}subscribe(){return C.Disposable.from((0,iT.gd)(C.window.onDidChangeActiveTextEditor,(0,tX.Cu)(this.onActiveEditorChanged,250),this))}etag(){return 0}_triggerChangeDebounced;onActiveEditorChanged(e){if(null==e&&(0,eQ.At)(this._uri)){null==this._triggerChangeDebounced&&(this._triggerChangeDebounced=(0,tX.Cu)(()=>this.triggerChange(),1500)),this._triggerChangeDebounced();return}this.triggerChange()}setUri(e){this._uri=e??tm.oP,(0,iN.Qr)("gitlens:views:fileHistory:canPin",this.hasUri)}};oz([(0,tZ.I)(),(0,eW.Yz)()],FileHistoryTrackerNode.prototype,"changeBase",1),oz([(0,tZ.I)(),(0,eW.u_)({exit:!0})],FileHistoryTrackerNode.prototype,"refresh",1),oz([(0,eW.Yz)()],FileHistoryTrackerNode.prototype,"setEditorFollowing",1),oz([(0,eW.Yz)()],FileHistoryTrackerNode.prototype,"showHistoryForUri",1),oz([(0,eW.u_)()],FileHistoryTrackerNode.prototype,"subscribe",1),oz([(0,eW.u_)({args:!1})],FileHistoryTrackerNode.prototype,"onActiveEditorChanged",1);var oH=Object.defineProperty,oj=Object.getOwnPropertyDescriptor,oJ=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?oj(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&oH(t,i,o),o};let LineHistoryNode=class LineHistoryNode extends sL.q{constructor(e,t,i,r,s,o){super("line-history",e,t,i),this.parent=i,this.branch=r,this.selection=s,this.editorContents=o,null!=r&&this.updateContext({branch:r}),this._uniqueId=(0,sn.QP)(`${this.type}+${e.toString()}+[${s.start.line},${s.start.character}-${s.end.line},${s.end.character}]`,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;splatted=!0;get id(){return this._uniqueId}toClipboard(){return this.uri.fileName}async getChildren(){this.view.description=`${this.label}${this.parent instanceof LineHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`;let e=[];if(null==this.uri.repoPath)return e;let t=this.selection,i=null!=this.branch?await this.view.container.git.getBranchAheadRange(this.branch):void 0,[r,s,o,n]=await Promise.all([this.getLog(t),null==this.uri.sha||(0,F.bP)(this.uri.sha)?this.editorContents?await this.view.container.git.getBlameForRangeContents(this.uri,t,this.editorContents):await this.view.container.git.getBlameForRange(this.uri,t):void 0,null!=this.branch?this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath,this.branch.name):void 0,i?this.view.container.git.getLogRefsOnly(this.uri.repoPath,{limit:0,ref:i}):void 0]);if(null!=s)for(let i of s.commits.values()){if(!i.isUncommitted)continue;let r=s.lines[0],o=s.lines[s.lines.length-1],n=t.active.line===r.line-1;t=new C.Selection((n?o:r).originalLine-1,t.anchor.character,(n?r:o).originalLine-1,t.active.character);let a=await this.view.container.git.getStatusForFile(this.uri.repoPath,this.uri);if(null!=a){let r={conflictStatus:a?.conflictStatus,path:i.file?.path??"",indexStatus:a?.indexStatus,originalPath:i.file?.originalPath,repoPath:this.uri.repoPath,status:a?.status??G.fX.Modified,workingTreeStatus:a?.workingTreeStatus},s=await this.view.container.git.getCurrentUser(this.uri.repoPath),o=a?.getPseudoCommits(this.view.container,s);if(null!=o)for(let i of o.reverse())e.unshift(new oL.I(this.view,this,r,i,{selection:t}))}break}return(null!=r&&(e.push(...(0,sZ.c)((0,eN.Gs)(r.commits.values(),e=>null!=e.file?new oL.I(this.view,this,e.file,e,{branch:this.branch,getBranchAndTagTips:o,selection:t,unpublished:n?.has(e.ref)}):void 0),this)),r.hasMore&&e.push(new sK.Ck(this.view,this,e[e.length-1]))),0===e.length)?[new sK._Y(this.view,this,"No line history could be found.")]:e}getTreeItem(){this.splatted=!1;let e=this.label,t=new C.TreeItem(e,C.TreeItemCollapsibleState.Expanded);return t.contextValue=sn.UZ.LineHistory,t.description=this.uri.directory,t.tooltip=`History of ${this.uri.fileName}${this.lines}
${this.uri.directory}/${null==this.uri.sha?"":`

${this.uri.sha}`}`,this.view.description=`${e}${this.parent instanceof LineHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`,t}get label(){return`${this.uri.fileName}${this.lines}${this.uri.sha?` ${this.uri.sha===Q.E1?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`}get lines(){return this.selection.isSingleLine?`:${this.selection.start.line+1}`:`:${this.selection.start.line+1}-${this.selection.end.line+1}`}subscribe(){let e=this.view.container.git.getRepository(this.uri);if(null!=e)return C.Disposable.from((0,iT.gd)(e.onDidChange,this.onRepositoryChanged,this),(0,iT.gd)(e.onDidChangeFileSystem,this.onFileSystemChanged,this,[e.watchFileSystem()]))}etag(){return Date.now()}onRepositoryChanged(e){e.changed(ty.c7.Index,ty.c7.Heads,ty.c7.Remotes,ty.c7.RemoteProviders,ty.c7.Status,ty.c7.Unknown,ty.MR.Any)&&(eq.YJ.debug(`LineHistoryNode.onRepositoryChanged(${e.toString()}); triggering node refresh`),this.triggerChange(!0))}onFileSystemChanged(e){e.uris.some(e=>e.toString()===this.uri.toString())&&(eq.YJ.debug(`LineHistoryNode.onFileSystemChanged(${this.uri.toString(!0)}); triggering node refresh`),this.triggerChange(!0))}refresh(e){e&&(this._log=void 0)}_log;async getLog(e){return null==this._log&&(this._log=await this.view.container.git.getLogForFile(this.uri.repoPath,this.uri,{all:!1,limit:this.limit??this.view.config.pageItemLimit,range:e??this.selection,ref:this.uri.sha,renames:!1})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await C.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());null!=t&&t.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1,this.splatted)))}};oJ([(0,eb.s)()],LineHistoryNode.prototype,"lines",1),oJ([(0,eW.u_)()],LineHistoryNode.prototype,"subscribe",1),oJ([(0,tZ.I)(),(0,eW.u_)()],LineHistoryNode.prototype,"refresh",1),oJ([(0,tZ.I)()],LineHistoryNode.prototype,"loadMore",1);var oK=Object.defineProperty,oZ=Object.getOwnPropertyDescriptor,oX=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?oZ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&oK(t,i,o),o};let LineHistoryTrackerNode=class LineHistoryTrackerNode extends sL.q{_base;_editorContents;_selection;splatted=!0;constructor(e){super("line-history-tracker",tm.oP,e)}dispose(){super.dispose(),this.child=void 0}_child;get child(){return this._child}set child(e){this._child!==e&&(this._child?.dispose(),this._child=e)}async getChildren(){if(null==this.child){let e;if(!this.hasUri)return this.view.description=void 0,this.view.message="There are no editors open that can provide line history information.",[];if(null==this._selection)return this.view.description=void 0,this.view.message="There was no selection provided for line history.",this.view.description=`${this.uri.fileName}${this.uri.sha?` ${this.uri.sha===Q.E1?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}${this.followingEditor?"":" (pinned)"}`,[];this.view.message=void 0;let t={...this.uri,repoPath:this.uri.repoPath,sha:this.uri.sha??this._base},i=new tm.wv(this.uri,t);t.sha&&"HEAD"!==t.sha?(0,F.kp)(t.sha)||({values:[e]}=await this.view.container.git.getBranches(this.uri.repoPath,{filter:e=>e.name===t.sha})):e=await this.view.container.git.getBranch(this.uri.repoPath),this.child=new LineHistoryNode(i,this.view,this,e,this._selection,this._editorContents)}return this.child.getChildren()}getTreeItem(){this.splatted=!1;let e=new C.TreeItem("Line History",C.TreeItemCollapsibleState.Expanded);return e.contextValue=sn.UZ.ActiveLineHistory,this.ensureSubscription(),e}get followingEditor(){return this.canSubscribe}get hasUri(){return this._uri!=tm.oP&&null!=this._uri.repoPath}async changeBase(){let e=await (0,s4.m)(this.uri.repoPath,"Change Line History Base","Choose a reference to set as the new base",{allowRevisions:!0,picked:this._base,sort:{branches:{current:!0},tags:{}}});if(null!=e){if((0,F.MN)(e)){let t=await this.view.container.git.getBranch(this.uri.repoPath);this._base=t?.name===e.name?void 0:e.ref}else this._base=e.ref;null!=this.child&&(this.setUri(),await this.triggerChange())}}async refresh(e=!1){let t=(0,eM.b1)();if(!this.canSubscribe)return!1;e&&(null!=this._uri&&this._uri!==tm.oP&&await this.view.container.documentTracker.resetCache(this._uri,"log"),this.reset());let i=C.window.activeTextEditor;if(null==i||!this.view.container.git.isTrackable(i.document.uri))return!!(!this.hasUri||this.view.container.git.isTrackable(this.uri)&&C.window.visibleTextEditors.some(e=>e.document?.uri.path===this.uri.path))||(this.reset(),(0,eM._W)(t,`, uri=${eq.YJ.toLoggable(this._uri)}`),!1);if(i.document.uri.path===this.uri.path&&null!=this._selection&&i.selection.isEqual(this._selection))return(0,eM._W)(t,`, uri=${eq.YJ.toLoggable(this._uri)}`),!0;let r=await tm.wv.fromUri(i.document.uri);return!!(this.hasUri&&i8.K.equals(r,this.uri)&&null!=this._selection&&i.selection.isEqual(this._selection))||(null==r.repoPath?this.reset():(this.setUri(r),this._editorContents=i.document.isDirty?i.document.getText():void 0,this._selection=i.selection,this.child=void 0),(0,eM._W)(t,`, uri=${eq.YJ.toLoggable(this._uri)}`),!1)}reset(){this.setUri(),this._editorContents=void 0,this._selection=void 0,this.child=void 0}setEditorFollowing(e){this.canSubscribe=e}subscribe(){if(this.view.container.lineTracker.subscribed(this))return;let e=(0,tX.Cu)(this.onActiveLinesChanged.bind(this),250);return this.view.container.lineTracker.subscribe(this,(0,iT.gd)(this.view.container.lineTracker.onDidChangeActiveLines,t=>{t.pending||e(t)},this))}etag(){return 0}onActiveLinesChanged(e){this.triggerChange()}setUri(e){this._uri=e??tm.oP,(0,iN.Qr)("gitlens:views:fileHistory:canPin",this.hasUri)}};oX([(0,tZ.I)(),(0,eW.Yz)()],LineHistoryTrackerNode.prototype,"changeBase",1),oX([(0,tZ.I)(),(0,eW.u_)({exit:!0})],LineHistoryTrackerNode.prototype,"refresh",1),oX([(0,eW.Yz)()],LineHistoryTrackerNode.prototype,"setEditorFollowing",1),oX([(0,eW.u_)()],LineHistoryTrackerNode.prototype,"subscribe",1),oX([(0,eW.u_)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map(e=>`[${e.anchor}-${e.active}]`).join(",")}, pending=${!!e.pending}, reason=${e.reason}`}})],LineHistoryTrackerNode.prototype,"onActiveLinesChanged",1);let o0=" (pinned)";let FileHistoryView=class FileHistoryView extends sV.y2{configKey="fileHistory";_followCursor=!1;_followEditor=!0;constructor(e){super(e,"fileHistory","File History","fileHistoryView"),(0,iN.Qr)("gitlens:views:fileHistory:cursorFollowing",this._followCursor),(0,iN.Qr)("gitlens:views:fileHistory:editorFollowing",this._followEditor)}get showCollapseAll(){return!1}getRoot(){return this._followCursor?new LineHistoryTrackerNode(this):new FileHistoryTrackerNode(this)}registerCommands(){return this.container.viewCommands,[oA(this.getQualifiedCommand("copy"),()=>(0,iX.gf)(_.eq.ViewsCopy,this.activeSelection,this.selection),this),oA(this.getQualifiedCommand("refresh"),()=>this.refresh(!0),this),oA(this.getQualifiedCommand("changeBase"),()=>this.changeBase(),this),oA(this.getQualifiedCommand("setCursorFollowingOn"),()=>this.setCursorFollowing(!0),this),oA(this.getQualifiedCommand("setCursorFollowingOff"),()=>this.setCursorFollowing(!1),this),oA(this.getQualifiedCommand("setEditorFollowingOn"),()=>this.setEditorFollowing(!0),this),oA(this.getQualifiedCommand("setEditorFollowingOff"),()=>this.setEditorFollowing(!1),this),oA(this.getQualifiedCommand("setRenameFollowingOn"),()=>this.setRenameFollowing(!0),this),oA(this.getQualifiedCommand("setRenameFollowingOff"),()=>this.setRenameFollowing(!1),this),oA(this.getQualifiedCommand("setShowAllBranchesOn"),()=>this.setShowAllBranches(!0),this),oA(this.getQualifiedCommand("setShowAllBranchesOff"),()=>this.setShowAllBranches(!1),this),oA(this.getQualifiedCommand("setShowMergeCommitsOn"),()=>this.setShowMergeCommits(!0),this),oA(this.getQualifiedCommand("setShowMergeCommitsOff"),()=>this.setShowMergeCommits(!1),this),oA(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),oA(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||A.i.changed(e,"defaultDateFormat")||A.i.changed(e,"defaultDateLocale")||A.i.changed(e,"defaultDateShortFormat")||A.i.changed(e,"defaultDateSource")||A.i.changed(e,"defaultDateStyle")||A.i.changed(e,"defaultGravatarsStyle")||A.i.changed(e,"defaultTimeFormat")||A.i.changed(e,"advanced.fileHistoryFollowsRenames")||A.i.changed(e,"advanced.fileHistoryShowAllBranches")||A.i.changed(e,"advanced.fileHistoryShowMergeCommits"))}async showHistoryForUri(e){this.setCursorFollowing(!1);let t=this.ensureRoot(!0);return t instanceof FileHistoryTrackerNode&&(await t.showHistoryForUri(e),this.setEditorFollowing(!1)),this.show()}changeBase(){this.root?.changeBase()}setCursorFollowing(e){let t=!this._followEditor&&this.root?.hasUri?this.root.uri:void 0;this._followCursor=e,(0,iN.Qr)("gitlens:views:fileHistory:cursorFollowing",e),this.title=this._followCursor?"Line History":"File History";let i=this.ensureRoot(!0);null!=t&&i.setUri(t),i.setEditorFollowing(this._followEditor),i.ensureSubscription(),this.refresh(!0)}setEditorFollowing(e){let t=this.ensureRoot();t.hasUri&&(this._followEditor=e,(0,iN.Qr)("gitlens:views:fileHistory:editorFollowing",e),t.setEditorFollowing(e),this.description?.endsWith(o0)?e&&(this.description=this.description.substr(0,this.description.length-o0.length)):e||null==this.description||(this.description+=o0),e&&(t.ensureSubscription(),this.refresh(!0)))}setRenameFollowing(e){return A.i.updateEffective("advanced.fileHistoryFollowsRenames",e)}setShowAllBranches(e){return A.i.updateEffective("advanced.fileHistoryShowAllBranches",e)}setShowMergeCommits(e){return A.i.updateEffective("advanced.fileHistoryShowMergeCommits",e)}setShowAvatars(e){return A.i.updateEffective(`views.${this.configKey}.avatars`,e)}};let o1=" (pinned)";let LineHistoryView=class LineHistoryView extends sV.y2{configKey="lineHistory";constructor(e){super(e,"lineHistory","Line History","lineHistoryView"),(0,iN.Qr)("gitlens:views:lineHistory:editorFollowing",!0)}get showCollapseAll(){return!1}getRoot(){return new LineHistoryTrackerNode(this)}registerCommands(){return this.container.viewCommands,[oA(this.getQualifiedCommand("copy"),()=>(0,iX.gf)(_.eq.ViewsCopy,this.activeSelection,this.selection),this),oA(this.getQualifiedCommand("refresh"),()=>this.refresh(!0),this),oA(this.getQualifiedCommand("changeBase"),()=>this.changeBase(),this),oA(this.getQualifiedCommand("setEditorFollowingOn"),()=>this.setEditorFollowing(!0),this),oA(this.getQualifiedCommand("setEditorFollowingOff"),()=>this.setEditorFollowing(!1),this),oA(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),oA(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||A.i.changed(e,"defaultDateFormat")||A.i.changed(e,"defaultDateLocale")||A.i.changed(e,"defaultDateShortFormat")||A.i.changed(e,"defaultDateSource")||A.i.changed(e,"defaultDateStyle")||A.i.changed(e,"defaultGravatarsStyle")||A.i.changed(e,"defaultTimeFormat"))}changeBase(){this.root?.changeBase()}setEditorFollowing(e){let t=this.ensureRoot();t.hasUri&&((0,iN.Qr)("gitlens:views:lineHistory:editorFollowing",e),this.root?.setEditorFollowing(e),this.description?.endsWith(o1)?e&&(this.description=this.description.substr(0,this.description.length-o1.length)):e||null==this.description||(this.description+=o1),e&&(t.ensureSubscription(),this.refresh(!0)))}setShowAvatars(e){return A.i.updateEffective(`views.${this.configKey}.avatars`,e)}};var o2=Object.defineProperty,o4=Object.getOwnPropertyDescriptor;let RemoteNode=class RemoteNode extends sn.sl{constructor(e,t,i,r,s){super("remote",e,t,i),this.parent=i,this.repo=r,this.remote=s,this.updateContext({repository:r,remote:s}),this._uniqueId=(0,sn.QP)(this.type,this.context)}get id(){return this._uniqueId}toClipboard(){return this.remote.name}get repoPath(){return this.repo.path}async getChildren(){let e=await this.repo.getBranches({filter:e=>e.remote&&e.name.startsWith(this.remote.name),sort:!0});if(0===e.values.length)return[new sK._Y(this.view,this,"No branches could be found.")];let t=e.values.map(e=>new BranchNode(tm.wv.fromRepoPath(this.uri.repoPath,e.ref),this.view,this,this.repo,e,!1,{showComparison:!1,showTracking:!1}));if("list"===this.view.config.branches.layout)return t;let i=(0,N.IJ)(t,e=>e.treeHierarchy,(...e)=>e.join("/"),this.view.config.files.compact,e=>(e.compacted=!0,!0));return new BranchOrTagFolderNode(this.view,this,"remote-branch",i,this.repo.path,"",void 0).getChildren()}async getTreeItem(){let e=new C.TreeItem(this.remote.name,C.TreeItemCollapsibleState.Collapsed);if(e.id=this.id,e.description=(0,tw.yK)(this.remote),null!=this.remote.provider){let{provider:t}=this.remote;if(e.iconPath=null!=t.avatarUri&&this.view.config.avatars?t.avatarUri:"remote"===t.icon?new C.ThemeIcon("cloud"):{dark:this.view.container.context.asAbsolutePath(`images/dark/icon-${t.icon}.svg`),light:this.view.container.context.asAbsolutePath(`images/light/icon-${t.icon}.svg`)},this.remote.hasIntegration()){let i=this.view.container.integrations.getByRemote(this.remote),r=i?.maybeConnected??await i?.isConnected();e.contextValue=`${sn.UZ.Remote}${r?"+connected":"+disconnected"}`,e.tooltip=`${this.remote.name} (${t.name} ${_.or.Dash} ${r?"connected":"not connected"})
${t.displayPath}
`}else e.contextValue=sn.UZ.Remote,e.tooltip=`${this.remote.name} (${t.name})
${t.displayPath}
`}else e.contextValue=sn.UZ.Remote,e.iconPath=new C.ThemeIcon("cloud"),e.tooltip=`${this.remote.name} (${this.remote.domain})
${this.remote.path}
`;for(let{type:t,url:i}of(this.remote.default&&(e.contextValue+="+default",e.resourceUri=C.Uri.parse("gitlens-view://remote/default")),this.remote.urls))e.tooltip+=`
${i} (${t})`;return e}async setAsDefault(e=!0){await this.remote.setAsDefault(e),this.triggerChange()}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?o4(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&o2(t,i,o)})([(0,eW.Yz)()],RemoteNode.prototype,"setAsDefault",1);var o6=Object.defineProperty,o3=Object.getOwnPropertyDescriptor;let RemotesNode=class RemotesNode extends sY.o{constructor(e,t,i,r){super("remotes",e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,sn.QP)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){let e=await this.repo.getRemotes({sort:!0});if(0===e.length)return[new sK._Y(this.view,this,"No remotes could be found")];this.children=e.map(e=>new RemoteNode(this.uri,this.view,this,this.repo,e))}return this.children}getTreeItem(){let e=new C.TreeItem("Remotes",C.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=sn.UZ.Remotes,e.iconPath=new C.ThemeIcon("cloud"),e}refresh(){super.refresh(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?o3(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&o6(t,i,o)})([(0,eW.u_)()],RemotesNode.prototype,"refresh",1);var o8=Object.defineProperty,o7=Object.getOwnPropertyDescriptor,o5=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?o7(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&o8(t,i,o),o};let ReflogRecordNode=class ReflogRecordNode extends sn.sl{constructor(e,t,i){super("reflog-record",tm.wv.fromRepoPath(i.repoPath),e,t),this.record=i,this.updateContext({reflog:i}),this._uniqueId=(0,sn.QP)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}async getChildren(){let e=await this.getLog();if(void 0===e)return[new sK._Y(this.view,this,"No commits could be found.")];let t=[...(0,eN.kH)(e.commits.values(),e=>new sJ.s(this.view,this,e))];return e.hasMore&&t.push(new sK.Ck(this.view,this,t[t.length-1])),t}getTreeItem(){let e=new C.TreeItem(`${this.record.command}${this.record.commandArgs?` ${this.record.commandArgs}`:""}`,C.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.description=`${0===this.record.HEAD.length?"":`${this.record.HEAD} ${_.or.Space}${_.or.Dot}${_.or.Space} `}${this.record.formattedDate}`,e.contextValue=sn.UZ.ReflogRecord,e.tooltip=`${0===this.record.HEAD.length?"":`${this.record.HEAD}
`}${this.record.command}${this.record.commandArgs?` ${this.record.commandArgs}`:""}${this.record.details?` (${this.record.details})`:""}
${this.record.formatDateFromNow()} (${this.record.formatDate()})
${this.record.previousShortSha} ${_.or.Space}${_.or.ArrowRight}${_.or.Space} ${this.record.shortSha}`,e}refresh(e){e&&(this._log=void 0)}_log;async getLog(){if(void 0===this._log){let e=`${this.record.previousSha}..${this.record.sha}`;this._log=await this.view.container.git.getLog(this.uri.repoPath,{limit:this.limit??this.view.config.defaultItemLimit,ref:e})}return this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await C.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());void 0!==t&&t.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}};o5([(0,tZ.I)(),(0,eW.u_)()],ReflogRecordNode.prototype,"refresh",1),o5([(0,tZ.I)()],ReflogRecordNode.prototype,"loadMore",1);var o9=Object.defineProperty,ne=Object.getOwnPropertyDescriptor;let ReflogNode=class ReflogNode extends sY.o{constructor(e,t,i,r){super("reflog",e,t,i),this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,sn.QP)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}async getChildren(){if(void 0===this.children){let e=[],t=await this.getReflog();if(void 0===t||0===t.records.length)return[new sK._Y(this.view,this,"No activity could be found.")];e.push(...t.records.map(e=>new ReflogRecordNode(this.view,this,e))),t.hasMore&&e.push(new sK.Ck(this.view,this,e[e.length-1])),this.children=e}return this.children}getTreeItem(){let e=new C.TreeItem("Incoming Activity",C.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=sn.UZ.Reflog,e.description="experimental",e.iconPath={dark:this.view.container.context.asAbsolutePath("images/dark/icon-activity.svg"),light:this.view.container.context.asAbsolutePath("images/light/icon-activity.svg")},e}refresh(e){super.refresh(!0),e&&(this._reflog=void 0)}_reflog;async getReflog(){return void 0===this._reflog&&(this._reflog=await this.view.container.git.getIncomingActivity(this.repo.path,{all:!0,limit:this.limit??this.view.config.defaultItemLimit})),this._reflog}get hasMore(){return this._reflog?.hasMore??!0}async loadMore(e){let t=await this.getReflog();void 0!==t&&t.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._reflog!==t&&(this._reflog=t,this.limit=t?.count,this.triggerChange(!1)))}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ne(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&o9(t,i,o)})([(0,eW.u_)()],ReflogNode.prototype,"refresh",1);var nt=i(8468),ni=Object.defineProperty,nr=Object.getOwnPropertyDescriptor;let StashesNode=class StashesNode extends sY.o{constructor(e,t,i,r){super("stashes",e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,sn.QP)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){let e=await this.repo.getStash();if(null==e)return[new sK._Y(this.view,this,"No stashes could be found.")];this.children=[...(0,eN.kH)(e.commits.values(),e=>new nt.m(this.view,this,e))]}return this.children}getTreeItem(){let e=new C.TreeItem("Stashes",C.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=sn.UZ.Stashes,e.iconPath=new C.ThemeIcon("gitlens-stashes"),e}refresh(){super.refresh(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?nr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ni(t,i,o)})([(0,eW.u_)()],StashesNode.prototype,"refresh",1);let StatusFilesNode=class StatusFilesNode extends sn.sl{constructor(e,t,i,r){super("status-files",tm.wv.fromRepoPath(i.repoPath),e,t),this.parent=t,this.status=i,this.range=r,this._uniqueId=(0,sn.QP)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.status.repoPath}async getChildren(){let e,t=[],i=this.repoPath;null!=this.range&&null!=(e=await this.view.container.git.getLog(i,{limit:0,ref:this.range}))&&(await Promise.allSettled((0,eN.kH)((0,eN.IF)(e.commits.values(),e=>null==e.files),e=>e.ensureFullDetails())),t=[...(0,eN.sX)(e.commits.values(),e=>e.files?.map(t=>({...t,commit:e}))??[])]),("worktrees"===this.view.type||this.view.config.includeWorkingTree)&&0!==this.status.files.length&&t.unshift(...(0,eN.sX)(this.status.files,e=>(0,eN.kH)(e.getPseudoCommits(this.view.container,void 0),t=>this.getFileWithPseudoCommit(e,t)))),t.sort((e,t)=>t.commit.date.getTime()-e.commit.date.getTime());let r=Object.values((0,eN.aS)(t,e=>e.path)).map(e=>new sj.k(this.view,this,e[e.length-1],i,e.map(e=>e.commit),"working"));if("list"!==this.view.config.files.layout){let e=(0,N.IJ)(r,e=>e.uri.relativePath.split("/"),(...e)=>(0,q.ay)((0,q.En)(...e)),this.view.config.files.compact);r=new sH.s(this.view,this,e,i,"",void 0,!0).getChildren()}else r.sort((e,t)=>e.priority-t.priority||(0,L.sd)(e.label,t.label));return r}async getTreeItem(){let e="worktrees"===this.view.type||this.view.config.includeWorkingTree?this.status.files.length:0;if(null!=this.range&&null!=this.status.upstream&&this.status.state.ahead>0){if(e>0){let t=await this.view.container.git.getDiffStatus(this.repoPath,`${this.status.upstream}...`);if(null!=t){let i=new Set;for(let e of this.status.files)i.add(e.path);for(let e of t)i.add(e.path);e=i.size}}else{let t=await this.view.container.git.getChangedFilesCount(this.repoPath,`${this.status.upstream}...`);null!=t?e+=t.changedFiles:e=-1}}let t=-1===e?"?? files changed":`${(0,L.u)("file",e)} changed`,i=new C.TreeItem(t,C.TreeItemCollapsibleState.Collapsed);return i.description="working tree",i.id=this.id,i.contextValue=sn.UZ.StatusFiles,i.iconPath={dark:this.view.container.context.asAbsolutePath("images/dark/icon-diff.svg"),light:this.view.container.context.asAbsolutePath("images/light/icon-diff.svg")},i}getFileWithPseudoCommit(e,t){return{status:e.status,repoPath:e.repoPath,indexStatus:e.indexStatus,workingTreeStatus:e.workingTreeStatus,path:e.path,originalPath:e.originalPath,commit:t}}};var ns=Object.defineProperty,no=Object.getOwnPropertyDescriptor,nn=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?no(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ns(t,i,o),o};let TagNode=class TagNode extends sz.e{constructor(e,t,i,r){super("tag",e,t,i),this.parent=i,this.tag=r,this.updateContext({tag:r}),this._uniqueId=(0,sn.QP)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}toClipboard(){return this.tag.name}get label(){return"tree"===this.view.config.branches.layout?this.tag.getBasename():this.tag.name}get ref(){return this.tag}async getChildren(){let e=await this.getLog();if(null==e)return[new sK._Y(this.view,this,"No commits could be found.")];let t=await this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath,this.tag.name),i=[...(0,sZ.c)((0,eN.kH)(e.commits.values(),e=>new sJ.s(this.view,this,e,void 0,void 0,t)),this)];return e.hasMore&&i.push(new sK.Ck(this.view,this,i[i.length-1],{getCount:()=>this.view.container.git.getCommitCount(this.tag.repoPath,this.tag.name)})),i}getTreeItem(){let e=new C.TreeItem(this.label,C.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=sn.UZ.Tag,e.description=(0,tp.I)(this.tag.message),e.tooltip=`${this.tag.name}${(0,L.eu)(_.or.Dash,2,2)}${(0,F.c5)(this.tag.sha,{force:!0})}${null!=this.tag.date?`
${this.tag.formatDateFromNow()} (${this.tag.formatDate(this.view.container.TagDateFormatting.dateFormat)})`:""}

${(0,tp.I)(this.tag.message)}${null!=this.tag.commitDate&&this.tag.date!==this.tag.commitDate?`
${this.tag.formatCommitDateFromNow()} (${this.tag.formatCommitDate(this.view.container.TagDateFormatting.dateFormat)})`:""}`,e}refresh(e){e&&(this._log=void 0)}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.getLog(this.uri.repoPath,{limit:this.limit??this.view.config.defaultItemLimit,ref:this.tag.name})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await C.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());null!=t&&t.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}};nn([(0,tZ.I)(),(0,eW.u_)()],TagNode.prototype,"refresh",1),nn([(0,tZ.I)()],TagNode.prototype,"loadMore",1);var na=Object.defineProperty,nl=Object.getOwnPropertyDescriptor;let TagsNode=class TagsNode extends sY.o{constructor(e,t,i,r){super("tags",e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,sn.QP)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){let e=await this.repo.getTags({sort:!0});if(0===e.values.length)return[new sK._Y(this.view,this,"No tags could be found.")];let t=e.values.map(e=>new TagNode(tm.wv.fromRepoPath(this.uri.repoPath,e.ref),this.view,this,e));if("list"===this.view.config.branches.layout)return t;let i=(0,N.IJ)(t,e=>e.tag.name.split("/"),(...e)=>e.join("/"),this.view.config.files.compact),r=new BranchOrTagFolderNode(this.view,this,"tag",i,this.repo.path,"",void 0);this.children=r.getChildren()}return this.children}getTreeItem(){let e=new C.TreeItem("Tags",C.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=sn.UZ.Tags,e.iconPath=new C.ThemeIcon("tag"),e}refresh(){super.refresh(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?nl(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&na(t,i,o)})([(0,eW.u_)()],TagsNode.prototype,"refresh",1);let UncommittedFileNode=class UncommittedFileNode extends ot.U{constructor(e,t,i,r){super("uncommitted-file",tm.wv.fromFile(r,i),e,t,r)}toClipboard(){return this.path}get path(){return this.file.path}getChildren(){return[]}getTreeItem(){let e=new C.TreeItem(this.label,C.TreeItemCollapsibleState.None);e.contextValue=sn.UZ.File,e.description=this.description,e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath);let t=(0,G.YX)(this.file.status);return e.iconPath={dark:this.view.container.context.asAbsolutePath((0,q.En)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,q.En)("images","light",t))},e.tooltip=oe.o.fromTemplate(`\${file}
\${directory}/

\${status}\${ (originalPath)}`,this.file),e.command=this.getCommand(),this._label=void 0,this._description=void 0,e}_description;get description(){return null==this._description&&(this._description=oe.o.fromTemplate(this.view.config.formats.files.description,{...this.file},{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return null==this._folderName&&(this._folderName=(0,q.Jl)(this.uri.relativePath)),this._folderName}_label;get label(){return null==this._label&&(this._label=oe.o.fromTemplate("${file}",{...this.file},{relativePath:this.relativePath})),this._label}get priority(){return 0}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getCommand(){let e={uri:tm.wv.fromFile(this.file,this.repoPath),line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:_.eq.DiffWithPrevious,arguments:[void 0,e]}}};let UncommittedFilesNode=class UncommittedFilesNode extends sn.sl{constructor(e,t,i,r){super("uncommitted-files",tm.wv.fromRepoPath(i.repoPath),e,t),this.parent=t,this.status=i,this.range=r,this._uniqueId=(0,sn.QP)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.status.repoPath}getChildren(){let e=this.repoPath,t=[...(0,eN.sX)(this.status.files,e=>e.getPseudoCommits(this.view.container,void 0).map(t=>({status:e.status,repoPath:e.repoPath,indexStatus:e.indexStatus,workingTreeStatus:e.workingTreeStatus,path:e.path,originalPath:e.originalPath,commit:t})))];t.sort((e,t)=>t.commit.date.getTime()-e.commit.date.getTime());let i=Object.values((0,eN.aS)(t,e=>e.path)).map(t=>new UncommittedFileNode(this.view,this,e,t[t.length-1]));if("list"!==this.view.config.files.layout){let t=(0,N.IJ)(i,e=>e.uri.relativePath.split("/"),(...e)=>(0,q.ay)((0,q.En)(...e)),this.view.config.files.compact);i=new sH.s(this.view,this,t,e,"",void 0,!0).getChildren()}else i.sort((e,t)=>e.priority-t.priority||e.label.localeCompare(t.label,void 0,{numeric:!0,sensitivity:"base"}));return i}getTreeItem(){let e=new C.TreeItem("Uncommitted changes",C.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=sn.UZ.UncommittedFiles,e.iconPath=new C.ThemeIcon("folder"),e}};var nh=Object.defineProperty,nc=Object.getOwnPropertyDescriptor,nu=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nc(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nh(t,i,o),o};let WorktreeNode=class WorktreeNode extends sY.o{constructor(e,t,i,r){super("worktree",e,t,i),this.parent=i,this.worktree=r,this.updateContext({worktree:r}),this._uniqueId=(0,sn.QP)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;_branch;get id(){return this._uniqueId}toClipboard(){return this.worktree.uri.fsPath}get repoPath(){return this.uri.repoPath}async getChildren(){if(null==this.children){let e,t;let i=this._branch;if(null!=i&&this.view.config.pullRequests.enabled&&this.view.config.pullRequests.showForBranches&&(null!=i.upstream||i.remote)&&(0,iN.wp)("gitlens:hasConnectedRemotes")&&void 0===(t=this.getState("pullRequest"))&&void 0===this.getState("pendingPullRequest")){e=(0,t0.Qv)();let t=this.getAssociatedPullRequest(i,{include:["opened","merged"]});queueMicrotask(async()=>{await e?.promise;let r=!1,s=setTimeout(()=>{r=!0,this.view.triggerNodeChange(this)},250),o=await t;clearTimeout(s),null!=o&&null!=this.children&&this.children.splice(0,0,new sa.c(this.view,this,o,i)),(r||null!=o)&&this.view.triggerNodeChange(this)})}let[r,s,o,n]=await Promise.allSettled([this.getLog(),this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath),this.worktree.getStatus(),null==i||i.remote?void 0:this.view.container.git.getBranchAheadRange(i).then(e=>e?this.view.container.git.getLogRefsOnly(this.uri.repoPath,{limit:0,ref:e}):void 0)]),a=(0,t0.Cv)(r);if(null==a)return[new sK._Y(this.view,this,"No commits could be found.")];let l=[];null!=i&&null!=t&&l.push(new sa.c(this.view,this,t,i)),null!=i&&!1!==this.view.config.showBranchComparison&&l.push(new CompareBranchNode(this.uri,this.view,this,i,this.view.config.showBranchComparison,this.splatted));let h=(0,t0.Cv)(n),c=(0,t0.Cv)(s);l.push(...(0,sZ.c)((0,eN.kH)(a.commits.values(),e=>new sJ.s(this.view,this,e,h?.has(e.ref),i,c)),this)),a.hasMore&&l.push(new sK.Ck(this.view,this,l[l.length-1]));let u=(0,t0.Cv)(o);u?.hasChanges&&l.unshift(new UncommittedFilesNode(this.view,this,u,void 0)),this.children=l,e?.fulfill()}return this.children}async getTreeItem(){let e;this.splatted=!1;let t="",i=new C.MarkdownString("",!0),r=!1,s=this.worktree.main||this.worktree.opened?`${(0,L.eu)(_.or.Dash,2,2)} ${this.worktree.main?`_Main${this.worktree.opened?", Active_":"_"}`:this.worktree.opened?"_Active_":""} `:"",o=!1;switch(this.worktree.type){case"bare":e=new C.ThemeIcon("folder"),i.appendMarkdown(`${this.worktree.main?"$(pass) ":""}Bare Worktree${s}\\
\`${this.worktree.friendlyPath}\``);break;case"branch":{let[n,a]=await Promise.allSettled([this.worktree.getBranch(),this.worktree.getStatus()]),l=(0,t0.Cv)(n),h=(0,t0.Cv)(a);if(this._branch=l,i.appendMarkdown(`${this.worktree.main?"$(pass) ":""}Worktree for Branch $(git-branch) ${l?.getNameWithoutRemote()??this.worktree.branch}${s}\\
\`${this.worktree.friendlyPath}\``),e=new C.ThemeIcon("git-branch"),null!=h?(r=h.hasChanges,i.appendMarkdown(`

${h.getFormattedDiffStatus({prefix:"Has Uncommitted Changes\\\n",empty:"No Uncommitted Changes",expand:!0})}`)):"rejected"===a.status&&(eq.YJ.error(a.reason,"Worktree status failed"),o=!0),null!=l&&(i.appendMarkdown(`

Branch $(git-branch) ${l.getNameWithoutRemote()}`),!l.remote)){if(null!=l.upstream){let e=_.or.Dash,r=await l.getRemote();if(l.upstream.missing)e=_.or.Warning;else if(null!=r){let t,i;for(let{type:e}of r.urls)if("fetch"===e){if(t=!0,i)break}else if("push"===e&&(i=!0,t))break;t&&i?e=_.or.ArrowsRightLeft:i?e=_.or.ArrowRight:t&&(e=_.or.ArrowLeft)}t=`${l.getTrackingStatus({empty:(0,L.eu)(e,0,2),suffix:(0,L.eu)(e,2,2)})}${l.upstream.name}`,i.appendMarkdown(` is ${l.getTrackingStatus({empty:l.upstream.missing?`missing upstream $(git-branch) ${l.upstream.name}`:`up to date with $(git-branch)  ${l.upstream.name}${r?.provider?.name?` on ${r.provider.name}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${l.upstream.name}${r?.provider?.name?` on ${r.provider.name}`:""}`})}`)}else{let e=(0,tw.yj)(await this.view.container.git.getRemotesWithProviders(l.repoPath));i.appendMarkdown(` hasn't been published to ${e??"a remote"}`)}}break}case"detached":{let t;e=new C.ThemeIcon("git-commit"),i.appendMarkdown(`${this.worktree.main?"$(pass) ":""}Detached Worktree at $(git-commit) ${(0,F.c5)(this.worktree.sha)}${s}\\
\`${this.worktree.friendlyPath}\``);try{t=await this.worktree.getStatus()}catch(e){eq.YJ.error(e,"Worktree status failed"),o=!0}null!=t&&(r=t.hasChanges,i.appendMarkdown(`

${t.getFormattedDiffStatus({prefix:"Has Uncommitted Changes",empty:"No Uncommitted Changes",expand:!0})}`))}}let n=this.getState("pendingPullRequest");null!=n&&i.appendMarkdown(`

$(loading~spin) Loading associated pull request${_.or.Ellipsis}`),o&&i.appendMarkdown(`

${_.or.Warning} Unable to locate worktree path`);let a=new C.TreeItem(this.worktree.name,C.TreeItemCollapsibleState.Collapsed);return a.id=this.id,a.description=t,a.contextValue=`${sn.UZ.Worktree}${this.worktree.main?"+main":""}${this.worktree.opened?"+active":""}`,a.iconPath=null!=n?new C.ThemeIcon("loading~spin"):this.worktree.opened?new C.ThemeIcon("check"):e,a.tooltip=i,a.resourceUri=o?C.Uri.parse("gitlens-view://worktree/missing"):r?C.Uri.parse("gitlens-view://worktree/changes"):void 0,a}refresh(e){super.refresh(!0),e&&(this._log=void 0,this.deleteState())}async getAssociatedPullRequest(e,t){let i=this.getState("pullRequest");if(void 0!==i)return Promise.resolve(i??void 0);let r=this.getState("pendingPullRequest");return null==r?(r=e.getAssociatedPullRequest(t),this.storeState("pendingPullRequest",r),i=await r,this.storeState("pullRequest",i??null),this.deleteState("pendingPullRequest"),i):r}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.getLog(this.uri.repoPath,{ref:this.worktree.sha,limit:this.limit??this.view.config.defaultItemLimit})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await C.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());null!=t&&t.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.children=void 0,this.triggerChange(!1)))}};nu([(0,eW.u_)()],WorktreeNode.prototype,"refresh",1),nu([(0,tZ.I)()],WorktreeNode.prototype,"loadMore",1);var nd=Object.defineProperty,np=Object.getOwnPropertyDescriptor;let WorktreesNode=class WorktreesNode extends sY.o{constructor(e,t,i,r){super("worktrees",e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,sn.QP)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){if(!(await this.repo.access(tg.i.Worktrees)).allowed)return[];let e=await this.repo.getWorktrees();if(0===e.length)return[new sK._Y(this.view,this,"No worktrees could be found.")];this.children=e.map(e=>new WorktreeNode(this.uri,this.view,this,e))}return this.children}async getTreeItem(){let e=await this.repo.access(tg.i.Worktrees),t=new C.TreeItem("Worktrees",e.allowed?C.TreeItemCollapsibleState.Collapsed:C.TreeItemCollapsibleState.None);return t.id=this.id,t.contextValue=sn.UZ.Worktrees,t.description=e.allowed?void 0:` ${_.or.Warning}  Requires a trial or paid plan for use on privately hosted repos`,t.iconPath=new C.ThemeIcon("folder-opened"),t}refresh(){super.refresh(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?np(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nd(t,i,o)})([(0,eW.u_)()],WorktreesNode.prototype,"refresh",1);var ng=Object.defineProperty,nm=Object.getOwnPropertyDescriptor,nf=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nm(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ng(t,i,o),o};let RepositoryNode=class RepositoryNode extends sL.q{constructor(e,t,i,r,s){super("repository",e,t,i),this.repo=r,this.updateContext({...s,repository:this.repo}),this._uniqueId=(0,sn.QP)(this.type,this.context),this._status=this.repo.getStatus()}_status;get id(){return this._uniqueId}toClipboard(){return this.repo.path}get repoPath(){return this.repo.path}get workspace(){return this.context.workspace}get wsRepositoryDescriptor(){return this.context.wsRepositoryDescriptor}async getChildren(){if(void 0===this.children){let e=[],t=await this._status;if(null!=t){let i=new x.SY(this.view.container,t.repoPath,t.branch,!1,!0,void 0,t.sha,t.upstream?{name:t.upstream,missing:!1}:void 0,t.state.ahead,t.state.behind,t.detached,t.rebasing),[r,s]=await Promise.all([this.view.container.git.getMergeStatus(t.repoPath),this.view.container.git.getRebaseStatus(t.repoPath)]);null!=r?e.push(new MergeStatusNode(this.view,this,i,r,t,!0)):null!=s?e.push(new RebaseStatusNode(this.view,this,i,s,t,!0)):this.view.config.showUpstreamStatus&&(t.upstream?t.state.behind||t.state.ahead?(t.state.behind&&e.push(new BranchTrackingStatusNode(this.view,this,i,t,"behind",!0)),t.state.ahead&&e.push(new BranchTrackingStatusNode(this.view,this,i,t,"ahead",!0,{showAheadCommits:!0}))):e.push(new BranchTrackingStatusNode(this.view,this,i,t,"same",!0)):e.push(new BranchTrackingStatusNode(this.view,this,i,t,"none",!0))),this.view.config.includeWorkingTree&&0!==t.files.length&&e.push(new StatusFilesNode(this.view,this,t,void 0)),!1!==this.view.config.showBranchComparison&&e.push(new CompareBranchNode(this.uri,this.view,this,i,this.view.config.showBranchComparison,!0)),0===e.length||this.view.config.compact||e.push(new sK._Y(this.view,this,"",_.or.Dash.repeat(2),"")),this.view.config.showCommits&&e.push(new BranchNode(this.uri,this.view,this,this.repo,i,!0,{showAsCommits:!0,showComparison:!1,showCurrent:!1,showStatus:!1,showTracking:!1}))}this.view.config.showBranches&&e.push(new BranchesNode(this.uri,this.view,this,this.repo)),this.view.config.showRemotes&&e.push(new RemotesNode(this.uri,this.view,this,this.repo)),this.view.config.showStashes&&await this.repo.supports(tg.B.Stashes)&&e.push(new StashesNode(this.uri,this.view,this,this.repo)),this.view.config.showTags&&e.push(new TagsNode(this.uri,this.view,this,this.repo)),this.view.config.showWorktrees&&await this.repo.supports(tg.B.Worktrees)&&e.push(new WorktreesNode(this.uri,this.view,this,this.repo)),this.view.config.showContributors&&e.push(new ContributorsNode(this.uri,this.view,this,this.repo)),this.view.config.showIncomingActivity&&!this.repo.provider.virtual&&e.push(new ReflogNode(this.uri,this.view,this,this.repo)),this.children=e}return this.children}async getTreeItem(){let e;let t=this.repo.formattedName??this.uri.repoPath??"",i=await this.repo?.getLastFetched()??0,r=`${this.repo.formattedName??this.uri.repoPath??""}${i?`${(0,L.eu)(_.or.Dash,2,2)}Last fetched ${ty.Oq.formatLastFetched(i,!1)}`:""}${this.repo.formattedName?`\\
${this.uri.repoPath}`:""}`,s="",{workspace:o}=this.context,n=sn.UZ.Repository;this.repo.starred&&(n+="+starred"),null!=o&&(n+="+workspace","cloud"===o.type?n+="+cloud":"local"===o.type&&(n+="+local"));let a="",l="";this.repo.closed?(n+="+closed",a=""):a="-solid",this.repo.virtual&&(n+="+virtual",a="-cloud");let h=await this._status;if(null!=h){let t;r+=`

Current branch $(git-branch) ${h.branch}${h.rebasing?" (Rebasing)":""}`,this.view.config.includeWorkingTree&&0!==h.files.length&&(s=h.getFormattedDiffStatus({compact:!0,prefix:(0,L.eu)(_.or.Dot,1,1)}));let i=h.getUpstreamStatus({suffix:(0,L.eu)(_.or.Dot,1,1)});if(e=`${i}${h.branch}${h.rebasing?" (Rebasing)":""}${s}`,null!=h.upstream){let e=(0,tw.U$)(await this.view.container.git.getRemotesWithProviders(h.repoPath));t=e?.length?e[0].name:void 0}else{let e=await h.getRemote();t=e?.provider?.name}null!=h.upstream&&(r+=` is ${h.getUpstreamStatus({empty:`up to date with $(git-branch) ${h.upstream}${t?` on ${t}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${h.upstream}${t?` on ${t}`:""}`})}`,h.state.behind&&(n+="+behind",l="-red"),h.state.ahead&&(n+="+ahead",l=h.state.behind?"-yellow":"-green")),s&&(r+=`

Working tree has uncommitted changes${h.getFormattedDiffStatus({expand:!0,prefix:"\n",separator:"\n"})}`,l="-blue")}null!=o&&(r+=`

Repository is ${this.repo.closed?"not ":""}open in the current window`);let c=new C.TreeItem(t,null!=o||"workspaces"===this.view.type?C.TreeItemCollapsibleState.Collapsed:C.TreeItemCollapsibleState.Expanded);c.id=this.id,c.contextValue=n,c.description=`${e??""}${i?`${(0,L.eu)(_.or.Dot,1,1)}Last fetched ${ty.Oq.formatLastFetched(i)}`:""}`,c.iconPath={dark:this.view.container.context.asAbsolutePath(`images/dark/icon-repo${a}${l}.svg`),light:this.view.container.context.asAbsolutePath(`images/light/icon-repo${a}${l}.svg`)},null==o||this.repo.closed||(c.resourceUri=C.Uri.parse("gitlens-view://workspaces/repository/open"));let u=new C.MarkdownString(r,!0);return u.supportHtml=!0,u.isTrusted=!0,c.tooltip=u,c}fetch(e={}){return this.repo.fetch(e)}pull(e={}){return this.repo.pull(e)}push(e={}){return this.repo.push(e)}async refresh(e=!1){super.refresh(e),e&&(this._status=this.repo.getStatus()),await this.ensureSubscription()}async star(){await this.repo.star(),this.parent.triggerChange()}async unstar(){await this.repo.unstar(),this.parent.triggerChange()}async subscribe(){let e=await this.repo?.getLastFetched()??0,t=[(0,iT.gd)(this.repo.onDidChange,this.onRepositoryChanged,this)],i=ty.Oq.getLastFetchedUpdateInterval(e);return 0!==e&&i>0&&t.push((0,tX._m)(()=>{i!==ty.Oq.getLastFetchedUpdateInterval(e)&&this.resetSubscription(),this.splatted?this.view.triggerNodeChange(this.parent??this):this.view.triggerNodeChange(this)},i)),this.view.config.includeWorkingTree&&t.push((0,iT.gd)(this.repo.onDidChangeFileSystem,this.onFileSystemChanged,this,[this.repo.watchFileSystem()])),C.Disposable.from(...t)}etag(){return this.repo.etag}async onFileSystemChanged(e){if(this._status=this.repo.getStatus(),void 0!==this.children){let e=await this._status,t=this.children.findIndex(e=>"status-files"===e.type);if(void 0!==e&&(e.state.ahead||0!==e.files.length)){let i=1;-1===t&&(t=(0,N.ai)(this.children,e=>"tracking-status"===e.type||"branch"===e.type),i=0,t++),this.children.splice(t,i,new StatusFilesNode(this.view,this,e,void 0))}else -1!==t&&this.children.splice(t,1)}this.triggerChange(!1)}onRepositoryChanged(e){if(e.changed(ty.c7.Closed,ty.MR.Any)){this.dispose();return}if(null==this.children||e.changed(ty.c7.Config,ty.c7.Index,ty.c7.Heads,ty.c7.Opened,ty.c7.Status,ty.c7.Unknown,ty.MR.Any)){this.triggerChange(!0);return}if(e.changed(ty.c7.Remotes,ty.c7.RemoteProviders,ty.MR.Any)){let e=this.children.find(e=>"remotes"===e.type);null!=e&&this.view.triggerNodeChange(e)}if(e.changed(ty.c7.Stash,ty.MR.Any)){let e=this.children.find(e=>"stashes"===e.type);null!=e&&this.view.triggerNodeChange(e)}if(e.changed(ty.c7.Tags,ty.MR.Any)){let e=this.children.find(e=>"tags"===e.type);null!=e&&this.view.triggerNodeChange(e)}}};nf([(0,eW.Yz)()],RepositoryNode.prototype,"fetch",1),nf([(0,eW.Yz)()],RepositoryNode.prototype,"pull",1),nf([(0,eW.Yz)()],RepositoryNode.prototype,"push",1),nf([(0,tZ.I)(),(0,eW.u_)()],RepositoryNode.prototype,"refresh",1),nf([(0,eW.Yz)()],RepositoryNode.prototype,"star",1),nf([(0,eW.Yz)()],RepositoryNode.prototype,"unstar",1),nf([(0,eW.u_)()],RepositoryNode.prototype,"subscribe",1),nf([(0,eW.u_)({args:{0:e=>`{ repository: ${e.repository?.name??""}, uris(${e.uris.length}): [${e.uris.slice(0,1).map(e=>e.fsPath).join(", ")}${e.uris.length>1?", ...":""}] }`}})],RepositoryNode.prototype,"onFileSystemChanged",1),nf([(0,eW.u_)({args:{0:e=>e.toString()}})],RepositoryNode.prototype,"onRepositoryChanged",1);var nw=Object.defineProperty,nv=Object.getOwnPropertyDescriptor,ny=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nv(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nw(t,i,o),o};let RemotesRepositoryNode=class RemotesRepositoryNode extends sG.Q{async getChildren(){return null==this.child&&(this.child=new RemotesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(ty.c7.Config,ty.c7.Remotes,ty.c7.RemoteProviders,ty.c7.Unknown,ty.MR.Any)}};let RemotesViewNode=class RemotesViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(null==this.children){let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message=this.view.container.git.isDiscoveringRepositories?"Loading remotes...":"No remotes could be found.",[];this.view.message=void 0;let t=1===e.length;this.children=e.map(e=>new RemotesRepositoryNode(tm.wv.fromRepoPath(e.path),this.view,this,e,t))}if(1===this.children.length){let[e]=this.children,t=await e.repo.getRemotes();return 0===t.length?(this.view.message="No remotes could be found.",this.view.title="Remotes",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Remotes (${t.length})`,e.getChildren())}return this.view.title="Remotes",this.children}getTreeItem(){return new C.TreeItem("Remotes",C.TreeItemCollapsibleState.Expanded)}};let RemotesView=class RemotesView extends sV.y2{configKey="remotes";constructor(e){super(e,"remotes","Remotes","remotesView")}get canReveal(){return this.config.reveal||!A.i.get("views.repositories.showRemotes")}getRoot(){return new RemotesViewNode(this)}registerCommands(){return this.container.viewCommands,[oA(this.getQualifiedCommand("copy"),()=>(0,iX.gf)(_.eq.ViewsCopy,this.activeSelection,this.selection),this),oA(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("branches","remotes"),this.refresh(!0)),this),oA(this.getQualifiedCommand("setLayoutToList"),()=>this.setLayout("list"),this),oA(this.getQualifiedCommand("setLayoutToTree"),()=>this.setLayout("tree"),this),oA(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),oA(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),oA(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),oA(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),oA(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),oA(this.getQualifiedCommand("setShowBranchPullRequestOn"),()=>this.setShowBranchPullRequest(!0),this),oA(this.getQualifiedCommand("setShowBranchPullRequestOff"),()=>this.setShowBranchPullRequest(!1),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||A.i.changed(e,"defaultDateFormat")||A.i.changed(e,"defaultDateLocale")||A.i.changed(e,"defaultDateShortFormat")||A.i.changed(e,"defaultDateSource")||A.i.changed(e,"defaultDateStyle")||A.i.changed(e,"defaultGravatarsStyle")||A.i.changed(e,"defaultTimeFormat")||A.i.changed(e,"integrations.enabled")||A.i.changed(e,"sortBranchesBy")||A.i.changed(e,"sortRepositoriesBy"))}findBranch(e,t){if(!e.remote)return;let{repoPath:i}=e;return this.findNode(t=>t.branch?.ref===e.ref,{allowPaging:!0,maxDepth:5,canTraverse:t=>t instanceof RemotesViewNode||(t instanceof RemotesRepositoryNode||t instanceof BranchOrTagFolderNode?t.repoPath===i:t instanceof RemoteNode&&t.repoPath===i&&t.remote.name===(0,x.IB)(e.name)),token:t})}async findCommit(e,t){let{repoPath:i}=e,r=await this.container.git.getCommitBranches(e.repoPath,e.ref,void 0,(0,M.S)(e)?{commitDate:e.committer.date,remotes:!0}:{remotes:!0});if(0===r.length)return;let s=r.map(e=>e.split("/",1)[0]);return this.findNode(t=>t.commit?.ref===e.ref,{allowPaging:!0,maxDepth:6,canTraverse:e=>e instanceof RemotesViewNode||(e instanceof RemotesRepositoryNode||e instanceof BranchOrTagFolderNode?e.repoPath===i:e instanceof RemoteNode?e.repoPath===i&&s.includes(e.remote.name):e instanceof BranchNode?e.repoPath===i&&r.includes(e.branch.name):(e instanceof RepositoryNode||e instanceof RemotesNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i),token:t})}findRemote(e,t){let{repoPath:i}=e;return this.findNode(t=>t.remote?.name===e.name,{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof RemotesViewNode||e instanceof RemotesRepositoryNode&&e.repoPath===i,token:t})}revealBranch(e,t){return C.window.withProgress({location:C.ProgressLocation.Notification,title:`Revealing ${(0,F.u)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findBranch(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealCommit(e,t){return C.window.withProgress({location:C.ProgressLocation.Notification,title:`Revealing ${(0,F.u)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findCommit(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}revealRemote(e,t){return C.window.withProgress({location:C.ProgressLocation.Notification,title:`Revealing remote '${e.name}' in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findRemote(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof sG.Q&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof RemotesViewNode||e instanceof sG.Q});return void 0!==i&&await this.reveal(i,t),i}setLayout(e){return A.i.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return A.i.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return A.i.updateEffective(`views.${this.configKey}.avatars`,e)}async setShowBranchPullRequest(e){await A.i.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await A.i.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}};ny([(0,tZ.I)(()=>"")],RemotesView.prototype,"revealBranch",1),ny([(0,tZ.I)(()=>"")],RemotesView.prototype,"revealCommit",1),ny([(0,tZ.I)(()=>"")],RemotesView.prototype,"revealRemote",1),ny([(0,tZ.I)(()=>"")],RemotesView.prototype,"revealRepository",1);var nb=Object.defineProperty,nC=Object.getOwnPropertyDescriptor,nA=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nC(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nb(t,i,o),o};let RepositoriesNode=class RepositoriesNode extends sL.q{constructor(e){super("repositories",tm.oP,e)}getChildren(){if(null==this.children){let e=this.view.container.git.openRepositories;if(0===e.length)return[new sK._Y(this.view,this,"No repositories could be found.")];this.children=e.map(e=>new RepositoryNode(tm.wv.fromRepoPath(e.path),this.view,this,e))}return this.children}getTreeItem(){let e="workspaces"===this.view.type,t=e&&null!=this.view.container.workspaces.currentWorkspaceId,i=t&&null!=this.view.container.workspaces.currentWorkspace,r=new C.TreeItem(e?"Current Window":"Repositories",e?C.TreeItemCollapsibleState.Collapsed:C.TreeItemCollapsibleState.Expanded);e&&(r.description=C.workspace.name??C.workspace.workspaceFolders?.[0]?.name??"");let s=sn.UZ.Repositories;return e&&(s+="+workspaces"),t&&(s+="+linked"),i&&(s+="+current",r.resourceUri=C.Uri.parse("gitlens-view://workspaces/workspace/current")),r.contextValue=s,r}async refresh(e=!1){let t=null!=this.children;if(super.refresh(e),!t)return;if(e){await this.unsubscribe(),this.ensureSubscription();return}let i=this.view.container.git.openRepositories;if(0===i.length&&(null==this.children||0===this.children.length))return;if(0===i.length){this.children=[new sK._Y(this.view,this,"No repositories could be found.")];return}let r=[];for(let e of i){let t=e.id,i=this.children.find(e=>e.repo.id===t);null!=i?(r.push(i),i.refresh()):r.push(new RepositoryNode(tm.wv.fromRepoPath(e.path),this.view,this,e))}this.children=r,this.ensureSubscription()}subscribe(){let e=[(0,iT.gd)(this.view.container.git.onDidChangeRepositories,this.onRepositoriesChanged,this)];return"gitlens.views.repositories"===this.view.id&&this.view.config.autoReveal&&e.push((0,iT.gd)(C.window.onDidChangeActiveTextEditor,(0,tX.Cu)(this.onActiveEditorChanged,500),this)),C.Disposable.from(...e)}etag(){return(0,tX.yo)(this.view.container.git.etag,this.view.container.subscription.etag)}onActiveEditorChanged(e){if(null!=e&&null!=this.children&&1!==this.children.length)try{let t=e.document.uri,i=this.children.find(e=>e instanceof RepositoryNode&&e.repo.containsUri(t));if(null==i)return;let r=0===this.view.selection.length?void 0:this.view.selection[0];for(;null!=r;){if(r===i)return;r=r.getParent()}this.view.reveal(i,{expand:!0})}catch(e){eq.YJ.error(e)}}onRepositoriesChanged(e){this.triggerChange(!0)}};nA([(0,tZ.I)(),(0,eW.u_)()],RepositoriesNode.prototype,"refresh",1),nA([(0,eW.u_)()],RepositoriesNode.prototype,"subscribe",1),nA([(0,eW.u_)({args:!1})],RepositoriesNode.prototype,"onActiveEditorChanged",1),nA([(0,eW.u_)()],RepositoriesNode.prototype,"onRepositoriesChanged",1);var nk=Object.defineProperty,nP=Object.getOwnPropertyDescriptor,nS=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nP(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nk(t,i,o),o};let RepositoriesView=class RepositoriesView extends sV.y2{configKey="repositories";constructor(e){super(e,"repositories","Repositories","repositoriesView")}_onDidChangeAutoRefresh=new C.EventEmitter;get onDidChangeAutoRefresh(){return this._onDidChangeAutoRefresh.event}get canSelectMany(){return!1}getRoot(){return new RepositoriesNode(this)}registerCommands(){return this.container.viewCommands,[oA(this.getQualifiedCommand("copy"),()=>(0,iX.gf)(_.eq.ViewsCopy,this.activeSelection,this.selection),this),oA(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("branches","contributors","remotes","stashes","status","tags"),this.refresh(!0)),this),oA(this.getQualifiedCommand("setBranchesLayoutToList"),()=>this.setBranchesLayout("list"),this),oA(this.getQualifiedCommand("setBranchesLayoutToTree"),()=>this.setBranchesLayout("tree"),this),oA(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),oA(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),oA(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),oA(this.getQualifiedCommand("setAutoRefreshToOn"),()=>this.setAutoRefresh(A.i.get("views.repositories.autoRefresh"),!0),this),oA(this.getQualifiedCommand("setAutoRefreshToOff"),()=>this.setAutoRefresh(A.i.get("views.repositories.autoRefresh"),!1),this),oA(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),oA(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),oA(this.getQualifiedCommand("setShowBranchComparisonOn"),()=>this.setShowBranchComparison(!0),this),oA(this.getQualifiedCommand("setShowBranchComparisonOff"),()=>this.setShowBranchComparison(!1),this),oA(this.getQualifiedCommand("setBranchesShowBranchComparisonOn"),()=>this.setBranchShowBranchComparison(!0),this),oA(this.getQualifiedCommand("setBranchesShowBranchComparisonOff"),()=>this.setBranchShowBranchComparison(!1),this),oA(this.getQualifiedCommand("setShowBranchesOn"),()=>this.toggleSection("showBranches",!0),this),oA(this.getQualifiedCommand("setShowBranchesOff"),()=>this.toggleSection("showBranches",!1),this),oA(this.getQualifiedCommand("setShowCommitsOn"),()=>this.toggleSection("showCommits",!0),this),oA(this.getQualifiedCommand("setShowCommitsOff"),()=>this.toggleSection("showCommits",!1),this),oA(this.getQualifiedCommand("setShowContributorsOn"),()=>this.toggleSection("showContributors",!0),this),oA(this.getQualifiedCommand("setShowContributorsOff"),()=>this.toggleSection("showContributors",!1),this),oA(this.getQualifiedCommand("setShowRemotesOn"),()=>this.toggleSection("showRemotes",!0),this),oA(this.getQualifiedCommand("setShowRemotesOff"),()=>this.toggleSection("showRemotes",!1),this),oA(this.getQualifiedCommand("setShowStashesOn"),()=>this.toggleSection("showStashes",!0),this),oA(this.getQualifiedCommand("setShowStashesOff"),()=>this.toggleSection("showStashes",!1),this),oA(this.getQualifiedCommand("setShowTagsOn"),()=>this.toggleSection("showTags",!0),this),oA(this.getQualifiedCommand("setShowTagsOff"),()=>this.toggleSection("showTags",!1),this),oA(this.getQualifiedCommand("setShowWorktreesOn"),()=>this.toggleSection("showWorktrees",!0),this),oA(this.getQualifiedCommand("setShowWorktreesOff"),()=>this.toggleSection("showWorktrees",!1),this),oA(this.getQualifiedCommand("setShowUpstreamStatusOn"),()=>this.toggleSection("showUpstreamStatus",!0),this),oA(this.getQualifiedCommand("setShowUpstreamStatusOff"),()=>this.toggleSection("showUpstreamStatus",!1),this),oA(this.getQualifiedCommand("setShowSectionOff"),e=>this.toggleSectionByNode(e,!1),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||A.i.changed(e,"defaultDateFormat")||A.i.changed(e,"defaultDateLocale")||A.i.changed(e,"defaultDateShortFormat")||A.i.changed(e,"defaultDateSource")||A.i.changed(e,"defaultDateStyle")||A.i.changed(e,"defaultGravatarsStyle")||A.i.changed(e,"defaultTimeFormat")||A.i.changed(e,"sortBranchesBy")||A.i.changed(e,"sortContributorsBy")||A.i.changed(e,"sortTagsBy")||A.i.changed(e,"sortRepositoriesBy"))}onConfigurationChanged(e){A.i.changed(e,`views.${this.configKey}.autoRefresh`)&&this.setAutoRefresh(A.i.get("views.repositories.autoRefresh")),super.onConfigurationChanged(e)}get autoRefresh(){return this.config.autoRefresh&&this.container.storage.getWorkspace("views:repositories:autoRefresh",!0)}findBranch(e,t){let{repoPath:i}=e;return e.remote?this.findNode(t=>t.branch?.ref===e.ref,{allowPaging:!0,maxDepth:6,canTraverse:t=>t instanceof RepositoriesNode||(t instanceof RemoteNode?t.repoPath===i&&e.remote&&t.remote.name===(0,x.IB)(e.name):(t instanceof RepositoryNode||t instanceof BranchesNode||t instanceof RemotesNode||t instanceof BranchOrTagFolderNode)&&t.repoPath===i),token:t}):this.findNode(t=>t.branch?.ref===e.ref,{allowPaging:!0,maxDepth:5,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof BranchesNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}async findCommit(e,t){let{repoPath:i}=e,r=await this.container.git.getCommitBranches(e.repoPath,e.ref,void 0,(0,M.S)(e)?{commitDate:e.committer.date}:void 0);if(0!==r.length)return this.findNode(t=>t.commit?.ref===e.ref,{allowPaging:!0,maxDepth:6,canTraverse:async t=>t instanceof RepositoriesNode||(t instanceof RepositoryNode||t instanceof BranchesNode||t instanceof BranchOrTagFolderNode?t.repoPath===i:!!(t instanceof BranchNode&&t.repoPath===i&&r.includes(t.branch.name))&&(await t.loadMore({until:e.ref}),!0)),token:t});if(0===(r=await this.container.git.getCommitBranches(e.repoPath,e.ref,void 0,(0,M.S)(e)?{commitDate:e.committer.date,remotes:!0}:{remotes:!0})).length)return;let s=r.map(e=>e.split("/",1)[0]);return this.findNode(t=>t.commit?.ref===e.ref,{allowPaging:!0,maxDepth:8,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RemoteNode?e.repoPath===i&&s.includes(e.remote.name):e instanceof BranchNode?e.repoPath===i&&r.includes(e.branch.name):(e instanceof RepositoryNode||e instanceof RemotesNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i),token:t})}findContributor(e,t){let{repoPath:i,username:r,email:s,name:o}=e;return this.findNode(e=>e instanceof ContributorNode&&e.contributor.username===r&&e.contributor.email===s&&e.contributor.name===o,{maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof ContributorsNode)&&e.repoPath===i,token:t})}findRemote(e,t){let{repoPath:i}=e;return this.findNode(t=>t.remote?.name===e.name,{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof RemotesNode)&&e.repoPath===i,token:t})}findStash(e,t){let{repoPath:i}=e;return this.findNode(t=>t.commit?.ref===e.ref,{maxDepth:3,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof StashesNode)&&e.repoPath===i,token:t})}findTag(e,t){let{repoPath:i}=e;return this.findNode(t=>t.tag?.ref===e.ref,{allowPaging:!0,maxDepth:5,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof TagsNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}findWorktree(e,t){let{repoPath:i,uri:r}=e,s=r.toString();return this.findNode(t=>t instanceof WorktreeNode&&e.uri.toString()===s,{maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof WorktreesNode)&&e.repoPath===i,token:t})}revealBranch(e,t){return C.window.withProgress({location:C.ProgressLocation.Notification,title:`Revealing ${(0,F.u)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},async(i,r)=>{let s=await this.findBranch(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealBranches(e,t){let i=await this.findNode(t=>t instanceof BranchesNode&&t.repoPath===e,{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}async revealCommit(e,t){return C.window.withProgress({location:C.ProgressLocation.Notification,title:`Revealing ${(0,F.u)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},async(i,r)=>{let s=await this.findCommit(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealContributor(e,t){return C.window.withProgress({location:C.ProgressLocation.Notification,title:`Revealing contributor '${e.name} in the Repositories view...`,cancellable:!0},async(i,r)=>{let s=await this.findContributor(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}revealRemote(e,t){return C.window.withProgress({location:C.ProgressLocation.Notification,title:`Revealing remote '${e.name}' in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findRemote(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof RepositoryNode&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof RepositoriesNode});return void 0!==i&&await this.reveal(i,t),i}async revealStash(e,t){return C.window.withProgress({location:C.ProgressLocation.Notification,title:`Revealing ${(0,F.u)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},async(i,r)=>{let s=await this.findStash(e,r);return void 0!==s&&await this.reveal(s,t),s})}async revealStashes(e,t){let i=await this.findNode(t=>t instanceof StashesNode&&t.repoPath===e,{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}revealTag(e,t){return C.window.withProgress({location:C.ProgressLocation.Notification,title:`Revealing ${(0,F.u)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},async(i,r)=>{let s=await this.findTag(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealTags(e,t){let i=await this.findNode(t=>t instanceof TagsNode&&t.repoPath===e,{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}revealWorktree(e,t){return C.window.withProgress({location:C.ProgressLocation.Notification,title:`Revealing worktree '${e.name}' in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findWorktree(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealWorktrees(e,t){let i=await this.findNode(t=>t instanceof WorktreesNode&&t.repoPath===e,{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}async setAutoRefresh(e,t){e&&(void 0===t?t=this.container.storage.getWorkspace("views:repositories:autoRefresh",!0):await this.container.storage.storeWorkspace("views:repositories:autoRefresh",t)),(0,iN.Qr)("gitlens:views:repositories:autoRefresh",e&&t),this._onDidChangeAutoRefresh.fire()}setBranchesLayout(e){return A.i.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return A.i.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return A.i.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return A.i.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"working")}setBranchShowBranchComparison(e){return A.i.updateEffective(`views.${this.configKey}.branches.showBranchComparison`,!!e&&"branch")}toggleSection(e,t){return A.i.updateEffective(`views.${this.configKey}.${e}`,t)}toggleSectionByNode(e,t){return e instanceof BranchesNode?A.i.updateEffective(`views.${this.configKey}.showBranches`,t):e instanceof BranchNode?A.i.updateEffective(`views.${this.configKey}.showCommits`,t):e instanceof BranchTrackingStatusNode?A.i.updateEffective(`views.${this.configKey}.showUpstreamStatus`,t):e instanceof CompareBranchNode?this.setShowBranchComparison(t):e instanceof ContributorsNode?A.i.updateEffective(`views.${this.configKey}.showContributors`,t):e instanceof ReflogNode?A.i.updateEffective(`views.${this.configKey}.showIncomingActivity`,t):e instanceof RemotesNode?A.i.updateEffective(`views.${this.configKey}.showRemotes`,t):e instanceof StashesNode?A.i.updateEffective(`views.${this.configKey}.showStashes`,t):e instanceof TagsNode?A.i.updateEffective(`views.${this.configKey}.showTags`,t):e instanceof WorktreesNode?A.i.updateEffective(`views.${this.configKey}.showWorktrees`,t):Promise.resolve()}};nS([(0,tZ.I)(()=>"")],RepositoriesView.prototype,"revealBranch",1),nS([(0,tZ.I)(()=>"")],RepositoriesView.prototype,"revealBranches",1),nS([(0,tZ.I)(()=>"")],RepositoriesView.prototype,"revealCommit",1),nS([(0,tZ.I)(()=>"")],RepositoriesView.prototype,"revealContributor",1),nS([(0,tZ.I)(()=>"")],RepositoriesView.prototype,"revealRemote",1),nS([(0,tZ.I)(()=>"")],RepositoriesView.prototype,"revealRepository",1),nS([(0,tZ.I)(()=>"")],RepositoriesView.prototype,"revealStash",1),nS([(0,tZ.I)(()=>"")],RepositoriesView.prototype,"revealStashes",1),nS([(0,tZ.I)(()=>"")],RepositoriesView.prototype,"revealTag",1),nS([(0,tZ.I)(()=>"")],RepositoriesView.prototype,"revealTags",1),nS([(0,tZ.I)(()=>"")],RepositoriesView.prototype,"revealWorktree",1),nS([(0,tZ.I)(()=>"")],RepositoriesView.prototype,"revealWorktrees",1);let ComparePickerNode=class ComparePickerNode extends sn.sl{constructor(e,t,i){super("compare-picker",tm.oP,e,t),this.selectedRef=i}order=Date.now();getChildren(){return[]}getTreeItem(){let e,t;let i=this.selectedRef,r=i?.repoPath;if(void 0!==r&&this.view.container.git.repositoryCount>1){let t=this.view.container.git.getRepository(r);e=t?.formattedName??r}return null==i?((t=new C.TreeItem("Compare <branch, tag, or ref> with <branch, tag, or ref>",C.TreeItemCollapsibleState.None)).contextValue=sn.UZ.ComparePicker,t.description=e,t.tooltip=`Click to select or enter a reference for compare${_.or.Ellipsis}`,t.command={title:`Compare${_.or.Ellipsis}`,command:this.view.getQualifiedCommand("selectForCompare")}):((t=new C.TreeItem(`Compare ${i.label} with <branch, tag, or ref>`,C.TreeItemCollapsibleState.None)).contextValue=sn.UZ.ComparePickerWithRef,t.description=e,t.tooltip=`Click to compare ${i.label} with${_.or.Ellipsis}`,t.command={title:`Compare ${i.label} with${_.or.Ellipsis}`,command:this.view.getQualifiedCommand("compareWithSelected")}),t}};var nR=i(1644),nD=Object.defineProperty,n$=Object.getOwnPropertyDescriptor,n_=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?n$(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nD(t,i,o),o};let SearchAndCompareViewNode=class SearchAndCompareViewNode extends sn.sl{splatted=!0;comparePicker;constructor(e){super("search-compare",tm.oP,e)}dispose(){super.dispose(),(0,sV.YT)(this._children)}_children;get children(){if(null==this._children){let e=[],t=this.view.getStoredNodes();0!==t.length&&e.push(...t),(0,sV.YT)(this._children,e),this._children=e}return this._children}set children(e){this.children!==e&&((0,sV.YT)(this.children,e),this._children=e)}getChildren(){let e=this.children;return 0===e.length?[]:e.sort((e,t)=>t.order-e.order)}getTreeItem(){this.splatted=!1;let e=new C.TreeItem("SearchAndCompare",C.TreeItemCollapsibleState.Expanded);return e.contextValue=sn.UZ.SearchAndCompare,e}addOrReplace(e){let t=[...this.children];t.includes(e)||(t.push(e),this.children=t,this.view.triggerNodeChange())}async clear(){0!==this.children.length&&(this.removeComparePicker(!0),this.children=[],await this.view.clearStorage(),this.view.triggerNodeChange())}dismiss(e){if(e===this.comparePicker){this.removeComparePicker();return}(e instanceof s6.kZ||e instanceof nR.A)&&e.dismiss();let t=[...this.children];if(0===t.length)return;let i=t.indexOf(e);-1!==i&&(t.splice(i,1),this.children=t,this.view.triggerNodeChange())}async refresh(e=!1){let t=this.children;if(0===t.length)return;let i=[...(0,N.Gs)(t,t=>{let i=t.refresh?.(e);return(0,t0.um)(i)?i:void 0})];await Promise.allSettled(i)}async compareWithSelected(e,t){let i=this.comparePicker?.selectedRef;if(null!=i){if(null==e)e=i.repoPath;else if(e!==i.repoPath){this.selectForCompare(e,t);return}if(null==t){let r=await (0,s4.m)(e,`Compare ${this.getRefName(i.ref)} with`,"Choose a reference (branch, tag, etc) to compare with",{allowRevisions:!0,picked:"string"==typeof i.ref?i.ref:i.ref.ref,include:s4.Q.BranchesAndTags|s4.Q.HEAD,sort:{branches:{current:!0}}});if(null==r){null!=this.comparePicker&&(await this.view.show(),await this.view.reveal(this.comparePicker,{focus:!0,select:!0}));return}t=r.ref}this.removeComparePicker(),await this.view.compare(e,i.ref,t)}}async selectForCompare(e,t,i){let r;if(null==e&&(e=(await sl.a0("Compare"))?.path),null==e)return;this.removeComparePicker(!0);let s=i?.prompt??!1;if(null==t){let i=await (0,s4.m)(e,"Compare","Choose a reference (branch, tag, etc) to compare",{allowRevisions:{ranges:!0},include:s4.Q.All,sort:{branches:{current:!0},tags:{}}});if(null==i){await this.triggerChange();return}if(t=i.ref,(0,F.U1)(t)){let e=(0,F.EZ)(t);null!=e&&(t=e.ref1||"HEAD",r=e.ref2||"HEAD")}s=!0}this.comparePicker=new ComparePickerNode(this.view,this,{label:this.getRefName(t),repoPath:e,ref:t});let o=[...this.children];o.unshift(this.comparePicker),this.children=o,(0,iN.Qr)("gitlens:views:canCompare",!0),await this.triggerChange(),await this.view.reveal(this.comparePicker,{focus:!1,select:!0}),s&&await this.compareWithSelected(e,r)}getRefName(e){return"string"==typeof e?(0,F.c5)(e,{strings:{working:"Working Tree"}}):e.label??(0,F.c5)(e.ref)}removeComparePicker(e=!1){if((0,iN.Qr)("gitlens:views:canCompare",!1),null!=this.comparePicker){let t=[...this.children],i=t.indexOf(this.comparePicker);-1===i||(t.splice(i,1),this.children=t,e||this.triggerChange()),this.comparePicker=void 0}}};n_([(0,eW.Yz)()],SearchAndCompareViewNode.prototype,"clear",1),n_([(0,eW.Yz)({args:{0:e=>e.toString()}})],SearchAndCompareViewNode.prototype,"dismiss",1),n_([(0,tZ.I)(),(0,eW.u_)()],SearchAndCompareViewNode.prototype,"refresh",1);let SearchAndCompareView=class SearchAndCompareView extends sV.y2{configKey="searchAndCompare";constructor(e){super(e,"searchAndCompare","Search & Compare","searchAndCompareView")}getRoot(){return new SearchAndCompareViewNode(this)}registerCommands(){return this.container.viewCommands,[oA(this.getQualifiedCommand("clear"),()=>void this.clear(),this),oA(this.getQualifiedCommand("copy"),()=>(0,iX.gf)(_.eq.ViewsCopy,this.activeSelection,this.selection),this),oA(this.getQualifiedCommand("refresh"),()=>this.refresh(!0),this),oA(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),oA(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),oA(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),oA(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),oA(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),oA(this.getQualifiedCommand("swapComparison"),this.swapComparison,this),oA(this.getQualifiedCommand("selectForCompare"),()=>this.selectForCompare()),oA(this.getQualifiedCommand("compareWithSelected"),this.compareWithSelected,this),oA(this.getQualifiedCommand("setFilesFilterOnLeft"),e=>this.setFilesFilter(e,s8.I.Left),this),oA(this.getQualifiedCommand("setFilesFilterOnRight"),e=>this.setFilesFilter(e,s8.I.Right),this),oA(this.getQualifiedCommand("setFilesFilterOff"),e=>this.setFilesFilter(e,void 0),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||A.i.changed(e,"defaultDateFormat")||A.i.changed(e,"defaultDateLocale")||A.i.changed(e,"defaultDateShortFormat")||A.i.changed(e,"defaultDateSource")||A.i.changed(e,"defaultDateStyle")||A.i.changed(e,"defaultGravatarsStyle")||A.i.changed(e,"defaultTimeFormat"))}clear(){return this.root?.clear()}dismissNode(e){null!=this.root&&(e instanceof ComparePickerNode||e instanceof s6.kZ||e instanceof nR.A)&&this.root.dismiss(e)}compare(e,t,i,r){return this.addResults(this.createCompareResultsNode(e,t,i),r?.reveal!==!1&&void 0)}createCompareResultsNode(e,t,i){return new s6.kZ(this,this.ensureRoot(),e,"string"==typeof t?{ref:t}:t,"string"==typeof i?{ref:i}:i,Date.now())}async openComparisonChanges(e,t,i,r){let s=await this.createCompareResultsNode(e,t,i).getFilesComparison();s?.files.length&&await (0,sB.Qz)(s.files,{repoPath:s.repoPath,lhs:s.ref1,rhs:s.ref2},r)}compareWithSelected(e,t){this.ensureRoot().compareWithSelected(e,t)}selectForCompare(e,t,i){this.ensureRoot().selectForCompare(e,t,i)}async search(e,t,{label:i,reveal:r},s,o){this.visible||await this.show();let n={label:`Search results ${"string"==typeof i?i:i.label}`,queryLabel:i};if(null!=o){await o.edit({pattern:t,labels:n,log:s});return}await this.addResults(new nR.A(this,this.root,e,t,n,s),r)}getStoredNodes(){let e=this.container.storage.getWorkspace("views:searchAndCompare:pinned");if(null==e)return[];let t=this.ensureRoot();return Object.entries(e).sort(([,e],[,t])=>(t.timestamp??0)-(e.timestamp??0)).map(([,e])=>"comparison"===e.type?((0,s6.sP)(this,e.checkedFiles),new s6.kZ(this,t,e.path,{label:e.ref1.label,ref:e.ref1.ref??e.ref1.name??e.ref1.sha},{label:e.ref2.label,ref:e.ref2.ref??e.ref2.name??e.ref2.sha},e.timestamp)):new nR.A(this,t,e.path,(0,tj.Ok)(e.search),e.labels,void 0,e.timestamp))}clearStorage(){return this.container.storage.deleteWorkspace("views:searchAndCompare:pinned")}async updateStorage(e,t,i=!1){let r=this.container.storage.getWorkspace("views:searchAndCompare:pinned");r=(0,rv.Ks)(r,e,t),await this.container.storage.storeWorkspace("views:searchAndCompare:pinned",r),i||this.triggerNodeChange(this.ensureRoot())}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof sG.Q&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof SearchAndCompareViewNode||e instanceof sG.Q});return void 0!==i&&await this.reveal(i,t),i}async addResults(e,t={expand:!0,focus:!0,select:!0}){return this.visible||!1===t||await this.show(),this.ensureRoot().addOrReplace(e),!1!==t&&queueMicrotask(()=>this.reveal(e,t)),e}setFilesLayout(e){return A.i.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return A.i.updateEffective(`views.${this.configKey}.avatars`,e)}setFilesFilter(e,t){e instanceof s8.m&&(e.filter=t)}swapComparison(e){if(e instanceof s6.kZ)return e.swap()}};n_([(0,tZ.I)(()=>"")],SearchAndCompareView.prototype,"revealRepository",1);var nI=Object.defineProperty,nT=Object.getOwnPropertyDescriptor,nF=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nT(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nI(t,i,o),o};let StashesRepositoryNode=class StashesRepositoryNode extends sG.Q{async getChildren(){return null==this.child&&(this.child=new StashesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(ty.c7.Stash,ty.c7.Unknown,ty.MR.Any)}};let StashesViewNode=class StashesViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(null==this.children){let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message=this.view.container.git.isDiscoveringRepositories?"Loading stashes...":"No stashes could be found.",[];this.view.message=void 0;let t=1===e.length;this.children=e.map(e=>new StashesRepositoryNode(tm.wv.fromRepoPath(e.path),this.view,this,e,t))}if(1===this.children.length){let[e]=this.children,t=await e.repo.getStash();return null==t||0===t.commits.size?(this.view.message="No stashes could be found.",this.view.title="Stashes",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Stashes (${t.commits.size})`,e.getChildren())}return this.view.title="Stashes",this.children}getTreeItem(){return new C.TreeItem("Stashes",C.TreeItemCollapsibleState.Expanded)}};let StashesView=class StashesView extends sV.y2{configKey="stashes";constructor(e){super(e,"stashes","Stashes","stashesView")}get canReveal(){return this.config.reveal||!A.i.get("views.repositories.showStashes")}getRoot(){return new StashesViewNode(this)}registerCommands(){return this.container.viewCommands,[oA(this.getQualifiedCommand("copy"),()=>(0,iX.gf)(_.eq.ViewsCopy,this.activeSelection,this.selection),this),oA(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("stashes"),this.refresh(!0)),this),oA(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),oA(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),oA(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||A.i.changed(e,"defaultDateFormat")||A.i.changed(e,"defaultDateLocale")||A.i.changed(e,"defaultDateShortFormat")||A.i.changed(e,"defaultDateSource")||A.i.changed(e,"defaultDateStyle")||A.i.changed(e,"defaultGravatarsStyle")||A.i.changed(e,"defaultTimeFormat")||A.i.changed(e,"sortRepositoriesBy"))}findStash(e,t){let{repoPath:i}=e;return this.findNode(t=>t.commit?.ref===e.ref,{maxDepth:2,canTraverse:e=>e instanceof StashesViewNode||e instanceof StashesRepositoryNode&&e.repoPath===i,token:t})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof sG.Q&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof StashesViewNode||e instanceof sG.Q});return void 0!==i&&await this.reveal(i,t),i}async revealStash(e,t){return C.window.withProgress({location:C.ProgressLocation.Notification,title:`Revealing ${(0,F.u)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findStash(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}setFilesLayout(e){return A.i.updateEffective(`views.${this.configKey}.files.layout`,e)}};nF([(0,tZ.I)(()=>"")],StashesView.prototype,"revealRepository",1),nF([(0,tZ.I)(()=>"")],StashesView.prototype,"revealStash",1);var nO=Object.defineProperty,nx=Object.getOwnPropertyDescriptor,nE=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nx(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nO(t,i,o),o};let TagsRepositoryNode=class TagsRepositoryNode extends sG.Q{async getChildren(){return null==this.child&&(this.child=new TagsNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(ty.c7.Tags,ty.c7.Unknown,ty.MR.Any)}};let TagsViewNode=class TagsViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(null==this.children){let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message=this.view.container.git.isDiscoveringRepositories?"Loading tags...":"No tags could be found.",[];this.view.message=void 0;let t=1===e.length;this.children=e.map(e=>new TagsRepositoryNode(tm.wv.fromRepoPath(e.path),this.view,this,e,t))}if(1===this.children.length){let[e]=this.children,t=await e.repo.getTags();return 0===t.values.length?(this.view.message="No tags could be found.",this.view.title="Tags",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Tags (${t.values.length})`,e.getChildren())}return this.view.title="Tags",this.children}getTreeItem(){return new C.TreeItem("Tags",C.TreeItemCollapsibleState.Expanded)}};let TagsView=class TagsView extends sV.y2{configKey="tags";constructor(e){super(e,"tags","Tags","tagsView")}get canReveal(){return this.config.reveal||!A.i.get("views.repositories.showTags")}getRoot(){return new TagsViewNode(this)}registerCommands(){return this.container.viewCommands,[oA(this.getQualifiedCommand("copy"),()=>(0,iX.gf)(_.eq.ViewsCopy,this.activeSelection,this.selection),this),oA(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("tags"),this.refresh(!0)),this),oA(this.getQualifiedCommand("setLayoutToList"),()=>this.setLayout("list"),this),oA(this.getQualifiedCommand("setLayoutToTree"),()=>this.setLayout("tree"),this),oA(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),oA(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),oA(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),oA(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),oA(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||A.i.changed(e,"defaultDateFormat")||A.i.changed(e,"defaultDateLocale")||A.i.changed(e,"defaultDateShortFormat")||A.i.changed(e,"defaultDateSource")||A.i.changed(e,"defaultDateStyle")||A.i.changed(e,"defaultGravatarsStyle")||A.i.changed(e,"defaultTimeFormat")||A.i.changed(e,"sortTagsBy")||A.i.changed(e,"sortRepositoriesBy"))}findTag(e,t){let{repoPath:i}=e;return this.findNode(t=>t.tag?.ref===e.ref,{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof TagsViewNode||(e instanceof TagsRepositoryNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof sG.Q&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof TagsViewNode||e instanceof sG.Q});return void 0!==i&&await this.reveal(i,t),i}revealTag(e,t){return C.window.withProgress({location:C.ProgressLocation.Notification,title:`Revealing ${(0,F.u)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findTag(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}setLayout(e){return A.i.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return A.i.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return A.i.updateEffective(`views.${this.configKey}.avatars`,e)}};nE([(0,tZ.I)(()=>"")],TagsView.prototype,"revealRepository",1),nE([(0,tZ.I)(()=>"")],TagsView.prototype,"revealTag",1);var nB=i(1016);let ViewFileDecorationProvider=class ViewFileDecorationProvider{_onDidChange=new C.EventEmitter;get onDidChange(){return this._onDidChange.event}disposable;constructor(){this.disposable=C.Disposable.from(C.window.registerFileDecorationProvider({provideFileDecoration:(e,t)=>{if("gitlens-view"===e.scheme)switch(e.authority){case"branch":return this.provideBranchCurrentDecoration(e,t);case"remote":return this.provideRemoteDefaultDecoration(e,t);case"status":return this.provideStatusDecoration(e,t);case"workspaces":return this.provideWorkspaceDecoration(e,t);default:return}}}),C.window.registerFileDecorationProvider(this))}dispose(){this.disposable.dispose()}provideWorkspaceDecoration(e,t){let[,i,r]=e.path.split("/");if("repository"===i){if("open"===r)return{badge:"●",color:new C.ThemeColor("gitlens.decorations.workspaceRepoOpenForegroundColor"),tooltip:""};if("missing"===r)return{badge:"?",color:new C.ThemeColor("gitlens.decorations.workspaceRepoMissingForegroundColor"),tooltip:""}}if("workspace"===i&&"current"===r)return{badge:"●",color:new C.ThemeColor("gitlens.decorations.workspaceCurrentForegroundColor"),tooltip:""}}provideFileDecoration(e,t){if(e.scheme===_.cl.Git){let t=(0,nB.u)(e);t?.decoration!=null&&(e=C.Uri.parse(t?.decoration))}if("gitlens-view"===e.scheme)switch(e.authority){case"branch":return this.provideBranchStatusDecoration(e,t);case"commit-file":return this.provideCommitFileStatusDecoration(e,t)}}provideCommitFileStatusDecoration(e,t){let[,,i]=e.path.split("/");switch(i){case"!":return{badge:"I",color:new C.ThemeColor("gitlens.decorations.ignoredForegroundColor"),tooltip:"Ignored"};case"?":return{badge:"U",color:new C.ThemeColor("gitlens.decorations.untrackedForegroundColor"),tooltip:"Untracked"};case"A":return{badge:"A",color:new C.ThemeColor("gitlens.decorations.addedForegroundColor"),tooltip:"Added"};case"C":return{badge:"C",color:new C.ThemeColor("gitlens.decorations.copiedForegroundColor"),tooltip:"Copied"};case"D":return{badge:"D",color:new C.ThemeColor("gitlens.decorations.deletedForegroundColor"),tooltip:"Deleted"};case"M":return{badge:"M",tooltip:"Modified"};case"R":return{badge:"R",color:new C.ThemeColor("gitlens.decorations.renamedForegroundColor"),tooltip:"Renamed"};default:return}}provideBranchStatusDecoration(e,t){let[,,i]=e.path.split("/");switch(i){case"ahead":return{badge:"▲",color:new C.ThemeColor("gitlens.decorations.branchAheadForegroundColor"),tooltip:"Ahead"};case"behind":return{badge:"▼",color:new C.ThemeColor("gitlens.decorations.branchBehindForegroundColor"),tooltip:"Behind"};case"diverged":return{badge:"▼▲",color:new C.ThemeColor("gitlens.decorations.branchDivergedForegroundColor"),tooltip:"Diverged"};case"missingUpstream":return{badge:"!",color:new C.ThemeColor("gitlens.decorations.branchMissingUpstreamForegroundColor"),tooltip:"Missing Upstream"};case"upToDate":return{badge:"",color:new C.ThemeColor("gitlens.decorations.branchUpToDateForegroundColor"),tooltip:"Up to Date"};case"unpublished":return{badge:"▲+",color:new C.ThemeColor("gitlens.decorations.branchUnpublishedForegroundColor"),tooltip:"Unpublished"};default:return}}provideBranchCurrentDecoration(e,t){let i;let[,,r,s]=e.path.split("/");if(s){switch(r){case"ahead":i=new C.ThemeColor("gitlens.decorations.branchAheadForegroundColor");break;case"behind":i=new C.ThemeColor("gitlens.decorations.branchBehindForegroundColor");break;case"diverged":i=new C.ThemeColor("gitlens.decorations.branchDivergedForegroundColor");break;case"upToDate":i=new C.ThemeColor("gitlens.decorations.branchUpToDateForegroundColor");break;case"unpublished":i=new C.ThemeColor("gitlens.decorations.branchUnpublishedForegroundColor")}return{badge:_.or.Check,color:i,tooltip:"Current Branch"}}}provideRemoteDefaultDecoration(e,t){let[,i]=e.path.split("/");if(i)return{badge:_.or.Check,tooltip:"Default Remote"}}provideStatusDecoration(e,t){let[,i,r]=e.path.split("/");switch(i){case"rebasing":case"merging":if(r)return{badge:"!",color:new C.ThemeColor("gitlens.decorations.statusMergingOrRebasingConflictForegroundColor")};return{color:new C.ThemeColor("gitlens.decorations.statusMergingOrRebasingForegroundColor")};default:return}}};let WorkspaceMissingRepositoryNode=class WorkspaceMissingRepositoryNode extends sn.sl{constructor(e,t,i,r){super("workspace-missing-repository",tm.oP,e,t),this.workspace=i,this.wsRepositoryDescriptor=r,this.updateContext({wsRepositoryDescriptor:r}),this._uniqueId=(0,sn.QP)(this.type,this.context)}get id(){return this._uniqueId}toClipboard(){return this.name}get name(){return this.wsRepositoryDescriptor.name}get workspaceId(){return this.wsRepositoryDescriptor.workspaceId}getChildren(){return[]}getTreeItem(){let e=new C.TreeItem(this.name,C.TreeItemCollapsibleState.None);return e.id=this.id,e.description="missing",e.tooltip=new C.MarkdownString(`${this.name}

Repository could not be found`),e.contextValue=sn.UZ.WorkspaceMissingRepository,e.iconPath=new C.ThemeIcon("question",new C.ThemeColor("gitlens.decorations.workspaceRepoMissingForegroundColor")),e.resourceUri=C.Uri.parse("gitlens-view://workspaces/repository/missing"),e}};var nU=Object.defineProperty,nW=Object.getOwnPropertyDescriptor;let WorkspaceNode=class WorkspaceNode extends sL.q{constructor(e,t,i,r){super("workspace",e,t,i),this.parent=i,this.workspace=r,this.updateContext({workspace:r}),this._uniqueId=(0,sn.QP)(this.type,this.context)}get id(){return this._uniqueId}toClipboard(){return this.workspace.name}async getChildren(){if(null==this.children){let e=[];try{let t=await this.workspace.getRepositoryDescriptors();if(!t?.length)return e.push(new sK.ac(this.view,this,(0,iX.AR)("gitlens.views.workspaces.addRepos","Add Repositories...",this),"No repositories")),this.children=e,this.children;let i=await this.workspace.getRepositoriesByName({force:!0});for(let r of t){let t=i.get(r.name)?.repository;if(!t){e.push(new WorkspaceMissingRepositoryNode(this.view,this,this.workspace,r));continue}e.push(new RepositoryNode(tm.wv.fromRepoPath(t.path),this.view,this,t,this.getNewContext({wsRepositoryDescriptor:r})))}}catch(e){return this.children=void 0,[new sK._Y(this.view,this,"Failed to load repositories")]}this.children=e}return this.children}async getTreeItem(){let e=new C.TreeItem(this.workspace.name,C.TreeItemCollapsibleState.Collapsed),t="cloud"===this.workspace.type,i=sn.UZ.Workspace;e.resourceUri=void 0;let r=[];return t?i+="+cloud":i+="+local",this.workspace.current&&(i+="+current",r.push("current"),e.resourceUri=C.Uri.parse("gitlens-view://workspaces/workspace/current")),null!=this.workspace.localPath&&(i+="+hasPath"),(await this.workspace.getRepositoryDescriptors())?.length===0&&(i+="+empty"),e.id=this.id,e.contextValue=i,e.iconPath=new C.ThemeIcon("cloud"==this.workspace.type?"cloud":"folder"),e.tooltip=`${this.workspace.name}
${t?`Cloud Workspace ${this.workspace.shared?"(Shared)":""}`:"Local Workspace"}${t&&null!=this.workspace.provider?`
Provider: ${this.workspace.provider}`:""}`,t&&null!=this.workspace.organizationId&&r.push("shared"),e.description=r.join(", "),e}etag(){return this.view.container.git.etag}subscribe(){return C.Disposable.from((0,iT.gd)(this.view.container.git.onDidChangeRepositories,this.onRepositoriesChanged,this))}onRepositoriesChanged(e){this.triggerChange(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?nW(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nU(t,i,o)})([(0,eW.u_)()],WorkspaceNode.prototype,"subscribe",1);var nN=Object.defineProperty,nq=Object.getOwnPropertyDescriptor;let WorkspacesViewNode=class WorkspacesViewNode extends sn.sl{constructor(e){super("workspaces-view",tm.oP,e)}_children;async getChildren(){if(null==this._children){let e=[],{cloudWorkspaces:t,cloudWorkspaceInfo:i,localWorkspaces:r,localWorkspaceInfo:s}=await this.view.container.workspaces.getWorkspaces();if(t.length||r.length){for(let i of(e.push(new RepositoriesNode(this.view)),t))e.push(new WorkspaceNode(this.uri,this.view,this,i));for(let t of(null!=i&&e.push(new sK._Y(this.view,this,i)),r))e.push(new WorkspaceNode(this.uri,this.view,this,t));0===t.length&&null==i&&e.push(new sK._Y(this.view,this,"No cloud workspaces found.")),null!=s&&e.push(new sK._Y(this.view,this,s))}this._children=e}return this._children}getTreeItem(){return new C.TreeItem("Workspaces",C.TreeItemCollapsibleState.Expanded)}refresh(){null!=this._children&&((0,sV.YT)(this._children),this._children=void 0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?nq(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nN(t,i,o)})([(0,tZ.I)(),(0,eW.u_)()],WorkspacesViewNode.prototype,"refresh",1);let WorkspacesView=class WorkspacesView extends sV.y2{configKey="workspaces";_disposable;constructor(e){super(e,"workspaces","Workspaces","workspacesView"),this.description=`PREVIEW\xa0\xA0\u2601\uFE0F`,this.disposables.push(e.workspaces.onDidResetWorkspaces(()=>void this.refresh(!0)))}dispose(){this._disposable?.dispose(),super.dispose()}get canSelectMany(){return!1}getRoot(){return new WorkspacesViewNode(this)}async show(e){if(await (0,rk.u)())return super.show(e)}async findWorkspaceNode(e,t){return this.findNode(t=>t.workspace?.id===e,{allowPaging:!1,maxDepth:2,canTraverse:e=>e instanceof WorkspacesViewNode,token:t})}async revealWorkspaceNode(e,t){return C.window.withProgress({location:C.ProgressLocation.Notification,title:`Revealing workspace ${e} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findWorkspaceNode(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}registerCommands(){return this.container.viewCommands,[oA(this.getQualifiedCommand("info"),()=>C.env.openExternal(C.Uri.parse("https://help.gitkraken.com/gitlens/side-bar/#workspaces-☁%ef%b8%8f")),this),oA(this.getQualifiedCommand("copy"),()=>(0,iX.gf)(_.eq.ViewsCopy,this.activeSelection,this.selection),this),oA(this.getQualifiedCommand("refresh"),()=>{this.container.workspaces.resetWorkspaces()},this),oA(this.getQualifiedCommand("addRepos"),async e=>{await this.container.workspaces.addCloudWorkspaceRepos(e.workspace.id),e.getParent()?.triggerChange(!0)}),oA(this.getQualifiedCommand("addReposFromLinked"),async e=>{await this.container.workspaces.addMissingCurrentWorkspaceRepos({force:!0}),e.getParent()?.triggerChange(!0)}),oA(this.getQualifiedCommand("convert"),async e=>{let t=[];for(let i of e.getChildren())i instanceof RepositoryNode&&t.push(i.repo);0!==t.length&&(await this.container.workspaces.createCloudWorkspace({repos:t}),this.ensureRoot().triggerChange(!0))},this),oA(this.getQualifiedCommand("create"),async()=>{await this.container.workspaces.createCloudWorkspace(),this.ensureRoot().triggerChange(!0)},this),oA(this.getQualifiedCommand("createLocal"),async e=>{await this.container.workspaces.saveAsCodeWorkspaceFile(e.workspace.id),this.ensureRoot().triggerChange(!0)},this),oA(this.getQualifiedCommand("openLocal"),async e=>{await this.container.workspaces.openCodeWorkspaceFile(e.workspace.id,{location:"currentWindow"}),this.ensureRoot().triggerChange(!0)},this),oA(this.getQualifiedCommand("openLocalNewWindow"),async e=>{await this.container.workspaces.openCodeWorkspaceFile(e.workspace.id,{location:"newWindow"})},this),oA(this.getQualifiedCommand("changeAutoAddSetting"),async()=>{await this.container.workspaces.chooseCodeWorkspaceAutoAddSetting({current:!0})},this),oA(this.getQualifiedCommand("delete"),async e=>{await this.container.workspaces.deleteCloudWorkspace(e.workspace.id),e.getParent()?.triggerChange(!0)},this),oA(this.getQualifiedCommand("locateAllRepos"),async e=>{"cloud"===e.workspace.type&&(await C.window.withProgress({location:C.ProgressLocation.Notification,title:`Locating Repositories for '${e.workspace.name}'...`,cancellable:!0},(t,i)=>this.container.workspaces.locateAllCloudWorkspaceRepos(e.workspace.id,i)),e.triggerChange(!0))},this),oA(this.getQualifiedCommand("repo.locate"),async e=>{let t=e.wsRepositoryDescriptor;null!=t&&e.workspace?.id!=null&&(await this.container.workspaces.locateWorkspaceRepo(e.workspace.id,t),e.getParent()?.triggerChange(!0))},this),oA(this.getQualifiedCommand("repo.openInNewWindow"),e=>{let t=e.getParent();null!=t&&t instanceof WorkspaceNode&&(0,eQ.EX)(e.repo.uri,{location:"newWindow"})},this),oA(this.getQualifiedCommand("repo.open"),e=>{let t=e.getParent();null!=t&&t instanceof WorkspaceNode&&(0,eQ.EX)(e.repo.uri,{location:"currentWindow"})},this),oA(this.getQualifiedCommand("repo.addToWindow"),e=>{let t=e.getParent();null!=t&&t instanceof WorkspaceNode&&(0,eQ.EX)(e.repo.uri,{location:"addToWorkspace"})},this),oA(this.getQualifiedCommand("repo.remove"),async e=>{let t=e.wsRepositoryDescriptor;t?.id!=null&&e.workspace?.id!=null&&(await this.container.workspaces.removeCloudWorkspaceRepo(e.workspace.id,t),e.getParent()?.getParent()?.triggerChange(!0))})]}};var nL=Object.defineProperty,nM=Object.getOwnPropertyDescriptor,nQ=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nM(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nL(t,i,o),o};let WorktreesRepositoryNode=class WorktreesRepositoryNode extends sG.Q{getChildren(){return null==this.child&&(this.child=new WorktreesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(ty.c7.Config,ty.c7.Worktrees,ty.c7.Unknown,ty.MR.Any)}};let WorktreesViewNode=class WorktreesViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(!1===(await this.view.container.git.access(tg.i.Worktrees)).allowed)return[];if(null==this.children){let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message=this.view.container.git.isDiscoveringRepositories?"Loading worktrees...":"No worktrees could be found.",[];this.view.message=void 0;let t=1===e.length;this.children=e.map(e=>new WorktreesRepositoryNode(tm.wv.fromRepoPath(e.path),this.view,this,e,t))}if(1===this.children.length){let[e]=this.children,t=await e.getChildren();return t.length<=1?(this.view.message=void 0,this.view.title="Worktrees",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Worktrees (${t.length})`,t)}return this.view.title="Worktrees",this.children}getTreeItem(){return new C.TreeItem("Worktrees",C.TreeItemCollapsibleState.Expanded)}};let WorktreesView=class WorktreesView extends sV.y2{configKey="worktrees";constructor(e){super(e,"worktrees","Worktrees","worktreesView"),this.disposables.push(C.window.registerFileDecorationProvider({provideFileDecoration:(e,t)=>{if("gitlens-view"!==e.scheme||"worktree"!==e.authority)return;let[,i]=e.path.split("/");switch(i){case"changes":return{badge:"●",color:new C.ThemeColor("gitlens.decorations.worktreeHasUncommittedChangesForegroundColor"),tooltip:"Has Uncommitted Changes"};case"missing":return{badge:_.or.Warning,color:new C.ThemeColor("gitlens.decorations.worktreeMissingForegroundColor"),tooltip:""};default:return}}})),this.description="✨"}get canReveal(){return this.config.reveal||!A.i.get("views.repositories.showWorktrees")}async show(e){if(await (0,rk.u)())return super.show(e)}getRoot(){return new WorktreesViewNode(this)}registerCommands(){return this.container.viewCommands,[oA(this.getQualifiedCommand("copy"),()=>(0,iX.gf)(_.eq.ViewsCopy,this.activeSelection,this.selection),this),oA(this.getQualifiedCommand("refresh"),async()=>this.refresh(!0),this),oA(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),oA(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),oA(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),oA(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),oA(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),oA(this.getQualifiedCommand("setShowBranchComparisonOn"),()=>this.setShowBranchComparison(!0),this),oA(this.getQualifiedCommand("setShowBranchComparisonOff"),()=>this.setShowBranchComparison(!1),this),oA(this.getQualifiedCommand("setShowBranchPullRequestOn"),()=>this.setShowBranchPullRequest(!0),this),oA(this.getQualifiedCommand("setShowBranchPullRequestOff"),()=>this.setShowBranchPullRequest(!1),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||A.i.changed(e,"defaultDateFormat")||A.i.changed(e,"defaultDateLocale")||A.i.changed(e,"defaultDateShortFormat")||A.i.changed(e,"defaultDateSource")||A.i.changed(e,"defaultDateStyle")||A.i.changed(e,"defaultGravatarsStyle")||A.i.changed(e,"defaultTimeFormat")||A.i.changed(e,"sortRepositoriesBy"))}findWorktree(e,t){let{repoPath:i,uri:r}=e,s=r.toString();return this.findNode(t=>t instanceof WorktreeNode&&e.uri.toString()===s,{maxDepth:2,canTraverse:e=>e instanceof WorktreesViewNode||e instanceof WorktreesRepositoryNode&&e.repoPath===i,token:t})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof sG.Q&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof WorktreesViewNode||e instanceof sG.Q});return void 0!==i&&await this.reveal(i,t),i}revealWorktree(e,t){return C.window.withProgress({location:C.ProgressLocation.Notification,title:`Revealing worktree '${e.name}' in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findWorktree(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}setFilesLayout(e){return A.i.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return A.i.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return A.i.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"branch")}async setShowBranchPullRequest(e){await A.i.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await A.i.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}};nQ([(0,tZ.I)(()=>"")],WorktreesView.prototype,"revealRepository",1),nQ([(0,tZ.I)(()=>"")],WorktreesView.prototype,"revealWorktree",1);let RequestType=class RequestType{constructor(e){this.name=e}};let nG=new RequestType("git"),nY=new RequestType("git/logStreamTo"),nV=new RequestType("repositories/inFolder");var nz=Object.defineProperty,nH=Object.getOwnPropertyDescriptor,nj=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nH(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nz(t,i,o),o};let nJ=()=>!0,nK=new Map([["blame",nJ],["branch",e=>"--contains"===e[1]],["cat-file",nJ],["check-mailmap",nJ],["check-ref-format",nJ],["config",e=>"--get"===e[1]||"--get-regex"===e[1]],["diff",nJ],["difftool",nJ],["for-each-ref",nJ],["log",nJ],["ls-files",nJ],["ls-tree",nJ],["merge-base",nJ],["remote",e=>"-v"===e[1]||"get-url"===e[1]],["rev-list",nJ],["rev-parse",nJ],["show",nJ],["show-ref",nJ],["stash",e=>"list"===e[1]],["status",nJ],["symbolic-ref",nJ],["tag",e=>"-l"===e[1]],["worktree",e=>"list"===e[1]]]),nZ=/^[/|\\]/,nX=class _VslsHostService{constructor(e,t,i){this._api=e,this._service=t,this.container=i,t.onDidChangeIsServiceAvailable(this.onAvailabilityChanged.bind(this)),this._disposable=C.Disposable.from(C.workspace.onDidChangeWorkspaceFolders(this.onWorkspaceFoldersChanged,this)),this.onRequest(nG,this.onGitCommandRequest.bind(this)),this.onRequest(nY,this.onGitLogStreamToCommandRequest.bind(this)),this.onRequest(nV,this.onGetRepositoriesForUriRequest.bind(this)),this.onWorkspaceFoldersChanged()}static ServiceId="proxy";static async share(e,t){let i=await e.shareService(this.ServiceId);if(null==i)throw Error("Failed to share host service");return new _VslsHostService(e,i,t)}_disposable;_localPathsRegex;_localToSharedPaths=new Map;_sharedPathsRegex;_sharedToLocalPaths=new Map;dispose(){this._disposable.dispose(),this._api.unshareService(_VslsHostService.ServiceId)}onRequest(e,t){this._service.onRequest(e.name,function(e,i){let r;for(let t of e)if("object"==typeof t&&"__type"in t){r=t;break}return t(r??e[0],i)})}onAvailabilityChanged(e){}onWorkspaceFoldersChanged(e){let t,i;if(null==C.workspace.workspaceFolders||0===C.workspace.workspaceFolders.length)return;let r=(0,eM.b1)();for(let e of(this._localToSharedPaths.clear(),this._sharedToLocalPaths.clear(),C.workspace.workspaceFolders))t=(0,q.ay)(e.uri.fsPath),i=(0,q.ay)(this.convertLocalUriToShared(e.uri).toString()),eq.YJ.debug(r,`shared='${i}' \u2194 local='${t}'`),this._localToSharedPaths.set(t,i),this._sharedToLocalPaths.set(i,t);let s=(0,eN.kn)(this._sharedToLocalPaths.values(),"|");s=s.replace(/(\/|\\)/g,"[\\\\/|\\\\]"),this._localPathsRegex=RegExp(`(${s})`,"gi");let o=(0,eN.kn)(this._localToSharedPaths.values(),"|");o=o.replace(/(\/|\\)/g,"[\\\\/|\\\\]"),this._sharedPathsRegex=RegExp(`^(${o})`,"i")}async onGitCommandRequest(e,t){let i=nK.get(e.args[0]);if(null==i||!i(e.args))throw Error(`Git ${e.args[0]} command is not allowed`);let{options:r,args:s}=e,[o,n]=this.convertGitCommandCwd(r.cwd);r.cwd=o;let a=await function(e,...t){return ib().git(e,...t)}(r,...this.convertGitCommandArgs(s,n));return"string"==typeof a?(null!=this._localPathsRegex&&a.length>0&&(a=a.replace(this._localPathsRegex,(e,t)=>{let i=this._localToSharedPaths.get((0,q.ay)(t));return null!=i?i:t})),{data:a}):{data:a.toString("binary"),isBuffer:!0}}async onGitLogStreamToCommandRequest(e,t){let{options:i,args:r}=e,[s,o]=this.convertGitCommandCwd(e.repoPath),[n,a]=await function(e,t,i,r,...s){return ib().logStreamTo(e,t,i,r,...s)}(s,e.sha,e.limit,i,...this.convertGitCommandArgs(r,o));return null!=this._localPathsRegex&&n.length>0&&(n=n.map(e=>e.replace(this._localPathsRegex,(e,t)=>{let i=this._localToSharedPaths.get((0,q.ay)(t));return null!=i?i:t}))),{data:n,count:a}}async onGetRepositoriesForUriRequest(e,t){let i=[],r=this.convertSharedUriToLocal(C.Uri.parse(e.folderUri,!0)),s=this.container.git.getRepository(r);if(null!=s){let e=this.convertLocalUriToShared(s.uri);i.push({folderUri:e.toString(),root:s.root,closed:s.closed})}return{repositories:i}}convertLocalUriToShared(e){let t=(0,eM.b1)(),i=this._api.convertLocalUriToShared(e);eq.YJ.debug(t,`LiveShare.convertLocalUriToShared(${e.toString(!0)}) returned ${i.toString(!0)}`);let r=e.path,s=i.path;if(i.authority.length>0&&(s=`/${i.authority}${s}`),RegExp(`${r}$`,"i").test(s)){if(s.length===r.length){let t=C.workspace.getWorkspaceFolder(e);i=i.with({authority:"",path:`/~${t.index}`})}else i=i.with({authority:"",path:s.substr(0,s.length-r.length)})}else if(!s.startsWith("/~")){let t=C.workspace.getWorkspaceFolder(e);i=i.with({authority:"",path:`/~${t.index}${s}`})}return i}convertGitCommandCwd(e){let t=!1;if(null!=e&&e.length>0&&null!=this._sharedToLocalPaths){if(this._sharedPathsRegex?.test(e))e=(0,q.ay)(e).replace(this._sharedPathsRegex,(e,i)=>{t||(t="/~0"===i);let r=this._sharedToLocalPaths.get(i);return null!=r?r:i});else if(nZ.test(e)){let i=this._sharedToLocalPaths.get("vsls:/~0");null!=i&&(t=!0,e=(0,q.ay)(this.container.git.getAbsoluteUri(e,i).fsPath))}}return[e,t]}convertGitCommandArgs(e,t){let i=!1,r=-1;for(let s of e){if(r++,"--"===s){i=!0;continue}i&&"string"==typeof s&&(t&&nZ.test(s[0])&&e.splice(r,1,s.substr(1)),this._sharedPathsRegex?.test(s)&&e.splice(r,1,(0,q.ay)(s).replace(this._sharedPathsRegex,(e,t)=>{let i=this._sharedToLocalPaths.get(t);return null!=i?i:t})))}return e}convertSharedUriToLocal(e){(0,q.kn)(e.path)&&(e=e.with({path:`${e.path}/`}));let t=this._api.convertSharedUriToLocal(e),i=t.path,r=e.path;return i.endsWith(r)&&(i=i.substr(0,i.length-r.length)),47===i.charCodeAt(i.length-1)&&(i=i.slice(0,-1)),t.with({path:i})}};nj([(0,eW.Yz)()],nX.prototype,"onAvailabilityChanged",1),nj([(0,eW.u_)()],nX.prototype,"onWorkspaceFoldersChanged",1),nj([(0,eW.Yz)()],nX.prototype,"onGitCommandRequest",1),nj([(0,eW.Yz)()],nX.prototype,"onGitLogStreamToCommandRequest",1),nj([(0,eW.Yz)()],nX.prototype,"onGetRepositoriesForUriRequest",1),nj([(0,eW.u_)({exit:!0})],nX.prototype,"convertLocalUriToShared",1),nj([(0,eW.Yz)()],nX,"share",1);var n0=Object.defineProperty,n1=Object.getOwnPropertyDescriptor,n2=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?n1(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&n0(t,i,o),o};let n4=class _VslsGuestService{constructor(e,t,i){this._api=e,this._service=t,this.container=i,t.onDidChangeIsServiceAvailable(this.onAvailabilityChanged.bind(this)),this.onAvailabilityChanged(t.isServiceAvailable)}static async connect(e,t){let i=(0,eM.b1)();try{let i=await e.getSharedService(nX.ServiceId);if(null==i)throw Error("Failed to connect to host service");return new _VslsGuestService(e,i,t)}catch(e){eq.YJ.error(e,i);return}}dispose(){}onAvailabilityChanged(e){if(e){this.container.git.setEnabledContext(!0);return}this.container.git.setEnabledContext(!1),C.window.showWarningMessage("GitLens features will be unavailable. Unable to connect to the host GitLens service. The host may have disabled GitLens guest access or may not have GitLens installed.")}async git(e,...t){let i=await this.sendRequest(nG,{__type:"gitlens",options:e,args:t});return i.isBuffer?Buffer.from(i.data,"binary"):i.data}async gitLogStreamTo(e,t,i,r,...s){let o=await this.sendRequest(nY,{__type:"gitlens",repoPath:e,sha:t,limit:i,options:r,args:s});return[o.data,o.count]}async getRepositoriesForUri(e){return(await this.sendRequest(nV,{__type:"gitlens",folderUri:e.toString()})).repositories}sendRequest(e,t,i){return this._service.request(e.name,[t],i)}};n2([(0,eW.Yz)()],n4.prototype,"onAvailabilityChanged",1),n2([(0,eW.Yz)()],n4.prototype,"git",1),n2([(0,eW.Yz)()],n4.prototype,"gitLogStreamTo",1),n2([(0,eW.Yz)()],n4.prototype,"getRepositoriesForUri",1),n2([(0,eW.u_)()],n4.prototype,"sendRequest",1),n2([(0,eW.Yz)()],n4,"connect",1);var n6=Object.defineProperty,n3=Object.getOwnPropertyDescriptor,n8=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?n3(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&n6(t,i,o),o};function n7(e){switch(e){case"available":return{status:"online",statusText:"Available"};case"away":return{status:"away",statusText:"Away"};case"busy":return{status:"busy",statusText:"Busy"};case"doNotDisturb":return{status:"dnd",statusText:"DND"};default:return{status:"offline",statusText:"Offline"}}}let VslsController=class VslsController{constructor(e){this.container=e,this._ready=(0,t0.Qv)(),this._disposable=C.Disposable.from((0,iT.qw)(e.onReady)(this.onReady,this),A.i.onDidChange(this.onConfigurationChanged,this))}_api;_disposable;_guest;_host;_ready;dispose(){this._ready.fulfill(),this._disposable.dispose(),this._host?.dispose(),this._guest?.dispose()}onReady(){this.initialize()}async initialize(){if(!this.enabled){(0,iN.Qr)("gitlens:vsls",!1);return}C.workspace.workspaceFolders?.some(e=>e.uri.scheme===_.cl.Vsls)&&this.setReadonly(!0);try{this._api=this.getLiveShareApi();let e=await this._api;if(null==e){(0,iN.Qr)("gitlens:vsls",!1),this._ready.fulfill();return}(0,iN.Qr)("gitlens:vsls",!0),this._disposable=C.Disposable.from(this._disposable,e.onDidChangeSession(t=>this.onLiveShareSessionChanged(e,t),this)),this.onLiveShareSessionChanged(e,{session:e.session})}catch(e){eq.YJ.error(e)}}onConfigurationChanged(e){A.i.changed(e,"liveshare.enabled")&&this.initialize()}async onLiveShareSessionChanged(e,t){switch(this._host?.dispose(),this._host=void 0,this._guest?.dispose(),this._guest=void 0,t.session.role){case 1:this.setReadonly(!1),(0,iN.Qr)("gitlens:vsls","host"),A.i.get("liveshare.allowGuestAccess")&&(this._host=await nX.share(e,this.container)),this._ready.fulfill();break;case 2:this.setReadonly(!0),(0,iN.Qr)("gitlens:vsls","guest"),this._guest=await n4.connect(e,this.container),this._ready.fulfill();break;default:this.setReadonly(!1),(0,iN.Qr)("gitlens:vsls",!0),this._ready.pending||(this._ready=(0,t0.Qv)())}}async getLiveShareApi(){try{let e=C.extensions.getExtension("ms-vsliveshare.vsliveshare");if(null!=e){let t=e.isActive?e.exports:await e.activate();return await t.getApi("1.0.4753")??void 0}}catch(e){eq.YJ.error(e)}}_readonly=!1;get readonly(){return this._readonly}setReadonly(e){this._readonly=e,(0,iN.Qr)("gitlens:readonly",!!e||void 0)}get enabled(){return A.i.get("liveshare.enabled")}async guest(){return null!=this._guest||await this._ready.promise,this._guest}async getContact(e){if(null==e)return;let t=await this._api;if(null!=t)return(await t.getContacts([e])).contacts[e]}async getContacts(e){let t=await this._api;if(null!=t)return Object.values((await t.getContacts(e)).contacts)}async getContactPresence(e){let t=await this.getContact(e);if(null!=t)return n7(t.status)}async getContactsPresence(e){let t=await this.getContacts(e);if(null!=t)return new Map(Object.values(t).map(e=>[e.email,n7(e.status)]))}async invite(e){if(null==e)return;let t=await this.getContact(e);if(null!=t)return t.invite()}async startSession(){let e=await this._api;if(null!=e)return e.share()}};n8([(0,eW.u_)()],VslsController.prototype,"getContact",1),n8([(0,eW.u_)({args:{0:e=>e.length}})],VslsController.prototype,"getContacts",1),n8([(0,eW.u_)()],VslsController.prototype,"getContactPresence",1),n8([(0,eW.u_)({args:{0:e=>e.length}})],VslsController.prototype,"getContactsPresence",1);var n5=i(6552),n9=i(6584),ae=i(6340);let at=new n9.Ip("rebase/abort"),ai=new n9.Ip("rebase/disable"),ar=new n9.Ip("rebase/search"),as=new n9.Ip("rebase/start"),ao=new n9.Ip("rebase/switch"),an=new n9.Ip("rebase/reorder"),aa=new n9.Ip("rebase/change/entry"),al=new n9.Ip("rebase/move/entry"),ah=new n9.Ip("rebase/selection/update"),ac=new n9.ik("rebase/didChange");var au=Object.defineProperty,ad=Object.getOwnPropertyDescriptor,ap=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?ad(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&au(t,i,o),o};let ag=new TextDecoder("utf8"),am=0,af=0,aw=/^\s?#\s?Rebase\s([0-9a-f]+)(?:..([0-9a-f]+))?\sonto\s([0-9a-f]+)\s.*$/im,av=/^\s?(p|pick|r|reword|e|edit|s|squash|f|fixup|d|drop)\s([0-9a-f]+?)\s(.*)$/gm,ay=new Map([["p","pick"],["pick","pick"],["r","reword"],["reword","reword"],["e","edit"],["edit","edit"],["s","squash"],["squash","squash"],["f","fixup"],["fixup","fixup"],["d","drop"],["drop","drop"]]);let RebaseEditorProvider=class RebaseEditorProvider{constructor(e){this.container=e,this._disposable=C.Disposable.from(C.window.registerCustomEditorProvider("gitlens.rebase",this,{supportsMultipleEditorsPerDocument:!1,webviewOptions:{enableFindWidget:!0,retainContextWhenHidden:!0}})),this.ascending="asc"===A.i.get("rebaseEditor.ordering")}_disposable;ascending=!1;dispose(){this._disposable.dispose()}get contextKeyPrefix(){return"gitlens:webview:rebase"}get enabled(){let e=A.i.inspectCore("workbench.editorAssociations")?.globalValue;if(null==e||0===e.length)return!0;if(Array.isArray(e)){let t=e.find(e=>"git-rebase-todo"===e.filenamePattern);return null==t||"gitlens.rebase"===t.viewType}let t=e["git-rebase-todo"];return null==t||"gitlens.rebase"===t}_disableAfterNextUse=!1;async enableForNextUse(){this.enabled||(await this.setEnabled(!0),this._disableAfterNextUse=!0)}async setEnabled(e){this._disableAfterNextUse=!1;let t=A.i.inspectCore("workbench.editorAssociations"),i=t?.globalValue;if(Array.isArray(i)&&(i=i.reduce((e,t)=>(e[t.filenamePattern]=t.viewType,e),Object.create(null))),null==i){if(e)return;i={"git-rebase-todo":"default"}}else i["git-rebase-todo"]=e?"gitlens.rebase":"default";await A.i.updateAny("workbench.editorAssociations",i,C.ConfigurationTarget.Global)}async resolveCustomTextEditor(e,t,i){this.container.usage.track("rebaseEditor:shown");let r=(0,q.ay)(C.Uri.joinPath(e.uri,"..","..","..").fsPath),s=this.container.git.getRepository(r),o=[],n={dispose:()=>void C.Disposable.from(...o).dispose(),id:(1073741824===af?af=1:af++,af),subscriptions:o,document:e,panel:t,repoPath:s?.path??r,firstSelection:!0};o.push(t.onDidDispose(()=>{(0,ae.Cc)(this.contextKeyPrefix),C.Disposable.from(...o).dispose()}),t.onDidChangeViewState(e=>this.onViewStateChanged(n,e)),t.webview.onDidReceiveMessage(e=>this.onMessageReceived(n,e)),C.workspace.onDidChangeTextDocument(t=>{0!==t.contentChanges.length&&t.document.uri.toString()===e.uri.toString()&&this.updateState(n,!0)}),C.workspace.onDidSaveTextDocument(t=>{t.uri.toString()===e.uri.toString()&&this.updateState(n,!0)})),null!=s&&o.push(s.onDidChange(e=>{e.changed(ty.c7.Rebase,ty.MR.Any)&&this.updateState(n)})),t.webview.options={enableCommandUris:!0,enableScripts:!0},t.webview.html=await this.getHtml(n),this._disableAfterNextUse&&(this._disableAfterNextUse=!1,this.setEnabled(!1))}onViewFocusChanged(e){(0,ae.sh)(this.contextKeyPrefix)}onViewStateChanged(e,t){t.webviewPanel.visible?(0,ae.sh)(this.contextKeyPrefix):(0,ae.Cc)(this.contextKeyPrefix),e.pendingChange&&this.updateState(e)}async parseState(e){if(void 0===e.branchName){let t=await this.container.git.getBranch(e.repoPath);e.branchName=t?.name??null}return await aC(this.container,e,this.ascending)}async postMessage(e,t){try{let i=await e.panel.webview.postMessage(t);return e.pendingChange=!i,i}catch(t){return eq.YJ.error(t),e.pendingChange=!0,!1}}onMessageReceived(e,t){switch(t.method){case n9.S_.method:(0,n9.El)(n9.S_,t,e=>{this.onViewFocusChanged(e)});break;case at.method:(0,n9.El)(at,t,()=>this.abort(e));break;case ai.method:(0,n9.El)(ai,t,()=>this.disable(e));break;case ar.method:(0,n9.El)(ar,t,()=>(0,iX.CA)("editor.action.webvieweditor.showFind"));break;case as.method:(0,n9.El)(as,t,()=>this.rebase(e));break;case ao.method:(0,n9.El)(ao,t,()=>this.switchToText(e));break;case an.method:(0,n9.El)(an,t,t=>this.swapOrdering(t,e));break;case aa.method:(0,n9.El)(aa,t,t=>this.onEntryChanged(e,t));break;case al.method:(0,n9.El)(al,t,t=>this.onEntryMoved(e,t));break;case ah.method:(0,n9.El)(ah,t,t=>this.onSelectionChanged(e,t))}}async onEntryChanged(e,t){let i=aA(e.document),r=i.find(e=>e.sha===t.sha);if(null==r)return;let s=e.document.positionAt(r.index),o=e.document.validateRange(new C.Range(new C.Position(s.line,0),new C.Position(s.line,1073741824))),n=t.action,a=new C.WorkspaceEdit,l=[...i];l.splice(i.indexOf(r),1,{...r,action:t.action});let h=!1;for(let e of l)"squash"===e.action||"fixup"===e.action?h=!0:h&&"drop"!==e.action&&(h=!1);if(h){let t=l[l.length-1];if(r.sha===t.sha)n="pick";else{let i=e.document.positionAt(t.index),r=e.document.validateRange(new C.Range(new C.Position(i.line,0),new C.Position(i.line,1073741824)));a.replace(e.document.uri,r,`pick ${t.sha} ${t.message}`)}}a.replace(e.document.uri,o,`${n} ${r.sha} ${r.message}`),await C.workspace.applyEdit(a)}async onEntryMoved(e,t){let i;let r=aA(e.document),s=r.find(e=>e.sha===t.sha);if(null==s)return;let o=r.findIndex(e=>e.sha===t.sha);if(t.relative){if(-1===t.to&&0===o||1===t.to&&o===r.length-1)return;i=o+t.to}else{if(o===t.to)return;i=t.to}let n=r[i],a=e.document.positionAt(n.index).line;i<o&&a++;let l=e.document.positionAt(s.index),h=e.document.validateRange(new C.Range(new C.Position(l.line,0),new C.Position(l.line+1,0))),c=[...r];c.splice(o,1),c.splice(i,0,s);let u=!1;for(let e of c)"squash"===e.action||"fixup"===e.action?u=!0:u&&"drop"!==e.action&&(u=!1);let d=new C.WorkspaceEdit,p=s.action;if(u){let t=c[c.length-1];if(s.sha===t.sha)p="pick";else{let i=e.document.positionAt(t.index),r=e.document.validateRange(new C.Range(new C.Position(i.line,0),new C.Position(i.line,1073741824)));d.replace(e.document.uri,r,`pick ${t.sha} ${t.message}`)}}d.delete(e.document.uri,h),d.insert(e.document.uri,new C.Position(a,0),`${p} ${s.sha} ${s.message}
`),await C.workspace.applyEdit(d)}onSelectionChanged(e,t){null==e.fireSelectionChangedDebounced&&(e.fireSelectionChangedDebounced=(0,tX.Cu)(this.fireSelectionChanged.bind(this),250)),e.fireSelectionChangedDebounced(e,t.sha)}fireSelectionChanged(e,t){if(null==t)return;let i=A.i.get("rebaseEditor.showDetailsView");t=e.commits?.find(e=>e.sha.startsWith(t))?.sha??t,this.container.events.fire("commit:selected",{commit:(0,F.op)(t,e.repoPath,{refType:"revision"}),interaction:"passive",preserveFocus:!0,preserveVisibility:e.firstSelection?!1===i:"selection"!==i},{source:"gitlens.rebase"}),e.firstSelection=!1}updateState(e,t=!1){if(t){e.notifyDidChangeStateDebounced?.cancel(),this.notifyDidChangeState(e);return}null==e.notifyDidChangeStateDebounced&&(e.notifyDidChangeStateDebounced=(0,tX.Cu)(this.notifyDidChangeState.bind(this),250)),e.notifyDidChangeStateDebounced(e)}async notifyDidChangeState(e){if(!e.panel.visible){e.pendingChange=!0;return}let t=await this.parseState(e);this.postMessage(e,{id:(1073741824===am?am=1:am++,`host:${am}`),method:ac.method,params:{state:t}})}async abort(e){e.dispose();let t=new C.WorkspaceEdit;t.replace(e.document.uri,new C.Range(0,0,e.document.lineCount,0),""),await C.workspace.applyEdit(t),await e.document.save(),e.panel.dispose()}async disable(e){await this.abort(e),await this.setEnabled(!1)}async rebase(e){e.dispose(),await e.document.save(),e.panel.dispose()}swapOrdering(e,t){this.ascending=e.ascending??!1,A.i.updateEffective("rebaseEditor.ordering",this.ascending?"asc":"desc"),this.updateState(t,!0)}switchToText(e){(0,tJ.L)(),(0,iX.CA)("vscode.open",e.document.uri,{override:!1,preview:!1})}async getHtml(e){let t=C.Uri.joinPath(this.container.context.extensionUri,"dist","webviews"),i=C.Uri.joinPath(t,"rebase.html"),[r,s]=await Promise.all([C.workspace.fs.readFile(i),this.parseState(e)]);return(0,ae.E7)(ag.decode(r),"gitlens.rebase",void 0,e.panel.webview.cspSource,(0,th.es)(),e.panel.webview.asWebviewUri(this.container.context.extensionUri).toString(),e.panel.webview.asWebviewUri(t).toString(),"editor",s)}};async function ab(e,t,i,r){t.commits=[],t.authors=new Map;let s=await e.git.richSearchCommits(t.repoPath,{query:`${i?`#:${i} `:""}${(0,eN.kn)((0,eN.kH)(r,e=>`#:${e.sha}`)," ")}`},{limit:0});if(null!=s){for(let e of s.commits.values())if(t.commits.push(e),t.authors.has(e.author.name)||t.authors.set(e.author.name,{author:e.author.name,avatarUrl:(await e.getAvatarUri()).toString(!0),email:e.author.email}),!t.authors.has(e.committer.name)){let i=await e.committer.getAvatarUri(e);t.authors.set(e.committer.name,{author:e.committer.name,avatarUrl:i.toString(!0),email:e.committer.email})}}}async function aC(e,t,i){let r;let s=t.document.getText(),o=aA(s),[,,,n]=aw.exec(s)??["","",""];(null==t.authors||null==t.commits)&&await ab(e,t,n,o);let a=A.i.get("defaultDateFormat"),l=n5.k.getMarkdownCommandArgs("${commit}",t.repoPath),h=n?t.commits?.find(e=>e.sha.startsWith(n)):void 0;for(let e of o)null!=(r=t.commits?.find(t=>t.sha.startsWith(e.sha)))&&(r.sha===h?.sha&&(n=""),e.commit={sha:r.sha,author:r.author.name,committer:r.committer.name,date:r.formatDate(a),dateFromNow:r.formatDateFromNow(),message:(0,tp.I)(r.message??r.summary)});return{webviewId:"gitlens.rebase",webviewInstanceId:void 0,timestamp:Date.now(),branch:t.branchName??"",onto:n?{sha:n,commit:null!=h?{sha:h.sha,author:h.author.name,committer:h.committer.name,date:h.formatDate(a),dateFromNow:h.formatDateFromNow(),message:(0,tp.I)(h.message||"root")}:void 0}:void 0,entries:o,authors:null!=t.authors?Object.fromEntries(t.authors):{},commands:{commit:l},ascending:i}}function aA(e){let t,i,r,s;let o="string"==typeof e?e:e.getText(),n=[];for(;null!=(t=av.exec(o));)[,i,r,s]=t,n.push({index:t.index,action:ay.get(i)??"pick",sha:` ${r}`.substr(1),message:null==s||0===s.length?"":` ${s}`.substr(1)});return n.reverse()}ap([(0,eW.u_)({args:{0:e=>e.uri.toString(!0)}})],RebaseEditorProvider.prototype,"resolveCustomTextEditor",1),ap([(0,eW.u_)({args:{0:e=>`focused=${e.focused}, inputFocused=${e.inputFocused}`}})],RebaseEditorProvider.prototype,"onViewFocusChanged",1),ap([(0,eW.u_)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`,1:e=>`active=${e.webviewPanel.active}, visible=${e.webviewPanel.visible}`}})],RebaseEditorProvider.prototype,"onViewStateChanged",1),ap([(0,eW.u_)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`}})],RebaseEditorProvider.prototype,"updateState",1),ap([(0,eW.u_)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`}})],RebaseEditorProvider.prototype,"notifyDidChangeState",1),ap([(0,eW.Yz)({args:!1})],RebaseEditorProvider.prototype,"abort",1),ap([(0,eW.Yz)({args:!1})],RebaseEditorProvider.prototype,"disable",1),ap([(0,eW.Yz)({args:!1})],RebaseEditorProvider.prototype,"rebase",1),ap([(0,eW.Yz)({args:!1})],RebaseEditorProvider.prototype,"swapOrdering",1),ap([(0,eW.Yz)({args:!1})],RebaseEditorProvider.prototype,"switchToText",1);var ak=i(4008),aP=Object.defineProperty,aS=Object.getOwnPropertyDescriptor,aR=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?aS(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&aP(t,i,o),o};let aD=class _Container{static #e;static #t=new Proxy({},{get:function(e,t){if(null!=_Container.#e)return _Container.#e[t];if("config"===t)return A.i.getAll();throw Error("Container is not initialized")}});static create(e,t,i,r,s){if(null!=_Container.#e)throw Error("Container is already initialized");return _Container.#e=new _Container(e,t,i,r,s),_Container.#e}static get instance(){return _Container.#e??_Container.#t}_onReady=new C.EventEmitter;get onReady(){return this._onReady.event}BranchDateFormatting={dateFormat:void 0,dateStyle:void 0,reset:()=>{this.BranchDateFormatting.dateFormat=A.i.get("defaultDateFormat"),this.BranchDateFormatting.dateStyle=A.i.get("defaultDateStyle")}};CommitDateFormatting={dateFormat:null,dateSource:"authored",dateStyle:"relative",reset:()=>{this.CommitDateFormatting.dateFormat=A.i.get("defaultDateFormat"),this.CommitDateFormatting.dateSource=A.i.get("defaultDateSource"),this.CommitDateFormatting.dateStyle=A.i.get("defaultDateStyle")}};CommitShaFormatting={length:7,reset:()=>{this.CommitShaFormatting.length=Math.max(5,A.i.get("advanced.abbreviatedShaLength"))}};PullRequestDateFormatting={dateFormat:null,dateStyle:"relative",reset:()=>{this.PullRequestDateFormatting.dateFormat=A.i.get("defaultDateFormat"),this.PullRequestDateFormatting.dateStyle=A.i.get("defaultDateStyle")}};TagDateFormatting={dateFormat:null,dateStyle:"relative",reset:()=>{this.TagDateFormatting.dateFormat=A.i.get("defaultDateFormat"),this.TagDateFormatting.dateStyle=A.i.get("defaultDateStyle")}};_connection;_disposables;_terminalLinks;_webviews;constructor(e,t,r,s,o){var n,a;this._context=e,this._prerelease=r,this._version=s,this.ensureModeApplied(),this._disposables=[this._storage=t,this._telemetry=new TelemetryService(this),this._usage=new UsageTracker(this,t),A.i.onDidChangeAny(this.onAnyConfigurationChanged,this)],this._disposables.push(this._connection=new ServerConnection(this)),this._disposables.push(this._accountAuthentication=new AccountAuthenticationProvider(this,this._connection)),this._disposables.push(this._subscription=new SubscriptionService(this,this._connection,o)),this._disposables.push(this._organizations=new OrganizationService(this,this._connection)),this._disposables.push(this._git=new GitProviderService(this)),this._disposables.push(new GitFileSystemProvider(this)),this._disposables.push(this._uri=new UriService(this)),this._disposables.push(this._deepLinks=new DeepLinkService(this)),this._disposables.push(this._actionRunners=new iU.EP(this)),this._disposables.push(this._documentTracker=new GitDocumentTracker(this)),this._disposables.push(this._lineTracker=new LineTracker(this,this._documentTracker)),this._disposables.push(this._keyboard=new Keyboard),this._disposables.push(this._vsls=new VslsController(this)),this._disposables.push(this._eventBus=new EventBus),this._disposables.push(this._fileAnnotationController=new i$.a(this)),this._disposables.push(this._lineAnnotationController=new LineAnnotationController(this)),this._disposables.push(this._lineHoverController=new LineHoverController(this)),this._disposables.push(this._statusBarController=new StatusBarController(this)),this._disposables.push(this._codeLensController=new GitCodeLensController(this)),this._disposables.push(this._webviews=new ak.e(this));let l=this._webviews.registerWebviewPanel({id:_.eq.ShowGraphPage,options:{preserveInstance:!0}},{id:"gitlens.graph",fileName:"graph.html",iconPath:"images/gitlens-icon.png",title:"Commit Graph",contextKeyPrefix:"gitlens:webview:graph",trackingFeature:"graphWebview",plusFeature:!0,column:C.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!0,enableFindWidget:!1},allowMultipleInstances:A.i.get("graph.allowMultiple")},async(e,t)=>{let{GraphWebviewProvider:r}=await i.e(340).then(i.bind(i,6832));return new r(e,t)});this._disposables.push(l),this._disposables.push((n=this,C.Disposable.from((0,iX.or)(_.eq.ShowGraph,(...e)=>{let t;let[i]=e;if((0,so.c1)(i)){if(null!=i.rootUri){let e=n.git.getRepository(i.rootUri);null!=e&&(t=e)}e=[]}else i instanceof sn.sl&&(i.is("repo-folder")&&(t=i.repo),e=[]);return null!=t?(0,iX.gf)(_.eq.ShowInCommitGraph,t):"panel"===A.i.get("graph.layout")?(0,iX.gf)(_.eq.ShowGraphView,...e):(0,iX.gf)(_.eq.ShowGraphPage,void 0,...e)}),(0,iX.or)(`${l.id}.switchToEditorLayout`,async()=>{await A.i.updateEffective("graph.layout","editor"),queueMicrotask(()=>void(0,iX.gf)(_.eq.ShowGraphPage))}),(0,iX.or)(`${l.id}.switchToPanelLayout`,async()=>{await A.i.updateEffective("graph.layout","panel"),queueMicrotask(async()=>{await (0,iX.CA)("gitlens.views.graph.resetViewLocation"),await (0,iX.CA)("gitlens.views.graphDetails.resetViewLocation"),(0,iX.gf)(_.eq.ShowGraphView)})}),(0,iX.or)(_.eq.ToggleGraph,(...e)=>{(0,iN.wp)("gitlens:webviewView:graph:visible")?(0,iX.CA)("workbench.action.closePanel"):(0,iX.gf)(_.eq.ShowGraphView,...e)}),(0,iX.or)(_.eq.ToggleMaximizedGraph,(...e)=>{(0,iN.wp)("gitlens:webviewView:graph:visible")||(0,iX.gf)(_.eq.ShowGraphView,...e),(0,iX.CA)("workbench.action.toggleMaximizedPanel")}),(0,iX.or)(_.eq.ShowInCommitGraph,e=>{if(e instanceof sa.c){if(null==e.ref)return;e={ref:e.ref}}let t="preserveFocus"in e&&(e.preserveFocus??!1);if("panel"===A.i.get("graph.layout")){if(!n.graphView.visible){let i=l.getBestInstance({preserveFocus:t},e);if(null!=i){i.show({preserveFocus:t},e);return}}n.graphView.show({preserveFocus:t},e)}else l.show({preserveFocus:t},e)}),(0,iX.or)(_.eq.ShowInCommitGraphView,e=>{if(e instanceof sa.c){if(null==e.ref)return;e={ref:e.ref}}let t="preserveFocus"in e&&(e.preserveFocus??!1);n.graphView.show({preserveFocus:t},e)}),(0,iX.or)(`${l.id}.refresh`,()=>void l.getActiveInstance()?.refresh(!0)),(0,iX.or)(`${l.id}.split`,()=>void l.splitActiveInstance({preserveInstance:!1,column:C.ViewColumn.Beside}))))),this._disposables.push(this._graphView=this._webviews.registerWebviewView({id:"gitlens.views.graph",fileName:"graph.html",title:"Commit Graph",contextKeyPrefix:"gitlens:webviewView:graph",trackingFeature:"graphView",plusFeature:!0,webviewHostOptions:{retainContextWhenHidden:!0}},async(e,t)=>{let{GraphWebviewProvider:r}=await i.e(340).then(i.bind(i,6832));return new r(e,t)})),this._disposables.push(new GraphStatusBarController(this));let h=this._webviews.registerWebviewPanel({id:_.eq.ShowFocusPage,options:{preserveInstance:!0}},{id:"gitlens.focus",fileName:"focus.html",iconPath:"images/gitlens-icon.png",title:"Focus",contextKeyPrefix:"gitlens:webview:focus",trackingFeature:"focusWebview",plusFeature:!0,column:C.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!0,enableFindWidget:!0},allowMultipleInstances:A.i.get("focus.allowMultiple")},async(e,t)=>{let{FocusWebviewProvider:r}=await i.e(384).then(i.bind(i,856));return new r(e,t)});this._disposables.push(h),this._disposables.push(C.Disposable.from((0,iX.or)(`${h.id}.refresh`,()=>void h.getActiveInstance()?.refresh(!0)),(0,iX.or)(`${h.id}.split`,()=>void h.splitActiveInstance({preserveInstance:!1,column:C.ViewColumn.Beside}))));let c=this._webviews.registerWebviewPanel({id:_.eq.ShowTimelinePage,options:{preserveInstance:!0}},{id:"gitlens.timeline",fileName:"timeline.html",iconPath:"images/gitlens-icon.png",title:"Visual File History",contextKeyPrefix:"gitlens:webview:timeline",trackingFeature:"timelineWebview",plusFeature:!0,column:C.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!1,enableFindWidget:!1},allowMultipleInstances:A.i.get("visualHistory.allowMultiple")},async(e,t)=>{let{TimelineWebviewProvider:r}=await i.e(664).then(i.bind(i,5232));return new r(e,t)});this._disposables.push(c),this._disposables.push(C.Disposable.from((0,iX.or)(_.eq.ShowInTimeline,(...e)=>void c.show(void 0,...e)),(0,iX.or)(`${c.id}.refresh`,()=>void c.getActiveInstance()?.refresh(!0)),(0,iX.or)(`${c.id}.split`,()=>void c.splitActiveInstance({preserveInstance:!1,column:C.ViewColumn.Beside})))),this._disposables.push(this._timelineView=this._webviews.registerWebviewView({id:"gitlens.views.timeline",fileName:"timeline.html",title:"Visual File History",contextKeyPrefix:"gitlens:webviewView:timeline",trackingFeature:"timelineView",plusFeature:!0,webviewHostOptions:{retainContextWhenHidden:!1}},async(e,t)=>{let{TimelineWebviewProvider:r}=await i.e(664).then(i.bind(i,5232));return new r(e,t)})),this._disposables.push(this._rebaseEditor=new RebaseEditorProvider(this));let u=this._webviews.registerWebviewPanel({id:_.eq.ShowSettingsPage},{id:"gitlens.settings",fileName:"settings.html",iconPath:"images/gitlens-icon.png",title:"GitLens Settings",contextKeyPrefix:"gitlens:webview:settings",trackingFeature:"settingsWebview",plusFeature:!1,column:C.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!1,enableFindWidget:!0}},async(e,t)=>{let{SettingsWebviewProvider:r}=await i.e(568).then(i.bind(i,5604));return new r(e,t)});this._disposables.push(u),this._disposables.push(C.Disposable.from(...[_.eq.ShowSettingsPageAndJumpToFileAnnotations,_.eq.ShowSettingsPageAndJumpToBranchesView,_.eq.ShowSettingsPageAndJumpToCommitsView,_.eq.ShowSettingsPageAndJumpToContributorsView,_.eq.ShowSettingsPageAndJumpToFileHistoryView,_.eq.ShowSettingsPageAndJumpToLineHistoryView,_.eq.ShowSettingsPageAndJumpToRemotesView,_.eq.ShowSettingsPageAndJumpToRepositoriesView,_.eq.ShowSettingsPageAndJumpToSearchAndCompareView,_.eq.ShowSettingsPageAndJumpToStashesView,_.eq.ShowSettingsPageAndJumpToTagsView,_.eq.ShowSettingsPageAndJumpToWorkTreesView,_.eq.ShowSettingsPageAndJumpToViews,_.eq.ShowSettingsPageAndJumpToCommitGraph,_.eq.ShowSettingsPageAndJumpToAutolinks].map(e=>{let t;let i=/.*?!(.*)/.exec(e);return null!=i&&([,t]=i),(0,iX.or)(e,()=>void u.show(void 0,...t?[t]:[]))}))),this._disposables.push(this._webviews.registerWebviewPanel({id:_.eq.ShowWelcomePage},{id:"gitlens.welcome",fileName:"welcome.html",iconPath:"images/gitlens-icon.png",title:"Welcome to GitLens",contextKeyPrefix:"gitlens:webview:welcome",trackingFeature:"welcomeWebview",plusFeature:!1,column:C.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!1,enableFindWidget:!0}},async(e,t)=>{let{WelcomeWebviewProvider:r}=await i.e(952).then(i.bind(i,6757));return new r(e,t)})),this._disposables.push(new ViewFileDecorationProvider),this._disposables.push(this._repositoriesView=new RepositoriesView(this)),this._disposables.push(this._commitDetailsView=this._webviews.registerWebviewView({id:"gitlens.views.commitDetails",fileName:"commitDetails.html",title:"Commit Details",contextKeyPrefix:"gitlens:webviewView:commitDetails",trackingFeature:"commitDetailsView",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!1}},async(e,t)=>{let{CommitDetailsWebviewProvider:r}=await i.e(692).then(i.bind(i,2392));return new r(e,t,{attachedTo:"default"})}));let d=this._webviews.registerWebviewPanel({id:_.eq.ShowPatchDetailsPage,options:{preserveInstance:!0}},{id:"gitlens.patchDetails",fileName:"patchDetails.html",iconPath:"images/gitlens-icon.png",title:"Patch",contextKeyPrefix:"gitlens:webview:patchDetails",trackingFeature:"patchDetailsWebview",plusFeature:!0,column:C.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!1,enableFindWidget:!1},allowMultipleInstances:!0},async(e,t)=>{let{PatchDetailsWebviewProvider:r}=await i.e(860).then(i.bind(i,7176));return new r(e,t)});this._disposables.push(d),this._disposables.push(this._patchDetailsView=this._webviews.registerWebviewView({id:"gitlens.views.patchDetails",fileName:"patchDetails.html",title:"Patch",contextKeyPrefix:"gitlens:webviewView:patchDetails",trackingFeature:"patchDetailsView",plusFeature:!0,webviewHostOptions:{retainContextWhenHidden:!1}},async(e,t)=>{let{PatchDetailsWebviewProvider:r}=await i.e(860).then(i.bind(i,7176));return new r(e,t)},async(...e)=>{if("editor"===A.i.get("cloudPatches.experimental.layout")){await (0,iN.Qr)("gitlens:views:patchDetails:mode",void 0),(0,iX.gf)(_.eq.ShowPatchDetailsPage,void 0,...e);return}let t=e[0];null!=t&&await (0,iN.Qr)("gitlens:views:patchDetails:mode","state"in t?t.state.mode:t.mode)})),this._disposables.push(this._graphDetailsView=this._webviews.registerWebviewView({id:"gitlens.views.graphDetails",fileName:"commitDetails.html",title:"Commit Graph Details",contextKeyPrefix:"gitlens:webviewView:graphDetails",trackingFeature:"graphDetailsView",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!1}},async(e,t)=>{let{CommitDetailsWebviewProvider:r}=await i.e(692).then(i.bind(i,2392));return new r(e,t,{attachedTo:"graph"})})),this._disposables.push(this._commitsView=new CommitsView(this)),this._disposables.push(this._fileHistoryView=new FileHistoryView(this)),this._disposables.push(this._lineHistoryView=new LineHistoryView(this)),this._disposables.push(this._branchesView=new BranchesView(this)),this._disposables.push(this._remotesView=new RemotesView(this)),this._disposables.push(this._stashesView=new StashesView(this)),this._disposables.push(this._tagsView=new TagsView(this)),this._disposables.push(this._worktreesView=new WorktreesView(this)),this._disposables.push(this._contributorsView=new ContributorsView(this)),this._disposables.push(this._searchAndCompareView=new SearchAndCompareView(this)),this._disposables.push(this._draftsView=new DraftsView(this)),this._disposables.push(this._workspacesView=new WorkspacesView(this)),this._disposables.push(this._homeView=this._webviews.registerWebviewView({id:"gitlens.views.home",fileName:"home.html",title:"Home",contextKeyPrefix:"gitlens:webviewView:home",trackingFeature:"homeView",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!1}},async(e,t)=>{let{HomeWebviewProvider:r}=await i.e(812).then(i.bind(i,9520));return new r(e,t)})),this._disposables.push(this._accountView=this._webviews.registerWebviewView({id:"gitlens.views.account",fileName:"account.html",title:"GitKraken Account",contextKeyPrefix:"gitlens:webviewView:account",trackingFeature:"accountView",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!1}},async(e,t)=>{let{AccountWebviewProvider:r}=await i.e(432).then(i.bind(i,3488));return new r(e,t)})),A.i.get("terminalLinks.enabled")&&this._disposables.push(this._terminalLinks=new GitTerminalLinkProvider(this)),this._disposables.push(A.i.onDidChange(e=>{A.i.changed(e,"terminalLinks.enabled")&&(this._terminalLinks?.dispose(),A.i.get("terminalLinks.enabled")&&this._disposables.push(this._terminalLinks=new GitTerminalLinkProvider(this)))})),e.subscriptions.push({dispose:()=>this._disposables.reverse().forEach(e=>void e.dispose())}),a=this,null!=sw()&&setTimeout(()=>a.workspaces.addMissingCurrentWorkspaceRepos(),1e4)}deactivate(){this._deactivating=!0}_deactivating=!1;get deactivating(){return this._deactivating}_ready=!1;async ready(){if(this._ready)throw Error("Container is already ready");this._ready=!0,await this.registerGitProviders(),queueMicrotask(()=>this._onReady.fire())}async registerGitProviders(){for(let e of(await iC(this)))this._disposables.push(this._git.register(e.descriptor.id,e));this._git.registrationComplete()}onAnyConfigurationChanged(e){A.i.changedAny(e,_.O_)&&(this._mode=void 0,A.i.changed(e,"outputLevel")&&(eq.YJ.logLevel=(0,iq.o$)(A.i.get("outputLevel"))),A.i.changed(e,"defaultGravatarsStyle")&&(0,td.S8)(A.i.get("defaultGravatarsStyle")),A.i.changed(e,"mode")&&this.ensureModeApplied())}_accountAuthentication;get accountAuthentication(){return this._accountAuthentication}_accountView;get accountView(){return this._accountView}_actionRunners;get actionRunners(){return this._actionRunners}_ai;get ai(){return null==this._ai&&this._disposables.push(this._ai=new AIProviderService(this)),this._ai}_autolinks;get autolinks(){return null==this._autolinks&&this._disposables.push(this._autolinks=new iD.I(this)),this._autolinks}_branchesView;get branchesView(){return this._branchesView}_cache;get cache(){return null==this._cache&&this._disposables.push(this._cache=new CacheProvider(this)),this._cache}_drafts;get drafts(){return null==this._drafts&&this._disposables.push(this._drafts=new DraftService(this,this._connection)),this._drafts}_repositoryIdentity;get repositoryIdentity(){return null==this._repositoryIdentity&&this._disposables.push(this._repositoryIdentity=new RepositoryIdentityService(this,this._connection)),this._repositoryIdentity}_draftsView;get draftsView(){return this._draftsView}_codeLensController;get codeLens(){return this._codeLensController}_commitsView;get commitsView(){return this._commitsView}_commitDetailsView;get commitDetailsView(){return this._commitDetailsView}_context;get context(){return this._context}_contributorsView;get contributorsView(){return this._contributorsView}get debugging(){return this._context.extensionMode===C.ExtensionMode.Development}_deepLinks;get deepLinks(){return this._deepLinks}_documentTracker;get documentTracker(){return this._documentTracker}_enrichments;get enrichments(){return null==this._enrichments&&this._disposables.push(this._enrichments=new rs.G(this,new ServerConnection(this))),this._enrichments}get env(){if(this.prereleaseOrDebugging){let e=A.i.getAny("gitkraken.env");if("dev"===e)return"dev";if("staging"===e)return"staging"}return"production"}_eventBus;get events(){return this._eventBus}_fileAnnotationController;get fileAnnotations(){return this._fileAnnotationController}_fileHistoryView;get fileHistoryView(){return this._fileHistoryView}_git;get git(){return this._git}_github;get github(){return null==this._github&&(this._github=this._loadGitHubApi()),this._github}async _loadGitHubApi(){try{let e=new(await i.e(176).then(i.bind(i,5672))).GitHubApi(this);return this._disposables.push(e),e}catch(e){eq.YJ.error(e);return}}_gitlab;get gitlab(){return null==this._gitlab&&(this._gitlab=this._loadGitLabApi()),this._gitlab}async _loadGitLabApi(){try{let e=new(await i.e(454).then(i.bind(i,5460))).GitLabApi(this);return this._disposables.push(e),e}catch(e){eq.YJ.error(e);return}}_graphDetailsView;get graphDetailsView(){return this._graphDetailsView}_graphView;get graphView(){return this._graphView}_homeView;get homeView(){return this._homeView}get id(){return this._context.extension.id}_integrationAuthentication;get integrationAuthentication(){return null==this._integrationAuthentication&&this._disposables.push(this._integrationAuthentication=new IntegrationAuthenticationService(this)),this._integrationAuthentication}_integrations;get integrations(){return null==this._integrations&&this._disposables.push(this._integrations=new IntegrationService(this)),this._integrations}_keyboard;get keyboard(){return this._keyboard}_lineAnnotationController;get lineAnnotations(){return this._lineAnnotationController}_lineHistoryView;get lineHistoryView(){return this._lineHistoryView}_lineHoverController;get lineHovers(){return this._lineHoverController}_lineTracker;get lineTracker(){return this._lineTracker}_mode;get mode(){return null==this._mode&&(this._mode=A.i.get("modes")?.[A.i.get("mode.active")]),this._mode}_organizations;get organizations(){return this._organizations}_patchDetailsView;get patchDetailsView(){return this._patchDetailsView}_prerelease;get prerelease(){return this._prerelease}get prereleaseOrDebugging(){return this._prerelease||this.debugging}_rebaseEditor;get rebaseEditor(){return this._rebaseEditor}_remotesView;get remotesView(){return this._remotesView}_repositoriesView;get repositoriesView(){return this._repositoriesView}_repositoryPathMapping;get repositoryPathMapping(){return null==this._repositoryPathMapping&&this._disposables.push(this._repositoryPathMapping=new RepositoryLocalPathMappingProvider(this)),this._repositoryPathMapping}_searchAndCompareView;get searchAndCompareView(){return this._searchAndCompareView}_stashesView;get stashesView(){return this._stashesView}_statusBarController;get statusBar(){return this._statusBarController}_storage;get storage(){return this._storage}_subscription;get subscription(){return this._subscription}_tagsView;get tagsView(){return this._tagsView}_telemetry;get telemetry(){return this._telemetry}_timelineView;get timelineView(){return this._timelineView}_uri;get uri(){return this._uri}_usage;get usage(){return this._usage}_version;get version(){return this._version}_viewCommands;get viewCommands(){return null==this._viewCommands&&(this._viewCommands=new ViewCommands(this)),this._viewCommands}_vsls;get vsls(){return this._vsls}_workspaces;get workspaces(){return null==this._workspaces&&this._disposables.push(this._workspaces=new WorkspacesService(this,this._connection)),this._workspaces}_workspacesView;get workspacesView(){return this._workspacesView}_worktreesView;get worktreesView(){return this._worktreesView}ensureModeApplied(){let e=this.mode;if(null==e){A.i.clearOverrides();return}if(null!=e.annotations){let t;switch(e.annotations){case"blame":t=_.eq.ToggleFileBlame;break;case"changes":t=_.eq.ToggleFileChanges;break;case"heatmap":t=_.eq.ToggleFileHeatmap}if(null!=t){let i={type:e.annotations,on:!0};setTimeout(iX.gf,50,t,i)}}A.i.applyOverrides({get:(t,i)=>{if(null!=e.annotations){if(A.i.matches(`${e.annotations}.toggleMode`,t,i))return i="window";if(A.i.matches(e.annotations,t,i))return i.toggleMode="window",i}for(let r of["codeLens","currentLine","hovers","statusBar"])if(null!=e[r]){if(A.i.matches(`${r}.enabled`,t,i)){i=e[r];break}if(A.i.matches(r,t,i)){i.enabled=e[r];break}}return i},getAll:t=>(null!=e.annotations&&(t[e.annotations].toggleMode="window"),null!=e.codeLens&&(t.codeLens.enabled=e.codeLens),null!=e.currentLine&&(t.currentLine.enabled=e.currentLine),null!=e.hovers&&(t.hovers.enabled=e.hovers),null!=e.statusBar&&(t.statusBar.enabled=e.statusBar),t),onDidChange:e=>{if(!A.i.changed(e,["mode","modes"]))return e;let t=e.affectsConfiguration;return{...e,affectsConfiguration:(e,i)=>!!/^gitlens\.(?:modes?|blame|changes|heatmap|codeLens|currentLine|hovers|statusBar)\b/.test(e)||t(e,i)}}})}};aR([(0,eW.Yz)()],aD.prototype,"registerGitProviders",1),aR([(0,eb.s)()],aD.prototype,"debugging",1),aR([(0,eb.s)()],aD.prototype,"env",1),aR([(0,eb.s)()],aD.prototype,"id",1),aR([(0,eb.s)()],aD.prototype,"prereleaseOrDebugging",1);let a$=aD;function a_(e){return e instanceof a$}},7680:(e,t,i)=>{let r;i.d(t,{I:()=>n});var s=i(1072);let o=/:([-+_a-z0-9]+):/g;function n(e){return null==r&&(r=JSON.parse((0,s.qK)(""))),e.replace(o,(e,t)=>r[t]||e)}},7312:(e,t,i)=>{i.d(t,{es:()=>s,m:()=>o,uq:()=>n});let r=require("crypto");function s(){return(0,r.randomBytes)(16).toString("base64")}function o(e,t="hex"){return(0,r.createHash)("md5").update(e).digest(t)}function n(){return(0,r.randomUUID)()}},2488:(e,t,i)=>{i.d(t,{I5:()=>n.default,aE:()=>h,uE:()=>c});var r=i(6520),s=i(8716),o=i(152),n=i(896),a=i(4169),l=i(6448);function h(e){let t;let i=a.i.get("proxy");return(null!=i?(t=i.url??void 0,e=e??i.strictSSL):"off"===a.i.getCore("http.proxySupport",void 0,"override")?e=e??!0:(e=e??a.i.getCore("http.proxyStrictSSL",void 0,!0),t=a.i.getCore("http.proxy")||r.env.HTTPS_PROXY||r.env.HTTP_PROXY),t)?(l.YJ.debug(`Using https proxy: ${t}`),new o.HttpsProxyAgent({...s.parse(t),rejectUnauthorized:e})):!1===e?new o.HttpsProxyAgent({rejectUnauthorized:!1}):void 0}async function c(e,t){if("force"!==e)return t();let i=r.env.NODE_TLS_REJECT_UNAUTHORIZED;r.env.NODE_TLS_REJECT_UNAUTHORIZED="0";try{return await t()}finally{r.env.NODE_TLS_REJECT_UNAUTHORIZED=i}}},887:(e,t,i)=>{function r(e){return Buffer.from(e,"utf8").toString("hex")}function s(e){return Buffer.from(e,"hex").toString("utf8")}i.d(t,{S:()=>r,Y:()=>s})},6948:(e,t,i)=>{i.d(t,{a:()=>r.hrtime});var r=i(6520)},2164:(e,t,i)=>{i.d(t,{Co:()=>n,Kk:()=>h,Yf:()=>l,e6:()=>o});var r=i(6520),s=i(7304);let o=s.env.uiKind===s.UIKind.Web,n="linux"===r.platform,a="darwin"===r.platform,l="win32"===r.platform;function h(){return l?"windows":a?"macOS":n?"linux":o?"web":"unknown"}},2804:(e,t,i)=>{i.d(t,{CW:()=>AuthenticationRequiredError,OW:()=>ProviderRequestClientError,SY:()=>ProviderRequestNotFoundError,U7:()=>AccountValidationError,UZ:()=>ProviderNotFoundError,W4:()=>ProviderFetchError,WO:()=>CancellationError,me:()=>l,ms:()=>a,oR:()=>ExtensionNotFoundError,oh:()=>AccessDeniedError,qw:()=>OpenVirtualRepositoryError,sT:()=>ProviderRequestRateLimitError,yA:()=>AuthenticationError});var r,s,o=i(7304),n=i(7880);let AccessDeniedError=class AccessDeniedError extends Error{subscription;required;constructor(e,t){super(e.account?.verified===!1?"Email verification required":null!=t&&(0,n.Wk)(t)?"Paid plan required":"Plan required"),this.subscription=e,this.required=t,Error.captureStackTrace?.(this,AccessDeniedError)}};let AccountValidationError=class AccountValidationError extends Error{original;statusCode;statusText;constructor(e,t,i,r){super(e+=`; status=${i}: ${r}`),this.original=t,this.statusCode=i,this.statusText=r,Error.captureStackTrace?.(this,AccountValidationError)}};var a=((r=a||{})[r.UserDidNotConsent=1]="UserDidNotConsent",r[r.Unauthorized=2]="Unauthorized",r[r.Forbidden=3]="Forbidden",r);let AuthenticationError=class AuthenticationError extends Error{id;original;reason;constructor(e,t,i){let r,s;if(null==t)r=`Unable to get required authentication session for '${e}'`;else if("string"==typeof t)r=t,s=void 0;else switch(s=t){case 1:r=`'${e}' authentication is required for this operation`;break;case 2:r=`Your '${e}' credentials are either invalid or expired`;break;case 3:r=`Your '${e}' credentials do not have the required access`}super(r),this.id=e,this.original=i,this.reason=s,Error.captureStackTrace?.(this,AuthenticationError)}};let AuthenticationRequiredError=class AuthenticationRequiredError extends Error{constructor(){super("Authentication required"),Error.captureStackTrace?.(this,AuthenticationRequiredError)}};let CancellationError=class CancellationError extends o.CancellationError{constructor(e){super(),this.original=e,Error.captureStackTrace?.(this,CancellationError)}};let ExtensionNotFoundError=class ExtensionNotFoundError extends Error{constructor(e,t){super(`Unable to find the ${t} extension (${e}). Please ensure it is installed and enabled.`),this.extensionId=e,this.extensionName=t,Error.captureStackTrace?.(this,ExtensionNotFoundError)}};var l=((s=l||{})[s.RemoteHubApiNotFound=1]="RemoteHubApiNotFound",s[s.NotAGitHubRepository=2]="NotAGitHubRepository",s[s.GitHubAuthenticationNotFound=3]="GitHubAuthenticationNotFound",s[s.GitHubAuthenticationDenied=4]="GitHubAuthenticationDenied",s);let OpenVirtualRepositoryError=class OpenVirtualRepositoryError extends Error{original;reason;repoPath;constructor(e,t,i){let r,s;if(null==t)r=`Unable to open the virtual repository: ${e}`;else if("string"==typeof t)r=t,s=void 0;else switch(s=t,r=`Unable to open the virtual repository: ${e}; `,s){case 1:r+="Unable to get required api from the GitHub Repositories extension. Please ensure that the GitHub Repositories extension is installed and enabled";break;case 2:r+="Only GitHub repositories are supported currently";break;case 3:r+="Unable to get required GitHub authentication";break;case 4:r+="GitHub authentication is required"}super(r),this.original=i,this.reason=s,this.repoPath=e,Error.captureStackTrace?.(this,OpenVirtualRepositoryError)}};let ProviderFetchError=class ProviderFetchError extends Error{constructor(e,t,i){super(`${e} request failed: ${t.ok?"":`(${t.status}) ${t.statusText}. `}${i?.length?i[0].message:""}`),this.response=t,Error.captureStackTrace?.(this,ProviderFetchError)}get status(){return this.response.status}get statusText(){return this.response.statusText}};let ProviderNotFoundError=class ProviderNotFoundError extends Error{constructor(e){super(`No provider registered for '${null==e?String(e):"string"==typeof e?e:e.toString(!0)}'`),Error.captureStackTrace?.(this,ProviderNotFoundError)}};let ProviderRequestClientError=class ProviderRequestClientError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,ProviderRequestClientError)}};let ProviderRequestNotFoundError=class ProviderRequestNotFoundError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,ProviderRequestNotFoundError)}};let ProviderRequestRateLimitError=class ProviderRequestRateLimitError extends Error{constructor(e,t,i){super(e.message),this.original=e,this.token=t,this.resetAt=i,Error.captureStackTrace?.(this,ProviderRequestRateLimitError)}}},7892:(e,t,i)=>{i.d(t,{B:()=>o,i:()=>n});var r,s,o=((r=o||{}).Stashes="stashes",r.Timeline="timeline",r.Worktrees="worktrees",r.StashOnlyStaged="stashOnlyStaged",r.ForceIfIncludes="forceIfIncludes",r),n=((s=n||{}).Timeline="timeline",s.Worktrees="worktrees",s.Graph="graph",s.Focus="focus",s)},3172:(e,t,i)=>{i.d(t,{Y:()=>a,s:()=>n});var r=i(1608),s=i(7824),o=i(2356);async function n(e){let t=(0,o.Qv)();return await (0,s.gf)(r.eq.GitCommands,{...e,completion:t}),t.promise}async function a(e,t){await (0,s.oF)(r.eq.BrowseRepoAtRevision,void 0,{uri:e,before:t?.before,openInNewWindow:t?.openInNewWindow})}},6644:(e,t,i)=>{i.d(t,{Su:()=>o,aE:()=>n,gR:()=>l,wX:()=>a});var r=i(9964),s=i(3172);function o(e,t,i){return(0,s.s)({command:"branch",state:{subcommand:"create",repo:e,reference:t,name:i}})}function n(e,t){return(0,s.s)({command:"branch",state:{subcommand:"delete",repo:e,references:t}})}function a(e,t,i){return(0,s.s)({command:"branch",state:{subcommand:"rename",repo:e,reference:t,name:i}})}async function l(e,t){let i=e.remote?r.Container.instance.remotesView:r.Container.instance.branchesView,s=i.canReveal?await i.revealBranch(e,t):await r.Container.instance.repositoriesView.revealBranch(e,t);return null==s&&i.show({preserveFocus:!t?.focus}),s}},1144:(e,t,i)=>{i.d(t,{yw:()=>w,i6:()=>v,ak:()=>y,bT:()=>b,Qz:()=>A,ol:()=>C,_O:()=>k,qM:()=>P,SW:()=>S,t6:()=>R,u8:()=>D,i_:()=>$,Ej:()=>_,nR:()=>I,eK:()=>T,U5:()=>O,Av:()=>x,bY:()=>E,YJ:()=>B,gd:()=>U,Id:()=>F,is:()=>G,ac:()=>W,gR:()=>N,o7:()=>q,bh:()=>L,a0:()=>M,KY:()=>Q,wR:()=>Y});var r=i(7304),s=i(1608),o=i(9964),n=i(7348),a=i(3732),l=i(3284);async function h(e,t,i){let s=[],o=t.repoPath,h=t.sha;function c(t){return e.git.getRevisionUri(h,`${o}/${t.item.path}`,o)}try{let o;let u=r.window.createQuickPick();u.ignoreFocusOut=i?.ignoreFocusOut??(0,l.u4)();let d=i.initialPath??t.relativePath;if(i?.keyboard!=null){let{keyboard:t}=i;(o=e.keyboard.createScope(Object.fromEntries(t.keys.map(e=>[e,{onDidPressKey:async e=>{if(0!==u.activeItems.length){let[i]=u.activeItems;if(null!=i.item){let r=u.ignoreFocusOut;u.ignoreFocusOut=!0,await t.onDidPressKey(e,c(i)),u.ignoreFocusOut=r}}}}])))).start(),null!=d&&o.pause(["left","ctrl+left","right","ctrl+right"]),s.push(o)}u.title=i.title,u.placeholder=i?.placeholder??"Search files by name",u.matchOnDescription=!0,u.value=d,u.busy=!0,u.show();let p=await e.git.getTreeForRevision(t.repoPath,h),g=[...(0,n.Gs)(p,e=>{if("blob"!==e.type)return;let[t,i]=(0,a.O)(e.path,void 0,!0);return{label:t,description:"."===i?"":i,item:e}})];u.items=g,u.busy=!1;let m=await new Promise(e=>{s.push(u,u.onDidHide(()=>e(void 0)),u.onDidAccept(()=>{0!==u.activeItems.length&&e(u.activeItems[0])}),u.onDidChangeValue(e=>{if(null!=o){for(let t of(0!==e.length?o.pause(["left","ctrl+left","right","ctrl+right"]):o.resume(),g))!t.item.path.includes(e)||t.label.includes(e)||t.description.includes(e)?t.alwaysShow=!1:t.alwaysShow=!0;u.items=g}}))});return null!=m?c(m):void 0}finally{s.forEach(e=>void e.dispose())}}var c=i(7824),u=i(4169),d=i(2812),p=i(1080),g=i(2060),m=i(7280),f=i(1424);async function w(e,t,i){let s=!1,n=t.ref,a=i?.ref;if("string"!=typeof e){if("?"===e.status)n=`${n}^3`,s=!0;else if("A"===e.status)s=!0;else if("D"===e.status){let i=d.wv.fromFile(e,t.repoPath);try{await r.workspace.fs.stat(i)}catch{s=!0,a=n,n=`${n}^`}}}if(s){let i=d.wv.fromFile(e,t.repoPath);await o.Container.instance.git.applyChangesToWorkingFile(i,n,a),await O(i,{preserveFocus:!0,preview:!1})}else await O(e,t,{preserveFocus:!0,preview:!1}),await o.Container.instance.git.applyChangesToWorkingFile(d.wv.fromFile(e,t.repoPath,n),n,a)}async function v(e){await r.env.clipboard.writeText(e.ref)}async function y(e){let t;if((0,p.S)(e))null==(t=e).message&&await t.ensureFullDetails();else if(null==(t=await o.Container.instance.git.getCommit(e.repoPath,e.ref)))return;let i=t.message??t.summary;await r.env.clipboard.writeText(i)}async function b(e,t,i){return(0,p.S)(e)?u.i.get("views.openChangesInMultiDiffEditor")?A(e,t):C(e,t):u.i.get("views.openChangesInMultiDiffEditor")?A(e,t,i):C(e,t,i)}async function C(e,t,i){let{files:r,refs:s,options:o}=await H(e,t,i);if(await V(r,{message:`Are you sure you want to open the changes for each of the ${r.length} files?`,confirmButton:"Open Changes",threshold:10}))for(let e of(o={preserveFocus:!0,preview:!1,...o},r))await R(e,s,o)}async function A(e,t,i){let n;if(!u.i.getCore("multiDiffEditor.experimental.enabled")){r.window.showErrorMessage("Enable the experimental multi-diff editor by setting 'multiDiffEditor.experimental.enabled' to use this command");return}null!=i&&({title:n,...i}=i);let{commit:a,files:h,refs:c,options:p}=await H(e,t,i);if(null==n&&(n=null!=a?`Changes in ${(0,f.c5)(c.rhs,{strings:{working:"Working Tree"}})}`:`Changes between ${(0,f.c5)(c.lhs,{strings:{working:"Working Tree"}})} ${s.or.ArrowLeftRightLong} ${(0,f.c5)(c.rhs,{strings:{working:"Working Tree"}})}`),!await V(h,{message:`Are you sure you want to view the changes for all ${h.length} files?`,confirmButton:"View All Changes",threshold:50}))return;let{git:g}=o.Container.instance,m=[];for(let e of h){let t="D"===e.status?void 0:await g.getBestRevisionUri(c.repoPath,e.path,c.rhs);null!=t&&""===c.rhs&&(t=await g.getWorkingUri(c.repoPath,t));let i="A"===e.status?void 0:await g.getBestRevisionUri(c.repoPath,e.originalPath??e.path,c.lhs),r=("D"===e.status?i:t)??d.wv.fromFile(e,c.repoPath);m.push({uri:r,lhs:i,rhs:t})}await (0,l.oF)(m,n,p)}async function k(e,t){let{files:i}=await z(e,t);if(await V(i,{message:`Are you sure you want to externally open the changes for each of the ${i.length} files?`,confirmButton:"Open Changes",threshold:10}))for(let e of i)D(e,t)}async function P(e,t,i){return(0,p.S)(e)?u.i.get("views.openChangesInMultiDiffEditor")?A(e,t):S(e,t):u.i.get("views.openChangesInMultiDiffEditor")?A(e,{repoPath:t.repoPath,lhs:t.ref,rhs:""},i):S(e,t,i)}async function S(e,t,i){let{files:r,ref:s,options:o}=await z(e,t,i);if(await V(r,{message:`Are you sure you want to open the changes for each of the ${r.length} files?`,confirmButton:"Open Changes",threshold:10}))for(let e of(o={preserveFocus:!0,preview:!1,...o},r))await $(e,s,o)}async function R(e,t,i){let r=(0,p.S)(t);if("string"==typeof e){if(!r)throw Error("Invalid arguments");let i=await t.findFile(e);if(null==i)throw Error("Invalid arguments");e=i}else if(!r&&""===t.rhs)return $(e,{repoPath:t.repoPath,ref:t.lhs},i);if(i={preserveFocus:!0,preview:!1,...i},"A"===e.status&&r){let r=await t.getCommitForFile(e);(0,c.gf)(s.eq.DiffWithPrevious,{commit:r,showOptions:i});return}let o=r?{repoPath:t.repoPath,rhs:t.sha,lhs:t.unresolvedPreviousSha}:t,n=d.wv.fromFile(e,o.repoPath),a="R"===e.status||"C"===e.status?d.wv.fromFile(e,o.repoPath,o.lhs,!0):n;await (0,c.gf)(s.eq.DiffWith,{repoPath:o.repoPath,lhs:{uri:a,sha:o.lhs,title:i?.lhsTitle},rhs:{uri:n,sha:o.rhs,title:i?.rhsTitle},showOptions:i})}async function D(e,t,i){if("string"==typeof e){if(!(0,p.S)(t))throw Error("Invalid arguments");let i=await t.findFile(e);if(null==i)throw Error("Invalid arguments");e=i}return o.Container.instance.git.openDiffTool(t.repoPath,d.wv.fromFile(e,e.repoPath??t.repoPath),{ref1:(0,f.bP)(t.ref)?"":`${t.ref}^`,ref2:(0,f.bP)(t.ref)?"":t.ref,staged:(0,f.jN)(t.ref)||null!=e.indexStatus,tool:i})}async function $(e,t,i){let r;if("string"==typeof e){if(!(0,p.S)(t))throw Error("Invalid arguments");let i=await t.findFile(e);if(null==i)throw Error("Invalid arguments");e=i}"D"!==e.status&&(r=(0,p.S)(t)?{repoPath:t.repoPath,ref:t.sha}:t,i={preserveFocus:!0,preview:!1,...i},await (0,c.oF)(s.eq.DiffWithWorking,void 0,{uri:d.wv.fromFile(e,r.repoPath,r.ref),showOptions:i,lhsTitle:i?.lhsTitle}))}async function _(e,t,i,r){return o.Container.instance.git.openDirectoryCompare(e,t,i,r)}async function I(e){return _(e.repoPath,e.ref,`${e.ref}^`)}async function T(e){return _(e.repoPath,e.ref,void 0)}async function F(e,t,i){let n;let{git:a}=o.Container.instance;if(""===t.lhs)throw Error("Cannot get files for comparisons of a ref with working tree");n=""===t.rhs?t.lhs:`${t.lhs}..${t.rhs}`;let l=a.getRelativePath(e,t.repoPath),h=await a.getDiffStatus(t.repoPath,n,void 0,{path:l});if(null==h){r.window.showWarningMessage(`No changes in '${l}' between ${(0,f.c5)(t.lhs,{strings:{working:"Working Tree"}})} ${s.or.ArrowLeftRightLong} ${(0,f.c5)(t.rhs,{strings:{working:"Working Tree"}})}`);return}let c=`Changes in ${l} between ${(0,f.c5)(t.lhs,{strings:{working:"Working Tree"}})} ${s.or.ArrowLeftRightLong} ${(0,f.c5)(t.rhs,{strings:{working:"Working Tree"}})}`;return A(h,t,{...i,title:c})}async function O(e,t,i){let o;if(e instanceof r.Uri)o=e,i=t;else if(o=d.wv.fromFile(e,t.repoPath,t.ref),"string"!=typeof e&&"?"===e.status)return;i={preserveFocus:!0,preview:!1,...i},await (0,c.oF)(s.eq.OpenWorkingFile,void 0,{uri:o,showOptions:i})}async function x(e,t,i){let s,n;if(e instanceof r.Uri){if((0,p.S)(t))throw Error("Invalid arguments");s=e,i=t}else{let i;if(!(0,p.S)(t))throw Error("Invalid arguments");if("string"==typeof e){let r=await t.findFile(e);if(null==r)throw Error("Invalid arguments");i=r}else i=e;s=o.Container.instance.git.getRevisionUri("D"===i.status?await t.getPreviousSha()??g.E1:t.sha,i,t.repoPath)}let{annotationType:a,line:c,...u}={preserveFocus:!0,preview:!1,...i};null!=c&&0!==c&&(u.selection=new r.Range(c,0,c,0));let m=await d.wv.fromUri(s);try{n=await (0,l.fL)(s,{throwOnError:!0,...u})}catch(t){if(!t?.message?.includes("Unable to resolve nonexistent file")){r.window.showErrorMessage(`Unable to open '${m.relativePath}' in revision '${m.sha}'`);return}let e=await h(o.Container.instance,m,{ignoreFocusOut:!0,title:`Open File at Revision \u2022 Unable to open '${m.relativePath}'`,placeholder:"Choose a file revision to open",keyboard:{keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await (0,l.fL)(t,{...u,preserveFocus:!0,preview:!0})}}});if(null==e)return;n=await (0,l.fL)(e,u)}null!=a&&null!=n&&await o.Container.instance.fileAnnotations.show(n,a,{selection:{line:c}})}async function E(e,t){let i;if(e instanceof r.Uri)i=e;else{if(null==t)throw Error("Invalid arguments");if(i=d.wv.fromFile(e,t.repoPath,t.ref),"string"!=typeof e&&"?"===e.status)return}await (0,c.gf)(s.eq.OpenFileOnRemote,i,{sha:t?.ref})}async function B(e,t,i){let{files:r,ref:s,options:n}=await z(e,t,i);if(!await V(r,{message:`Are you sure you want to open each of the ${r.length} files?`,confirmButton:"Open Files",threshold:10}))return;let a=(await Promise.all(r.map(e=>o.Container.instance.git.getWorkingUri(s.repoPath,d.wv.fromFile(e,s.repoPath,s.ref))))).filter(e=>!!e);(0,l.i3)(a,n)}async function U(e,t,i){let{files:r,refs:s,options:n}=await H(e,t,i);await V(r,{message:`Are you sure you want to open each of the ${r.length} file revisions?`,confirmButton:"Open Revisions",threshold:10})&&(0,l.i3)(r.map(e=>o.Container.instance.git.getRevisionUri("D"===e.status?s.lhs:s.rhs,e,s.repoPath)),n)}async function W(e,t){let i,s;if("string"==typeof e)i=e,s=t.ref;else if(i=e.path,"D"===e.status){let i=d.wv.fromFile(e,t.repoPath);try{await r.workspace.fs.stat(i),s=`${t.ref}^`}catch{s=t.ref}}else s="?"===e.status?`${t.ref}^3`:t.ref;await o.Container.instance.git.checkout(t.repoPath,s,{path:i})}async function N(e,t){let i=[o.Container.instance.commitsView,o.Container.instance.branchesView,o.Container.instance.remotesView];for(let r of i){let i=r.canReveal?await r.revealCommit(e,t):await o.Container.instance.repositoriesView.revealCommit(e,t);if(null!=i)return i}i[0].show({preserveFocus:!t?.focus})}async function q(e,t){let i;if(null==t){await (0,c.gf)(s.eq.ShowQuickCommit,{commit:e});return}i=t instanceof r.Uri?t:d.wv.fromFile(t,e.repoPath,e.ref),await (0,c.gf)(s.eq.ShowQuickCommitFile,i,{sha:e.sha})}function L(e,t){let{preserveFocus:i,...r}={...t,commit:e};return o.Container.instance.commitDetailsView.show({preserveFocus:i},r)}function M(e,t){let{preserveFocus:i,...r}={...t,commit:e};return o.Container.instance.graphDetailsView.show({preserveFocus:i},r)}async function Q(e,t){await (0,c.gf)(s.eq.ShowInCommitGraph,{ref:(0,f.K4)(e),preserveFocus:t?.preserveFocus})}async function G(e){let t;(0,p.S)(e)?(null==e.files&&await e.ensureFullDetails(),t=e.files??[]):t=e.map(e=>new m.Gm(e.repoPath,e.path,e.status,e.originalPath)),await V(t,{message:`Are you sure you want to open each of the ${t.length} files?`,confirmButton:"Open Files",threshold:10})&&await (0,c.gf)(s.eq.OpenOnlyChangedFiles,{uris:t.filter(e=>"D"!==e.status).map(e=>e.uri)})}async function Y(e,t){let i=await e.git.getOrOpenScmRepository(t.repoPath),s=await i?.getCommit("HEAD");if(s?.hash!==t.ref){r.window.showWarningMessage(`Commit ${(0,f.u)(t,{capitalize:!0,icon:!1})} cannot be undone, because it is no longer the most recent commit.`);return}let o=await e.git.getStatusForRepo(t.repoPath);if(o?.files.length){let e={title:"Undo Commit"};if(await r.window.showWarningMessage(`You have uncommitted changes in the working tree.

Do you still want to undo ${(0,f.u)(t,{capitalize:!1,icon:!1})}?`,{modal:!0},e,{title:"Cancel",isCloseAffordance:!0})!==e)return}await (0,c.w3)("git.undoCommit",t.repoPath)}async function V(e,t){if(e.length<=t.threshold)return!0;let i={title:t.confirmButton??"Open"},s={title:t.cancelButton??"Cancel",isCloseAffordance:!0};return await r.window.showWarningMessage(t.message,{modal:!0},i,s)===i}async function z(e,t,i){return(0,p.S)(e)?(null==e.files&&await e.ensureFullDetails(),{commit:e,files:e.files??[],options:t,ref:{repoPath:e.repoPath,ref:e.sha}}):{files:e,options:i,ref:t}}async function H(e,t,i){return(0,p.S)(e)?(null==e.files&&await e.ensureFullDetails(),{commit:e,files:e.files??[],options:t,refs:{repoPath:e.repoPath,rhs:e.sha,lhs:e.resolvedPreviousSha??await e.getPreviousSha()??e.unresolvedPreviousSha}}):{files:e,options:i,refs:t}}},1888:(e,t,i)=>{i.d(t,{I:()=>o,g:()=>n});var r=i(9964),s=i(3172);function o(e,t){return(0,s.s)({command:"co-authors",state:{repo:e,contributors:t}})}async function n(e,t){let i=r.Container.instance.contributorsView,s=i.canReveal?await i.revealContributor(e,t):await r.Container.instance.repositoriesView.revealContributor(e,t);return null==s&&i.show({preserveFocus:!t?.focus}),s}},1235:(e,t,i)=>{i.d(t,{G:()=>a,I5:()=>n,WQ:()=>o,aE:()=>l,gR:()=>h});var r=i(9964),s=i(3172);function o(e,t,i,r){return(0,s.s)({command:"remote",confirm:r?.confirm,state:{repo:e,subcommand:"add",name:t,url:i,flags:r?.fetch?["-f"]:void 0,reveal:r?.reveal}})}async function n(e,t){if("string"==typeof e){let t=r.Container.instance.git.getRepository(e);if(null==t)return;e=t}await e.fetch({remote:t})}async function a(e,t){return(0,s.s)({command:"remote",state:{repo:e,subcommand:"prune",remote:t}})}async function l(e,t){return(0,s.s)({command:"remote",state:{repo:e,subcommand:"remove",remote:t}})}async function h(e,t){let i=r.Container.instance.remotesView,s=null!=e?i.canReveal?await i.revealRemote(e,t):await r.Container.instance.repositoriesView.revealRemote(e,t):void 0;return null==s&&i.show({preserveFocus:!t?.focus}),s}},352:(e,t,i)=>{i.d(t,{C0:()=>l,I5:()=>n,KO:()=>o,Uf:()=>a,aI:()=>d,a_:()=>u,gR:()=>g,oN:()=>c,q8:()=>p,qY:()=>h});var r=i(9964),s=i(3172);function o(e,t){return(0,s.s)({command:"cherry-pick",state:{repo:e,references:t}})}function n(e,t){return(0,s.s)({command:"fetch",state:{repos:e,reference:t}})}function a(e,t){return(0,s.s)({command:"merge",state:{repo:e,reference:t}})}function l(e,t){return(0,s.s)({command:"pull",state:{repos:e,reference:t}})}function h(e,t,i){return(0,s.s)({command:"push",state:{repos:e,flags:t?["--force"]:[],reference:i}})}function c(e,t,i=!0){return(0,s.s)({command:"rebase",state:{repo:e,reference:t,flags:i?["--interactive"]:[]}})}function u(e,t,i){return(0,s.s)({command:"reset",confirm:null==i||i.includes("--hard"),state:{repo:e,reference:t,flags:i}})}function d(e,t){return(0,s.s)({command:"revert",state:{repo:e,references:t}})}function p(e,t,i){return(0,s.s)({command:"switch",state:{repos:e,reference:t},confirm:i})}async function g(e,t,i){let s=t?.canReveal?await t.revealRepository(e,i):await r.Container.instance.repositoriesView.revealRepository(e,i);return null==s&&(t??r.Container.instance.repositoriesView).show({preserveFocus:!i?.focus}),s}},1148:(e,t,i)=>{i.d(t,{bh:()=>u,gR:()=>c,iQ:()=>o,qK:()=>n,qY:()=>h,sr:()=>l,wX:()=>a});var r=i(9964),s=i(3172);function o(e,t){return(0,s.s)({command:"stash",state:{subcommand:"apply",repo:e,reference:t}})}function n(e,t){return(0,s.s)({command:"stash",state:{subcommand:"drop",repo:e,references:t}})}function a(e,t,i){return(0,s.s)({command:"stash",state:{subcommand:"rename",repo:e,reference:t,message:i}})}function l(e,t){return(0,s.s)({command:"stash",state:{subcommand:"pop",repo:e,reference:t}})}function h(e,t,i,r=!1,o=!1,n=!1,a){return(0,s.s)({command:"stash",state:{subcommand:"push",repo:e,uris:t,onlyStagedUris:a,message:i,flags:[...r?["--include-untracked"]:[],...o?["--keep-index"]:[],...n?["--staged"]:[]]}})}async function c(e,t){let i=r.Container.instance.stashesView,s=i.canReveal?await i.revealStash(e,t):await r.Container.instance.repositoriesView.revealStash(e,t);return null==s&&i.show({preserveFocus:!t?.focus}),s}function u(e,t){let{preserveFocus:i,...s}={...t,commit:e};return r.Container.instance.commitDetailsView.show({preserveFocus:i},s)}},5920:(e,t,i)=>{i.d(t,{Su:()=>o,aE:()=>n,gR:()=>a});var r=i(9964),s=i(3172);function o(e,t,i){return(0,s.s)({command:"tag",state:{subcommand:"create",repo:e,reference:t,name:i}})}function n(e,t){return(0,s.s)({command:"tag",state:{subcommand:"delete",repo:e,references:t}})}async function a(e,t){let i=r.Container.instance.tagsView,s=i.canReveal?await i.revealTag(e,t):await r.Container.instance.repositoriesView.revealTag(e,t);return null==s&&i.show({preserveFocus:!t?.focus}),s}},688:(e,t,i)=>{i.d(t,{A3:()=>l,Su:()=>a,aE:()=>c,eU:()=>h,gR:()=>u,qR:()=>p,sv:()=>d});var r=i(9964),s=i(9455),o=i(2356),n=i(3172);async function a(e,t,i,r){let s=(0,o.Qv)();if(await (0,n.s)({command:"worktree",state:{subcommand:"create",repo:e,uri:t,reference:i,addRemote:r?.addRemote,createBranch:r?.createBranch,flags:r?.createBranch?["-b"]:void 0,result:s,reveal:r?.reveal}}),!s.pending)return s.promise;s.cancel()}function l(e,t,i){return(0,n.s)({command:"worktree",state:{subcommand:"copy-changes",repo:t,worktree:i,changes:{type:e}}})}function h(e,t){return(0,n.s)({command:"worktree",state:{subcommand:"open",repo:e.repoPath,worktree:e,flags:d(t?.location),openOnly:t?.openOnly}})}function c(e,t){return(0,n.s)({command:"worktree",state:{subcommand:"delete",repo:e,uris:(0,s.cz)(t)}})}async function u(e,t){let i=r.Container.instance.worktreesView,s=null!=e?i.canReveal?await i.revealWorktree(e,t):await r.Container.instance.repositoriesView.revealWorktree(e,t):void 0;return null==s&&i.show({preserveFocus:!t?.focus}),s}function d(e){if(null!=e)switch(e){case"newWindow":return["--new-window"];case"addToWorkspace":return["--add-to-workspace"];default:return[]}}function p(e){if(null!=e)return e.includes("--new-window")?"newWindow":e.includes("--add-to-workspace")?"addToWorkspace":"currentWindow"}},4532:(e,t,i)=>{i.d(t,{A5:()=>y,AZ:()=>BlameIgnoreRevsFileBadRevisionError,CY:()=>v,Ep:()=>WorktreeCreateError,GW:()=>PullError,I5:()=>w,Mp:()=>d,Ui:()=>FetchError,Y9:()=>f,Yj:()=>CherryPickError,_2:()=>WorkspaceUntrustedError,_y:()=>m,ad:()=>p,ag:()=>PushError,as:()=>b,ck:()=>BlameIgnoreRevsFileError,gd:()=>g,iP:()=>StashPushError,kz:()=>WorktreeDeleteError,mI:()=>GitSearchError,mw:()=>ApplyPatchCommitError,w7:()=>StashApplyError});let GitSearchError=class GitSearchError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,GitSearchError)}};var r,s,o,n,a,l,h,c,u,d=((r=d||{})[r.StashFailed=0]="StashFailed",r[r.CreateWorktreeFailed=1]="CreateWorktreeFailed",r[r.ApplyFailed=2]="ApplyFailed",r[r.ApplyAbortedWouldOverwrite=3]="ApplyAbortedWouldOverwrite",r[r.AppliedWithConflicts=4]="AppliedWithConflicts",r);let ApplyPatchCommitError=class ApplyPatchCommitError extends Error{static is(e,t){return e instanceof ApplyPatchCommitError&&(null==t||e.reason===t)}original;reason;constructor(e,t,i){super(t||="Unable to apply patch"),this.original=i,this.reason=e,Error.captureStackTrace?.(this,ApplyPatchCommitError)}};let BlameIgnoreRevsFileError=class BlameIgnoreRevsFileError extends Error{constructor(e,t){super(`Invalid blame.ignoreRevsFile: '${e}'`),this.fileName=e,this.original=t,Error.captureStackTrace?.(this,BlameIgnoreRevsFileError)}static is(e){return e instanceof BlameIgnoreRevsFileError}};let BlameIgnoreRevsFileBadRevisionError=class BlameIgnoreRevsFileBadRevisionError extends Error{constructor(e,t){super(`Invalid revision in blame.ignoreRevsFile: '${e}'`),this.revision=e,this.original=t,Error.captureStackTrace?.(this,BlameIgnoreRevsFileBadRevisionError)}static is(e){return e instanceof BlameIgnoreRevsFileBadRevisionError}};var p=((s=p||{})[s.WorkingChanges=1]="WorkingChanges",s);let StashApplyError=class StashApplyError extends Error{static is(e,t){return e instanceof StashApplyError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;null==e?i="Unable to apply stash":"string"==typeof e?(i=e,r=void 0):(r=e,i="Unable to apply stash. Your working tree changes would be overwritten. Please commit or stash your changes before trying again"),super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,StashApplyError)}};var g=((o=g||{})[o.ConflictingStagedAndUnstagedLines=1]="ConflictingStagedAndUnstagedLines",o);let StashPushError=class StashPushError extends Error{static is(e,t){return e instanceof StashPushError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;null==e?i="Unable to stash":"string"==typeof e?(i=e,r=void 0):i=1===(r=e)?"Stash was created, but the working tree cannot be updated because at least one file has staged and unstaged changes on the same line(s).\n\nDo you want to try again by stashing both your staged and unstaged changes?":"Unable to stash",super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,StashApplyError)}};var m=((n=m||{})[n.RemoteAhead=1]="RemoteAhead",n[n.TipBehind=2]="TipBehind",n[n.PushRejected=3]="PushRejected",n[n.PushRejectedWithLease=4]="PushRejectedWithLease",n[n.PushRejectedWithLeaseIfIncludes=5]="PushRejectedWithLeaseIfIncludes",n[n.PermissionDenied=6]="PermissionDenied",n[n.RemoteConnection=7]="RemoteConnection",n[n.NoUpstream=8]="NoUpstream",n[n.Other=9]="Other",n);let PushError=class PushError extends Error{static is(e,t){return e instanceof PushError&&(null==t||e.reason===t)}original;reason;constructor(e,t,i,r){let s,o;let n=`Unable to push${i?` branch '${i}'`:""}${r?` to ${r}`:""}`;if(null==e)s=n;else if("string"==typeof e)s=e,o=void 0;else switch(o=e){case 1:s=`${n} because the remote contains work that you do not have locally. Try fetching first.`;break;case 2:s=`${n} as it is behind its remote counterpart. Try pulling first.`;break;case 3:s=`${n} because some refs failed to push or the push was rejected. Try pulling first.`;break;case 4:case 5:s=`Unable to force push${i?` branch '${i}'`:""}${r?` to ${r}`:""} because some refs failed to push or the push was rejected. The tip of the remote-tracking branch has been updated since the last checkout. Try pulling first.`;break;case 6:s=`${n} because you don't have permission to push to this remote repository.`;break;case 7:s=`${n} because the remote repository could not be reached.`;break;case 8:s=`${n} because it has no upstream branch.`;break;default:s=n}super(s),this.original=t,this.reason=o,Error.captureStackTrace?.(this,PushError)}};var f=((a=f||{})[a.Conflict=1]="Conflict",a[a.GitIdentity=2]="GitIdentity",a[a.RemoteConnection=3]="RemoteConnection",a[a.UnstagedChanges=4]="UnstagedChanges",a[a.UnmergedFiles=5]="UnmergedFiles",a[a.UncommittedChanges=6]="UncommittedChanges",a[a.OverwrittenChanges=7]="OverwrittenChanges",a[a.RefLocked=8]="RefLocked",a[a.RebaseMultipleBranches=9]="RebaseMultipleBranches",a[a.TagConflict=10]="TagConflict",a[a.Other=11]="Other",a);let PullError=class PullError extends Error{static is(e,t){return e instanceof PullError&&(null==t||e.reason===t)}original;reason;constructor(e,t,i,r){let s,o;let n=`Unable to pull${i?` branch '${i}'`:""}${r?` from ${r}`:""}`;if(null==e)s="Unable to pull";else if("string"==typeof e)s=e,o=void 0;else switch(o=e){case 1:s=`${n} due to conflicts.`;break;case 2:s=`${n} because you have not yet set up your Git identity.`;break;case 3:s=`${n} because the remote repository could not be reached.`;break;case 4:s=`${n} because you have unstaged changes.`;break;case 5:s=`${n} because you have unmerged files.`;break;case 6:s=`${n} because you have uncommitted changes.`;break;case 7:s=`${n} because local changes to some files would be overwritten.`;break;case 8:s=`${n} because a local ref could not be updated.`;break;case 9:s=`${n} because you are trying to rebase onto multiple branches.`;break;case 10:s=`${n} because a local tag would be overwritten.`;break;default:s=n}super(s),this.original=t,this.reason=o,Error.captureStackTrace?.(this,PullError)}};var w=((l=w||{})[l.NoFastForward=1]="NoFastForward",l[l.NoRemote=2]="NoRemote",l[l.RemoteConnection=3]="RemoteConnection",l[l.Other=4]="Other",l);let FetchError=class FetchError extends Error{static is(e,t){return e instanceof FetchError&&(null==t||e.reason===t)}original;reason;constructor(e,t,i,r){let s,o;let n=`Unable to fetch${i?` branch '${i}'`:""}${r?` from ${r}`:""}`;if(null==e)s=n;else if("string"==typeof e)s=e,o=void 0;else switch(o=e){case 1:s=`${n} as it cannot be fast-forwarded`;break;case 2:s=`${n} without a remote repository specified.`;break;case 3:s=`${n}. Could not connect to the remote repository.`;break;default:s=n}super(s),this.original=t,this.reason=o,Error.captureStackTrace?.(this,FetchError)}};var v=((h=v||{})[h.Conflicts=0]="Conflicts",h[h.AbortedWouldOverwrite=1]="AbortedWouldOverwrite",h[h.Other=2]="Other",h);let CherryPickError=class CherryPickError extends Error{static is(e,t){return e instanceof CherryPickError&&(null==t||e.reason===t)}original;reason;constructor(e,t,i){let r,s;let o=`Unable to cherry-pick${i?` commit '${i}'`:""}`;if(null==e)r=o;else if("string"==typeof e)r=e,s=void 0;else switch(s=e){case 1:r=`${o} as some local changes would be overwritten.`;break;case 0:r=`${o} due to conflicts.`;break;default:r=o}super(r),this.original=t,this.reason=s,Error.captureStackTrace?.(this,CherryPickError)}};let WorkspaceUntrustedError=class WorkspaceUntrustedError extends Error{constructor(){super("Unable to perform Git operations because the current workspace is untrusted"),Error.captureStackTrace?.(this,WorkspaceUntrustedError)}};var y=((c=y||{})[c.AlreadyCheckedOut=1]="AlreadyCheckedOut",c[c.AlreadyExists=2]="AlreadyExists",c);let WorktreeCreateError=class WorktreeCreateError extends Error{static is(e,t){return e instanceof WorktreeCreateError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;if(null==e)i="Unable to create worktree";else if("string"==typeof e)i=e,r=void 0;else switch(r=e){case 1:i="Unable to create worktree because it is already checked out";break;case 2:i="Unable to create worktree because it already exists"}super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,WorktreeCreateError)}};var b=((u=b||{})[u.HasChanges=1]="HasChanges",u[u.MainWorkingTree=2]="MainWorkingTree",u);let WorktreeDeleteError=class WorktreeDeleteError extends Error{static is(e,t){return e instanceof WorktreeDeleteError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;if(null==e)i="Unable to delete worktree";else if("string"==typeof e)i=e,r=void 0;else switch(r=e){case 1:i="Unable to delete worktree because there are uncommitted changes";break;case 2:i="Unable to delete worktree because it is a main working tree"}super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,WorktreeDeleteError)}}},204:(e,t,i)=>{i.d(t,{E:()=>CommitFormatter});var r=i(5576),s=i(7452),o=i(4152),n=i(5128),a=i(9735),l=i(7288),h=i(6552),c=i(3840),u=i(1608),d=i(9964),p=i(7680),g=i(5008),m=i(4169),f=i(7348),w=i(2356),v=i(1072),y=i(1080),b=i(2060),C=i(7956),A=i(8292),k=i(1424),P=i(2152),S=i(5972);let CommitFormatter=class CommitFormatter extends S.e{reset(e,t){super.reset(e,t),null==this._options.outputFormat&&(this._options.outputFormat="plaintext")}get _authorDate(){return this._item.author.formatDate(this._options.dateFormat)}get _authorDateAgo(){return this._item.author.fromNow()}get _authorDateAgoShort(){return this._item.author.fromNow(!0)}get _committerDate(){return this._item.committer.formatDate(this._options.dateFormat)}get _committerDateAgo(){return this._item.committer.fromNow()}get _committerDateAgoShort(){return this._item.committer.fromNow(!0)}get _date(){return this._item.formatDate(this._options.dateFormat)}get _dateAgo(){return this._item.formatDateFromNow()}get _dateAgoShort(){return this._item.formatDateFromNow(!0)}get _pullRequestDate(){let{pullRequest:e}=this._options;return null!=e&&A.Y3.is(e)?e.formatDate(this._options.dateFormat)??"":""}get _pullRequestDateAgo(){let{pullRequest:e}=this._options;return null!=e&&A.Y3.is(e)?e.formatDateFromNow()??"":""}get _pullRequestDateOrAgo(){return"absolute"===(null!=this._options.dateStyle?this._options.dateStyle:m.i.get("defaultDateStyle"))?this._pullRequestDate:this._pullRequestDateAgo}get ago(){return this._padOrTruncate(this._dateAgo,this._options.tokenOptions.ago)}get agoOrDate(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.i.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._date:this._dateAgo,this._options.tokenOptions.agoOrDate)}get agoOrDateShort(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.i.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._date:this._dateAgoShort,this._options.tokenOptions.agoOrDateShort)}get author(){let{name:e,email:t}=this._item.author,i=this._padOrTruncate(e,this._options.tokenOptions.author);switch(this._options.outputFormat){case"markdown":return`[${i}](${t?`mailto:${t} "Email ${e} (${t})"`:`# "${e}"`})`;case"html":return e=(0,v.Ir)(e),t=(0,v.Ir)(t),`<a ${t?`href="mailto:${t}" title="Email ${e} (${t})"`:`href="#" title="${e}"`})${this._options.htmlFormat?.classes?.author?` class="${this._options.htmlFormat.classes.author}"`:""}>${i}</a>`;default:return i}}get authorAgo(){return this._padOrTruncate(this._authorDateAgo,this._options.tokenOptions.authorAgo)}get authorAgoOrDate(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.i.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._authorDate:this._authorDateAgo,this._options.tokenOptions.authorAgoOrDate)}get authorAgoOrDateShort(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.i.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._authorDate:this._authorDateAgoShort,this._options.tokenOptions.authorAgoOrDateShort)}get authorDate(){return this._padOrTruncate(this._authorDate,this._options.tokenOptions.authorDate)}get authorNotYou(){let{name:e,email:t}=this._item.author;if("You"===e)return this._padOrTruncate("",this._options.tokenOptions.authorNotYou);let i=this._padOrTruncate(e,this._options.tokenOptions.authorNotYou);switch(this._options.outputFormat){case"markdown":return`[${i}](${t?`mailto:${t} "Email ${e} (${t})"`:`# "${e}"`})`;case"html":return e=(0,v.Ir)(e),t=(0,v.Ir)(t),`<a ${t?`href="mailto:${t}" title="Email ${e} (${t})"`:`href="#" title="${e}"`})${this._options.htmlFormat?.classes?.author?` class="${this._options.htmlFormat.classes.author}"`:""}>${i}</a>`;default:return i}}get avatar(){let{outputFormat:e}=this._options;if("plaintext"===e||!m.i.get("hovers.avatars"))return this._padOrTruncate("",this._options.tokenOptions.avatar);let{name:t}=this._item.author,i=this._options.presence;if(null!=i){let r=`${t} ${"You"===t?"are":"is"} ${"dnd"===i.status?"in ":""}${i.statusText.toLocaleLowerCase()}`;return"html"===e&&(r=(0,v.Ir)(r)),this._getAvatar(e,r,this._options.avatarSize).then(t=>this._padOrTruncate(`${t}${this._getPresence(e,i,r)}`,this._options.tokenOptions.avatar))}return"html"===e&&(t=(0,v.Ir)(t)),this._getAvatar(e,t,this._options.avatarSize)}async _getAvatar(e,t,i){i=i??m.i.get("hovers.avatarSize");let r=this._item.getAvatarUri({defaultStyle:m.i.get("defaultGravatarsStyle"),size:i}),s=(await r).toString(!0);return this._padOrTruncate("html"===e?`<img src="${s}" alt="title)" title="${t}" width="${i}" height="${i}"${this._options.htmlFormat?.classes?.avatar?` class="${this._options.htmlFormat.classes.avatar}"`:""} />`:`![${t}](${s}|width=${i},height=${i} "${t}")`,this._options.tokenOptions.avatar)}_getPresence(e,t,i){return"html"===e?`<img src="${(0,r.GC)(t.status)}" alt="${i}" title="${i}"${this._options.htmlFormat?.classes?.avatarPresence?` class="${this._options.htmlFormat.classes.avatarPresence}"`:""}/>`:`![${i}](${(0,r.GC)(t.status)} "${i}")`}get changes(){return this._padOrTruncate((0,y.S)(this._item)?this._item.formatStats():"",this._options.tokenOptions.changes)}get changesDetail(){return this._padOrTruncate((0,y.S)(this._item)?this._item.formatStats({expand:!0,separator:", "}):"",this._options.tokenOptions.changesDetail)}get changesShort(){return this._padOrTruncate((0,y.S)(this._item)?this._item.formatStats({compact:!0,separator:""}):"",this._options.tokenOptions.changesShort)}get commands(){let e;if("plaintext"===this._options.outputFormat||"html"===this._options.outputFormat)return this._padOrTruncate("",this._options.tokenOptions.commands);if(this._item.isUncommitted){let{previousLineComparisonUris:e}=this._options;return e?.previous!=null?`[\`${this._padOrTruncate((0,k.c5)((0,k.jN)(e.current.sha)?e.current.sha:b.Oy),this._options.tokenOptions.commands)}\`](${h.k.getMarkdownCommandArgs(this._item.sha,this._item.repoPath)} "Open Details") &nbsp;[$(chevron-left)$(compare-changes)](${o.W.getMarkdownCommandArgs({lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},repoPath:this._item.repoPath,line:this._options.editor?.line})} "Open Changes with Previous Revision") &nbsp;[$(versions)](${a.k.getMarkdownCommandArgs(d.Container.instance.git.getRevisionUri(e.previous),"blame",this._options.editor?.line)} "Open Blame Prior to this Change")`:`[\`${this._padOrTruncate((0,k.c5)(this._item.isUncommittedStaged?b.QD:b.Oy),this._options.tokenOptions.commands)}\`](${h.k.getMarkdownCommandArgs(this._item.sha,this._item.repoPath)} "Open Details")`}let t=" &nbsp;&nbsp;|&nbsp;&nbsp; ";if(e=`---

[\`$(git-commit) ${this.id}\`](${h.k.getMarkdownCommandArgs(this._item.sha,this._item.repoPath)} "Open Details") &nbsp;[$(chevron-left)$(compare-changes)](${o.W.getMarkdownCommandArgs(this._item,this._options.editor?.line)} "Open Changes with Previous Revision")`,null!=this._item.file&&null!=this._item.unresolvedPreviousSha){let t=d.Container.instance.git.getRevisionUri(this._item.unresolvedPreviousSha,this._item.file.originalPath??this._item.file?.path,this._item.repoPath);e+=` &nbsp;[$(versions)](${a.k.getMarkdownCommandArgs(t,"blame",this._options.editor?.line)} "Open Blame Prior to this Change")`}e+=` &nbsp;[$(search)](${s.i6.getMarkdownCommandArgsCore(u.eq.RevealCommitInView,{repoPath:this._item.repoPath,sha:this._item.sha,revealInView:!0})} "Reveal in Side Bar")`,(0,g.A)()&&(e+=` &nbsp;[$(gitlens-graph)](${s.i6.getMarkdownCommandArgsCore(u.eq.ShowInCommitGraph,{ref:(0,k.K4)(this._item,{excludeMessage:!0})})} "Open in Commit Graph")`);let{pullRequest:i,remotes:r}=this._options;if(r?.length){let t=(0,P.U$)(r);e+=` &nbsp;[$(globe)](${n.q.getMarkdownCommandArgs(this._item.sha)} "Open Commit on ${t?.length?t[0].name:"Remote"}")`}if(null!=i)A.Y3.is(i)?e+=`${t}[$(git-pull-request) PR #${i.id}](${R("openPullRequest",{repoPath:this._item.repoPath,provider:{id:i.provider.id,name:i.provider.name,domain:i.provider.domain},pullRequest:{id:i.id,url:i.url}})} "Open Pull Request \\#${i.id}${1==d.Container.instance.actionRunners.count("openPullRequest")?` on ${i.provider.name}`:"..."}
${u.or.Dash.repeat(2)}
${(0,v.Ed)(i.title).replace(/"/g,'\\"')}
${i.state}, ${i.formatDateFromNow()}")`:(0,w.um)(i)&&(e+=`${t}[$(git-pull-request) PR $(loading~spin)](command:${u.eq.RefreshHover} "Searching for a Pull Request (if any) that introduced this commit...")`);else if(null!=r){let[i]=r;i?.hasIntegration()&&!i.maybeIntegrationConnected&&m.i.get("integrations.enabled")&&(e+=`${t}[$(plug) Connect to ${i?.provider.name}${u.or.Ellipsis}](${l.u.getMarkdownCommandArgs(i)} "Connect to ${i.provider.name} to enable the display of the Pull Request (if any) that introduced this commit")`)}if(d.Container.instance.actionRunners.count("hover.commands")>0){let{name:i,email:r}=this._item.author;e+=`${t}[$(organization) Team${u.or.SpaceThinnest}${u.or.Ellipsis}](${R("hover.commands",{repoPath:this._item.repoPath,commit:{sha:this._item.sha,author:{name:i,email:r,presence:this._options.presence}},file:null!=this._options.editor?{uri:this._options.editor?.uri.toString(),line:this._options.editor?.line}:void 0})} "Show Team Actions")`}let p=this._item.getGitUri();return e+=`${t}[$(ellipsis)](${c.o.getMarkdownCommandArgs(null!=p?{revisionUri:d.Container.instance.git.getRevisionUri(p).toString(!0)}:{commit:this._item})} "Show More Actions")`,this._padOrTruncate(e,this._options.tokenOptions.commands)}get committerAgo(){return this._padOrTruncate(this._committerDateAgo,this._options.tokenOptions.committerAgo)}get committerAgoOrDate(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.i.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._committerDate:this._committerDateAgo,this._options.tokenOptions.committerAgoOrDate)}get committerAgoOrDateShort(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.i.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._committerDate:this._committerDateAgoShort,this._options.tokenOptions.committerAgoOrDateShort)}get committerDate(){return this._padOrTruncate(this._committerDate,this._options.tokenOptions.committerDate)}get date(){return this._padOrTruncate(this._date,this._options.tokenOptions.date)}get email(){let{email:e}=this._item.author;return this._padOrTruncate(e??"",this._options.tokenOptions.email)}get footnotes(){let{outputFormat:e}=this._options;return this._padOrTruncate(null==this._options.footnotes||0===this._options.footnotes.size?"":(0,f.kn)((0,f.kH)(this._options.footnotes,([t,i])=>"plaintext"===e?`${(0,v.ys)(t)} ${i}`:i),"html"===e?"<br \\>":"markdown"===e?"\\\n":"\n"),this._options.tokenOptions.footnotes)}get id(){let e=this._padOrTruncate(this._item.shortSha??"",this._options.tokenOptions.id);return"plaintext"!==this._options.outputFormat&&this._options.unpublished?`<span style="color:#35b15e;"${this._options.htmlFormat?.classes?.id?` class="${this._options.htmlFormat.classes.id}"`:""}>${e} (unpublished)</span>`:e}get link(){let e;switch(this._options.outputFormat){case"markdown":{let t=this._padOrTruncate(this._item.shortSha??"",this._options.tokenOptions.id);e=`[\`$(git-commit) ${t}\`](${h.k.getMarkdownCommandArgs(this._item.sha,this._item.repoPath)} "Open Details")`;break}case"html":{let t=this._padOrTruncate(this._item.shortSha??"",this._options.tokenOptions.id);e=`<a href="${h.k.getMarkdownCommandArgs(this._item.sha,this._item.repoPath)}" title="Open Details"${this._options.htmlFormat?.classes?.link?` class="${this._options.htmlFormat.classes.link}"`:""}><span class="codicon codicon-git-commit"></span>${t}</a>`;break}default:return this.id}return this._padOrTruncate(e,this._options.tokenOptions.link)}get message(){let{outputFormat:e}=this._options;if(this._item.isUncommitted){let t=this._item.file?.hasConflicts??!1,i=this._item.isUncommittedStaged||(this._options.previousLineComparisonUris?.current?.isUncommittedStaged??!1),r=`${t?"Merge":i?"Staged":"Uncommitted"} changes`;switch(e){case"html":r=`<span ${this._options.htmlFormat?.classes?.message?`class="${this._options.htmlFormat.classes.message}"`:""}>${r}</span>`;break;case"markdown":r=`
> ${r}`}return this._padOrTruncate(r,this._options.tokenOptions.message)}let t=(this._options.messageTruncateAtNewLine?this._item.summary:this._item.message??this._item.summary).trim().replace(/\r?\n/g,"\n");switch(t=(0,p.I)(t),t=this._padOrTruncate(t,this._options.tokenOptions.message),"plaintext"!==e&&(t=(0,v.Ir)(t)),"markdown"===e&&(t=(0,v.Ed)(t,{quoted:!0})),this._options.messageAutolinks&&(t=d.Container.instance.autolinks.linkify(t,e,this._options.remotes,this._options.enrichedAutolinks,null==this._options.pullRequest||(0,w.um)(this._options.pullRequest)?void 0:new Set([this._options.pullRequest.id]),this._options.footnotes)),null!=this._options.messageIndent&&"plaintext"===e&&(t=t.replace(/^/gm,u.or.Space.repeat(this._options.messageIndent))),e){case"html":return`<span ${this._options.htmlFormat?.classes?.id?`class="${this._options.htmlFormat.classes.id}"`:""}>${t}</span>`;case"markdown":return`
> ${t}`;default:return t}}get pullRequest(){let e;let{pullRequest:t}=this._options;if(null==t||"html"===this._options.outputFormat)return this._padOrTruncate("",this._options.tokenOptions.pullRequest);if(A.Y3.is(t)){if("markdown"===this._options.outputFormat){if(e=`PR [**#${t.id}**](${R("openPullRequest",{repoPath:this._item.repoPath,provider:{id:t.provider.id,name:t.provider.name,domain:t.provider.domain},pullRequest:{id:t.id,url:t.url}})} "Open Pull Request \\#${t.id}${1==d.Container.instance.actionRunners.count("openPullRequest")?` on ${t.provider.name}`:"..."}
${u.or.Dash.repeat(2)}
${(0,v.Ed)(t.title).replace(/"/g,'\\"')}
${t.state}, ${t.formatDateFromNow()}")`,null!=this._options.footnotes){let e=(0,v.Ed)(t.title).replace(/"/g,'\\"').trim(),i=this._options.footnotes.size+1;this._options.footnotes.set(i,`${(0,C.eV)(t)} [**${e}**](${t.url} "Open Pull Request \\#${t.id} on ${t.provider.name}")\\
${u.or.Space.repeat(4)} #${t.id} ${t.state} ${t.formatDateFromNow()}`)}}else if(null!=this._options.footnotes){let i=this._options.footnotes.size+1;this._options.footnotes.set(i,`PR #${t.id}: ${t.title}  ${u.or.Dot}  ${t.state}, ${t.formatDateFromNow()}`),e=`PR #${t.id}${(0,v.ys)(i)}`}else e=`PR #${t.id}`}else{if(!(0,w.um)(t))return this._padOrTruncate("",this._options.tokenOptions.pullRequest);e="markdown"===this._options.outputFormat?`[PR $(loading~spin)](command:${u.eq.RefreshHover} "Searching for a Pull Request (if any) that introduced this commit...")`:this._options?.pullRequestPendingMessage??""}return this._padOrTruncate(e,this._options.tokenOptions.pullRequest)}get pullRequestAgo(){return this._padOrTruncate(this._pullRequestDateAgo,this._options.tokenOptions.pullRequestAgo)}get pullRequestAgoOrDate(){return this._padOrTruncate(this._pullRequestDateOrAgo,this._options.tokenOptions.pullRequestAgoOrDate)}get pullRequestDate(){return this._padOrTruncate(this._pullRequestDate,this._options.tokenOptions.pullRequestDate)}get pullRequestState(){let{pullRequest:e}=this._options;return this._padOrTruncate(null!=e&&A.Y3.is(e)?e.state??"":"",this._options.tokenOptions.pullRequestState)}get sha(){return this._padOrTruncate(this._item.shortSha??"",this._options.tokenOptions.sha)}get stashName(){return this._padOrTruncate(this._item.stashName??"",this._options.tokenOptions.stashName)}get stashNumber(){return this._padOrTruncate(this._item.number??"",this._options.tokenOptions.stashNumber)}get stashOnRef(){return this._padOrTruncate(this._item.stashOnRef??"",this._options.tokenOptions.stashOnRef)}get tips(){let e=this._options.getBranchAndTagTips?.(this._item.sha,{icons:"markdown"===this._options.outputFormat});return null!=e&&"plaintext"!==this._options.outputFormat&&(e=e.split(", ").map(e=>`<span style="color:#ffffff;background-color:#1d76db;"${this._options.htmlFormat?.classes?.tips?` class="${this._options.htmlFormat.classes.tips}"`:""}>&nbsp;&nbsp;${e}&nbsp;&nbsp;</span>`).join(u.or.Space.repeat(3))),this._padOrTruncate(e??"",this._options.tokenOptions.tips)}static fromTemplate(e,t,i){if((null==i||"string"==typeof i)&&(i={dateFormat:i}),CommitFormatter.has(e,"footnotes")&&null==i.footnotes&&(i.footnotes=new Map),CommitFormatter.has(e,"avatar")&&i?.outputFormat)throw Error("Invalid template token 'avatar' used in non-async call");return super.fromTemplateCore(this,e,t,i)}static fromTemplateAsync(e,t,i){return CommitFormatter.has(e,"footnotes")&&((null==i||"string"==typeof i)&&(i={dateFormat:i}),null==i.footnotes&&(i.footnotes=new Map)),super.fromTemplateCoreAsync(this,e,t,i)}static has(e,...t){return super.has(e,...t)}};function R(e,t){return s.i6.getMarkdownCommandArgsCore(`${u.eq.ActionPrefix}${e}`,{...t,type:e})}},5972:(e,t,i)=>{i.d(t,{e:()=>Formatter});var r=i(1072);let s=new Map,o=/ /g;let Formatter=class Formatter{_item;_options;constructor(e,t){this.reset(e,t)}reset(e,t){this._item=e,this.collapsableWhitespace=0,(null!=t||null==this._options)&&(null==t&&(t={}),null==t.dateFormat&&(t.dateFormat="MMMM Do, YYYY h:mma"),null==t.tokenOptions&&(t.tokenOptions={}),this._options=t)}collapsableWhitespace=0;_padOrTruncate(e,t){if(null==e||0===e.length)return e;if(0===(t??={collapseWhitespace:!1,padDirection:"left",prefix:void 0,suffix:void 0,truncateTo:void 0}).truncateTo)return`${(t.prefix??"").trimEnd()}${(t.suffix??"").trimStart()}`;let i=t.truncateTo;if(null==i)this.collapsableWhitespace=0;else{i+=this.collapsableWhitespace,this.collapsableWhitespace=0;let s=(0,r.K6)(e),o=i-s;o>0?(t.collapseWhitespace&&(this.collapsableWhitespace=o),"left"===t.padDirection?e=(0,r.a0)(e,i,void 0,s):(t.collapseWhitespace&&(i-=o),e=(0,r.ig)(e,i,void 0,s))):o<0&&(e=(0,r.E3)(e,i,void 0,s))}return(t.prefix||t.suffix)&&(e=`${t.prefix??""}${e}${t.suffix??""}`),e}static _formatter=void 0;static fromTemplateCore(e,t,i,s){let n;if(t=t.replace(o," "),e instanceof Formatter)return(0,r.qy)(t,e);if(null==(n=null==s||"string"==typeof s?{dateFormat:s}:s).tokenOptions){let e=(0,r.c5)(t).reduce((e,t)=>(e[t.key]=t.options,e),Object.create(null));n.tokenOptions=e}return null==this._formatter?this._formatter=new e(i,n):this._formatter.reset(i,n),(0,r.qy)(t,this._formatter)}static fromTemplateCoreAsync(e,t,i,s){let n;if(t=t.replace(o," "),e instanceof Formatter)return(0,r.IB)(t,e);if(null==(n=null==s||"string"==typeof s?{dateFormat:s}:s).tokenOptions){let e=(0,r.c5)(t).reduce((e,t)=>(e[t.key]=t.options,e),Object.create(null));n.tokenOptions=e}return null==this._formatter?this._formatter=new e(i,n):this._formatter.reset(i,n),(0,r.IB)(t,this._formatter)}static has(e,...t){let i=1===t.length?t[0]:`(${t.join("|")})`,r=s.get(i);return null==r&&(r=RegExp(`\\b${i}\\b`),s.set(i,r)),r.test(e)}}},3028:(e,t,i)=>{i.d(t,{o:()=>StatusFileFormatter});var r=i(1608),s=i(3732),o=i(7280),n=i(5972);let StatusFileFormatter=class StatusFileFormatter extends n.e{get directory(){let e=(0,o.W)(this._item,!1,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.directory)}get file(){let e=(0,s.g1)(this._item.path);return this._padOrTruncate(e,this._options.tokenOptions.file)}get filePath(){let e=(0,o.uY)(this._item,{relativeTo:this._options.relativePath,truncateTo:this._options.tokenOptions.filePath?.truncateTo});return this._padOrTruncate(e,this._options.tokenOptions.filePath)}get originalPath(){let e=(0,o.am)(this._item,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.originalPath)}get path(){let e=(0,o.Ml)(this._item,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.path)}get status(){let e=(0,o.Iz)(this._item.status);return this._padOrTruncate(e,this._options.tokenOptions.status)}get working(){let e="";return e=null!=this._item.workingTreeStatus&&null!=this._item.indexStatus?`${r.or.Pencil}${r.or.Space}${r.or.SpaceThinnest}${r.or.Check}`:null!=this._item.workingTreeStatus?`${r.or.Pencil}${r.or.SpaceThin}${r.or.SpaceThinnest}${r.or.EnDash}${r.or.Space}`:null!=this._item.indexStatus?`${r.or.Space}${r.or.EnDash}${r.or.Space.repeat(2)}${r.or.Check}`:"",this._padOrTruncate(e,this._options.tokenOptions.working)}get changes(){return this._padOrTruncate(o.Gm.is(this._item)?this._item.formatStats():"",this._options.tokenOptions.changes)}get changesDetail(){return this._padOrTruncate(o.Gm.is(this._item)?this._item.formatStats({expand:!0,separator:", "}):"",this._options.tokenOptions.changesDetail)}get changesShort(){return this._padOrTruncate(o.Gm.is(this._item)?this._item.formatStats({compact:!0,separator:""}):"",this._options.tokenOptions.changesShort)}static fromTemplate(e,t,i){return super.fromTemplateCore(this,e,t,i)}}},2812:(e,t,i)=>{i.d(t,{Ad:()=>k,An:()=>P,my:()=>A,oP:()=>C,wv:()=>b});var r=i(7304),s=i(887),o=i(1016),n=i(1608),a=i(9964),l=i(6892),h=i(4136),c=i(5019),u=i(3020),d=i(3732),p=i(3284),g=i(2060),m=i(1424),f=Object.defineProperty,w=Object.getOwnPropertyDescriptor,v=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?w(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&f(t,i,o),o};let y=class _GitUri extends r.Uri{repoPath;sha;constructor(e,t){let i;if(null==e){super({scheme:"unknown"});return}if(e.scheme===n.cl.GitLens){let i=e.path,r=k(e.authority);null==r.uncPath||i.startsWith(r.uncPath)||(i=`${r.uncPath}${e.path}`),super({scheme:e.scheme,authority:e.authority,path:i,query:e.query,fragment:e.fragment}),this.repoPath=r.repoPath;let s=r.ref;null!=t&&"string"!=typeof t&&(s=t.sha),(!(0,m.bP)(s)||(0,m.jN)(s))&&(this.sha=s);return}if((0,p.At)(e)){super(e);let[,i,r]=e.path.split("/",3);this.repoPath=e.with({path:`/${i}/${r}`}).toString();let o=function(e){let t;let[i,r]=e.authority.split("+");if(r)try{t=JSON.parse((0,s.Y)(r))}catch{}return{scheme:i,metadata:t}}(e),n=o.metadata?.ref?.id;null!=t&&"string"!=typeof t&&(n=t.sha),n&&(!(0,m.bP)(n)||(0,m.jN)(n))&&(this.sha=n);return}if(void 0===t){super(e);return}if("string"==typeof t){super(e),this.repoPath=t;return}let r=e.authority,o=(0,d.ay)(a.Container.instance.git.getAbsoluteUri(t.fileName??e.fsPath,t.repoPath).fsPath);if(47===o.charCodeAt(0)&&47===o.charCodeAt(1)){let e=o.indexOf("/",2);-1===e?(r=o.substring(2),o="/"):(r=o.substring(2,e),o=o.substring(e)||"/")}switch(e.scheme){case"https":case"http":case"file":i=o?47!==o.charCodeAt(0)?`/${o}`:o:"/";break;default:i=47!==o.charCodeAt(0)?`/${o}`:o}super({scheme:e.scheme,authority:r,path:i,query:e.query,fragment:e.fragment}),this.repoPath=t.repoPath,(!(0,m.bP)(t.sha)||(0,m.jN)(t.sha))&&(this.sha=t.sha)}get directory(){return(0,d.ye)(this.relativePath)}get fileName(){return(0,d.g1)(this.relativePath)}get isUncommitted(){return(0,m.bP)(this.sha)}get isUncommittedStaged(){return(0,m.jN)(this.sha)}get relativePath(){return(0,d.O)((0,d.oT)(this.fsPath),this.repoPath)[0]}get shortSha(){return(0,m.c5)(this.sha)}documentUri(){return r.Uri.from({scheme:this.scheme,authority:this.authority,path:this.path,query:this.query,fragment:this.fragment})}equals(e){return!!l.K.equals(this,e)&&this.sha===(A(e)?e.sha:void 0)}getFormattedFileName(e){return(0,u.o)(this.fsPath,{...e,fileOnly:!0})}toFileUri(){return a.Container.instance.git.getAbsoluteUri(this.fsPath,this.repoPath)}static fromFile(e,t,i,r=!1){let s=a.Container.instance.git.getAbsoluteUri("string"==typeof e?e:r&&e.originalPath||e.path,t);return i?new _GitUri(s,{repoPath:t,sha:"string"!=typeof e&&"?"===e.status?`${i}^3`:i}):new _GitUri(s,t)}static fromRepoPath(e,t){return t?new _GitUri(a.Container.instance.git.getAbsoluteUri(e,e),{repoPath:e,sha:t}):new _GitUri(a.Container.instance.git.getAbsoluteUri(e,e),e)}static fromRevisionUri(e){return new _GitUri(e)}static async fromUri(e){if(A(e))return e;if(!a.Container.instance.git.isTrackable(e)||e.scheme===n.cl.GitLens)return new _GitUri(e);if(e.scheme===n.cl.Git){let t=(0,o.u)(e);if(t?.path){let i;let s=await a.Container.instance.git.getOrOpenRepository(r.Uri.file(t.path));if(null==s)throw Error(`Unable to find repository for uri=${r.Uri.file(t.path).toString(!0)}`);switch(t.ref){case"":case"~":i=g.QD;break;case null:i=void 0;break;default:i=t.ref}return new _GitUri(e,{fileName:t.path,repoPath:s.path,sha:i})}}if(e.scheme===n.cl.PRs){let t;try{t=JSON.parse(e.query)}catch{}if(t?.fileName){let i=await a.Container.instance.git.getOrOpenRepository(e);if(null==i)throw Error(`Unable to find repository for uri=${r.Uri.file(t.fileName).toString(!0)}`);return new _GitUri(e,{fileName:t.fileName,repoPath:i.path,sha:t.isBase?t.baseCommit:t.headCommit})}}let t=await a.Container.instance.git.getOrOpenRepository(e);return new _GitUri(e,t?.path)}};v([(0,c.s)()],y.prototype,"directory",1),v([(0,c.s)()],y.prototype,"fileName",1),v([(0,c.s)()],y.prototype,"isUncommitted",1),v([(0,c.s)()],y.prototype,"isUncommittedStaged",1),v([(0,c.s)()],y.prototype,"relativePath",1),v([(0,c.s)()],y.prototype,"shortSha",1),v([(0,c.s)()],y.prototype,"documentUri",1),v([(0,c.s)()],y.prototype,"toFileUri",1),v([(0,h.u_)({exit:!0})],y,"fromUri",1);let b=y,C=Object.freeze(new b);function A(e){return e instanceof b}function k(e){return JSON.parse((0,s.Y)(e))}function P(e){return(0,s.S)(JSON.stringify(e))}},2452:(e,t,i)=>{i.d(t,{IB:()=>A,Mp:()=>b,Os:()=>P,SY:()=>GitBranch,Sg:()=>w,U5:()=>S,Yp:()=>R,ak:()=>C,gh:()=>k,qe:()=>v,sF:()=>y});var r=i(4169),s=i(6944),o=i(4136),n=i(5019),a=i(6448),l=i(972),h=i(1072),c=i(1424),u=i(3216),d=Object.defineProperty,p=Object.getOwnPropertyDescriptor,g=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?p(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&d(t,i,o),o};let m=/\s/,f=/^(?=.*\bHEAD\b)?(?=.*\bdetached\b).*$/;function w(e,t,i){return`${e}|${t?"remotes/":"heads/"}${i}`}let GitBranch=class GitBranch{constructor(e,t,i,r,s,o,n,a,l=0,h=0,c=!1,u=!1){this.container=e,this.repoPath=t,this.name=i,this.remote=r,this.current=s,this.date=o,this.sha=n,this.rebasing=u,this.id=w(t,r,i),this.detached=c||!!this.current&&P(i),this.detached&&(this.name=v(this.sha)),this.upstream=a?.name==null||0===a.name.length?void 0:a,this.state={ahead:l,behind:h}}refType="branch";detached;id;upstream;state;toString(){return`${(0,a.EZ)(this)}(${this.id})`}get formattedDate(){return"absolute"===this.container.BranchDateFormatting.dateStyle?this.formatDate(this.container.BranchDateFormatting.dateFormat):this.formatDateFromNow()}get ref(){return this.detached?this.sha:this.name}formatDate(e){return null!=this.date?(0,s._m)(this.date,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(){return null!=this.date?(0,s.Yn)(this.date):""}async getAssociatedPullRequest(e){let t=await this.getRemote();if(t?.provider!=null)return this.container.integrations.getByRemote(t)?.getPullRequestForBranch(t.provider.repoDesc,this.getTrackingWithoutRemote()??this.getNameWithoutRemote(),e)}getBasename(){let e=this.getNameWithoutRemote(),t=e.lastIndexOf("/");return -1!==t?e.substring(t+1):e}getNameWithoutRemote(){return this.remote?this.name.substring(y(this.name)+1):this.name}getTrackingWithoutRemote(){return(0,c.aL)(this)}async getRemote(){let e=this.getRemoteName();if(null==e)return;let t=await this.container.git.getRemotes(this.repoPath);return t.length?t.find(t=>t.name===e):void 0}getRemoteName(){return this.remote?A(this.name):null!=this.upstream?A(this.upstream.name):void 0}async getStatus(){return this.remote?"remote":null!=this.upstream?this.upstream.missing?"missingUpstream":this.state.ahead&&this.state.behind?"diverged":this.state.ahead?"ahead":this.state.behind?"behind":"upToDate":(await this.container.git.getRemotes(this.repoPath)).length?"unpublished":"local"}getTrackingStatus(e){return(0,u.Af)(this.upstream,this.state,e)}get starred(){let e=this.container.storage.getWorkspace("starred:branches");return void 0!==e&&!0===e[this.id]}star(){return this.container.git.getRepository(this.repoPath)?.star(this)}unstar(){return this.container.git.getRepository(this.repoPath)?.unstar(this)}};function v(e){return`(${(0,c.c5)(e)}...)`}function y(e){return e.startsWith("remotes/")?e.indexOf("/",8):e.indexOf("/")}function b(e){if(e.remote){let t=y(e.name);return -1===t?[e.name,void 0]:[e.name.substring(t+1),e.name.substring(0,t)]}if(e.upstream?.name!=null){let t=y(e.upstream.name);return -1===t?[e.name,void 0]:[e.name,e.upstream.name.substring(0,t)]}return[e.name,void 0]}function C(e){return e.substring(y(e)+1)}function A(e){return e.substring(0,y(e))}function k(e){return e instanceof GitBranch}function P(e){return m.test(e)||f.test(e)}function S(e,t){switch((t={current:!0,orderBy:r.i.get("sortBranchesBy"),...t}).orderBy){case"date:asc":return e.sort((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||(i.remote?-1:1)-(e.remote?-1:1)||(null==e.date?-1:e.date.getTime())-(null==i.date?-1:i.date.getTime()));case"name:asc":return e.sort((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||("main"===e.name?-1:1)-("main"===i.name?-1:1)||("master"===e.name?-1:1)-("master"===i.name?-1:1)||("develop"===e.name?-1:1)-("develop"===i.name?-1:1)||(i.remote?-1:1)-(e.remote?-1:1)||(0,h.sd)(e.name,i.name));case"name:desc":return e.sort((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||("main"===e.name?-1:1)-("main"===i.name?-1:1)||("master"===e.name?-1:1)-("master"===i.name?-1:1)||("develop"===e.name?-1:1)-("develop"===i.name?-1:1)||(i.remote?-1:1)-(e.remote?-1:1)||(0,h.sd)(i.name,e.name));default:return e.sort((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||(i.remote?-1:1)-(e.remote?-1:1)||(null==i.date?-1:i.date.getTime())-(null==e.date?-1:e.date.getTime()))}}async function R(e,t,i){let r;for await(let s of(t.startsWith("remotes/")?(r=t,t=t.substring(8)):r=`remotes/${t}`,(i??=new l.c(t=>e.getBranches(null!=t?{paging:t}:void 0))).values()))if(!s.remote&&s.upstream?.name!=null&&(s.upstream.name===t||s.upstream.name===r))return s}g([(0,n.s)(e=>e??"MMMM Do, YYYY h:mma")],GitBranch.prototype,"formatDate",1),g([(0,o.u_)()],GitBranch.prototype,"getAssociatedPullRequest",1),g([(0,n.s)()],GitBranch.prototype,"getBasename",1),g([(0,n.s)()],GitBranch.prototype,"getNameWithoutRemote",1),g([(0,n.s)()],GitBranch.prototype,"getTrackingWithoutRemote",1),g([(0,n.s)()],GitBranch.prototype,"getRemote",1),g([(0,n.s)()],GitBranch.prototype,"getRemoteName",1),g([(0,n.s)()],GitBranch.prototype,"getStatus",1)},1080:(e,t,i)=>{i.d(t,{Ck:()=>b,E$:()=>A,S:()=>C,Sg:()=>GitCommitIdentity,sH:()=>P,uM:()=>k});var r=i(7304),s=i(5576),o=i(1608),n=i(6944),a=i(6e3),l=i(5019),h=i(6448),c=i(1072),u=i(2812),d=i(2060),p=i(7280),g=i(1424),m=Object.defineProperty,f=Object.getOwnPropertyDescriptor,w=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?f(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&m(t,i,o),o};let v=/stash@{(\d+)}/,y=class _GitCommit{constructor(e,t,i,r,s,n,a,l,h,c,u,d,m,f){this.container=e,this.repoPath=t,this.sha=i,this.author=r,this.committer=s,this.parents=a,this.ref=i,this.shortSha=i.substring(0,this.container.CommitShaFormatting.length),this.tips=d,m?(this.refType="stash",this.stashName=m||void 0,this.stashOnRef=f||void 0,this.number=v.exec(m)?.[1]):this.refType="revision",null!=l?(this._message=l,n!==l?this._summary=`${n} ${o.or.Ellipsis}`:this._summary=n):(0,g.bP)(i,!0)?(this._summary=n,this._message="Uncommitted Changes"):this._summary=`${n} ${o.or.Ellipsis}`,null!=c&&(this._stats=c),null!=h&&(Array.isArray(h)?this._files=h:h instanceof p.Gm?this._file=h:(null!=h.file&&(this._file=h.file),null!=h.files&&(this._files=h.files)),this._recomputeStats=!0),null!=u?Array.isArray(u)?this.lines=u:this.lines=[u]:this.lines=[]}_stashUntrackedFilesLoaded=!1;_recomputeStats=!1;lines;ref;refType;shortSha;stashName;number;stashOnRef;tips;toString(){return`${(0,h.EZ)(this)}(${this.repoPath}|${this.shortSha})`}get date(){return"committed"===this.container.CommitDateFormatting.dateSource?this.committer.date:this.author.date}_file;get file(){return this._file}_files;get files(){return this._files}get formattedDate(){return"absolute"===this.container.CommitDateFormatting.dateStyle?this.formatDate(this.container.CommitDateFormatting.dateFormat):this.formatDateFromNow()}get isUncommitted(){return(0,g.bP)(this.sha)}get isUncommittedStaged(){return(0,g.jN)(this.sha)}_message;get message(){return this._message}get name(){return this.stashName?this.stashName:this.shortSha}_stats;get stats(){return this._recomputeStats&&this.computeFileStats(),this._stats}_summary;get summary(){return this._summary}_resolvedPreviousSha;get resolvedPreviousSha(){return this._resolvedPreviousSha}get unresolvedPreviousSha(){let e=this._resolvedPreviousSha??(null!=this.file?this.file.previousSha:this.parents[0])??`${this.sha}^`;return(0,g.w1)(e)?"HEAD":e}_etagFileSystem;hasFullDetails(){return null!=this.message&&null!=this.files&&(this.isUncommitted&&this._etagFileSystem===this.container.git.getRepository(this.repoPath)?.etagFileSystem||0!==this.parents.length)&&("stash"!==this.refType||this._stashUntrackedFilesLoaded)}async ensureFullDetails(){let e;if(this.hasFullDetails())return;if(this.isUncommitted){let e=this.container.git.getRepository(this.repoPath);if(this._etagFileSystem=e?.etagFileSystem,null!=this._etagFileSystem){let t=await this.container.git.getStatusForRepo(this.repoPath);null!=t&&(this._files=t.files.flatMap(e=>e.getPseudoFileChanges())),this._etagFileSystem=e?.etagFileSystem}null==this._files&&(this._files=null!=this.file?[this.file]:[]);return}let[t,i]=await Promise.allSettled(["stash"!==this.refType?this.container.git.getCommit(this.repoPath,this.sha):void 0,"stash"!==this.refType||this._stashUntrackedFilesLoaded?void 0:this.container.git.getCommit(this.repoPath,`${this.stashName}^3`),this.getPreviousSha()]);if("fulfilled"===t.status&&null!=t.value&&(e=t.value,this.parents.push(...e.parents??[]),this._summary=e.summary,this._message=e.message,this._files=e.files,null!=this._file)){let e=this._files.find(e=>e.path===this._file.path);null!=e&&(this._file=new p.Gm(e.repoPath,e.path,e.status,e.originalPath??this._file.originalPath,e.previousSha??this._file.previousSha,e.stats??this._file.stats))}if("fulfilled"===i.status&&null!=i.value&&(this._stashUntrackedFilesLoaded=!0,e=i.value,e?.files!=null&&0!==e.files.length)){let t=e.files.map(e=>new p.Gm(this.repoPath,e.path,p._y.Untracked,e.originalPath));null==this._files?this._files=t:this._files.push(...t)}this._recomputeStats=!0}computeFileStats(){if(!this._recomputeStats||null==this._files)return;this._recomputeStats=!1;let e={added:0,deleted:0,changed:0},t=0,i=0;for(let r of this._files)switch(null!=r.stats&&(t+=r.stats.additions,i+=r.stats.deletions),r.status){case"A":case"?":e.added++;break;case"D":e.deleted++;break;default:e.changed++}null!=this._stats&&(0===t&&0!==this._stats.additions&&(t=this._stats.additions),0===i&&0!==this._stats.deletions&&(i=this._stats.deletions)),this._stats={...this._stats,changedFiles:e,additions:t,deletions:i}}async findFile(e,t){if(!this.hasFullDetails()&&(await this.ensureFullDetails(),null==this._files))return;let i=this.container.git.getRelativePath(e,this.repoPath);return this.isUncommitted&&null!=t?this._files?.find(e=>e.path===i&&e.staged===t):this._files?.find(e=>e.path===i)}formatDate(e){return"committed"===this.container.CommitDateFormatting.dateSource?this.committer.formatDate(e):this.author.formatDate(e)}formatDateFromNow(e){return"committed"===this.container.CommitDateFormatting.dateSource?this.committer.fromNow(e):this.author.fromNow(e)}formatStats(e){let t=this.stats;if(null==t)return e?.empty??"";let{changedFiles:i,additions:r,deletions:s}=t;if(0>=k(i)&&r<=0&&s<=0)return e?.empty??"";let{compact:n=!1,expand:a=!1,prefix:l="",sectionSeparator:h=` ${(0,c.eu)(o.or.Dot,1,1,o.or.Space)} `,separator:u=" ",suffix:d=""}=e??{},p=l;if("number"==typeof i)i&&(p+=a?`${(0,c.u)("file",i)} changed`:`~${i}`);else{let{added:e,changed:t,deleted:s}=i;e?p+=a?`${(0,c.u)("file",e)} added`:`+${e}`:a||n||(p+="+0"),t?p+=`${e?u:""}${a?`${(0,c.u)("file",t)} changed`:`~${t}`}`:a||n||(p+="~0"),s?p+=`${t|r?u:""}${a?`${(0,c.u)("file",s)} deleted`:`-${s}`}`:a||n||(p+="-0")}return a&&(r&&(p+=`${i?h:""}${(0,c.u)("addition",r)}`),s&&(p+=`${i||r?u:""}${(0,c.u)("deletion",s)}`)),p+=d}async getAssociatedPullRequest(e){if(e??=await this.container.git.getBestRemoteWithIntegration(this.repoPath),!e?.hasIntegration())return;let t=this.container.integrations.getByRemote(e);return t?.getPullRequestForCommit(e.provider.repoDesc,this.ref)}async getEnrichedAutolinks(e){if(!this.isUncommitted&&(e??=await this.container.git.getBestRemoteWithIntegration(this.repoPath),e?.provider!=null))return null==this.message&&await this.ensureFullDetails(),this.container.autolinks.getEnrichedAutolinks(this.message??this.summary,e)}getAvatarUri(e){return this.author.getAvatarUri(this,e)}getCachedAvatarUri(e){return this.author.getCachedAvatarUri(e)}async getCommitForFile(e,t){let i="string"==typeof e?this.container.git.getRelativePath(e,this.repoPath):e.path,r=await this.findFile(i,t);if(null!=r)return this.with({sha:r.staged?d.QD:this.sha,files:{file:r}})}async getCommitsForFiles(){return this.hasFullDetails()||(await this.ensureFullDetails(),null!=this._files)?this._files?.map(e=>this.with({files:{file:e}}))??[]:[]}getGitUri(e=!1){let t=this._file?.uri??this.container.git.getAbsoluteUri(this.repoPath,this.repoPath);return e?new u.wv(this._file?.originalUri??t,{repoPath:this.repoPath,sha:this.unresolvedPreviousSha}):new u.wv(t,this)}getPreviousComparisonUrisForLine(e,t){return null!=this.file?this.container.git.getPreviousComparisonUrisForLine(this.repoPath,this.file.uri,e,t??(this.sha===d.Oy?void 0:this.sha)):Promise.resolve(void 0)}_previousShaPromise;async getPreviousSha(){if(null==this._previousShaPromise){async function e(){if(null!=this.file){if(null!=this.file.previousSha&&(0,g.kp)(this.file.previousSha))return this.file.previousSha;let e=await this.container.git.resolveReference(this.repoPath,(0,g.bP)(this.sha,!0)?"HEAD":`${this.sha}^`,this.file.originalPath??this.file.path);return this._resolvedPreviousSha=e,e}let e=this.parents[0];if(null!=e&&(0,g.kp)(e))return this._resolvedPreviousSha=e,e;let t=await this.container.git.resolveReference(this.repoPath,(0,g.bP)(this.sha,!0)?"HEAD":`${this.sha}^`);return this._resolvedPreviousSha=t,t}this._previousShaPromise=e.call(this)}return this._previousShaPromise}getRepository(){return this.container.git.getRepository(this.repoPath)}async isPushed(){return this.container.git.hasCommitBeenPushed(this.repoPath,this.ref)}with(e){let t;return null!=e.files?(t={file:this._file,files:this._files},null!=e.files.file?t.file=e.files.file:null===e.files.file&&(t.file=void 0),null!=e.files.files?t.files=e.files.files:null===e.files.files&&(t.files=void 0)):null===e.files&&(t=void 0),new _GitCommit(this.container,this.repoPath,e.sha??this.sha,this.author,this.committer,this.summary,this.getChangedValue(e.parents,this.parents)??[],this.message,t,this.stats,this.getChangedValue(e.lines,this.lines),this.tips,this.stashName,this.stashOnRef)}getChangedValue(e,t){return void 0===e?t:null!==e?e:void 0}};w([(0,l.s)()],y.prototype,"isUncommitted",1),w([(0,l.s)()],y.prototype,"isUncommittedStaged",1),w([(0,a.I)()],y.prototype,"ensureFullDetails",1),w([(0,l.s)()],y.prototype,"getGitUri",1),w([(0,l.s)((e,t)=>`${e}|${t??""}`)],y.prototype,"getPreviousComparisonUrisForLine",1),w([(0,a.I)()],y.prototype,"isPushed",1);let b=y;function C(e){return e instanceof b}function A(e){return e instanceof b&&"stash"===e.refType&&!!e.stashName}let GitCommitIdentity=class GitCommitIdentity{constructor(e,t,i,r){this.name=e,this.email=t,this.date=i,this.avatarUrl=r}formatDate(e){return(0,n._m)(this.date,e??"MMMM Do, YYYY h:mma")}fromNow(e){return(0,n.Yn)(this.date,e)}getAvatarUri(e,t){return null!=this.avatarUrl?r.Uri.parse(this.avatarUrl):(0,s.X0)(this.email,e,t)}getCachedAvatarUri(e){return null!=this.avatarUrl?r.Uri.parse(this.avatarUrl):(0,s.sh)(this.email,e)}};function k(e){return null==e?0:"number"==typeof e?e:e.added+e.changed+e.deleted}function P(e){if(!e.hasFullDetails())throw Error(`GitCommit(${e.sha}) is not fully loaded`)}w([(0,l.s)(e=>e??"MMMM Do, YYYY h:mma")],GitCommitIdentity.prototype,"formatDate",1)},2060:(e,t,i)=>{i.d(t,{E1:()=>r,Oy:()=>s,QD:()=>o});let r="0000000000000000000000000000000000000000-",s="0000000000000000000000000000000000000000",o="0000000000000000000000000000000000000000:"},7260:(e,t,i)=>{i.d(t,{M:()=>d,w:()=>p});var r=i(7304),s=i(5576),o=i(4169),n=i(6944),a=i(5019),l=i(1072),h=Object.defineProperty,c=Object.getOwnPropertyDescriptor;let u=class _GitContributor{constructor(e,t,i,r,s,o=!1,n,a,l,h){this.repoPath=e,this.name=t,this.email=i,this.count=r,this.date=s,this.current=o,this.stats=n,this.username=a,this.avatarUrl=l,this.id=h}static is(e){return e instanceof _GitContributor}static sort(e,t){switch((t={current:!0,orderBy:o.i.get("sortContributorsBy"),...t}).orderBy){case"count:asc":return e.sort((e,t)=>(e.current?-1:1)-(t.current?-1:1)||e.count-t.count||(e.date?.getTime()??0)-(t.date?.getTime()??0));case"date:desc":return e.sort((e,i)=>(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(i.date?.getTime()??0)-(e.date?.getTime()??0)||i.count-e.count);case"date:asc":return e.sort((e,i)=>(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(e.date?.getTime()??0)-(i.date?.getTime()??0)||i.count-e.count);case"name:asc":return e.sort((e,t)=>(e.current?-1:1)-(t.current?-1:1)||(0,l.sd)(e.name??e.username,t.name??t.username));case"name:desc":return e.sort((e,t)=>(e.current?-1:1)-(t.current?-1:1)||(0,l.sd)(t.name??t.username,e.name??e.username));default:return e.sort((e,t)=>(e.current?-1:1)-(t.current?-1:1)||t.count-e.count||(t.date?.getTime()??0)-(e.date?.getTime()??0))}}get label(){return this.name??this.username}formatDate(e){return null!=this.date?(0,n._m)(this.date,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(e){return null!=this.date?(0,n.Yn)(this.date,e):""}getAvatarUri(e){return null!=this.avatarUrl?r.Uri.parse(this.avatarUrl):(0,s.X0)(this.email,void 0,e)}getCoauthor(){return`${this.name}${this.email?` <${this.email}>`:""}`}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?c(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&h(t,i,o)})([(0,a.s)(e=>e??"MMMM Do, YYYY h:mma")],u.prototype,"formatDate",1);let d=u;function p(e,t){return e.name===t.name&&e.email===t.email&&e.username===t.username}},7280:(e,t,i)=>{i.d(t,{Gm:()=>I,Iz:()=>$,Mg:()=>R,Ml:()=>A,W:()=>y,YX:()=>P,_y:()=>v,am:()=>C,fX:()=>w,uY:()=>b,yK:()=>f});var r,s,o,n=i(7304),a=i(1608),l=i(9964),h=i(5019),c=i(3020),u=i(3732),d=i(1072),p=Object.defineProperty,g=Object.getOwnPropertyDescriptor,m=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?g(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&p(t,i,o),o},f=((r=f||{}).AddedByBoth="AA",r.AddedByUs="AU",r.AddedByThem="UA",r.DeletedByBoth="DD",r.DeletedByUs="DU",r.DeletedByThem="UD",r.ModifiedByBoth="UU",r),w=((s=w||{}).Modified="M",s.Added="A",s.Deleted="D",s.Renamed="R",s.Copied="C",s.Unchanged=".",s.Untracked="?",s.Ignored="!",s.UpdatedButUnmerged="U",s),v=((o=v||{}).Modified="M",o.Added="A",o.Deleted="D",o.Untracked="?",o.Ignored="!",o);function y(e,t=!1,i){let r=(0,u.ye)(e.path,i);return t&&("R"===e.status||"C"===e.status)&&e.originalPath?`${r} ${(0,d.eu)(a.or.ArrowLeft,1,1)} ${e.originalPath}`:r}function b(e,t={}){return(0,c.o)(e.path,t)}function C(e,t){return e.originalPath?(0,u.O)(e.originalPath,t)[0]:""}function A(e,t){return(0,u.O)(e.path,t)[0]}let k={".":void 0,"!":"icon-status-ignored.svg","?":"icon-status-untracked.svg",A:"icon-status-added.svg",D:"icon-status-deleted.svg",M:"icon-status-modified.svg",R:"icon-status-renamed.svg",C:"icon-status-copied.svg",AA:"icon-status-conflict.svg",AU:"icon-status-conflict.svg",UA:"icon-status-conflict.svg",DD:"icon-status-conflict.svg",DU:"icon-status-conflict.svg",UD:"icon-status-conflict.svg",UU:"icon-status-conflict.svg",T:"icon-status-modified.svg",U:"icon-status-modified.svg"};function P(e){return k[e]??"icon-status-unknown.svg"}let S={".":void 0,"!":"diff-ignored","?":"diff-added",A:"diff-added",D:"diff-removed",M:"diff-modified",R:"diff-renamed",C:"diff-added",AA:"warning",AU:"warning",UA:"warning",DD:"warning",DU:"warning",UD:"warning",UU:"warning",T:"diff-modified",U:"diff-modified"};function R(e){let t=S[e];return null!=t?new n.ThemeIcon(t):void 0}let D={".":"Unchanged","!":"Ignored","?":"Untracked",A:"Added",D:"Deleted",M:"Modified",R:"Renamed",C:"Copied",AA:"Conflict",AU:"Conflict",UA:"Conflict",DD:"Conflict",DU:"Conflict",UD:"Conflict",UU:"Conflict",T:"Modified",U:"Updated but Unmerged"};function $(e){return D[e]??"Unknown"}let _=class _GitFileChange{constructor(e,t,i,r,s,o,n){this.repoPath=e,this.path=t,this.status=i,this.originalPath=r,this.previousSha=s,this.stats=o,this.staged=n}static is(e){return e instanceof _GitFileChange}get hasConflicts(){switch(this.status){case"UA":case"AU":case"AA":case"UD":case"DU":case"DD":case"UU":return!0;default:return!1}}get uri(){return l.Container.instance.git.getAbsoluteUri(this.path,this.repoPath)}get originalUri(){return this.originalPath?l.Container.instance.git.getAbsoluteUri(this.originalPath,this.repoPath):void 0}getWorkingUri(){return l.Container.instance.git.getWorkingUri(this.repoPath,this.uri)}formatStats(e){if(null==this.stats)return e?.empty??"";let{additions:t,deletions:i}=this.stats;if(t<0&&i<0)return e?.empty??"";let{compact:r=!1,expand:s=!1,prefix:o="",separator:n=" ",suffix:a=""}=e??{},l=o;return t?l+=s?`${(0,d.u)("line",t)} added`:`+${t}`:s||r||(l+="+0"),i?l+=`${t?n:""}${s?`${(0,d.u)("line",i)} deleted`:`-${i}`}`:s||r||(l+="-0"),l+=a}};m([(0,h.s)()],_.prototype,"uri",1),m([(0,h.s)()],_.prototype,"originalUri",1),m([(0,h.s)()],_.prototype,"getWorkingUri",1);let I=_},7956:(e,t,i)=>{i.d(t,{Al:()=>s,S6:()=>o,Wq:()=>l,eV:()=>n,kk:()=>Issue,op:()=>a});var r=i(7304);function s(e){return{type:e.type,provider:{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon},id:e.id,nodeId:e.nodeId,title:e.title,url:e.url,date:e.date,closedDate:e.closedDate,closed:e.closed,state:e.state}}function o(e){if(null==e)return`<span class="codicon codicon-link" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};"></span>`;if("pullrequest"!==e.type)return e.closed?`<span class="codicon codicon-pass" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};"></span>`:`<span class="codicon codicon-issues" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};"></span>`;switch(e.state){case"merged":return`<span class="codicon codicon-git-merge" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};"></span>`;case"closed":return`<span class="codicon codicon-git-pull-request-closed" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#f85149":"#cf222e"};"></span>`;case"opened":return`<span class="codicon codicon-git-pull-request" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};"></span>`;default:return'<span class="codicon codicon-git-pull-request"></span>'}}function n(e){if(null==e)return`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};">$(link)</span>`;if("pullrequest"!==e.type)return e.closed?`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};">$(pass)</span>`:`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};">$(issues)</span>`;switch(e.state){case"merged":return`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};">$(git-merge)</span>`;case"closed":return`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#f85149":"#cf222e"};">$(git-pull-request-closed)</span>`;case"opened":return`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};">$(git-pull-request)</span>`;default:return"$(git-pull-request)"}}function a(e){if(null==e)return new r.ThemeIcon("link",new r.ThemeColor("gitlens.closedAutolinkedIssueIconColor"));if("pullrequest"!==e.type)return e.closed?new r.ThemeIcon("pass",new r.ThemeColor("gitlens.closedAutolinkedIssueIconColor")):new r.ThemeIcon("issues",new r.ThemeColor("gitlens.openAutolinkedIssueIconColor"));switch(e.state){case"merged":return new r.ThemeIcon("git-merge",new r.ThemeColor("gitlens.mergedPullRequestIconColor"));case"closed":return new r.ThemeIcon("git-pull-request-closed",new r.ThemeColor("gitlens.closedPullRequestIconColor"));case"opened":return new r.ThemeIcon("git-pull-request",new r.ThemeColor("gitlens.openPullRequestIconColor"));default:return new r.ThemeIcon("git-pull-request")}}function l(e){return{type:e.type,provider:{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon},id:e.id,nodeId:e.nodeId,title:e.title,url:e.url,date:e.date,closedDate:e.closedDate,closed:e.closed,state:e.state,updatedDate:e.updatedDate,author:{name:e.author.name,avatarUrl:e.author.avatarUrl,url:e.author.url},repository:{owner:e.repository.owner,repo:e.repository.repo},assignees:e.assignees.map(e=>({name:e.name,avatarUrl:e.avatarUrl,url:e.url})),labels:null==e.labels?void 0:e.labels.map(e=>({color:e.color,name:e.name})),commentsCount:e.commentsCount,thumbsUpCount:e.thumbsUpCount}}let Issue=class Issue{constructor(e,t,i,r,s,o,n,a,l,h,c,u,d,p,g,m){this.provider=e,this.id=t,this.nodeId=i,this.title=r,this.url=s,this.date=o,this.closed=n,this.state=a,this.updatedDate=l,this.author=h,this.repository=c,this.assignees=u,this.closedDate=d,this.labels=p,this.commentsCount=g,this.thumbsUpCount=m}type="issue"}},8292:(e,t,i)=>{i.d(t,{AX:()=>p,Kl:()=>u,Y3:()=>m,ak:()=>d});var r,s,o=i(9964),n=i(6944),a=i(5019),l=Object.defineProperty,h=Object.getOwnPropertyDescriptor,c=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?h(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&l(t,i,o),o},u=((r=u||{}).Approved="Approved",r.ChangesRequested="ChangesRequested",r.ReviewRequired="ReviewRequired",r),d=((s=d||{}).Unknown="Unknown",s.Mergeable="Mergeable",s.Conflicting="Conflicting",s);function p(e){return{type:e.type,provider:{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon},id:e.id,nodeId:e.nodeId,title:e.title,url:e.url,date:e.date,closedDate:e.closedDate,closed:e.closed,author:{name:e.author.name,avatarUrl:e.author.avatarUrl,url:e.author.url},state:e.state,mergedDate:e.mergedDate,mergeableState:e.mergeableState,refs:e.refs?{head:{exists:e.refs.head.exists,owner:e.refs.head.owner,repo:e.refs.head.repo,sha:e.refs.head.sha,branch:e.refs.head.branch,url:e.refs.head.url},base:{exists:e.refs.base.exists,owner:e.refs.base.owner,repo:e.refs.base.repo,sha:e.refs.base.sha,branch:e.refs.base.branch,url:e.refs.base.url},isCrossRepository:e.refs.isCrossRepository}:void 0,isDraft:e.isDraft,additions:e.additions,deletions:e.deletions,comments:e.comments,reviewDecision:e.reviewDecision,reviewRequests:e.reviewRequests,assignees:e.assignees}}let g=class _PullRequest{constructor(e,t,i,r,s,o,n,a,l,h,c,u,d,p,g,m,f,w,v){this.provider=e,this.author=t,this.id=i,this.nodeId=r,this.title=s,this.url=o,this.state=n,this.date=a,this.closedDate=l,this.mergedDate=h,this.mergeableState=c,this.refs=u,this.isDraft=d,this.additions=p,this.deletions=g,this.comments=m,this.reviewDecision=f,this.reviewRequests=w,this.assignees=v}static is(e){return e instanceof _PullRequest}type="pullrequest";get closed(){return"closed"===this.state}get formattedDate(){return"absolute"===o.Container.instance.PullRequestDateFormatting.dateStyle?this.formatDate(o.Container.instance.PullRequestDateFormatting.dateFormat):this.formatDateFromNow()}formatDate(e){return(0,n._m)(this.mergedDate??this.closedDate??this.date,e??"MMMM Do, YYYY h:mma")}formatDateFromNow(){return(0,n.Yn)(this.mergedDate??this.closedDate??this.date)}formatClosedDate(e){return null==this.closedDate?"":(0,n._m)(this.closedDate,e??"MMMM Do, YYYY h:mma")}formatClosedDateFromNow(){return null==this.closedDate?"":(0,n.Yn)(this.closedDate)}formatMergedDate(e){return null==this.mergedDate?"":(0,n._m)(this.mergedDate,e??"MMMM Do, YYYY h:mma")??""}formatMergedDateFromNow(){return null==this.mergedDate?"":(0,n.Yn)(this.mergedDate)}formatUpdatedDate(e){return(0,n._m)(this.date,e??"MMMM Do, YYYY h:mma")??""}formatUpdatedDateFromNow(){return(0,n.Yn)(this.date)}};c([(0,a.s)(e=>e??"MMMM Do, YYYY h:mma")],g.prototype,"formatDate",1),c([(0,a.s)(e=>e??"MMMM Do, YYYY h:mma")],g.prototype,"formatClosedDate",1),c([(0,a.s)(e=>e??"MMMM Do, YYYY h:mma")],g.prototype,"formatMergedDate",1),c([(0,a.s)(e=>e??"MMMM Do, YYYY h:mma")],g.prototype,"formatUpdatedDate",1);let m=g},1424:(e,t,i)=>{i.d(t,{ED:()=>y,EZ:()=>P,K4:()=>D,MN:()=>T,QN:()=>x,U1:()=>w,Wi:()=>O,_A:()=>E,_Q:()=>I,_e:()=>$,_u:()=>f,aL:()=>_,bP:()=>b,c5:()=>k,eK:()=>B,jN:()=>A,kp:()=>v,op:()=>S,u:()=>U,uE:()=>R,w1:()=>C,yc:()=>F});var r=i(1608),s=i(4169),o=i(1072),n=i(2452),a=i(2060);let l=/^(\S*?)(\.\.\.?)(\S*)\s*$/,h=/(^[0-9a-f]{40}([\^@~:]\S*)?$)|(^[0]{40}(:|-)$)/,c=/(^[0-9a-f]{40}$)|(^[0]{40}(:|-)$)/,u=/(^[0-9a-f]{40})\^[0-3]?$/,d=/^(.*?)([\^@~:].*)?$/,p=/^[0]{40}(?:[\^@~:]\S*)?:?$/,g=/^[0]{40}([\^@~]\S*)?:$/;function m(e,t){return!!t&&e.test(t)}function f(e,t,i=".."){return`${e??""}${i}${t??""}`}function w(e){return e?.includes("..")??!1}function v(e){return m(c,e)}function y(e){return m(h,e)}function b(e,t=!1){return e===a.Oy||e===a.QD||!t&&m(p,e)}function C(e){return e===`${a.Oy}^`||e===`${a.QD}^`}function A(e,t=!1){return e===a.QD||!t&&m(g,e)}function k(e,t){if(e===a.E1)return"(deleted)";if(!e)return t?.strings?.working??"";if(b(e))return A(e)?t?.strings?.uncommittedStaged??"Index":t?.strings?.uncommitted??"Working Tree";if(w(e)||!t?.force&&!y(e))return e;let i=Math.max(5,s.i.get("advanced.abbreviatedShaLength")),r=d.exec(e);if(null!=r){let[,e,t]=r;if(null!=t)return`${e.substr(0,i)}${t}`}return e.substr(0,i)}function P(e){let t=l.exec(e);if(null==t)return;let[,i,r,s]=t;return{ref1:i,notation:r,ref2:s}}function S(e,t,i={refType:"revision"}){switch(i.refType){case"branch":return{refType:"branch",repoPath:t,ref:e,name:i.name,id:i.id,remote:i.remote,upstream:i.upstream};case"stash":return{refType:"stash",repoPath:t,ref:e,name:i.name,number:i.number,message:i.message,stashOnRef:i.stashOnRef};case"tag":return{refType:"tag",repoPath:t,ref:e,name:i.name,id:i.id};default:return{refType:"revision",repoPath:t,ref:e,name:i.name??k(e,{force:!0,strings:{working:"Working Tree"}}),message:i.message}}}function R(e){return S(e.ref,e.repoPath,{id:e.id,refType:e.refType,name:e.name,remote:e.remote,upstream:e.upstream})}function D(e,t){return"stash"===e.refType?S(e.ref,e.repoPath,{refType:e.refType,name:e.name,number:e.number,message:t?.excludeMessage?void 0:e.message}):S(e.ref,e.repoPath,{refType:e.refType,name:e.name,message:t?.excludeMessage?void 0:e.message})}function $(e){return"branch"===e.refType&&e.remote?(0,n.ak)(e.name):e.name}function _(e){return e.upstream?.name.substring(n.sF(e.upstream.name)+1)}function I(e){return null!=e&&"object"==typeof e&&"string"==typeof e.refType&&"string"==typeof e.repoPath&&"string"==typeof e.ref&&"string"==typeof e.name}function T(e){return e?.refType==="branch"}function F(e){return e?.refType==="revision"}function O(e){return e?.refType==="revision"&&w(e.ref)}function x(e){return e?.refType==="stash"||e?.refType==="revision"&&!!e?.stashName}function E(e){return e?.refType==="tag"}function B(e){switch(e?.refType){case"branch":return"Branch";case"tag":return"Tag";default:return"Commit"}}function U(e,t){let i;if(null==e)return"";if(t=!1===t?{}:{expand:!0,icon:!0,label:t?.label??t?.expand??!0,...t},!Array.isArray(e)||1===e.length){let s=Array.isArray(e)?e[0]:e,a=t?.quoted?`'${s.name}'`:s.name;switch(s.refType){case"branch":{let e;s.remote&&(a=`${(0,n.IB)(a)}: ${(0,n.ak)(a)}`,a=t?.quoted?`'${a}'`:a),e=t.label?t.capitalize&&t.expand?`${s.remote?"Remote ":""}Branch `:`${s.remote?"remote ":""}branch `:"",i=`${e}${t.icon?`$(git-branch)${r.or.Space}${a}`:a}`;break}case"tag":i=`${t.label?"tag ":""}${t.icon?`$(tag)${r.or.Space}${a}`:a}`;break;default:if(x(s)){let e;t.expand&&s.message&&(e=`${null!=s.number?`#${s.number}: `:""}${s.message.length>20?`${s.message.substring(0,20).trimRight()}${r.or.Ellipsis}`:s.message}`),i=`${t.label?"stash ":""}${t.icon?`$(archive)${r.or.Space}${e??s.name}`:e??(s.number?`#${s.number}`:s.name)}`}else if(w(s.ref))i=a;else{let e,o;(t.expand&&s.message&&(e=s.message.length>20?` (${s.message.substring(0,20).trimRight()}${r.or.Ellipsis})`:` (${s.message})`),t.expand&&t.label&&m(u,s.ref))?(a=s.name.endsWith("^")?s.name.substr(0,s.name.length-1):s.name,t?.quoted&&(a=`'${a}'`),o="before "):o="",i=`${t.label?`${o}commit `:""}${t.icon?`$(git-commit)${r.or.Space}${a}${e??""}`:`${a}${e??""}`}`}}return t.capitalize&&t.expand&&!1!==t.label?(0,o.Yj)(i):i}let s=t.expand?` (${e.map(e=>e.name).join(", ")})`:"";switch(e[0].refType){case"branch":return`${e.length} branches${s}`;case"tag":return`${e.length} tags${s}`;default:return`${e.length} ${x(e[0])?"stashes":"commits"}${s}`}}},2152:(e,t,i)=>{i.d(t,{ML:()=>GitRemote,O:()=>y,Q7:()=>v,U$:()=>p,ak:()=>m,l3:()=>w,yK:()=>f,yj:()=>g});var r=i(7304),s=i(1608),o=i(9964),n=i(5019),a=i(1072),l=i(3284),h=i(7620),c=Object.defineProperty,u=Object.getOwnPropertyDescriptor,d=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?u(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&c(t,i,o),o};let GitRemote=class GitRemote{constructor(e,t,i,r,s,o,n,a){this.container=e,this.repoPath=t,this.name=i,this.scheme=r,this._domain=s,this._path=o,this.provider=n,this.urls=a}get default(){let e=o.Container.instance.storage.getWorkspace("remote:default");return this.name===e||this.remoteKey===e}get domain(){return this.provider?.domain??this._domain}get id(){return`${this.name}/${this.remoteKey}`}get maybeIntegrationConnected(){return!!(null!=this.provider&&this.container.integrations.supports(this.provider.id))&&this.getIntegration()?.maybeConnected}get path(){return this.provider?.path??this._path}get remoteKey(){return this._domain?`${this._domain}/${this._path}`:this.path}get url(){let e;for(let t of this.urls){if("push"===t.type)return t.url;null==e&&(e=t.url)}return e}getIntegration(){return null!=this.provider?this.container.integrations.getByRemote(this):void 0}hasIntegration(){return null!=this.provider&&this.container.integrations.supports(this.provider.id)}matches(e,t){if(null==t){if((0,a.RJ)(e,this.url))return!0;[,e,t]=(0,h.Ud)(e)}return(0,a.RJ)(e,this.domain)&&(0,a.RJ)(t,this.path)}async setAsDefault(e=!0){let t=o.Container.instance.git.getRepository(this.repoPath);await t?.setRemoteAsDefault(this,e)}};function p(e){if(0===e.length)return;let t=1===e.length?e[0]:e.find(e=>e.default);if(null!=t)return[t.provider];let i=e[0].provider.name;if(e.every(e=>e.provider.name===i))return e.map(e=>e.provider)}function g(e){if(0===e.length)return;let t=1===e.length?e[0]:e.find(e=>e.default);if(null!=t)return t.provider.name;let i=e[0].provider.name;if(e.every(e=>e.provider.name===i))return i}function m(e,t,i,s=r.window.activeColorTheme){if(t.provider?.icon==null)return;let o=r.Uri.joinPath(e.context.extensionUri,`images/${(0,l.Q5)(s)?"light":"dark"}/icon-${t.provider.icon}.svg`);return null!=i?i(o):o}function f(e){let t=function(e){let t,i;for(let{type:r}of e.urls)if("fetch"===r){if(t=!0,i)break}else if("push"===r&&(i=!0,t))break;return t&&i?s.or.ArrowsRightLeft:i?s.or.ArrowRight:t?s.or.ArrowLeft:s.or.Dash}(e),{provider:i}=e;return null!=i?`${t}${s.or.Space} ${i.name} ${s.or.Space}${s.or.Dot}${s.or.Space} ${i.displayPath}`:`${t}${s.or.Space} ${e.domain?`${e.domain} ${s.or.Space}${s.or.Dot}${s.or.Space} `:""}${e.path}`}function w(e){return Array.isArray(e)?e.map(e=>e.remoteKey).sort().join(","):e.remoteKey}function v(e){return e instanceof GitRemote}function y(e){return e.sort((e,t)=>(e.default?-1:1)-(t.default?-1:1)||("origin"===e.name?-1:1)-("origin"===t.name?-1:1)||("upstream"===e.name?-1:1)-("upstream"===t.name?-1:1)||(0,a.sd)(e.name,t.name))}d([(0,n.s)()],GitRemote.prototype,"domain",1),d([(0,n.s)()],GitRemote.prototype,"id",1),d([(0,n.s)()],GitRemote.prototype,"path",1),d([(0,n.s)()],GitRemote.prototype,"remoteKey",1),d([(0,n.s)()],GitRemote.prototype,"url",1)},2036:(e,t,i)=>{i.d(t,{X:()=>o,o:()=>s});var r,s=((r=s||{}).Branch="branch",r.Branches="branches",r.Commit="commit",r.Comparison="comparison",r.CreatePullRequest="createPullRequest",r.File="file",r.Repo="repo",r.Revision="revision",r);function o(e){switch(e.type){case"branch":return"Branch";case"branches":return"Branches";case"commit":return"Commit";case"comparison":return"Comparison";case"createPullRequest":return"Create Pull Request";case"file":case"revision":return"File";case"repo":return"Repository";default:return""}}},4408:(e,t,i)=>{i.d(t,{MR:()=>x,Oc:()=>B,Oq:()=>E,c7:()=>O});var r,s,o=i(7304),n=i(7312),a=i(1608),l=i(3828),h=i(7068),c=i(7824),u=i(4169),d=i(6944),p=i(6e3),g=i(4136),m=i(8196),f=i(7348),w=i(6448),v=i(3e3),y=i(4204),b=i(3732),C=i(1072),A=i(2452),k=i(1424),P=Object.defineProperty,S=Object.getOwnPropertyDescriptor,R=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?S(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&P(t,i,o),o};let D=Object.freeze([]),$="index,HEAD,*_HEAD,MERGE_*,rebase-merge/**,sequencer/**",_="worktrees/**/index,worktrees/**/HEAD,worktrees/**/*_HEAD,worktrees/**/MERGE_*,worktrees/**/rebase-merge/**,worktrees/**/sequencer/**",I=`{${$}}`,T=`{config,refs/**,${_}}`,F=`{${$},config,refs/**,${_}}`;var O=((r=O||{})[r.Unknown=-1]="Unknown",r[r.Index=0]="Index",r[r.Head=1]="Head",r[r.Heads=2]="Heads",r[r.Tags=3]="Tags",r[r.Stash=4]="Stash",r[r.Remotes=5]="Remotes",r[r.Worktrees=6]="Worktrees",r[r.Config=7]="Config",r[r.Status=8]="Status",r[r.CherryPick=9]="CherryPick",r[r.Merge=10]="Merge",r[r.Rebase=11]="Rebase",r[r.Closed=100]="Closed",r[r.Ignores=101]="Ignores",r[r.RemoteProviders=102]="RemoteProviders",r[r.Starred=103]="Starred",r[r.Opened=104]="Opened",r),x=((s=x||{})[s.Any=0]="Any",s[s.Exclusive=1]="Exclusive",s);let RepositoryChangeEvent=class RepositoryChangeEvent{constructor(e,t){this.repository=e,this._changes=new Set(t)}_changes;toString(e=!1){return e?`changes=${(0,f.kn)(this._changes,", ")}`:`{ repository: ${this.repository?.name??""}, changes: ${(0,f.kn)(this._changes,", ")} }`}changed(...e){let t=e.slice(0,-1),i=e[e.length-1];if(0===i)return(0,f.K6)(this._changes,e=>t.includes(e));let r=this._changes;1===i&&(t.includes(9)||t.includes(10)||t.includes(11)?t.includes(8)||t.push(8):t.includes(8)&&((r=new Set(r)).delete(9),r.delete(10),r.delete(11)));let s=[...(0,f.IF)(r,e=>t.includes(e))];return 1===i?s.length===r.size:s.length===t.length}with(e){return new RepositoryChangeEvent(this.repository,[...this._changes,...e])}};let E=class{constructor(e,t,i,r,s,n,a,l=!1){if(this.container=e,this.onDidRepositoryChange=t,this.provider=i,this.folder=r,this.uri=s,this.root=n,null!=r){if(n)this.name=r.name;else{let t=e.git.getRelativePath(s,r.uri);this.name=t||r.name}}else this.name=(0,b.g1)(s.path);this.index=r?.index??e.git.repositoryCount,this.id=(0,h.w3)(s),this._suspended=a,this._closed=l,this._disposable=o.Disposable.from(this.setupRepoWatchers(),u.i.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(),this._orderByLastFetched&&this.getLastFetched()}static formatLastFetched(e,t=!0){let i=new Date(e);if(Date.now()-e<864e5)return(0,d.Yn)(i);if(t)return(0,d._m)(i,u.i.get("defaultDateShortFormat")??"short");let r=u.i.get("defaultDateFormat")??`dddd, MMMM Do, YYYY [at] ${u.i.get("defaultTimeFormat")??"h:mma"}`;return/[hHm]/.test(r)||(r+=` [at] ${u.i.get("defaultTimeFormat")??"h:mma"}`),(0,d._m)(i,r)}static getLastFetchedUpdateInterval(e){let t=Date.now()-e;return t<864e5?(t<36e5?6e4:36e5)/2:0}static sort(e,t){switch((t={orderBy:u.i.get("sortRepositoriesBy"),...t}).orderBy){case"name:asc":return e.sort((e,t)=>(e.starred?-1:1)-(t.starred?-1:1)||(0,C.sd)(e.name,t.name));case"name:desc":return e.sort((e,t)=>(e.starred?-1:1)-(t.starred?-1:1)||(0,C.sd)(t.name,e.name));case"lastFetched:asc":return e.sort((e,t)=>(e.starred?-1:1)-(t.starred?-1:1)||(e._lastFetched??0)-(t._lastFetched??0));case"lastFetched:desc":return e.sort((e,t)=>(e.starred?-1:1)-(t.starred?-1:1)||(t._lastFetched??0)-(e._lastFetched??0));default:return e}}_onDidChange=new o.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeFileSystem=new o.EventEmitter;get onDidChangeFileSystem(){return this._onDidChangeFileSystem.event}get formattedName(){return this.name}id;index;name;_idHash;get idHash(){return void 0===this._idHash&&(this._idHash=(0,n.m)(this.id)),this._idHash}_branch;_disposable;_fireChangeDebounced=void 0;_fireFileSystemChangeDebounced=void 0;_pendingFileSystemChange;_pendingRepoChange;_suspended;setupRepoWatchers(){let e;return this.setupRepoWatchersCore().then(t=>e=t),{dispose:()=>void e?.dispose()}}async setupRepoWatchersCore(){let e=(0,v.b1)(),t=[];t.push(this.container.events.on("git:cache:reset",e=>{(!e.data.repoPath||e.data.repoPath===this.path)&&(this.resetCaches(...e.data.caches??D),e.data.caches?.includes("providers")&&this.fireChange(102))}));let i=o.workspace.createFileSystemWatcher(new o.RelativePattern(this.uri,"**/.gitignore"));function r(i,r){w.YJ.debug(e,`watching '${i.toString(!0)}' for repository changes`);let s=o.workspace.createFileSystemWatcher(new o.RelativePattern(i,r));return t.push(s,s.onDidChange(e=>this.onRepositoryChanged(e,i)),s.onDidCreate(e=>this.onRepositoryChanged(e,i)),s.onDidDelete(e=>this.onRepositoryChanged(e,i))),s}t.push(i,i.onDidChange(this.onGitIgnoreChanged,this),i.onDidCreate(this.onGitIgnoreChanged,this),i.onDidDelete(this.onGitIgnoreChanged,this));let s=await this.getGitDir();return null!=s&&(s?.commonUri==null?r.call(this,s.uri,F):(r.call(this,s.uri,I),r.call(this,s.commonUri,T))),o.Disposable.from(...t)}dispose(){this.unWatchFileSystem(!0),this._disposable.dispose()}toString(){return`${(0,w.EZ)(this)}(${this.id})`}get virtual(){return this.provider.virtual}get path(){return this.uri.scheme===a.cl.File?(0,b.ay)(this.uri.fsPath):this.uri.toString()}get etag(){return this._updatedAt}_orderByLastFetched=!1;get orderByLastFetched(){return this._orderByLastFetched}_updatedAt=0;get updatedAt(){return this._updatedAt}onConfigurationChanged(e){u.i.changed(e,"sortRepositoriesBy")&&(this._orderByLastFetched=u.i.get("sortRepositoriesBy")?.startsWith("lastFetched:")??!1),null!=e&&u.i.changed(e,"remotes",this.folder?.uri)&&(this.resetCaches("remotes"),this.fireChange(5))}onFileSystemChanged(e){/\.git(?:\/|\\|$)/.test(e.fsPath)||(this._etagFileSystem=Date.now(),this.fireFileSystemChange(e))}onGitIgnoreChanged(e){this.fireChange(101)}onRepositoryChanged(e,t){if(e?.path.includes("/fsmonitor--daemon/"))return;this._lastFetched=void 0,this._orderByLastFetched&&this.getLastFetched();let i=null!=e?/(worktrees|index|HEAD|FETCH_HEAD|ORIG_HEAD|CHERRY_PICK_HEAD|MERGE_HEAD|REBASE_HEAD|rebase-merge|config|refs\/(?:heads|remotes|stash|tags))/.exec(this.container.git.getRelativePath(e,t)):void 0;if(null!=i)switch(i[1]){case"config":this.resetCaches(),this.fireChange(7,5);return;case"index":this.fireChange(0);return;case"FETCH_HEAD":return;case"HEAD":this.resetCaches("branches"),this.fireChange(1,2);return;case"ORIG_HEAD":case"refs/heads":this.resetCaches("branches"),this.fireChange(2);return;case"CHERRY_PICK_HEAD":this.fireChange(9,8);return;case"MERGE_HEAD":this.fireChange(10,8);return;case"REBASE_HEAD":case"rebase-merge":this.fireChange(11,8);return;case"refs/remotes":this.resetCaches(),this.fireChange(5);return;case"refs/stash":this.fireChange(4);return;case"refs/tags":this.fireChange(3);return;case"worktrees":this.fireChange(6);return}this.fireChange(-1)}_closed=!1;get closed(){return this._closed}set closed(e){let t=this._closed!==e;this._closed=e,t&&(w.YJ.debug(`Repository(${this.id}).closed(${e})`),this.fireChange(this._closed?100:104))}access(e){return this.container.git.access(e,this.uri)}supports(e){return this.container.git.supports(this.uri,e)}async addRemote(e,t,i){await this.container.git.addRemote(this.uri,e,t,i);let[r]=await this.getRemotes({filter:e=>e.url===t});return r}pruneRemote(e){return this.container.git.pruneRemote(this.uri,e)}removeRemote(e){return this.container.git.removeRemote(this.uri,e)}branch(...e){this.runTerminalCommand("branch",...e)}branchDelete(e,t){Array.isArray(e)||(e=[e]);let i=e.filter(e=>!e.remote);if(0!==i.length){let r=["--delete"];if(t?.force&&r.push("--force"),this.runTerminalCommand("branch",...r,...e.map(e=>e.ref)),t?.remote){let e=i.filter(e=>null!=e.upstream);if(0!==e.length)for(let[t,i]of(0,f.ms)(e,e=>(0,A.IB)(e.upstream.name)).entries())this.runTerminalCommand("push","-d",t,...i.map(e=>(0,A.ak)(e.upstream.name)))}}let r=e.filter(e=>e.remote);if(0!==r.length)for(let[e,t]of(0,f.ms)(r,e=>(0,A.IB)(e.name)).entries())this.runTerminalCommand("push","-d",e,...t.map(e=>(0,k._e)(e)))}cherryPick(...e){this.runTerminalCommand("cherry-pick",...e)}containsUri(e){return this===this.container.git.getRepository(e)}async fetch(e){let{progress:t,...i}={progress:!0,...e};return t?o.window.withProgress({location:o.ProgressLocation.Notification,title:null!=i.branch?`${i.pull?"Pulling":"Fetching"} ${i.branch.name}...`:`Fetching ${i.remote?`${i.remote} of `:""}${this.formattedName}...`},()=>this.fetchCore(i)):this.fetchCore(i)}async fetchCore(e){try{await this.container.git.fetch(this.uri,e),this.fireChange(-1)}catch(e){w.YJ.error(e),(0,l.qC)("Unable to fetch repository")}}async getBestRemoteWithIntegration(e){return this.container.git.getBestRemoteWithIntegration(this.uri,e)}async getBranch(e){if(e){let{values:[t]}=await this.getBranches({filter:t=>t.name===e});return t}return null==this._branch&&(this._branch=this.container.git.getBranch(this.uri)),this._branch}getBranches(e){return this.container.git.getBranches(this.uri,e)}getChangedFilesCount(e){return this.container.git.getChangedFilesCount(this.uri,e)}getCommit(e){return this.container.git.getCommit(this.uri,e)}getContributors(e){return this.container.git.getContributors(this.uri,e)}_gitDir;_gitDirPromise;getGitDir(){return null==this._gitDirPromise&&(this._gitDirPromise=this.container.git.getGitDir(this.uri).then(e=>this._gitDir=e)),this._gitDirPromise}_lastFetched;async getLastFetched(){let e=await this.container.git.getLastFetchedTimestamp(this.uri);return null!=e&&(this._lastFetched=e),this._lastFetched??0}async getMainRepository(){let e=await this.getGitDir();return e?.commonUri==null?this:this.container.git.getOrOpenRepository(e.commonUri,{detectNested:!1,force:!0,closeOnOpen:!0})}getMergeStatus(){return this.container.git.getMergeStatus(this.uri)}getRebaseStatus(){return this.container.git.getRebaseStatus(this.uri)}async getRemote(e){return(await this.getRemotes()).find(t=>t.name===e)}async getRemotes(e){let t=await this.container.git.getRemotes(this.uri,e?.sort!=null?{sort:e.sort}:void 0);return e?.filter!=null?t.filter(e.filter):t}getStash(){return this.container.git.getStash(this.uri)}getStatus(){return this.container.git.getStatusForRepo(this.uri)}async getTag(e){let{values:[t]}=await this.getTags({filter:t=>t.name===e});return t}getTags(e){return this.container.git.getTags(this.uri,e)}async createWorktree(e,t){await this.container.git.createWorktree(this.uri,e.fsPath,t);let i=e.toString();return this.container.git.getWorktree(this.uri,e=>e.uri.toString()===i)}getWorktrees(){return this.container.git.getWorktrees(this.uri)}async getWorktreesDefaultUri(){return this.container.git.getWorktreesDefaultUri(this.uri)}deleteWorktree(e,t){return this.container.git.deleteWorktree(this.uri,e.fsPath,t)}async hasRemotes(){let e=await this.getRemotes();return e?.length>0}async hasRemoteWithIntegration(e){let t=await this.getBestRemoteWithIntegration(e);return t?.provider!=null}async hasUpstreamBranch(){let e=await this.getBranch();return e?.upstream!=null}isMaybeWorktree(){if(null!=this._gitDir)return null!=this._gitDir.commonUri}async isWorktree(){return(await this.getGitDir())?.commonUri!=null}merge(...e){this.runTerminalCommand("merge",...e)}async pull(e){let{progress:t,...i}={progress:!0,...e};return t?o.window.withProgress({location:o.ProgressLocation.Notification,title:`Pulling ${this.formattedName}...`},()=>this.pullCore(i)):this.pullCore()}async pullCore(e){try{let t=u.i.getCore("git.pullTags",this.uri);u.i.getCore("git.fetchOnPull",this.uri)&&await this.container.git.fetch(this.uri),await this.container.git.pull(this.uri,{...e,tags:t}),this.fireChange(-1)}catch(e){w.YJ.error(e),(0,l.qC)("Unable to pull repository")}}async showCreatePullRequestPrompt(e,t){if(!this.container.actionRunners.count("createPullRequest")||!await (0,l.wN)(t.name))return;let i=await this.getRemote(e);(0,c.wb)("createPullRequest",{repoPath:this.path,remote:null!=i?{name:i.name,provider:null!=i.provider?{id:i.provider.id,name:i.provider.name,domain:i.provider.domain}:void 0,url:i.url}:{name:e},branch:{name:t.name,isRemote:t.remote,upstream:t.upstream?.name}})}async push(e){let{progress:t,...i}={progress:!0,...e};return t?o.window.withProgress({location:o.ProgressLocation.Notification,title:(0,k.MN)(i.reference)?`${null!=i.publish?"Publishing ":"Pushing "}${i.reference.name}...`:`Pushing ${this.formattedName}...`},()=>this.pushCore(i)):this.pushCore(i)}async pushCore(e){try{await this.container.git.push(this.uri,{reference:e?.reference,force:e?.force,publish:e?.publish}),(0,k.MN)(e?.reference)&&e?.publish!=null&&this.showCreatePullRequestPrompt(e.publish.remote,e.reference),this.fireChange(-1)}catch(e){w.YJ.error(e),(0,l.qC)("Unable to push repository")}}rebase(e,...t){this.runTerminalCommand(null!=e&&0!==e.length?`${e.join(" ")} rebase`:"rebase",...t)}reset(...e){this.runTerminalCommand("reset",...e)}resetCaches(...e){(0===e.length||e.includes("branches"))&&(this._branch=void 0)}resume(){this._suspended&&(this._suspended=!1,null!=this._pendingRepoChange&&this._fireChangeDebounced(),null!=this._pendingFileSystemChange&&this._fireFileSystemChangeDebounced?.())}revert(...e){this.runTerminalCommand("revert",...e)}richSearchCommits(e,t){return this.container.git.richSearchCommits(this.uri,e,t)}searchCommits(e,t){return this.container.git.searchCommits(this.uri,e,t)}async setRemoteAsDefault(e,t=!0){await this.container.storage.storeWorkspace("remote:default",t?e.name:void 0),this.fireChange(5,102)}get starred(){let e=this.container.storage.getWorkspace("starred:repositories");return null!=e&&!0===e[this.id]}star(e){return this.updateStarred(!0,e)}async stashApply(e,t){await this.container.git.stashApply(this.uri,e,t),this.fireChange(4)}async stashDelete(e,t){await this.container.git.stashDelete(this.uri,e,t),this.fireChange(4)}async stashRename(e,t,i,r){await this.container.git.stashRename(this.uri,e,t,i,r),this.fireChange(4)}async stashSave(e,t,i){await this.container.git.stashSave(this.uri,e,t,i),this.fireChange(4)}async stashSaveSnapshot(e){await this.container.git.stashSaveSnapshot(this.uri,e),this.fireChange(4)}async switch(e,t){let{progress:i,...r}={progress:!0,...t};return i?o.window.withProgress({location:o.ProgressLocation.Notification,title:`Switching ${this.formattedName} to ${e}...`,cancellable:!1},()=>this.switchCore(e,r)):this.switchCore(e,r)}async switchCore(e,t){try{await this.container.git.checkout(this.uri,e,t),this.fireChange(-1)}catch(e){w.YJ.error(e),(0,l.qC)("Unable to switch to reference")}}toAbsoluteUri(e,t){let i=this.container.git.getAbsoluteUri(e,this.uri);return!(t?.validate??!0)||this.containsUri(i)?i:void 0}unstar(e){return this.updateStarred(!1,e)}async updateStarred(e,t){null!=t?await this.updateStarredCore("branches",t.id,e):await this.updateStarredCore("repositories",this.id,e),this.fireChange(103)}async updateStarredCore(e,t,i){let r=`starred:${e}`,s=this.container.storage.getWorkspace(r);s=(0,y.Ks)(s,t,i),await this.container.storage.storeWorkspace(r,s),this.fireChange(103)}_etagFileSystem;get etagFileSystem(){return this._etagFileSystem}suspend(){this._suspended=!0}tag(...e){this.runTerminalCommand("tag",...e)}tagDelete(e){Array.isArray(e)||(e=[e]),this.runTerminalCommand("tag",...["--delete"],...e.map(e=>e.ref))}_fsWatcherDisposable;_fsWatchers=new Map;_fsChangeDelay=2500;watchFileSystem(e=2500){let t=(0,n.uq)();if(this._fsWatchers.set(t,e),null==this._fsWatcherDisposable){let e=o.workspace.createFileSystemWatcher(new o.RelativePattern(this.uri,"**"));this._fsWatcherDisposable=o.Disposable.from(e,e.onDidChange(this.onFileSystemChanged,this),e.onDidCreate(this.onFileSystemChanged,this),e.onDidDelete(this.onFileSystemChanged,this)),this._etagFileSystem=Date.now()}return this.ensureMinFileSystemChangeDelay(),{dispose:()=>this.unWatchFileSystem(t)}}unWatchFileSystem(e){if("boolean"!=typeof e&&(this._fsWatchers.delete(e),0!==this._fsWatchers.size)){this.ensureMinFileSystemChangeDelay();return}this._etagFileSystem=void 0,this._fsChangeDelay=2500,this._fsWatchers.clear(),this._fsWatcherDisposable?.dispose(),this._fsWatcherDisposable=void 0}ensureMinFileSystemChangeDelay(){let e=(0,f.SY)(this._fsWatchers.values());e!==this._fsChangeDelay&&(this._fsChangeDelay=e,this._fireFileSystemChangeDebounced?.flush(),this._fireFileSystemChangeDebounced?.cancel(),this._fireFileSystemChangeDebounced=void 0)}fireChange(...e){let t=(0,v.b1)();if(this._updatedAt=Date.now(),null==this._fireChangeDebounced&&(this._fireChangeDebounced=(0,m.Cu)(this.fireChangeCore.bind(this),250)),this._pendingRepoChange=this._pendingRepoChange?.with(e)??new RepositoryChangeEvent(this,e),this.onDidRepositoryChange(this,new RepositoryChangeEvent(this,e)),this._suspended){w.YJ.debug(t,`queueing suspended ${this._pendingRepoChange.toString(!0)}`);return}this._fireChangeDebounced()}fireChangeCore(){let e=this._pendingRepoChange;null!=e&&(this._pendingRepoChange=void 0,w.YJ.debug(`Repository(${this.id}) firing ${e.toString(!0)}`),this._onDidChange.fire(e))}fireFileSystemChange(e){let t=(0,v.b1)();this._updatedAt=Date.now(),null==this._fireFileSystemChangeDebounced&&(this._fireFileSystemChangeDebounced=(0,m.Cu)(this.fireFileSystemChangeCore.bind(this),this._fsChangeDelay)),null==this._pendingFileSystemChange&&(this._pendingFileSystemChange={repository:this,uris:[]});let i=this._pendingFileSystemChange;if(i.uris.push(e),this._suspended){w.YJ.debug(t,`queueing suspended fs changes=${i.uris.map(e=>e.fsPath).join(", ")}`);return}this._fireFileSystemChangeDebounced()}async fireFileSystemChangeCore(){let e=this._pendingFileSystemChange;if(null==e)return;this._pendingFileSystemChange=void 0;let t=await this.container.git.excludeIgnoredUris(this.uri,e.uris);0!==t.length&&(t.length!==e.uris.length&&(e={...e,uris:t}),w.YJ.debug(`Repository(${this.id}) firing fs changes=${e.uris.map(e=>e.fsPath).join(", ")}`),this._onDidChangeFileSystem.fire(e))}async runTerminalCommand(e,...t){await this.container.git.runGitCommandViaTerminal?.(this.uri,e,t,{execute:!0}),setTimeout(()=>this.fireChange(-1),2500)}};function B(e){return e instanceof E}R([(0,g.u_)({singleLine:!0})],E.prototype,"setupRepoWatchersCore",1),R([(0,g.u_)()],E.prototype,"onGitIgnoreChanged",1),R([(0,g.u_)()],E.prototype,"onRepositoryChanged",1),R([(0,g.Yz)()],E.prototype,"access",1),R([(0,g.Yz)()],E.prototype,"supports",1),R([(0,g.Yz)()],E.prototype,"addRemote",1),R([(0,g.Yz)()],E.prototype,"pruneRemote",1),R([(0,g.Yz)()],E.prototype,"removeRemote",1),R([(0,g.Yz)()],E.prototype,"branch",1),R([(0,g.Yz)()],E.prototype,"branchDelete",1),R([(0,g.Yz)()],E.prototype,"cherryPick",1),R([(0,p.I)(),(0,g.Yz)()],E.prototype,"fetch",1),R([(0,p.I)()],E.prototype,"getLastFetched",1),R([(0,p.I)(),(0,g.Yz)({exit:!0})],E.prototype,"getMainRepository",1),R([(0,g.Yz)()],E.prototype,"createWorktree",1),R([(0,g.Yz)()],E.prototype,"merge",1),R([(0,p.I)(),(0,g.Yz)()],E.prototype,"pull",1),R([(0,p.I)(),(0,g.Yz)()],E.prototype,"push",1),R([(0,g.Yz)()],E.prototype,"rebase",1),R([(0,g.Yz)()],E.prototype,"reset",1),R([(0,g.Yz)({singleLine:!0})],E.prototype,"resetCaches",1),R([(0,g.Yz)()],E.prototype,"revert",1),R([(0,g.u_)()],E.prototype,"richSearchCommits",1),R([(0,g.u_)()],E.prototype,"searchCommits",1),R([(0,p.I)(),(0,g.Yz)()],E.prototype,"stashApply",1),R([(0,p.I)(),(0,g.Yz)()],E.prototype,"stashDelete",1),R([(0,p.I)(),(0,g.Yz)()],E.prototype,"stashRename",1),R([(0,p.I)(),(0,g.Yz)()],E.prototype,"stashSave",1),R([(0,p.I)(),(0,g.Yz)()],E.prototype,"stashSaveSnapshot",1),R([(0,p.I)(),(0,g.Yz)()],E.prototype,"switch",1),R([(0,g.Yz)()],E.prototype,"tag",1),R([(0,g.Yz)()],E.prototype,"tagDelete",1),R([(0,g.u_)()],E.prototype,"fireChange",1),R([(0,g.u_)()],E.prototype,"fireFileSystemChange",1),E=R([(0,g.WE)((e,t)=>`${t}(${e.id})`)],E)},3216:(e,t,i)=>{i.d(t,{Af:()=>g,Go:()=>GitStatusFile,kL:()=>GitStatus});var r=i(1608),s=i(9964),o=i(5019),n=i(1072),a=i(2452),l=i(1080),h=i(2060),c=i(7280),u=Object.defineProperty,d=Object.getOwnPropertyDescriptor,p=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?d(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&u(t,i,o),o};let GitStatus=class GitStatus{constructor(e,t,i,r,s,o,n=!1){this.repoPath=e,this.branch=t,this.sha=i,this.files=r,this.state=s,this.upstream=o,this.rebasing=n,this.detached=(0,a.Os)(t),this.detached&&(this.branch=(0,a.qe)(this.sha))}detached;get conflicts(){return this.files.filter(e=>e.conflicted)}get hasChanges(){return 0!==this.files.length}get hasConflicts(){return this.files.some(e=>e.conflicted)}get ref(){return this.detached?this.sha:this.branch}computeWorkingTreeStatus(){let e=0,t=0,i=0,r=0,s=0,o=0,n=0,a=0,l=0,h=[],u=[],d=[];for(let p of this.files){switch(p.conflictStatus){case void 0:break;case c.yK.AddedByBoth:case c.yK.AddedByUs:case c.yK.AddedByThem:e++,u.push(p);break;case c.yK.DeletedByBoth:case c.yK.DeletedByUs:case c.yK.DeletedByThem:t++;break;default:i++,h.push(p)}switch(p.indexStatus){case void 0:break;case c.fX.Added:r++,u.push(p);break;case c.fX.Deleted:a++;break;default:o++,u.push(p)}switch(p.workingTreeStatus){case void 0:case c._y.Ignored:break;case c._y.Added:case c._y.Untracked:s++,d.push(p);break;case c._y.Deleted:l++;break;default:n++,d.push(p)}}let p=e+i+t,g=r+o+a,m=s+n+l;return{conflicted:p,conflictedAddsAndChanges:h,conflictedStatus:p>0?`+${e} ~${i} -${t}`:"",staged:g,stagedStatus:g>0?`+${r} ~${o} -${a}`:"",stagedAddsAndChanges:u,unstaged:m,unstagedStatus:m>0?`+${s} ~${n} -${l}`:"",unstagedAddsAndChanges:d}}getDiffStatus(){let e={added:0,deleted:0,changed:0};if(0===this.files.length)return e;for(let t of this.files)switch(t.status){case"A":case"?":e.added++;break;case"D":e.deleted++;break;default:e.changed++}return e}getFormattedDiffStatus({compact:e,empty:t,expand:i,prefix:r="",separator:s=" ",suffix:o=""}={}){let{added:a,changed:l,deleted:h}=this.getDiffStatus();if(0===a&&0===l&&0===h)return t??"";if(i){let e="";return a&&(e+=`${(0,n.u)("file",a)} added`),l&&(e+=`${0===e.length?"":s}${(0,n.u)("file",l)} changed`),h&&(e+=`${0===e.length?"":s}${(0,n.u)("file",h)} deleted`),`${r}${e}${o}`}let c="";return e?(0!==a&&(c+=`+${a}`),0!==l&&(c+=`${0===c.length?"":s}~${l}`),0!==h&&(c+=`${0===c.length?"":s}-${h}`)):c+=`+${a}${s}~${l}${s}-${h}`,`${r}${c}${o}`}async getRemote(){if(null==this.upstream)return;let e=await s.Container.instance.git.getRemotesWithProviders(this.repoPath);if(0===e.length)return;let t=(0,a.IB)(this.upstream);return e.find(e=>e.name===t)}getUpstreamStatus(e){return g(this.upstream?{name:this.upstream,missing:!1}:void 0,this.state,e)}};function g(e,t,i){let s=!0,o=!1,a=!1,l="",h=" ",c="";if(null!=i&&({count:s=!0,expand:o=!1,icons:a=!1,prefix:l="",separator:h=" ",suffix:c=""}=i),null==e||0===t.behind&&0===t.ahead)return i?.empty??"";if(o){let i="";return e.missing?i="missing":(t.behind&&(i+=`${(0,n.u)("commit",t.behind,{infix:a?"$(arrow-down) ":void 0})} behind`),t.ahead&&(i+=`${0===i.length?"":h}${(0,n.u)("commit",t.ahead,{infix:a?"$(arrow-up) ":void 0})} ahead`,c.startsWith(` ${e.name.split("/")[0]}`)&&(i+=" of"))),`${l}${i}${c}`}let u=s&&!e.missing;return`${l}${u?t.behind:""}${u||0!==t.behind?r.or.ArrowDown:""}${h}${u?t.ahead:""}${u||0!==t.ahead?r.or.ArrowUp:""}${c}`}p([(0,o.s)()],GitStatus.prototype,"conflicts",1),p([(0,o.s)()],GitStatus.prototype,"hasConflicts",1),p([(0,o.s)()],GitStatus.prototype,"computeWorkingTreeStatus",1),p([(0,o.s)()],GitStatus.prototype,"getDiffStatus",1),p([(0,o.s)()],GitStatus.prototype,"getRemote",1);let GitStatusFile=class GitStatusFile{constructor(e,t,i,r,s){if(this.repoPath=e,this.path=r,this.originalPath=s,null!=t&&null!=i)switch(t+i){case"??":this.workingTreeStatus=c._y.Untracked;break;case"!!":this.workingTreeStatus=c._y.Ignored;break;case"AA":this.conflictStatus=c.yK.AddedByBoth;break;case"AU":this.conflictStatus=c.yK.AddedByUs;break;case"UA":this.conflictStatus=c.yK.AddedByThem;break;case"DD":this.conflictStatus=c.yK.DeletedByBoth;break;case"DU":this.conflictStatus=c.yK.DeletedByUs;break;case"UD":this.conflictStatus=c.yK.DeletedByThem;break;case"UU":this.conflictStatus=c.yK.ModifiedByBoth}if(null==this.conflictStatus){switch(t){case"A":this.indexStatus=c.fX.Added;break;case"D":this.indexStatus=c.fX.Deleted;break;case"M":this.indexStatus=c.fX.Modified;break;case"R":this.indexStatus=c.fX.Renamed;break;case"C":this.indexStatus=c.fX.Copied}switch(i){case"A":this.workingTreeStatus=c._y.Added;break;case"D":this.workingTreeStatus=c._y.Deleted;break;case"M":this.workingTreeStatus=c._y.Modified}}}conflictStatus;indexStatus;workingTreeStatus;get conflicted(){return null!=this.conflictStatus}get staged(){return null!=this.indexStatus}get status(){return this.conflictStatus??this.indexStatus??this.workingTreeStatus}get uri(){return s.Container.instance.git.getAbsoluteUri(this.path,this.repoPath)}get wip(){return null!=this.workingTreeStatus}getFormattedDirectory(e=!1){return(0,c.W)(this,e)}getFormattedPath(e={}){return(0,c.uY)(this,e)}getStatusText(){return(0,c.Iz)(this.status)}getPseudoCommits(e,t){let i=new Date;if(this.conflicted){let r=new c.Gm(this.repoPath,this.path,this.status,this.originalPath,"HEAD",void 0,!1);return[new l.Ck(e,this.repoPath,h.Oy,new l.Sg("You",t?.email??void 0,i),new l.Sg("You",t?.email??void 0,i),"Uncommitted changes",["HEAD"],"Uncommitted changes",{file:r,files:[r]},void 0,[])]}let r=[],s=this.staged;if(this.wip){let o=s?h.QD:"HEAD",n=new c.Gm(this.repoPath,this.path,this.status,this.originalPath,o,void 0,!1);r.push(new l.Ck(e,this.repoPath,h.Oy,new l.Sg("You",t?.email??void 0,i),new l.Sg("You",t?.email??void 0,i),"Uncommitted changes",[o],"Uncommitted changes",{file:n,files:[n]},void 0,[])),i.setMilliseconds(i.getMilliseconds()-1)}if(s){let s=new c.Gm(this.repoPath,this.path,this.status,this.originalPath,"HEAD",void 0,!0);r.push(new l.Ck(e,this.repoPath,h.QD,new l.Sg("You",t?.email??void 0,i),new l.Sg("You",t?.email??void 0,i),"Uncommitted changes",["HEAD"],"Uncommitted changes",{file:s,files:[s]},void 0,[]))}return r}getPseudoFileChanges(){if(this.conflicted)return[new c.Gm(this.repoPath,this.path,this.status,this.originalPath,"HEAD",void 0,!1)];let e=[],t=this.staged;return this.wip&&e.push(new c.Gm(this.repoPath,this.path,this.status,this.originalPath,t?h.QD:"HEAD",void 0,!1)),t&&e.push(new c.Gm(this.repoPath,this.path,this.status,this.originalPath,"HEAD",void 0,!0)),e}};p([(0,o.s)()],GitStatusFile.prototype,"status",1),p([(0,o.s)()],GitStatusFile.prototype,"uri",1)},6192:(e,t,i)=>{i.d(t,{Gs:()=>d,K8:()=>p,WU:()=>GitTag,sD:()=>g});var r=i(9964),s=i(4169),o=i(6944),n=i(5019),a=i(6448),l=i(1072),h=Object.defineProperty,c=Object.getOwnPropertyDescriptor,u=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?c(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&h(t,i,o),o};function d(e,t){return`${e}|tag/${t}`}let GitTag=class GitTag{constructor(e,t,i,r,s,o){this.repoPath=e,this.name=t,this.sha=i,this.message=r,this.date=s,this.commitDate=o,this.id=d(e,t)}refType="tag";id;toString(){return`${(0,a.EZ)(this)}(${this.id})`}get formattedDate(){return"absolute"===r.Container.instance.TagDateFormatting.dateStyle?this.formatDate(r.Container.instance.TagDateFormatting.dateFormat):this.formatDateFromNow()}get ref(){return this.name}formatCommitDate(e){return null!=this.commitDate?(0,o._m)(this.commitDate,e??"MMMM Do, YYYY h:mma"):""}formatCommitDateFromNow(){return null!=this.commitDate?(0,o.Yn)(this.commitDate):""}formatDate(e){return null!=this.date?(0,o._m)(this.date,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(){return null!=this.date?(0,o.Yn)(this.date):""}getBasename(){let e=this.name.lastIndexOf("/");return -1!==e?this.name.substring(e+1):this.name}};function p(e){return e instanceof GitTag}function g(e,t){switch((t={orderBy:s.i.get("sortTagsBy"),...t}).orderBy){case"date:asc":return e.sort((e,t)=>(e.date?.getTime()??0)-(t.date?.getTime()??0));case"name:asc":return e.sort((e,t)=>(0,l.sd)(e.name,t.name));case"name:desc":return e.sort((e,t)=>(0,l.sd)(t.name,e.name));default:return e.sort((e,t)=>(t.date?.getTime()??0)-(e.date?.getTime()??0))}}u([(0,n.s)(e=>e??"MMMM Do, YYYY h:mma")],GitTag.prototype,"formatCommitDate",1),u([(0,n.s)(e=>e??"MMMM Do, YYYY h:mma")],GitTag.prototype,"formatDate",1),u([(0,n.s)()],GitTag.prototype,"getBasename",1)},668:(e,t,i)=>{function r(e,t,i,r){return null!=e&&(null!=e.name||null!=e.email||null!=e.username)&&(null==e.name||e.name===t)&&(null==e.email||e.email===i)&&(null==e.username||e.username===r)}i.d(t,{a:()=>r})},7840:(e,t,i)=>{i.d(t,{Q:()=>p,i:()=>g});var r=i(7304),s=i(9964),o=i(5019),n=i(972),a=i(3732),l=i(1424),h=Object.defineProperty,c=Object.getOwnPropertyDescriptor,u=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?c(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&h(t,i,o),o};let d=class _GitWorktree{constructor(e,t,i,r,s,o,n,a){this.main=e,this.type=t,this.repoPath=i,this.uri=r,this.locked=s,this.prunable=o,this.sha=n,this.branch=a}static is(e){return e instanceof _GitWorktree}get opened(){return this.workspaceFolder?.uri.toString()===this.uri.toString()}get name(){switch(this.type){case"bare":return"(bare)";case"detached":return(0,l.c5)(this.sha);default:return this.branch||this.friendlyPath}}get friendlyPath(){return _GitWorktree.getFriendlyPath(this.uri)}get workspaceFolder(){return r.workspace.getWorkspaceFolder(this.uri)}_branch;getBranch(){return"branch"!==this.type||null==this.branch?Promise.resolve(void 0):(null==this._branch&&(this._branch=s.Container.instance.git.getBranches(this.repoPath,{filter:e=>e.name===this.branch}).then(e=>e.values[0])),this._branch)}_status;getStatus(e){return"bare"===this.type?Promise.resolve(void 0):((null==this._status||e?.force)&&(this._status=s.Container.instance.git.getStatusForRepo(this.uri.fsPath)),this._status)}static getFriendlyPath(e){let t=r.workspace.getWorkspaceFolder(e);if(null==t)return(0,a.ay)(e.fsPath);let i=(0,a.ay)((0,a.U3)(t.uri.fsPath,e.fsPath));return 0===i.length?t.name:i}};u([(0,o.s)()],d.prototype,"friendlyPath",1),u([(0,o.s)()],d.prototype,"workspaceFolder",1);let p=d;async function g(e,t,i,r,s){for(let o of(null==i||Array.isArray(i)||(i=[i]),r??=await e.getWorktrees())){if(o.branch===t)return o;if(null!=i&&null!=o.branch){for await(let t of(s??=new n.c(t=>e.getBranches(null!=t?{paging:t}:void 0))).values())if(t.name===o.branch){if(t.upstream?.name!=null&&(i.includes(t.upstream.name)||t.upstream.name.startsWith("remotes/")&&i.includes(t.upstream.name.substring(8))))return o;break}}}}},7620:(e,t,i)=>{i.d(t,{Ud:()=>u,wT:()=>c,wv:()=>h});var r=i(6088),s=i(2152),o=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),n=(e,t,i)=>{if(null!=t){var r;if("object"!=typeof t&&"function"!=typeof t)throw TypeError("Object expected");if(i&&(r=t[o("asyncDispose")]),void 0===r&&(r=t[o("dispose")]),"function"!=typeof r)throw TypeError("Object not disposable");e.push([i,r,t])}else i&&e.push([i]);return t},a=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let l=/^(.*)\t(.*)\s\((.*)\)$/gm;function h(e,t,i,o){var h=[];try{let a,c,d,p,g,m,f,w;let v=n(h,(0,r.i)(`Git.parseRemotes(${i})`,{log:!1,logLevel:"debug"}));if(!t)return[];let y=new Map;for(;w=l.exec(t),null!=w;)if([,a,c,d]=w,a=` ${a}`.substr(1),c=` ${c}`.substr(1),d=` ${d}`.substr(1),[p,g,m]=u(c),f=y.get(a),null==f)f=new s.ML(e,i,a,p,g,m,o(c,g,m),[{url:c,type:d}]),y.set(a,f);else{if(f.urls.push({url:c,type:d}),null!=f.provider&&"push"!==d)continue;let t=o(c,g,m);if(null==t)continue;f=new s.ML(e,i,a,p,g,m,t,f.urls),y.set(a,f)}return v?.stop({suffix:` parsed ${y.size} remotes`}),[...y.values()]}catch(e){var c=e,d=!0}finally{a(h,c,d)}}let c=/^(?:(git:\/\/)(.*?)\/|(https?:\/\/)(?:.*?@)?(.*?)\/|git@(.*):|(ssh:\/\/)(?:.*@)?(.*?)(?::.*?)?(?:\/|(?=~))|(?:.*?@)(.*?):)(.*)$/;function u(e){let t=c.exec(e);return null==t?["","",e]:[t[1]||t[3]||t[6],t[2]||t[4]||t[5]||t[7]||t[8],t[9].replace(/\.git\/?$/,"")]}},1820:(e,t,i)=>{i.d(t,{S:()=>v,Y:()=>GitHubRemote});var r=i(7304),s=i(1608),o=i(6944),n=i(5019),a=i(1408),l=i(1072),h=i(7956),c=i(1424),u=i(1848),d=Object.defineProperty,p=Object.getOwnPropertyDescriptor;let g=/\b([^/\s]+\/[^/\s]+?)(?:\\)?#([0-9]+)\b(?!]\()/g,m=/^\/([^/]+)\/([^/]+?)\/blob(.+)$/i,f=/^L(\d+)(?:-L(\d+))?$/;let GitHubRemote=class GitHubRemote extends u.k{constructor(e,t,i,r,s=!1){super(e,t,i,r,s)}get apiBaseUrl(){return this.custom?`${this.protocol}://${this.domain}/api/v3`:`https://api.${this.domain}`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"#",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue or Pull Request #<num> on ${this.name}`,description:`${this.name} Issue or Pull Request #<num>`},{prefix:"gh-",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue or Pull Request #<num> on ${this.name}`,ignoreCase:!0,description:`${this.name} Issue or Pull Request #<num>`},{tokenize:(e,t,i,r,n,c)=>"plaintext"===t?e:e.replace(g,(e,u,d)=>{let p;let g=(0,a.o)(`${this.protocol}://${this.domain}/${(0,l.mg)(u)}/issues/${d}`),m=` "Open Issue or Pull Request #${d} from ${u} on ${this.name}"`,f=`\0${i.size}\0`;"markdown"===t?i.set(f,`[${e}](${g}${m})`):"html"===t&&i.set(f,`<a href="${g}" title=${m}>${e}</a>`);let w=r?.get(d)?.[0];if(w?.value!=null){if(w.paused)null==c||n?.has(d)||(p=c.size+1,c.set(p,`[${(0,h.eV)()} ${this.name} Issue or Pull Request ${u}#${d} $(loading~spin)](${g}${m}")`));else{let t=w.value,i=(0,l.Ed)(t.title.trim());null==c||n?.has(d)||(p=c.size+1,c.set(p,`[${(0,h.eV)(t)} **${i}**](${g}${m})\\
${s.or.Space.repeat(5)}${e} ${t.state} ${(0,o.Yn)(t.closedDate??t.date)}`))}}else null==c||n?.has(d)||(p=c.size+1,c.set(p,`[${(0,h.eV)()} ${this.name} Issue or Pull Request ${u}#${d}](${g}${m})`));return f}),parse:(e,t)=>{let i,r,s;for(;null!=(s=g.exec(e));){[,i,r]=s;let[e,o]=i.split("/",2);t.set(r,{provider:this,id:r,prefix:`${i}#`,url:`${this.protocol}://${this.domain}/${i}/issues/${r}`,title:`Open Issue or Pull Request #<num> from ${i} on ${this.name}`,description:`${this.name} Issue or Pull Request ${i}#${r}`,descriptor:{key:this.remoteKey,owner:e,name:o}})}}}]),this._autolinks}get avatarUri(){let[e]=this.splitPath();return r.Uri.parse(`https://avatars.githubusercontent.com/${e}`)}get icon(){return"github"}get id(){return"github"}get gkProviderId(){var e;return(e=this.domain,(0,l.RJ)(e,"github.com"))?"github":"githubEnterprise"}get name(){return this.formatName("GitHub")}get repoDesc(){let[e,t]=this.splitPath();return{key:this.remoteKey,owner:e,name:t}}async getLocalInfoFromRemoteUri(e,t,i){let r,s,o;if(t.authority!==this.domain||(i?.validate??!0)&&!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=f.exec(t.fragment);if(null!=e){let[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}let n=m.exec(t.path);if(null==n)return;let[,,,a]=n,l=a.indexOf("/",1);if(-1!==l){let t=a.substring(1,l);if((0,c.kp)(t)){let t=e.toAbsoluteUri(a.substr(l),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:s}}}let h=new Map;l=a.length;do l=a.lastIndexOf("/",l-1),o=a.substring(1,l),h.set(o,a.substr(l));while(l>0)if(0!==h.size){let{values:t}=await e.getBranches({filter:e=>e.remote&&h.has(e.getNameWithoutRemote())});for(let o of t){let t=h.get(o.getNameWithoutRemote());if(null==t)continue;let n=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=n)return{uri:n,startLine:r,endLine:s}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/tree/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/compare/${e}${i}${t}`)}getUrlForCreatePullRequest(e,t){if(e.remote.url===t.remote.url)return this.encodeUrl(`${this.baseUrl}/pull/new/${e.branch??"HEAD"}...${t.branch}`);let[i]=t.remote.path.split("/",1);return this.encodeUrl(`${this.baseUrl}/pull/new/${e.branch??"HEAD"}...${i}:${t.branch}`)}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`#L${r.start.line}`:`#L${r.start.line}-L${r.end.line}`:"",i)?`${this.encodeUrl(`${this.baseUrl}/blob/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/blob/${t}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}?path=${e}`)}${s}`}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?p(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&d(t,i,o)})([(0,n.s)()],GitHubRemote.prototype,"repoDesc",1);let w=/^(?:(\d+)\+)?([a-zA-Z\d-]{1,39})@users\.noreply\.(.*)$/i;function v(e){let t=w.exec(e);if(null==t)return;let[,i,r,s]=t;return{userId:i,login:r,authority:s}}},1848:(e,t,i)=>{i.d(t,{k:()=>RemoteProvider});var r=i(7304),s=i(5019),o=i(1408),n=i(3284),a=i(2036),l=Object.defineProperty,h=Object.getOwnPropertyDescriptor;let RemoteProvider=class RemoteProvider{constructor(e,t,i="https",r,s=!1){this.domain=e,this.path=t,this.protocol=i,this.custom=s,this._name=r}_name;get autolinks(){return[]}get avatarUri(){}get displayPath(){return this.path}get icon(){return"remote"}get owner(){return this.splitPath()[0]}get remoteKey(){return this.domain?`${this.domain}/${this.path}`:this.path}get repoDesc(){return{owner:this.owner,name:this.repoName}}get repoName(){return this.splitPath()[1]}async copy(e){let t=this.url(e);null!=t&&await r.env.clipboard.writeText(t)}open(e){return(0,n.GS)(this.url(e))}url(e){switch(e.type){case a.o.Branch:return this.getUrlForBranch(e.branch);case a.o.Branches:return this.getUrlForBranches();case a.o.Commit:return this.getUrlForCommit(e.sha);case a.o.Comparison:return this.getUrlForComparison?.(e.base,e.compare,e.notation??"...");case a.o.CreatePullRequest:return this.getUrlForCreatePullRequest?.(e.base,e.compare);case a.o.File:return this.getUrlForFile(e.fileName,null!=e.branchOrTag?e.branchOrTag:void 0,void 0,e.range);case a.o.Repo:return this.getUrlForRepository();case a.o.Revision:return this.getUrlForFile(e.fileName,null!=e.branchOrTag?e.branchOrTag:void 0,null!=e.sha?e.sha:void 0,e.range);default:return}}get baseUrl(){return`${this.protocol}://${this.domain}/${this.path}`}formatName(e){return null!=this._name?this._name:`${e}${this.custom?` (${this.domain})`:""}`}splitPath(){let e=this.path.indexOf("/");return[this.path.substring(0,e),this.path.substring(e+1)]}getUrlForRepository(){return this.baseUrl}encodeUrl(e){return o.o(e)?.replace(/#/g,"%23")}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?h(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&l(t,i,o)})([(0,s.s)()],RemoteProvider.prototype,"remoteKey",1)},6116:(e,t,i)=>{i.d(t,{k:()=>U,A:()=>B});var r=i(4169),s=i(6448),o=i(1848);let n=/\/_git\/?/i,a=/^DefaultCollection\//i,l=/^(.*?)\/(.*?)\/(.*)/,h=/^(ssh|vs-ssh)\./i,c=/^\/?v\d\//i,u=/path=([^&]+)/i,d=/line=(\d+)(?:&lineEnd=(\d+))?/;let AzureDevOpsRemote=class AzureDevOpsRemote extends o.k{constructor(e,t,i,r,s=!1){if(h.test(e)){t=t.replace(c,""),e=e.replace(h,"");let i=l.exec(t);if(null!=i){let[,r,o,n]=i;s?(e=`${r}.${e}`,t=`${o}/_git/${n}`):t=`${r}/${o}/_git/${n}`}}super(e,t=decodeURIComponent(t),i,r)}_autolinks;get autolinks(){if(void 0===this._autolinks){let e=this.baseUrl.replace(n,"/");this._autolinks=[{prefix:"#",url:`${e}/_workitems/edit/<num>`,title:`Open Work Item #<num> on ${this.name}`,type:"issue",description:`${this.name} Work Item #<num>`},{prefix:"PR ",url:`${this.baseUrl}/pullrequest/<num>`,title:`Open Pull Request #<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Pull Request #<num>`}]}return this._autolinks}get icon(){return"azdo"}get id(){return"azure-devops"}get gkProviderId(){return"azureDevops"}get name(){return"Azure DevOps"}_displayPath;get displayPath(){return void 0===this._displayPath&&(this._displayPath=this.path.replace(n,"/").replace(a,"")),this._displayPath}async getLocalInfoFromRemoteUri(e,t,i){let r,s;if(t.authority!==this.domain)return Promise.resolve(void 0);if(t.query){let e=d.exec(t.query);if(null!=e){let[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}let o=u.exec(t.query);if(null==o)return Promise.resolve(void 0);let[,n]=o,a=e.toAbsoluteUri(n,{validate:i?.validate});return Promise.resolve(null!=a?{uri:a,startLine:r,endLine:s}:void 0)}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/?version=GB${e}&_a=history`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/branchCompare?baseVersion=GB${e}&targetVersion=GB${t}`)}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`&line=${r.start.line}&lineStartColumn=${r.start.character+1}&lineEndColumn=${r.end.character+1}`:`&line=${r.start.line}&lineEnd=${r.end.line}&lineStartColumn=${r.start.character+1}&lineEndColumn=${r.end.character+1}`:"",i)?this.encodeUrl(`${this.baseUrl}?path=${e}&version=GC${i}${s}&_a=contents`):t?this.encodeUrl(`${this.baseUrl}/?path=/${e}&version=GB${t}&_a=contents${s}`):this.encodeUrl(`${this.baseUrl}?path=/${e}${s}`)}};var p=i(1424);let g=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,m=/^lines-(\d+)(?::(\d+))?$/;let BitbucketRemote=class BitbucketRemote extends o.k{constructor(e,t,i,r,s=!1){super(e,t,i,r,s)}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"issue #",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`},{prefix:"pull request #",url:`${this.baseUrl}/pull-requests/<num>`,title:`Open Pull Request #<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Pull Request #<num>`}]),this._autolinks}get icon(){return"bitbucket"}get id(){return"bitbucket"}get gkProviderId(){return"bitbucket"}get name(){return this.formatName("Bitbucket")}async getLocalInfoFromRemoteUri(e,t,i){let r,s,o;if(t.authority!==this.domain||(i?.validate??!0)&&!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=m.exec(t.fragment);if(null!=e){let[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}let n=g.exec(t.path);if(null==n)return;let[,,,a]=n,l=a.indexOf("/",1);if(-1!==l){let t=a.substring(1,l);if((0,p.kp)(t)){let t=e.toAbsoluteUri(a.substr(l),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:s}}}let h=new Map;l=a.length;do l=a.lastIndexOf("/",l-1),o=a.substring(1,l),h.set(o,a.substr(l));while(l>0)if(0!==h.size){let{values:t}=await e.getBranches({filter:e=>e.remote&&h.has(e.getNameWithoutRemote())});for(let o of t){let t=h.get(o.getNameWithoutRemote());if(null==t)continue;let n=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=n)return{uri:n,startLine:r,endLine:s}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/branch/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commits/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/branches/compare/${e}%0D${t}`).replace("%250D","%0D")}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`#${e}-${r.start.line}`:`#${e}-${r.start.line}:${r.end.line}`:"",i)?`${this.encodeUrl(`${this.baseUrl}/src/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/src/${t}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}?path=${e}`)}${s}`}};let f=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,w=/^lines-(\d+)(?::(\d+))?$/;let BitbucketServerRemote=class BitbucketServerRemote extends o.k{constructor(e,t,i,r,s=!1){super(e,t,i,r,s)}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"issue #",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`},{prefix:"pull request #",ignoreCase:!0,url:`${this.baseUrl}/pull-requests/<num>`,title:`Open Pull Request #<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Pull Request #<num>`}]),this._autolinks}get baseUrl(){let[e,t]=this.splitPath();return`${this.protocol}://${this.domain}/projects/${e}/repos/${t}`}splitPath(){if(this.path.startsWith("scm/")){let e=this.path.replace("scm/","").indexOf("/");return[this.path.substring(0,e),this.path.substring(e+1)]}return super.splitPath()}get icon(){return"bitbucket"}get id(){return"bitbucket-server"}get gkProviderId(){return"bitbucketServer"}get name(){return this.formatName("Bitbucket Server")}async getLocalInfoFromRemoteUri(e,t,i){let r,s,o;if(t.authority!==this.domain||(i?.validate??!0)&&!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=w.exec(t.fragment);if(null!=e){let[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}let n=f.exec(t.path);if(null==n)return;let[,,,a]=n,l=a.indexOf("/",1);if(-1!==l){let t=a.substring(1,l);if((0,p.kp)(t)){let t=e.toAbsoluteUri(a.substr(l),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:s}}}let h=new Map;l=a.length;do l=a.lastIndexOf("/",l-1),o=a.substring(1,l),h.set(o,a.substr(l));while(l>0)if(0!==h.size){let{values:t}=await e.getBranches({filter:e=>e.remote&&h.has(e.getNameWithoutRemote())});for(let o of t){let t=h.get(o.getNameWithoutRemote());if(null==t)continue;let n=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=n)return{uri:n,startLine:r,endLine:s}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/commits?until=${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commits/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/branches/compare/${e}%0D${t}`).replace("%250D","%0D")}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`#${r.start.line}`:`#${r.start.line}-${r.end.line}`:"",i)?`${this.encodeUrl(`${this.baseUrl}/browse/${e}?at=${i}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/browse/${e}?at=${t}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}/browse/${e}`)}${s}`}};var v=i(1072);let CustomRemote=class CustomRemote extends o.k{urls;constructor(e,t,i,r,s){super(e,t,r,s,!0),this.urls=i}get id(){return"custom"}get gkProviderId(){}get name(){return this.formatName("Custom")}getLocalInfoFromRemoteUri(e,t){return Promise.resolve(void 0)}getUrlForRepository(){return this.getUrl(this.urls.repository,this.getContext())}getUrlForBranches(){return this.getUrl(this.urls.branches,this.getContext())}getUrlForBranch(e){return this.getUrl(this.urls.branch,this.getContext({branch:e}))}getUrlForCommit(e){return this.getUrl(this.urls.commit,this.getContext({id:e}))}getUrlForComparison(e,t,i){if(null!=this.urls.comparison)return this.getUrl(this.urls.comparison,this.getContext({ref1:e,ref2:t,notation:i}))}getUrlForFile(e,t,i,r){let s,o,n;s=null!=r?r.start.line===r.end.line?(0,v.qy)(this.urls.fileLine,{line:r.start.line,line_encoded:r.start.line}):(0,v.qy)(this.urls.fileRange,{start:r.start.line,start_encoded:r.start.line,end:r.end.line,end_encoded:r.end.line}):"",i?(o=this.urls.fileInCommit,n=this.getContext({id:i,file:e,line:s})):t?(o=this.urls.fileInBranch,n=this.getContext({branch:t,file:e,line:s})):(o=this.urls.file,n=this.getContext({file:e,line:s}));let a=(0,v.qy)(o,n);if((0,v.c5)(o).some(e=>e.key.endsWith("_encoded")))return a;let l=a.includes("#");if(a=this.encodeUrl(a),l){let e=a.lastIndexOf("%23");-1!==e&&(a=`${a.substring(0,e)}#${a.substring(e+3)}`)}return a}getUrl(e,t){let i=(0,v.qy)(e,t);return(0,v.c5)(e).some(e=>e.key.endsWith("_encoded"))?i:this.encodeUrl(i)}getContext(e){let[t,i]=this.splitPath(),r={repo:this.path,repoBase:t,repoPath:i,...e};for(let[e,t]of Object.entries(r))r[`${e}_encoded`]=encodeURIComponent(t);return r}};let y=/^\/([^/]+)\/\+(.+)$/i,b=/^(\d+)$/;let GerritRemote=class GerritRemote extends o.k{constructor(e,t,i,r,s=!1,o=!0){o&&"ssh"!==i&&(t=t.replace(/^a\//,"")),super(e,t,i,r,s)}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"Change-Id: ",url:`${this.baseReviewUrl}/q/<num>`,title:`Open Change #<num> on ${this.name}`,alphanumeric:!0,description:`${this.name} Change #<num>`}]),this._autolinks}get icon(){return"gerrit"}get id(){return"gerrit"}get gkProviderId(){}get name(){return this.formatName("Gerrit")}get baseUrl(){return`${this.protocol}://${this.domain}/plugins/gitiles/${this.path}`}get baseReviewUrl(){return`${this.protocol}://${this.domain}`}async getLocalInfoFromRemoteUri(e,t,i){let r;if(t.authority!==this.domain||(i?.validate??!0)&&!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=b.exec(t.fragment);if(null!=e){let[,t]=e;t&&(r=parseInt(t,10))}}let s=y.exec(t.path);if(null==s)return;let[,,o]=s,n=o.indexOf("/",1);if(-1!==n){let t=o.substring(1,n);if((0,p.kp)(t)||"HEAD"==t){let t=e.toAbsoluteUri(o.substr(n),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r}}}if(o.startsWith("/refs/heads/")){let t;let s=o.substr(12),a=new Map;n=s.length;do n=s.lastIndexOf("/",n-1),t=s.substring(1,n),a.set(t,s.substr(n));while(n>0)if(0!==a.size){let{values:t}=await e.getBranches({filter:e=>e.remote&&a.has(e.getNameWithoutRemote())});for(let s of t){let t=a.get(s.getNameWithoutRemote());if(null==t)continue;let o=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=o)return{uri:o,startLine:r}}}return}if(o.startsWith("/refs/tags/")){let t;let s=o.substr(11),a=new Map;n=s.length;do n=s.lastIndexOf("/",n-1),t=s.substring(1,n),a.set(t,s.substr(n));while(n>0)if(0!==a.size){let{values:t}=await e.getTags({filter:e=>a.has(e.name)});for(let s of t){let t=a.get(s.name);if(null==t)continue;let o=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=o)return{uri:o,startLine:r}}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseReviewUrl}/admin/repos/${this.path},branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/+/refs/heads/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseReviewUrl}/q/${e}`)}getUrlForFile(e,t,i,r){let s=null!=r?`#${r.start.line}`:"";return i?`${this.encodeUrl(`${this.baseUrl}/+/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.getUrlForBranch(t)}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}/+/HEAD/${e}`)}${s}`}};let C=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,A=/^L(\d+)(?:-L(\d+))?$/;let GiteaRemote=class GiteaRemote extends o.k{constructor(e,t,i,r,s=!1){super(e,t,i,r,s)}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"#",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`}]),this._autolinks}get icon(){return"gitea"}get id(){return"gitea"}get gkProviderId(){}get name(){return this.formatName("Gitea")}async getLocalInfoFromRemoteUri(e,t,i){let r,s,o,n;if(t.authority!==this.domain||(i?.validate??!0)&&!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=A.exec(t.fragment);if(null!=e){let[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}let a=C.exec(t.path);if(null==a)return;let[,,,l]=a;if(l.startsWith("/commit/")&&(o=8,-1!==(n=l.indexOf("/",o)))){let t=l.substring(o,n);if((0,p.kp)(t)){let t=e.toAbsoluteUri(l.substr(n),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:s}}}if(l.startsWith("/branch/")){let t;let a=new Map;n=o=8;do t=l.substring(o,n),a.set(t,l.substr(n)),n=l.indexOf("/",n+1);while(n<l.length&&-1!==n)if(0!==a.size){let{values:t}=await e.getBranches({filter:e=>e.remote&&a.has(e.getNameWithoutRemote())});for(let o of t){let t=a.get(o.getNameWithoutRemote());if(null==t)continue;let n=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=n)return{uri:n,startLine:r,endLine:s}}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/src/branch/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/compare/${e}...${t}`)}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`#L${r.start.line}`:`#L${r.start.line}-L${r.end.line}`:"",i)?`${this.encodeUrl(`${this.baseUrl}/src/commit/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/src/branch/${t}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}/src/${e}`)}${s}`}};var k=i(1820),P=i(1608),S=i(6944),R=i(5019),D=i(1408),$=i(7956),_=Object.defineProperty,I=Object.getOwnPropertyDescriptor;let T=/\b([^/\s]+\/[^/\s]+?)(?:\\)?#([0-9]+)\b(?!]\()/g,F=/\b([^/\s]+\/[^/\s]+?)(?:\\)?!([0-9]+)\b(?!]\()/g,O=/^\/([^/]+)\/([^/]+?)\/-\/blob(.+)$/i,x=/^L(\d+)(?:-(\d+))?$/;let GitLabRemote=class GitLabRemote extends o.k{constructor(e,t,i,r,s=!1){super(e,t,i,r,s)}get apiBaseUrl(){return this.custom?`${this.protocol}://${this.domain}/api`:`https://${this.domain}/api`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"#",url:`${this.baseUrl}/-/issues/<num>`,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`},{prefix:"!",url:`${this.baseUrl}/-/merge_requests/<num>`,title:`Open Merge Request !<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Merge Request !<num>`},{tokenize:(e,t,i,r,s,o)=>"plaintext"===t?e:e.replace(T,(e,n,a)=>{let l;let h=(0,D.o)(`${this.protocol}://${this.domain}/${(0,v.mg)(n)}/-/issues/${a}`),c=` "Open Issue #${a} from ${n} on ${this.name}"`,u=`\0${i.size}\0`;"markdown"===t?i.set(u,`[${e}](${h}${c})`):"html"===t&&i.set(u,`<a href="${h}" title=${c}>${e}</a>`);let d=r?.get(a)?.[0];if(d?.value!=null){if(d.paused)null==o||s?.has(a)||(l=o.size+1,o.set(l,`[${(0,$.eV)()} GitLab Issue ${n}#${a} $(loading~spin)](${h}${c}")`));else{let t=d.value,i=(0,v.Ed)(t.title.trim());null==o||s?.has(a)||(l=o.size+1,o.set(l,`[${(0,$.eV)(t)} **${i}**](${h}${c})\\
${P.or.Space.repeat(5)}${e} ${t.state} ${(0,S.Yn)(t.closedDate??t.date)}`))}}else null==o||s?.has(a)||(l=o.size+1,o.set(l,`[${(0,$.eV)()} GitLab Issue ${n}#${a}](${h}${c})`));return u}),parse:(e,t)=>{let i,r,s;for(;null!=(s=T.exec(e));){[,i,r]=s;let[e,o]=i.split("/",2);t.set(r,{provider:this,id:r,prefix:`${i}#`,url:`${this.protocol}://${this.domain}/${i}/-/issues/${r}`,title:`Open Issue #<num> from ${i} on ${this.name}`,type:"issue",description:`${this.name} Issue ${i}#${r}`,descriptor:{key:this.remoteKey,owner:e,name:o}})}}},{tokenize:(e,t,i,r,s,o)=>"plaintext"===t?e:e.replace(F,(e,n,a)=>{let l;let h=(0,D.o)(`${this.protocol}://${this.domain}/${n}/-/merge_requests/${a}`),c=` "Open Merge Request !${a} from ${n} on ${this.name}"`,u=`\0${i.size}\0`;"markdown"===t?i.set(u,`[${e}](${h}${c})`):"html"===t&&i.set(u,`<a href="${h}" title=${c}>${e}</a>`);let d=r?.get(a)?.[0];if(d?.value!=null){if(d.paused)null==o||s?.has(a)||(l=o.size+1,o.set(l,`[${(0,$.eV)()} ${this.name} Merge Request ${n}!${a} $(loading~spin)](${h}${c}")`));else{let t=d.value,i=(0,v.Ed)(t.title.trim());null==o||s?.has(a)||(l=o.size+1,o.set(l,`[${(0,$.eV)(t)} **${i}**](${h}${c})\\
${P.or.Space.repeat(5)}${e} ${t.state} ${(0,S.Yn)(t.closedDate??t.date)}`))}}else null==o||s?.has(a)||(l=o.size+1,o.set(l,`[${(0,$.eV)()} ${this.name} Merge Request ${n}!${a}](${h}${c})`));return u}),parse:(e,t)=>{let i,r,s;for(;null!=(s=F.exec(e));){[,i,r]=s;let[e,o]=i.split("/",2);t.set(r,{provider:this,id:r,prefix:`${i}!`,url:`${this.protocol}://${this.domain}/${i}/-/merge_requests/${r}`,title:`Open Merge Request !<num> from ${i} on ${this.name}`,type:"pullrequest",description:`${this.name} Merge Request !${r} from ${i}`,descriptor:{key:this.remoteKey,owner:e,name:o}})}}}]),this._autolinks}get icon(){return"gitlab"}get id(){return"gitlab"}get gkProviderId(){var e;return(e=this.domain,(0,v.RJ)(e,"gitlab.com"))?"gitlab":"gitlabSelfHosted"}get name(){return this.formatName("GitLab")}get repoDesc(){let[e,t]=this.splitPath();return{key:this.remoteKey,owner:e,name:t}}async getLocalInfoFromRemoteUri(e,t,i){let r,s,o;if(t.authority!==this.domain||(i?.validate??!0)&&!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=x.exec(t.fragment);if(null!=e){let[,t,i]=e;t&&(r=parseInt(t,10),i&&(s=parseInt(i,10)))}}let n=O.exec(t.path);if(null==n)return;let[,,,a]=n,l=a.indexOf("/",1);if(-1!==l){let t=a.substring(1,l);if((0,p.kp)(t)){let t=e.toAbsoluteUri(a.substr(l),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:s}}}let h=new Map;l=a.length;do l=a.lastIndexOf("/",l-1),o=a.substring(1,l),h.set(o,a.substr(l));while(l>0)if(0!==h.size){let{values:t}=await e.getBranches({filter:e=>e.remote&&h.has(e.getNameWithoutRemote())});for(let o of t){let t=h.get(o.getNameWithoutRemote());if(null==t)continue;let n=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=n)return{uri:n,startLine:r,endLine:s}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/-/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/-/tree/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/-/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/-/compare/${e}${i}${t}`)}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`#L${r.start.line}`:`#L${r.start.line}-${r.end.line}`:"",i)?`${this.encodeUrl(`${this.baseUrl}/-/blob/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/-/blob/${t}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}?path=${e}`)}${s}`}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?I(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&_(t,i,o)})([(0,R.s)()],GitLabRemote.prototype,"repoDesc",1);let GoogleSourceRemote=class GoogleSourceRemote extends GerritRemote{constructor(e,t,i,r,s=!1){super(e,t,i,r,s,!1)}get id(){return"google-source"}get gkProviderId(){}get name(){return this.formatName("Google Source")}get baseUrl(){return`${this.protocol}://${this.domain}/${this.path}`}get reviewDomain(){let[e,...t]=this.domain.split(".");return[`${e}-review`,...t].join(".")}get baseReviewUrl(){return`${this.protocol}://${this.reviewDomain}`}};let E=[{custom:!1,matcher:"bitbucket.org",creator:(e,t,i)=>new BitbucketRemote(t,i)},{custom:!1,matcher:"github.com",creator:(e,t,i)=>new k.Y(t,i)},{custom:!1,matcher:"gitlab.com",creator:(e,t,i)=>new GitLabRemote(t,i)},{custom:!1,matcher:/\bdev\.azure\.com$/i,creator:(e,t,i)=>new AzureDevOpsRemote(t,i)},{custom:!0,matcher:/^(.+\/(?:bitbucket|stash))\/scm\/(.+)$/i,creator:(e,t,i)=>new BitbucketServerRemote(t,i)},{custom:!1,matcher:/\bgitlab\b/i,creator:(e,t,i)=>new GitLabRemote(t,i)},{custom:!1,matcher:/\bvisualstudio\.com$/i,creator:(e,t,i)=>new AzureDevOpsRemote(t,i,void 0,void 0,!0)},{custom:!1,matcher:/\bgitea\b/i,creator:(e,t,i)=>new GiteaRemote(t,i)},{custom:!1,matcher:/\bgerrithub\.io$/i,creator:(e,t,i)=>new GerritRemote(t,i)},{custom:!1,matcher:/\bgooglesource\.com$/i,creator:(e,t,i)=>new GoogleSourceRemote(t,i)}];function B(e){let t=[];if(e?.length)for(let i of e){let e;let r=function(e){switch(e.type){case"AzureDevOps":return(t,i,r)=>new AzureDevOpsRemote(i,r,e.protocol,e.name,!0);case"Bitbucket":return(t,i,r)=>new BitbucketRemote(i,r,e.protocol,e.name,!0);case"BitbucketServer":return(t,i,r)=>new BitbucketServerRemote(i,r,e.protocol,e.name,!0);case"Custom":return(t,i,r)=>new CustomRemote(i,r,e.urls,e.protocol,e.name);case"Gerrit":return(t,i,r)=>new GerritRemote(i,r,e.protocol,e.name,!0);case"GoogleSource":return(t,i,r)=>new GoogleSourceRemote(i,r,e.protocol,e.name,!0);case"Gitea":return(t,i,r)=>new GiteaRemote(i,r,e.protocol,e.name,!0);case"GitHub":return(t,i,r)=>new k.Y(i,r,e.protocol,e.name,!0);case"GitLab":return(t,i,r)=>new GitLabRemote(i,r,e.protocol,e.name,!0);default:return}}(i);if(null!=r){try{if(e=i.regex?RegExp(i.regex,"i"):i.domain?.toLowerCase(),null==e)throw Error("No matcher found")}catch(e){s.YJ.error(e,`Loading remote provider '${i.name??""}' failed`)}t.push({custom:!0,matcher:e,creator:r})}}return t.push(...E),t}function U(e,t){return null==t&&(t=B(r.i.get("remotes",null))),(i,r,o)=>(function(e,t,i,r,o){try{let s=r.toLowerCase();for(let{custom:n,matcher:a,creator:l}of t){if("string"==typeof a){if(a===s)return l(e,r,o);continue}if(a.test(s))return l(e,r,o);if(!n)continue;let t=a.exec(i);if(null!=t)return l(e,t[1],t[2])}return}catch(e){s.YJ.error(e,"createRemoteProvider");return}})(e,t,i,r,o)}},4516:(e,t,i)=>{i.d(t,{E$:()=>a,Ib:()=>n,Ok:()=>o,Qd:()=>u,_2:()=>p,hG:()=>l,op:()=>s});var r=i(1424);let s=new Set(["","=:","message:","@:","author:","#:","commit:","?:","file:","~:","change:"]);function o(e){return{query:e.pattern,matchAll:e.matchAll,matchCase:e.matchCase,matchRegex:e.matchRegex}}function n(e){return{pattern:e.query,matchAll:e.matchAll,matchCase:e.matchCase,matchRegex:e.matchRegex}}function a(e){return`${"query"in e?e.query:e.pattern}|${e.matchAll?"A":""}${e.matchCase?"C":""}${e.matchRegex?"R":""}`}function l(e){return e.map(e=>`#:${"string"==typeof e?(0,r.c5)(e):e.name}`).join(" ")}let h=new Map([["","message:"],["=:","message:"],["message:","message:"],["@:","author:"],["author:","author:"],["#:","commit:"],["commit:","commit:"],["?:","file:"],["file:","file:"],["~:","change:"],["change:","change:"]]),c=/(?:(?<op>=:|message:|@:|author:|#:|commit:|\?:|file:|~:|change:)\s?(?<value>".+?"|\S+}?))|(?<text>\S+)(?!(?:=|message|@|author|#|commit|\?|file|~|change):)/g;function u(e){let t,i,s,o;let n=new Map;do{if(o=c.exec(e.query),o?.groups==null)break;if(t=h.get(o.groups.op),{value:i,text:s}=o.groups,s&&!h.has(s.trim())&&(t="@me"===s?"author:":(0,r.kp)(s)?"commit:":"message:",i=s),t&&i){let e=n.get(t);null==e&&(e=new Set,n.set(t,e)),e.add(i)}}while(null!=o)return n}let d=/"/g;function p(e,t){let i,r;let s=u(e),o=new Set,n=[],a=s.get("commit:");if(null!=a){for(let e of a)o.add(e.replace(d,""));i=o}else for([r,a]of(o.add("--all"),o.add(e.matchRegex?"--extended-regexp":"--fixed-strings"),e.matchRegex&&!e.matchCase&&o.add("--regexp-ignore-case"),s.entries()))switch(r){case"message:":for(let t of(e.matchAll&&o.add("--all-match"),a))t&&(t=t.replace(d,e.matchRegex?"\\b":""))&&o.add(`--grep=${t}`);break;case"author:":for(let i of a)if(i&&(i=i.replace(d,e.matchRegex?"\\b":""))){if("@me"===i){if(t?.name==null)continue;i=t.name}if(i.startsWith("@")){o.add(`--author=${i.slice(1)}`);continue}o.add(`--author=${i}`)}break;case"change:":for(let t of a)if(t){if(t.startsWith('"')&&!(t=t.replace(d,"")))continue;o.add(e.matchRegex?`-G${t}`:`-S${t}`)}break;case"file:":for(let t of a)if(t){if(t.startsWith('"')){if(!(t=t.replace(d,"")))continue;n.push(t)}else{let i=e.matchCase?"":":(icase)";/[/\\*?|![\]{}]/.test(t)?n.push(`${i}${t}`):t.indexOf(".")>0?n.push(`${i}**/${t}`):n.push(`${i}*${t}*`)}}}return{args:[...o.values()],files:n,shas:i}}},9148:(e,t,i)=>{i.d(t,{OI:()=>m,Oq:()=>f,_K:()=>g});var r=i(7304),s=i(4152),o=i(884),n=i(1608),a=i(204),l=i(2812),h=i(2060),c=i(1424),u=i(9444),d=i(4169),p=i(2356);async function g(e,t,i,a,l){let u,p,g;let m=i.sha,f=null;async function v(){var r,s;let o;if(null==t.file)return;let n=a+1,u=t.lines.find(e=>e.line===n)??t.lines[0];if(t.isUncommitted)(0,c.jN)(m)&&(o=m);else if(null==(o=f=u.previousSha))return`\`\`\`diff
+ ${l.lineAt(a).text}
\`\`\``;let p=t.file.originalPath;null==p&&i.fsPath!==t.file.uri.fsPath&&(p=t.file.path),a=u.line-1;let g=await e.git.getDiffForLine(i,a,o,m);return null==g&&null==o&&m!==h.QD&&(g=await e.git.getDiffForLine(i,a,void 0,h.QD)),null!=g?(r=g,null==s&&"hunk"===d.i.get("hovers.changesDiff")?w(r.hunk):`\`\`\`diff${null==r.line.previous?"":`
- ${r.line.previous.trim()}`}${null==r.line.current?"":`
+ ${r.line.current.trim()}`}
\`\`\``):void 0}let y=await v();if(null==y)return;if(t.isUncommitted){let e=await t.getPreviousComparisonUrisForLine(a,m);if(e?.previous==null)return;u=`[$(compare-changes)](${s.W.getMarkdownCommandArgs({lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},repoPath:t.repoPath,line:a})} "Open Changes")`,p=null==e.previous.sha||e.previous.isUncommitted?`  &nbsp;_${(0,c.c5)(e.previous.sha,{strings:{working:"Working Tree"}})}_ &nbsp;${n.or.ArrowLeftRightLong}&nbsp; `:`  &nbsp;[$(git-commit) ${(0,c.c5)(e.previous.sha||"")}](${o.g.getMarkdownCommandArgs(e.previous.sha||"")} "Show Commit") &nbsp;${n.or.ArrowLeftRightLong}&nbsp; `,g=null==e.current.sha||e.current.isUncommitted?`_${(0,c.c5)(e.current.sha,{strings:{working:"Working Tree"}})}_`:`[$(git-commit) ${(0,c.c5)(e.current.sha||"")}](${o.g.getMarkdownCommandArgs(e.current.sha||"")} "Show Commit")`}else u=`[$(compare-changes)](${s.W.getMarkdownCommandArgs(t,a)} "Open Changes")`,null===f&&(f=await t.getPreviousSha()),f&&(p=`  &nbsp;[$(git-commit) ${(0,c.c5)(f)}](${o.g.getMarkdownCommandArgs(f)} "Show Commit") &nbsp;${n.or.ArrowLeftRightLong}&nbsp;`),g=`[$(git-commit) ${t.shortSha}](${o.g.getMarkdownCommandArgs(t.sha)} "Show Commit")`;u=`${y}
---

Changes${p??" added in "}${g} &nbsp;&nbsp;|&nbsp;&nbsp; ${u}`;let b=new r.MarkdownString(u,!0);return b.supportHtml=!0,b.isTrusted=!0,b}async function m(e,t,i,a){let h,c,u;let d=w(a);if(null==e)c="_Working Tree_",u="_Unsaved_";else{let r=await e.findFile(t);if(null==r)return;h=`[$(compare-changes)](${s.W.getMarkdownCommandArgs({lhs:{sha:e.sha,uri:l.wv.fromFile(r,t.repoPath,void 0,!0).toFileUri()},rhs:{sha:"",uri:t.toFileUri()},repoPath:t.repoPath,line:i})} "Open Changes")`,c=`[$(git-commit) ${e.shortSha}](${o.g.getMarkdownCommandArgs(e.sha)} "Show Commit")`,u="_Working Tree_"}h=`${d}
---

Local Changes  &nbsp;${c} &nbsp;${n.or.ArrowLeftRightLong}&nbsp; ${u}${null==h?"":` &nbsp;&nbsp;|&nbsp;&nbsp; ${h}`}`;let p=new r.MarkdownString(h,!0);return p.supportHtml=!0,p.isTrusted=!0,p}async function f(e,t,i,s,o){let n,l;let h=await (0,u.sZ)(o?.remotes??e.git.getBestRemotesWithProviders(t.repoPath),o?.cancellation,o?.timeout);if(h.paused){if("cancelled"===h.reason)return}else n=h.value,[l]=n;let c=d.i.get("hovers"),g=l?.provider!=null&&(o?.autolinks||o?.autolinks!==!1&&c.autolinks.enabled&&c.autolinks.enhanced)&&a.E.has(c.detailsMarkdownFormat,"message"),m=l?.hasIntegration()&&!1!==l.maybeIntegrationConnected&&(o?.pullRequests||o?.pullRequests!==!1&&c.pullRequests.enabled)&&a.E.has(o.format,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState"),[f,w,v,y]=await Promise.allSettled([g?(0,u.Gu)(o?.enrichedAutolinks??t.getEnrichedAutolinks(l),o?.cancellation,o?.timeout):void 0,m?(0,u.sZ)(o?.pullRequest??t.getAssociatedPullRequest(l),o?.cancellation,o?.timeout):void 0,e.vsls.enabled?(0,p.Dg)(e.vsls.getContactPresence(t.author.email),250,o?.cancellation):void 0,t.isUncommitted?t.getPreviousComparisonUrisForLine(s,i.sha):void 0,null==t.message?t.ensureFullDetails():void 0]);if(o?.cancellation?.isCancellationRequested)return;let b=(0,p.Cv)(f),C=(0,p.Cv)(w),A=(0,p.Cv)(v),k=(0,p.Cv)(y),P=await a.E.fromTemplateAsync(o.format,t,{enrichedAutolinks:b?.value==null||b.paused?void 0:b.value,dateFormat:null===o.dateFormat?"MMMM Do, YYYY h:mma":o.dateFormat,editor:{line:s,uri:i},getBranchAndTagTips:o?.getBranchAndTagTips,messageAutolinks:o?.autolinks||o?.autolinks!==!1&&c.autolinks.enabled,pullRequest:C?.value,presence:A,previousLineComparisonUris:k,outputFormat:"markdown",remotes:n}),S=new r.MarkdownString(P,!0);return S.supportHtml=!0,S.isTrusted=!0,S}function w(e){return`\`\`\`diff
${e.contents.trim()}
\`\`\``}},3828:(e,t,i)=>{i.d(t,{CW:()=>b,G:()=>w,IB:()=>f,Ko:()=>c,L:()=>k,Oc:()=>R,S2:()=>v,Sk:()=>m,Xg:()=>C,Yf:()=>D,_0:()=>A,gv:()=>h,m0:()=>p,m4:()=>u,qC:()=>g,uY:()=>S,ue:()=>P,wN:()=>d,yM:()=>y});var r=i(7304),s=i(1608),o=i(4532),n=i(7824),a=i(4169),l=i(6448);function h(e){return e instanceof o.AZ?$("error",`Unable to show blame. Invalid revision (${e.revision}) specified in the blame.ignoreRevsFile in your Git config.`,"suppressBlameInvalidIgnoreRevsFileBadRevisionWarning"):$("error",`Unable to show blame. Invalid or missing blame.ignoreRevsFile (${e.fileName}) specified in your Git config.`,"suppressBlameInvalidIgnoreRevsFileWarning")}function c(e){return null==e?$("info","There is no previous commit.","suppressCommitHasNoPreviousCommitWarning"):$("info",`Commit ${e.shortSha} (${e.author.name}, ${e.formattedDate}) has no previous commit.`,"suppressCommitHasNoPreviousCommitWarning")}function u(e){return $("warn",`${e}. The commit could not be found.`,"suppressCommitNotFoundWarning")}async function d(e){let t={title:"Create Pull Request..."};return await $("info",`Would you like to create a Pull Request for branch '${e}'?`,"suppressCreatePullRequestPrompt",{title:"Don't Show Again"},t)===t}async function p(){let e={title:"Disable Debug Logging"};return await $("warn","GitLens debug logging is currently enabled. Unless you are reporting an issue, it is recommended to be disabled. Would you like to disable it?","suppressDebugLoggingWarning",{title:"Don't Show Again"},e)===e}async function g(e){l.YJ.enabled("error")?null!=await $("error",`${e}. See output channel for more details.`,void 0,null,{title:"Open Output Channel"})&&l.YJ.showOutputChannel():null!=await $("error",`${e}. If the error persists, please enable debug logging and try again.`,void 0,null,{title:"Enable Debug Logging"})&&(0,n.gf)(s.eq.EnableDebugLogging)}function m(e){return $("warn",`${e}. The file is probably not under source control.`,"suppressFileNotUnderSourceControlWarning")}function f(){return $("error","GitLens requires Git to be enabled. Please re-enable Git — set `git.enabled` to true and reload.","suppressGitDisabledWarning")}function w(){return $("error","GitLens is unable to use Git. Your Git configuration seems to be invalid. Please resolve any issues with your Git configuration and reload.")}function v(){return $("error","GitLens was unable to find Git. Please make sure Git is installed. Also ensure that Git is either in the PATH, or that 'git.path' is pointed to its installed location.","suppressGitMissingWarning")}function y(e,t){return $("error",`GitLens requires a newer version of Git (>= ${t}) than is currently installed (${e}). Please install a more recent version of Git.`,"suppressGitVersionWarning")}function b(e){return $("error",`This GitLens pre-release version (${e}) has expired. Please upgrade to a more recent version.`)}function C(e){return $("warn",`${e}. The line has uncommitted changes.`,"suppressLineUncommittedWarning")}function A(e){return $("warn",`${e}. No repository could be found.`,"suppressNoRepositoryWarning")}function k(){return $("warn","Closing either the git-rebase-todo file or the Rebase Editor will start the rebase.","suppressRebaseSwitchToTextWarning")}function P(e){return $("error",`Rich integration with ${e} has been disconnected for this session, because of too many failed requests.`,"suppressIntegrationDisconnectedTooManyFailedRequestsWarning",void 0,{title:"OK"})}function S(e){return $("error",e,"suppressIntegrationRequestFailed500Warning",void 0,{title:"OK"})}function R(e){return $("error",`${e} request timed out.`,"suppressIntegrationRequestTimedOutWarning",void 0,{title:"OK"})}async function D(e){let t={title:"Switch to New Layout"};await $("info",`Upgraded to GitLens ${e} \u2014 [see what's new](https://help.gitkraken.com/gitlens/gitlens-release-notes-current/ "See what's new in GitLens ${e}").
We've reimagined and rearranged our views for greater focus and productivity, and recommend switching to the new layout \u2014 [learn more and tell us what you think](https://github.com/gitkraken/vscode-gitlens/discussions/2721 "Learn more about what's changed")!`,void 0,null,t)===t&&(0,n.gf)(s.eq.ResetViewsLayout)}async function $(e,t,i,s={title:"Don't Show Again"},...o){let n;if(l.YJ.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(s)})`),null!=i&&a.i.get(`advanced.messages.${i}`)){l.YJ.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(s)}) skipped`);return}switch(null!=i&&null!==s&&o.push(s),e){case"info":n=await r.window.showInformationMessage(t,...o);break;case"warn":n=await r.window.showWarningMessage(t,...o);break;case"error":n=await r.window.showErrorMessage(t,...o)}if(null==i||null!==s&&n!==s||(l.YJ.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(s)}) don't show again requested`),await function(e){let t={...a.i.get("advanced.messages")};for(let[i,r]of(t[e]=!0,Object.entries(t)))!0!==r&&delete t[i];return a.i.update("advanced.messages",t,r.ConfigurationTarget.Global)}(i),n!==s))return l.YJ.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(s)}) returned ${null!=n?n.title:n}`),n}},2216:(e,t,i)=>{i.d(t,{A:()=>n});var r=i(7304),s=i(9964),o=i(4169);async function n(e,t){if(!o.i.get("cloudPatches.enabled")){let e={title:"Enable"};if(await r.window.showInformationMessage("Cloud Patches are currently disabled. Would you like to enable them?",{modal:!0},e,{title:"Cancel",isCloseAffordance:!0})!==e)return;await o.i.updateEffective("cloudPatches.enabled",!0)}return"create"===e.mode&&(t={...t,preserveFocus:!1,preserveVisibility:!1}),s.Container.instance.patchDetailsView.show(t,e)}},6772:(e,t,i)=>{i.d(t,{G:()=>EnrichmentService,m:()=>u});var r=i(2804),s=i(4136),o=i(6448),n=i(3e3),a=i(9663),l=Object.defineProperty,h=Object.getOwnPropertyDescriptor,c=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?h(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&l(t,i,o),o};let EnrichmentService=class EnrichmentService{constructor(e,t){this.container=e,this.connection=t}dispose(){}async delete(e,t){let i=(0,n.b1)();try{let i=await this.connection.fetchGkDevApi(`v1/enrich-items/${e}`,{method:"DELETE"});if(!i.ok)throw Error(`Unable to ${t} item '${e}':  (${i.status}) ${i.statusText}`)}catch(e){throw o.YJ.error(e,i),e}}async get(e,t){let i=(0,n.b1)();try{let i=await this.connection.fetchGkDevApi("v1/enrich-items",{method:"GET"});if(t?.isCancellationRequested)throw new r.WO;let s=await i.json();if(t?.isCancellationRequested)throw new r.WO;return null==e?s.data:s.data.filter(t=>t.type===e)}catch(e){if(e instanceof r.CW)return[];throw o.YJ.error(e,i),e}}getPins(e){return this.get("pin",e)}getSnoozed(e){return this.get("snooze",e)}async pinItem(e){let t=(0,n.b1)();try{if(!await (0,a.us)("Pinning requires a GitKraken account.",this.container))throw Error("Unable to pin item: account required");let t={provider:e.provider,entityType:e.type,entityId:e.id,entityUrl:e.url},i=await this.connection.fetchGkDevApi("v1/enrich-items/pin",{method:"POST",body:JSON.stringify(t)});if(!i.ok)throw Error(`Unable to pin item '${t.provider}|${t.entityUrl}#${e.id}':  (${i.status}) ${i.statusText}`);return(await i.json()).data}catch(e){throw o.YJ.error(e,t),e}}unpinItem(e){return this.delete(e,"unpin")}async snoozeItem(e){let t=(0,n.b1)();try{if(!await (0,a.GK)("Snoozing requires a trial or paid plan",this.container))throw Error("Unable to snooze item: subscription required");let t={provider:e.provider,entityType:e.type,entityId:e.id,entityUrl:e.url};null!=e.expiresAt&&(t.expiresAt=e.expiresAt);let i=await this.connection.fetchGkDevApi("v1/enrich-items/snooze",{method:"POST",body:JSON.stringify(t)});if(!i.ok)throw Error(`Unable to snooze item '${t.provider}|${t.entityUrl}#${e.id}':  (${i.status}) ${i.statusText}`);return(await i.json()).data}catch(e){throw o.YJ.error(e,t),e}}unsnoozeItem(e){return this.delete(e,"unsnooze")}};function u(e){switch(e.id){case"azure-devops":return"azure";case"bitbucket":case"bitbucket-server":return"bitbucket";case"github":return"github";case"gitlab":return"gitlab";default:throw Error(`Unknown remote provider '${e.id}'`)}}c([(0,s.Yz)()],EnrichmentService.prototype,"get",1),c([(0,s.Yz)()],EnrichmentService.prototype,"getPins",1),c([(0,s.Yz)()],EnrichmentService.prototype,"getSnoozed",1),c([(0,s.Yz)({args:{0:e=>`${e.id} (${e.provider} ${e.type})`}})],EnrichmentService.prototype,"pinItem",1),c([(0,s.Yz)()],EnrichmentService.prototype,"unpinItem",1),c([(0,s.Yz)({args:{0:e=>`${e.id} (${e.provider} ${e.type})`}})],EnrichmentService.prototype,"snoozeItem",1),c([(0,s.Yz)()],EnrichmentService.prototype,"unsnoozeItem",1)},7880:(e,t,i)=>{i.d(t,{I1:()=>l,S6:()=>y,UP:()=>b,Wk:()=>f,_o:()=>n,ae:()=>p,c:()=>c,cx:()=>a,eM:()=>w,i8:()=>m,mi:()=>v,sD:()=>h,sR:()=>g,uQ:()=>d,y:()=>C});var r,s,o=i(6944),n=((r=n||{}).Free="free",r.FreePlus="free+",r.Pro="pro",r.Teams="teams",r.Enterprise="enterprise",r),a=((s=a||{})[s.VerificationRequired=-1]="VerificationRequired",s[s.Free=0]="Free",s[s.FreeInPreviewTrial=1]="FreeInPreviewTrial",s[s.FreePreviewTrialExpired=2]="FreePreviewTrialExpired",s[s.FreePlusInTrial=3]="FreePlusInTrial",s[s.FreePlusTrialExpired=4]="FreePlusTrialExpired",s[s.FreePlusTrialReactivationEligible=5]="FreePlusTrialReactivationEligible",s[s.Paid=6]="Paid",s);function l(e){let{account:t,plan:{actual:i,effective:r},previewTrial:s}=e;if(t?.verified===!1)return -1;if(i.id===r.id)switch(r.id){case"free":return null==s?0:2;case"free+":if(null!=r.nextTrialOptInDate&&new Date(r.nextTrialOptInDate)<new Date)return 5;return 4;case"pro":case"teams":case"enterprise":return 6}switch(r.id){case"free":return null==s?0:1;case"free+":if(null!=r.nextTrialOptInDate&&new Date(r.nextTrialOptInDate)<new Date)return 5;return 4;case"pro":return"free"===i.id?1:3;case"teams":case"enterprise":return 6}}function h(e,t,i,r,s,o,n=!1,a){return{id:e,name:c(e),bundle:t,cancelled:n,organizationId:r,trialReactivationCount:i,nextTrialOptInDate:a,startedOn:(s??new Date).toISOString(),expiresOn:null!=o?o.toISOString():void 0}}function c(e){switch(e){case"free+":return"GitKraken Free";case"pro":return"GitKraken Pro";case"teams":return"GitKraken Teams";case"enterprise":return"GitKraken Enterprise";default:return"GitKraken"}}let u=new Map([[void 0,-1],["free",0],["free+",1],["pro",2],["teams",3],["enterprise",4]]);function d(e){return u.get(e)??-1}function p(e,t){return g(e.plan.effective.expiresOn,t)}function g(e,t){return null!=e?(0,o.S6)(Date.now(),new Date(e),t,Math.round):void 0}function m(e){return f(e.plan.effective.id)}function f(e){return"free"!==e&&"free+"!==e}function w(e){let t=p(e);return null!=t&&t<=0}function v(e){return e.plan.actual.id!==e.plan.effective.id}function y(e){if(null==e.account||!v(e)||!1===b(e))return!1;let t=p(e);return null==t||t<=0}function b(e){let t=g(e.previewTrial?.expiresOn);return null!=t?t<=0:void 0}function C(e){}},5008:(e,t,i)=>{i.d(t,{A:()=>n,u:()=>a});var r=i(7304),s=i(4169),o=i(3664);function n(){return(0,o.wp)("gitlens:plus:enabled",s.i.get("plusFeatures.enabled",void 0,!0))}async function a(){if(n())return!0;let e={title:"Enable"};return await r.window.showInformationMessage("Pro features are currently disabled. Would you like to enable them?",{modal:!0},e,{title:"Cancel",isCloseAffordance:!0})===e&&(await s.i.updateEffective("plusFeatures.enabled",!0),!0)}},9663:(e,t,i)=>{i.d(t,{GK:()=>o,Si:()=>a,us:()=>n});var r=i(7304),s=i(7880);async function o(e,t){for(;;){let i=await t.subscription.getSubscription();if(i.account?.verified===!1){let i={title:"Resend Verification"},s={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${e}

You must verify your email before you can continue.`,{modal:!0},i,s)===i&&await t.subscription.resendVerification())continue;return!1}let o=i.plan.effective.id;if((0,s.Wk)(o))break;if(null==i.account){let i={title:"Start Pro Trial"},s={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${e}

Try our developer productivity and collaboration services free for 7 days.`,{modal:!0},i,s)===i&&await t.subscription.loginOrSignUp())continue}else{let i={title:"Upgrade to Pro"},s={title:"Cancel",isCloseAffordance:!0};await r.window.showWarningMessage(`${e}

Continue to use our developer productivity and collaboration services.`,{modal:!0},i,s)===i&&t.subscription.purchase()}return!1}return!0}async function n(e,t){for(;;){let i=await t.subscription.getSubscription();if(i.account?.verified===!1){let i={title:"Resend Verification"},s={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${e}

You must verify your email before you can continue.`,{modal:!0},i,s)===i&&await t.subscription.resendVerification())continue;return!1}if(null!=i.account)break;let s={title:"Sign In"},o={title:"Sign Up"},n={title:"Cancel",isCloseAffordance:!0},a=await r.window.showWarningMessage(`${e}

Gain access to our developer productivity and collaboration services.`,{modal:!0},s,o,n);if(a===s){if(await t.subscription.loginOrSignUp())continue}else if(a===o&&await t.subscription.loginOrSignUp(!0))continue;return!1}return!0}async function a(e){if(e.storage.get("confirm:draft:storage",!1))return!0;for(;;){let t={title:"Continue"},i={title:"Cancel",isCloseAffordance:!0},s={title:"Learn More"},o={title:"Security"},n=await r.window.showInformationMessage("Cloud Patches are securely stored by GitKraken and can be accessed by anyone with the link and a GitKraken account.",{modal:!0},t,s,o,i);if(n===t)return e.storage.store("confirm:draft:storage",!0),!0;if(n===o){r.env.openExternal(r.Uri.parse("https://help.gitkraken.com/gitlens/security"));continue}if(n===s){r.env.openExternal(r.Uri.parse("https://www.gitkraken.com/solutions/cloud-patches"));continue}return!1}}},8984:(e,t,i)=>{i.d(t,{WI:()=>u,es:()=>d,ey:()=>CloudWorkspace,gB:()=>c,ig:()=>LocalWorkspace,j2:()=>l,u:()=>p,w1:()=>h});var r,s,o,n,a=((r=a||{}).Direct="DIRECT",r.ProviderProject="PROVIDER_PROJECT",r);let CloudWorkspace=class CloudWorkspace{constructor(e,t,i,r,s,o,n,a,l,h){this.container=e,this.id=t,this.name=i,this.organizationId=r,this.provider=s,this.repoRelation=o,this.current=n,this.azureInfo=a,this._repositoryDescriptors=l,this._localPath=h,this._disposable=this.container.git.onDidChangeRepositories(this.resetRepositoriesByName,this)}type="cloud";_repositoryDescriptors;_repositoriesByName;_localPath;_disposable;dispose(){this._disposable.dispose()}get shared(){return null!=this.organizationId}get localPath(){return this._localPath}resetRepositoriesByName(){this._repositoriesByName=void 0}async getRepositoriesByName(e){return(null==this._repositoriesByName||e?.force)&&(this._repositoriesByName=await this.container.workspaces.resolveWorkspaceRepositoriesByName(this.id,{resolveFromPath:!0,usePathMapping:!0})),this._repositoriesByName}async getRepositoryDescriptors(e){return(null==this._repositoryDescriptors||e?.force)&&(this._repositoryDescriptors=await this.container.workspaces.getCloudWorkspaceRepositories(this.id),this.resetRepositoriesByName()),this._repositoryDescriptors}async getRepositoryDescriptor(e){return(await this.getRepositoryDescriptors()).find(t=>t.name===e)}addRepositories(e){null==this._repositoryDescriptors?this._repositoryDescriptors=e:this._repositoryDescriptors=this._repositoryDescriptors.concat(e),this.resetRepositoriesByName()}removeRepositories(e){null!=this._repositoryDescriptors&&(this._repositoryDescriptors=this._repositoryDescriptors.filter(t=>!e.includes(t.name)),this.resetRepositoriesByName())}setLocalPath(e){this._localPath=e}};var l=((s=l||{}).GitHub="GITHUB",s.GitHubEnterprise="GITHUB_ENTERPRISE",s.GitLab="GITLAB",s.GitLabSelfHosted="GITLAB_SELF_HOSTED",s.Bitbucket="BITBUCKET",s.Azure="AZURE",s),h=((o=h||{}).GitHub="github",o.GitHubEnterprise="github_enterprise",o.GitLab="gitlab",o.GitLabSelfHosted="gitlab_self_hosted",o.Bitbucket="bitbucket",o.Azure="azure",o);let c={azure:"azure-devops",bitbucket:"bitbucket",github:"github",github_enterprise:"github",gitlab:"gitlab",gitlab_self_hosted:"gitlab"};var u=((n=u||{}).CurrentWindow="Current Window",n.ParentFolder="Parent Folder",n);let d=100,p=100;let LocalWorkspace=class LocalWorkspace{constructor(e,t,i,r,s,o){this.container=e,this.id=t,this.name=i,this.repositoryDescriptors=r,this.current=s,this._localPath=o,this._disposable=this.container.git.onDidChangeRepositories(this.resetRepositoriesByName,this)}type="local";_localPath;_repositoriesByName;_disposable;dispose(){this._disposable.dispose()}get shared(){return!1}get localPath(){return this._localPath}resetRepositoriesByName(){this._repositoriesByName=void 0}async getRepositoriesByName(e){return(null==this._repositoriesByName||e?.force)&&(this._repositoriesByName=await this.container.workspaces.resolveWorkspaceRepositoriesByName(this.id,{resolveFromPath:!0,usePathMapping:!0})),this._repositoriesByName}getRepositoryDescriptors(){return Promise.resolve(this.repositoryDescriptors)}getRepositoryDescriptor(e){return Promise.resolve(this.repositoryDescriptors.find(t=>t.name===e))}setLocalPath(e){this._localPath=e}}},3056:(e,t,i)=>{i.d(t,{I:()=>d,U:()=>p});var r=i(7304),s=i(9964),o=i(4169),n=i(7348),a=i(2356),l=i(3284),h=i(2056),c=i(6776),u=i(8144);async function d(e,t,i,d){let p;let g=r.window.createQuickPick();if(g.ignoreFocusOut=(0,l.u4)(),g.title=t,g.placeholder=i,g.matchOnDescription=!0,g.matchOnDetail=!0,(0,a.um)(e)&&(g.busy=!0,g.show(),e=await e),null==e){if(g.placeholder="No commits found",d?.empty?.getState!=null){let e=await d.empty.getState();g.items=e.items,null!=e.placeholder&&(g.placeholder=e.placeholder),null!=e.title&&(g.title=e.title)}else g.items=[(0,c.wF)(c.QN.Cancel,void 0,{label:"OK"})]}else g.items=await m(e);async function m(e){let t=[];for await(let i of(d?.showOtherReferences!=null&&t.push(...d.showOtherReferences),(0,n.kH)(e.commits.values(),async e=>(0,u.KK)(e,d?.picked===e.ref,{compact:!0,icon:"avatar"}))))t.push(i);return e.hasMore&&t.push((0,c.wF)(c.QN.LoadMore)),t}async function f(){g.ignoreFocusOut=!0,g.busy=!0;try{let t;if(e=await (await e)?.more?.(o.i.get("advanced.maxListItems")),null==e){if(d?.empty?.getState!=null){let e=await d.empty.getState();t=e.items,null!=e.placeholder&&(g.placeholder=e.placeholder),null!=e.title&&(g.title=e.title)}else t=[(0,c.wF)(c.QN.Cancel,void 0,{label:"OK"})]}else t=await m(e);let i=-1;if(0!==g.activeItems.length){let e=g.activeItems[0];i=g.items.indexOf(e),(0,c.EB)(e)&&i--}g.items=t,i&&(g.activeItems=[g.items[i]])}finally{g.busy=!1}}d?.picked&&(g.activeItems=g.items.filter(e=>!h.Ml.is(e)&&e.picked));let w=[];if(d?.keyboard!=null){let{keyboard:e}=d;(p=s.Container.instance.keyboard.createScope(Object.fromEntries(e.keys.map(t=>[t,{onDidPressKey:async t=>{if(0!==g.activeItems.length){let[i]=g.activeItems;if(null!=i&&!(0,c.EB)(i)&&!h.Ml.is(i)){let r=g.ignoreFocusOut;g.ignoreFocusOut=!0,await e.onDidPressKey(t,i),g.ignoreFocusOut=r}}}}])))).start(),w.push(p)}try{let e=await new Promise(e=>{w.push(g.onDidHide(()=>e(void 0)),g.onDidAccept(()=>{if(0!==g.activeItems.length){let[t]=g.activeItems;if((0,c.EB)(t)){if(t.directive===c.QN.LoadMore){f();return}e(void 0);return}e(t)}}),g.onDidChangeValue(e=>{null!=p&&(0!==e.length?p.pause(["left","ctrl+left","right","ctrl+right"]):p.resume())})),g.busy=!1,g.show()});if(null==e||(0,c.EB)(e))return;if(e instanceof h.Ml){await e.execute();return}return e.item}finally{g.dispose(),w.forEach(e=>void e.dispose())}}async function p(e,t,i,o){let d;let p=r.window.createQuickPick();p.ignoreFocusOut=(0,l.u4)(),p.title=t,p.placeholder=i,p.matchOnDescription=!0,p.matchOnDetail=!0,(0,a.um)(e)&&(p.busy=!0,p.show(),e=await e),null!=e&&(p.items=[...o?.showOtherReferences??[],...(0,n.kH)(o?.filter!=null?(0,n.IF)(e.commits.values(),o.filter):e.commits.values(),e=>(0,u.am)(e,o?.picked===e.ref,{compact:!0,icon:!0}))]),(null==e||p.items.length<=(o?.showOtherReferences?.length??0))&&(p.placeholder=null==e?"No stashes found":o?.empty??"No matching stashes found",p.items=[(0,c.wF)(c.QN.Cancel)]),o?.picked&&(p.activeItems=p.items.filter(e=>!h.Ml.is(e)&&e.picked));let g=[];if(o?.keyboard!=null){let{keyboard:e}=o;(d=s.Container.instance.keyboard.createScope(Object.fromEntries(e.keys.map(t=>[t,{onDidPressKey:async t=>{if(0!==p.activeItems.length){let[i]=p.activeItems;if(null!=i&&!(0,c.EB)(i)&&!h.Ml.is(i)){let r=p.ignoreFocusOut;p.ignoreFocusOut=!0,await e.onDidPressKey(t,i),p.ignoreFocusOut=r}}}}])))).start(),g.push(d)}try{let e=await new Promise(e=>{g.push(p.onDidHide(()=>e(void 0)),p.onDidAccept(()=>{if(0!==p.activeItems.length){let[t]=p.activeItems;if((0,c.EB)(t)){e(void 0);return}e(t)}}),p.onDidChangeValue(e=>{null!=d&&(0!==e.length?d.pause(["left","ctrl+left","right","ctrl+right"]):d.resume())})),p.busy=!1,p.show()});if(null==e||(0,c.EB)(e))return;if(e instanceof h.Ml){await e.execute();return}return e.item}finally{p.dispose(),g.forEach(e=>void e.dispose())}}},548:(e,t,i)=>{i.d(t,{I:()=>c});var r=i(7304),s=i(8104),o=i(1608),n=i(2356),a=i(1072),l=i(3284),h=i(8144);async function c(e,t,i,c,u){let d=(0,n.Qv)(),p=[];try{let n=r.window.createQuickPick();p.push(n,n.onDidHide(()=>d.fulfill(void 0)),n.onDidAccept(()=>n.busy?void 0:d.fulfill(n.selectedItems.map(e=>e.item))),n.onDidTriggerButton(e=>{e===s.uc&&(n.canSelectMany?n.selectedItems=[]:d.fulfill([]))})),n.ignoreFocusOut=u?.ignoreFocusOut??(0,l.u4)(),n.title=u?.appendReposToTitle?e.git.openRepositoryCount<=1?i:`${i}${(0,a.E3)(`${(0,a.eu)(o.or.Dot,2,2)}${t.formattedName}`,o.kN-i.length)}`:i,n.placeholder=c,n.matchOnDescription=!0,n.matchOnDetail=!0,n.canSelectMany=u?.multiselect??!0,n.buttons=u?.clearButton?[s.uc]:[],n.busy=!0,n.show();let g=await t.getContributors();if(!d.pending)return;let m=await Promise.all(g.map(e=>(0,h.iU)(e,u?.picked?.(e)??!1)));if(!d.pending)return;return n.items=m,n.canSelectMany?n.selectedItems=m.filter(e=>e.picked):n.activeItems=m.filter(e=>e.picked),n.busy=!1,await d.promise}finally{p.forEach(e=>void e.dispose())}}},6560:(e,t,i)=>{i.d(t,{AX:()=>CommitCompareWithWorkingCommandQuickPickItem,Cq:()=>CommitCopyIdQuickPickItem,EF:()=>CommitOpenInGraphCommandQuickPickItem,G:()=>CommitApplyFileChangesCommandQuickPickItem,I1:()=>CommitOpenAllChangesCommandQuickPickItem,Kk:()=>CommitOpenChangesCommandQuickPickItem,O5:()=>OpenOnlyChangedFilesCommandQuickPickItem,Qh:()=>CommitOpenDetailsCommandQuickPickItem,SG:()=>CommitOpenRevisionsCommandQuickPickItem,Sg:()=>OpenChangedFilesCommandQuickPickItem,Wu:()=>CommitCompareWithHEADCommandQuickPickItem,Y8:()=>CommitOpenAllChangesWithDiffToolCommandQuickPickItem,aC:()=>CommitOpenChangesWithWorkingCommandQuickPickItem,aG:()=>CommitFilesQuickPickItem,ag:()=>CommitOpenFilesCommandQuickPickItem,e6:()=>CommitOpenFileCommandQuickPickItem,ee:()=>CommitFileQuickPickItem,iu:()=>CommitOpenRevisionCommandQuickPickItem,kP:()=>CommitBrowseRepositoryFromHereCommandQuickPickItem,o2:()=>CommitOpenAllChangesWithWorkingCommandQuickPickItem,q$:()=>CommitOpenDirectoryCompareCommandQuickPickItem,qg:()=>CommitOpenChangesWithDiffToolCommandQuickPickItem,sd:()=>CommitCopyMessageQuickPickItem,u6:()=>CommitRestoreFileChangesCommandQuickPickItem,ug:()=>CommitOpenDirectoryCompareWithWorkingCommandQuickPickItem});var r=i(7304),s=i(8104),o=i(1608),n=i(9964),a=i(3172),l=i(1144),h=i(204),c=i(7280),u=i(3732),d=i(1072),p=i(2056);let CommitFilesQuickPickItem=class CommitFilesQuickPickItem extends p.Ml{constructor(e,t){super({label:e.summary,description:`${h.E.fromTemplate("${author}, ${ago}  $(git-commit)  ${id}",e)}${t?.unpublished?"  (unpublished)":""}`,detail:`${t?.file!=null?`$(file) ${(0,u.g1)(t.file.path)}${t.file.formatStats({expand:!0,separator:", ",prefix:` ${o.or.Dot} `})}`:`$(files) ${e.formatStats({expand:!0,separator:", ",empty:"No files changed"})}`}${t?.hint!=null?`${(0,d.eu)(o.or.Dash,4,2,o.or.Space)}${t.hint}`:""}`,alwaysShow:!0,picked:t?.picked??!0,buttons:[s.OR,s.gt]},void 0,void 0,void 0,{suppressKeyPress:!0}),this.commit=e}get sha(){return this.commit.sha}};let CommitFileQuickPickItem=class CommitFileQuickPickItem extends p.Ml{constructor(e,t,i){super({label:(0,u.g1)(t.path),description:(0,c.W)(t,!0),picked:i,iconPath:(0,c.Mg)(t.status)}),this.commit=e,this.file=t}get sha(){return this.commit.sha}execute(e){return l.t6(this.file,this.commit,e)}};let CommitBrowseRepositoryFromHereCommandQuickPickItem=class CommitBrowseRepositoryFromHereCommandQuickPickItem extends p.Ml{constructor(e,t){super(`Browse Repository from${t?.before?" Before":""} Here${t?.openInNewWindow?" in New Window":""}`),this.commit=e,this.executeOptions=t,this.iconPath=new r.ThemeIcon("folder-opened")}execute(e){return(0,a.Y)(this.commit.getGitUri(),{before:this.executeOptions?.before,openInNewWindow:this.executeOptions?.openInNewWindow})}};let CommitCompareWithHEADCommandQuickPickItem=class CommitCompareWithHEADCommandQuickPickItem extends p.Ml{constructor(e){super("Compare with HEAD"),this.commit=e,this.iconPath=new r.ThemeIcon("compare-changes")}execute(e){return n.Container.instance.searchAndCompareView.compare(this.commit.repoPath,this.commit.ref,"HEAD")}};let CommitCompareWithWorkingCommandQuickPickItem=class CommitCompareWithWorkingCommandQuickPickItem extends p.Ml{constructor(e){super("Compare with Working Tree",new r.ThemeIcon("compare-changes")),this.commit=e}execute(e){return n.Container.instance.searchAndCompareView.compare(this.commit.repoPath,this.commit.ref,"")}};let CommitCopyIdQuickPickItem=class CommitCopyIdQuickPickItem extends p.Ml{constructor(e){super("Copy SHA",new r.ThemeIcon("copy")),this.commit=e}execute(){return l.i6(this.commit)}async onDidPressKey(e){await super.onDidPressKey(e),r.window.showInformationMessage("Commit SHA copied to the clipboard")}};let CommitCopyMessageQuickPickItem=class CommitCopyMessageQuickPickItem extends p.Ml{constructor(e){super("Copy Message",new r.ThemeIcon("copy")),this.commit=e}execute(){return l.ak(this.commit)}async onDidPressKey(e){await super.onDidPressKey(e),r.window.showInformationMessage(`${this.commit.stashName?"Stash":"Commit"} Message copied to the clipboard`)}};let CommitOpenAllChangesCommandQuickPickItem=class CommitOpenAllChangesCommandQuickPickItem extends p.Ml{constructor(e){super("Open All Changes",new r.ThemeIcon("git-compare")),this.commit=e}execute(e){return l.bT(this.commit,e)}};let CommitOpenAllChangesWithDiffToolCommandQuickPickItem=class CommitOpenAllChangesWithDiffToolCommandQuickPickItem extends p.Ml{constructor(e){super("Open All Changes (difftool)",new r.ThemeIcon("git-compare")),this.commit=e}execute(){return l._O(this.commit)}};let CommitOpenAllChangesWithWorkingCommandQuickPickItem=class CommitOpenAllChangesWithWorkingCommandQuickPickItem extends p.Ml{constructor(e){super("Open All Changes with Working Tree",new r.ThemeIcon("git-compare")),this.commit=e}execute(e){return l.qM(this.commit,e)}};let CommitOpenChangesCommandQuickPickItem=class CommitOpenChangesCommandQuickPickItem extends p.Ml{constructor(e,t){super("Open Changes",new r.ThemeIcon("git-compare")),this.commit=e,this.file=t}execute(e){return l.t6(this.file,this.commit,e)}};let CommitOpenChangesWithDiffToolCommandQuickPickItem=class CommitOpenChangesWithDiffToolCommandQuickPickItem extends p.Ml{constructor(e,t){super("Open Changes (difftool)",new r.ThemeIcon("git-compare")),this.commit=e,this.file=t}execute(){return l.u8(this.file,this.commit)}};let CommitOpenChangesWithWorkingCommandQuickPickItem=class CommitOpenChangesWithWorkingCommandQuickPickItem extends p.Ml{constructor(e,t){super("Open Changes with Working File",new r.ThemeIcon("git-compare")),this.commit=e,this.file=t}execute(e){return l.i_(this.file,this.commit,e)}};let CommitOpenDirectoryCompareCommandQuickPickItem=class CommitOpenDirectoryCompareCommandQuickPickItem extends p.Ml{constructor(e){super("Open Directory Compare",new r.ThemeIcon("git-compare")),this.commit=e}execute(){return l.nR(this.commit)}};let CommitOpenDirectoryCompareWithWorkingCommandQuickPickItem=class CommitOpenDirectoryCompareWithWorkingCommandQuickPickItem extends p.Ml{constructor(e){super("Open Directory Compare with Working Tree",new r.ThemeIcon("git-compare")),this.commit=e}execute(){return l.eK(this.commit)}};let CommitOpenDetailsCommandQuickPickItem=class CommitOpenDetailsCommandQuickPickItem extends p.Ml{constructor(e){super("Open Details",new r.ThemeIcon("eye")),this.commit=e}execute(e){return l.bh(this.commit,{preserveFocus:e?.preserveFocus})}};let CommitOpenInGraphCommandQuickPickItem=class CommitOpenInGraphCommandQuickPickItem extends p.Ml{constructor(e){super("Open in Commit Graph",new r.ThemeIcon("gitlens-graph")),this.commit=e}execute(e){return l.KY(this.commit,{preserveFocus:e?.preserveFocus})}};let CommitOpenFilesCommandQuickPickItem=class CommitOpenFilesCommandQuickPickItem extends p.Ml{constructor(e){super("Open Files",new r.ThemeIcon("files")),this.commit=e}execute(e){return l.YJ(this.commit)}};let CommitOpenFileCommandQuickPickItem=class CommitOpenFileCommandQuickPickItem extends p.Ml{constructor(e,t){super("Open File",new r.ThemeIcon("file")),this.commit=e,this.file=t}execute(e){return l.U5(this.file,this.commit,e)}};let CommitOpenRevisionsCommandQuickPickItem=class CommitOpenRevisionsCommandQuickPickItem extends p.Ml{constructor(e){super("Open Files at Revision",new r.ThemeIcon("files")),this.commit=e}execute(e){return l.gd(this.commit)}};let CommitOpenRevisionCommandQuickPickItem=class CommitOpenRevisionCommandQuickPickItem extends p.Ml{constructor(e,t){super("Open File at Revision",new r.ThemeIcon("file")),this.commit=e,this.file=t}execute(e){return l.Av(this.file,this.commit,e)}};let CommitApplyFileChangesCommandQuickPickItem=class CommitApplyFileChangesCommandQuickPickItem extends p.Ml{constructor(e,t){super("Apply Changes"),this.commit=e,this.file=t}async execute(){return l.yw(this.file,this.commit)}};let CommitRestoreFileChangesCommandQuickPickItem=class CommitRestoreFileChangesCommandQuickPickItem extends p.Ml{constructor(e,t){super({label:"Restore",description:"aka checkout"}),this.commit=e,this.file=t}execute(){return l.ac(this.file,this.commit)}};let OpenChangedFilesCommandQuickPickItem=class OpenChangedFilesCommandQuickPickItem extends p.Ml{constructor(e,t){super(t??"Open All Changed Files",new r.ThemeIcon("files"),o.eq.OpenChangedFiles,[{uris:e.map(e=>e.uri)}])}};let OpenOnlyChangedFilesCommandQuickPickItem=class OpenOnlyChangedFilesCommandQuickPickItem extends p.Ml{constructor(e,t){super(t??"Open Changed & Close Unchanged Files",new r.ThemeIcon("files"),o.eq.OpenOnlyChangedFiles,[{uris:e.map(e=>e.uri)}])}}},2056:(e,t,i)=>{i.d(t,{Ml:()=>CommandQuickPickItem,ZA:()=>s,uC:()=>ActionQuickPickItem});var r=i(7304);function s(e){return{kind:r.QuickPickItemKind.Separator,label:e??""}}let CommandQuickPickItem=class CommandQuickPickItem{constructor(e,t,i,r,s){this.command=i,this.args=r,this.options=s,this.command=i,this.args=r,"string"==typeof e?this.label=e:Object.assign(this,e),null!=t&&(this.iconPath=t)}static fromCommand(e,t,i){return new CommandQuickPickItem("string"==typeof e?{label:e}:e,void 0,t,null==i?[]:Array.isArray(i)?i:[i])}static is(e){return e instanceof CommandQuickPickItem}label;description;detail;iconPath;execute(e){return void 0===this.command?Promise.resolve(void 0):r.commands.executeCommand(this.command,...this.args??[])}async onDidPressKey(e){if(this.options?.suppressKeyPress)return;let t=this.execute({preserveFocus:!0,preview:!1});this.options?.onDidPressKey?.(e,t),await t}};let ActionQuickPickItem=class ActionQuickPickItem extends CommandQuickPickItem{constructor(e,t){super(e,void 0,void 0),this.action=t}async execute(e){return this.action(e)}}},6776:(e,t,i)=>{i.d(t,{EB:()=>a,QN:()=>s,SE:()=>o,wF:()=>n});var r,s=((r=s||{})[r.Back=0]="Back",r[r.Cancel=1]="Cancel",r[r.LoadMore=2]="LoadMore",r[r.Noop=3]="Noop",r[r.RequiresVerification=4]="RequiresVerification",r[r.ExtendTrial=5]="ExtendTrial",r[r.RequiresPaidSubscription=6]="RequiresPaidSubscription",r[r.StartPreviewTrial=7]="StartPreviewTrial",r);function o(e){return"number"==typeof e&&null!=s[e]}function n(e,t,i){let r=i?.label,s=i?.detail;if(null==r)switch(e){case 0:r="Back";break;case 1:r="Cancel";break;case 2:r="Load more";break;case 3:r="Try again";break;case 7:r="Preview Pro",s="Preview Pro for 3-days to use this on privately hosted repos";break;case 5:r="Start Pro Trial",s="Continue to use this on privately hosted repos, free for an additional 7 days";break;case 4:r="Resend Verification Email",s="You must verify your email before you can continue";break;case 6:r="Upgrade to Pro",s="A paid plan is required to use this on privately hosted repos"}return{label:r,description:i?.description,detail:s,iconPath:i?.iconPath,alwaysShow:!0,picked:t,directive:e}}function a(e){return null!=e&&"directive"in e}},8144:(e,t,i)=>{i.d(t,{AB:()=>A,Al:()=>y,KK:()=>f,MT:()=>b,WC:()=>k,YN:()=>m,a4:()=>C,am:()=>w,iU:()=>v,qO:()=>GitCommandQuickPickItem});var r=i(7304),s=i(9132),o=i(1608),n=i(9964),a=i(7680),l=i(1080),h=i(1424),c=i(2152),u=i(4169),d=i(6944),p=i(1072),g=i(2056);let GitCommandQuickPickItem=class GitCommandQuickPickItem extends g.Ml{constructor(e,t){super(e,void 0,o.eq.GitCommands,[t],{suppressKeyPress:!0})}executeSteps(e){return(0,s.g)(n.Container.instance,this.args[0],e)}};async function m(e,t,i){let s="";if(i?.type===!0?s=!0===i.current&&e.current?"current branch":"branch":i?.type==="remote"?e.remote&&(s="remote branch"):i?.current===!0&&e.current&&(s="current branch"),i?.status&&!e.remote&&null!=e.upstream){let t=o.or.Dash;if(e.upstream.missing)t=o.or.Warning;else{let i=await e.getRemote();if(null!=i){let e,r;for(let{type:t}of i.urls)if("fetch"===t){if(e=!0,r)break}else if("push"===t&&(r=!0,e))break;e&&r?t=o.or.ArrowsRightLeft:r?t=o.or.ArrowRight:e&&(t=o.or.ArrowLeft)}}let i=`${e.getTrackingStatus({suffix:`${o.or.Space} `})}${t}${o.or.Space} ${e.upstream.name}`;s=s?`${s}${o.or.Space.repeat(2)}${i}`:i}return i?.ref&&(e.sha&&(s=s?`${s} $(git-commit)${o.or.Space}${(0,h.c5)(e.sha)}`:`$(git-commit)${o.or.Space}${(0,h.c5)(e.sha)}`),void 0!==e.date&&(s=s?`${s}${(0,p.eu)(o.or.Dot,2,2)}${e.formattedDate}`:e.formattedDate)),{label:i?.checked||i?.checked==null&&i?.current==="checkmark"&&e.current?`${e.name}${(0,p.eu)("$(check)",2)}`:e.name,description:s,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t??e.current,item:e,current:e.current,ref:e.name,remote:e.remote,iconPath:new r.ThemeIcon(e.starred?"star-full":"git-branch")}}async function f(e,t,i){let s;return(0,l.E$)(e)?w(e,t,{...i,icon:i?.icon==="avatar"||i?.icon}):(i?.icon==="avatar"&&(u.i.get("gitCommands.avatars")?s=await e.getAvatarUri():i.icon=!0),i?.icon===!0&&(s=new r.ThemeIcon("git-commit")),i?.compact)?{label:e.summary,description:`${e.author.name}, ${e.formattedDate}${(0,p.eu)("$(git-commit)",2,1)}${e.shortSha}${(0,p.eu)(o.or.Dot,2,2)}${e.formatStats({compact:!0})}`,alwaysShow:i.alwaysShow,buttons:i.buttons,picked:t,item:e,iconPath:s}:{label:e.summary,description:"",detail:`${o.or.Space.repeat(2)}${e.author.name}, ${e.formattedDate}${(0,p.eu)("$(git-commit)",2,1)}${e.shortSha}${(0,p.eu)(o.or.Dot,2,2)}${e.formatStats({compact:!0})}`,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,iconPath:s}}function w(e,t,i){let s=null==e.number?"":`${e.number}: `;return i?.compact?{label:`${s}${e.summary}`,description:`${e.formattedDate}${(0,p.eu)(o.or.Dot,2,2)}${e.formatStats({compact:!0})}`,alwaysShow:i.alwaysShow,buttons:i.buttons,picked:t,item:e,iconPath:i.icon?new r.ThemeIcon("archive"):void 0}:{label:`${s}${e.summary}`,description:"",detail:`${o.or.Space.repeat(2)}${e.formattedDate}${(0,p.eu)(o.or.Dot,2,2)}${e.formatStats({compact:!0})}`,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,iconPath:i?.icon?new r.ThemeIcon("archive"):void 0}}async function v(e,t,i){return{label:e.label,description:e.current?"you":e.email,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,iconPath:u.i.get("gitCommands.avatars")?await e.getAvatarUri():void 0}}function y(e,t,i,s){let n;return""===e?{label:"Working Tree",description:"",alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:i,item:(0,h.op)(e,t,{refType:"revision",name:"Working Tree"}),current:!1,ref:e,remote:!1,iconPath:s?.icon?new r.ThemeIcon("file-directory"):void 0}:"HEAD"===e?{label:"HEAD",description:"",alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:i,item:(0,h.op)(e,t,{refType:"revision",name:"HEAD"}),current:!1,ref:e,remote:!1,iconPath:s?.icon?new r.ThemeIcon("git-branch"):void 0}:("string"==typeof e?n=(0,h.op)(e,t):e=(n=e).ref,(0,h.U1)(e))?{label:`Range ${n.name}`,description:"",alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:i,item:n,current:!1,ref:e,remote:!1}:{label:`Commit ${n.name}`,description:s?.ref?`$(git-commit)${o.or.Space}${e}`:"",alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:i,item:n,current:!1,ref:e,remote:!1}}function b(e,t,i){let s="";if(i?.type&&(s="remote"),i?.upstream){let t=(0,c.yK)(e);s=s?`${s}${(0,p.eu)(o.or.Dot,2,2)}${t}`:t}return{label:i?.checked?`${e.name}${(0,p.eu)("$(check)",2)}`:e.name,description:s,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,iconPath:new r.ThemeIcon("cloud")}}async function C(e,t,i){let r;(i?.branch||i?.status)&&(r=await e.getStatus());let s="";if(i?.branch&&null!=r&&(s=r.branch),i?.status&&null!=r){let e="";0!==r.files.length&&(e=r.getFormattedDiffStatus({compact:!0,prefix:(0,p.eu)(o.or.Dot,2,2)}));let t=r.getUpstreamStatus({prefix:s?`${o.or.Space} `:""}),i=`${t}${e}`;i&&(s=s?`${s}${i}`:i)}if(i?.fetched){let t=await e.getLastFetched();if(0!==t){let e=`Last fetched ${(0,d.Yn)(new Date(t))}`;s=s?`${s}${(0,p.eu)(o.or.Dot,2,2)}${e}`:e}}return{label:e.formattedName,description:s,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,repoPath:e.path}}function A(e,t,i){let s="";if(i?.type&&(s="tag"),i?.ref&&(s=`${s}${(0,p.eu)("$(git-commit)",s?2:0,1)}${(0,h.c5)(e.sha)}`,s=`${s?`${s}${(0,p.eu)(o.or.Dot,2,2)}`:""}${e.formattedDate}`),i?.message){let t=(0,a.I)(e.message);s=s?`${s}${(0,p.eu)(o.or.Dot,2,2)}${t}`:t}return{label:i?.checked?`${e.name}${(0,p.eu)("$(check)",2)}`:e.name,description:s,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,current:!1,ref:e.name,remote:!1,iconPath:new r.ThemeIcon("tag")}}function k(e,t,i,s){let n,a,l="";switch(s?.type&&(l="worktree"),s?.status!=null&&(l+=s.status.hasChanges?(0,p.eu)(`Uncommited changes (${s.status.getFormattedDiffStatus()})`,l?2:0,0):(0,p.eu)("No changes",l?2:0,0)),e.type){case"bare":a="(bare)",n=new r.ThemeIcon("folder");break;case"branch":a=e.branch,n=new r.ThemeIcon("git-branch");break;case"detached":a=(0,h.c5)(e.sha),n=new r.ThemeIcon("git-commit")}return{label:s?.checked?`${a}${(0,p.eu)("$(check)",2)}`:a,description:l,detail:s?.path?i?`${o.or.Warning} Unable to locate $(folder) ${e.friendlyPath}`:`In $(folder) ${e.friendlyPath}`:void 0,alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:t,item:e,opened:e.opened,hasChanges:s?.status?.hasChanges,iconPath:n}}},7464:(e,t,i)=>{i.d(t,{Q:()=>g,m:()=>m});var r,s=i(7304),o=i(8104),n=i(3832),a=i(9964),l=i(6644),h=i(1144),c=i(5920),u=i(1424),d=i(3284),p=i(8144),g=((r=g||{})[r.Branches=1]="Branches",r[r.Tags=2]="Tags",r[r.WorkingTree=4]="WorkingTree",r[r.HEAD=8]="HEAD",r[r.BranchesAndTags=3]="BranchesAndTags",r[r.All=15]="All",r);async function m(e,t,i,r){let p,g;let m=s.window.createQuickPick();m.ignoreFocusOut=(0,d.u4)(),m.title=t,m.placeholder=r?.allowRevisions!=null&&!1!==r.allowRevisions?`${i} (or enter a revision using #)`:i,m.matchOnDescription=!0;let w=[];if(r?.keyboard!=null){let{keyboard:e}=r;(p=a.Container.instance.keyboard.createScope(Object.fromEntries(e.keys.map(t=>[t,{onDidPressKey:async t=>{if(0!==m.activeItems.length){let[i]=m.activeItems;if(null!=i){let r=m.ignoreFocusOut;m.ignoreFocusOut=!0,await e.onDidPressKey(t,i),m.ignoreFocusOut=r}}}}])))).start(),w.push(p)}let v=new s.CancellationTokenSource,y=f(e,r);r?.autoPick&&(y=y.then(e=>(e.length<=1&&(g=e[0],v.cancel()),e))),m.busy=!0,m.show();let b=(0,n.I$)(a.Container.instance.git.getRepository(e),{buttons:[o.gt],ranges:r?.allowRevisions&&"boolean"!=typeof r.allowRevisions?r.allowRevisions.ranges:void 0});m.items=await y,m.busy=!1;try{let e=await new Promise(e=>{w.push(v.token.onCancellationRequested(()=>m.hide()),m.onDidHide(()=>e(void 0)),m.onDidAccept(()=>{0!==m.activeItems.length&&e(m.activeItems[0])}),m.onDidChangeValue(async e=>{null!=p&&(0!==e.length?p.pause(["left","ctrl+left","right","ctrl+right"]):p.resume()),r?.allowRevisions&&!await b(m,e)&&(m.items=await y)}),m.onDidTriggerItemButton(({button:e,item:{item:t}})=>{e===o.gt&&((0,u.MN)(t)?(0,l.gR)(t,{select:!0,expand:!0}):(0,u._A)(t)?(0,c.gR)(t,{select:!0,expand:!0}):(0,u.yc)(t)&&(0,h.bh)(t,{pin:!1,preserveFocus:!0}))}))});if(null==e&&null!=g&&(e=g),null==e)return;return e.item}finally{m.dispose(),w.forEach(e=>void e.dispose())}}async function f(e,t){let i=t?.include??3,r=await (0,n.Ok)(a.Container.instance.git.getRepository(e),i?["branches","tags"]:i?["branches"]:i?["tags"]:[],{buttons:[o.gt],filter:t?.filter,picked:t?.picked,sort:t?.sort??{branches:{current:!1},tags:{}}}),s=t?.picked;if(s){let e=r.findIndex(e=>e.ref===s);-1!==e&&r.unshift(...r.splice(e,1))}return 8&i&&r.unshift((0,p.Al)("HEAD",e,void 0,{icon:!0})),4&i&&r.unshift((0,p.Al)("",e,void 0,{icon:!0})),r}},716:(e,t,i)=>{i.d(t,{U9:()=>OpenRemoteResourceCommandQuickPickItem,an:()=>p,qy:()=>CopyRemoteResourceCommandQuickPickItem});var r=i(7304),s=i(8104),o=i(1608),n=i(9964),a=i(2452),l=i(2152),h=i(2036),c=i(2356),u=i(3284),d=i(2056);let ConfigureCustomRemoteProviderCommandQuickPickItem=class ConfigureCustomRemoteProviderCommandQuickPickItem extends d.Ml{constructor(){super({label:"See how to configure a custom remote provider..."})}async execute(){await r.env.openExternal(r.Uri.parse("https://help.gitkraken.com/gitlens/gitlens-settings/#remote-provider-integration-settings"))}};let CopyOrOpenRemoteCommandQuickPickItem=class CopyOrOpenRemoteCommandQuickPickItem extends d.Ml{constructor(e,t,i,r){super({label:`$(repo) ${e.provider.path}`,description:e.name,buttons:r}),this.remote=e,this.resource=t,this.clipboard=i}async execute(){let e=this.resource;if(e.type===h.o.Comparison)(0,a.IB)(e.base)===this.remote.name&&(e={...e,base:(0,a.ak)(e.base)}),(0,a.IB)(e.compare)===this.remote.name&&(e={...e,compare:(0,a.ak)(e.compare)});else if(e.type===h.o.CreatePullRequest){let t=e.base.branch;if(null==t&&null==(t=await n.Container.instance.git.getDefaultBranchName(this.remote.repoPath,this.remote.name))&&this.remote.hasIntegration()){let e=n.Container.instance.integrations.getByRemote(this.remote),i=await e?.getDefaultBranch?.(this.remote.provider.repoDesc);t=i?.name}e={...e,base:{branch:t,remote:{path:this.remote.path,url:this.remote.url}}}}else if(e.type===h.o.File&&null!=e.branchOrTag&&("bitbucket"===this.remote.provider.id||"bitbucket-server"===this.remote.provider.id)){let{branchOrTag:t}=e,[i,r]=await Promise.allSettled([n.Container.instance.git.getBranches(this.remote.repoPath,{filter:e=>e.name===t||e.getNameWithoutRemote()===t}),n.Container.instance.git.getTags(this.remote.repoPath,{filter:e=>e.name===t})]),s=c.Cv(i)?.values[0]?.sha??c.Cv(r)?.values[0]?.sha;s&&(e={...e,type:h.o.Revision,sha:s})}await (this.clipboard?this.remote.provider.copy(e):this.remote.provider.open(e))}setAsDefault(){return this.remote.setAsDefault(!0)}};let CopyRemoteResourceCommandQuickPickItem=class CopyRemoteResourceCommandQuickPickItem extends d.Ml{constructor(e,t){let i=(0,l.U$)(e);super(`Copy Link to ${(0,h.X)(t)} for ${i?.length?i[0].name:"Remote"}${i?.length===1?"":o.or.Ellipsis}`,new r.ThemeIcon("copy"),o.eq.OpenOnRemote,[{resource:t,remotes:e,clipboard:!0}])}async onDidPressKey(e){await super.onDidPressKey(e),r.window.showInformationMessage("URL copied to the clipboard")}};let OpenRemoteResourceCommandQuickPickItem=class OpenRemoteResourceCommandQuickPickItem extends d.Ml{constructor(e,t){let i=(0,l.U$)(e);super(`Open ${(0,h.X)(t)} on ${i?.length===1?i[0].name:`${i?.length?i[0].name:"Remote"}${o.or.Ellipsis}`}`,new r.ThemeIcon("link-external"),o.eq.OpenOnRemote,[{resource:t,remotes:e,clipboard:!1}])}};async function p(e,t,i,o,n){let a;let{autoPick:l,clipboard:h,setDefault:c}={autoPick:!1,clipboard:!1,setDefault:!0,...n};if(0===o.length)a=[new ConfigureCustomRemoteProviderCommandQuickPickItem],t="No auto-detected or configured remote providers found";else{if("default"===l&&o.length>1){let e=o.find(e=>e.default);null!=e&&(o=[e])}a=o.map(e=>new CopyOrOpenRemoteCommandQuickPickItem(e,i,h,c?[s.Ks]:void 0))}if(l&&1===o.length)return a[0];let d=r.window.createQuickPick();d.ignoreFocusOut=(0,u.u4)();let p=[];try{let i=await new Promise(i=>{p.push(d.onDidHide(()=>i(void 0)),d.onDidAccept(()=>{0!==d.activeItems.length&&i(d.activeItems[0])}),d.onDidTriggerItemButton(async e=>{e.button===s.Ks&&e.item instanceof CopyOrOpenRemoteCommandQuickPickItem&&(await e.item.setAsDefault(),i(e.item))})),d.title=e,d.placeholder=t,d.matchOnDetail=!0,d.items=a,d.show()});if(null==i)return;return i}finally{d.dispose(),p.forEach(e=>void e.dispose())}}},1296:(e,t,i)=>{i.d(t,{Gf:()=>d,a0:()=>u,qW:()=>p,us:()=>c});var r=i(7304),s=i(9964),o=i(9455),n=i(7348),a=i(3284),l=i(2056),h=i(8144);async function c(e,t,i,r,o){let n=s.Container.instance.git.getBestRepository(e,t);if(null==n||o?.filter==null||await o.filter(n)||(n=void 0),null!=n)return n;let a=await d(i,r,o);if(a instanceof l.Ml){await a.execute();return}return a?.item}async function u(e,t,i,r){let o;if(null==(o=null==i?s.Container.instance.git.highlander:await s.Container.instance.git.getOrOpenRepository(i))||r?.filter==null||await r.filter(o)||(o=void 0),null!=o)return o;let n=await d(e,t,r);if(n instanceof l.Ml){await n.execute();return}return n?.item}async function d(e,t="Choose a repository",i){let l;if(null==i||Array.isArray(i)||null!=i.filter||(i=void 0),null==i||Array.isArray(i))l=await Promise.all((0,n.kH)(i??s.Container.instance.git.openRepositories,e=>(0,h.a4)(e,void 0,{branch:!0,status:!0})));else{let{filter:e}=i;l=await (0,o.Q3)(s.Container.instance.git.openRepositories,async t=>await e(t)?(0,h.a4)(t,void 0,{branch:!0,status:!0}):void 0)}if(0===l.length)return;let c=r.window.createQuickPick();c.ignoreFocusOut=(0,a.u4)();let u=[];try{let i=await new Promise(i=>{u.push(c.onDidHide(()=>i(void 0)),c.onDidAccept(()=>{0!==c.activeItems.length&&i(c.activeItems[0])})),c.title=e,c.placeholder=t,c.matchOnDescription=!0,c.matchOnDetail=!0,c.items=l,c.show()});if(null==i)return;return i}finally{c.dispose(),u.forEach(e=>void e.dispose())}}async function p(e,t="Choose a repository",i){let l;if(null==i||Array.isArray(i)||null!=i.filter||(i=void 0),null==i||Array.isArray(i))l=await Promise.all((0,n.kH)(i??s.Container.instance.git.openRepositories,e=>(0,h.a4)(e,void 0,{branch:!0,status:!0})));else{let{filter:e}=i;l=await (0,o.Q3)(s.Container.instance.git.openRepositories,async t=>await e(t)?(0,h.a4)(t,void 0,{branch:!0,status:!0}):void 0)}if(0===l.length)return[];let c=r.window.createQuickPick();c.ignoreFocusOut=(0,a.u4)();let u=[];try{let i=await new Promise(i=>{u.push(c.onDidHide(()=>i(void 0)),c.onDidAccept(()=>i(c.selectedItems))),c.title=e,c.placeholder=t,c.matchOnDescription=!0,c.matchOnDetail=!0,c.items=l,c.canSelectMany=!0,c.selectedItems=l,c.show()});if(null==i)return[];return i}finally{c.dispose(),u.forEach(e=>void e.dispose())}}},7068:(e,t,i)=>{i.d(t,{w3:()=>l,y4:()=>Repositories});var r=i(2164),s=i(1608),o=i(2812),n=i(3732),a=i(3728);function l(e){let{path:t}=h(e);return t}function h(e){let t;switch(e.scheme.toLowerCase()){case s.cl.File:return{path:t=(0,n.ay)(e.fsPath),ignoreCase:!r.Co};case s.cl.Git:return{path:t=47===(t=e.path).charCodeAt(t.length-1)?t.slice(1,-1):t.slice(1),ignoreCase:!r.Co};case s.cl.GitLens:{t=e.path;let i=(0,o.Ad)(e.authority);return null==i.uncPath||t.startsWith(i.uncPath)||(t=`${i.uncPath}${e.path}`),{path:t=47===t.charCodeAt(t.length-1)?t.slice(1,-1):t.startsWith("//")?t:t.slice(1),ignoreCase:!r.Co}}case s.cl.Virtual:case s.cl.GitHub:{t=47===(t=e.path).charCodeAt(t.length-1)?t.slice(1,-1):t.slice(1);let i=e.authority?.split("+",1)[0];return{path:i?`${i}/${t}`:t,ignoreCase:!1}}case s.cl.Vsls:case s.cl.VslsScc:return{path:t=47===(t=(0,n.eO)(e.path)).charCodeAt(t.length-1)?t.slice(1,-1):t.slice(1),ignoreCase:!1};case s.cl.PRs:{t=47===(t=e.path).charCodeAt(t.length-1)?t.slice(1,-1):t.slice(1);let i=e.authority?.split("+",1)[0];if(i===s.cl.GitHub)return{path:i?`${i}/${t}`:t,ignoreCase:!1};return{path:t,ignoreCase:!r.Co}}default:return{path:t=47===(t=e.path).charCodeAt(t.length-1)?t.slice(1,-1):t.slice(1),ignoreCase:!1}}}let Repositories=class Repositories{_trie;_count=0;constructor(){this._trie=new a.Ud(h)}get count(){return this._count}add(e){let t=this._trie.set(e.uri,e);return t&&this._count++,t}clear(){this._count=0,this._trie.clear()}forEach(e,t){for(let i of this._trie.getDescendants())e.call(t,i)}get(e){return this._trie.get(e)}getClosest(e){return this._trie.getClosest(e)}has(e){return this._trie.has(e)}remove(e,t=!0){let i=this._trie.delete(e,t);return i&&this._count--,i}values(){return this._trie.getDescendants()}}},9455:(e,t,i)=>{i.d(t,{Gs:()=>n,IJ:()=>u,Q3:()=>a,Se:()=>d,WR:()=>h,YN:()=>c,ai:()=>l,cz:()=>o,kr:()=>s,oz:()=>p});var r=i(7348);function s(e){let t=0;for(let i of e)t+=i.length;return t}function o(e){return null==e?void 0:Array.isArray(e)?e:[e]}function n(e,t){let i=0;return e.reduce((e,r)=>{let s=t(r,i++);return null!=s&&e.push(s),e},[])}async function a(e,t){let i=[];for(let r of e){let e=await t(r);null!=e&&i.push(e)}return i}function l(e,t){let i=e.length;for(;i--;)if(t(e[i],i,e))return i;return -1}function h(e,t){let i=[],r=e.length;t:for(let s of e[0]){let o=r-1;for(;o--;)if(!e[o+1].some(e=>t(e,s)))break t;i.some(e=>t(e,s))||i.push(s)}return i}function c(e){return"string"==typeof e[0]}function u(e,t,i,r=!1,s){let o={name:"",relativePath:"",children:new Map,descendants:[]},n=e.reduce((e,r)=>{let s=e,o="";for(let e of t(r)){o=i(o,e),void 0===s.children&&(s.children=new Map);let t=s.children.get(e);void 0===t&&(t={name:e,relativePath:o,parent:s,children:void 0,descendants:void 0},s.children.set(e,t)),void 0===s.descendants&&(s.descendants=[]),s.descendants.push(r),s=t}return s.value=r,e},o);return r&&(n=function e(t,i,r=!0,s){if(void 0===t.children)return t;let o=[...t.children.values()];for(let t of o)e(t,i,!1,s);if(!r&&1===o.length){let e=o[0];(void 0===e.value||s?.(e.value))&&(t.name=i(t.name,e.name),t.relativePath=e.relativePath,t.children=e.children,t.descendants=e.descendants,t.value=e.value)}return t}(n,i,!0,s)),n}function d(e,t){return(0,r.kn)(new Set(e),t)}function p(e,t){return t<0?[e,[]]:[e.slice(0,t),e.slice(t)]}},9444:(e,t,i)=>{i.d(t,{Cu:()=>a,Gu:()=>h,_G:()=>TimedCancellationSource,_W:()=>l,sZ:()=>n});var r=i(7304),s=i(7348),o=i(2356);let TimedCancellationSource=class TimedCancellationSource{cancellation=new r.CancellationTokenSource;timer;constructor(e){this.timer=setTimeout(()=>this.cancellation.cancel(),e)}dispose(){clearTimeout(this.timer),this.cancellation.dispose()}cancel(){clearTimeout(this.timer),this.cancellation.cancel()}get token(){return this.cancellation.token}};function n(e,t,i,r){let s,n;if(!(0,o.um)(e))return Promise.resolve({value:e,paused:!1});if(null==t&&null==i)return e.then(e=>({value:e,paused:!1}));let a=Promise.race([e.then(e=>(s?.dispose(),n?.dispose(),t?.isCancellationRequested)?{value:Promise.resolve(e),paused:!0,reason:"cancelled"}:{value:e,paused:!1}),new Promise(r=>{let o=t=>{s?.dispose(),n?.dispose(),r({value:e,paused:!0,reason:t})};if(s=t?.onCancellationRequested(()=>o("cancelled")),null!=i){if("number"==typeof i){let e=setTimeout(()=>o("timedout"),i);n={dispose:()=>clearTimeout(e)}}else n=i.onCancellationRequested(()=>o("timedout"))}})]);return null==r?a:a.then(e=>(e.paused&&setTimeout(()=>r(e),0),e))}async function a(e,t,i,r,o){let a;if(0===e.size)return e;null!=r&&"number"==typeof r&&(r=(a=new TimedCancellationSource(r)).token);let l=await Promise.all((0,s.kH)(e,([e,s])=>n(s.catch(e=>!t&&e instanceof Error?e:void 0),i,r).then(t=>[e,t])));if(a?.dispose(),null!=o&&l.some(([,e])=>e.paused)){async function h(){let e=new Map;for(let[t,i]of l)e.set(t,{value:i.paused?await i.value:i.value,paused:!1});return e}let e=l.some(([,e])=>e.paused&&"cancelled"===e.reason);o({value:h(),paused:!0,reason:e?"cancelled":"timedout"})}return new Map(l)}async function l(e,t,i,r){let o;if(0===e.size)return e;null!=i&&"number"==typeof i&&(i=(o=new TimedCancellationSource(i)).token);let a=await Promise.all((0,s.kH)(e,([e,[r,...s]])=>null==r?[e,[void 0,...s]]:n(r.catch(()=>void 0),t,i).then(t=>[e,[t,...s]])));if(o?.dispose(),null!=r&&a.some(([,[e]])=>e?.paused??!1)){async function l(){let e=new Map;for(let[t,[i,...r]]of a)e.set(t,[{value:i?.paused?await i.value:i?.value,paused:!1},...r]);return e}let e=a.some(([,[e]])=>e?.paused&&"cancelled"===e.reason);r({value:l(),paused:!0,reason:e?"cancelled":"timedout"})}return new Map(a)}async function h(e,t,i,r){let s;null!=i&&"number"==typeof i&&(i=(s=new TimedCancellationSource(i)).token);let o=e.then(e=>null==e?e:l(e,t,i,r));o.then(()=>s?.dispose());let a=await n(e,t,i);return a.paused?{value:o,paused:a.paused,reason:a.reason}:{value:await o,paused:!1}}},7824:(e,t,i)=>{i.d(t,{AR:()=>g,CA:()=>w,GQ:()=>l,SK:()=>u,Yh:()=>c,gf:()=>m,iK:()=>d,oF:()=>y,or:()=>h,qx:()=>f,w3:()=>v,wb:()=>p});var r=i(7304),s=i(1608),o=i(9964),n=i(6240);let a=[];function l(){return e=>{a.push(e)}}function h(e,t,i){return r.commands.registerCommand(e,function(...i){o.Container.instance.telemetry.sendEvent("command",{command:e}),t.call(this,...i)},i)}function c(e,t,i){return r.commands.registerCommand(e,function(...i){o.Container.instance.telemetry.sendEvent("command",{command:e,webview:(0,n.kt)(i[0])?i[0].webview:"<missing>"}),t.call(this,...i)},i)}function u(e){return a.map(t=>new t(e))}function d(e){return e}function p(e,t){return r.commands.executeCommand(`${s.eq.ActionPrefix}${e}`,{...t,type:e})}function g(e,t,...i){return{command:e,title:t,arguments:i}}function m(e,...t){return r.commands.executeCommand(e,...t)}function f(e,t,...i){return{command:e,title:t,arguments:i}}function w(e,...t){return"setContext"!=e&&"vscode.executeDocumentSymbolProvider"!==e&&"vscode.changes"!==e&&"vscode.diff"!==e&&"vscode.open"!==e&&o.Container.instance.telemetry.sendEvent("command/core",{command:e}),r.commands.executeCommand(e,...t)}function v(e,...t){return o.Container.instance.telemetry.sendEvent("command/core",{command:e}),r.commands.executeCommand(e,...t)}function y(e,t,i){return r.commands.executeCommand(e,t,i)}},6892:(e,t,i)=>{i.d(t,{K:()=>r});let Comparer=class Comparer{};let UriComparer=class UriComparer extends Comparer{equals(e,t,i={exact:!1}){return e===t||null!=e&&null!=t&&(i.exact?e.toString()===t.toString():e.scheme===t.scheme&&e.fsPath===t.fsPath)}};let TextEditorComparer=class TextEditorComparer extends Comparer{equals(e,t,i={usePosition:!1}){return e===t||null!=e&&null!=t&&(!i.usePosition||e.viewColumn===t.viewColumn)&&e.document===t.document}};new TextEditorComparer;let r=new UriComparer},4169:(e,t,i)=>{i.d(t,{E:()=>Configuration,i:()=>n});var r=i(7304),s=i(1608),o=i(4204);let Configuration=class Configuration{static configure(e){e.subscriptions.push(r.workspace.onDidChangeConfiguration(n.onConfigurationChanged,n))}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeAny=new r.EventEmitter;get onDidChangeAny(){return this._onDidChangeAny.event}onConfigurationChanged(e){this._onDidChangeAny.fire(e),e.affectsConfiguration(s.O_)&&(this._overrides?.onDidChange!=null&&(e=this._overrides.onDidChange(e)),this._onDidChange.fire(e))}_overrides;applyOverrides(e){this._overrides=e}clearOverrides(){null!=this._overrides&&(this._overrides.get=void 0,this._overrides.getAll=void 0,queueMicrotask(()=>this._overrides=void 0))}get(e,t,i,o){let n=void 0===i?r.workspace.getConfiguration(s.O_,t).get(e):r.workspace.getConfiguration(s.O_,t).get(e,i);return o||this._overrides?.get==null?n:this._overrides.get(e,n)}getAll(e){let t=r.workspace.getConfiguration().get(s.O_);return e||this._overrides?.getAll==null?t:this._overrides.getAll(t)}getAny(e,t,i){return void 0===i?r.workspace.getConfiguration(void 0,t).get(e):r.workspace.getConfiguration(void 0,t).get(e,i)}getCore(e,t,i){return void 0===i?r.workspace.getConfiguration(void 0,t).get(e):r.workspace.getConfiguration(void 0,t).get(e,i)}changed(e,t,i){return null==e||(Array.isArray(t)?t.some(t=>e.affectsConfiguration(`${s.O_}.${t}`,i)):e.affectsConfiguration(`${s.O_}.${t}`,i))}changedAny(e,t,i){return null==e||(Array.isArray(t)?t.some(t=>e.affectsConfiguration(t,i)):e.affectsConfiguration(t,i))}changedCore(e,t,i){return null==e||(Array.isArray(t)?t.some(t=>e.affectsConfiguration(t,i)):e.affectsConfiguration(t,i))}inspect(e,t){return r.workspace.getConfiguration(s.O_,t).inspect(void 0===e?s.O_:e)}inspectAny(e,t){return r.workspace.getConfiguration(void 0,t).inspect(e)}inspectCore(e,t){return r.workspace.getConfiguration(void 0,t).inspect(e)}isUnset(e,t){let i=this.inspect(e,t);return void 0===i.workspaceFolderValue&&void 0===i.workspaceValue&&void 0===i.globalValue}async migrate(e,t,i){let s=this.inspect(e);if(void 0===s)return!1;let o=!1;return void 0!==s.globalValue&&(await this.update(t,null!=i.migrationFn?i.migrationFn(s.globalValue):s.globalValue,r.ConfigurationTarget.Global),o=!0),void 0!==s.workspaceValue&&(await this.update(t,null!=i.migrationFn?i.migrationFn(s.workspaceValue):s.workspaceValue,r.ConfigurationTarget.Workspace),o=!0),void 0!==s.workspaceFolderValue&&(await this.update(t,null!=i.migrationFn?i.migrationFn(s.workspaceFolderValue):s.workspaceFolderValue,r.ConfigurationTarget.WorkspaceFolder),o=!0),o||void 0===i.fallbackValue||(await this.update(t,i.fallbackValue,r.ConfigurationTarget.Global),o=!0),o}async migrateIfMissing(e,t,i){let s=this.inspect(e);if(void 0===s)return;let o=this.inspect(t);void 0!==s.globalValue&&o?.globalValue===void 0&&await this.update(t,null!=i.migrationFn?i.migrationFn(s.globalValue):s.globalValue,r.ConfigurationTarget.Global),void 0!==s.workspaceValue&&o?.workspaceValue===void 0&&await this.update(t,null!=i.migrationFn?i.migrationFn(s.workspaceValue):s.workspaceValue,r.ConfigurationTarget.Workspace),void 0!==s.workspaceFolderValue&&o?.workspaceFolderValue===void 0&&await this.update(t,null!=i.migrationFn?i.migrationFn(s.workspaceFolderValue):s.workspaceFolderValue,r.ConfigurationTarget.WorkspaceFolder)}matches(e,t,i){return e===t}name(e){return e}update(e,t,i){return r.workspace.getConfiguration(s.O_).update(e,t,i)}updateAny(e,t,i,s){return r.workspace.getConfiguration(void 0,i===r.ConfigurationTarget.Global?void 0:s).update(e,t,i)}updateEffective(e,t){let i=this.inspect(e);return void 0!==i.workspaceFolderValue?t===i.workspaceFolderValue?Promise.resolve(void 0):this.update(e,t,r.ConfigurationTarget.WorkspaceFolder):void 0!==i.workspaceValue?t===i.workspaceValue?Promise.resolve(void 0):this.update(e,t,r.ConfigurationTarget.Workspace):i.globalValue===t||void 0===i.globalValue&&t===i.defaultValue?Promise.resolve(void 0):this.update(e,(0,o.eY)(t,i.defaultValue)?void 0:t,r.ConfigurationTarget.Global)}};let n=new Configuration},3664:(e,t,i)=>{i.d(t,{Qr:()=>h,kz:()=>a,wp:()=>l});var r=i(7304),s=i(7824);let o=new Map,n=new r.EventEmitter,a=n.event;function l(e,t){return o.get(e)??t}async function h(e,t){o.get(e)!==t&&(o.set(e,t),await (0,s.CA)("setContext",e,t),n.fire(e))}},6944:(e,t,i)=>{let r,s,o,n;i.d(t,{QZ:()=>p,S6:()=>f,Yn:()=>g,_m:()=>m,uO:()=>d});let a=/(?<literal>\[.*?\])|(?<year>YYYY|YY)|(?<month>M{1,4})|(?<day>Do|DD?)|(?<weekday>d{2,4})|(?<hour>HH?|hh?)|(?<minute>mm?)|(?<second>ss?)|(?<fractionalSecond>SSS)|(?<dayPeriod>A|a)|(?<timeZoneName>ZZ?)/g,l=/(?<dateStyle>full|long|medium|short)(?:\+(?<timeStyle>full|long|medium|short))?/,h=[["year",629856e5,31536e6,"yr"],["month",2628e6,2628e6,"mo"],["week",6048e5,6048e5,"wk"],["day",864e5,864e5,"d"],["hour",36e5,36e5,"h"],["minute",6e4,6e4,"m"],["second",1e3,1e3,"s"]],c=new Map,u=new Map;function d(e){s="string"==typeof e?"system"===e||0===e.trim().length?void 0:[e]:e??void 0,o=void 0,n=void 0,c.clear(),u.clear(),r=void 0}function p(e,t){let i=new Date(e.getTime());for(let[e,r]of Object.entries(t))if(r)switch(e){case"years":i.setFullYear(i.getFullYear()+r);break;case"months":i.setMonth(i.getMonth()+r);break;case"days":i.setDate(i.getDate()+r);break;case"hours":i.setHours(i.getHours()+r);break;case"minutes":i.setMinutes(i.getMinutes()+r);break;case"seconds":i.setSeconds(i.getSeconds()+r)}return i}function g(e,t){let i=("number"==typeof e?e:e.getTime())-new Date().getTime();for(let[e,a,l,c]of h){let h=Math.abs(i);if(h>=a||1e3===a){if(t){if(null==r&&(r=null!=n?n.resolvedOptions().locale:null!=o?o.resolvedOptions().locale:(n=new Intl.RelativeTimeFormat(s,{localeMatcher:"best fit",numeric:"always",style:"narrow"})).resolvedOptions().locale),"en"===r||r?.startsWith("en-")){let e=Math.round(h/l);return`${e}${c}`}return null==n&&(n=new Intl.RelativeTimeFormat(s,{localeMatcher:"best fit",numeric:"always",style:"narrow"})),n.format(Math.round(i/l),e)}return null==o&&(o=new Intl.RelativeTimeFormat(s,{localeMatcher:"best fit",numeric:"auto",style:"long"})),o.format(Math.round(i/l),e)}}return""}function m(e,t,i,r=!0){t=t??void 0;let o=`${i??""}:${t}`,n=c.get(o);if(null==n){let e;let h=function(e){if(null==e)return{localeMatcher:"best fit",dateStyle:"full",timeStyle:"short"};let t=l.exec(e);if(t?.groups!=null){let{dateStyle:e,timeStyle:i}=t.groups;return{localeMatcher:"best fit",dateStyle:e||"full",timeStyle:i||void 0}}let i={localeMatcher:"best fit"};for(let{groups:t}of e.matchAll(a))if(null!=t){for(let[e,r]of Object.entries(t))if(null!=r)switch(e){case"year":i.year=4===r.length?"numeric":"2-digit";break;case"month":switch(r.length){case 4:i.month="long";break;case 3:i.month="short";break;case 2:i.month="2-digit";break;case 1:i.month="numeric"}break;case"day":"DD"===r?i.day="2-digit":i.day="numeric";break;case"weekday":switch(r.length){case 4:i.weekday="long";break;case 3:i.weekday="short";break;case 2:i.weekday="narrow"}break;case"hour":i.hour=2===r.length?"2-digit":"numeric",i.hour12="hh"===r||"h"===r;break;case"minute":i.minute=2===r.length?"2-digit":"numeric";break;case"second":i.second=2===r.length?"2-digit":"numeric";break;case"fractionalSecond":i.fractionalSecondDigits=3;break;case"dayPeriod":i.dayPeriod="narrow",i.hour12=!0,i.hourCycle="h12";break;case"timeZoneName":i.timeZoneName=2===r.length?"long":"short"}}return i}(t);e=null==i?s:"system"===i?void 0:[i],n=new Intl.DateTimeFormat(e,h),r&&c.set(o,n)}if(null==t||l.test(t))return n.format(e);let h=n.formatToParts(e);return t.replace(a,(t,o,n,a,l,u,d,p,g,m,f,v,y,b,C)=>{if(null!=o)return o.substring(1,o.length-1);for(let[t,o]of Object.entries(C)){if(null==o)continue;let n=h.find(e=>e.type===t);if("Do"===o&&n?.type==="day")return function(e){let t=e%100;return`${e}${w[(t-20)%10]??w[t]??"th"}`}(Number(n.value));if("a"===o&&n?.type==="dayPeriod"){let t=(function(e){let t=`${i??""}:time:${e}`,o=c.get(t);if(null==o){let n;n=null==i?s:"system"===i?void 0:[i],o=new Intl.DateTimeFormat(n,{localeMatcher:"best fit",timeStyle:e}),r&&c.set(t,o)}return o})("short").formatToParts(e).find(e=>"dayPeriod"===e.type);return` ${(t??n)?.value??""}`}return n?.value??""}return""})}function f(e,t,i,r){let s=("number"==typeof t?t:t.getTime())-("number"==typeof e?e:e.getTime()),o=r??Math.floor;switch(i){case"days":return o(s/864e5);case"hours":return o(s/36e5);case"minutes":return o(s/6e4);case"seconds":return o(s/1e3);default:return s}}let w=["th","st","nd","rd"]},6e3:(e,t,i)=>{i.d(t,{I:()=>o});var r=i(2356),s=i(3556);function o(e){return(t,i,o)=>{let n;if("function"==typeof o.value?n=o.value:"function"==typeof o.get&&(n=o.get),null==n)throw Error("Not supported");let a=`$gate$${i}`;o.value=function(...t){let i=(0,s.Y)(a,e,...t);Object.prototype.hasOwnProperty.call(this,i)||Object.defineProperty(this,i,{configurable:!1,enumerable:!1,writable:!0,value:void 0});let o=this[i];if(void 0===o){let e;try{if(e=n.apply(this,t),null==e||!(0,r.um)(e))return e;this[i]=o=e.then(e=>(this[i]=void 0,e)).catch(e=>{throw this[i]=void 0,e})}catch(e){throw this[i]=void 0,e}}return o}}}},4136:(e,t,i)=>{i.d(t,{WE:()=>u,Yz:()=>p,u_:()=>d});var r=i(6948),s=i(8196),o=i(6448),n=i(7812),a=i(3e3),l=i(2356),h=i(1072);let c=Symbol("logInstanceNameFn");function u(e){return t=>{t[c]=e}}function d(e){return p(e,!0)}function p(e,t=!1){let i,u,d,p,g;let m=0,f=!1,w=!1,v=!0;null!=e&&({args:i,if:u,enter:d,exit:p,prefix:g,logThreshold:m=0,scoped:f=!0,singleLine:w=!1,timed:v=!0}=e),m>0&&(w=!0,v=!0),v&&(f=!0);let y=o.YJ.isDebugging,b=t?o.YJ.debug:o.YJ.log,C=y?"debug":"info";return(e,t,A)=>{let k,P;if("function"==typeof A.value?(k=A.value,P="value"):"function"==typeof A.get&&(k=A.get,P="get"),null==k||null==P)throw Error("Not supported");let S=!1!==i?(0,s.q4)(k):[];A[P]=function(...e){let s,A;if(!y&&!o.YJ.enabled(C)||null!=u&&!u.apply(this,e))return k.apply(this,e);let P=(0,a.wB)(),R=this!=null?this.constructor?.[c]?.(this,o.EZ(this))??(0,o.EZ)(this):void 0,D=R?f?`[${P.toString(16).padStart(5)}] ${R}.${t}`:`${R}.${t}`:t;null!=g&&(D=g({id:P,instance:this,instanceName:R??"",name:t,prefix:D},...e)),f&&(s={scopeId:P,prefix:D},(0,a.uq)(P,s));let $=null!=d?d(...e):"";if(!1===i||0===e.length)A="",w||b.call(o.YJ,`${D}${$}`);else{let t,r,s,n;A="";let a=-1;for(n of e){if(r=S[++a],null!=(t=i?.[a])){if("boolean"==typeof t)continue;if(A.length>0&&(A+=", "),"string"==typeof t){A+=t;continue}s=String(t(n))}else A.length>0&&(A+=", "),s=o.YJ.toLoggable(n);A+=r?`${r}=${s}`:s}w||b.call(o.YJ,A?`${D}${$}(${A})`:`${D}${$}`)}if(w||v||null!=p){let t;let i=v?(0,r.a)():void 0,c=e=>{let t=void 0!==i?` [${(0,h.C0)(i)}ms]`:"";w?o.YJ.error(e,A?`${D}${$}(${A})`:`${D}${$}`,s?.exitDetails?`failed${s.exitDetails}${t}`:`failed${t}`):o.YJ.error(e,D,s?.exitDetails?`failed${s.exitDetails}${t}`:`failed${t}`),f&&(0,a.QD)(P)};try{t=k.apply(this,e)}catch(e){throw c(e),e}let u=e=>{let t,r,l,c;if(null!=i?(t=(0,h.C0)(i))>n.a?(r=o.YJ.warn,l=` [*${t}ms] (slow)`):(r=b,l=` [${t}ms]`):(l="",r=b),null!=p){if("function"==typeof p)try{c=p(e)}catch(e){c=`@log.exit error: ${e}`}else!0===p&&(c=`returned ${o.YJ.toLoggable(e)}`)}else s?.exitFailed?(c=s.exitFailed,r=o.YJ.error):c="completed";w?(0===m||t>m)&&r.call(o.YJ,A?`${D}${$}(${A}) ${c}${s?.exitDetails||""}${l}`:`${D}${$} ${c}${s?.exitDetails||""}${l}`):r.call(o.YJ,A?`${D}(${A}) ${c}${s?.exitDetails||""}${l}`:`${D} ${c}${s?.exitDetails||""}${l}`),f&&(0,a.QD)(P)};return null!=t&&(0,l.um)(t)?t.then(u,c):u(t),t}return k.apply(this,e)}}}},5019:(e,t,i)=>{i.d(t,{s:()=>s});var r=i(3556);function s(e){return(t,i,s)=>{let o,n,a;if("function"==typeof s.value)o=s.value,n="value";else if("function"==typeof s.get)o=s.get,n="get";else throw Error("Not supported");if(null==o)throw Error("Not supported");let l=`$memoize$${i}`;s[n]=function(...t){let i=(0,r.Y)(l,e,...t);return Object.prototype.hasOwnProperty.call(this,i)?a=this[i]:(Object.defineProperty(this,i,{configurable:!1,enumerable:!1,writable:!1,value:a=o.apply(this,t)}),a)}}}},3556:(e,t,i)=>{i.d(t,{Y:()=>u});var r=i(7304),s=i(9964),o=i(2452),n=i(1080),a=i(6192),l=i(700);function h(e,t){return""===e||null==t||"object"!=typeof t?t:t instanceof Error?String(t):t instanceof r.Uri?"sha"in t&&"string"==typeof t.sha&&t.sha?`${t.sha}:${t.toString()}`:t.toString():(0,o.gh)(t)||(0,n.S)(t)||(0,a.K8)(t)||(0,l.Qh)(t)?t.toString():(0,s.k)(t)?"<container>":t}function c(...e){if(0===e.length)return"";if(e.length>1)return JSON.stringify(e,h);let[t]=e;if(null==t)return"";switch(typeof t){case"string":return t;case"number":case"boolean":case"undefined":case"symbol":case"bigint":return String(t);default:if(t instanceof Error)return String(t);if(t instanceof r.Uri){if("sha"in t&&"string"==typeof t.sha&&t.sha)return`${t.sha}:${t.toString()}`;return t.toString()}if((0,o.gh)(t)||(0,n.S)(t)||(0,a.K8)(t)||(0,l.Qh)(t))return t.toString();if((0,s.k)(t))return"<container>";return JSON.stringify(t,h)}}function u(e,t,...i){let r;if(0===i.length)return e;if(null!=t)try{r=t(...i)}catch{r=c(...i)}else r=c(...i);return`${e}$${r}`}},1408:(e,t,i)=>{function r(e){if(null!=e)return encodeURI(e.replace(/%20/g," "))}i.d(t,{o:()=>r})},8781:(e,t,i)=>{i.d(t,{U7:()=>n,gd:()=>a,qw:()=>s});var r=i(7304);function s(e){return(t,i)=>{let r=e(e=>(r.dispose(),t.call(i,e)));return r}}let o=(e,t)=>t(e);function n(e,t=o){let i,r;let s=!0;return{get pending(){return s},promise:new Promise((o,n)=>{i=()=>{s=!1,i=void 0,n()},r=e(async e=>{try{await t(e,o,n),s=!1}catch(e){s=!1,n(e)}})}).then(e=>(r.dispose(),e),e=>{throw r.dispose(),e}),cancel:()=>i?.()}}function a(e,t,i,s){let o;let n=new WeakRef(i),a=e(e=>{let i=n.deref();null!=i?t.call(i,e):o.dispose()});return o=null==s?a:r.Disposable.from(a,...s)}},3020:(e,t,i)=>{i.d(t,{o:()=>o});var r=i(3732),s=i(1072);function o(e,t){let i=(0,r.oT)(e),o=(0,r.g1)(i);if(t?.truncateTo!=null&&o.length>=t.truncateTo)return(0,s.yQ)(o,t.truncateTo);if(t?.suffix){if(null!=t.truncateTo&&o.length+t.suffix.length>=t.truncateTo)return`${(0,s.yQ)(o,t.truncateTo-t.suffix.length)}${t.suffix}`;o+=t.suffix}if(t?.fileOnly)return o;let n=(0,r.ye)(i,t?.relativeTo);return n?(o=`/${o}`,t?.truncateTo!=null&&o.length+n.length>=t.truncateTo)?`${(0,s.ey)(n,t.truncateTo-o.length)}${o}`:`${n}${o}`:o}},8196:(e,t,i)=>{function r(e,t,i){let r,s,o,n,a;function l(e){let i=e-(s??0);return null==s||i>=t||i<0}function h(){let e=Date.now();l(e)?c():a=setTimeout(h,t-(e-(s??0)))}function c(){return(a=void 0,r)?function(){let t=r,i=o;return r=o=void 0,n=e.apply(i,t)}():(r=void 0,o=void 0,n)}function u(...e){let c=Date.now(),d=l(c);return(r=null!=i&&r?i(r,e):e,o=this,s=c,d&&null==a)?a=setTimeout(h,t):null==a&&(a=setTimeout(h,t)),n}return u.cancel=function(){null!=a&&clearTimeout(a),r=void 0,s=void 0,o=void 0,a=void 0},u.flush=function(){return null!=a?c():n},u.pending=function(){return null!=a},u}i.d(t,{Cu:()=>r,_m:()=>c,is:()=>l,k3:()=>u,q4:()=>a,qw:()=>h,yo:()=>d});let s=/\(([\s\S]*)\)/,o=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,n=/\s?=.*$/;function a(e){if("function"!=typeof e)throw Error("Not supported");if(0===e.length)return[];let t=Function.prototype.toString.call(e),i=(t=(t=t.replace(o,"")||t).slice(0,t.indexOf("{"))).indexOf("("),r=t.indexOf(")");i=i>=0?i+1:0,r=r>0?r:t.indexOf("="),t=t.slice(i,r),t=`(${t})`;let a=s.exec(t);return null!=a?a[1].split(",").map(e=>e.trim().replace(n,"")):[]}function l(e,t,i){return null==t?null!=e:"function"==typeof t?t(e):void 0===i?void 0!==e[t]:e[t]===i}function h(e){let t;let i=!1;return function(...r){return i||(i=!0,t=e.apply(this,r),e=void 0),t}}function c(e,t){let i;return i=setInterval(e,t),{dispose:()=>{null!=i&&(clearInterval(i),i=void 0)}}}async function u(e,t,i){for(let r of t)try{await e.apply(i,r)}catch{}}function d(e,t){return e>=t?e*e+e+t:e+t*t}},7348:(e,t,i)=>{function r(e,t){if(null==e)return 0;let i=0;for(let r of e)(null==t||t(r))&&i++;return i}function*s(e,t){if(void 0===t)for(let t of e)null!=t&&(yield t);else for(let i of e)t(i)&&(yield i)}function*o(e,t){for(let i of e){let e=t(i);null!=e&&(yield e)}}function n(e,t){for(let i of e)if(t(i))return i}function a(e){return e[Symbol.iterator]().next().value}function*l(e,t){for(let i of e)yield*t(i)}function h(e){return l(e,e=>e)}function c(e,t){let i=Object.create(null);for(let r of e){let e=t(r),s=i[e];void 0===s?i[e]=[r]:s.push(r)}return i}function u(e,t,i){let r=new Map,s=i?.filterNullGroups??!1;for(let i of e){let e=t(i);if(null==e&&s)continue;let o=r.get(e);void 0===o?r.set(e,[i]):o.push(i)}return r}function d(e,t,i){let r=new Map;for(let s of e){let e=i(s);if(null==e)continue;let o=t(s),n=r.get(o);void 0===n?r.set(o,[e]):n.push(e)}return r}function p(e,t){let i=e[Symbol.iterator](),r=i.next();if(r.done)return"";let s=String(r.value);for(;!(r=i.next()).done;)s+=`${t}${r.value}`;return s}function g(e){let t;for(t of e);return t}function*m(e,t){for(let i of e)yield t(i)}function f(e,t){let i=Number.POSITIVE_INFINITY;if(null==t)for(let t of e)t<i&&(i=t);else for(let r of e){let e=t(r);e<i&&(i=e)}return i}function w(e,t){for(let i of e)if(t(i))return!0;return!1}function v(e,t,i){let r=new Map;for(let s of e){let e=t(s),o=r.get(e);if(void 0===o)r.set(e,s);else{let t=i(o,s);void 0!==t&&r.set(e,t)}}return r.values()}i.d(t,{GS:()=>g,Gs:()=>o,IF:()=>s,K6:()=>w,KY:()=>a,SY:()=>f,UB:()=>r,YX:()=>h,aS:()=>c,iw:()=>n,kH:()=>m,kn:()=>p,ms:()=>u,oT:()=>v,sX:()=>l,uU:()=>d})},7812:(e,t,i)=>{i.d(t,{a:()=>r});let r=500},3e3:(e,t,i)=>{i.d(t,{I1:()=>a,QD:()=>o,_W:()=>c,b1:()=>n,uq:()=>h,wB:()=>l});let r=new Map,s=0;function o(e){r.delete(e)}function n(){return r.get(s)}function a(e,t){if(null!=t)return{scopeId:t.scopeId,prefix:`${t.prefix}${e}`};let i=l();return{scopeId:i,prefix:`[${String(i).padStart(5)}] ${e}`}}function l(){return 1073741824===s&&(s=0),++s}function h(e,t){r.set(e,t)}function c(e,t,i){null!=e&&(e.exitDetails=t,null!=i&&(e.exitFailed=i))}},6448:(e,t,i)=>{i.d(t,{EZ:()=>a,YJ:()=>o,_z:()=>l,um:()=>BufferedLogChannel});var r,s=((r=s||{})[r.Off=0]="Off",r[r.Error=1]="Error",r[r.Warn=2]="Warn",r[r.Info=3]="Info",r[r.Debug=4]="Debug",r);let o=new class Logger2{output;provider;configure(e,t,i=!1){this.provider=e,this._isDebugging=i,this.logLevel=t}enabled(e){return this.level>=n(e)}_isDebugging=!1;get isDebugging(){return this._isDebugging}level=0;_logLevel="off";get logLevel(){return this._logLevel}set logLevel(e){this._logLevel=e,this.level=n(this._logLevel),"off"===e?(this.output?.dispose?.(),this.output=void 0):this.output??=this.provider.createChannel(this.provider.name)}get timestamp(){return`[${new Date().toISOString().replace(/T/," ").slice(0,-1)}]`}debug(e,...t){let i;(!(this.level<4)||this.isDebugging)&&("string"==typeof e?i=e:(i=t.shift(),null!=e&&(i=`${e.prefix} ${i??""}`)),this.isDebugging&&console.log(this.timestamp,`[${this.provider.name}]`,i??"",...t),null==this.output||this.level<4||this.output.appendLine(`${this.timestamp} ${i??""}${this.toLoggableParams(!0,t)}`))}error(e,t,...i){let r;if(!(this.level<1)||this.isDebugging){if(null==(r=null==t||"string"==typeof t?t:`${t.prefix} ${i.shift()??""}`)){let t=e instanceof Error?e.stack:void 0;if(t){let e=/.*\s*?at\s(.+?)\s/.exec(t);null!=e&&(r=e[1])}}this.isDebugging&&(null!=e?console.error(this.timestamp,`[${this.provider.name}]`,r??"",...i,e):console.error(this.timestamp,`[${this.provider.name}]`,r??"",...i)),null==this.output||this.level<1||this.output.appendLine(`${this.timestamp} ${r??""}${this.toLoggableParams(!1,i)}${null!=e?`
${String(e)}`:""}`)}}log(e,...t){let i;(!(this.level<3)||this.isDebugging)&&("string"==typeof e?i=e:(i=t.shift(),null!=e&&(i=`${e.prefix} ${i??""}`)),this.isDebugging&&console.log(this.timestamp,`[${this.provider.name}]`,i??"",...t),null==this.output||this.level<3||this.output.appendLine(`${this.timestamp} ${i??""}${this.toLoggableParams(!1,t)}`))}warn(e,...t){let i;(!(this.level<2)||this.isDebugging)&&("string"==typeof e?i=e:(i=t.shift(),null!=e&&(i=`${e.prefix} ${i??""}`)),this.isDebugging&&console.warn(this.timestamp,`[${this.provider.name}]`,i??"",...t),null==this.output||this.level<2||this.output.appendLine(`${this.timestamp} ${i??""}${this.toLoggableParams(!1,t)}`))}showOutputChannel(e){this.output?.show?.(e)}toLoggable(e,t){if("object"!=typeof e)return String(e);if(Array.isArray(e))return`[${e.map(e=>this.toLoggable(e,t)).join(", ")}]`;let i=this.provider.toLoggable?.(e);if(null!=i)return i;try{return JSON.stringify(e,t)}catch{return"<error>"}}toLoggableParams(e,t){if(0===t.length||e&&this.level<4&&!this.isDebugging)return"";let i=t.map(e=>this.toLoggable(e)).join(", ");return 0!==i.length?` \u2014 ${i}`:""}};let BufferedLogChannel=class BufferedLogChannel{constructor(e,t=500){this.channel=e,this.interval=t}buffer=[];bufferTimer;dispose(){clearInterval(this.bufferTimer),this.bufferTimer=void 0,this.channel.dispose()}get name(){return this.channel.name}appendLine(e){this.buffer.push(e),this.bufferTimer??=setInterval(()=>this.flush(),this.interval)}show(e){this.channel.show?.(e)}_emptyCounter=0;flush(){if(this.buffer.length){this._emptyCounter=0;let e=this.buffer.join("\n");this.buffer.length=0,this.channel.append(e)}else this._emptyCounter++,this._emptyCounter>10&&(clearInterval(this.bufferTimer),this.bufferTimer=void 0,this._emptyCounter=0)}};function n(e){switch(e){case"off":default:return 0;case"error":return 1;case"warn":return 2;case"info":return 3;case"debug":return 4}}function a(e){let t;if("function"==typeof e){if(e.prototype?.constructor==null)return e.name;t=e.prototype.constructor.name??""}else t=e.constructor?.name??"";let i=t.indexOf("_");return -1===i?t:t.substr(i+1)}let l={enabled:e=>o.enabled(e)||o.isDebugging,log:(e,t,i,...r)=>{switch(e){case"error":o.error("",t,i,...r);break;case"warn":o.warn(t,i,...r);break;case"info":o.log(t,i,...r);break;default:o.debug(t,i,...r)}}}},4204:(e,t,i)=>{function r(e,t){if(e===t)return!0;if(null==e||null==t)return!1;let i=typeof e;return(i!==typeof t||"string"!==i&&"number"!==i&&"boolean"!==i)&&JSON.stringify(e)===JSON.stringify(t)}function s(e,t){let i=t?.skipPaths?.length?t?.prefix?t.skipPaths.map(e=>`${t.prefix}.${e}`):t.skipPaths:void 0,r=t?.skipNulls??!1,s=t?.stringify??!1,o=Object.create(null);return!function e(o,n,a){if(!i?.includes(n)){if(Object(a)!==a)null==a?r||(o[n]=s?"all"==s?JSON.stringify(a):a??null:a):"string"==typeof a?o[n]=a:s?o[n]="number"==typeof a||"boolean"==typeof a?a:JSON.stringify(a):o[n]=a;else if(Array.isArray(a)){let i=a.length;if(0===i)return;if(t?.arrays==="join")o[n]=a.join(",");else for(let t=0;t<i;t++)e(o,`${n}[${t}]`,a[t])}else{let t=Object.entries(a);if(0===t.length)return;for(let[i,r]of t)e(o,n?`${n}.${i}`:i,r)}}}(o,t?.prefix??"",e),o}function o(e,t,i){if(null==e&&(e=Object.create(null)),null!=i&&("boolean"!=typeof i||i))"object"==typeof i?e[t]={...i}:e[t]=i;else{let{[t]:i,...r}=e;e=r}return e}i.d(t,{Ks:()=>o,YX:()=>s,eY:()=>r})},972:(e,t,i)=>{i.d(t,{c:()=>PageableResult});let PageableResult=class PageableResult{constructor(e){this.fetch=e}cached;async *values(){if(null!=this.cached)for(let e of this.cached.values)yield e;let e=this.cached;for(;null==e||e.paging?.more;)for(let t of(e=await this.fetch(e?.paging),null==this.cached?this.cached=e:(this.cached.values.push(...e.values),this.cached.paging=e.paging),e.values))yield t}}},3732:(e,t,i)=>{i.d(t,{En:()=>r.join,Ib:()=>r.extname,Jl:()=>r.dirname,KS:()=>g,O:()=>S,Oq:()=>A,U3:()=>k,ay:()=>C,eO:()=>d,g1:()=>r.basename,i:()=>y,ic:()=>v,k_:()=>w,kn:()=>p,oT:()=>m,sA:()=>b,wD:()=>f,ye:()=>P});var r=i(7072),s=i(7304),o=i(2164),n=i(1608);let a=/(?<=^\/?)([A-Z])(?=:\/)/,l=/^([a-zA-Z][\w+.-]+):/,h=/\\/g,c=/^[/|\\]~(?:\d+?|external)(?:[/|\\]|$)/,u=/^[/|\\]~(?:\d+?|external)(?:[/|\\]|$)/;function d(e){var t,i;if("string"==typeof e&&b(e)&&(e=s.Uri.parse(e)),"string"==typeof e)return(t=e,c.test(t))?e:(e=C(e),`/~0${47===e.charCodeAt(0)?e:`/${e}`}`);let r=e.fsPath;return(i=r,c.test(i))?e:(r=C(r),e.with({path:`/~0${47===r.charCodeAt(0)?r:`/${r}`}`}))}function p(e){return u.test(e)}function g(e,t,i,r){let s;if(0===e.length||0===t.length)return 0;(r??!o.Co)&&(e=e.toLowerCase(),t=t.toLowerCase());let n=0;for(let r=0;r<e.length&&(s=e[r])===t[r];r++)s===i&&(n=r);return n}function m(e){if("string"==typeof e){if(!l.test(e))return C(e);e=s.Uri.parse(e,!0)}return C(e.scheme===n.cl.File?e.fsPath:e.path)}function f(e){return l.exec(e)?.[1]}function w(e,t){return("string"==typeof t&&47!==(t=C(t)).charCodeAt(0)&&(t=`/${t}`),"string"==typeof e&&47!==(e=C(e)).charCodeAt(0)&&(e=`/${e}`),"string"==typeof t)?1===t.length||("string"==typeof e?e:e.path).startsWith(47===t.charCodeAt(t.length-1)?t:`${t}/`):"string"==typeof e?1===t.path.length||e.startsWith(47===t.path.charCodeAt(t.path.length-1)?t.path:`${t.path}/`):t.scheme===e.scheme&&t.authority===e.authority&&(1===t.path.length||e.path.startsWith(47===t.path.charCodeAt(t.path.length-1)?t.path:`${t.path}/`))}function v(e){return!b(e)&&(0,r.isAbsolute)(e)}function y(e){return"*"===(0,r.basename)(e)}function b(e){return l.test(e)}function C(e){return e&&(47!==(e=e.replace(h,"/")).charCodeAt(e.length-1)||o.Yf&&3===e.length&&":"===e[1]||(e=e.slice(0,-1)),o.Yf&&(e=e.replace(a,e=>e.toLowerCase()))),e}function A(e,t,i){return(i||null==i&&!o.Co)&&(e=e.toLowerCase(),t=t.toLowerCase()),C(e)===C(t)}function k(e,t,i){e=l.test(e)?s.Uri.parse(e,!0).path:C(e),t=l.test(t)?s.Uri.parse(t,!0).path:C(t);let r=g(`${t}/`,`${e}/`,"/",i);return r>0?t.substring(r+1):t}function P(e,t){let i=(0,r.dirname)(e);if(!i||"."===i||i===t)return"";if(!t)return i;let[s]=S(i,t);return s}function S(e,t,i=!1,o){if(e=m(e),t){let i;t=l.test(t)?m(i=s.Uri.parse(t,!0)):C(t);let r=g(`${t}/`,`${e}/`,"/",o);r>0?(t=e.substring(0,r),e=e.substring(r+1)):47===e.charCodeAt(0)&&(e=e.slice(1)),null!=i&&(t=i.with({path:t}).toString())}else t=C(i?(0,r.dirname)(e):""),e=i?(0,r.basename)(e):e;return[e,t]}},2356:(e,t,i)=>{function r(...e){return new Promise((t,i)=>{let r,s=!1,o=e=>{s=!0,t(e)},n=t=>{!s&&(null==r?r=[t]:r.push(t),e.length-r.length<1&&i(new AggregateError(r)))};for(let t of e)t.then(o,n)})}async function*s(e){let t=new Map(e.map((e,t)=>[t,e.then(e=>({index:t,value:e,status:"fulfilled"}),e=>({index:t,reason:e,status:"rejected"}))]));for(;t.size;){let e=await Promise.race(t.values());t.delete(e.index),yield e}}i.d(t,{Cv:()=>l,Dg:()=>o,EX:()=>PromiseCancelledError,Qv:()=>n,Sy:()=>c,Y7:()=>a,k5:()=>u,uW:()=>r,um:()=>h,wX:()=>s});let PromiseCancelledError=class PromiseCancelledError extends Error{constructor(e,t){super(t),this.promise=e}};function o(e,t,i,r){return null==t&&null==i?e:new Promise((s,o)=>{let n,a,l=!1,h=t=>{n?.dispose(),a?.dispose(),l||(r?.onDidCancel!=null?r.onDidCancel(s,o,t):o(new PromiseCancelledError(e,r?.cancelMessage??("cancelled"===t?"CANCELLED":"TIMED OUT"))))};if(n=i?.onCancellationRequested(()=>h("cancelled")),null!=t){if("number"==typeof t){let e=setTimeout(()=>h("timedout"),t);a={dispose:()=>clearTimeout(e)}}else a=t.onCancellationRequested(()=>h("timedout"))}e.then(()=>{l=!0,n?.dispose(),a?.dispose(),s(e)},e=>{l=!0,n?.dispose(),a?.dispose(),o(e)})})}function n(){let e={pending:!0,promise:void 0,fulfill:void 0,cancel:void 0};return e.promise=new Promise((t,i)=>{e.fulfill=function(i){e.pending=!1,t(i)},e.cancel=function(){e.pending=!1,i()}}),e}function a(e){return e?.pending?e.promise:void 0}function l(e,t){return e?.status==="fulfilled"?e.value:t}function h(e){return null!=e&&(e instanceof Promise||"function"==typeof e?.then)}function c(e){return new Promise(t=>setTimeout(t,e))}function u(){return new Promise(e=>queueMicrotask(e))}let AggregateError=class AggregateError extends Error{constructor(e){super(`AggregateError(${e.length})
${e.map(e=>`	${String(e)}`).join("\n")}`),this.errors=e,Error.captureStackTrace?.(this,AggregateError)}}},6088:(e,t,i)=>{i.d(t,{Y:()=>Stopwatch,i:()=>n});var r=i(6948),s=i(6448),o=i(3e3);Symbol.dispose??=Symbol("Symbol.dispose"),Symbol.asyncDispose??=Symbol("Symbol.asyncDispose");let Stopwatch=class Stopwatch{logScope;logLevel;logProvider;_time;get startTime(){return this._time}_stopped=!1;constructor(e,t,...i){let n;if(this.logScope=null!=e&&"string"!=typeof e?e:(0,o.I1)(e??""),n="boolean"==typeof t?.log?t.log?{}:void 0:t?.log??{},this.logLevel=t?.logLevel??"info",this.logProvider=t?.provider??s._z,this._time=(0,r.a)(),null!=n){if(!this.logProvider.enabled(this.logLevel))return;i.length?this.logProvider.log(this.logLevel,this.logScope,`${n.message??""}${n.suffix??""}`,...i):this.logProvider.log(this.logLevel,this.logScope,`${n.message??""}${n.suffix??""}`)}}[Symbol.dispose](){this.stop()}elapsed(){let[e,t]=(0,r.a)(this._time);return 1e3*e+Math.floor(t/1e6)}log(e){this.logCore(e,!1)}restart(e){this.logCore(e,!0),this._time=(0,r.a)(),this._stopped=!1}stop(e){this._stopped||(this.restart(e),this._stopped=!0)}logCore(e,t){if(!this.logProvider.enabled(this.logLevel))return;if(!t){this.logProvider.log(this.logLevel,this.logScope,`${e?.message??""}${e?.suffix??""}`);return}let[i,s]=(0,r.a)(this._time),o=1e3*i+Math.floor(s/1e6),n=e?.message??"";this.logProvider.log(o>250?"warn":this.logLevel,this.logScope,`${n?`${n} `:""}[${o}ms]${e?.suffix??""}`)}};function n(e,t,...i){return(t?.provider??s._z).enabled(t?.logLevel??"info")?new Stopwatch(e,t,...i):void 0}},1072:(e,t,i)=>{let r,s,o;i.d(t,{Al:()=>l,Yj:()=>h,dH:()=>c,IV:()=>p,ug:()=>g,qK:()=>z,Ir:()=>m,RJ:()=>u,Ed:()=>C,Oi:()=>k,C0:()=>P,Nk:()=>S,ys:()=>D,c5:()=>T,K6:()=>Y,qy:()=>F,IB:()=>O,eu:()=>B,a0:()=>U,ig:()=>W,u:()=>N,sd:()=>d,op:()=>q,E3:()=>L,ey:()=>M,yQ:()=>Q,mg:()=>A});var n=i(6948),a=i(1608);function l(e){return Buffer.from(e).toString("base64")}function h(e){return`${e[0].toLocaleUpperCase()}${e.slice(1)}`}function c(e,t){null==r&&(r=new Intl.Collator(void 0,{sensitivity:"accent"}));let i=r.compare(e,t);return 0===i?0:i>0?1:-1}function u(e,t){return null==e&&null==t||null!=e&&null!=t&&0===c(e,t)}function d(e,t){return null==s&&(s=new Intl.Collator(void 0,{numeric:!0,sensitivity:"base"})),s.compare(e,t)}function p(e,t,i=0,r=e.length,s=0,o=t.length){for(;i<r&&s<o;i++,s++){let r=e.charCodeAt(i),o=t.charCodeAt(s);if(r<o)return -1;if(r>o)return 1}let n=r-i,a=o-s;return n<a?-1:n>a?1:0}function g(e,t,i=0,r=e.length,s=0,o=t.length){for(;i<r&&s<o;i++,s++){let n=e.charCodeAt(i),a=t.charCodeAt(s);if(n===a)continue;let l=n-a;if(!(32===l&&E(a))&&!(-32===l&&E(n))){if(x(n)&&x(a))return l;return p(e.toLowerCase(),t.toLowerCase(),i,r,s,o)}}let n=r-i,a=o-s;return n<a?-1:n>a?1:0}function m(e){return e?.replace(/[<>&"]/g,e=>{switch(e){case"<":return"&lt;";case">":return"&gt;";case"&":return"&amp;";case'"':return"&quot;";default:return e}})}let f=/[\\`*_{}[\]()#+\-.!]/g,w=/\\([\\`*_{}[\]()#+\-.!])/g,v=/^===/gm,y=/^\u200b===/gm,b=/\r?\n/g;function C(e,t={}){return(e=e.replace(f,"\\$&").replace(v,"​==="),t.quoted)?e.trim().replace(b,"	\\\n>  "):e}function A(e){return e.replace(w,"$1").replace(y,"===")}function k(e){return e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")}function P(e){let[t,i]=(0,n.a)(e);return 1e3*t+Math.floor(i/1e6)}function*S(e,t="\n"){let i;if("string"==typeof e){let i=0;for(;i<e.length;){let r=e.indexOf(t,i);-1===r&&(r=e.length),yield e.substring(i,r),i=r+1}return}let r=0;for(let s of e){r++,i&&(s=i+s,i=void 0);let o=0;for(;o<s.length;){let n=s.indexOf(t,o);if(-1===n){if(r===e.length)n=s.length;else{i=s.substring(o);break}}yield s.substring(o,n),o=n+1}}}let R=["¹","²","³","⁴","⁵","⁶","⁷","⁸","⁹"];function D(e){return R[e-1]??""}let $=/\$\{(?:'.*?[^\\]'|\W*)?(\w*?)(?:'.*?[^\\]'|[\W\d]*)\}/g,_=new Map;function I(e){return 95===e||e>=97&&e<=122||e>=65&&e<=90||e>=48&&e<=57}function T(e){let t=_.get(e);if(null!=t)return t;t=[];let i=e.length,r=0;for(;r<i;){let i=e.indexOf("${",r);if(-1===i)break;let s=e.indexOf("}",i);if(-1===s)break;let o=i+2,n="",a="",l="",h=!1,c="right",u="";if("'"===e[o]){let t=++o;if(-1===(o=e.indexOf("'",o)))break;t!==o&&(a=e.slice(t,o)),o++}else if(!I(e.charCodeAt(o))){let t=o++;for(;o<s&&!I(e.charCodeAt(o));)o++;t!==o&&(a=e.slice(t,o))}for(;o<s;){let t=e.charCodeAt(o);if(I(t))n+=e[o++];else{if(124!==t)break;for(;o<s;){if((t=e.charCodeAt(++o))>=48&&t<=57){l+=e[o];continue}63===t?(h=!0,o++):45===t&&(c="left",o++);break}}}if(o<s){if("'"===e[o]){let t=++o;if(-1===(o=e.indexOf("'",o)))break;t!==o&&(u=e.slice(t,o)),o++}else if(!I(e.charCodeAt(o))){let t=o++;for(;o<s&&!I(e.charCodeAt(o));)o++;t!==o&&(u=e.slice(t,o))}}r=s+1,t.push({key:n,start:i,end:r,options:{prefix:a||void 0,suffix:u||void 0,truncateTo:l?parseInt(l,10):void 0,collapseWhitespace:h,padDirection:c}})}return _.set(e,t),t}function F(e,t){if(null==e||0===e.length)return e;if(null==t)return e.replace($,"");let i=T(e);if(0===i.length)return e;let r=0,s="";for(let o of i)s+=e.slice(r,o.start)+(t[o.key]??""),r=o.end;return r<e.length&&(s+=e.slice(r)),s}async function O(e,t){let i;if(null==e||0===e.length)return e;if(null==t)return e.replace($,"");let r=T(e);if(0===r.length)return e;let s=0,o="";for(let n of r)null!=(i=t[n.key])&&"object"==typeof i&&"function"==typeof i.then&&(i=await i),o+=e.slice(s,n.start)+(i??""),s=n.end;return s<e.length&&(o+=e.slice(s)),o}function x(e){return e>=a.rE.a&&e<=a.rE.z}function E(e){return e>=a.rE.A&&e<=a.rE.Z}function B(e,t=0,i=0,r=" "){return 0===t&&0===i?e:`${0===t?"":r.repeat(t)}${e}${0===i?"":r.repeat(i)}`}function U(e,t,i=" ",r){let s=t-(r??Y(e));return s<=0?e:i.repeat(s)+e}function W(e,t,i=" ",r){let s=t-(r??Y(e));return s<=0?e:e+i.repeat(s)}function N(e,t,i){if(null==i)return`${t} ${e}${1===t?"":"s"}`;let r=1===t?e:i.plural??`${e}s`;return i.only?r:`${0===t?i.zero??t:i.format?.(t)??t}${i.infix??" "}${r}`}function q(e,t){let i=e.indexOf(t);if(-1===i)return[e];let r=e.substring(0,i),s=e.substring(i+t.length);return null!=s?[r,s]:[r]}function L(e,t,i="…",r){if(!e)return e;if(t<=1)return i;if((r=r??Y(e))<=t)return e;if(r===e.length)return`${e.substring(0,t-1)}${i}`;let s=Math.floor(t/(r/e.length)),o=Y(e.substring(0,s));for(;o<t;)o+=Y(e[s++]);return o>=t&&s--,`${e.substring(0,s)}${i}`}function M(e,t,i="…",r){if(!e)return e;if(t<=1)return i;if((r=r??Y(e))<=t)return e;if(r===e.length)return`${i}${e.substring(r-t)}`;let s=Math.floor(t/(r/e.length)),o=Y(e.substring(0,s));for(;o<t;)o+=Y(e[s++]);return o>=t&&s--,`${i}${e.substring(e.length-s)}`}function Q(e,t,i="…"){if(!e)return e;if(t<=1)return i;let r=Y(e);return r<=t?e:`${e.slice(0,Math.floor(t/2)-1)}${i}${e.slice(r-Math.ceil(t/2))}`}let G=/[^\x20-\x7F\u00a0\u2026]/;function Y(e){if(null==e||0===e.length)return 0;if(!G.test(e))return e.length;if(null==o&&(o=function({onlyFirst:e=!1}={}){return RegExp("[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)|(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))",e?void 0:"g")}()),0===(e=e.replace(o,"")).length)return 0;let t=0,i=0,r=0,s=[...e];for(let e=0;e<s.length;e++){let o=s[e].codePointAt(0);if(!(o<=31)&&(!(o>=127)||!(o<=159))&&(!(o>=768)||!(o<=879))){if(o>=128512&&o<=128591||o>=127744&&o<=128511||o>=128640&&o<=128767||o>=9728&&o<=9983||o>=9984&&o<=10175||o>=65024&&o<=65039||o>=129280&&o<=129535||o>=65024&&o<=65039||o>=8400&&o<=8447){if(o>=127995&&o<=127999)continue;i++,t+=2;continue}if(8205===o){r++,t-=2;continue}o>65535&&e++,t+=o>=4352&&(o<=4447||9001===o||9002===o||o>=11904&&o<=12871&&12351!==o||o>=12880&&o<=19903||o>=19968&&o<=42182||o>=43360&&o<=43388||o>=44032&&o<=55203||o>=63744&&o<=64255||o>=65040&&o<=65049||o>=65072&&o<=65131||o>=65281&&o<=65376||o>=65504&&o<=65510||o>=110592&&o<=110593||o>=127488&&o<=127569||o>=131072&&o<=262141)?2:1}}let n=i-r;return n>1&&(t+=n-1),t}let V={};function z(e){return null==e||""===e?"":function(e,t,i){let r,s,o,n,a,l,h;let c=[],u=4,d=4,p=3,g="",m=[],f={val:i(0),position:32,index:1};for(r=0;r<3;r+=1)c[r]=r;for(o=0,a=4,l=1;l!=a;)n=f.val&f.position,f.position>>=1,0==f.position&&(f.position=32,f.val=i(f.index++)),o|=(n>0?1:0)*l,l<<=1;let w=String.fromCharCode;switch(o){case 0:for(o=0,a=256,l=1;l!=a;)n=f.val&f.position,f.position>>=1,0==f.position&&(f.position=t,f.val=i(f.index++)),o|=(n>0?1:0)*l,l<<=1;h=w(o);break;case 1:for(o=0,a=65536,l=1;l!=a;)n=f.val&f.position,f.position>>=1,0==f.position&&(f.position=t,f.val=i(f.index++)),o|=(n>0?1:0)*l,l<<=1;h=w(o);break;case 2:return""}for(c[3]=h,s=h,m.push(h);;){if(f.index>e)return"";for(o=0,a=Math.pow(2,p),l=1;l!=a;)n=f.val&f.position,f.position>>=1,0==f.position&&(f.position=t,f.val=i(f.index++)),o|=(n>0?1:0)*l,l<<=1;switch(h=o){case 0:for(o=0,a=256,l=1;l!=a;)n=f.val&f.position,f.position>>=1,0==f.position&&(f.position=t,f.val=i(f.index++)),o|=(n>0?1:0)*l,l<<=1;c[d++]=w(o),h=d-1,u--;break;case 1:for(o=0,a=65536,l=1;l!=a;)n=f.val&f.position,f.position>>=1,0==f.position&&(f.position=t,f.val=i(f.index++)),o|=(n>0?1:0)*l,l<<=1;c[d++]=w(o),h=d-1,u--;break;case 2:return m.join("")}if(0==u&&(u=Math.pow(2,p),p++),c[h])g=c[h];else{if(h!==d)return;g=s+s.charAt(0)}m.push(g),c[d++]=s+g.charAt(0),u--,s=g,0==u&&(u=Math.pow(2,p),p++)}}(e.length,32,t=>(function(e,t){if(!V[e]){V[e]={};for(let t=0;t<e.length;t++)V[e][e.charAt(t)]=t}return V[e][t]})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",e.charAt(t)))??""}},3728:(e,t,i)=>{i.d(t,{AH:()=>VisitedPathsTrie,SK:()=>PathTrie,Ud:()=>UriTrie});var r=i(2164),s=i(7348),o=i(3732);function n(e){return 47===(e=(0,o.ay)(e)).charCodeAt(0)&&(e=e.slice(1)),e}let UriTrie=class UriTrie{constructor(e){this.normalize=e,this.trie=new PathTrie}trie;clear(){this.trie.clear()}delete(e,t=!0){let{path:i,ignoreCase:r}=this.normalize(e);return this.trie.delete(i,r,t)}get(e){let{path:t,ignoreCase:i}=this.normalize(e);return this.trie.get(t,i)}getChildren(e){let{path:t,ignoreCase:i}=this.normalize(e);return this.trie.getChildren(t,i)}getClosest(e,t,i){let{path:r,ignoreCase:s}=this.normalize(e);return this.trie.getClosest(r,t,i,s)}getDescendants(e,t){if(null==e)return this.trie.getDescendants();let{path:i,ignoreCase:r}=this.normalize(e);return this.trie.getDescendants(i,t,r)}has(e){let{path:t,ignoreCase:i}=this.normalize(e);return this.trie.has(t,i)}set(e,t){let{path:i,ignoreCase:r}=this.normalize(e);return this.trie.set(i,t,r)}};let PathNode=class PathNode{constructor(e){this.path=e}value;children};let PathTrie=class PathTrie{constructor(e=n){this.normalize=e,this.root=new PathNode("")}root;clear(){this.root.children=void 0}delete(e,t,i=!0){let s,o;for(let i of(e=this.normalize(e),t=t??!r.Co,e.split("/"))){let e=(s??this.root).children?.get(t?i.toLowerCase():i);if(null==e)return!1;o=s??this.root,s=e}return!!s?.value&&(i&&a(s.value),s.value=void 0,(null==s.children||0===s.children.size)&&o?.children!=null&&(o.children.delete(t?s.path.toLowerCase():s.path),0===o.children.size&&(o.children=void 0)),!0)}get(e,t){return this.getCore(e,t)}getCore(e,t){let i;for(let s of(e=this.normalize(e),t=t??!r.Co,e.split("/"))){let e=(i??this.root).children?.get(t?s.toLowerCase():s);if(null==e)return;i=e}return i?.value}getChildren(e,t){let i;if(e=this.normalize(e),t=t??!r.Co,e)for(let r of e.split("/")){let e=(i??this.root).children?.get(t?r.toLowerCase():r);if(null==e)return[];i=e}else i=this.root;return i?.children==null?[]:[...(0,s.Gs)(i.children.values(),e=>e.value||void 0)]}getClosest(e,t,i,s){let o,n;for(let t of(e=this.normalize(e),s=s??!r.Co,e.split("/"))){o?.value&&(!i||i?.(o.value))&&(n=o);let e=(o??this.root).children?.get(s?t.toLowerCase():t);if(null==e)break;o=e}return!t&&o?.value&&(!i||i?.(o.value))?o.value:n?.value}*getDescendants(e,t,i){let s;e=e?this.normalize(e):"",i=i??!r.Co;let o="";if(e)for(let t of e.split("/")){let e=(s??this.root).children?.get(i?t.toLowerCase():t);if(null==e)return;s=e,o+=`${e.path}/`}else s=this.root;s?.children!=null&&(yield*function* e(i,r,s){for(let o of i.values()){let i=r?`${r}/${o.path}`:o.path;o.value&&(!t||t?.(o.value))&&(yield o.value),null!=o.children&&(yield*e(o.children,i,s))}}(s.children,"",o))}has(e,t){return null!=this.getCore(e,t)}set(e,t,i){e=this.normalize(e),i=i??!r.Co;let s=this.root;for(let t of e.split("/")){let e=i?t.toLowerCase():t,r=s.children?.get(e);null==r&&(null==s.children&&(s.children=new Map),r=new PathNode(t),s.children.set(e,r)),s=r}let o=null==s.value;return o||s.value===t||a(s.value),s.value=t,o}};function a(e){null!=e&&"object"==typeof e&&"dispose"in e&&"function"==typeof e.dispose&&e.dispose()}let VisitedPathNode=class VisitedPathNode{constructor(e){this.path=e}children};let VisitedPathsTrie=class VisitedPathsTrie{constructor(e=n){this.normalize=e,this.root=new VisitedPathNode("")}root;clear(){this.root.children=void 0}has(e,t){let i;for(let s of(e=this.normalize(e),t=t??!r.Co,e.split("/"))){let e=(i??this.root).children?.get(t?s.toLowerCase():s);if(null==e)return!1;i=e}return null!=i}set(e,t){e=this.normalize(e),t=t??!r.Co;let i=this.root;for(let r of e.split("/")){let e=t?r.toLowerCase():r,s=i.children?.get(e);null==s&&(null==i.children&&(i.children=new Map),s=new VisitedPathNode(r),i.children.set(e,s)),i=s}}}},3284:(e,t,i)=>{i.d(t,{AT:()=>k,At:()=>C,EX:()=>D,GS:()=>I,IR:()=>R,Ku:()=>m,Q5:()=>b,Qp:()=>v,YH:()=>$,fL:()=>d,gO:()=>_,i3:()=>p,oF:()=>P,qq:()=>S,sj:()=>A,u4:()=>f,uG:()=>y,uo:()=>w,wj:()=>g,wv:()=>u});var r=i(7304),s=i(1608),o=i(2812),n=i(7824),a=i(4169),l=i(6448),h=i(3732),c=i(5496);function u(e){let t=e.toString();return r.workspace.textDocuments.find(e=>e.uri.toString()===t)}async function d(e,t){let i=function(e){let t=r.window.activeTextEditor,i=e.toString();for(let e of[...null!=t?[t]:[],...r.window.visibleTextEditors])if(e.document.uri.toString()===i&&e?.viewColumn!=null)return e}(e);return null!=i?(t?.preserveFocus||await r.window.showTextDocument(i.document,{...t,viewColumn:i.viewColumn}),i):k(e,{viewColumn:r.window.activeTextEditor?.viewColumn,...t})}function p(e,t){let i=new Map(e.map(e=>[e.toString(),e]));for(let e of r.window.visibleTextEditors)e?.viewColumn!=null&&i.delete(e.document.uri.toString());for(let e of(t={background:!0,preview:!1,...t},i.values()))(0,n.CA)("vscode.open",e,t)}function g(){let e;switch(r.env.appName){case"Visual Studio Code - Insiders":e="code-insiders --wait --reuse-window";break;case"Visual Studio Code - Exploration":e="code-exploration --wait --reuse-window";break;case"VSCodium":e="codium --wait --reuse-window";break;default:e="code --wait --reuse-window"}return e}function m(e){let t=r.window.activeTextEditor;return null!=t&&t.document===e?t:void 0}function f(){return!a.i.get("advanced.quickPick.closeOnFocusOut")}function w(e){if(0===r.window.visibleTextEditors.length)return!1;if(null==e)return r.window.visibleTextEditors.some(e=>A(e));let t=e.toString();return r.window.visibleTextEditors.some(e=>e.document.uri.toString()===t&&A(e))}function v(e){let t=r.window.activeTextEditor;return null!=t&&t.document===e}function y(e){return e.kind===r.ColorThemeKind.Dark||e.kind===r.ColorThemeKind.HighContrast}function b(e){return e.kind===r.ColorThemeKind.Light||e.kind===r.ColorThemeKind.HighContrastLight}function C(e){return e.scheme===s.cl.Virtual||e.scheme===s.cl.GitHub}function A(e){let t=e.document.uri.scheme;return t!==s.cl.DebugConsole&&t!==s.cl.Output&&t!==s.cl.Terminal}async function k(e,t){let i,a;null!=t&&({background:i,throwOnError:a,...t}=t);try{if((0,o.my)(e)&&(e=e.documentUri()),i||e.scheme===s.cl.GitLens&&s.GA[(0,h.Ib)(e.fsPath)]){await (0,n.CA)("vscode.open",e,{background:i,...t});return}let a=await r.workspace.openTextDocument(e);return r.window.showTextDocument(a,{preserveFocus:!1,preview:!0,viewColumn:r.ViewColumn.Active,...t})}catch(t){if((t?.toString()??"").includes("File seems to be binary and cannot be opened as text")){await (0,n.CA)("vscode.open",e);return}if(a)throw t;l.YJ.error(t,"openEditor");return}}async function P(e,t,i){try{await (0,n.CA)("vscode.changes",t,e.map(e=>[e.uri,e.lhs,e.rhs]))}catch(e){l.YJ.error(e,"openChangesEditor")}}async function S(e,t,i,r){try{await (0,n.CA)("vscode.diff",e,t,i,r)}catch(e){l.YJ.error(e,"openDiffEditor")}}async function R(e,t,i,s=!0){s&&null==r.window.tabGroups.activeTabGroup.activeTab&&(s=!1),await (0,n.CA)("workbench.action.openWalkthrough",{category:`${e}#${t}`,step:i?`${e}#${t}#${i}`:void 0},s)}function D(e,t={location:"currentWindow"}){if(t?.location==="addToWorkspace"){let i=r.workspace.workspaceFolders?.length??0;return void r.workspace.updateWorkspaceFolders(i,0,{uri:e,name:t?.name})}(0,n.CA)("vscode.openFolder",e,{forceNewWindow:t?.location==="newWindow"})}async function $(e){await (0,n.CA)("revealFileInOS",e)}function _(e){return"input-prompt-links"===e&&(0,c.op)(r.version,">= 1.76")}async function I(e){if(null!=e)return r.env.openExternal(e)}},5496:(e,t,i)=>{i.d(t,{K0:()=>o,Oo:()=>s,op:()=>n});var r=i(1072);function s(e,t){return("string"==typeof e&&(e=o(e)),"string"==typeof t&&(t=o(t)),e.major>t.major)?1:e.major<t.major?-1:e.minor>t.minor?1:e.minor<t.minor?-1:e.patch>t.patch?1:e.patch<t.patch?-1:void 0===e.pre&&void 0!==t.pre?1:void 0!==e.pre&&void 0===t.pre?-1:void 0!==e.pre&&void 0!==t.pre?(0,r.dH)(e.pre,t.pre):0}function o(e){let[t,i]=e.split("-"),[r,s,o]=t.split(".");return{major:"string"==typeof r?parseInt(r,10):r,minor:"string"==typeof s?parseInt(s,10):s,patch:null==o?0:"string"==typeof o?parseInt(o,10):o,pre:i}}function n(e,t){if(null==e)return!1;let[i,r]=t.split(" ");if("="===i)return 0===s(e,r);if(">"===i)return s(e,r)>0;if(">="===i)return s(e,r)>=0;if("<"===i)return 0>s(e,r);if("<="===i)return 0>=s(e,r);throw Error(`Unknown operator: ${i}`)}},6240:(e,t,i)=>{function r(e){return null!=e&&"webview"in e&&null!=e.webview}function s(e){return null!=e&&"webview"in e&&null!=e.webview&&"webviewItem"in e}function o(e){return null!=e&&"webview"in e&&null!=e.webview&&"webviewItemGroup"in e}function n(e){return JSON.stringify(e)}i.d(t,{QX:()=>n,U1:()=>s,kj:()=>o,kt:()=>r})},2404:(e,t,i)=>{i.d(t,{G:()=>TrackedGitDocument,u:()=>GitDocumentState});var r=i(7304),s=i(2812),o=i(2060),n=i(4169),a=i(3664),l=i(8196),h=i(6448),c=i(3284);let GitDocumentState=class GitDocumentState{blameCache=new Map;diffCache=new Map;logCache=new Map;clearBlame(e){if(null==e){this.blameCache.clear();return}this.blameCache.delete(e)}clearDiff(e){if(null==e){this.diffCache.clear();return}this.diffCache.delete(e)}clearLog(e){if(null==e){this.logCache.clear();return}this.logCache.delete(e)}getBlame(e){return this.blameCache.get(e)}getDiff(e){return this.diffCache.get(e)}getLog(e){return this.logCache.get(e)}setBlame(e,t){if(null==t){this.blameCache.delete(e);return}this.blameCache.set(e,t)}setDiff(e,t){if(null==t){this.diffCache.delete(e);return}this.diffCache.set(e,t)}setLog(e,t){if(null==t){this.logCache.delete(e);return}this.logCache.set(e,t)}};let TrackedGitDocument=class TrackedGitDocument{constructor(e,t,i,r){this.document=e,this.dirty=t,this._eventDelegates=i,this.container=r}static async create(e,t,i,r){let s=new TrackedGitDocument(e,t,i,r);return await s.initialize(),s}_onDidBlameStateChange=new r.EventEmitter;get onDidBlameStateChange(){return this._onDidBlameStateChange.event}state;_disposable;_disposed=!1;_uri;dispose(){this.state=void 0,this._disposed=!0,this._disposable?.dispose()}initializing=!0;async initialize(){let e=this.document.uri;this._uri=await s.wv.fromUri(e),this._disposed||await this.update({forceDirtyIdle:!0}),this.initializing=!1}_forceDirtyStateChangeOnNextDocumentChange=!1;get forceDirtyStateChangeOnNextDocumentChange(){return this._forceDirtyStateChangeOnNextDocumentChange}_hasRemotes=!1;get hasRemotes(){return this._hasRemotes}get isBlameable(){return null==this._blameFailed&&this._isTracked}get canDirtyIdle(){if(!this.document.isDirty)return!1;let e=n.i.get("advanced.blame.sizeThresholdAfterEdit");return!(e>0&&this.document.lineCount>e)}_isDirtyIdle=!1;get isDirtyIdle(){return this._isDirtyIdle}setIsDirtyIdle(){return!!this.canDirtyIdle&&(this._isDirtyIdle=!0,!0)}get isRevision(){return null!=this._uri&&!!this._uri.sha&&this._uri.sha!==o.E1}_isTracked=!1;get isTracked(){return this._isTracked}get lineCount(){return this.document.lineCount}get uri(){return this._uri}async activate(){this._requiresUpdate&&await this.update({forceDirtyIdle:!0}),(0,a.Qr)("gitlens:activeFileStatus",this.getStatus())}is(e){return e===this.document}_updateDebounced;refresh(e){this._requiresUpdate=!0,this._blameFailed=void 0,this._isDirtyIdle=!1,null!=this.state&&(this.state=void 0,h.YJ.log(`Reset state for '${this.document.uri.toString(!0)}', reason=${e}`)),"repo-changed"===e&&(0,c.Qp)(this.document)&&(null==this._updateDebounced&&(this._updateDebounced=(0,l.Cu)(this.update.bind(this),250)),this._updateDebounced())}_blameFailed;setBlameFailure(e){let t=this.isBlameable;this._blameFailed=e,t&&(0,c.Qp)(this.document)&&this.update({forceBlameChange:!0})}resetForceDirtyStateChangeOnNextDocumentChange(){this._forceDirtyStateChangeOnNextDocumentChange=!1}setForceDirtyStateChangeOnNextDocumentChange(){this._forceDirtyStateChangeOnNextDocumentChange=!0}_requiresUpdate=!0;async update(e){if(this._requiresUpdate=!1,this._disposed||null==this._uri){this._hasRemotes=!1,this._isTracked=!1;return}this.document.isDirty&&e?.forceDirtyIdle&&this.canDirtyIdle?this._isDirtyIdle=!0:this._isDirtyIdle=!1;let t=(0,c.Ku)(this.document),i=e?.forceBlameChange?void 0:this.isBlameable,r=this.container.git.getRepository(this._uri);if(null==r?(this._isTracked=!1,this._hasRemotes=!1):[this._isTracked,this._hasRemotes]=await Promise.all([this.container.git.isTracked(this._uri),r.hasRemotes()]),null!=t){let e=this.isBlameable;if((0,a.Qr)("gitlens:activeFileStatus",this.getStatus()),!this.initializing&&i!==e){let i={editor:t,document:this,blameable:e};this._onDidBlameStateChange.fire(i),this._eventDelegates.onDidBlameStateChange(i)}}}getStatus(){let e="";return this.isTracked&&(e+="tracked|"),this.isBlameable&&(e+="blameable|"),this.isRevision&&(e+="revision|"),this.hasRemotes&&(e+="remotes|"),e||void 0}}},6708:(e,t,i)=>{i.d(t,{EF:()=>l,IH:()=>d,In:()=>n,M5:()=>a,cn:()=>g,eM:()=>m,gJ:()=>h,od:()=>p,u0:()=>c,wb:()=>u});var r,s,o,n=((r=n||{}).Branch="b",r.Commit="c",r.Comparison="compare",r.Draft="drafts",r.File="f",r.Repository="r",r.Tag="t",r.Workspace="workspace",r);let a=["drafts","workspace"],l=[];function h(e){switch(e){case"b":return"Branch";case"c":return"Commit";case"compare":return"Comparison";case"drafts":return"Cloud Patch";case"f":return"File";case"r":return"Repository";case"t":return"Tag";case"workspace":return"Workspace";default:return"Unknown"}}function c(e){switch(e){case"branch":return"b";case"revision":return"c";case"tag":return"t";default:return"r"}}function u(e){let[,t,i,r,s,...o]=e.path.split("/");if("link"!==t)return;let n=new URLSearchParams(e.query);switch(i){case"r":{let e,t,i,a,l=n.get("url")??void 0;null!=l&&(l=decodeURIComponent(l));let h=n.get("path")??void 0;if(null!=h&&(h=decodeURIComponent(h)),!l&&!h)return;if(null==s)return{type:"r",mainId:r,remoteUrl:l,repoPath:h};if(null==o||0===o.length)return;let c=o.join("/");if("compare"===s){let r=c.split(/(\.\.\.|\.\.)/);if(3!==r.length)return;e=r[0],t=r[2],null!=(i=n.get("prRepoUrl")??void 0)&&(i=decodeURIComponent(i))}else if("f"===s){a=c;let i=n.get("ref")??void 0;null!=i&&(i=decodeURIComponent(i)),e=i;let r=n.get("lines")??void 0;null!=r&&(r=decodeURIComponent(r)),t=r}else e=c;return{type:s,mainId:r,remoteUrl:l,repoPath:h,filePath:a,targetId:e,secondaryTargetId:t,secondaryRemoteUrl:i}}case"drafts":{if(null==r||r.match(/^v\d+$/))return;let e=n.get("patch")??void 0;return null!=e&&(e=decodeURIComponent(e)),{type:"drafts",targetId:r,secondaryTargetId:e}}case"workspace":return{type:"workspace",mainId:r};default:return}}var d=((s=d||{})[s.Idle=0]="Idle",s[s.AccountCheck=1]="AccountCheck",s[s.PlanCheck=2]="PlanCheck",s[s.TypeMatch=3]="TypeMatch",s[s.RepoMatch=4]="RepoMatch",s[s.CloneOrAddRepo=5]="CloneOrAddRepo",s[s.OpeningRepo=6]="OpeningRepo",s[s.AddedRepoMatch=7]="AddedRepoMatch",s[s.RemoteMatch=8]="RemoteMatch",s[s.AddRemote=9]="AddRemote",s[s.TargetMatch=10]="TargetMatch",s[s.Fetch=11]="Fetch",s[s.FetchedTargetMatch=12]="FetchedTargetMatch",s[s.OpenGraph=13]="OpenGraph",s[s.OpenComparison=14]="OpenComparison",s[s.OpenDraft=15]="OpenDraft",s[s.OpenWorkspace=16]="OpenWorkspace",s[s.OpenFile=17]="OpenFile",s),p=((o=p||{})[o.AccountCheckPassed=0]="AccountCheckPassed",o[o.DeepLinkEventFired=1]="DeepLinkEventFired",o[o.DeepLinkCancelled=2]="DeepLinkCancelled",o[o.DeepLinkResolved=3]="DeepLinkResolved",o[o.DeepLinkStored=4]="DeepLinkStored",o[o.DeepLinkErrored=5]="DeepLinkErrored",o[o.LinkIsRepoType=6]="LinkIsRepoType",o[o.LinkIsDraftType=7]="LinkIsDraftType",o[o.LinkIsWorkspaceType=8]="LinkIsWorkspaceType",o[o.OpenRepo=9]="OpenRepo",o[o.PlanCheckPassed=10]="PlanCheckPassed",o[o.RepoMatched=11]="RepoMatched",o[o.RepoMatchedInLocalMapping=12]="RepoMatchedInLocalMapping",o[o.RepoMatchFailed=13]="RepoMatchFailed",o[o.RepoAdded=14]="RepoAdded",o[o.RepoOpened=15]="RepoOpened",o[o.RemoteMatched=16]="RemoteMatched",o[o.RemoteMatchFailed=17]="RemoteMatchFailed",o[o.RemoteMatchUnneeded=18]="RemoteMatchUnneeded",o[o.RemoteAdded=19]="RemoteAdded",o[o.TargetMatchedForGraph=20]="TargetMatchedForGraph",o[o.TargetMatchedForFile=21]="TargetMatchedForFile",o[o.TargetsMatchedForComparison=22]="TargetsMatchedForComparison",o[o.TargetMatchFailed=23]="TargetMatchFailed",o[o.TargetFetched=24]="TargetFetched",o);let g={0:{1:1,2:0},1:{0:2,5:0,2:0},2:{10:3,5:0,2:0},3:{5:0,2:0,6:4,7:15,8:16},4:{5:0,11:8,12:5,13:5},5:{9:6,15:8,5:0,2:0,4:0},6:{14:7,5:0,2:0},7:{11:8,5:0},8:{5:0,16:10,17:9,18:10},9:{19:10,5:0,2:0},10:{5:0,20:13,22:14,21:17,23:11},11:{24:12,5:0,2:0},12:{20:13,22:14,21:17,5:0},13:{3:0,5:0},14:{3:0,5:0},15:{3:0,5:0},16:{3:0,5:0},17:{3:0,5:0}},m={0:{message:"Done.",increment:100},1:{message:"Checking account...",increment:1},2:{message:"Checking plan...",increment:2},3:{message:"Matching link type...",increment:5},4:{message:"Finding a matching repository...",increment:10},5:{message:"Adding repository...",increment:20},6:{message:"Opening repository...",increment:30},7:{message:"Finding a matching repository...",increment:40},8:{message:"Finding a matching remote...",increment:50},9:{message:"Adding remote...",increment:60},10:{message:"finding a matching target...",increment:70},11:{message:"Fetching...",increment:80},12:{message:"Finding a matching target...",increment:90},13:{message:"Opening graph...",increment:95},14:{message:"Opening comparison...",increment:95},15:{message:"Opening cloud patch...",increment:95},16:{message:"Opening workspace...",increment:95},17:{message:"Opening file...",increment:95}}},3560:(e,t,i)=>{i.d(t,{o:()=>CacheableChildrenViewNode});var r=i(4136),s=i(9620),o=i(700),n=Object.defineProperty,a=Object.getOwnPropertyDescriptor;let CacheableChildrenViewNode=class CacheableChildrenViewNode extends o.sl{_children;get children(){return this._children}set children(e){this._children!==e&&((0,s.YT)(this._children,e),this._children=e)}dispose(){super.dispose(),this.children=void 0}refresh(e=!1){e&&(this.children=void 0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?a(t,i):t,l=e.length-1;l>=0;l--)(s=e[l])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&n(t,i,o)})([(0,r.u_)()],CacheableChildrenViewNode.prototype,"refresh",1)},7412:(e,t,i)=>{i.d(t,{Q:()=>RepositoryFolderNode});var r=i(7304),s=i(1608),o=i(2152),n=i(4408),a=i(6e3),l=i(4136),h=i(8781),c=i(1072),u=i(8924),d=i(700),p=Object.defineProperty,g=Object.getOwnPropertyDescriptor,m=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?g(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&p(t,i,o),o};let RepositoryFolderNode=class RepositoryFolderNode extends u.q{constructor(e,t,i,r,s,o){super("repo-folder",e,t,i),this.parent=i,this.repo=r,this.options=o,this.updateContext({repository:this.repo}),this._uniqueId=(0,d.QP)(this.type,this.context),this.splatted=s}splatted=!0;_child;get child(){return this._child}set child(e){this._child!==e&&(this._child?.dispose(),this._child=e)}dispose(){super.dispose(),this.child=void 0}get id(){return this._uniqueId}toClipboard(){return this.repo.path}get repoPath(){return this.repo.path}async getTreeItem(){this.splatted=!1;let e=await this.repo.getBranch(),t=(e?.state.ahead??0)>0,i=(e?.state.behind??0)>0,a=t||i||this.repo.starred||this.view.container.git.isRepositoryForEditor(this.repo),l=new r.TreeItem(this.repo.formattedName??this.uri.repoPath??"",a?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);if(l.contextValue=`${d.UZ.RepositoryFolder}${this.repo.starred?"+starred":""}`,t&&(l.contextValue+="+ahead"),i&&(l.contextValue+="+behind"),"commits"===this.view.type&&this.view.state.filterCommits.get(this.repo.id)?.length&&(l.contextValue+="+filtered"),null!=e&&this.options?.showBranchAndLastFetched){let t;let i=await this.repo.getLastFetched()??0,a=e.getTrackingStatus();if(l.description=`${a?`${a}${(0,c.eu)(s.or.Dot,1,1)}`:""}${e.name}${i?`${(0,c.eu)(s.or.Dot,1,1)}Last fetched ${n.Oq.formatLastFetched(i)}`:""}`,null!=e.upstream){let i=(0,o.U$)(await this.view.container.git.getRemotesWithProviders(e.repoPath));t=i?.length?i[0].name:void 0}else{let i=await e.getRemote();t=i?.provider?.name}l.tooltip=new r.MarkdownString(`${this.repo.formattedName??this.uri.repoPath??""}${i?`${(0,c.eu)(s.or.Dash,2,2)}Last fetched ${n.Oq.formatLastFetched(i,!1)}`:""}${this.repo.formattedName?`
${this.uri.repoPath}`:""}

Current branch $(git-branch) ${e.name}${null!=e.upstream?` is ${e.getTrackingStatus({empty:e.upstream.missing?`missing upstream $(git-branch) ${e.upstream.name}`:`up to date with $(git-branch) ${e.upstream.name}${t?` on ${t}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${e.upstream.name}${t?` on ${t}`:""}`})}`:`hasn't been published to ${t??"a remote"}`}`,!0)}else l.tooltip=this.repo.formattedName?`${this.repo.formattedName}
${this.uri.repoPath}`:this.uri.repoPath??"";return l}async getSplattedChild(){return null==this.child&&await this.getChildren(),this.child}async refresh(e=!1){super.refresh(e),await this.child?.triggerChange(e,!1,this),await this.ensureSubscription()}async star(){await this.repo.star()}async unstar(){await this.repo.unstar()}subscribe(){return(0,h.gd)(this.repo.onDidChange,this.onRepositoryChanged,this)}etag(){return this.repo.etag}onRepositoryChanged(e){if(e.changed(n.c7.Closed,n.MR.Any)){this.dispose(),this.parent?.triggerChange(!0);return}if(e.changed(n.c7.Opened,n.MR.Any)||e.changed(n.c7.Starred,n.MR.Any)){this.parent?.triggerChange(!0);return}this.changed(e)&&(!this.loaded||this.repo.orderByLastFetched?this.parent??this:this).triggerChange(!0)}};m([(0,a.I)(),(0,l.u_)()],RepositoryFolderNode.prototype,"refresh",1),m([(0,l.Yz)()],RepositoryFolderNode.prototype,"star",1),m([(0,l.Yz)()],RepositoryFolderNode.prototype,"unstar",1),m([(0,l.u_)()],RepositoryFolderNode.prototype,"subscribe",1),m([(0,l.u_)({args:{0:e=>e.toString()}})],RepositoryFolderNode.prototype,"onRepositoryChanged",1)},8924:(e,t,i)=>{i.d(t,{q:()=>SubscribeableViewNode});var r=i(7304),s=i(6e3),o=i(4136),n=i(8781),a=i(3560),l=i(700),h=Object.defineProperty,c=Object.getOwnPropertyDescriptor,u=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?c(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&h(t,i,o),o};let SubscribeableViewNode=class SubscribeableViewNode extends a.o{disposable;subscription;loaded=!1;constructor(e,t,i,s){super(e,t,i,s);let o=[(0,n.gd)(this.view.onDidChangeVisibility,this.onVisibilityChanged,this)];(0,l.WY)(this.view)&&o.push((0,n.gd)(this.view.onDidChangeAutoRefresh,this.onAutoRefreshChanged,this));let a=this.getTreeItem;this.getTreeItem=function(){return this.loaded=!0,this.ensureSubscription(),a.apply(this)};let h=this.getChildren;this.getChildren=function(){return this.loaded=!0,this.ensureSubscription(),h.apply(this)},this.disposable=r.Disposable.from(...o)}dispose(){super.dispose(),this.unsubscribe(),this.disposable?.dispose()}async triggerChange(e=!1,t=!1){this.loaded&&!this._disposed&&(e&&!this.view.visible&&(this._pendingReset=e),await super.triggerChange(e,t))}_canSubscribe=!0;get canSubscribe(){return this._canSubscribe&&!this._disposed}set canSubscribe(e){this._canSubscribe!==e&&(this._canSubscribe=e,this.ensureSubscription(),e&&this.triggerChange())}_etag;_pendingReset=!1;get requiresResetOnVisible(){let e=this._pendingReset;this._pendingReset=!1;let t=this.etag();return t!==this._etag&&(this._etag=t,e=!0),e}async unsubscribe(){if(this._etag=this.etag(),null!=this.subscription){let e=this.subscription;this.subscription=void 0,(await e)?.dispose()}}onAutoRefreshChanged(){this.onVisibilityChanged({visible:this.view.visible})}onVisibilityChanged(e){this.ensureSubscription(),e.visible&&this.triggerChange(this.requiresResetOnVisible)}async ensureSubscription(){if(!this.canSubscribe||!this.view.visible||(0,l.WY)(this.view)&&!this.view.autoRefresh){await this.unsubscribe();return}null==this.subscription&&(this.subscription=Promise.resolve(this.subscribe()),await this.subscription)}async resetSubscription(){await this.unsubscribe(),await this.ensureSubscription()}};u([(0,o.u_)()],SubscribeableViewNode.prototype,"triggerChange",1),u([(0,o.u_)()],SubscribeableViewNode.prototype,"unsubscribe",1),u([(0,o.u_)()],SubscribeableViewNode.prototype,"onAutoRefreshChanged",1),u([(0,o.u_)()],SubscribeableViewNode.prototype,"onVisibilityChanged",1),u([(0,s.I)(),(0,o.u_)()],SubscribeableViewNode.prototype,"ensureSubscription",1),u([(0,s.I)(),(0,o.u_)()],SubscribeableViewNode.prototype,"resetSubscription",1)},7248:(e,t,i)=>{i.d(t,{K:()=>s,U:()=>ViewFileNode});var r=i(700);let ViewFileNode=class ViewFileNode extends r.sl{constructor(e,t,i,r,s){super(e,t,i,r),this.parent=r,this.file=s}get repoPath(){return this.uri.repoPath}toString(){return`${super.toString()}:${this.file.path}`}};function s(e){return e instanceof ViewFileNode}},700:(e,t,i)=>{i.d(t,{Ap:()=>g,OS:()=>v,QP:()=>d,Qh:()=>y,UZ:()=>u,WY:()=>m,gb:()=>w,kP:()=>f,sl:()=>p});var r,s=i(6e3),o=i(4136),n=i(8196),a=i(6448),l=Object.defineProperty,h=Object.getOwnPropertyDescriptor,c=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?h(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&l(t,i,o),o},u=((r=u||{}).ActiveFileHistory="gitlens:history:active:file",r.ActiveLineHistory="gitlens:history:active:line",r.AutolinkedItems="gitlens:autolinked:items",r.AutolinkedIssue="gitlens:autolinked:issue",r.AutolinkedItem="gitlens:autolinked:item",r.Branch="gitlens:branch",r.Branches="gitlens:branches",r.BranchStatusAheadOfUpstream="gitlens:status-branch:upstream:ahead",r.BranchStatusBehindUpstream="gitlens:status-branch:upstream:behind",r.BranchStatusMissingUpstream="gitlens:status-branch:upstream:missing",r.BranchStatusNoUpstream="gitlens:status-branch:upstream:none",r.BranchStatusSameAsUpstream="gitlens:status-branch:upstream:same",r.BranchStatusFiles="gitlens:status-branch:files",r.Commit="gitlens:commit",r.Commits="gitlens:commits",r.Compare="gitlens:compare",r.CompareBranch="gitlens:compare:branch",r.ComparePicker="gitlens:compare:picker",r.ComparePickerWithRef="gitlens:compare:picker:ref",r.CompareResults="gitlens:compare:results",r.CompareResultsCommits="gitlens:compare:results:commits",r.Contributor="gitlens:contributor",r.Contributors="gitlens:contributors",r.DateMarker="gitlens:date-marker",r.Draft="gitlens:draft",r.File="gitlens:file",r.FileHistory="gitlens:history:file",r.Folder="gitlens:folder",r.Grouping="gitlens:grouping",r.LineHistory="gitlens:history:line",r.Merge="gitlens:merge",r.MergeConflictCurrentChanges="gitlens:merge-conflict:current",r.MergeConflictIncomingChanges="gitlens:merge-conflict:incoming",r.Message="gitlens:message",r.MessageSignIn="gitlens:message:signin",r.Pager="gitlens:pager",r.PullRequest="gitlens:pullrequest",r.Rebase="gitlens:rebase",r.Reflog="gitlens:reflog",r.ReflogRecord="gitlens:reflog-record",r.Remote="gitlens:remote",r.Remotes="gitlens:remotes",r.Repositories="gitlens:repositories",r.Repository="gitlens:repository",r.RepositoryFolder="gitlens:repo-folder",r.ResultsFile="gitlens:file:results",r.ResultsFiles="gitlens:results:files",r.SearchAndCompare="gitlens:searchAndCompare",r.SearchResults="gitlens:search:results",r.SearchResultsCommits="gitlens:search:results:commits",r.Stash="gitlens:stash",r.Stashes="gitlens:stashes",r.StatusFileCommits="gitlens:status:file:commits",r.StatusFiles="gitlens:status:files",r.StatusAheadOfUpstream="gitlens:status:upstream:ahead",r.StatusBehindUpstream="gitlens:status:upstream:behind",r.StatusMissingUpstream="gitlens:status:upstream:missing",r.StatusNoUpstream="gitlens:status:upstream:none",r.StatusSameAsUpstream="gitlens:status:upstream:same",r.Tag="gitlens:tag",r.Tags="gitlens:tags",r.UncommittedFiles="gitlens:uncommitted:files",r.Workspace="gitlens:workspace",r.WorkspaceMissingRepository="gitlens:workspaceMissingRepository",r.Workspaces="gitlens:workspaces",r.Worktree="gitlens:worktree",r.Worktrees="gitlens:worktrees",r);function d(e,t){let i="";return t.root&&(i+="/root"),null!=t.workspace&&(i+=`/ws/${t.workspace.id}`),null!=t.wsRepositoryDescriptor&&(i+=`/wsrepo/${t.wsRepositoryDescriptor.id}`),null!=t.repository&&(i+=`/repo/${t.repository.id}`),null!=t.worktree&&(i+=`/worktree/${t.worktree.uri.path}`),null!=t.remote&&(i+=`/remote/${t.remote.name}`),null!=t.tag&&(i+=`/tag/${t.tag.id}`),null!=t.branch&&(i+=`/branch/${t.branch.id}`),null!=t.branchStatus&&(i+=`/branch-status/${t.branchStatus.upstream??"-"}`),null!=t.branchStatusUpstreamType&&(i+=`/branch-status-direction/${t.branchStatusUpstreamType}`),null!=t.status&&(i+=`/status/${t.status}`),null!=t.reflog&&(i+=`/reflog/${t.reflog.sha}+${t.reflog.selector}+${t.reflog.command}+${t.reflog.commandArgs??""}+${t.reflog.date.getTime()}`),null!=t.contributor&&(i+=`/contributor/${t.contributor.id??`${t.contributor.username}+${t.contributor.email}+${t.contributor.name}`}`),null!=t.autolinksId&&(i+=`/autolinks/${t.autolinksId}`),null!=t.comparisonId&&(i+=`/comparison/${t.comparisonId}`),null!=t.searchId&&(i+=`/search/${t.searchId}`),null!=t.commit&&(i+=`/commit/${t.commit.sha}`),null!=t.file&&(i+=`/file/${t.file.path}+${t.file.status}`),null!=t.draft&&(i+=`/draft/${t.draft.id}`),`gitlens://viewnode/${e}${i}`}let p=class{constructor(e,t,i,r){this.type=e,this.view=i,this.parent=r,this._uri=t}is(e){return this.type===e}isAny(...e){return e.includes(this.type)}_uniqueId;splatted=!1;_disposed=!1;dispose(){this._disposed=!0}get id(){return this._uniqueId}_context;get context(){return this._context??this.parent?.context??{}}updateContext(e,t=!1){this._context=this.getNewContext(e,t)}getNewContext(e,t=!1){return{...t?this.parent?.context:this.context,...e}}toString(){let e=this.id;return`${(0,a.EZ)(this)}${null!=e?`(${e})`:""}`}_uri;get uri(){return this._uri}getParent(){return this.parent?.splatted?this.parent?.getParent():this.parent}getCommand(){}triggerChange(e=!1,t=!1,i){return this._disposed?Promise.resolve():this.splatted&&null!=this.parent&&this.parent!==i?this.parent.triggerChange(e,t):this.view.refreshNode(this,e,t)}deleteState(e){if(null==this.id)throw Error("Id is required to delete state");this.view.nodeState.deleteState(this.id,e)}getState(e){if(null==this.id)throw Error("Id is required to get state");return this.view.nodeState.getState(this.id,e)}storeState(e,t,i){if(null==this.id)throw Error("Id is required to store state");this.view.nodeState.storeState(this.id,e,t,i)}};function g(e){return(0,n.is)(e,"loadMore")}function m(e){return(0,n.is)(e,"onDidChangeAutoRefresh")}function f(e){return"function"==typeof e.edit}function w(e){return"function"==typeof e.dismissNode}function v(e){return null!=e&&"repoPath"in e&&"string"==typeof e.repoPath?e.repoPath:void 0}function y(e,t){return null!=e&&e instanceof p&&(null==t||e.type===t)}c([(0,s.I)(),(0,o.u_)()],p.prototype,"triggerChange",1),p=c([(0,o.WE)((e,t)=>`${t}${null!=e.id?`(${e.id})`:""}`)],p)},3876:(e,t,i)=>{i.d(t,{e:()=>ViewRefNode,y:()=>ViewRefFileNode});var r=i(1424),s=i(7248),o=i(700);let ViewRefNode=class ViewRefNode extends o.sl{constructor(e,t,i,r){super(e,t,i,r),this.parent=r}get repoPath(){return this.uri.repoPath}toString(){return`${super.toString()}:${(0,r.u)(this.ref,!1)}`}};let ViewRefFileNode=class ViewRefFileNode extends s.U{toString(){return`${super.toString()}:${this.file.path}`}}},1864:(e,t,i)=>{i.d(t,{K:()=>AutolinkedItemNode});var r=i(7304),s=i(2812),o=i(7956),n=i(6944),a=i(2356),l=i(700);let AutolinkedItemNode=class AutolinkedItemNode extends l.sl{constructor(e,t,i,r,o){super("autolink",s.wv.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.item=r,this.enrichedItem=o,this._uniqueId=(0,l.QP)(`${this.type}+${r.id}`,this.context)}get id(){return this._uniqueId}toClipboard(){return this.item.url}getChildren(){return[]}getTreeItem(){let e=this.enrichedItem,t=(0,a.um)(e);if(t&&e.then(e=>{this.enrichedItem=e,this.view.triggerNodeChange(this)}),t||null==e){let e=this.item,{provider:i}=e,s=new r.TreeItem(e.description??`Autolink ${e.prefix}${e.id}`,r.TreeItemCollapsibleState.None);return s.description=i?.name??"Custom",s.iconPath=new r.ThemeIcon(t?"loading~spin":null==e.type?"link":"pullrequest"===e.type?"git-pull-request":"issues"),s.contextValue=l.UZ.AutolinkedItem,s.tooltip=new r.MarkdownString(`${e.description?`Autolinked ${e.description}`:`${null==e.type?"Autolinked":"pullrequest"===e.type?"Autolinked Pull Request":"Autolinked Issue"} ${e.prefix}${e.id}`} \\
[${e.url}](${e.url}${null!=e.title?` "${e.title}"`:""})`),s}let i=(0,n.Yn)(e.closedDate??e.date),s=new r.TreeItem(`${e.id}: ${e.title}`,r.TreeItemCollapsibleState.None);s.description=i,s.iconPath=(0,o.op)(e),s.contextValue="pullrequest"===e.type?l.UZ.PullRequest:l.UZ.AutolinkedIssue;let h=` "Open ${"pullrequest"===e.type?"Pull Request":"Issue"} \\#${e.id} on ${e.provider.name}"`,c=new r.MarkdownString(`${(0,o.eV)(e)} [**${e.title.trim()}**](${e.url}${h}) \\
[#${e.id}](${e.url}${h}) was ${e.closed?"closed":"opened"} ${i}`,!0);return c.supportHtml=!0,c.isTrusted=!0,s.tooltip=c,s}}},6480:(e,t,i)=>{i.d(t,{O:()=>CommitFileNodeBase,q:()=>CommitFileNode});var r=i(7304),s=i(1608),o=i(3028),n=i(2812),a=i(7280),l=i(3732),h=i(700),c=i(3876);let CommitFileNodeBase=class CommitFileNodeBase extends c.y{constructor(e,t,i,r,s,o){super(e,n.wv.fromFile(r,s.repoPath,s.sha),t,i,r),this.commit=s,this.options=o,this.updateContext({commit:s,file:r}),this._uniqueId=(0,h.QP)(e,this.context)}get id(){return this._uniqueId}toClipboard(){return this.file.path}get priority(){return 0}get ref(){return this.commit}getChildren(){return[]}async getTreeItem(){if(null==this.commit.file){let e=await this.commit.getCommitForFile(this.file);if(null==e){let e=await this.view.container.git.getLogForFile(this.repoPath,this.file.path,{limit:2,ref:this.commit.sha});null!=e&&(this.commit=e.commits.get(this.commit.sha)??this.commit)}else this.commit=e}let e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.None);if(e.id=this.id,e.contextValue=this.contextValue,e.description=this.description,"type"===this.view.config.files.icon)e.resourceUri=r.Uri.from({scheme:s.cl.Git,authority:"gitlens-view",path:this.uri.path,query:JSON.stringify({path:this.uri.fsPath,ref:this.uri.sha,decoration:`gitlens-view://commit-file/status/${this.file.status}`})});else{e.resourceUri=r.Uri.parse(`gitlens-view://commit-file/status/${this.file.status}`);let t=(0,a.YX)(this.file.status);e.iconPath={dark:this.view.container.context.asAbsolutePath((0,l.En)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,l.En)("images","light",t))}}return e.tooltip=this.tooltip,e.command=this.getCommand(),this._label=void 0,e}get contextValue(){return this.commit.isUncommitted?this.commit.isUncommittedStaged?`${h.UZ.File}+staged`:`${h.UZ.File}+unstaged`:`${h.UZ.File}+committed${this.options?.branch?.current?"+current":""}${this.options?.branch?.current&&this.options.branch.sha===this.commit.ref?"+HEAD":""}${this.options?.unpublished?"+unpublished":""}`}get description(){return o.o.fromTemplate(this.view.config.formats.files.description,this.file,{relativePath:this.relativePath})}_folderName;get folderName(){return void 0===this._folderName&&(this._folderName=(0,l.ye)(this.uri.relativePath)),this._folderName}_label;get label(){return void 0===this._label&&(this._label=o.o.fromTemplate(this.view.config.formats.files.label,this.file,{relativePath:this.relativePath})),this._label}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0}get tooltip(){let e=o.o.fromTemplate(`\${file}\${'&nbsp;&nbsp;\u2022&nbsp;&nbsp;'changesDetail}\${'&nbsp;\\
'directory}&nbsp;

\${status}\${ (originalPath)}`,this.file),t=new r.MarkdownString(e,!0);return t.supportHtml=!0,t.isTrusted=!0,t}getCommand(){let e;e=this.commit.lines.length?this.commit.lines[0].line-1:this.options?.selection?.active.line??0;let t={commit:this.commit,uri:n.wv.fromFile(this.file,this.commit.repoPath),line:e,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:s.eq.DiffWithPrevious,arguments:[void 0,t]}}};let CommitFileNode=class CommitFileNode extends CommitFileNodeBase{constructor(e,t,i,r,s){super("commit-file",e,t,i,r,s)}}},3304:(e,t,i)=>{i.d(t,{s:()=>CommitNode});var r=i(7304),s=i(1608),o=i(204),n=i(9455),a=i(9444),l=i(4169),h=i(3664),c=i(3732),u=i(2356),d=i(1072),p=i(9620),g=i(700),m=i(3876),f=i(6480),w=i(23),v=i(5804);let CommitNode=class CommitNode extends m.e{constructor(e,t,i,r,s,o,n={}){super("commit",i.getGitUri(),e,t),this.commit=i,this.unpublished=r,this.branch=s,this.getBranchAndTagTips=o,this._options=n,this.updateContext({commit:i}),this._uniqueId=(0,g.QP)(this.type,this.context)}dispose(){super.dispose(),this.children=void 0}get id(){return this._uniqueId}toClipboard(){return`${this.commit.shortSha}: ${this.commit.summary}`}get isTip(){return(this.branch?.current&&this.branch.sha===this.commit.ref)??!1}get ref(){return this.commit}_children;get children(){return this._children}set children(e){this._children!==e&&((0,p.YT)(this._children,e),this._children=e)}async getChildren(){if(null==this.children){let e,t;let i=this.commit,r=[];if("tags"!==this.view.type&&!this.unpublished&&(0,h.wp)("gitlens:hasConnectedRemotes")&&this.view.config.pullRequests.enabled&&this.view.config.pullRequests.showForCommits&&void 0===(t=this.getState("pullRequest"))&&void 0===this.getState("pendingPullRequest")){e=(0,u.Qv)();let t=this.getAssociatedPullRequest(i);queueMicrotask(async()=>{await e?.promise;let r=!1,s=setTimeout(()=>{r=!0,this.view.triggerNodeChange(this)},250),o=await t;clearTimeout(s),null!=o&&null!=this.children&&this.children.unshift(new v.c(this.view,this,o,i)),(r||null!=o)&&this.view.triggerNodeChange(this)})}for(let e of(await i.getCommitsForFiles()))r.push(new f.q(this.view,this,e.file,e));if("list"!==this.view.config.files.layout){let e=(0,n.IJ)(r,e=>e.uri.relativePath.split("/"),(...e)=>(0,c.ay)((0,c.En)(...e)),this.view.config.files.compact);r=new w.s(this.view,this,e,this.repoPath,"",void 0).getChildren()}else r.sort((e,t)=>(0,d.sd)(e.label,t.label));null!=t&&r.unshift(new v.c(this.view,this,t,i)),this.children=r,setTimeout(()=>e?.fulfill(),1)}return this.children}async getTreeItem(){let e=o.E.fromTemplate(this.view.config.formats.commits.label,this.commit,{dateFormat:l.i.get("defaultDateFormat"),getBranchAndTagTips:e=>this.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0}),t=new r.TreeItem(e,this._options.expand?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);t.id=this.id,t.contextValue=`${g.UZ.Commit}${this.branch?.current?"+current":""}${this.isTip?"+HEAD":""}${this.unpublished?"+unpublished":""}`,t.description=o.E.fromTemplate(this.view.config.formats.commits.description,this.commit,{dateFormat:l.i.get("defaultDateFormat"),getBranchAndTagTips:e=>this.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0});let i=this.getState("pendingPullRequest");return t.iconPath=null!=i?new r.ThemeIcon("loading~spin"):this.unpublished?new r.ThemeIcon("arrow-up",new r.ThemeColor("gitlens.unpublishedCommitIconColor")):this.view.config.avatars?await this.commit.getAvatarUri({defaultStyle:l.i.get("defaultGravatarsStyle")}):void 0,t}getCommand(){let e={commit:this.commit,uri:this.uri,line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:s.eq.DiffWithPrevious,arguments:[void 0,e]}}refresh(e){super.refresh?.(e),this.children=void 0,e&&this.deleteState()}async resolveTreeItem(e,t){return null==e.tooltip&&(e.tooltip=await this.getTooltip(t)),e}async getAssociatedPullRequest(e,t){let i=this.getState("pullRequest");if(void 0!==i)return Promise.resolve(i??void 0);let r=this.getState("pendingPullRequest");return null==r?(r=e.getAssociatedPullRequest(t),this.storeState("pendingPullRequest",r),i=await r,this.storeState("pullRequest",i??null),this.deleteState("pendingPullRequest"),i):r}async getTooltip(e){let t,i;let[s,n]=await Promise.allSettled([this.view.container.git.getBestRemotesWithProviders(this.commit.repoPath,e),null==this.commit.message?this.commit.ensureFullDetails():void 0]);if(e.isCancellationRequested)return;let h=(0,u.Cv)(s,[]),[c]=h;if(c?.hasIntegration()){let[r,s]=await Promise.allSettled([(0,a.Gu)(this.commit.getEnrichedAutolinks(c),e),this.getAssociatedPullRequest(this.commit,c)]);if(e.isCancellationRequested)return;let o=(0,u.Cv)(r);o?.paused||(t=o?.value),i=(0,u.Cv)(s)}let d=await o.E.fromTemplateAsync(this.getTooltipTemplate(),this.commit,{enrichedAutolinks:t,dateFormat:l.i.get("defaultDateFormat"),getBranchAndTagTips:this.getBranchAndTagTips,messageAutolinks:!0,messageIndent:4,pullRequest:i,outputFormat:"markdown",remotes:h,unpublished:this.unpublished}),p=new r.MarkdownString(d,!0);return p.supportHtml=!0,p.isTrusted=!0,p}getTooltipTemplate(){return this.view.config.formats.commits.tooltip}}},4924:(e,t,i)=>{i.d(t,{Ck:()=>LoadMoreNode,_Y:()=>MessageNode,ac:()=>CommandMessageNode});var r=i(7304),s=i(1608),o=i(2812),n=i(4169),a=i(700);let MessageNode=class MessageNode extends a.sl{constructor(e,t,i,r,s,n,a){super("message",o.oP,e,t),this.parent=t,this._message=i,this._description=r,this._tooltip=s,this._iconPath=n,this._contextValue=a}getChildren(){return[]}getTreeItem(){let e=new r.TreeItem(this._message,r.TreeItemCollapsibleState.None);return e.contextValue=this._contextValue??a.UZ.Message,e.description=this._description,e.tooltip=this._tooltip,e.iconPath=this._iconPath,e}};let CommandMessageNode=class CommandMessageNode extends MessageNode{constructor(e,t,i,r,s,o,n){super(e,t,r,s,o,n),this.parent=t,this._command=i}getTreeItem(){let e=super.getTreeItem();return e instanceof r.TreeItem?(e.command=this._command,e):e.then(e=>(e.command=this._command,e))}};let PagerNode=class PagerNode extends a.sl{constructor(e,t,i,r,s){super("pager",o.oP,e,t),this.message=i,this.previousNode=r,this.options=s}async loadAll(){let e=await this.options?.getCount?.()??0;return this.view.loadMoreNodeChildren(this.parent,e>5e3?5e3:0,this.previousNode,this.options?.context)}loadMore(){return this.view.loadMoreNodeChildren(this.parent,this.options?.pageSize??n.i.get("views.pageItemLimit"),this.previousNode,this.options?.context)}getChildren(){return[]}getTreeItem(){let e=new r.TreeItem(this.message,r.TreeItemCollapsibleState.None);return e.contextValue=a.UZ.Pager,e.command=this.getCommand(),e}getCommand(){return{title:"Load more",command:"gitlens.views.loadMoreChildren",arguments:[this]}}};let LoadMoreNode=class LoadMoreNode extends PagerNode{constructor(e,t,i,r){super(e,t,r?.message??(r?.pageSize===0?`Load all ${s.or.Space}${s.or.Dash}${s.or.Space} this may take a while`:"Load more"),i,r)}}},1452:(e,t,i)=>{i.d(t,{Mp:()=>C,O0:()=>b,SY:()=>A,kZ:()=>CompareResultsNode,sP:()=>k});var r=i(7304),s=i(7312),o=i(2812),n=i(1424),a=i(6e3),l=i(4136),h=i(8781),c=i(2356),u=i(1072),d=i(8924),p=i(700),g=i(1916),m=i(9708),f=Object.defineProperty,w=Object.getOwnPropertyDescriptor,v=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?w(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&f(t,i,o),o};let y=0;let CompareResultsNode=class CompareResultsNode extends d.q{constructor(e,t,i,r,s,n=0){super("compare-results",o.wv.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this._ref=r,this._compareWith=s,this._storedAt=n,this._instanceId=y++,this.updateContext({comparisonId:`${r.ref}+${s.ref}+${this._instanceId}`,storedComparisonId:this.getStorageId()}),this._uniqueId=(0,p.QP)(this.type,this.context),0===this._storedAt&&(this._storedAt=Date.now(),this.store(!0))}_instanceId;get id(){return this._uniqueId}etag(){return this._storedAt}get order(){return this._storedAt}get ahead(){return{ref1:this._compareWith.ref||"HEAD",ref2:this._ref.ref}}get behind(){return{ref1:this._ref.ref,ref2:this._compareWith.ref||"HEAD"}}get compareRef(){return this._ref}get compareWithRef(){return this._compareWith}_isFiltered;get filterByAuthors(){let e=this.getState("filterCommits"),t=!!e?.length;return null!=this._isFiltered&&this._isFiltered!==t&&this.updateContext({comparisonFiltered:t}),this._isFiltered=t,e}subscribe(){return(0,h.gd)(this.view.onDidChangeNodesCheckedState,this.onNodesCheckedStateChanged,this)}onNodesCheckedStateChanged(e){let t=b(this.getStorageId());e.items.some(([e])=>e.id?.startsWith(t))&&this.store(!0)}dismiss(){this.remove(!0)}async getChildren(){if(null==this.children){let e=this.ahead,t=this.behind,i=await this.view.container.git.getAheadBehindCommitCount(this.repoPath,[(0,n._u)(t.ref1||"HEAD",t.ref2,"...")],{authors:this.filterByAuthors}),r=await this.view.container.git.getMergeBase(this.repoPath,t.ref1,t.ref2,{forkPoint:!0})??await this.view.container.git.getMergeBase(this.repoPath,t.ref1,t.ref2),s=[new g.g(this.view,this,this.repoPath,"Behind",{query:this.getCommitsQuery((0,n._u)(t.ref1,t.ref2,"..")),comparison:t,direction:"behind",files:{ref1:""===t.ref1?"":r??t.ref1,ref2:t.ref2,query:this.getBehindFilesQuery.bind(this)}},{description:(0,u.u)("commit",i?.behind??0),expand:!1}),new g.g(this.view,this,this.repoPath,"Ahead",{query:this.getCommitsQuery((0,n._u)(e.ref1,e.ref2,"..")),comparison:e,direction:"ahead",files:{ref1:r??e.ref1,ref2:e.ref2,query:this.getAheadFilesQuery.bind(this)}},{description:(0,u.u)("commit",i?.ahead??0),expand:!1})];this.filterByAuthors?.length||s.push(new m.m(this.view,this,this.repoPath,this._compareWith.ref,this._ref.ref,this.getFilesQuery.bind(this),void 0,{expand:!1})),this.children=s}return this.children}getTreeItem(){let e;if(this.view.container.git.repositoryCount>1){let t=this.repoPath?this.view.container.git.getRepository(this.repoPath):void 0;e=t?.formattedName??this.repoPath}let t=new r.TreeItem(`Comparing ${this._ref.label??(0,n.c5)(this._ref.ref,{strings:{working:"Working Tree"}})} with ${this._compareWith.label??(0,n.c5)(this._compareWith.ref,{strings:{working:"Working Tree"}})}`,r.TreeItemCollapsibleState.Collapsed);return t.id=this.id,t.contextValue=`${p.UZ.CompareResults}${""===this._ref.ref?"+working":""}${this.filterByAuthors?.length?"+filtered":""}`,t.description=e,t.iconPath=new r.ThemeIcon("compare-changes"),t}async getDiffRefs(){return Promise.resolve([this._compareWith.ref,this._ref.ref])}async getFilesComparison(){let e=(await this.getChildren()).find(e=>e.is("results-files"));return e?.getFilesComparison()}clearReviewed(){A(this.view,this.getStorageId()),this.store()}async swap(){if(""===this._ref.ref){r.window.showErrorMessage("Cannot swap comparisons with the working tree");return}let e=this.getStorageId(),t=this._ref;this._ref=this._compareWith,this._compareWith=t,await this.replace(e,!0),this.children=void 0,this.view.triggerNodeChange(this.parent),queueMicrotask(()=>this.view.reveal(this,{expand:!0,focus:!0,select:!0}))}async getAheadFilesQuery(){return this.getAheadBehindFilesQuery((0,n._u)(this._compareWith?.ref||"HEAD",this._ref.ref||"HEAD","..."),""===this._ref.ref)}async getBehindFilesQuery(){return this.getAheadBehindFilesQuery((0,n._u)(this._ref.ref||"HEAD",this._compareWith.ref||"HEAD","..."),!1)}async getAheadBehindFilesQuery(e,t){let[i,r,s,o]=await Promise.allSettled([this.view.container.git.getDiffStatus(this.repoPath,e),t?this.view.container.git.getDiffStatus(this.repoPath,"HEAD"):void 0,this.view.container.git.getChangedFilesCount(this.repoPath,e),t?this.view.container.git.getChangedFilesCount(this.repoPath,"HEAD"):void 0]),n=(0,c.Cv)(i)??[],a=(0,c.Cv)(s);if(t){let e=(0,c.Cv)(r);if(null!=e){if(0===n.length)n=e??[];else for(let t of e){let e=n.findIndex(e=>e.path===t.path);-1!==e?n.splice(e,1,t):n.push(t)}}let t=(0,c.Cv)(o);null!=t&&(a=null==a?t:{additions:a.additions+t.additions,deletions:a.deletions+t.deletions,changedFiles:n.length,approximated:!0})}return{label:`${(0,u.u)("file",n.length,{zero:"No"})} changed`,files:n,stats:a}}getCommitsQuery(e){let t=this.repoPath;return async i=>{let r=await this.view.container.git.getLog(t,{limit:i,ref:e,authors:this.filterByAuthors}),s={log:r,hasMore:r?.hasMore??!0};return s.hasMore&&(s.more=async e=>{s.log=await s.log?.more?.(e)??s.log,s.hasMore=s.log?.hasMore??!0}),s}}async getFilesQuery(){let e;if(""===this._compareWith.ref)throw Error("Cannot get files for comparisons of a ref with working tree");e=""===this._ref.ref?this._compareWith.ref:`${this._compareWith.ref}..${this._ref.ref}`;let[t,i]=await Promise.allSettled([this.view.container.git.getDiffStatus(this.repoPath,e),this.view.container.git.getChangedFilesCount(this.repoPath,e)]),r=(0,c.Cv)(t)??[];return{label:`${(0,u.u)("file",r.length,{zero:"No"})} changed`,files:r,stats:(0,c.Cv)(i)}}getStorageId(){return(0,s.m)(`${this.repoPath}|${this._ref.ref}|${this._compareWith.ref}`,"base64")}remove(e=!1){return A(this.view,this.getStorageId()),this.view.updateStorage(this.getStorageId(),void 0,e)}async replace(e,t=!1){return A(this.view,e),await this.view.updateStorage(e,void 0,t),this.store(t)}store(e=!1){let t=this.getStorageId(),i=C(this.view,t);return this.view.updateStorage(t,{type:"comparison",timestamp:this._storedAt,path:this.repoPath,ref1:{label:this._ref.label,ref:this._ref.ref},ref2:{label:this._compareWith.label,ref:this._compareWith.ref},checkedFiles:i.length>0?i:void 0},e)}};function b(e){return`${e}|`}function C(e,t){let i=[];for(let[s,o]of e.nodeState.get(b(t),"checked"))o===r.TreeItemCheckboxState.Checked&&i.push(s);return i}function A(e,t){e.nodeState.delete(b(t),"checked")}function k(e,t){if(t?.length)for(let i of t)e.nodeState.storeState(i,"checked",r.TreeItemCheckboxState.Checked,!0)}v([(0,a.I)(),(0,l.u_)()],CompareResultsNode.prototype,"getDiffRefs",1),v([(0,l.Yz)()],CompareResultsNode.prototype,"clearReviewed",1),v([(0,l.Yz)()],CompareResultsNode.prototype,"swap",1)},9116:(e,t,i)=>{i.d(t,{I:()=>FileRevisionAsCommitNode,e:()=>w});var r=i(7304),s=i(1608),o=i(204),n=i(3028),a=i(2812),l=i(7280),h=i(9444),c=i(4169),u=i(3732),d=i(2356),p=i(700),g=i(3876),m=i(8708),f=i(5412);let FileRevisionAsCommitNode=class FileRevisionAsCommitNode extends g.y{constructor(e,t,i,r,s={}){super("file-commit",a.wv.fromFile(i,r.repoPath,r.sha),e,t,i),this.commit=r,this._options=s}toClipboard(){return`${this.commit.shortSha}: ${this.commit.summary}`}get isTip(){return(this._options.branch?.current&&this._options.branch.sha===this.commit.ref)??!1}get ref(){return this.commit}async getChildren(){if(!this.commit.file?.hasConflicts)return[];let[e,t]=await Promise.allSettled([this.view.container.git.getMergeStatus(this.commit.repoPath),this.view.container.git.getRebaseStatus(this.commit.repoPath)]),i=(0,d.Cv)(e),r=(0,d.Cv)(t);return null==i&&null==r?[]:[new m.S(this.view,this,i??r,this.file),new f.S(this.view,this,i??r,this.file)]}async getTreeItem(){if(null==this.commit.file){let e=await this.commit.getCommitForFile(this.file);if(null==e){let e=await this.view.container.git.getLogForFile(this.repoPath,this.file.path,{limit:2,ref:this.commit.sha});null!=e&&(this.commit=e.commits.get(this.commit.sha)??this.commit)}else this.commit=e}let e=new r.TreeItem(o.E.fromTemplate(this.view.config.formats.commits.label,this.commit,{dateFormat:c.i.get("defaultDateFormat"),getBranchAndTagTips:e=>this._options.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0}),this.commit.file?.hasConflicts?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.None);if(e.contextValue=this.contextValue,e.description=o.E.fromTemplate(this.view.config.formats.commits.description,this.commit,{dateFormat:c.i.get("defaultDateFormat"),getBranchAndTagTips:e=>this._options.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0}),e.resourceUri=r.Uri.parse(`gitlens-view://commit-file/status/${this.file.status}`),!this.commit.isUncommitted&&this.view.config.avatars&&(e.iconPath=this._options.unpublished?new r.ThemeIcon("arrow-up",new r.ThemeColor("gitlens.unpublishedCommitIconColor")):await this.commit.getAvatarUri({defaultStyle:c.i.get("defaultGravatarsStyle")})),null==e.iconPath){let t=(0,l.YX)(this.file.status);e.iconPath={dark:this.view.container.context.asAbsolutePath((0,u.En)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,u.En)("images","light",t))}}return e.command=this.getCommand(),e}get contextValue(){return this.commit.isUncommitted?this.commit.file?.hasConflicts?`${p.UZ.File}+conflicted`:this.commit.isUncommittedStaged?`${p.UZ.File}+staged`:`${p.UZ.File}+unstaged`:`${p.UZ.File}+committed${this._options.branch?.current?"+current":""}${this.isTip?"+HEAD":""}${this._options.unpublished?"+unpublished":""}`}getCommand(){let e;if(e=this.commit.lines.length?this.commit.lines[0].line-1:this._options.selection?.active.line??0,this.commit.file?.hasConflicts)return{title:"Open Changes",command:s.eq.DiffWith,arguments:[{lhs:{sha:"MERGE_HEAD",uri:a.wv.fromFile(this.file,this.repoPath,void 0,!0)},rhs:{sha:"HEAD",uri:a.wv.fromFile(this.file,this.repoPath)},repoPath:this.repoPath,line:0,showOptions:{preserveFocus:!1,preview:!1}}]};let t={commit:this.commit,uri:a.wv.fromFile(this.file,this.commit.repoPath),line:e,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:s.eq.DiffWithPrevious,arguments:[void 0,t]}}async resolveTreeItem(e,t){return null==e.tooltip&&(e.tooltip=await this.getTooltip(t)),e}async getConflictBaseUri(){if(!this.commit.file?.hasConflicts)return;let e=await this.view.container.git.getMergeBase(this.repoPath,"MERGE_HEAD","HEAD");return a.wv.fromFile(this.file,this.repoPath,e??"HEAD")}async getTooltip(e){let t=await w(this.view.container,this.commit,this.file,this.view.config.formats.commits.tooltipWithStatus,{getBranchAndTagTips:this._options.getBranchAndTagTips,unpublished:this._options.unpublished,cancellation:e}),i=new r.MarkdownString(t,!0);return i.supportHtml=!0,i.isTrusted=!0,i}};async function w(e,t,i,r,s){let a,l;let[u,p]=await Promise.allSettled([e.git.getBestRemotesWithProviders(t.repoPath,s?.cancellation),null==t.message?t.ensureFullDetails():void 0]);if(s?.cancellation?.isCancellationRequested)return;let g=(0,d.Cv)(u,[]),[m]=g;if(m?.hasIntegration()){let[e,i]=await Promise.allSettled([(0,h.Gu)(t.getEnrichedAutolinks(m),s?.cancellation),t.getAssociatedPullRequest(m)]),r=(0,d.Cv)(e);r?.paused||(a=r?.value),l=(0,d.Cv)(i)}let f=n.o.fromTemplate(`\${status}\${ (originalPath)}\${'&nbsp;&nbsp;\u2022&nbsp;&nbsp;'changesDetail}`,i);return o.E.fromTemplateAsync(r.replace("{{slot-status}}",f),t,{enrichedAutolinks:a,dateFormat:c.i.get("defaultDateFormat"),getBranchAndTagTips:s?.getBranchAndTagTips,messageAutolinks:!0,messageIndent:4,pullRequest:l,outputFormat:"markdown",remotes:g,unpublished:s?.unpublished})}},23:(e,t,i)=>{i.d(t,{s:()=>FolderNode});var r=i(7304),s=i(2812),o=i(1072),n=i(700);let FolderNode=class FolderNode extends n.sl{constructor(e,t,i,r,o,a,l){super("folder",s.wv.fromRepoPath(r),e,t),this.parent=t,this.root=i,this.repoPath=r,this.folderName=o,this.relativePath=a,this.containsWorkingFiles=l,this._uniqueId=(0,n.QP)(`${this.type}+${a??o}`,this.context)}priority=1;get id(){return this._uniqueId}toClipboard(){return this.folderName}getChildren(){let e;if(void 0===this.root.descendants||void 0===this.root.children)return[];if("list"===FolderNode.getFileNesting(this.view.config.files,this.root.descendants,void 0===this.relativePath))this.root.descendants.forEach(e=>e.relativePath=this.root.relativePath),e=this.root.descendants;else for(let t of(e=[],this.root.children.values())){if(void 0===t.value){e.push(new FolderNode(this.view,this.folderName?this:this.parent,t,this.repoPath,t.name,t.relativePath,this.containsWorkingFiles));continue}t.value.parent=this.folderName?this:this.parent,t.value.relativePath=this.root.relativePath,e.push(t.value)}return e.sort((e,t)=>(e instanceof FolderNode?-1:1)-(t instanceof FolderNode?-1:1)||e.priority-t.priority||(0,o.sd)(e.label,t.label)),e}getTreeItem(){let e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.Expanded);return e.id=this.id,e.contextValue=n.UZ.Folder,this.containsWorkingFiles&&(e.contextValue+="+working"),e.iconPath=r.ThemeIcon.Folder,e.tooltip=this.label,e}get label(){return this.folderName}static getFileNesting(e,t,i){let r=e.layout||"auto";if("auto"===r){if(i||e.compact){let i=e.threshold||5;if(t.length<=i)return"list"}return"tree"}return r}}},9940:(e,t,i)=>{i.d(t,{c:()=>n});var r=i(700),s=i(4924);let o=[[0,"Less than a week ago"],[7,"Over a week ago"],[25,"Over a month ago"],[77,"Over 3 months ago"]];function*n(e,t,i,{show:n}={show:!0}){let a;if(!t.view.config.showRelativeDateMarkers||!n)return yield*e;let l=i??0,h=Date.now(),c=!0;for(let i of e){if(l<o.length){let[e,n]=o[l];if(void 0===a){let t=new Date(h);a=t.setDate(t.getDate()-e)}let u=new Date(i.commit.committer.date).setUTCHours(0,0,0,0);if(u<=a){for(;l<o.length-1;){[e]=o[l+1];let t=new Date(h);if(u>t.setDate(t.getDate()-e))break;l++,a=void 0,[,n]=o[l]}c||(yield new s._Y(t.view,t,"",n,void 0,void 0,r.UZ.DateMarker)),l++,a=void 0}}c=!1,yield i}}},8708:(e,t,i)=>{i.d(t,{S:()=>MergeConflictCurrentChangesNode});var r=i(7304),s=i(1608),o=i(2812),n=i(1424),a=i(7824),l=i(4169),h=i(700),c=i(9116);let MergeConflictCurrentChangesNode=class MergeConflictCurrentChangesNode extends h.sl{constructor(e,t,i,r){super("conflict-current-changes",o.wv.fromFile(r,i.repoPath,"HEAD"),e,t),this.parent=t,this.status=i,this.file=r}_commit;async getCommit(){return null==this._commit&&(this._commit=this.view.container.git.getCommit(this.status.repoPath,"HEAD")),this._commit}getChildren(){return[]}async getTreeItem(){let e=await this.getCommit(),t=new r.TreeItem("Current changes",r.TreeItemCollapsibleState.None);return t.contextValue=h.UZ.MergeConflictCurrentChanges,t.description=`${(0,n.u)(this.status.current,{expand:!1,icon:!1})}${null!=e?` (${(0,n.u)(e,{expand:!1,icon:!1})})`:" (HEAD)"}`,t.iconPath=this.view.config.avatars?await e?.getAvatarUri({defaultStyle:l.i.get("defaultGravatarsStyle")})??new r.ThemeIcon("diff"):new r.ThemeIcon("diff"),t.command=this.getCommand(),t}getCommand(){return null==this.status.mergeBase?(0,a.qx)("vscode.open","Open Revision",this.view.container.git.getRevisionUri("HEAD",this.file.path,this.status.repoPath)):(0,a.AR)(s.eq.DiffWith,"Open Changes",{lhs:{sha:this.status.mergeBase,uri:o.wv.fromFile(this.file,this.status.repoPath,void 0,!0),title:`${this.file.path} (merge-base)`},rhs:{sha:"HEAD",uri:o.wv.fromFile(this.file,this.status.repoPath),title:`${this.file.path} (${(0,n.u)(this.status.current,{expand:!1,icon:!1})})`},repoPath:this.status.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}})}async resolveTreeItem(e,t){return null==e.tooltip&&(e.tooltip=await this.getTooltip(t)),e}async getTooltip(e){let t=await this.getCommit();if(e.isCancellationRequested)return;let i=new r.MarkdownString(`Current changes on ${(0,n.u)(this.status.current,{label:!1})}\\
$(file)${s.or.Space}${this.file.path}`,!0);if(null==t)return i;let o=await (0,c.e)(this.view.container,t,this.file,this.view.config.formats.commits.tooltipWithStatus,{cancellation:e});return i.appendMarkdown(`

${o}`),i.isTrusted=!0,i}}},5412:(e,t,i)=>{i.d(t,{S:()=>MergeConflictIncomingChangesNode});var r=i(7304),s=i(1608),o=i(2812),n=i(1424),a=i(7824),l=i(4169),h=i(700),c=i(9116);let MergeConflictIncomingChangesNode=class MergeConflictIncomingChangesNode extends h.sl{constructor(e,t,i,r){super("conflict-incoming-changes",o.wv.fromFile(r,i.repoPath,i.HEAD.ref),e,t),this.parent=t,this.status=i,this.file=r}_commit;async getCommit(){if(null==this._commit){let e="rebase"===this.status.type?this.status.steps.current.commit?.ref:this.status.HEAD.ref;if(null==e)return;this._commit=this.view.container.git.getCommit(this.status.repoPath,e)}return this._commit}getChildren(){return[]}async getTreeItem(){let e=await this.getCommit(),t=new r.TreeItem("Incoming changes",r.TreeItemCollapsibleState.None);return t.contextValue=h.UZ.MergeConflictIncomingChanges,t.description=`${(0,n.u)(this.status.incoming,{expand:!1,icon:!1})}${"rebase"===this.status.type?` (${(0,n.u)(this.status.steps.current.commit,{expand:!1,icon:!1})})`:` (${(0,n.u)(this.status.HEAD,{expand:!1,icon:!1})})`}`,t.iconPath=this.view.config.avatars?await e?.getAvatarUri({defaultStyle:l.i.get("defaultGravatarsStyle")})??new r.ThemeIcon("diff"):new r.ThemeIcon("diff"),t.command=this.getCommand(),t}getCommand(){return null==this.status.mergeBase?(0,a.qx)("vscode.open","Open Revision",this.view.container.git.getRevisionUri(this.status.HEAD.ref,this.file.path,this.status.repoPath)):(0,a.AR)(s.eq.DiffWith,"Open Changes",{lhs:{sha:this.status.mergeBase,uri:o.wv.fromFile(this.file,this.status.repoPath,void 0,!0),title:`${this.file.path} (merge-base)`},rhs:{sha:this.status.HEAD.ref,uri:o.wv.fromFile(this.file,this.status.repoPath),title:`${this.file.path} (${null!=this.status.incoming?(0,n.u)(this.status.incoming,{expand:!1,icon:!1}):"incoming"})`},repoPath:this.status.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}})}async resolveTreeItem(e,t){return null==e.tooltip&&(e.tooltip=await this.getTooltip(t)),e}async getTooltip(e){let t=await this.getCommit();if(e.isCancellationRequested)return;let i=new r.MarkdownString(`Incoming changes from ${(0,n.u)(this.status.incoming,{label:!1})}\\
$(file)${s.or.Space}${this.file.path}`,!0);if(null==t)return i.appendMarkdown("rebase"===this.status.type?`

${(0,n.u)(this.status.steps.current.commit,{capitalize:!0,label:!1})}`:`

${(0,n.u)(this.status.HEAD,{capitalize:!0,label:!1})}`),i;let o=await (0,c.e)(this.view.container,t,this.file,this.view.config.formats.commits.tooltipWithStatus,{cancellation:e});return i.appendMarkdown(`

${o}`),i.isTrusted=!0,i}}},5804:(e,t,i)=>{i.d(t,{c:()=>PullRequestNode});var r=i(7304),s=i(2812),o=i(2452),n=i(7956),a=i(700);let PullRequestNode=class PullRequestNode extends a.sl{constructor(e,t,i,r){let n,l;"string"==typeof r?l=r:(l=r.repoPath,n=r),super("pullrequest",s.wv.fromRepoPath(l),e,t),this.parent=t,this.pullRequest=i,null!=n&&(n instanceof o.SY?this.updateContext({branch:n}):this.updateContext({commit:n})),this._uniqueId=(0,a.QP)(this.type,this.context),this.repoPath=l}repoPath;get id(){return this._uniqueId}toClipboard(){return this.pullRequest.url}get baseRef(){if(this.pullRequest.refs?.base!=null)return{refType:"branch",repoPath:this.repoPath,ref:this.pullRequest.refs.base.sha,name:this.pullRequest.refs.base.branch,remote:!0}}get ref(){if(this.pullRequest.refs?.head!=null)return{refType:"branch",repoPath:this.repoPath,ref:this.pullRequest.refs.head.sha,name:this.pullRequest.refs.head.branch,remote:!0}}getChildren(){return[]}getTreeItem(){let e=new r.TreeItem(`#${this.pullRequest.id}: ${this.pullRequest.title}`,r.TreeItemCollapsibleState.None);e.id=this.id,e.contextValue=a.UZ.PullRequest,this.pullRequest.refs?.base!=null&&null!=this.pullRequest.refs.head&&(e.contextValue+="+refs"),e.description=`${this.pullRequest.state}, ${this.pullRequest.formatDateFromNow()}`,e.iconPath=(0,n.op)(this.pullRequest);let t=new r.MarkdownString("",!0);t.supportHtml=!0,t.isTrusted=!0,null!=this.context.commit&&t.appendMarkdown(`Commit \`$(git-commit) ${this.context.commit.shortSha}\` was introduced by $(git-pull-request) PR #${this.pullRequest.id}

`);let i=` "Open Pull Request \\#${this.pullRequest.id} on ${this.pullRequest.provider.name}"`;return t.appendMarkdown(`${(0,n.eV)(this.pullRequest)} [**${this.pullRequest.title.trim()}**](${this.pullRequest.url}${i}) \\
[#${this.pullRequest.id}](${this.pullRequest.url}${i}) by [@${this.pullRequest.author.name}](${this.pullRequest.author.url} "Open @${this.pullRequest.author.name} on ${this.pullRequest.provider.name}") was ${this.pullRequest.state.toLowerCase()} ${this.pullRequest.formatDateFromNow()}`),e.tooltip=t,e}}},1916:(e,t,i)=>{i.d(t,{g:()=>ResultsCommitsNode});var r=i(7304),s=i(2812),o=i(1080),n=i(4169),a=i(6e3),l=i(4136),h=i(7348),c=i(2356),u=i(700),d=i(8292),p=i(9444),g=i(3560),m=i(1864),f=i(4924),w=i(5804);let v=0;let AutolinkedItemsNode=class AutolinkedItemsNode extends g.o{constructor(e,t,i,r,o){super("autolinks",s.wv.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.log=r,this.expand=o,this._instanceId=v++,this.updateContext({autolinksId:String(this._instanceId)}),this._uniqueId=(0,u.QP)(this.type,this.context)}_instanceId;get id(){return this._uniqueId}async getChildren(){if(null==this.children){let e;let t=[...this.log.commits.values()];if(t.length){let i=await this.view.container.git.getBestRemoteWithProvider(this.repoPath),r=t.map(e=>e.message).join("\n"),[s]=await Promise.allSettled([this.view.container.autolinks.getEnrichedAutolinks(r,i).then(e=>null!=e?(0,p._W)(e,void 0,250):void 0)]),o=(0,c.Cv)(s);o?.size&&(e=[...o.values()].map(([e,t])=>null!=e&&d.Y3.is(e?.value)?new w.c(this.view,this,e.value,this.log.repoPath):new m.K(this.view,this,this.repoPath,t,e?.value)))}e?.length||(e=[new f._Y(this.view,this,"No autolinked issues or pull requests could be found.")]),this.log.hasMore&&e.push(new f.Ck(this.view,this.parent,e[e.length-1],{context:{expandAutolinks:!0},message:"Load more commits to search for autolinks"})),this.children=e}return this.children}getTreeItem(){let e=new r.TreeItem("Autolinked Issues and Pull Requests",this.expand?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=u.UZ.AutolinkedItems,e}};var y=i(3304),b=i(9940),C=i(9708),A=i(8468),k=Object.defineProperty,P=Object.getOwnPropertyDescriptor;let ResultsCommitsNode=class ResultsCommitsNode extends u.sl{constructor(e,t,i,r,o,n,a){super("results-commits",s.wv.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this._label=r,this._results=o,this._options=n,null!=o.direction&&this.updateContext({branchStatusUpstreamType:o.direction}),this._uniqueId=(0,u.QP)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this),this._options={expand:!0,...n},null!=a&&(this.splatted=a)}limit;get id(){return this._uniqueId}get ref1(){return this._results.comparison?.ref1}get ref2(){return this._results.comparison?.ref2}get isComparisonFiltered(){return this.context.comparisonFiltered}_onChildrenCompleted;async getChildren(){this._onChildrenCompleted?.cancel(),this._onChildrenCompleted=(0,c.Qv)();let{log:e}=await this.getCommitsQueryResults();if(null==e)return[];let[t]=await Promise.all([this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath)]),i=[new AutolinkedItemsNode(this.view,this,this.uri.repoPath,e,this._expandAutolinks)];this._expandAutolinks=!1;let{files:r}=this._results;null==r||this.isComparisonFiltered||i.push(new C.m(this.view,this,this.uri.repoPath,r.ref1,r.ref2,r.query,this._results.direction,{expand:!1}));let s={expand:this._options.expand&&1===e.count};return i.push(...(0,b.c)((0,h.kH)(e.commits.values(),e=>(0,o.E$)(e)?new A.m(this.view,this,e,{icon:!0}):new y.s(this.view,this,e,void 0,void 0,t,s)),this,void 0,{show:e.count>1})),e.hasMore&&i.push(new f.Ck(this.view,this,i[i.length-1])),this._onChildrenCompleted.fulfill(),i}async getTreeItem(){let e,t;if(this._results.deferred)e=this._label,t=r.TreeItemCollapsibleState.Collapsed;else try{let i;({label:e,log:i}=await (0,c.Dg)(this.getCommitsQueryResults(),100)),t=null==i||0===i.count?r.TreeItemCollapsibleState.None:this._options.expand||1===i.count?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed}catch(e){e instanceof c.EX&&setTimeout(async()=>{await e.promise;try{await this._onChildrenCompleted?.promise}catch{}setTimeout(()=>void this.triggerChange(!1),1)},1),t=r.TreeItemCollapsibleState.Collapsed}let i=new r.TreeItem(e??this._label,t);return i.id=this.id,i.contextValue=null!=this._results.comparison?u.UZ.CompareResultsCommits:u.UZ.SearchResultsCommits,i.description=this._options.description,i}refresh(e=!1){e&&(this._commitsQueryResults=void 0,this._commitsQueryResultsPromise=void 0,this.getCommitsQueryResults())}_commitsQueryResultsPromise;async getCommitsQueryResults(){if(null==this._commitsQueryResultsPromise){this._commitsQueryResultsPromise=this._results.query(this.limit??n.i.get("advanced.maxSearchItems"));let e=await this._commitsQueryResultsPromise;this._commitsQueryResults=e,this._hasMore=e.hasMore,this._results.deferred&&(this._results.deferred=!1,this.parent.triggerChange(!1))}return this._commitsQueryResultsPromise}_commitsQueryResults;maybeGetCommitsQueryResults(){return this._commitsQueryResults}_hasMore=!0;get hasMore(){return this._hasMore}_expandAutolinks=!1;async loadMore(e,t){let i=await this.getCommitsQueryResults();null!=i&&i.hasMore&&(null!=t&&"expandAutolinks"in t&&(this._expandAutolinks=!!t.expandAutolinks),await i.more?.(e??this.view.config.pageItemLimit),this.limit=i.log?.count,this.triggerChange(!1))}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?P(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&k(t,i,o)})([(0,a.I)(),(0,l.u_)()],ResultsCommitsNode.prototype,"refresh",1)},9708:(e,t,i)=>{i.d(t,{I:()=>k,m:()=>ResultsFilesNode});var r,s=i(7304),o=i(2812),n=i(9455),a=i(6e3),l=i(4136),h=i(7348),c=i(3732),u=i(2356),d=i(1072),p=i(700),g=i(23),m=i(1608),f=i(3028),w=i(7280),v=i(1424),y=i(3876),b=i(1452);let ResultsFileNode=class ResultsFileNode extends y.y{constructor(e,t,i,r,s,n,a){super("results-file",o.wv.fromFile(r,i,s||n),e,t,r),this.ref1=s,this.ref2=n,this.direction=a,this.updateContext({file:r}),null!=this.context.storedComparisonId?this._uniqueId=`${(0,b.O0)(this.context.storedComparisonId)}${this.direction}|${r.path}`:this._uniqueId=(0,p.QP)(this.type,this.context)}toClipboard(){return this.file.path}get ref(){return(0,v.op)(this.ref1||this.ref2,this.uri.repoPath)}getChildren(){return[]}getTreeItem(){let e=new s.TreeItem(this.label,s.TreeItemCollapsibleState.None);e.contextValue=p.UZ.ResultsFile,e.description=this.description,e.tooltip=f.o.fromTemplate(`\${file}
\${directory}/

\${status}\${ (originalPath)}`,this.file);let t=(0,w.YX)(this.file.status);return e.iconPath={dark:this.view.container.context.asAbsolutePath((0,c.En)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,c.En)("images","light",t))},e.command=this.getCommand(),e.checkboxState={state:this.getState("checked")??s.TreeItemCheckboxState.Unchecked,tooltip:"Mark as Reviewed"},e}_description;get description(){return void 0===this._description&&(this._description=f.o.fromTemplate(this.view.config.formats.files.description,this.file,{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return void 0===this._folderName&&(this._folderName=(0,c.ye)(this.uri.relativePath)),this._folderName}_label;get label(){return void 0===this._label&&(this._label=f.o.fromTemplate(this.view.config.formats.files.label,this.file,{relativePath:this.relativePath})),this._label}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}get priority(){return 0}getCommand(){let e={lhs:{sha:this.ref1,uri:("R"===this.file.status||"C"===this.file.status)&&"behind"===this.direction?o.wv.fromFile(this.file,this.uri.repoPath,this.ref2,!0):this.uri},rhs:{sha:this.ref2,uri:("R"===this.file.status||"C"===this.file.status)&&"behind"!==this.direction?o.wv.fromFile(this.file,this.uri.repoPath,this.ref2,!0):this.uri},repoPath:this.uri.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes",command:m.eq.DiffWith,arguments:[e]}}};var C=Object.defineProperty,A=Object.getOwnPropertyDescriptor,k=((r=k||{})[r.Left=0]="Left",r[r.Right=1]="Right",r);let ResultsFilesNode=class ResultsFilesNode extends p.sl{constructor(e,t,i,r,s,n,a,l){super("results-files",o.wv.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.ref1=r,this.ref2=s,this._filesQuery=n,this.direction=a,this._options=l,null!=this.direction&&this.updateContext({branchStatusUpstreamType:this.direction}),this._uniqueId=(0,p.QP)(this.type,this.context),this._options={expand:!0,...l}}get id(){return this._uniqueId}get filter(){return this.getState("filter")}set filter(e){this.filter!==e&&(this.storeState("filter",e,!0),this._filterResults=void 0,this.triggerChange(!1))}get filterable(){return null!=this.filter||this.ref1!==this.ref2&&void 0===this.direction}async getFilesComparison(){let{files:e}=await this.getFilesQueryResults();return{files:e??[],repoPath:this.repoPath,ref1:this.ref1,ref2:this.ref2}}getFilterContextValue(){switch(this.filter){case 0:return"+filtered~left";case 1:return"+filtered~right";default:return""}}async getChildren(){let e=await this.getFilesQueryResults(),t=(null!=this.filter?e.filtered?.get(this.filter):void 0)??e.files;if(null==t)return[];let i=[...(0,h.kH)(t,e=>new ResultsFileNode(this.view,this,this.repoPath,e,this.ref1,this.ref2,this.direction))];if("list"!==this.view.config.files.layout){let e=(0,n.IJ)(i,e=>e.uri.relativePath.split("/"),(...e)=>(0,c.ay)((0,c.En)(...e)),this.view.config.files.compact);i=new g.s(this.view,this,e,this.repoPath,"",void 0).getChildren()}else i.sort((e,t)=>e.priority-t.priority||(0,d.sd)(e.label,t.label));return i}async getTreeItem(){let e,t,i,r,o,n;let a=this.filter;try{let l=await (0,u.Dg)(this.getFilesQueryResults(),100);e=l.label,null==a&&null!=l.stats&&(t=`${(0,d.u)("addition",l.stats.additions)} (+), ${(0,d.u)("deletion",l.stats.deletions)} (-)${l.stats.approximated?" *approximated":""}`,n=`${e}, ${t}`),null!=a?(t="Filtered",n=`${e} &mdash; ${t}`,r=l.filtered?.get(a),null==r&&(e="files changed",i=new s.ThemeIcon("ellipsis"),o=s.TreeItemCollapsibleState.Collapsed,this._filterResults?.then(()=>queueMicrotask(()=>this.triggerChange(!1))))):r=l.files,void 0===o&&(o=null==r||0===r.length?s.TreeItemCollapsibleState.None:this._options.expand?s.TreeItemCollapsibleState.Expanded:s.TreeItemCollapsibleState.Collapsed)}catch(t){t instanceof u.EX&&t.promise.then(()=>queueMicrotask(()=>this.triggerChange(!1))),e="files changed",i=new s.ThemeIcon("ellipsis"),o=s.TreeItemCollapsibleState.Collapsed}let l=new s.TreeItem(`${null!=a&&null!=r?`Showing ${r.length} of `:""}${e}`,o);return l.description=t,l.id=this.id,l.iconPath=i,l.contextValue=`${p.UZ.ResultsFiles}${this.filterable?"+filterable":""}${this.getFilterContextValue()}`,l.tooltip=n,l}refresh(e=!1){e&&(this.deleteState("filter"),this._filterResults=void 0,this._filesQueryResults=this._filesQuery())}_filesQueryResults;_filterResults;async getFilesQueryResults(){void 0===this._filesQueryResults&&(this._filesQueryResults=this._filesQuery());let e=await this._filesQueryResults;return null!=e.files&&this.filterable&&null!=this.filter&&e.filtered?.get(this.filter)==null&&(void 0===this._filterResults&&(this._filterResults=this.filterResults(this.filter,e)),await this._filterResults),e}async filterResults(e,t){let i;let r=0===this.filter?this.ref2:this.ref1,s=await this.view.container.git.getMergeBase(this.repoPath,this.ref1||"HEAD",this.ref2||"HEAD");if(null!=s){let e=await this.view.container.git.getDiffStatus(this.uri.repoPath,`${s}..${r}`);null!=e&&(i=new Set(e.map(e=>e.path)))}else{let e=await this.view.container.git.getCommit(this.uri.repoPath,r||"HEAD");e?.files!=null&&(i=new Set(e.files.map(e=>e.path)))}null==t.filtered&&(t.filtered=new Map),t.filtered.set(e,null==i?[]:t.files.filter(e=>i.has(e.path)))}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?A(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&C(t,i,o)})([(0,a.I)(),(0,l.u_)()],ResultsFilesNode.prototype,"refresh",1)},1644:(e,t,i)=>{i.d(t,{A:()=>SearchResultsNode});var r=i(7304),s=i(7312),o=i(3172),n=i(2812),a=i(4516),l=i(6e3),h=i(4136),c=i(1072),u=i(700),d=i(1916),p=Object.defineProperty,g=Object.getOwnPropertyDescriptor;let m=0;let SearchResultsNode=class SearchResultsNode extends u.sl{constructor(e,t,i,r,s,o,l=0){super("search-results",n.wv.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this._search=r,this._labels=s,this._searchQueryOrLog=o,this._storedAt=l,this._instanceId=m++,this.updateContext({searchId:`${(0,a.E$)(this._search)}+${this._instanceId}`}),this._uniqueId=(0,u.QP)(this.type,this.context),0===this._storedAt&&(this._storedAt=Date.now(),this.store(!0))}_instanceId;get id(){return this._uniqueId}toClipboard(){return this.search.query}get order(){return this._storedAt}get search(){return this._search}dismiss(){this.remove(!0)}_resultsNode;ensureResults(){if(null==this._resultsNode){let e;null==this._searchQueryOrLog?(e=!0,this._searchQueryOrLog=this.getSearchQuery({label:this._labels.queryLabel})):"function"!=typeof this._searchQueryOrLog&&(this._searchQueryOrLog=this.getSearchQuery({label:this._labels.queryLabel},this._searchQueryOrLog)),this._resultsNode=new d.g(this.view,this,this.repoPath,this._labels.label,{query:this._searchQueryOrLog,deferred:e},{expand:!1},!0)}return this._resultsNode}async getChildren(){return this.ensureResults().getChildren()}async getTreeItem(){let e=await this.ensureResults().getTreeItem();if(e.id=this.id,e.contextValue=u.UZ.SearchResults,this.view.container.git.repositoryCount>1){let t=this.view.container.git.getRepository(this.repoPath);e.description=t?.formattedName??this.repoPath}return e.iconPath=new r.ThemeIcon("search"),e}get hasMore(){return this.ensureResults().hasMore}async loadMore(e){return this.ensureResults().loadMore(e)}async edit(e){if(null==e){await (0,o.s)({command:"search",prefillOnly:!0,state:{repo:this.repoPath,...this.search,showResultsInSideBar:this}});return}let t=this.getStorageId();this._search=e.pattern,this._labels=e.labels,this._searchQueryOrLog=e.log,this._resultsNode=void 0,await this.replace(t,!0),this.triggerChange(!1),queueMicrotask(()=>this.view.reveal(this,{expand:!0,focus:!0,select:!0}))}refresh(e=!1){this._resultsNode?.refresh(e)}getSearchLabel(e,t){if("string"==typeof e)return e;let i=t?.count??0,r=void 0===e.resultsType?{singular:"search result",plural:"search results"}:e.resultsType;return`${(0,c.u)(r.singular,i,{format:e=>t?.hasMore?`${e}+`:void 0,plural:r.plural,zero:"No"})} ${e.label}`}getSearchQuery(e,t){let i=!0;return async r=>{t=await (t??this.view.container.git.richSearchCommits(this.repoPath,this.search)),i||t?.query==null||(t=await t.query(r)),i=!1;let s={label:this.getSearchLabel(e.label,t),log:t,hasMore:t?.hasMore??!1};return s.hasMore&&(s.more=async t=>{s.log=await s.log?.more?.(t)??s.log,s.label=this.getSearchLabel(e.label,s.log),s.hasMore=s.log?.hasMore??!0}),s}}getStorageId(){return(0,s.m)(`${this.repoPath}|${(0,a.E$)(this.search)}`,"base64")}remove(e=!1){return this.view.updateStorage(this.getStorageId(),void 0,e)}async replace(e,t=!1){return await this.view.updateStorage(e,void 0,t),this.store(t)}store(e=!1){return this.view.updateStorage(this.getStorageId(),{type:"search",timestamp:this._storedAt,path:this.repoPath,labels:this._labels,search:(0,a.Ib)(this.search)},e)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?g(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&p(t,i,o)})([(0,l.I)(),(0,h.u_)()],SearchResultsNode.prototype,"refresh",1)},8468:(e,t,i)=>{i.d(t,{m:()=>StashNode});var r=i(7304),s=i(204),o=i(9455),n=i(4169),a=i(3732),l=i(1072),h=i(700),c=i(3876),u=i(23),d=i(6480);let StashFileNode=class StashFileNode extends d.O{constructor(e,t,i,r){super("stash-file",e,t,i,r)}get contextValue(){return`${h.UZ.File}+stashed`}};let StashNode=class StashNode extends c.e{constructor(e,t,i,r){super("stash",i.getGitUri(),e,t),this.parent=t,this.commit=i,this.options=r,this.updateContext({commit:i}),this._uniqueId=(0,h.QP)(this.type,this.context)}get id(){return this._uniqueId}toClipboard(){return this.commit.stashName}get ref(){return this.commit}async getChildren(){let e=(await this.commit.getCommitsForFiles()).map(e=>new StashFileNode(this.view,this,e.file,e));if("list"!==this.view.config.files.layout){let t=(0,o.IJ)(e,e=>e.uri.relativePath.split("/"),(...e)=>(0,a.ay)((0,a.En)(...e)),this.view.config.files.compact);e=new u.s(this.view,this,t,this.repoPath,"",void 0).getChildren()}else e.sort((e,t)=>(0,l.sd)(e.label,t.label));return e}getTreeItem(){let e=new r.TreeItem(s.E.fromTemplate(this.view.config.formats.stashes.label,this.commit,{messageTruncateAtNewLine:!0,dateFormat:n.i.get("defaultDateFormat")}),r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.description=s.E.fromTemplate(this.view.config.formats.stashes.description,this.commit,{messageTruncateAtNewLine:!0,dateFormat:n.i.get("defaultDateFormat")}),e.contextValue=h.UZ.Stash,this.options?.icon&&(e.iconPath=new r.ThemeIcon("archive")),e.tooltip=s.E.fromTemplate(`\${'On 'stashOnRef
}\${ago} (\${date})

\${message}`,this.commit,{dateFormat:n.i.get("defaultDateFormat")}),e}}},9160:(e,t,i)=>{i.d(t,{k:()=>StatusFileNode});var r=i(7304),s=i(1608),o=i(3028),n=i(2812),a=i(7280),l=i(3732),h=i(1072),c=i(7248),u=i(700),d=i(9116);let StatusFileNode=class StatusFileNode extends c.U{commits;_hasStagedChanges;_hasUnstagedChanges;_type;constructor(e,t,i,r,s,o){let a,l=!1,h=!1;for(let e of s)if(e.isUncommitted){if(e.isUncommittedStaged){l=!0,h||(a=e.sha);break}a=void 0,h=!0}else if(h)break;else{a=e.sha;break}super("status-file",n.wv.fromFile(i,r,a),e,t,i),this.commits=s,this._type=o,this._hasStagedChanges=l,this._hasUnstagedChanges=h}toClipboard(){return this.fileName}get fileName(){return this.file.path}getChildren(){return this.commits.map(e=>new d.I(this.view,this,this.file,e))}getTreeItem(){let e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.None);if(e.description=this.description,(this._hasStagedChanges||this._hasUnstagedChanges)&&1===this.commits.length)e.contextValue=u.UZ.File,this._hasStagedChanges?(e.contextValue+="+staged",e.tooltip=o.o.fromTemplate(`\${file}
\${directory}/

\${status}\${ (originalPath)} in Index (staged)`,this.file)):(e.contextValue+="+unstaged",e.tooltip=o.o.fromTemplate(`\${file}
\${directory}/

\${status}\${ (originalPath)} in Working Tree`,this.file)),e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),e.iconPath=r.ThemeIcon.File,e.command=this.getCommand();else{if(e.collapsibleState=r.TreeItemCollapsibleState.Collapsed,this._hasStagedChanges||this._hasUnstagedChanges)e.contextValue=u.UZ.File,this._hasStagedChanges&&this._hasUnstagedChanges?e.contextValue+="+staged+unstaged":this._hasStagedChanges?e.contextValue+="+staged":e.contextValue+="+unstaged",e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),e.iconPath=r.ThemeIcon.File;else{e.contextValue=u.UZ.StatusFileCommits;let t=(0,a.YX)(this.file.status);e.iconPath={dark:this.view.container.context.asAbsolutePath((0,l.En)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,l.En)("images","light",t))}}e.tooltip=o.o.fromTemplate(`\${file}
\${directory}/

\${status}\${ (originalPath)} in ${this.getChangedIn()}`,this.file),e.command=this.getCommand()}return this._label=void 0,this._description=void 0,e}_description;get description(){return null==this._description&&(this._description=o.o.fromTemplate(this.view.config.formats.files.description,{...this.file,commit:this.commit},{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return null==this._folderName&&(this._folderName=(0,l.ye)(this.uri.relativePath)),this._folderName}_label;get label(){return null==this._label&&(this._label=o.o.fromTemplate(this.view.config.formats.files.label,{...this.file,commit:this.commit},{relativePath:this.relativePath})),this._label}get commit(){return this.commits[0]}get priority(){return this._hasStagedChanges&&!this._hasUnstagedChanges?-3:this._hasStagedChanges?-2:this._hasUnstagedChanges?-1:0}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getChangedIn(){let e=[],t=0;return this._hasUnstagedChanges&&(t++,e.push("Working Tree")),this._hasStagedChanges&&(t++,e.push("Index (staged)")),this.commits.length>t&&(t=this.commits.length-t),t>0&&e.push((0,h.u)("commit",t)),e.length>2&&(e[e.length-1]=`and ${e[e.length-1]}`),e.join(e.length>2?", ":" and ")}getCommand(){let e;if((this._hasStagedChanges||this._hasUnstagedChanges)&&1===this.commits.length){let e={commit:this.commit,uri:n.wv.fromFile(this.file,this.repoPath),line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:s.eq.DiffWithPrevious,arguments:[void 0,e]}}switch(this._type){case"ahead":case"behind":{let t=this.commits[this.commits.length-1],i=this.commits[0];e={lhs:{sha:`${t.sha}^`,uri:n.wv.fromFile(t.files?.find(e=>e.path===this.file.path)??this.file.path,this.repoPath,`${t.sha}^`,!0)},rhs:{sha:i.sha,uri:n.wv.fromFile(i.files?.find(e=>e.path===this.file.path)??this.file.path,this.repoPath,i.sha)},repoPath:this.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}};break}default:{let t=this.commits[this.commits.length-1],i=t.files?.find(e=>e.path===this.file.path)??this.file;e={lhs:{sha:`${t.sha}^`,uri:n.wv.fromFile(i,this.repoPath,void 0,!0)},rhs:{sha:"",uri:n.wv.fromFile(this.file,this.repoPath)},repoPath:this.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}}}}return{title:"Open Changes",command:s.eq.DiffWith,arguments:[e]}}}},9620:(e,t,i)=>{i.d(t,{YT:()=>w,y2:()=>ViewBase});var r=i(7304),s=i(6848),o=i(7824),n=i(4169),a=i(4136),l=i(8781),h=i(8196),c=i(6448),u=i(3e3),d=i(2356),p=i(700),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor,f=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o),o};let ViewBase=class ViewBase{constructor(e,t,i,s){if(this.container=e,this.type=t,this.name=i,this.trackingFeature=s,this.disposables.push((0,l.qw)(e.onReady)(this.onReady,this)),this.container.debugging||n.i.get("debug")){let e=function(e,t,i){null==e.tooltip&&(e.tooltip=new r.MarkdownString(null!=e.label&&"string"!=typeof e.label?e.label.label:e.label??"")),"string"==typeof e.tooltip?e.tooltip=`${e.tooltip}

---
context: ${e.contextValue}
node: ${t.toString()}${null!=i?`
parent: ${i.toString()}`:""}`:e.tooltip.appendMarkdown(`

---

context: \`${e.contextValue}\`\\
node: \`${t.toString()}\`${null!=i?`\\
parent: \`${i.toString()}\``:""}`)},t=this.getTreeItem;this.getTreeItem=async function(i){let r=await t.apply(this,[i]);return null==i.resolveTreeItem&&e(r,i,i.getParent()),r};let i=this.resolveTreeItem;this.resolveTreeItem=async function(t,r,s){return e(t=await i.apply(this,[t,r,s]),r,r.getParent()),t}}this.disposables.push(...this.registerCommands())}get id(){return`gitlens.views.${this.type}`}_onDidInitialize=new r.EventEmitter;initialized=!1;_onDidChangeTreeData=new r.EventEmitter;get onDidChangeTreeData(){return this._onDidChangeTreeData.event}_onDidChangeSelection=new r.EventEmitter;get onDidChangeSelection(){return this._onDidChangeSelection.event}_onDidChangeVisibility=new r.EventEmitter;get onDidChangeVisibility(){return this._onDidChangeVisibility.event}_onDidChangeNodeCollapsibleState=new r.EventEmitter;get onDidChangeNodeCollapsibleState(){return this._onDidChangeNodeCollapsibleState.event}_onDidChangeNodesCheckedState=new r.EventEmitter;get onDidChangeNodesCheckedState(){return this._onDidChangeNodesCheckedState.event}disposables=[];root;tree;_lastKnownLimits=new Map;dispose(){this._nodeState?.dispose(),this._nodeState=void 0,r.Disposable.from(...this.disposables).dispose()}onReady(){this.initialize({canSelectMany:this.canSelectMany,showCollapseAll:this.showCollapseAll}),queueMicrotask(()=>this.onConfigurationChanged())}get canReveal(){return!0}get canSelectMany(){return this.container.prereleaseOrDebugging&&n.i.get("views.experimental.multiSelect.enabled",void 0,!1)}_nodeState;get nodeState(){return null==this._nodeState&&(this._nodeState=new ViewNodeState),this._nodeState}get showCollapseAll(){return!0}filterConfigurationChanged(e){if(!n.i.changed(e,"views"))return!1;if(n.i.changed(e,`views.${this.configKey}`))return!0;for(let t of s.gP)if(n.i.changed(e,`views.${t}`))return!0;return!1}get badge(){return this.tree?.badge}set badge(e){null!=this.tree&&(this.tree.badge=e)}_title;get title(){return this._title}set title(e){this._title=e,null!=this.tree&&(this.tree.title=e)}_description;get description(){return this._description}set description(e){this._description=e,null!=this.tree&&(this.tree.description=e)}_message;get message(){return this._message}set message(e){this._message=e,null!=this.tree&&(this.tree.message=e)}getQualifiedCommand(e){return`gitlens.views.${this.type}.${e}`}onConfigurationChanged(e){null!=e&&null!=this.root&&this.refresh(!0)}initialize(e={}){this.tree=r.window.createTreeView(this.id,{...e,treeDataProvider:this}),this.disposables.push(n.i.onDidChange(e=>{this.filterConfigurationChanged(e)&&(this._config=void 0,this.onConfigurationChanged(e))},this),this.tree,this.tree.onDidChangeSelection((0,h.Cu)(this.onSelectionChanged,250),this),this.tree.onDidChangeVisibility((0,h.Cu)(this.onVisibilityChanged,250),this),this.tree.onDidChangeCheckboxState(this.onCheckboxStateChanged,this),this.tree.onDidCollapseElement(this.onElementCollapsed,this),this.tree.onDidExpandElement(this.onElementExpanded,this)),null!=this._title?this.tree.title=this._title:this._title=this.tree.title,null!=this._description&&(this.tree.description=this._description),null!=this._message&&(this.tree.message=this._message)}ensureRoot(e=!1){return(null==this.root||e)&&(this.root=this.getRoot()),this.root}getChildren(e){if(null!=e)return e.getChildren();let t=this.ensureRoot().getChildren();return this.initialized||((0,d.um)(t)?t.then(()=>{this.initialized||(this.initialized=!0,setTimeout(()=>this._onDidInitialize.fire(),1))}):(this.initialized=!0,setTimeout(()=>this._onDidInitialize.fire(),1))),t}getParent(e){return e.getParent()}getTreeItem(e){return e.getTreeItem()}resolveTreeItem(e,t,i){return t.resolveTreeItem?.(e,i)??e}onElementCollapsed(e){this._onDidChangeNodeCollapsibleState.fire({...e,state:r.TreeItemCollapsibleState.Collapsed})}onElementExpanded(e){this._onDidChangeNodeCollapsibleState.fire({...e,state:r.TreeItemCollapsibleState.Expanded})}onCheckboxStateChanged(e){try{for(let[t,i]of e.items){if(null==t.id)throw Error("Id is required for checkboxes");t.storeState("checked",i,!0)}}finally{this._onDidChangeNodesCheckedState.fire(e)}}onSelectionChanged(e){this._onDidChangeSelection.fire(e),this.notifySelections()}onVisibilityChanged(e){e.visible&&this.container.usage.track(`${this.trackingFeature}:shown`),this._onDidChangeVisibility.fire(e),e.visible&&this.notifySelections()}notifySelections(){let e=this.selection?.[0];null!=e&&((e.is("commit")||e.is("stash")||e.is("file-commit")||e.is("commit-file")||e.is("stash-file"))&&this.container.events.fire("commit:selected",{commit:e.commit,interaction:"passive",preserveFocus:!0,preserveVisibility:!0},{source:this.id}),(e.is("file-commit")||e.is("commit-file")||e.is("stash-file"))&&this.container.events.fire("file:selected",{uri:e.uri,preserveFocus:!0,preserveVisibility:!0},{source:this.id}))}get activeSelection(){if(null!=this.tree&&null!=this.root)return this.tree.selection[0]}get selection(){return null==this.tree||null==this.root?[]:this.tree.selection}get visible(){return this.tree?.visible??!1}async findNode(e,t){let i=(0,u.b1)();async function r(){try{return await this.findNodeCoreBFS(e,this.ensureRoot(),t?.allowPaging??!1,t?.canTraverse,t?.maxDepth??2,t?.token)}catch(e){c.YJ.error(e,i);return}}return this.initialized?r.call(this):(this.show({preserveFocus:!0}),new Promise(e=>(0,l.qw)(this._onDidInitialize.event)(()=>e(r.call(this)),this)))}async findNodeCoreBFS(e,t,i,r,s,o){let a,l;let h=[t,void 0],c=n.i.get("advanced.maxListItems"),u=0;for(;h.length>1&&!o?.isCancellationRequested;){if(null==(a=h.shift())){if(u++,h.push(void 0),u>s)break;continue}if(e(a))return a;if(null!=r){let e=r(a);if((0,d.um)(e)){if(!await e)continue}else if(!e)continue}if(0!==(l=await a.getChildren()).length){for(;null!=a&&!(0,p.Ap)(a);)a=await a.getSplattedChild?.();if(null!=a&&(0,p.Ap)(a)){let t=l.find(e);if(null!=t)return t;if(i&&a.hasMore)for(;;){if(o?.isCancellationRequested)return;if(await this.loadMoreNodeChildren(a,c),null!=(t=(await (0,d.Dg)(Promise.resolve(a.getChildren()),6e4,o,{onDidCancel:e=>e([])})).find(e)))return t;if(!a.hasMore)break}continue}h.push(...l)}}}async ensureRevealNode(e,t){let i=[],r=e;for(;null!=r;)i.push(r),r=r.getParent();for(let e of(i.length>1&&i.pop(),i.reverse()))try{await this.reveal(e,t)}catch{}}async refresh(e=!1){e&&this.nodeState.reset(),await this.root?.refresh?.(e),this.triggerNodeChange()}async refreshNode(e,t=!1,i=!1){let r=await e.refresh?.(t);(i||!0!==r)&&this.triggerNodeChange(e)}async reveal(e,t){if(null!=this.tree)try{await this.tree.reveal(e,t)}catch(e){c.YJ.error(e)}}async show(e){let t=(0,u.b1)();try{await (0,o.CA)(`${this.id}.focus`,e)}catch(e){c.YJ.error(e,t)}}getNodeLastKnownLimit(e){return this._lastKnownLimits.get(e.id)}async loadMoreNodeChildren(e,t,i,r){null!=i&&await this.reveal(i,{select:!0}),await e.loadMore(t,r),this._lastKnownLimits.set(e.id,e.limit)}resetNodeLastKnownLimit(e){this._lastKnownLimits.delete(e.id)}triggerNodeChange(e){this._onDidChangeTreeData.fire(null!=e&&e!==this.root?e:void 0)}_config;get config(){if(null==this._config){let e={...n.i.get("views")};for(let t of s.ym)delete e[t];this._config={...e,...n.i.get("views")[this.configKey]}}return this._config}};f([(0,a.Yz)({args:{0:"<function>",1:e=>`options=${JSON.stringify({...e,canTraverse:void 0,token:void 0})}`}})],ViewBase.prototype,"findNode",1),f([(0,a.u_)()],ViewBase.prototype,"refresh",1),f([(0,a.u_)({args:{0:e=>e.toString()}})],ViewBase.prototype,"refreshNode",1),f([(0,a.Yz)({args:{0:e=>e.toString()}})],ViewBase.prototype,"reveal",1),f([(0,a.Yz)()],ViewBase.prototype,"show",1),f([(0,a.u_)({args:{0:e=>e.toString(),2:e=>e?.toString()}})],ViewBase.prototype,"loadMoreNodeChildren",1),f([(0,a.u_)({args:{0:e=>e.toString()},singleLine:!0})],ViewBase.prototype,"resetNodeLastKnownLimit",1),f([(0,a.u_)({args:{0:e=>e?.toString()}})],ViewBase.prototype,"triggerNodeChange",1);let ViewNodeState=class ViewNodeState{_store;_stickyStore;dispose(){this.reset(),this._stickyStore?.clear(),this._stickyStore=void 0}reset(){this._store?.clear(),this._store=void 0}delete(e,t){for(let i of[this._store,this._stickyStore])if(null!=i)for(let[r,s]of i)r.startsWith(e)&&(s.delete(t),0===s.size&&i.delete(r))}deleteState(e,t){if(null==t)this._store?.delete(e),this._stickyStore?.delete(e);else for(let i of[this._store,this._stickyStore]){if(null==i)continue;let r=i.get(e);null!=r&&(r.delete(t),0===r.size&&i.delete(e))}}get(e,t){let i=new Map;for(let r of[this._store,this._stickyStore])if(null!=r)for(let[s,o]of r)s.startsWith(e)&&o.has(t)&&i.set(s,o.get(t));return i}getState(e,t){return this._stickyStore?.get(e)?.get(t)??this._store?.get(e)?.get(t)}storeState(e,t,i,r){let s;r?(null==this._stickyStore&&(this._stickyStore=new Map),s=this._stickyStore):(null==this._store&&(this._store=new Map),s=this._store);let o=s.get(e);null!=o?o.set(t,i):s.set(e,new Map([[t,i]]))}};function w(e,t){if(!e?.length)return;let i=t?.length?e.filter(e=>!t.includes(e)):[...e];if(i.length){if(i.length>1e3)setTimeout(()=>{for(let e of i)e.dispose()},500);else for(let e of i)e.dispose()}}},6584:(e,t,i)=>{i.d(t,{El:()=>r,Ex:()=>g,Ip:()=>IpcCommandType,KM:()=>s,QB:()=>l,S_:()=>o,cP:()=>c,e6:()=>a,gJ:()=>u,ik:()=>IpcNotificationType,iy:()=>p,kV:()=>h,yI:()=>n});let IpcMessageType=class IpcMessageType{constructor(e,t=!1,i=!1){this.method=e,this.reset=t,this.pack=i}_};let IpcCommandType=class IpcCommandType extends IpcMessageType{};let IpcNotificationType=class IpcNotificationType extends IpcMessageType{};function r(e,t,i){e.method===t.method&&i(t.params,e)}let s=new IpcCommandType("webview/ready"),o=new IpcCommandType("webview/focus"),n=new IpcCommandType("command/execute"),a=new IpcCommandType("configuration/preview"),l=new IpcCommandType("configuration/update"),h=new IpcNotificationType("configuration/didChange"),c=new IpcNotificationType("configuration/didPreview"),u=new IpcNotificationType("webview/didOpenAnchor"),d=["rebaseEditor.enabled","currentLine.useUncommittedChangesFormat"];function p(e){return d.includes(e)}function g(e,t){}},6340:(e,t,i)=>{i.d(t,{i0:()=>b,E7:()=>C,Cc:()=>A,sh:()=>k,MD:()=>P});var r=i(7304),s=i(7312),o=i(9444),n=i(7824),a=i(3664),l=i(4136),h=i(6448),c=i(3e3),u=i(2356),d=i(6088),p=i(6584),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor,f=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o),o};let w=new TextDecoder("utf8"),v=new TextEncoder,y=0,b=class{constructor(e,t,i,s,o,n){this.container=e,this._commandRegistrar=t,this.descriptor=i,this.instanceId=s,this.parent=o,this.id=i.id,this.webview=o.webview;let a="onDidChangeViewState"in o;this._isInEditor=a,this._originalTitle=i.title,o.title=i.title,this._initializing=n(e,this).then(e=>{if(this.provider=e,this._disposed){e.dispose();return}this.disposable=r.Disposable.from(r.window.onDidChangeWindowState(this.onWindowStateChanged,this),o.webview.onDidReceiveMessage(this.onMessageReceivedCore,this),a?o.onDidChangeViewState(({webviewPanel:{visible:e,active:t}})=>this.onParentVisibilityChanged(e,t)):o.onDidChangeVisibility(()=>this.onParentVisibilityChanged(this.visible,this.active)),o.onDidDispose(this.onParentDisposed,this),...this.provider.registerCommands?.()??[],this.provider)})}static async create(e,t,i,r,s,o){let n=new b(e,t,i,r,s,o);return await n.initialize(),n}_onDidDispose=new r.EventEmitter;get onDidDispose(){return this._onDidDispose.event}id;_ready=!1;get ready(){return this._ready}disposable;_isInEditor;provider;webview;_disposed=!1;dispose(){this._disposed=!0,A(this.descriptor.contextKeyPrefix),this.provider?.onFocusChanged?.(!1),this.provider?.onVisibilityChanged?.(!1),this._ready=!1,this._onDidDispose.fire(),this.disposable?.dispose()}registerWebviewCommand(e,t){return this._commandRegistrar.registerCommand(this.provider,this.id,this.instanceId,e,t)}_initializing;async initialize(){null!=this._initializing&&(await this._initializing,this._initializing=void 0)}isHost(e){return"editor"===e?this._isInEditor:!this._isInEditor}get active(){return"active"in this.parent?!this._disposed&&this.parent.active:!this._disposed&&void 0}get badge(){return"badge"in this.parent?this.parent.badge:void 0}set badge(e){if("badge"in this.parent)this.parent.badge=e;else throw Error("The 'badge' property not supported on Webview parent")}_description;get description(){return"description"in this.parent?this.parent.description:this._description}set description(e){"description"in this.parent&&(this.parent.description=e),this._description=e}_originalTitle;get originalTitle(){return this._originalTitle}get title(){return this.parent.title??this._originalTitle}set title(e){this.parent.title=e}get visible(){return!this._disposed&&this.parent.visible}canReuseInstance(e,...t){if(this.isHost("editor"))return(e?.column==null||e.column===this.parent.viewColumn)&&this.provider.canReuseInstance?.(...t)}getSplitArgs(){return this.isHost("view")?[]:this.provider.getSplitArgs?.()??[]}async show(e,t,...i){null==t&&(t={});let s=this.provider.onShowing?.(e,t,...i);if(null!=s){if((0,u.um)(s)){if(await s===!1)return}else if(!1===s)return}e&&(this.webview.html=await this.getHtml(this.webview)),this.isHost("editor")?e||this.parent.reveal(t.column??this.parent.viewColumn??this.descriptor.column??r.ViewColumn.Beside,t.preserveFocus??!1):this.isHost("view")&&(await (0,n.CA)(`${this.id}.focus`,t),e&&this.provider.onVisibilityChanged?.(!0)),k(this.descriptor.contextKeyPrefix)}get baseWebviewState(){return{webviewId:this.id,webviewInstanceId:this.instanceId,timestamp:Date.now()}}_cspNonce=(0,s.es)();get cspNonce(){return this._cspNonce}asWebviewUri(e){return this.webview.asWebviewUri(e)}async refresh(e){e&&this.clearPendingIpcNotifications(),this.provider.onRefresh?.(e);let t=this._ready;this._ready=!1;let i=await this.getHtml(this.webview);if(e&&(this.webview.html=""),this.webview.html===i){t&&(this._ready=!0);return}this.webview.html=i}onParentDisposed(){this.dispose()}onMessageReceivedCore(e){if(null!=e)switch(e.method){case p.KM.method:(0,p.El)(p.KM,e,()=>{this._ready=!0,this.sendPendingIpcNotifications(),this.provider.onReady?.()});break;case p.S_.method:(0,p.El)(p.S_,e,e=>{this.onViewFocusChanged(e)});break;case p.yI.method:(0,p.El)(p.yI,e,e=>{null!=e.args?(0,n.gf)(e.command,...e.args):(0,n.gf)(e.command)});break;default:this.provider.onMessageReceived?.(e)}}onViewFocusChanged(e){k(this.descriptor.contextKeyPrefix),this.provider.onFocusChanged?.(e.focused)}onParentVisibilityChanged(e,t){this.descriptor.webviewHostOptions?.retainContextWhenHidden!==!0&&(e?this._ready?this.sendPendingIpcNotifications():null!=this.provider.onReloaded?(this.clearPendingIpcNotifications(),this.provider.onReloaded()):this.refresh():this._ready=!1),e?(this.container.usage.track(`${this.descriptor.trackingFeature}:shown`),k(this.descriptor.contextKeyPrefix),null==t||(this.provider.onActiveChanged?.(t),t||this.provider.onFocusChanged?.(!1))):(A(this.descriptor.contextKeyPrefix),null!=t&&this.provider.onActiveChanged?.(!1),this.provider.onFocusChanged?.(!1)),this.provider.onVisibilityChanged?.(e)}onWindowStateChanged(e){this.visible&&this.provider.onWindowFocusChanged?.(e.focused)}getRootUri(){return this.container.context.extensionUri}_webRoot;getWebRoot(){return null==this._webRoot&&(this._webRoot=this.asWebviewUri(this.getWebRootUri()).toString()),this._webRoot}_webRootUri;getWebRootUri(){return null==this._webRootUri&&(this._webRootUri=r.Uri.joinPath(this.getRootUri(),"dist","webviews")),this._webRootUri}async getHtml(e){let t=this.getWebRootUri(),i=r.Uri.joinPath(t,this.descriptor.fileName),[s,o,n,a,l]=await Promise.all([r.workspace.fs.readFile(i),this.provider.includeBootstrap?.(),this.provider.includeHead?.(),this.provider.includeBody?.(),this.provider.includeEndOfBody?.()]);return C(w.decode(s),this.id,this.instanceId,e.cspSource,this._cspNonce,this.asWebviewUri(this.getRootUri()).toString(),this.getWebRoot(),this.isHost("editor")?"editor":"view",o,n,a,l)}nextIpcId(){return 1073741824===y?y=1:y++,`host:${y}`}async notify(e,t,i){let r;if(e.pack&&null!=t){let i=(0,c.b1)(),s=(0,d.i)((0,c.I1)(` serializing msg=${e.method}`,i),{log:!1,logLevel:"debug"});r=v.encode(JSON.stringify(t)),s?.stop()}let s={id:this.nextIpcId(),method:e.method,params:r??t,packed:null!=r,completionId:i},o=await this.postMessage(s);return o?this._pendingIpcNotifications.clear():this.addPendingIpcNotificationCore(e,s),o}async postMessage(e){let t,i;if(!this._ready)return Promise.resolve(!1);let s=(0,c.b1)(),n=Promise.race([this.webview.postMessage(e).then(e=>(clearTimeout(t),e),e=>(clearTimeout(t),h.YJ.error(s,e),!1)),new Promise(e=>{t=setTimeout(()=>{(0,c._W)(s,void 0,"TIMEDOUT"),e(!1)},3e4)})]);if(this.isHost("view")){let e=await (0,o.sZ)(n,void 0,100);i=e.paused?await r.window.withProgress({location:{viewId:this.id}},()=>e.value):e.value}else i=await n;return i}_pendingIpcNotifications=new Map;addPendingIpcNotification(e,t,i){this.addPendingIpcNotificationCore(e,t.get(e)?.bind(i))}addPendingIpcNotificationCore(e,t){e.reset&&this._pendingIpcNotifications.clear(),null!=t&&this._pendingIpcNotifications.set(e,t)}clearPendingIpcNotifications(){this._pendingIpcNotifications.clear()}sendPendingIpcNotifications(){if(!this._ready||0===this._pendingIpcNotifications.size)return;let e=new Map(this._pendingIpcNotifications);for(let t of(this._pendingIpcNotifications.clear(),e.values()))"function"==typeof t?t():this.postMessage(t)}};function C(e,t,i,r,s,o,n,a,l,h,c,u){return e.replace(/#{(head|body|endOfBody|webviewId|webviewInstanceId|placement|cspSource|cspNonce|root|webroot)}/g,(e,d)=>{switch(d){case"head":return h??"";case"body":return c??"";case"endOfBody":return`${null!=l?`<script type="text/javascript" nonce="${s}">window.bootstrap=${JSON.stringify(l)};</script>`:""}${u??""}`;case"webviewId":return t;case"webviewInstanceId":return i??"";case"placement":return a;case"cspSource":return r;case"cspNonce":return s;case"root":return o;case"webroot":return n;default:return""}})}function A(e){(0,a.Qr)(`${e}:visible`,!1)}function k(e){(0,a.Qr)(`${e}:visible`,!0)}function P(e,t,i,s=!1){let o=!1;for(let[n,a]of Object.entries(i)){let i=e[n];!s&&(i instanceof r.Uri||a instanceof r.Uri)&&i?.toString()===a?.toString()||!s&&i===a&&(void 0!==a||n in e)&&(null==t||!(n in t))||(null==t&&(t={}),t[n]=a,o=!0)}return[o,t]}f([(0,l.u_)({args:!1})],b.prototype,"show",1),f([(0,l.u_)()],b.prototype,"refresh",1),f([(0,l.u_)()],b.prototype,"onParentDisposed",1),f([(0,l.u_)({args:{0:e=>null!=e?`${e.id}, method=${e.method}`:"<undefined>"}})],b.prototype,"onMessageReceivedCore",1),f([(0,l.u_)({args:{0:e=>`focused=${e.focused}, inputFocused=${e.inputFocused}`}})],b.prototype,"onViewFocusChanged",1),f([(0,l.u_)()],b.prototype,"onParentVisibilityChanged",1),f([(e,t,i)=>{let r;if("function"==typeof i.value?r=i.value:"function"==typeof i.get&&(r=i.get),void 0===r)throw Error("Not supported");let s=`$serialize$${t}`;i.value=function(...e){Object.prototype.hasOwnProperty.call(this,s)||Object.defineProperty(this,s,{configurable:!1,enumerable:!1,writable:!0,value:void 0});let t=this[s],i=async()=>await r.apply(this,e);return t=null==t?i():t.then(i,i),this[s]=t,t}},(0,l.u_)({args:!1,enter:e=>`(${e.id}|${e.method}${e.completionId?`+${e.completionId}`:""})`})],b.prototype,"postMessage",1),b=f([(0,l.WE)(e=>`WebviewController(${e.id}${null!=e.instanceId?`|${e.instanceId}`:""})`)],b)},4008:(e,t,i)=>{i.d(t,{e:()=>WebviewsController,E:()=>v});var r=i(7304),s=i(7312),o=i(5008),n=i(7824),a=i(4136),l=i(7348),h=i(6448),c=i(3e3),u=i(6240);let WebviewCommandRegistrar=class WebviewCommandRegistrar{_commandRegistrations=new Map;dispose(){this._commandRegistrations.forEach(({subscription:e})=>void e.dispose())}registerCommand(e,t,i,r,s){let o=this._commandRegistrations.get(r);if(null==o){let e=new Map;o={subscription:(0,n.Yh)(r,(...t)=>{let i=t[0];if(!(0,u.kt)(i))return;let s=i.webviewInstance?`${i.webview}:${i.webviewInstance}`:i.webview,o=e.get(s);if(null==o)throw Error(`Unable to find Command '${r}' registration for Webview '${s}'`);o.callback.call(o.thisArg,i)},this),handlers:e},this._commandRegistrations.set(r,o)}let a=i?`${t}:${i}`:t;if(o.handlers.has(a))throw Error(`Command '${r}' has already been registered for Webview '${a}'`);return o.handlers.set(a,{callback:s,thisArg:e}),{dispose:()=>{o.handlers.delete(a),0===o.handlers.size&&(this._commandRegistrations.delete(r),o.subscription.dispose())}}}};var d=i(6340),p=Object.defineProperty,g=Object.getOwnPropertyDescriptor,m=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?g(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&p(t,i,o),o};let WebviewsController=class WebviewsController{constructor(e){this.container=e,this.disposables.push(this._commandRegistrar=new WebviewCommandRegistrar)}disposables=[];_commandRegistrar;_panels=new Map;_views=new Map;dispose(){this.disposables.forEach(e=>void e.dispose())}registerWebviewView(e,t,i){let s=(0,c.I1)(`WebviewView(${e.id})`),a={descriptor:e};this._views.set(e.id,a);let l=[];l.push(r.window.registerWebviewViewProvider(e.id,{resolveWebviewView:async(i,n,c)=>{if(a.descriptor.plusFeature&&(!await (0,o.u)()||c.isCancellationRequested))return;h.YJ.debug(s,"Resolving view"),i.webview.options={enableCommandUris:!0,enableScripts:!0,localResourceRoots:[r.Uri.file(this.container.context.extensionPath)],...e.webviewOptions},i.title=e.title;let u=await d.i0.create(this.container,this._commandRegistrar,e,void 0,i,t);a.controller?.dispose(),a.controller=u,l.push(u.onDidDispose(()=>{h.YJ.debug(s,"Disposing view"),a.pendingShowArgs=void 0,a.controller=void 0}),u);let[p,g]=a.pendingShowArgs??[];a.pendingShowArgs=void 0,null==g&&v(n)&&(g=[{state:n.state}]),h.YJ.debug(s,"Showing view"),await u.show(!0,p,...g??[])}},null!=e.webviewHostOptions?{webviewOptions:e.webviewHostOptions}:void 0));let u=r.Disposable.from(...l);return this.disposables.push(u),{id:e.id,get ready(){return a.controller?.ready??!1},get visible(){return a.controller?.visible??!1},dispose:function(){u.dispose()},refresh:function(e){return null!=a.controller?a.controller.refresh(e):Promise.resolve()},show:async function(t,...r){if(h.YJ.debug(s,"Showing view"),null!=a.controller)return a.controller.show(!1,t,...r);a.pendingShowArgs=[t,r],null!=i&&await i?.(...r),(0,n.CA)(`${e.id}.focus`,t)}}}registerWebviewPanel(e,t,i){let a;let u=(0,c.I1)(`WebviewPanel(${t.id})`),p={descriptor:t};this._panels.set(t.id,p);let g=[],{container:m,_commandRegistrar:v}=this;async function y(e,...t){let{descriptor:n}=p;if(n.plusFeature&&!await (0,o.u)())return;m.usage.track(`${n.trackingFeature}:shown`);let l=e?.column??n.column??r.ViewColumn.Beside;l===r.ViewColumn.Beside&&null==r.window.tabGroups.activeTabGroup.activeTab&&(l=r.ViewColumn.Active);let c=w(p,e,...t);if(null==c){let o;null!=a?(h.YJ.debug(u,"Restoring panel"),o=a,a=void 0):(h.YJ.debug(u,"Creating panel"),o=r.window.createWebviewPanel(n.id,n.title,{viewColumn:l,preserveFocus:e?.preserveFocus??!1},{enableCommandUris:!0,enableScripts:!0,localResourceRoots:[r.Uri.file(m.context.extensionPath)],...n.webviewOptions,...n.webviewHostOptions})),o.iconPath=r.Uri.file(m.context.asAbsolutePath(n.iconPath)),c=await d.i0.create(m,v,n,n.allowMultipleInstances?(0,s.uq)():void 0,o,i),p.controllers??=new Map,p.controllers.set(c.instanceId,c),g.push(c.onDidDispose(()=>{h.YJ.debug(u,`Disposing panel (${c.instanceId})`),p.controllers?.delete(c.instanceId)}),c),h.YJ.debug(u,`Showing panel (${c.instanceId})`),await c.show(!0,e,...t)}else h.YJ.debug(u,`Showing existing panel (${c.instanceId})`),await c.show(!1,e,...t)}async function b(e,t){a=e,h.YJ.debug(u,`Deserializing panel state=${null!=t?"<state>":"undefined"}`),await y({column:e.viewColumn,preserveFocus:!0,preserveInstance:!1},...null!=t?[{state:t}]:[])}let C=r.Disposable.from(...g,r.window.registerWebviewPanelSerializer(t.id,{deserializeWebviewPanel:b}),(0,n.or)(e.id,(t,...i)=>y({...e.options,...t},...i),this));return this.disposables.push(C),{id:t.id,get instances(){if(!p.controllers?.size)return[];return(0,l.kH)(p.controllers.values(),e=>f(e))},getActiveInstance:function(){if(!p.controllers?.size)return;let e=(0,l.iw)(p.controllers.values(),e=>e.active??!1);return null!=e?f(e):void 0},getBestInstance:function(e,...t){let i=w(p,e,...t);return null!=i?f(i):void 0},splitActiveInstance:function(e){let t=null!=p.controllers?(0,l.iw)(p.controllers.values(),e=>e.active??!1):void 0,i=t?.getSplitArgs()??[];return y({...e,preserveInstance:!1},...i)},dispose:function(){C.dispose()},show:y}}};function f(e){return{id:e.id,instanceId:e.instanceId,ready:e.ready,active:e.active??!1,visible:e.visible,canReuseInstance:function(t,...i){return e.canReuseInstance(t,...i)},close:function(){e.parent.dispose()},dispose:function(){e.dispose()},refresh:function(t){return e.refresh(t)},show:function(t,...i){return e.show(!1,t,...i)}}}function w(e,t,...i){let r;if(e.controllers?.size){if(e.descriptor.allowMultipleInstances){if(t?.preserveInstance!==!1&&(t?.preserveInstance!=null&&"string"==typeof t.preserveInstance&&(r=e.controllers.get(t.preserveInstance)),null==r)){let s,o;for(let n of[...e.controllers.values()].sort((e,t)=>(e.active?-1:1)-(t.active?-1:1))){o??=n,n.active&&(s=n);let e=n.canReuseInstance(t,...i);if(!0===e){r=n;break}!1===e&&(o===n&&(o=void 0),s===n&&(s=void 0))}null==r&&t?.preserveInstance===!0&&(r=s??o)}}else r=l.KY(e.controllers)?.[1]}return r}function v(e){return null!=e&&"object"==typeof e&&"state"in e&&null!=e.state&&"object"==typeof e.state}m([(0,a.u_)({args:{0:e=>e.id,1:!1,2:!1},singleLine:!0})],WebviewsController.prototype,"registerWebviewView",1),m([(0,a.u_)({args:{0:e=>e.id,1:e=>e.id,2:!1,3:!1},singleLine:!0})],WebviewsController.prototype,"registerWebviewPanel",1)},8996:function(e,t,i){var r=this&&this.__awaiter||function(e,t,i,r){return new(i||(i=Promise))(function(s,o){function n(e){try{l(r.next(e))}catch(e){o(e)}}function a(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?s(e.value):((t=e.value)instanceof i?t:new i(function(e){e(t)})).then(n,a)}l((r=r.apply(e,t||[])).next())})},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});let o=s(i(5256)),n=s(i(192)),a=s(i(8716)),l=s(i(6608)),h=s(i(3711)),c=i(6887),u=s(i(8300)),d=h.default("https-proxy-agent:agent");let HttpsProxyAgent=class HttpsProxyAgent extends c.Agent{constructor(e){var t;let i;if(!(i="string"==typeof e?a.default.parse(e):e))throw Error("an HTTP(S) proxy server `host` and `port` must be specified!");d("creating new HttpsProxyAgent instance: %o",i),super(i);let r=Object.assign({},i);this.secureProxy=i.secureProxy||"string"==typeof(t=r.protocol)&&/^https:?$/i.test(t),r.host=r.hostname||r.host,"string"==typeof r.port&&(r.port=parseInt(r.port,10)),!r.port&&r.host&&(r.port=this.secureProxy?443:80),!this.secureProxy||"ALPNProtocols"in r||(r.ALPNProtocols=["http 1.1"]),r.host&&r.path&&(delete r.path,delete r.pathname),this.proxy=r}callback(e,t){return r(this,void 0,void 0,function*(){let i;let{proxy:r,secureProxy:s}=this;s?(d("Creating `tls.Socket`: %o",r),i=n.default.connect(r)):(d("Creating `net.Socket`: %o",r),i=o.default.connect(r));let a=Object.assign({},r.headers),h=`${t.host}:${t.port}`,c=`CONNECT ${h} HTTP/1.1\r
`;r.auth&&(a["Proxy-Authorization"]=`Basic ${Buffer.from(r.auth).toString("base64")}`);let{host:g,port:m,secureEndpoint:f}=t;for(let e of(!f&&80===m||f&&443===m||(g+=`:${m}`),a.Host=g,a.Connection="close",Object.keys(a)))c+=`${e}: ${a[e]}\r
`;let w=u.default(i);i.write(`${c}\r
`);let{statusCode:v,buffered:y}=yield w;if(200===v){if(e.once("socket",p),t.secureEndpoint){d("Upgrading socket connection to TLS");let e=t.servername||t.host;return n.default.connect(Object.assign(Object.assign({},function(e,...t){let i;let r={};for(i in e)t.includes(i)||(r[i]=e[i]);return r}(t,"host","hostname","path","port")),{socket:i,servername:e}))}return i}i.destroy();let b=new o.default.Socket({writable:!1});return b.readable=!0,e.once("socket",e=>{d("replaying proxy buffer for failed request"),l.default(e.listenerCount("data")>0),e.push(y),e.push(null)}),b})}};function p(e){e.resume()}t.default=HttpsProxyAgent},152:function(e,t,i){var r;let s=(this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}})(i(8996));function o(e){return new s.default(e)}(r=o||(o={})).HttpsProxyAgent=s.default,r.prototype=s.default.prototype,e.exports=o},8300:function(e,t,i){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});let s=r(i(3711)).default("https-proxy-agent:parse-proxy-response");t.default=function(e){return new Promise((t,i)=>{let r=0,o=[];function n(){let i=e.read();i?function(e){o.push(e),r+=e.length;let i=Buffer.concat(o,r);if(-1===i.indexOf("\r\n\r\n")){s("have not received end of HTTP headers yet..."),n();return}let a=i.toString("ascii",0,i.indexOf("\r\n")),l=+a.split(" ")[1];s("got proxy server response: %o",a),t({statusCode:l,buffered:i})}(i):e.once("readable",n)}function a(e){s("onclose had error %o",e)}function l(){s("onend")}e.on("error",function t(r){e.removeListener("end",l),e.removeListener("error",t),e.removeListener("close",a),e.removeListener("readable",n),s("onerror %o",r),i(r)}),e.on("close",a),e.on("end",l),n()})}},3711:(e,t,i)=>{function r(){return function(){}}i.r(t),i.d(t,{default:()=>r})},8192:(e,t,i)=>{t.URL=i(8716).URL},7304:e=>{e.exports=require("vscode")},6608:e=>{e.exports=require("assert")},2588:e=>{e.exports=require("buffer")},467:e=>{e.exports=require("events")},6136:e=>{e.exports=require("http")},1256:e=>{e.exports=require("https")},5256:e=>{e.exports=require("net")},8558:e=>{e.exports=require("os")},7072:e=>{e.exports=require("path")},4468:e=>{e.exports=require("perf_hooks")},6520:e=>{e.exports=require("process")},8378:e=>{e.exports=require("stream")},8680:e=>{e.exports=require("string_decoder")},192:e=>{e.exports=require("tls")},8716:e=>{e.exports=require("url")},592:e=>{e.exports=require("zlib")},896:(e,t,i)=>{let r;i.r(t),i.d(t,{AbortError:()=>M,FetchError:()=>p,Headers:()=>Headers,Request:()=>Request,Response:()=>Response,default:()=>H});var s=i(8378),o=i(6136),n=i(8716),a=i(8192),l=i(1256),h=i(592);let c=s.Readable,u=Symbol("buffer"),d=Symbol("type");let Blob=class Blob{constructor(){this[d]="";let e=arguments[0],t=arguments[1],i=[];if(e){let t=Number(e.length);for(let r=0;r<t;r++){let t;let s=e[r];s instanceof Buffer?t=s:t=ArrayBuffer.isView(s)?Buffer.from(s.buffer,s.byteOffset,s.byteLength):s instanceof ArrayBuffer?Buffer.from(s):s instanceof Blob?s[u]:Buffer.from("string"==typeof s?s:String(s)),t.length,i.push(t)}}this[u]=Buffer.concat(i);let r=t&&void 0!==t.type&&String(t.type).toLowerCase();r&&!/[^\u0020-\u007E]/.test(r)&&(this[d]=r)}get size(){return this[u].length}get type(){return this[d]}text(){return Promise.resolve(this[u].toString())}arrayBuffer(){let e=this[u];return Promise.resolve(e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength))}stream(){let e=new c;return e._read=function(){},e.push(this[u]),e.push(null),e}toString(){return"[object Blob]"}slice(){let e;let t=this.size,i=arguments[0],r=arguments[1];e=void 0===i?0:i<0?Math.max(t+i,0):Math.min(i,t);let s=Math.max((void 0===r?t:r<0?Math.max(t+r,0):Math.min(r,t))-e,0),o=this[u].slice(e,e+s),n=new Blob([],{type:arguments[2]});return n[u]=o,n}};function p(e,t,i){Error.call(this,e),this.message=e,this.type=t,i&&(this.code=this.errno=i.code),Error.captureStackTrace(this,this.constructor)}Object.defineProperties(Blob.prototype,{size:{enumerable:!0},type:{enumerable:!0},slice:{enumerable:!0}}),Object.defineProperty(Blob.prototype,Symbol.toStringTag,{value:"Blob",writable:!1,enumerable:!1,configurable:!0}),p.prototype=Object.create(Error.prototype),p.prototype.constructor=p,p.prototype.name="FetchError";try{r=require("encoding").convert}catch(e){}let g=Symbol("Body internals"),m=s.PassThrough;function f(e){var t=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=i.size,o=i.timeout;null==e?e=null:v(e)?e=Buffer.from(e.toString()):y(e)||Buffer.isBuffer(e)||("[object ArrayBuffer]"===Object.prototype.toString.call(e)?e=Buffer.from(e):ArrayBuffer.isView(e)?e=Buffer.from(e.buffer,e.byteOffset,e.byteLength):e instanceof s||(e=Buffer.from(String(e)))),this[g]={body:e,disturbed:!1,error:null},this.size=void 0===r?0:r,this.timeout=void 0===o?0:o,e instanceof s&&e.on("error",function(e){let i="AbortError"===e.name?e:new p(`Invalid response body while trying to fetch ${t.url}: ${e.message}`,"system",e);t[g].error=i})}function w(){var e=this;if(this[g].disturbed)return f.Promise.reject(TypeError(`body used already for: ${this.url}`));if(this[g].disturbed=!0,this[g].error)return f.Promise.reject(this[g].error);let t=this.body;if(null===t)return f.Promise.resolve(Buffer.alloc(0));if(y(t)&&(t=t.stream()),Buffer.isBuffer(t))return f.Promise.resolve(t);if(!(t instanceof s))return f.Promise.resolve(Buffer.alloc(0));let i=[],r=0,o=!1;return new f.Promise(function(s,n){let a;e.timeout&&(a=setTimeout(function(){o=!0,n(new p(`Response timeout while trying to fetch ${e.url} (over ${e.timeout}ms)`,"body-timeout"))},e.timeout)),t.on("error",function(t){"AbortError"===t.name?(o=!0,n(t)):n(new p(`Invalid response body while trying to fetch ${e.url}: ${t.message}`,"system",t))}),t.on("data",function(t){if(!o&&null!==t){if(e.size&&r+t.length>e.size){o=!0,n(new p(`content size at ${e.url} over limit: ${e.size}`,"max-size"));return}r+=t.length,i.push(t)}}),t.on("end",function(){if(!o){clearTimeout(a);try{s(Buffer.concat(i,r))}catch(t){n(new p(`Could not create Buffer from response body for ${e.url}: ${t.message}`,"system",t))}}})})}function v(e){return"object"==typeof e&&"function"==typeof e.append&&"function"==typeof e.delete&&"function"==typeof e.get&&"function"==typeof e.getAll&&"function"==typeof e.has&&"function"==typeof e.set&&("URLSearchParams"===e.constructor.name||"[object URLSearchParams]"===Object.prototype.toString.call(e)||"function"==typeof e.sort)}function y(e){return"object"==typeof e&&"function"==typeof e.arrayBuffer&&"string"==typeof e.type&&"function"==typeof e.stream&&"function"==typeof e.constructor&&"string"==typeof e.constructor.name&&/^(Blob|File)$/.test(e.constructor.name)&&/^(Blob|File)$/.test(e[Symbol.toStringTag])}function b(e){let t,i;let r=e.body;if(e.bodyUsed)throw Error("cannot clone body after it is used");return r instanceof s&&"function"!=typeof r.getBoundary&&(t=new m,i=new m,r.pipe(t),r.pipe(i),e[g].body=t,r=i),r}function C(e){if(null===e)return null;if("string"==typeof e)return"text/plain;charset=UTF-8";if(v(e))return"application/x-www-form-urlencoded;charset=UTF-8";if(y(e))return e.type||null;if(Buffer.isBuffer(e))return null;if("[object ArrayBuffer]"===Object.prototype.toString.call(e))return null;if(ArrayBuffer.isView(e))return null;else if("function"==typeof e.getBoundary)return`multipart/form-data;boundary=${e.getBoundary()}`;else if(e instanceof s)return null;else return"text/plain;charset=UTF-8"}function A(e){let t=e.body;return null===t?0:y(t)?t.size:Buffer.isBuffer(t)?t.length:t&&"function"==typeof t.getLengthSync&&(t._lengthRetrievers&&0==t._lengthRetrievers.length||t.hasKnownLength&&t.hasKnownLength())?t.getLengthSync():null}f.prototype={get body(){return this[g].body},get bodyUsed(){return this[g].disturbed},arrayBuffer(){return w.call(this).then(function(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)})},blob(){let e=this.headers&&this.headers.get("content-type")||"";return w.call(this).then(function(t){return Object.assign(new Blob([],{type:e.toLowerCase()}),{[u]:t})})},json(){var e=this;return w.call(this).then(function(t){try{return JSON.parse(t.toString())}catch(t){return f.Promise.reject(new p(`invalid json response body at ${e.url} reason: ${t.message}`,"invalid-json"))}})},text(){return w.call(this).then(function(e){return e.toString()})},buffer(){return w.call(this)},textConverted(){var e=this;return w.call(this).then(function(t){return function(e,t){let i,s;if("function"!=typeof r)throw Error("The package `encoding` must be installed to use the textConverted() function");let o=t.get("content-type"),n="utf-8";return o&&(i=/charset=([^;]*)/i.exec(o)),s=e.slice(0,1024).toString(),!i&&s&&(i=/<meta.+?charset=(['"])(.+?)\1/i.exec(s)),!i&&s&&(!(i=/<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(s))&&(i=/<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(s))&&i.pop(),i&&(i=/charset=(.*)/i.exec(i.pop()))),!i&&s&&(i=/<\?xml.+?encoding=(['"])(.+?)\1/i.exec(s)),i&&("gb2312"===(n=i.pop())||"gbk"===n)&&(n="gb18030"),r(e,"UTF-8",n).toString()}(t,e.headers)})}},Object.defineProperties(f.prototype,{body:{enumerable:!0},bodyUsed:{enumerable:!0},arrayBuffer:{enumerable:!0},blob:{enumerable:!0},json:{enumerable:!0},text:{enumerable:!0}}),f.mixIn=function(e){for(let t of Object.getOwnPropertyNames(f.prototype))if(!(t in e)){let i=Object.getOwnPropertyDescriptor(f.prototype,t);Object.defineProperty(e,t,i)}},f.Promise=global.Promise;let k=/[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/,P=/[^\t\x20-\x7e\x80-\xff]/;function S(e){if(e=`${e}`,k.test(e)||""===e)throw TypeError(`${e} is not a legal HTTP header name`)}function R(e){if(e=`${e}`,P.test(e))throw TypeError(`${e} is not a legal HTTP header value`)}function D(e,t){for(let i in t=t.toLowerCase(),e)if(i.toLowerCase()===t)return i}let $=Symbol("map");let Headers=class Headers{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;if(this[$]=Object.create(null),e instanceof Headers){let t=e.raw();for(let e of Object.keys(t))for(let i of t[e])this.append(e,i);return}if(null==e);else if("object"==typeof e){let t=e[Symbol.iterator];if(null!=t){if("function"!=typeof t)throw TypeError("Header pairs must be iterable");let i=[];for(let t of e){if("object"!=typeof t||"function"!=typeof t[Symbol.iterator])throw TypeError("Each header pair must be iterable");i.push(Array.from(t))}for(let e of i){if(2!==e.length)throw TypeError("Each header pair must be a name/value tuple");this.append(e[0],e[1])}}else for(let t of Object.keys(e)){let i=e[t];this.append(t,i)}}else throw TypeError("Provided initializer must be an object")}get(e){S(e=`${e}`);let t=D(this[$],e);return void 0===t?null:this[$][t].join(", ")}forEach(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,i=_(this),r=0;for(;r<i.length;){var s=i[r];let o=s[0],n=s[1];e.call(t,n,o,this),i=_(this),r++}}set(e,t){e=`${e}`,t=`${t}`,S(e),R(t);let i=D(this[$],e);this[$][void 0!==i?i:e]=[t]}append(e,t){e=`${e}`,t=`${t}`,S(e),R(t);let i=D(this[$],e);void 0!==i?this[$][i].push(t):this[$][e]=[t]}has(e){return S(e=`${e}`),void 0!==D(this[$],e)}delete(e){S(e=`${e}`);let t=D(this[$],e);void 0!==t&&delete this[$][t]}raw(){return this[$]}keys(){return T(this,"key")}values(){return T(this,"value")}[Symbol.iterator](){return T(this,"key+value")}};function _(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"key+value";return Object.keys(e[$]).sort().map("key"===t?function(e){return e.toLowerCase()}:"value"===t?function(t){return e[$][t].join(", ")}:function(t){return[t.toLowerCase(),e[$][t].join(", ")]})}Headers.prototype.entries=Headers.prototype[Symbol.iterator],Object.defineProperty(Headers.prototype,Symbol.toStringTag,{value:"Headers",writable:!1,enumerable:!1,configurable:!0}),Object.defineProperties(Headers.prototype,{get:{enumerable:!0},forEach:{enumerable:!0},set:{enumerable:!0},append:{enumerable:!0},has:{enumerable:!0},delete:{enumerable:!0},keys:{enumerable:!0},values:{enumerable:!0},entries:{enumerable:!0}});let I=Symbol("internal");function T(e,t){let i=Object.create(F);return i[I]={target:e,kind:t,index:0},i}let F=Object.setPrototypeOf({next(){if(!this||Object.getPrototypeOf(this)!==F)throw TypeError("Value of `this` is not a HeadersIterator");var e=this[I];let t=e.target,i=e.kind,r=e.index,s=_(t,i);return r>=s.length?{value:void 0,done:!0}:(this[I].index=r+1,{value:s[r],done:!1})}},Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));Object.defineProperty(F,Symbol.toStringTag,{value:"HeadersIterator",writable:!1,enumerable:!1,configurable:!0});let O=Symbol("Response internals"),x=o.STATUS_CODES;let Response=class Response{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};f.call(this,e,t);let i=t.status||200,r=new Headers(t.headers);if(null!=e&&!r.has("Content-Type")){let t=C(e);t&&r.append("Content-Type",t)}this[O]={url:t.url,status:i,statusText:t.statusText||x[i],headers:r,counter:t.counter}}get url(){return this[O].url||""}get status(){return this[O].status}get ok(){return this[O].status>=200&&this[O].status<300}get redirected(){return this[O].counter>0}get statusText(){return this[O].statusText}get headers(){return this[O].headers}clone(){return new Response(b(this),{url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok,redirected:this.redirected})}};f.mixIn(Response.prototype),Object.defineProperties(Response.prototype,{url:{enumerable:!0},status:{enumerable:!0},ok:{enumerable:!0},redirected:{enumerable:!0},statusText:{enumerable:!0},headers:{enumerable:!0},clone:{enumerable:!0}}),Object.defineProperty(Response.prototype,Symbol.toStringTag,{value:"Response",writable:!1,enumerable:!1,configurable:!0});let E=Symbol("Request internals"),B=n.URL||a.URL,U=n.parse,W=n.format;function N(e){return/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(e)&&(e=new B(e).toString()),U(e)}let q="destroy"in s.Readable.prototype;function L(e){return"object"==typeof e&&"object"==typeof e[E]}let Request=class Request{constructor(e){let t,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};L(e)?t=N(e.url):(t=e&&e.href?N(e.href):N(`${e}`),e={});let r=i.method||e.method||"GET";if(r=r.toUpperCase(),(null!=i.body||L(e)&&null!==e.body)&&("GET"===r||"HEAD"===r))throw TypeError("Request with GET/HEAD method cannot have body");let s=null!=i.body?i.body:L(e)&&null!==e.body?b(e):null;f.call(this,s,{timeout:i.timeout||e.timeout||0,size:i.size||e.size||0});let o=new Headers(i.headers||e.headers||{});if(null!=s&&!o.has("Content-Type")){let e=C(s);e&&o.append("Content-Type",e)}let n=L(e)?e.signal:null;if("signal"in i&&(n=i.signal),null!=n&&!function(e){let t=e&&"object"==typeof e&&Object.getPrototypeOf(e);return!!(t&&"AbortSignal"===t.constructor.name)}(n))throw TypeError("Expected signal to be an instanceof AbortSignal");this[E]={method:r,redirect:i.redirect||e.redirect||"follow",headers:o,parsedURL:t,signal:n},this.follow=void 0!==i.follow?i.follow:void 0!==e.follow?e.follow:20,this.compress=void 0!==i.compress?i.compress:void 0===e.compress||e.compress,this.counter=i.counter||e.counter||0,this.agent=i.agent||e.agent}get method(){return this[E].method}get url(){return W(this[E].parsedURL)}get headers(){return this[E].headers}get redirect(){return this[E].redirect}get signal(){return this[E].signal}clone(){return new Request(this)}};function M(e){Error.call(this,e),this.type="aborted",this.message=e,Error.captureStackTrace(this,this.constructor)}f.mixIn(Request.prototype),Object.defineProperty(Request.prototype,Symbol.toStringTag,{value:"Request",writable:!1,enumerable:!1,configurable:!0}),Object.defineProperties(Request.prototype,{method:{enumerable:!0},url:{enumerable:!0},headers:{enumerable:!0},redirect:{enumerable:!0},clone:{enumerable:!0},signal:{enumerable:!0}}),M.prototype=Object.create(Error.prototype),M.prototype.constructor=M,M.prototype.name="AbortError";let Q=n.URL||a.URL,G=s.PassThrough,Y=function(e,t){let i=new Q(t).hostname,r=new Q(e).hostname;return i===r||"."===i[i.length-r.length-1]&&i.endsWith(r)};function V(e,t){if(!V.Promise)throw Error("native promise missing, set fetch.Promise to your favorite alternative");return f.Promise=V.Promise,new V.Promise(function(i,r){var n;let a,c;let u=new Request(e,t),d=function(e){let t=e[E].parsedURL,i=new Headers(e[E].headers);if(i.has("Accept")||i.set("Accept","*/*"),!t.protocol||!t.hostname)throw TypeError("Only absolute URLs are supported");if(!/^https?:$/.test(t.protocol))throw TypeError("Only HTTP(S) protocols are supported");if(e.signal&&e.body instanceof s.Readable&&!q)throw Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");let r=null;if(null==e.body&&/^(POST|PUT)$/i.test(e.method)&&(r="0"),null!=e.body){let t=A(e);"number"==typeof t&&(r=String(t))}r&&i.set("Content-Length",r),i.has("User-Agent")||i.set("User-Agent","node-fetch/1.0 (+https://github.com/bitinn/node-fetch)"),e.compress&&!i.has("Accept-Encoding")&&i.set("Accept-Encoding","gzip,deflate");let o=e.agent;return"function"==typeof o&&(o=o(t)),Object.assign({},t,{method:e.method,headers:function(e){let t=Object.assign({__proto__:null},e[$]),i=D(e[$],"Host");return void 0!==i&&(t[i]=t[i][0]),t}(i),agent:o})}(u),g=("https:"===d.protocol?l:o).request,m=u.signal,f=null,w=function(){let e=new M("The user aborted a request.");r(e),u.body&&u.body instanceof s.Readable&&z(u.body,e),f&&f.body&&f.body.emit("error",e)};if(m&&m.aborted){w();return}let v=function(){w(),C()},b=g(d);function C(){b.abort(),m&&m.removeEventListener("abort",v),clearTimeout(a)}m&&m.addEventListener("abort",v),u.timeout&&b.once("socket",function(e){a=setTimeout(function(){r(new p(`network timeout at: ${u.url}`,"request-timeout")),C()},u.timeout)}),b.on("error",function(e){r(new p(`request to ${u.url} failed, reason: ${e.message}`,"system",e)),f&&f.body&&z(f.body,e),C()}),n=function(e){(!m||!m.aborted)&&f&&f.body&&z(f.body,e)},b.on("socket",function(e){c=e}),b.on("response",function(e){let t=e.headers;"chunked"!==t["transfer-encoding"]||t["content-length"]||e.once("close",function(e){if(c&&c.listenerCount("data")>0&&!e){let e=Error("Premature close");e.code="ERR_STREAM_PREMATURE_CLOSE",n(e)}})}),14>parseInt(process.version.substring(1))&&b.on("socket",function(e){e.addListener("close",function(t){let i=e.listenerCount("data")>0;if(f&&i&&!t&&!(m&&m.aborted)){let e=Error("Premature close");e.code="ERR_STREAM_PREMATURE_CLOSE",f.body.emit("error",e)}})}),b.on("response",function(e){clearTimeout(a);let t=function(e){let t=new Headers;for(let i of Object.keys(e))if(!k.test(i)){if(Array.isArray(e[i]))for(let r of e[i])P.test(r)||(void 0===t[$][i]?t[$][i]=[r]:t[$][i].push(r));else P.test(e[i])||(t[$][i]=[e[i]])}return t}(e.headers);if(V.isRedirect(e.statusCode)){let o=t.get("Location"),n=null;try{n=null===o?null:new Q(o,u.url).toString()}catch(e){if("manual"!==u.redirect){r(new p(`uri requested responds with an invalid redirect URL: ${o}`,"invalid-redirect")),C();return}}switch(u.redirect){case"error":r(new p(`uri requested responds with a redirect, redirect mode is set to error: ${u.url}`,"no-redirect")),C();return;case"manual":if(null!==n)try{t.set("Location",n)}catch(e){r(e)}break;case"follow":var s;if(null===n)break;if(u.counter>=u.follow){r(new p(`maximum redirect reached at: ${u.url}`,"max-redirect")),C();return}let a={headers:new Headers(u.headers),follow:u.follow,counter:u.counter+1,agent:u.agent,compress:u.compress,method:u.method,body:u.body,signal:u.signal,timeout:u.timeout,size:u.size};if(!Y(u.url,n)||(s=u.url,new Q(n).protocol!==new Q(s).protocol))for(let e of["authorization","www-authenticate","cookie","cookie2"])a.headers.delete(e);if(303!==e.statusCode&&u.body&&null===A(u)){r(new p("Cannot follow redirect with body being a readable stream","unsupported-redirect")),C();return}(303===e.statusCode||(301===e.statusCode||302===e.statusCode)&&"POST"===u.method)&&(a.method="GET",a.body=void 0,a.headers.delete("content-length")),i(V(new Request(n,a))),C();return}}e.once("end",function(){m&&m.removeEventListener("abort",v)});let o=e.pipe(new G),n={url:u.url,status:e.statusCode,statusText:e.statusMessage,headers:t,size:u.size,timeout:u.timeout,counter:u.counter},l=t.get("Content-Encoding");if(!u.compress||"HEAD"===u.method||null===l||204===e.statusCode||304===e.statusCode){i(f=new Response(o,n));return}let c={flush:h.Z_SYNC_FLUSH,finishFlush:h.Z_SYNC_FLUSH};if("gzip"==l||"x-gzip"==l){i(f=new Response(o=o.pipe(h.createGunzip(c)),n));return}if("deflate"==l||"x-deflate"==l){let t=e.pipe(new G);t.once("data",function(e){i(f=new Response(o=(15&e[0])==8?o.pipe(h.createInflate()):o.pipe(h.createInflateRaw()),n))}),t.on("end",function(){f||i(f=new Response(o,n))});return}if("br"==l&&"function"==typeof h.createBrotliDecompress){i(f=new Response(o=o.pipe(h.createBrotliDecompress()),n));return}i(f=new Response(o,n))}),function(e,t){let i=t.body;null===i?e.end():y(i)?i.stream().pipe(e):Buffer.isBuffer(i)?(e.write(i),e.end()):i.pipe(e)}(b,u)})}function z(e,t){e.destroy?e.destroy(t):(e.emit("error",t),e.end())}V.isRedirect=function(e){return 301===e||302===e||303===e||307===e||308===e},V.Promise=global.Promise;let H=V}},o={};function n(e){var t=o[e];if(void 0!==t)return t.exports;var i=o[e]={exports:{}};return s[e].call(i.exports,i,i.exports,n),i.exports}n.m=s,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,n.t=function(i,r){if(1&r&&(i=this(i)),8&r||"object"==typeof i&&i&&(4&r&&i.__esModule||16&r&&"function"==typeof i.then))return i;var s=Object.create(null);n.r(s);var o={};e=e||[null,t({}),t([]),t(t)];for(var a=2&r&&i;"object"==typeof a&&!~e.indexOf(a);a=t(a))Object.getOwnPropertyNames(a).forEach(e=>o[e]=()=>i[e]);return o.default=()=>i,n.d(s,o),s},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.f={},n.e=e=>Promise.all(Object.keys(n.f).reduce((t,i)=>(n.f[i](e,t),t),[])),n.u=e=>"feature-"+({176:"github",208:"encoding",240:"telemetry",340:"graph",384:"focus",432:"account",434:"annotations-heatmap",454:"gitlab",496:"codelens",568:"settings",664:"timeline",692:"commitDetails",812:"home",828:"annotations-changes",860:"patchDetails",928:"annotations-blame",952:"welcome"})[e]+".js",n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i={144:1},r=e=>{var t=e.modules,r=e.ids,s=e.runtime;for(var o in t)n.o(t,o)&&(n.m[o]=t[o]);s&&s(n);for(var a=0;a<r.length;a++)i[r[a]]=1},n.f.require=(e,t)=>{i[e]||r(require("./"+n.u(e)))};var a={};(()=>{n.r(a),n.d(a,{activate:()=>r2,deactivate:()=>r4});var e,t,i,r,s,o=n(7304),l=n(6948),h=n(2164),c=n(9964),u=n(3412);Object.freeze({dispose:()=>{}});let Api=class Api{#i;constructor(e){this.#i=e}registerActionRunner(e,t){if(t.name===u.sD)throw Error(`Cannot use the reserved name '${u.sD}'`);return"hover.commandHelp"===e&&(e="hover.commands"),this.#i.actionRunners.register(e,t)}};var d=n(6848),p=n(1608),g=n(2812),m=n(2452),f=n(1080),w=n(4408),v=n(6192),y=n(3828),b=n(7824),C=n(4169),A=n(3664),k=n(6944),P=n(8781),S=n(6448),R=n(4204),D=n(6088),$=n(4136),_=Object.defineProperty,I=Object.getOwnPropertyDescriptor,T=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?I(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&_(t,i,o),o};let Storage=class Storage{constructor(e){this.context=e,this._disposable=this.context.secrets.onDidChange(e=>this._onDidChangeSecrets.fire(e))}_onDidChange=new o.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeSecrets=new o.EventEmitter;get onDidChangeSecrets(){return this._onDidChangeSecrets.event}_disposable;dispose(){this._disposable.dispose()}get(e,t){return this.context.globalState.get(`${p.O_}:${e}`,t)}async delete(e){await this.context.globalState.update(`${p.O_}:${e}`,void 0),this._onDidChange.fire({key:e,workspace:!1})}async deleteWithPrefix(e){let t=`${p.O_}:${e}`,i=`${t}:`;for(let e of this.context.globalState.keys())(e===t||e.startsWith(i))&&(await this.context.globalState.update(e,void 0),this._onDidChange.fire({key:e,workspace:!1}))}async store(e,t){await this.context.globalState.update(`${p.O_}:${e}`,t),this._onDidChange.fire({key:e,workspace:!1})}async getSecret(e){return this.context.secrets.get(e)}async deleteSecret(e){return this.context.secrets.delete(e)}async storeSecret(e,t){return this.context.secrets.store(e,t)}getWorkspace(e,t){return this.context.workspaceState.get(`${p.O_}:${e}`,t)}async deleteWorkspace(e){await this.context.workspaceState.update(`${p.O_}:${e}`,void 0),this._onDidChange.fire({key:e,workspace:!0})}async deleteWorkspaceWithPrefix(e){let t=`${p.O_}:${e}`,i=`${t}:`;for(let e of this.context.workspaceState.keys())(e===t||e.startsWith(i))&&(await this.context.workspaceState.update(e,void 0),this._onDidChange.fire({key:e,workspace:!0}))}async storeWorkspace(e,t){await this.context.workspaceState.update(`${p.O_}:${e}`,t),this._onDidChange.fire({key:e,workspace:!0})}};T([(0,$.u_)({logThreshold:50})],Storage.prototype,"get",1),T([(0,$.u_)({logThreshold:250})],Storage.prototype,"delete",1),T([(0,$.u_)({logThreshold:250})],Storage.prototype,"deleteWithPrefix",1),T([(0,$.u_)({args:{1:!1},logThreshold:250})],Storage.prototype,"store",1),T([(0,$.u_)({args:!1,logThreshold:250})],Storage.prototype,"getSecret",1),T([(0,$.u_)({args:!1,logThreshold:250})],Storage.prototype,"deleteSecret",1),T([(0,$.u_)({args:!1,logThreshold:250})],Storage.prototype,"storeSecret",1),T([(0,$.u_)({logThreshold:25})],Storage.prototype,"getWorkspace",1),T([(0,$.u_)({logThreshold:250})],Storage.prototype,"deleteWorkspace",1),T([(0,$.u_)({logThreshold:250})],Storage.prototype,"deleteWorkspaceWithPrefix",1),T([(0,$.u_)({args:{1:!1},logThreshold:250})],Storage.prototype,"storeWorkspace",1);var F=n(5496),O=n(700),x=n(3172),E=n(7452),B=Object.defineProperty,U=Object.getOwnPropertyDescriptor;let W=class extends E.i6{constructor(e){super(p.eq.AddAuthors),this.container=e}execute(e){let t;return e?.rootUri!=null&&(t=this.container.git.getRepository(e.rootUri)),(0,x.s)({command:"co-authors",state:{repo:t,contributors:void 0}})}};W=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?U(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&B(t,i,o),o})([(0,b.GQ)()],W);var N=n(3732),q=n(3284),L=Object.defineProperty,M=Object.getOwnPropertyDescriptor;let Q=class extends E.qg{constructor(e){super([p.eq.BrowseRepoAtRevision,p.eq.BrowseRepoAtRevisionInNewWindow,p.eq.BrowseRepoBeforeRevision,p.eq.BrowseRepoBeforeRevisionInNewWindow]),this.container=e}preExecute(e,t){switch(e.command){case p.eq.BrowseRepoAtRevisionInNewWindow:t={...t,before:!1,openInNewWindow:!0};break;case p.eq.BrowseRepoBeforeRevision:t={...t,before:!0,openInNewWindow:!1};break;case p.eq.BrowseRepoBeforeRevisionInNewWindow:t={...t,before:!0,openInNewWindow:!0}}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){i={...i};try{if(null==i.uri){if(t=(0,E.sZ)(t,e),null==t)return}else t=i.uri;let r=await g.wv.fromUri(t);if(null==r.sha)return;let s=i?.before?await this.container.git.resolveReference(r.repoPath,`${r.sha}^`):r.sha;t=this.container.git.getRevisionUri(s,r.repoPath,r.repoPath),r=g.wv.fromRevisionUri(t),(0,q.EX)(t,{location:i.openInNewWindow?"newWindow":"addToWorkspace",name:`${(0,N.g1)(r.repoPath)} @ ${r.shortSha}`}),i.openInNewWindow||(0,b.CA)("workbench.files.action.focusFilesExplorer")}catch(e){S.YJ.error(e,"BrowseRepoAtRevisionCommand"),(0,y.qC)("Unable to open the repository at the specified revision")}}};Q=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?M(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&L(t,i,o),o})([(0,b.GQ)()],Q);var G=n(1296),Y=n(6892),V=Object.defineProperty,z=Object.getOwnPropertyDescriptor;let H=class extends E.i6{constructor(e){super(p.eq.CloseUnchangedFiles),this.container=e}async execute(e){e={...e};try{if(null==e.uris){let t=await (0,G.a0)("Close All Unchanged Files");if(null==t)return;let i=await this.container.git.getStatusForRepo(t.uri);if(null==i){o.window.showWarningMessage("Unable to close unchanged files");return}e.uris=i.files.map(e=>e.uri)}let t=0===e.uris.length;for(let i of o.window.tabGroups.all)for(let r of i.tabs)if(r.input instanceof o.TabInputText||r.input instanceof o.TabInputCustom||r.input instanceof o.TabInputNotebook){let i=r.input.uri;(t||!e.uris.some(e=>Y.K.equals(e,i)))&&o.window.tabGroups.close(r,!0)}else if(r.input instanceof o.TabInputTextDiff||r.input instanceof o.TabInputNotebookDiff){let i=r.input.modified;(t||!e.uris.some(e=>Y.K.equals(e,i)))&&o.window.tabGroups.close(r,!0)}}catch(e){S.YJ.error(e,"CloseUnchangedFilesCommand"),(0,y.qC)("Unable to close all unchanged files")}}};H=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?z(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&V(t,i,o),o})([(0,b.GQ)()],H);var j=Object.defineProperty,J=Object.getOwnPropertyDescriptor;let K=class extends E.qg{constructor(e){super([p.eq.CompareWith,p.eq.CompareHeadWith,p.eq.CompareWorkingWith,p.eq.Deprecated_DiffHeadWith,p.eq.Deprecated_DiffWorkingWith]),this.container=e}preExecute(e,t){switch(e.command){case p.eq.CompareWith:t={...t};break;case p.eq.CompareHeadWith:case p.eq.Deprecated_DiffHeadWith:(t={...t}).ref1="HEAD";break;case p.eq.CompareWorkingWith:case p.eq.Deprecated_DiffWorkingWith:(t={...t}).ref1=""}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=(0,E.sZ)(t,e),i={...i};try{let r;switch(i.ref1){case null:r="Compare";break;case"":r="Compare Working Tree with";break;case"HEAD":r="Compare HEAD with";break;default:r=`Compare ${i.ref1} with`}let s=(await G.us(t,e,r))?.path;if(!s)return;null!=i.ref1&&null!=i.ref2?await this.container.searchAndCompareView.compare(s,i.ref1,i.ref2):this.container.searchAndCompareView.selectForCompare(s,i.ref1,{prompt:!0})}catch(e){S.YJ.error(e,"CompareWithCommmand"),(0,y.qC)("Unable to open comparison")}}};K=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?J(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&j(t,i,o),o})([(0,b.GQ)()],K);var Z=Object.defineProperty,X=Object.getOwnPropertyDescriptor;let ee=class extends E.qg{constructor(e){super(p.eq.CopyCurrentBranch),this.container=e}async execute(e,t){let i=null!=(t=(0,E.sZ)(t,e))?await g.wv.fromUri(t):void 0,r=await (0,G.us)(i,e,"Copy Current Branch Name");if(null!=r)try{let e=await r.getBranch();e?.name&&await o.env.clipboard.writeText(e.name)}catch(e){S.YJ.error(e,"CopyCurrentBranchCommand"),(0,y.qC)("Unable to copy current branch name")}}};ee=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?X(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Z(t,i,o),o})([(0,b.GQ)()],ee);var et=n(1424),ei=n(7464),er=n(8104),es=n(8144);async function eo(e,t="Choose a remote",i,r){let s;let n=[];if(0===i.length)t="No remotes found";else{if(r?.autoPick==="default"&&i.length>1){let e=i.find(e=>e.default);null!=e&&(i=[e])}let e={upstream:!0,buttons:r?.setDefault?[er.Ks]:void 0};for(let t of i)n.push((0,es.MT)(t,void 0,e)),t.name===r?.picked&&(s=n[n.length-1])}if(r?.autoPick&&1===i.length)return n[0].item;let a=o.window.createQuickPick();a.ignoreFocusOut=(0,q.u4)();let l=[];try{let i=await new Promise(i=>{l.push(a.onDidHide(()=>i(void 0)),a.onDidAccept(()=>{0!==a.activeItems.length&&i(a.activeItems[0])}),a.onDidTriggerItemButton(async e=>{e.button===er.Ks&&(await e.item.item.setAsDefault(),i(e.item))})),a.title=e,a.placeholder=t,a.matchOnDetail=!0,a.items=n,null!=s&&(a.activeItems=[s]),a.show()});return i?.item}finally{a.dispose(),l.forEach(e=>void e.dispose())}}var en=n(6708),ea=Object.defineProperty,el=Object.getOwnPropertyDescriptor,eh=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?el(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ea(t,i,o),o};let ec=class extends E.qg{constructor(e){super([p.eq.CopyDeepLinkToBranch,p.eq.CopyDeepLinkToCommit,p.eq.CopyDeepLinkToRepo,p.eq.CopyDeepLinkToTag,p.eq.CopyDeepLinkToComparison,p.eq.CopyDeepLinkToWorkspace]),this.container=e}preExecute(e,t){return null==t&&((0,E.k7)(e)?t={refOrRepoPath:e.node.commit}:(0,E.w3)(e)?t=e.command===p.eq.CopyDeepLinkToRepo?{refOrRepoPath:e.node.branch.repoPath,remote:e.node.branch.getRemoteName()}:{refOrRepoPath:e.node.branch}:(0,E.We)(e)?t={refOrRepoPath:e.node.tag}:(0,E.W)(e)?t={refOrRepoPath:e.node.remote.repoPath,remote:e.node.remote.name}:(0,E.A$)(e)?t={refOrRepoPath:e.node.uri.fsPath,compareRef:e.node.compareRef,compareWithRef:e.node.compareWithRef}:(0,E.ey)(e)&&(t={workspaceId:e.node.workspace.id})),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r,s;if(null!=(i={...i}).workspaceId){try{await this.container.deepLinks.copyDeepLinkUrl(i.workspaceId)}catch(e){S.YJ.error(e,"CopyDeepLinkCommand"),(0,y.qC)("Unable to copy link")}return}if(i?.refOrRepoPath==null){let i=null!=(t=(0,E.sZ)(t,e))?await g.wv.fromUri(t):void 0;r=en.In.Repository,s=(await G.us(i,e,`Copy Link to ${en.gJ(r)}`))?.path}else"string"==typeof i.refOrRepoPath?(r=null==i.compareRef?en.In.Repository:en.In.Comparison,s=i.refOrRepoPath,i.refOrRepoPath=void 0):(r=(0,en.u0)(i.refOrRepoPath.refType),s=i.refOrRepoPath.repoPath);if(s){if(!i.remote&&i.refOrRepoPath?.refType==="branch"&&(i.refOrRepoPath.remote||i.refOrRepoPath.upstream?.name!=null)){let[e,t]=(0,m.Mp)(i.refOrRepoPath);null!=e&&null!=t&&(i.remote=t,i.prePickRemote=!0)}try{let e;let t=await this.container.git.getRemotes(s,{sort:!0}),o=t.find(e=>e.default);if(i.remote&&!i.prePickRemote)e=t.find(e=>e.name===i?.remote);else if(null!=o)e=o;else{let s=await eo(`Copy Link to ${(0,en.gJ)(r)}`,"Choose which remote to copy the link for",t,{autoPick:!0,picked:i.remote,setDefault:!0});if(null==s)return;e=s}if(null==e)return;null==i.refOrRepoPath?await this.container.deepLinks.copyDeepLinkUrl(s,e.url,i.compareRef,i.compareWithRef):await this.container.deepLinks.copyDeepLinkUrl(i.refOrRepoPath,e.url)}catch(e){S.YJ.error(e,"CopyDeepLinkCommand"),(0,y.qC)("Unable to copy link")}}}};ec=eh([(0,b.GQ)()],ec);let eu=class extends E.qg{constructor(e){super([p.eq.CopyDeepLinkToFile,p.eq.CopyDeepLinkToFileAtRevision,p.eq.CopyDeepLinkToLines]),this.container=e}preExecute(e,t){if(null==t&&(t={}),null==t.ref&&e.command===p.eq.CopyDeepLinkToFileAtRevision&&(t.chooseRef=!0),null==t.lines&&e.command===p.eq.CopyDeepLinkToLines){let i;(0,E.kT)(e)&&null!=e.line?i=[e.line+1]:e.editor?.selection==null||e.editor.selection.isEmpty||(i=e.editor.selection.isSingleLine?[e.editor.selection.start.line+1]:[e.editor.selection.start.line+1,e.editor.selection.end.line+1]),t.lines=i}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){i={...i};let r=en.In.File,s=i?.repoPath,o=i?.filePath,n=i?.ref;if(null==s||null==o||null==n){let r=null!=(t=(0,E.sZ)(t,e))?await g.wv.fromUri(t):void 0;if(r?.path==null||r?.repoPath==null||(null==s&&(s=r.repoPath),null==o&&(o=r?.fsPath),i?.chooseRef!==!0&&null==n&&null!=s&&r?.sha!=null&&(n=(0,et.op)(r.sha,s,{refType:"revision"})),null==s||null==o))return;s=(0,N.ay)(s),(o=(0,N.ay)(o)).startsWith(s)||(S.YJ.error(`CopyFileDeepLinkCommand: File path ${o} is not contained in repo path ${s}`),(0,y.qC)("Unable to copy file link")),(o=o.substring(s.length+1)).startsWith("/")&&(o=o.substring(1))}if(s&&o){if(i?.chooseRef){let e=await (0,ei.m)(s,`Copy Link to ${o} at Reference`,"Choose a reference (branch, tag, etc) to copy the file link for",{allowRevisions:!0,include:ei.Q.All});if(null==e)return;n=""===e.ref?void 0:e}if(!i.remote&&i.ref?.refType==="branch"&&(i.ref.remote||i.ref.upstream?.name!=null)){let[e,t]=(0,m.Mp)(i.ref);null!=e&&null!=t&&(i.remote=t,i.prePickRemote=!0)}try{let e;let t=await this.container.git.getRemotes(s,{sort:!0}),a=t.find(e=>e.default);if(i.remote&&!i.prePickRemote)e=t.find(e=>e.name===i?.remote);else if(null!=a)e=a;else{let s=await eo(`Copy Link to ${(0,en.gJ)(r)}`,"Choose which remote to copy the link for",t,{autoPick:!0,picked:i.remote,setDefault:!0});if(null==s)return;e=s}if(null==e)return;await this.container.deepLinks.copyFileDeepLinkUrl(s,o,e.url,i.lines,n)}catch(e){S.YJ.error(e,"CopyFileDeepLinkCommand"),(0,y.qC)("Unable to copy file link")}}}};eu=eh([(0,b.GQ)()],eu);var ed=n(1144),ep=n(7348),eg=Object.defineProperty,em=Object.getOwnPropertyDescriptor;let ef=class extends E.qg{constructor(e){super(p.eq.CopyMessageToClipboard),this.container=e}async preExecute(e,t){return(0,E.k7)(e)?((t={...t}).sha=e.node.commit.sha,null!=e.node.commit.message&&await e.node.commit.ensureFullDetails(),t.message=e.node.commit.message,this.execute(e.editor,e.node.commit.file?.uri??e.node.commit.getRepository()?.uri,t)):(0,E.w3)(e)?((t={...t}).sha=e.node.branch.sha,this.execute(e.editor,e.node.uri,t)):(0,E.We)(e)?((t={...t}).sha=e.node.tag.sha,this.execute(e.editor,e.node.uri,t)):this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=(0,E.sZ)(t,e),i={...i};try{if(!i.message){let r;if(null!=i.repoPath&&null!=i.sha){await (0,ed.ak)({ref:i.sha,repoPath:i.repoPath});return}if(null==t){if(!(r=this.container.git.getBestRepository(e)?.path))return;let t=await this.container.git.getLog(r,{limit:1});if(null==t)return;let s=(0,ep.KY)(t.commits.values());if(s?.message==null)return;i.message=s.message}else if(null==i.message){let s=await g.wv.fromUri(t);if(!(r=s.repoPath))return;if(null==i.sha){let t=e?.selection.active.line??0;if(t<0)return;try{let i=await this.container.git.getBlameForLine(s,t,e?.document);if(null==i||i.commit.isUncommitted)return;await (0,ed.ak)(i.commit);return}catch(e){S.YJ.error(e,"CopyMessageToClipboardCommand",`getBlameForLine(${t})`),(0,y.qC)("Unable to copy message");return}}else{await (0,ed.ak)({ref:i.sha,repoPath:r});return}}}await o.env.clipboard.writeText(i.message)}catch(e){S.YJ.error(e,"CopyMessageToClipboardCommand"),(0,y.qC)("Unable to copy message")}}};ef=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?em(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eg(t,i,o),o})([(0,b.GQ)()],ef);var ew=Object.defineProperty,ev=Object.getOwnPropertyDescriptor;let ey=class extends E.qg{constructor(e){super(p.eq.CopyShaToClipboard),this.container=e}preExecute(e,t){return(0,E.k7)(e)?((t={...t}).sha=e.node.commit.sha,this.execute(e.editor,e.node.commit.file?.uri??e.node.commit.getRepository()?.uri,t)):(0,E.w3)(e)?((t={...t}).sha=e.node.branch.sha,this.execute(e.editor,e.node.uri,t)):(0,E.We)(e)?((t={...t}).sha=e.node.tag.sha,this.execute(e.editor,e.node.uri,t)):this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=(0,E.sZ)(t,e),i={...i};try{if(!i.sha){if(null==t){let t=this.container.git.getBestRepository(e)?.path;if(!t)return;let r=await this.container.git.getLog(t,{limit:1});if(null==r||(i.sha=ep.KY(r.commits.values())?.sha,null==i.sha))return}else if(null==i.sha){let r=e?.selection.active.line??0;if(r<0)return;try{let s=await g.wv.fromUri(t),o=await this.container.git.getBlameForLine(s,r,e?.document);if(null==o)return;i.sha=o.commit.sha}catch(e){S.YJ.error(e,"CopyShaToClipboardCommand",`getBlameForLine(${r})`),(0,y.qC)("Unable to copy commit SHA");return}}}await o.env.clipboard.writeText(C.i.get("advanced.abbreviateShaOnCopy")?(0,et.c5)(i.sha):i.sha)}catch(e){S.YJ.error(e,"CopyShaToClipboardCommand"),(0,y.qC)("Unable to copy commit SHA")}}};ey=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ev(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ew(t,i,o),o})([(0,b.GQ)()],ey);var eb=Object.defineProperty,eC=Object.getOwnPropertyDescriptor;let eA=class extends E.qg{constructor(e){super(p.eq.CopyRelativePathToClipboard),this.container=e}preExecute(e){return(0,E.CO)(e)?this.execute(e.editor,e.node.commit.file.uri):this.execute(e.editor,e.uri)}async execute(e,t){t=(0,E.sZ)(t,e);let i="";if(null!=t){let r=this.container.git.getBestRepository(e)?.uri;null!=r&&(i=this.container.git.getRelativePath(t,r))}await o.env.clipboard.writeText(i)}};eA=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eC(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eb(t,i,o),o})([(0,b.GQ)()],eA);var ek=n(2036),eP=Object.defineProperty,eS=Object.getOwnPropertyDescriptor;let eR=class extends E.i6{constructor(e){super(p.eq.CreatePullRequestOnRemote),this.container=e}async execute(e){if(e?.repoPath==null)return;let t=this.container.git.getRepository(e.repoPath);if(null==t)return;let i=await t.getRemote(e.remote);if(i?.provider==null)return;let r=i.provider.id,s=await t.getRemotes({filter:e=>e.provider?.id===r,sort:!0}),o={type:ek.o.CreatePullRequest,base:{branch:e.base,remote:void 0},compare:{branch:e.compare,remote:{path:i.path,url:i.url}}};await (0,b.gf)(p.eq.OpenOnRemote,{resource:o,remotes:s})}};eR=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eS(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eP(t,i,o),o})([(0,b.GQ)()],eR);var eD=n(1452),e$=Object.defineProperty,e_=Object.getOwnPropertyDescriptor;let eI=class extends E.qg{constructor(e){super([p.eq.DiffDirectory,p.eq.DiffDirectoryWithHead,p.eq.ViewsOpenDirectoryDiff,p.eq.ViewsOpenDirectoryDiffWithWorking]),this.container=e}async preExecute(e,t){switch(e.command){case p.eq.DiffDirectoryWithHead:(t={...t}).ref1="HEAD",t.ref2=void 0;break;case p.eq.ViewsOpenDirectoryDiff:"viewItem"===e.type&&e.node instanceof eD.kZ&&(t={...t},[t.ref1,t.ref2]=await e.node.getDiffRefs());break;case p.eq.ViewsOpenDirectoryDiffWithWorking:(0,E.kh)(e)&&((t={...t}).ref1=e.node.ref.ref,t.ref2=void 0)}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=(0,E.sZ)(t,e),i={...i};try{let r=(await G.us(t,e,"Directory Compare Working Tree With"))?.path;if(!r)return;if(!i.ref1){let e=await (0,ei.m)(r,"Directory Compare Working Tree with","Choose a branch or tag to compare with",{allowRevisions:!0});if(null==e||(i.ref1=e.ref,null==i.ref1))return}(0,ed.Ej)(r,i.ref1,i.ref2)}catch(e){S.YJ.error(e,"OpenDirectoryCompareCommand"),(0,y.qC)("Unable to open directory compare")}}};eI=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?e_(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&e$(t,i,o),o})([(0,b.GQ)()],eI);var eT=n(3056),eF=n(2056),eO=n(1072),ex=Object.defineProperty,eE=Object.getOwnPropertyDescriptor;let eB=class extends E.qg{constructor(e){super(p.eq.DiffFolderWithRevision),this.container=e}async execute(e,t,i){if(i={...i},null==(t=i?.uri??(0,E.sZ)(t,e)))return;try{(await o.workspace.fs.stat(t)).type!==o.FileType.Directory&&(t=o.Uri.joinPath(t,".."))}catch{}let r=await g.wv.fromUri(t);try{let i=(await G.us(t,e,"Open Folder Changes with Revision"))?.path;if(!i)return;let s=this.container.git.getLogForFile(r.repoPath,r.fsPath).then(e=>e??(r.sha?this.container.git.getLogForFile(r.repoPath,r.fsPath,{ref:r.sha}):void 0)),o=this.container.git.getRelativePath(t,i),n=`Open Folder Changes with Revision${(0,eO.eu)(p.or.Dot,2,2)}${o}${r.sha?` at ${(0,et.c5)(r.sha)}`:""}`,a=await (0,eT.I)(s,n,"Choose a commit to compare with",{picked:r.sha,showOtherReferences:[eF.Ml.fromCommand("Choose a Branch or Tag...",p.eq.DiffFolderWithRevisionFrom)]});if(null==a)return;(0,ed.Id)(t,{repoPath:i,lhs:a.ref,rhs:r.sha??""})}catch(e){S.YJ.error(e,"DiffFolderWithRevisionCommand"),(0,y.qC)("Unable to open comparison")}}};eB=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eE(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ex(t,i,o),o})([(0,b.GQ)()],eB);var eU=Object.defineProperty,eW=Object.getOwnPropertyDescriptor;let eN=class extends E.qg{constructor(e){super(p.eq.DiffFolderWithRevisionFrom),this.container=e}async execute(e,t,i){let r=null==i;if(i={...i},null!=(t=i?.uri??(0,E.sZ)(t,e))){try{(await o.workspace.fs.stat(t)).type!==o.FileType.Directory&&(t=o.Uri.joinPath(t,".."))}catch{}try{let s=(await G.us(t,e,"Open Folder Changes with Branch or Tag"))?.path;if(!s)return;let o=this.container.git.getRelativePath(t,s);if(null==i.rhs){if(r){let e=await g.wv.fromUri(t);i.rhs=e.sha??""}else{let e=await (0,ei.m)(s,`Open Folder Changes with Branch or Tag${(0,eO.eu)(p.or.Dot,2,2)}${o}`,"Choose a reference (branch, tag, etc) to compare",{allowRevisions:!0,include:ei.Q.All,sort:{branches:{current:!0},tags:{}}});if(e?.ref==null)return;i.rhs=e.ref}}if(!i.lhs){let e=await (0,ei.m)(s,`Open Folder Changes with Branch or Tag${(0,eO.eu)(p.or.Dot,2,2)}${o}${i.rhs?` at ${(0,et.c5)(i.rhs)}`:""}`,"Choose a reference (branch, tag, etc) to compare with",{allowRevisions:!0,include:""===i.rhs?ei.Q.All&~ei.Q.WorkingTree:ei.Q.All});if(e?.ref==null)return;i.lhs=e.ref,""!==i.rhs&&""===i.lhs&&(i.lhs=i.rhs,i.rhs="")}(0,ed.Id)(t,{repoPath:s,lhs:i.lhs,rhs:i.rhs})}catch(e){S.YJ.error(e,"DiffFolderWithRevisionFromCommand"),(0,y.qC)("Unable to open comparison")}}}};eN=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eW(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eU(t,i,o),o})([(0,b.GQ)()],eN);var eq=Object.defineProperty,eL=Object.getOwnPropertyDescriptor;let eM=class extends E.qg{constructor(e){super(p.eq.DiffLineWithPrevious),this.container=e}preExecute(e,t){return"editorLine"===e.type&&(t={...t,line:e.line}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=(0,E.sZ)(t,e)))return;null==(i={...i}).line&&(i.line=e?.selection.active.line??0);let r=i.commit?.getGitUri()??await g.wv.fromUri(t);try{let e=await this.container.git.getPreviousComparisonUrisForLine(r.repoPath,r,i.line,r.sha);if(e?.previous==null){(0,y.Ko)();return}await (0,b.gf)(p.eq.DiffWith,{repoPath:e.current.repoPath,lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},line:e.line,showOptions:i.showOptions})}catch(e){S.YJ.error(e,"DiffLineWithPreviousCommand",`getPreviousLineDiffUris(${r.repoPath}, ${r.fsPath}, ${r.sha})`),(0,y.qC)("Unable to open compare")}}};eM=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eL(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eq(t,i,o),o})([(0,b.GQ)()],eM);var eQ=n(2060),eG=Object.defineProperty,eY=Object.getOwnPropertyDescriptor;let eV=class extends E.qg{constructor(e){super(p.eq.DiffLineWithWorking),this.container=e}preExecute(e,t){return"editorLine"===e.type&&(t={...t,line:e.line}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r,s;if(null==(t=(0,E.sZ)(t,e)))return;let n=await g.wv.fromUri(t);if(null==(i={...i}).line&&(i.line=e?.selection.active.line??0),null==i.commit||i.commit.isUncommitted){let t=i.line;if(t<0)return;try{let o=await this.container.git.getBlameForLine(n,t,e?.document);if(null==o){(0,y.Sk)("Unable to open compare");return}if(i.commit=o.commit,i.commit.isUncommitted){let e=await this.container.git.getStatusForFile(n.repoPath,n);e?.indexStatus!=null?(r=eQ.QD,s=this.container.git.getAbsoluteUri(e.originalPath||e.path,i.commit.repoPath)):(r=i.commit.unresolvedPreviousSha,s=i.commit.file.originalUri??i.commit.file.uri)}else r=i.commit.sha,s=i.commit.file.uri;i.line=o.line.line-1}catch(e){S.YJ.error(e,"DiffLineWithWorkingCommand",`getBlameForLine(${t})`),(0,y.qC)("Unable to open compare");return}}else r=i.commit.sha,s=i.commit.file?.uri??n;let a=await i.commit.file?.getWorkingUri();if(null==a){o.window.showWarningMessage("Unable to open compare. File has been deleted from the working tree");return}await (0,b.gf)(p.eq.DiffWith,{repoPath:i.commit.repoPath,lhs:{sha:r,uri:s},rhs:{sha:"",uri:a},line:i.line,showOptions:i.showOptions})}};eV=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eY(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eG(t,i,o),o})([(0,b.GQ)()],eV),n(4152);var ez=Object.defineProperty,eH=Object.getOwnPropertyDescriptor;let ej=class extends E.qg{constructor(e){super([p.eq.DiffWithNext,p.eq.DiffWithNextInDiffLeft,p.eq.DiffWithNextInDiffRight]),this.container=e}preExecute(e,t){return e.command===p.eq.DiffWithNextInDiffLeft&&(t={...t,inDiffLeftEditor:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=(0,E.sZ)(t,e)))return;null==(i={...i}).line&&(i.line=e?.selection.active.line??0);let r=i.commit?.getGitUri()??await g.wv.fromUri(t);try{let e=await this.container.git.getNextComparisonUris(r.repoPath,r,r.sha,i.inDiffLeftEditor?1:0);if(e?.next==null)return;await (0,b.gf)(p.eq.DiffWith,{repoPath:e.current.repoPath,lhs:{sha:e.current.sha??"",uri:e.current.documentUri()},rhs:{sha:e.next.sha??"",uri:e.next.documentUri()},line:i.line,showOptions:i.showOptions})}catch(e){S.YJ.error(e,"DiffWithNextCommand",`getNextDiffUris(${r.repoPath}, ${r.fsPath}, ${r.sha})`),(0,y.qC)("Unable to open compare")}}};ej=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eH(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ez(t,i,o),o})([(0,b.GQ)()],ej);var eJ=Object.defineProperty,eK=Object.getOwnPropertyDescriptor;let eZ=class extends E.qg{constructor(e){super([p.eq.DiffWithPrevious,p.eq.DiffWithPreviousInDiffLeft,p.eq.DiffWithPreviousInDiffRight]),this.container=e}preExecute(e,t){return e.command===p.eq.DiffWithPreviousInDiffRight&&(t={...t,inDiffRightEditor:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r;if(null==(i={...i}).uri){if(null==(t=(0,E.sZ)(t,e)))return}else t=i.uri;if(null==i.line&&(i.line=e?.selection.active.line??0),i.commit?.file!=null){if(!i.commit.isUncommitted){await (0,b.gf)(p.eq.DiffWith,{repoPath:i.commit.repoPath,lhs:{sha:`${i.commit.sha}^`,uri:i.commit.file.originalUri??i.commit.file.uri},rhs:{sha:"?"===i.commit.file.status?`${i.commit.sha}^3`:i.commit.sha||"",uri:i.commit.file.uri},line:i.line,showOptions:i.showOptions});return}r=i.commit?.getGitUri()}else r=await g.wv.fromUri(t);try{let e=await this.container.git.getPreviousComparisonUris(r.repoPath,r,r.sha,i.inDiffRightEditor?1:0);if(e?.previous==null){if(null==e){(0,y.Ko)();return}if(null==e.current.sha){await (0,q.fL)(e.current,i.showOptions);return}if(!e.current.isUncommittedStaged){(0,y.Ko)();return}e.previous=g.wv.fromFile(e.current.fileName,e.current.repoPath,eQ.E1)}await (0,b.gf)(p.eq.DiffWith,{repoPath:e.current.repoPath,lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},line:i.line,showOptions:i.showOptions})}catch(e){S.YJ.error(e,"DiffWithPreviousCommand",`getPreviousDiffUris(${r.repoPath}, ${r.fsPath}, ${r.sha})`),(0,y.qC)("Unable to open compare")}}};eZ=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eK(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eJ(t,i,o),o})([(0,b.GQ)()],eZ);var eX=n(6776),e0=Object.defineProperty,e1=Object.getOwnPropertyDescriptor;let e2=class extends E.qg{constructor(e){super(p.eq.DiffWithRevision),this.container=e}async execute(e,t,i){if(null==(t=(0,E.sZ)(t,e)))return;let r=await g.wv.fromUri(t);null==(i={...i}).line&&(i.line=e?.selection.active.line??0);try{let e=this.container.git.getLogForFile(r.repoPath,r.fsPath).then(e=>e??(r.sha?this.container.git.getLogForFile(r.repoPath,r.fsPath,{ref:r.sha}):void 0)),s=`Open Changes with Revision${(0,eO.eu)(p.or.Dot,2,2)}`,o=`${s}${r.getFormattedFileName({suffix:r.sha?`:${(0,et.c5)(r.sha)}`:void 0,truncateTo:p.kN-s.length})}`,n=await (0,eT.I)(e,o,"Choose a commit to compare with",{empty:r.sha?void 0:{getState:async()=>{let e,t;let i=[],s=await this.container.git.getStatusForRepo(r.repoPath);if(null!=s)for(let e of s.files){if("?"===e.workingTreeStatus||"!"===e.workingTreeStatus)continue;let[t,s]=(0,N.O)(e.path,void 0,!0);i.push(new eF.Ml({label:t,description:s},void 0,p.eq.DiffWithRevision,[this.container.git.getAbsoluteUri(e.path,r.repoPath)]))}return i.length?(e=`${r.getFormattedFileName()} is likely untracked, choose a different file?`,t=`${o} (Untracked?)`):e="No commits found",i.push((0,eX.wF)(eX.QN.Cancel,void 0,{label:i.length?"Cancel":"OK"})),{items:i,placeholder:e,title:t}}},picked:r.sha,keyboard:{keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await (0,b.gf)(p.eq.DiffWith,{repoPath:r.repoPath,lhs:{sha:t.item.ref,uri:r},rhs:{sha:"",uri:r},line:i.line,showOptions:i.showOptions})}},showOtherReferences:[eF.Ml.fromCommand("Choose a Branch or Tag...",p.eq.DiffWithRevisionFrom,[t]),eF.Ml.fromCommand("Choose a Stash...",p.eq.DiffWithRevisionFrom,[t,{stash:!0}])]});if(null==n)return;await (0,b.gf)(p.eq.DiffWith,{repoPath:r.repoPath,lhs:{sha:n.ref,uri:r},rhs:{sha:"",uri:r},line:i.line,showOptions:i.showOptions})}catch(e){S.YJ.error(e,"DiffWithRevisionCommand"),(0,y.qC)("Unable to open compare")}}};e2=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?e1(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&e0(t,i,o),o})([(0,b.GQ)()],e2);var e4=Object.defineProperty,e6=Object.getOwnPropertyDescriptor;let e3=class extends E.qg{constructor(e){super(p.eq.DiffWithRevisionFrom),this.container=e}async execute(e,t,i){let r,s,o,n;if(null==(t=(0,E.sZ)(t,e)))return;let a=await g.wv.fromUri(t);if(!a.repoPath){(0,y._0)("Unable to open file comparison");return}null==(i={...i}).line&&(i.line=e?.selection.active.line??0);let l=this.container.git.getRelativePath(a,a.repoPath);if(i?.stash){let e=`Open Changes with Stash${(0,eO.eu)(p.or.Dot,2,2)}`,t=await (0,eT.U)(this.container.git.getStash(a.repoPath),`${e}${a.getFormattedFileName({truncateTo:p.kN-e.length})}`,"Choose a stash to compare with",{empty:`No stashes with '${a.getFormattedFileName()}' found`,filter:e=>e.files?.some(e=>e.path===l||e.originalPath===l)??!0});if(null==t)return;s=r=t.ref}else{let e=`Open Changes with Branch or Tag${(0,eO.eu)(p.or.Dot,2,2)}`,t=await (0,ei.m)(a.repoPath,`${e}${a.getFormattedFileName({truncateTo:p.kN-e.length})}`,"Choose a reference (branch, tag, etc) to compare with",{allowRevisions:!0});if(null==t)return;r=t.ref,s=(0,et.MN)(t)&&t.remote?`remotes/${r}`:r}if(null==r)return;let h=await this.container.git.getDiffStatus(a.repoPath,"HEAD",r,{filters:["R","C"]});if(null!=h){let e=h.find(e=>e.path===l);e?.originalPath!=null&&(o=this.container.git.getAbsoluteUri(e.originalPath,a.repoPath),n=`${(0,N.g1)(e.originalPath)} (${(0,et.c5)(r)})`)}await (0,b.gf)(p.eq.DiffWith,{repoPath:a.repoPath,lhs:{sha:s,uri:o??a,title:n??`${(0,N.g1)(a.fsPath)} (${(0,et.c5)(r)})`},rhs:{sha:"",uri:a},line:i.line,showOptions:i.showOptions})}};e3=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?e6(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&e4(t,i,o),o})([(0,b.GQ)()],e3);var e8=Object.defineProperty,e7=Object.getOwnPropertyDescriptor;let e5=class extends E.qg{constructor(e){super([p.eq.DiffWithWorking,p.eq.DiffWithWorkingInDiffLeft,p.eq.DiffWithWorkingInDiffRight]),this.container=e}async execute(e,t,i){if(null==(i={...i}).uri){if(null==(t=(0,E.sZ)(t,e)))return}else t=i.uri;let r=await g.wv.fromUri(t);if(null==i.line&&(i.line=e?.selection.active.line??0),i.inDiffRightEditor)try{let e=await this.container.git.getPreviousComparisonUris(r.repoPath,r,r.sha);r=e?.previous??r}catch(e){S.YJ.error(e,"DiffWithWorkingCommand",`getPreviousDiffUris(${r.repoPath}, ${r.fsPath}, ${r.sha})`),(0,y.qC)("Unable to open compare");return}if(null==r.sha){o.window.showInformationMessage("File matches the working tree");return}if(r.sha===eQ.E1){o.window.showWarningMessage("Unable to open compare. File has been deleted from the working tree");return}if(r.isUncommittedStaged){let e=await this.container.git.getStatusForFile(r.repoPath,r);if(e?.indexStatus!=null){await (0,b.gf)(p.eq.DiffWith,{repoPath:r.repoPath,lhs:{sha:eQ.QD,uri:r.documentUri()},rhs:{sha:"",uri:r.documentUri()},line:i.line,showOptions:i.showOptions});return}}t=r.toFileUri();let s=await this.container.git.getWorkingUri(r.repoPath,t);if(null==s){o.window.showWarningMessage("Unable to open compare. File has been deleted from the working tree");return}await (0,b.gf)(p.eq.DiffWith,{repoPath:r.repoPath,lhs:{sha:r.sha,uri:t,title:i?.lhsTitle},rhs:{sha:"",uri:s},line:i.line,showOptions:i.showOptions})}};e5=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?e7(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&e8(t,i,o),o})([(0,b.GQ)()],e5);var e9=((e=e9||{})[e.Force=0]="Force",e[e.ForceWithLease=1]="ForceWithLease",e[e.ForceWithLeaseIfIncludes=2]="ForceWithLeaseIfIncludes",e),te=((t=te||{})[t.Head=0]="Head",t[t.RemoteHead=1]="RemoteHead",t[t.Tag=2]="Tag",t),tt=((i=tt||{})[i.INDEX_MODIFIED=0]="INDEX_MODIFIED",i[i.INDEX_ADDED=1]="INDEX_ADDED",i[i.INDEX_DELETED=2]="INDEX_DELETED",i[i.INDEX_RENAMED=3]="INDEX_RENAMED",i[i.INDEX_COPIED=4]="INDEX_COPIED",i[i.MODIFIED=5]="MODIFIED",i[i.DELETED=6]="DELETED",i[i.UNTRACKED=7]="UNTRACKED",i[i.IGNORED=8]="IGNORED",i[i.INTENT_TO_ADD=9]="INTENT_TO_ADD",i[i.INTENT_TO_RENAME=10]="INTENT_TO_RENAME",i[i.TYPE_CHANGED=11]="TYPE_CHANGED",i[i.ADDED_BY_US=12]="ADDED_BY_US",i[i.ADDED_BY_THEM=13]="ADDED_BY_THEM",i[i.DELETED_BY_US=14]="DELETED_BY_US",i[i.DELETED_BY_THEM=15]="DELETED_BY_THEM",i[i.BOTH_ADDED=16]="BOTH_ADDED",i[i.BOTH_DELETED=17]="BOTH_DELETED",i[i.BOTH_MODIFIED=18]="BOTH_MODIFIED",i),ti=((r=ti||{}).BadConfigFile="BadConfigFile",r.AuthenticationFailed="AuthenticationFailed",r.NoUserNameConfigured="NoUserNameConfigured",r.NoUserEmailConfigured="NoUserEmailConfigured",r.NoRemoteRepositorySpecified="NoRemoteRepositorySpecified",r.NotAGitRepository="NotAGitRepository",r.NotAtRepositoryRoot="NotAtRepositoryRoot",r.Conflict="Conflict",r.StashConflict="StashConflict",r.UnmergedChanges="UnmergedChanges",r.PushRejected="PushRejected",r.ForcePushWithLeaseRejected="ForcePushWithLeaseRejected",r.ForcePushWithLeaseIfIncludesRejected="ForcePushWithLeaseIfIncludesRejected",r.RemoteConnectionError="RemoteConnectionError",r.DirtyWorkTree="DirtyWorkTree",r.CantOpenResource="CantOpenResource",r.GitNotFound="GitNotFound",r.CantCreatePipe="CantCreatePipe",r.PermissionDenied="PermissionDenied",r.CantAccessRemote="CantAccessRemote",r.RepositoryNotFound="RepositoryNotFound",r.RepositoryIsLocked="RepositoryIsLocked",r.BranchNotFullyMerged="BranchNotFullyMerged",r.NoRemoteReference="NoRemoteReference",r.InvalidBranchName="InvalidBranchName",r.BranchAlreadyExists="BranchAlreadyExists",r.NoLocalChanges="NoLocalChanges",r.NoStashFound="NoStashFound",r.LocalChangesOverwritten="LocalChangesOverwritten",r.NoUpstreamBranch="NoUpstreamBranch",r.IsInSubmodule="IsInSubmodule",r.WrongCase="WrongCase",r.CantLockRef="CantLockRef",r.CantRebaseMultipleBranches="CantRebaseMultipleBranches",r.PatchDoesNotApply="PatchDoesNotApply",r.NoPathFound="NoPathFound",r.UnknownPath="UnknownPath",r.EmptyCommitMessage="EmptyCommitMessage",r.BranchFastForwardRejected="BranchFastForwardRejected",r.BranchNotYetBorn="BranchNotYetBorn",r.TagConflict="TagConflict",r),tr=((s=tr||{})[s.Merge=0]="Merge",s[s.Index=1]="Index",s[s.WorkingTree=2]="WorkingTree",s),ts=n(9455),to=Object.defineProperty,tn=Object.getOwnPropertyDescriptor;let ta=class extends E.i6{constructor(e){super([p.eq.ExternalDiff,p.eq.ExternalDiffAll]),this.container=e}async preExecute(e,t){if(t={...t},(0,E.CO)(e)){let i=await e.node.commit.getPreviousSha(),r=(0,et.bP)(i)?"":i,s=e.node.commit.isUncommitted?"":e.node.commit.sha;return t.files=[{uri:g.wv.fromFile(e.node.file,e.node.file.repoPath??e.node.repoPath),staged:e.node.commit.isUncommittedStaged||null!=e.node.file.indexStatus,ref1:r,ref2:s}],this.execute(t)}if((0,E.Un)(e))return t.files=[{uri:g.wv.fromFile(e.node.file,e.node.file.repoPath??e.node.repoPath),staged:null!=e.node.file.indexStatus,ref1:e.node.ref1,ref2:e.node.ref2}],this.execute(t);if(null==t.files&&("scm-states"===e.type?t.files=e.scmResourceStates.map(e=>({uri:e.resourceUri,staged:e.resourceGroupType===tr.Index})):"scm-groups"===e.type&&(t.files=(0,ts.Gs)(e.scmResourceGroups[0].resourceStates,e=>this.isModified(e)?{uri:e.resourceUri,staged:e.resourceGroupType===tr.Index}:void 0))),e.command===p.eq.ExternalDiffAll&&null==t.files){let e=await (0,G.a0)("Open All Changes (difftool)");if(null==e)return;let i=await this.container.git.getStatusForRepo(e.uri);if(null==i)return o.window.showInformationMessage("The repository doesn't have any changes");for(let e of(t.files=[],i.files))"M"===e.indexStatus&&t.files.push({uri:e.uri,staged:!0}),"M"===e.workingTreeStatus&&t.files.push({uri:e.uri,staged:!1})}return this.execute(t)}isModified(e){let t=e.type;return t===tt.BOTH_MODIFIED||t===tt.INDEX_MODIFIED||t===tt.MODIFIED}async execute(e){e={...e};try{let t;if(null==e.files){let i=o.window.activeTextEditor;if(null==i||!(t=this.container.git.getBestRepository(i)?.path))return;let r=i.document.uri,s=await this.container.git.getStatusForFile(t,r);if(null==s){o.window.showInformationMessage("The current file doesn't have any changes");return}e.files=[],"M"===s.indexStatus&&e.files.push({uri:s.uri,staged:!0}),"M"===s.workingTreeStatus&&e.files.push({uri:s.uri,staged:!1})}else if(!(t=(await this.container.git.getOrOpenRepository(e.files[0].uri))?.path))return;let i=C.i.get("advanced.externalDiffTool")||await this.container.git.getDiffTool(t);if(!i){let e="View Git Docs";await o.window.showWarningMessage("Unable to open changes because no Git diff tool is configured",e)===e&&o.env.openExternal(o.Uri.parse("https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool"));return}for(let r of e.files)this.container.git.openDiffTool(t,r.uri,{ref1:r.ref1,ref2:r.ref2,staged:r.staged,tool:i})}catch(e){S.YJ.error(e,"ExternalDiffCommand"),(0,y.qC)("Unable to open changes in diff tool")}}};ta=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tn(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&to(t,i,o),o})([(0,b.GQ)()],ta);var tl=Object.defineProperty,th=Object.getOwnPropertyDescriptor;let tc=class extends E.qg{constructor(e){super(p.eq.GenerateCommitMessage),this.container=e}async execute(e,t,i){let r;if(null!=(i={...i}).repoPath)r=this.container.git.getRepository(i.repoPath);else{let i=null!=(t=(0,E.sZ)(t,e))?await g.wv.fromUri(t):void 0;r=await (0,G.us)(i,e,"Generate Commit Message")}if(null==r)return;let s=await this.container.git.getScmRepository(r.path);if(null!=s)try{let e=s.inputBox.value,t=await this.container.ai.generateCommitMessage(r,{context:e,progress:{location:o.ProgressLocation.Notification,title:"Generating commit message..."}});if(null==t)return;(0,b.CA)("workbench.view.scm"),s.inputBox.value=e?`${e}

${t}`:t}catch(e){if(S.YJ.error(e,"GenerateCommitMessageCommand"),e instanceof Error&&e.message.startsWith("No changes")){o.window.showInformationMessage("No changes to generate a commit message from.");return}(0,y.qC)(e.message)}}};tc=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?th(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tl(t,i,o),o})([(0,b.GQ)()],tc);var tu=n(688),td=n(7840),tp=n(7620),tg=n(2356),tm=Object.defineProperty,tf=Object.getOwnPropertyDescriptor;let tw=class extends E.i6{constructor(e){super(p.eq.OpenOrCreateWorktreeForGHPR),this.container=e}async execute(...e){let t,i,r,s;let[n]=e,{base:{repositoryCloneUrl:{url:a,owner:l,repositoryName:h}},githubRepository:{rootUri:c},head:{repositoryCloneUrl:{url:u,owner:d},ref:p},item:{number:g}}="pullRequestModel"in n?n.pullRequestModel:n,f=this.container.git.getRepository(c);if(null==f){o.window.showWarningMessage(`Unable to find repository(${c.toString()}) for PR #${g}`);return}if(null==(f=await f.getMainRepository())){o.window.showWarningMessage(`Unable to find main repository(${c.toString()}) for PR #${g}`);return}let w=u.toString(),[,v,y]=(0,tp.Ud)(w),b=(await f.getRemotes({filter:e=>e.matches(v,y)}))[0];null!=b?(i=b.name,await this.container.git.fetch(f.path,{remote:b.name})):(i=d,t={name:d,url:w});let C=`${i}/${p}`,A=`pr/${a.toString()===u.toString()?p:C}`,k=`remotes/${C}`,P=await (0,td.i)(f,A,C);if(null!=P){(0,tu.eU)(P,{openOnly:!0});return}let R=await (0,m.Yp)(f,C);null!=R?r=(0,et.uE)(R):(r=(0,et.op)(k,f.path,{refType:"branch",name:k,remote:!0}),s=A),await (0,tg.k5)();try{let e=await (0,tu.Su)(f,void 0,r,{addRemote:t,createBranch:s});if(null==e)return;this.container.git.setConfig(f.path,`branch.${A}.github-pr-owner-number`,`${l}#${h}#${g}`)}catch(e){S.YJ.error(e,"CreateWorktreeCommand","Unable to create worktree"),o.window.showErrorMessage(`Unable to create worktree for ${d}:${p}`)}}};tw=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tf(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tm(t,i,o),o})([(0,b.GQ)()],tw);var tv=n(9132),ty=n(1492),tb=Object.defineProperty,tC=Object.getOwnPropertyDescriptor,tA=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?tC(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tb(t,i,o),o};let tk=/\$\(.+?\)|\s/g,tP=Symbol("ShowLoading"),tS=class extends E.i6{constructor(e){super([p.eq.GitCommands,p.eq.GitCommandsBranch,p.eq.GitCommandsBranchCreate,p.eq.GitCommandsBranchDelete,p.eq.GitCommandsBranchPrune,p.eq.GitCommandsBranchRename,p.eq.GitCommandsCheckout,p.eq.GitCommandsCherryPick,p.eq.GitCommandsHistory,p.eq.GitCommandsMerge,p.eq.GitCommandsRebase,p.eq.GitCommandsRemote,p.eq.GitCommandsRemoteAdd,p.eq.GitCommandsRemotePrune,p.eq.GitCommandsRemoteRemove,p.eq.GitCommandsReset,p.eq.GitCommandsRevert,p.eq.GitCommandsShow,p.eq.GitCommandsStash,p.eq.GitCommandsStashDrop,p.eq.GitCommandsStashList,p.eq.GitCommandsStashPop,p.eq.GitCommandsStashPush,p.eq.GitCommandsStashRename,p.eq.GitCommandsStatus,p.eq.GitCommandsSwitch,p.eq.GitCommandsTag,p.eq.GitCommandsTagCreate,p.eq.GitCommandsTagDelete,p.eq.GitCommandsWorktree,p.eq.GitCommandsWorktreeCreate,p.eq.GitCommandsWorktreeDelete,p.eq.GitCommandsWorktreeOpen,p.eq.CopyWorkingChangesToWorktree]),this.container=e}startedWith="menu";preExecute(e,t){switch(e.command){case p.eq.GitCommandsBranch:t={command:"branch"};break;case p.eq.GitCommandsBranchCreate:t={command:"branch",state:{subcommand:"create"}};break;case p.eq.GitCommandsBranchDelete:t={command:"branch",state:{subcommand:"delete"}};break;case p.eq.GitCommandsBranchPrune:t={command:"branch",state:{subcommand:"prune"}};break;case p.eq.GitCommandsBranchRename:t={command:"branch",state:{subcommand:"rename"}};break;case p.eq.GitCommandsCherryPick:t={command:"cherry-pick"};break;case p.eq.GitCommandsHistory:t={command:"log"};break;case p.eq.GitCommandsMerge:t={command:"merge"};break;case p.eq.GitCommandsRebase:t={command:"rebase"};break;case p.eq.GitCommandsRemote:t={command:"remote"};break;case p.eq.GitCommandsRemoteAdd:t={command:"remote",state:{subcommand:"add"}};break;case p.eq.GitCommandsRemotePrune:t={command:"remote",state:{subcommand:"prune"}};break;case p.eq.GitCommandsRemoteRemove:t={command:"remote",state:{subcommand:"remove"}};break;case p.eq.GitCommandsReset:t={command:"reset"};break;case p.eq.GitCommandsRevert:t={command:"revert"};break;case p.eq.GitCommandsShow:t={command:"show"};break;case p.eq.GitCommandsStash:t={command:"stash"};break;case p.eq.GitCommandsStashDrop:t={command:"stash",state:{subcommand:"drop"}};break;case p.eq.GitCommandsStashList:t={command:"stash",state:{subcommand:"list"}};break;case p.eq.GitCommandsStashPop:t={command:"stash",state:{subcommand:"pop"}};break;case p.eq.GitCommandsStashPush:t={command:"stash",state:{subcommand:"push"}};break;case p.eq.GitCommandsStashRename:t={command:"stash",state:{subcommand:"rename"}};break;case p.eq.GitCommandsStatus:t={command:"status"};break;case p.eq.GitCommandsSwitch:case p.eq.GitCommandsCheckout:t={command:"switch"};break;case p.eq.GitCommandsTag:t={command:"tag"};break;case p.eq.GitCommandsTagCreate:t={command:"tag",state:{subcommand:"create"}};break;case p.eq.GitCommandsTagDelete:t={command:"tag",state:{subcommand:"delete"}};break;case p.eq.GitCommandsWorktree:t={command:"worktree"};break;case p.eq.GitCommandsWorktreeCreate:t={command:"worktree",state:{subcommand:"create"}};break;case p.eq.GitCommandsWorktreeDelete:t={command:"worktree",state:{subcommand:"delete"}};break;case p.eq.GitCommandsWorktreeOpen:t={command:"worktree",state:{subcommand:"open"}};break;case p.eq.CopyWorkingChangesToWorktree:t={command:"worktree",state:{subcommand:"copy-changes",changes:{type:"working-tree"}}}}return this.execute(t)}async execute(e){let t,i;let r=new tv.e(this.container,e),s=e?.command!=null?r.find(e.command):void 0;for(this.startedWith=null!=s?"command":"menu",i=null==s?r:await this.showLoadingIfNeeded(s,this.getCommandStep(s,r)),i?.ignoreFocusOut===!0&&(i.ignoreFocusOut=void 0);null!=i;){if(i===r&&null!=s){i=await this.getCommandStep(s,r);continue}if(t&&null==i.ignoreFocusOut&&(i.ignoreFocusOut=!0),(0,ty.uQ)(i)){i=await this.showPickStep(i,r),i?.ignoreFocusOut===!0&&(t=!0);continue}if((0,ty.yq)(i)){i=await this.showInputStep(i,r),i?.ignoreFocusOut===!0&&(t=!0);continue}if((0,ty.iI)(i)){i=await this.showCustomStep(i,r),i?.ignoreFocusOut===!0&&(t=!0);continue}break}e?.completion?.fulfill()}async showLoadingIfNeeded(e,t){let i;let r=await Promise.race([t,new Promise(e=>setTimeout(e,250,tP))]);if(r!==tP)return r;let s=o.window.createQuickPick();s.ignoreFocusOut=!1;let n=[];try{return await new Promise(async r=>{n.push(s.onDidHide(()=>r(i))),s.title=e.title,s.placeholder="Loading...",s.busy=!0,s.enabled=!1,s.show(),i=await t,s.hide()})}finally{s.dispose(),n.forEach(e=>void e.dispose())}}getButtons(e,t){let i=[];if(null!=e){if(null!=e.buttons)return i.push(...e.buttons),i;!0!==e.disallowBack&&i.push(o.QuickInputButtons.Back),null!=e.additionalButtons&&i.push(...e.additionalButtons)}if(t?.canConfirm){if(t.canSkipConfirm){let r=new er.cD(t.confirm(),e?.isConfirmationStep??!1,async()=>{if(t?.skipConfirmKey==null)return;let e=C.i.get("gitCommands.skipConfirmations")??[],i=e.indexOf(t.skipConfirmKey);-1!==i?e.splice(i,1):e.push(t.skipConfirmKey),await C.i.updateEffective("gitCommands.skipConfirmations",e)});i.push(r)}else e?.isConfirmationStep||i.push(er.IH)}return i}async getCommandStep(e,t){t.setCommand(e,"command"),null!=this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories;let i=await e.next();if(!i.done)return i.value}async nextStep(e,t,i){null!=i&&(i.busy=!0);let r=await e.next(t);if(!r.done)return null!=i&&(i.value=""),r.value}async showCustomStep(e,t){let i=await e.show(e);if(i!==ty.QV){if(!(0,eX.SE)(i))return this.nextStep(t.command,i);switch(i){case eX.QN.Back:return await t?.command?.previous()??t;case eX.QN.Noop:return t.command?.retry();case eX.QN.Cancel:default:return}}}async showInputStep(e,t){let i=o.window.createInputBox();i.ignoreFocusOut=!C.i.get("gitCommands.closeOnFocusOut")||(e.ignoreFocusOut??!1);let r=[];try{return await new Promise(async s=>{let n=async()=>{!0!==e.disallowBack&&(i.value="",null!=t.command&&(i.busy=!0,s(await t.command.previous()??t)))},a={};if(null!=e.onDidPressKey&&null!=e.keys&&0!==e.keys.length)for(let t of e.keys)a[t]={onDidPressKey:t=>e.onDidPressKey(i,t)};let l=this.container.keyboard.createScope(a);if(l.start(),null!=e.value&&l.pause(["left","ctrl+left","right","ctrl+right"]),r.push(l,i.onDidHide(()=>s(void 0)),i.onDidTriggerButton(async r=>{if(r===o.QuickInputButtons.Back){n();return}if(r!==er.IH){if(r instanceof er.uM&&null!=r.onDidClick){let o=r.onDidClick(i);if(i.buttons=this.getButtons(e,t.command),await o===!0){s(t.command?.retry());return}(0,tg.um)(o)&&(i.buttons=this.getButtons(e,t.command));return}if(null!=e.onDidClickButton){let o=e.onDidClickButton(i,r);i.buttons=this.getButtons(e,t.command),await o===!0&&s(t.command?.retry())}}}),i.onDidChangeValue(async t=>{if(i.ignoreFocusOut||(i.ignoreFocusOut=!0),null!=l&&(0!==t.length?l.pause(["left","ctrl+left","right","ctrl+right"]):l.resume()),null==e.validate)return;let[,r]=await e.validate(t);i.validationMessage=r}),i.onDidAccept(async()=>{s(await this.nextStep(t.command,i.value,i))})),i.buttons=this.getButtons(e,t.command),i.title=e.title,i.placeholder=e.placeholder,i.prompt=e.prompt,null!=e.value&&(i.value=e.value,null!=e.validate)){let[t,r]=await e.validate(e.value);t||null==r||(i.validationMessage={severity:o.InputBoxValidationSeverity.Error,message:r})}if(i.show(),null!=e.value)try{i._onDidChangeValueEmitter?.fire(i.value)}catch{}})}finally{i.dispose(),r.forEach(e=>void e.dispose())}}async showPickStep(e,t){let i=o.window.createQuickPick();i.ignoreFocusOut=!C.i.get("gitCommands.closeOnFocusOut")||(e.ignoreFocusOut??!1);let r=[];try{return await new Promise(async s=>{async function n(){!0!==e.disallowBack&&(i.value="",null!=t.command&&(i.busy=!0,s(await t.command.previous()??t)))}async function a(){if(null!=e.onDidLoadMore){i.busy=!0;try{let t=await e.onDidLoadMore?.(i),r=-1;if(0!==i.activeItems.length){let e=i.activeItems[0];r=i.items.indexOf(e),(0,eX.EB)(e)&&r--}i.items=e.items=t,r&&(i.activeItems=[i.items[r]])}finally{i.busy=!1}}}let l={left:{onDidPressKey:n}};if(null!=e.onDidPressKey&&e.keys?.length)for(let t of e.keys)l[t]={onDidPressKey:t=>{if(!i.activeItems.length)return;let r=i.activeItems[0];if(!(0,eX.EB)(r))return e.onDidPressKey(i,t,r)}};let h=this.container.keyboard.createScope(l);h.start(),null!=e.value&&h.pause(["left","ctrl+left","right","ctrl+right"]);let u=!0,d=!1;r.push(h,i.onDidHide(()=>{e.frozen||s(void 0)}),i.onDidTriggerItemButton(async r=>{await e.onDidClickItemButton?.(i,r.button,r.item)===!0&&s(await this.nextStep(t.command,[r.item],i))}),i.onDidTriggerButton(async r=>{if(r===o.QuickInputButtons.Back){n();return}if(r!==er.IH){if(r===er.ur){a();return}if(r instanceof er.uM&&null!=r.onDidClick){let o;if(null==t.command&&0!==i.activeItems.length){let e=i.activeItems[0];(0,ty.OY)(e)&&(o=e)}let n=r.onDidClick(i);if(i.buttons=this.getButtons(o?.value&&!(0,ty.iI)(o.value)?o.value:e,o??t.command),await n===!0){s(t.command?.retry());return}(0,tg.um)(n)&&(i.buttons=this.getButtons(o?.value&&!(0,ty.iI)(o.value)?o.value:e,o??t.command));return}if(null!=e.onDidClickButton){let o=e.onDidClickButton(i,r);i.buttons=this.getButtons(e,t.command),await o===!0&&s(t.command?.retry())}}}),i.onDidChangeValue(async r=>{if(i.ignoreFocusOut||(i.ignoreFocusOut=!0,e.ignoreFocusOut=!0),null!=h&&(0!==r.length?h.pause(["left","ctrl+left","right","ctrl+right"]):h.resume()),!(null!=e.onDidChangeValue&&await e.onDidChangeValue(i))){if(!d){if(i.canSelectMany&&" "===r){i.value="",i.selectedItems=i.selectedItems.length===i.items.length?[]:i.items;return}if(r.endsWith(" ")){let r;if(i.canSelectMany&&0!==i.selectedItems.length)return;if(null==t.command){let e=t.find(i.value.trim(),!0);if(null==e)return;t.setCommand(e,this.startedWith)}else{let t=i.value.trim().toLowerCase(),s=(await e.items).find(e=>e.label.replace(tk,"").toLowerCase()===t);if(null==s)return;r=[s]}s(await this.nextStep(t.command,r,i));return}}if(!i.canSelectMany&&null!=t.command&&0!==r.trim().length&&(d||0===i.activeItems.length)){if(null==e.onValidateValue)return;d=await e.onValidateValue(i,r.trim(),await e.items)}else d=!1;d||(e.items=await e.items,i.items.length===e.items.length||(i.items=e.items))}}),i.onDidChangeActive(()=>{if(u||i.ignoreFocusOut||(i.ignoreFocusOut=!0,e.ignoreFocusOut=!0),u&&(u=!1),null!=t.command||0===i.activeItems.length)return;let r=i.activeItems[0];(0,ty.OY)(r)&&(i.buttons=this.getButtons(void 0,r))}),i.onDidChangeSelection(t=>{i.canSelectMany&&!i.ignoreFocusOut&&(i.ignoreFocusOut=!0,e.ignoreFocusOut=!0)}),i.onDidAccept(async()=>{let r=i.selectedItems;if(0===r.length){if(!i.canSelectMany||0===i.activeItems.length){let r=i.value.trim();if(0===r.length&&!e.allowEmpty)return;if(null==e.onDidAccept){e.allowEmpty&&s(await this.nextStep(t.command,[],i));return}i.busy=!0,await e.onDidAccept(i)&&s(await this.nextStep(t.command,r,i)),i.busy=!1;return}r=i.activeItems}if(1===r.length){let[e]=r;if((0,eX.EB)(e))switch(e.directive){case eX.QN.Cancel:s(void 0);return;case eX.QN.Back:n();return;case eX.QN.LoadMore:a();return;case eX.QN.StartPreviewTrial:c.Container.instance.subscription.startPreviewTrial(),s(void 0);return;case eX.QN.RequiresVerification:c.Container.instance.subscription.resendVerification(),s(void 0);return;case eX.QN.ExtendTrial:c.Container.instance.subscription.loginOrSignUp(),s(void 0);return;case eX.QN.RequiresPaidSubscription:c.Container.instance.subscription.purchase(),s(void 0);return;case eX.QN.Noop:return}}if(null==t.command){let[e]=r;if(!(0,ty.OY)(e))return;t.setCommand(e,this.startedWith)}if(!i.canSelectMany&&null!=e.onDidAccept){i.busy=!0;let t=await e.onDidAccept(i);if(i.busy=!1,!t)return}s(await this.nextStep(t.command,r,i))})),i.title=e.title,i.matchOnDescription=!!e.matchOnDescription,i.matchOnDetail=!!e.matchOnDetail,(0,tg.um)(e.items)?(i.placeholder="Loading...",i.busy=!0,i.show(),i.items=await e.items,i.placeholder="function"==typeof e.placeholder?e.placeholder(i.items.length):e.placeholder,i.busy=!1):(i.placeholder="function"==typeof e.placeholder?e.placeholder(i.items.length):e.placeholder,i.items=e.items),i.canSelectMany=!!e.multiselect&&i.items.length>1,i.canSelectMany?(i.selectedItems=e.selectedItems??i.items.filter(e=>e.picked),i.activeItems=i.selectedItems):i.activeItems=e.selectedItems??i.items.filter(e=>e.picked),null!=t.command&&e===t&&t.setCommand(void 0,"menu"),i.buttons=this.getButtons(e,t.command);let p=e.selectValueWhenShown??!0;if(null!=e.value&&p&&(i.value=e.value),i.show(),null==e.value||p||(i.value=e.value),null!=e.value&&p)try{i._onDidChangeValueEmitter?.fire(i.value)}catch{}})}finally{i.dispose(),r.forEach(e=>void e.dispose())}}};tA([(0,$.Yz)({args:!1,scoped:!0,singleLine:!0,timed:!1})],tS.prototype,"execute",1),tS=tA([(0,b.GQ)()],tS);var tR=Object.defineProperty,tD=Object.getOwnPropertyDescriptor;let t$=class extends E.i6{constructor(e){super(p.eq.InviteToLiveShare),this.container=e}static getMarkdownCommandArgs(e){return super.getMarkdownCommandArgsCore(p.eq.InviteToLiveShare,void 0===e||"string"==typeof e?{email:e}:e)}preExecute(e,t){return(0,E.mc)(e)&&((t={...t}).email=e.node.contributor.email),this.execute(t)}async execute(e){if(e?.email){let t=await this.container.vsls.getContact(e.email);if(null!=t)return t.invite()}return this.container.vsls.startSession()}};t$=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tD(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tR(t,i,o),o})([(0,b.GQ)()],t$);var t_=Object.defineProperty,tI=Object.getOwnPropertyDescriptor,tT=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?tI(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&t_(t,i,o),o};let tF=class extends E.i6{constructor(e){super(p.eq.EnableDebugLogging),this.container=e}async execute(){await C.i.updateEffective("outputLevel","debug")}};tF=tT([(0,b.GQ)()],tF);let tO=class extends E.i6{constructor(e){super(p.eq.DisableDebugLogging),this.container=e}async execute(){await C.i.updateEffective("outputLevel","error")}};tO=tT([(0,b.GQ)()],tO);var tx=Object.defineProperty,tE=Object.getOwnPropertyDescriptor;let tB=class extends E.qg{constructor(e){super(p.eq.OpenAssociatedPullRequestOnRemote),this.container=e}async execute(e,t){let i;let r=null!=(t=(0,E.sZ)(t,e))?await g.wv.fromUri(t):void 0;if(null!=e&&null!=r){let t=e.selection.active.line;if(t<0)return;try{let e=await this.container.git.getBlameForLine(r,t);if(null==e)return;i={clipboard:!1,ref:e.commit.sha,repoPath:e.commit.repoPath}}catch(e){S.YJ.error(e,"OpenAssociatedPullRequestOnRemoteCommand",`getBlameForLine(${t})`);return}}else try{let e=await (0,G.a0)("Open Associated Pull Request",void 0,void 0,{filter:async e=>await this.container.git.getBestRemoteWithIntegration(e.uri)!=null});if(null==e)return;let t=await e?.getBranch(),r=await t?.getAssociatedPullRequest();i=null!=r?{clipboard:!1,pr:{url:r.url}}:{clipboard:!1,ref:t?.name??"HEAD",repoPath:e.path}}catch(e){S.YJ.error(e,"OpenAssociatedPullRequestOnRemoteCommand","No editor opened");return}await (0,b.gf)(p.eq.OpenPullRequestOnRemote,i)}};tB=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tE(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tx(t,i,o),o})([(0,b.GQ)()],tB);var tU=Object.defineProperty,tW=Object.getOwnPropertyDescriptor;let tN=class extends E.qg{constructor(e){super([p.eq.OpenBranchesOnRemote,p.eq.Deprecated_OpenBranchesInRemote,p.eq.CopyRemoteBranchesUrl]),this.container=e}preExecute(e,t){return(0,E.W)(e)&&(t={...t,remote:e.node.remote.name}),e.command===p.eq.CopyRemoteBranchesUrl&&(t={...t,clipboard:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r=null!=(t=(0,E.sZ)(t,e))?await g.wv.fromUri(t):void 0,s=(await G.us(r,e,i?.clipboard?"Copy Remote Branches URL":"Open Branches on Remote"))?.path;if(s)try{await (0,b.gf)(p.eq.OpenOnRemote,{resource:{type:ek.o.Branches},repoPath:s,remote:i?.remote,clipboard:i?.clipboard})}catch(e){S.YJ.error(e,"OpenBranchesOnRemoteCommand"),(0,y.qC)("Unable to open branches on remote provider")}}};tN=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tW(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tU(t,i,o),o})([(0,b.GQ)()],tN);var tq=Object.defineProperty,tL=Object.getOwnPropertyDescriptor;let tM=class extends E.qg{constructor(e){super([p.eq.OpenBranchOnRemote,p.eq.Deprecated_OpenBranchInRemote,p.eq.CopyRemoteBranchUrl]),this.container=e}preExecute(e,t){return(0,E.w3)(e)&&(t={...t,branch:e.node.branch.name,remote:e.node.branch.getRemoteName()}),e.command===p.eq.CopyRemoteBranchUrl&&(t={...t,clipboard:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r=null!=(t=(0,E.sZ)(t,e))?await g.wv.fromUri(t):void 0,s=(await G.us(r,e,i?.clipboard?"Copy Remote Branch URL":"Open Branch On Remote"))?.path;if(s){i={...i};try{if(null==i.branch){let e=await (0,ei.m)(s,i.clipboard?"Copy Remote Branch URL":"Open Branch On Remote",i.clipboard?"Choose a branch to copy the URL from":"Choose a branch to open",{autoPick:!0,filter:{branches:e=>null!=e.upstream},include:ei.Q.Branches,sort:{branches:{current:!0},tags:{}}});if(null==e||e instanceof eF.Ml)return;i.branch=e.ref}await (0,b.gf)(p.eq.OpenOnRemote,{resource:{type:ek.o.Branch,branch:i.branch||"HEAD"},repoPath:s,remote:i.remote,clipboard:i.clipboard})}catch(e){S.YJ.error(e,"OpenBranchOnRemoteCommand"),(0,y.qC)("Unable to open branch on remote provider")}}}};tM=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tL(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tq(t,i,o),o})([(0,b.GQ)()],tM);var tQ=Object.defineProperty,tG=Object.getOwnPropertyDescriptor;let tY=class extends E.qg{constructor(e){super(p.eq.OpenCurrentBranchOnRemote),this.container=e}async execute(e,t){let i=null!=(t=(0,E.sZ)(t,e))?await g.wv.fromUri(t):void 0,r=await (0,G.us)(i,e,"Open Current Branch Name");if(null!=r)try{let e=await r.getBranch();e?.name&&await (0,b.gf)(p.eq.OpenOnRemote,{resource:{type:ek.o.Branch,branch:e.name||"HEAD"},repoPath:r.path})}catch(e){S.YJ.error(e,"OpenCurrentBranchOnRemoteCommand"),(0,y.qC)("Unable to open branch on remote provider")}}};tY=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tG(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tQ(t,i,o),o})([(0,b.GQ)()],tY);var tV=Object.defineProperty,tz=Object.getOwnPropertyDescriptor;let tH=class extends E.i6{constructor(e){super(p.eq.OpenChangedFiles),this.container=e}async execute(e){e={...e};try{if(null==e.uris){let t=await (0,G.a0)("Open All Changed Files");if(null==t)return;let i=await this.container.git.getStatusForRepo(t.uri);if(null==i){o.window.showWarningMessage("Unable to open changed files");return}e.uris=(0,ts.Gs)(i.files,e=>"D"!==e.status?e.uri:void 0)}(0,q.i3)(e.uris)}catch(e){S.YJ.error(e,"OpenChangedFilesCommand"),(0,y.qC)("Unable to open all changed files")}}};tH=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tz(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tV(t,i,o),o})([(0,b.GQ)()],tH),n(5128);var tj=Object.defineProperty,tJ=Object.getOwnPropertyDescriptor;let tK=class extends E.i6{constructor(e){super([p.eq.OpenComparisonOnRemote,p.eq.CopyRemoteComparisonUrl]),this.container=e}preExecute(e,t){return"viewItem"===e.type&&(e.node.is("results-commits")?t={...t,repoPath:e.node.repoPath,ref1:e.node.ref1,ref2:e.node.ref2}:e.node.is("compare-results")&&(t={...t,repoPath:e.node.repoPath,ref1:e.node.ahead.ref1,ref2:e.node.ahead.ref2})),e.command===p.eq.CopyRemoteBranchesUrl&&(t={...t,clipboard:!0}),this.execute(t)}async execute(e){if(e?.repoPath!=null&&null!=e.ref1&&null!=e.ref2)try{await (0,b.gf)(p.eq.OpenOnRemote,{resource:{type:ek.o.Comparison,base:e.ref1,compare:e.ref2,notation:e.notation},repoPath:e.repoPath,clipboard:e?.clipboard})}catch(e){S.YJ.error(e,"OpenComparisonOnRemoteCommand"),(0,y.qC)("Unable to open comparison on remote provider")}}};tK=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tJ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tj(t,i,o),o})([(0,b.GQ)()],tK);var tZ=Object.defineProperty,tX=Object.getOwnPropertyDescriptor;let t0=class extends E.i6{constructor(e){super(p.eq.OpenFileFromRemote),this.container=e}async execute(){let e,t=await o.env.clipboard.readText();try{o.Uri.parse(t,!0)}catch{t=void 0}let i=await o.window.showInputBox({prompt:"Enter a remote file url to open",placeHolder:"Remote file url",value:t,ignoreFocusOut:!0});if(null==i||0===i.length)return;let r=await this.container.git.getLocalInfoFromRemoteUri(o.Uri.parse(i));if(null==r){if(null==(r=await this.container.git.getLocalInfoFromRemoteUri(o.Uri.parse(i),{validate:!1}))){o.window.showWarningMessage("Unable to parse the provided remote url.");return}let e="Open File...";if(await o.window.showWarningMessage("Unable to find a workspace folder that matches the provided remote url.",e)!==e)return}r.startLine&&(e=r.endLine?new o.Range(r.startLine-1,0,r.endLine,0):new o.Range(r.startLine-1,0,r.startLine-1,0));try{await (0,q.AT)(r.uri,{selection:e,throwOnError:!0})}catch{let e=await o.window.showOpenDialog({title:"Open local file",defaultUri:r.uri,canSelectMany:!1,canSelectFolders:!1});if(null==e||0===e.length)return;await (0,q.AT)(e[0])}}};t0=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tX(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tZ(t,i,o),o})([(0,b.GQ)()],t0);var t1=n(9160),t2=Object.defineProperty,t4=Object.getOwnPropertyDescriptor;let t6=class extends E.qg{constructor(e){super([p.eq.OpenFileOnRemote,p.eq.Deprecated_OpenFileInRemote,p.eq.CopyRemoteFileUrl,p.eq.CopyRemoteFileUrlWithoutRange,p.eq.OpenFileOnRemoteFrom,p.eq.CopyRemoteFileUrlFrom]),this.container=e}async preExecute(e,t){let i=e.uri;if("editorLine"===e.type&&(t={...t,line:e.line,range:!0}),e.command===p.eq.CopyRemoteFileUrlWithoutRange&&(t={...t,range:!1}),(0,E.k7)(e)?(t={...t,range:!1},e.command===p.eq.CopyRemoteFileUrl||e.command===p.eq.CopyRemoteFileUrlWithoutRange||e.command===p.eq.CopyRemoteFileUrlFrom?t.sha=e.node instanceof t1.k?void 0:e.node.commit.sha:(0,E.w3)(e)&&(t.branchOrTag=e.node.branch?.name),i=e.node.uri):"viewItem"===e.type&&(t={...t,range:!1},i=e.node.uri??e.uri),(e.command===p.eq.CopyRemoteFileUrl||e.command===p.eq.CopyRemoteFileUrlWithoutRange||e.command===p.eq.CopyRemoteFileUrlFrom)&&null==(t={...t,clipboard:!0}).sha){let i=(0,E.sZ)(e.uri,e.editor);if(null!=i){let e=await g.wv.fromUri(i);if(e.repoPath){if(null==e.sha){let i=await this.container.git.getCommitForFile(e.repoPath,e,{firstIfNotFound:!0});null!=i&&(t.sha=i.sha)}else t.sha=e.sha}}}return(e.command===p.eq.OpenFileOnRemoteFrom||e.command===p.eq.CopyRemoteFileUrlFrom)&&(t={...t,pickBranchOrTag:!0,range:!1}),this.execute(e.editor,i,t)}async execute(e,t,i){if(null==(t=(0,E.sZ)(t,e)))return;let r=await g.wv.fromUri(t);if(r.repoPath){i={range:!0,...i};try{let s,n=await this.container.git.getRemotesWithProviders(r.repoPath,{sort:!0});i.range&&(null!=e&&Y.K.equals(e.document.uri,t)?s=new o.Range(e.selection.start.with({line:e.selection.start.line+1}),e.selection.end.with({line:e.selection.end.line+(0===e.selection.end.character?0:1)})):null!=i.line&&(s=new o.Range(i.line+1,0,i.line+1,0)));let a=i.sha??r.sha;if(null==i.branchOrTag&&null!=a&&!(0,et.kp)(a)&&0!==n.length){let[e,t]=(0,eO.op)(a,"/");if(null!=t){let r=n.find(t=>t.name===e);null!=r&&(i.branchOrTag=t,a=void 0,n=[r])}}if(null==i.sha&&null==i.branchOrTag||i.pickBranchOrTag){let e;if(i.pickBranchOrTag||(e=await this.container.git.getBranch(r.repoPath)),e?.upstream==null){let e=await (0,ei.m)(r.repoPath,i.clipboard?`Copy Remote File URL From${(0,eO.eu)(p.or.Dot,2,2)}${r.relativePath}`:`Open File on Remote From${(0,eO.eu)(p.or.Dot,2,2)}${r.relativePath}`,`Choose a branch or tag to ${i.clipboard?"copy":"open"} the file revision from`,{allowRevisions:!0,autoPick:!0,filter:{branches:e=>e.remote||null!=e.upstream},picked:i.branchOrTag,sort:{branches:{current:!0,orderBy:"date:desc"},tags:{orderBy:"date:desc"}}});if(null==e)return;if("branch"===e.refType){if(e.remote){i.branchOrTag=(0,m.ak)(e.name);let t=(0,m.IB)(e.name),r=n.find(e=>e.name===t);null!=r&&(n=[r])}else i.branchOrTag=e.name;a=void 0}else"tag"===e.refType?(i.branchOrTag=e.ref,a=void 0):(i.branchOrTag=void 0,a=e.ref)}else i.branchOrTag=e.name}await (0,b.gf)(p.eq.OpenOnRemote,{resource:{type:null==a?ek.o.File:ek.o.Revision,branchOrTag:i.branchOrTag??"HEAD",fileName:r.relativePath,range:s,sha:a??void 0},repoPath:r.repoPath,remotes:n,clipboard:i.clipboard})}catch(e){S.YJ.error(e,"OpenFileOnRemoteCommand"),(0,y.qC)("Unable to open file on remote provider")}}}};t6=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?t4(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&t2(t,i,o),o})([(0,b.GQ)()],t6),n(9735);var t3=Object.defineProperty,t8=Object.getOwnPropertyDescriptor;let t7=class extends E.qg{constructor(e){super(p.eq.OpenFileAtRevisionFrom),this.container=e}async execute(e,t,i){if(null==(t=(0,E.sZ)(t,e)))return;let r=await g.wv.fromUri(t);if(!r.repoPath){(0,y._0)("Unable to open file revision");return}if(null==(i={...i}).line&&(i.line=e?.selection.active.line??0),null==i.reference){if(i?.stash){let e=this.container.git.getRelativePath(r,r.repoPath),t=`Open Changes with Stash${(0,eO.eu)(p.or.Dot,2,2)}`,s=await (0,eT.U)(this.container.git.getStash(r.repoPath),`${t}${r.getFormattedFileName({truncateTo:p.kN-t.length})}`,"Choose a stash to compare with",{filter:t=>t.files?.some(t=>t.path===e||t.originalPath===e)??!0});if(null==s)return;i.reference=s}else{let e=`Open File at Branch or Tag${(0,eO.eu)(p.or.Dot,2,2)}`,t=await (0,ei.m)(r.repoPath,`${e}${r.getFormattedFileName({truncateTo:p.kN-e.length})}`,"Choose a branch or tag to open the file revision from",{allowRevisions:!0,keyboard:{keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await (0,ed.Av)(this.container.git.getRevisionUri(t.ref,r.fsPath,r.repoPath),{annotationType:i.annotationType,line:i.line,preserveFocus:!0,preview:!0})}}});if(null==t)return;i.reference=t}}await (0,ed.Av)(this.container.git.getRevisionUri(i.reference.ref,r.fsPath,r.repoPath),{annotationType:i.annotationType,line:i.line,...i.showOptions})}};t7=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?t8(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&t3(t,i,o),o})([(0,b.GQ)()],t7);var t5=n(2152),t9=n(716),ie=Object.defineProperty,it=Object.getOwnPropertyDescriptor;let ii=class extends E.i6{constructor(e){super([p.eq.OpenOnRemote,p.eq.Deprecated_OpenInRemote]),this.container=e}async execute(e){if(e?.resource==null)return;let t="remotes"in e?e.remotes:await this.container.git.getRemotesWithProviders(e.repoPath,{sort:!0});if(null!=e.remote){let i=t.filter(t=>t.name===e.remote);t.length>0&&(t=i)}try{let i,r=function(t){return e?.clipboard?`Copy Link to ${t} for ${o}`:`Open ${t} on ${o}`};if(e.resource.type===ek.o.Branch){let[i,r]=(0,eO.op)(e.resource.branch,"/");if(null!=r){let s=t.find(e=>e.name===i);null!=s&&(e.resource.branch=r,t=[s])}}else if(e.resource.type===ek.o.Revision){let{commit:t,fileName:i}=e.resource;if(null!=t){let r=await t.findFile(i);r?.status==="D"?e.resource.sha=await this.container.git.resolveReference(t.repoPath,`${t.sha}^`,i):e.resource.sha=t.sha}}let s=(0,t5.U$)(t),o=s?.length?s[0].name:"Remote",n={autoPick:"default",clipboard:e.clipboard,setDefault:!0},a=`Choose which remote to ${e.clipboard?"copy the link for":"open on"}`;switch(e.resource.type){case ek.o.Branch:i=`${r("Branch")}${(0,eO.eu)(p.or.Dot,2,2)}${e.resource.branch}`;break;case ek.o.Branches:i=r("Branches");break;case ek.o.Commit:i=`${r("Commit")}${(0,eO.eu)(p.or.Dot,2,2)}${(0,et.c5)(e.resource.sha)}`;break;case ek.o.Comparison:i=`${r("Comparison")}${(0,eO.eu)(p.or.Dot,2,2)}${(0,et._u)(e.resource.base,e.resource.compare,e.resource.notation??"...")}`;break;case ek.o.CreatePullRequest:n.autoPick=!0,n.setDefault=!1,i=`${e.clipboard?`Copy Create Pull Request Link for ${o}`:`Create Pull Request on ${o}`}${(0,eO.eu)(p.or.Dot,2,2)}${e.resource.base?.branch?(0,et._u)(e.resource.base.branch,e.resource.compare.branch,"..."):e.resource.compare.branch}`,a=`Choose which remote to ${e.clipboard?"copy the create pull request link for":"create the pull request on"}`;break;case ek.o.File:i=`${r("File")}${(0,eO.eu)(p.or.Dot,2,2)}${e.resource.fileName}`;break;case ek.o.Repo:i=r("Repository");break;case ek.o.Revision:i=`${r("File")}${(0,eO.eu)(p.or.Dot,2,2)}${(0,et.c5)(e.resource.sha)}${(0,eO.eu)(p.or.Dot,1,1)}${e.resource.fileName}`}let l=await (0,t9.an)(i,a,e.resource,t,n);await l?.execute()}catch(e){S.YJ.error(e,"OpenOnRemoteCommand"),(0,y.qC)("Unable to open in remote provider")}}};ii=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?it(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ie(t,i,o),o})([(0,b.GQ)()],ii);var ir=n(1864),is=Object.defineProperty,io=Object.getOwnPropertyDescriptor;let ia=class extends E.i6{constructor(e){super([p.eq.OpenIssueOnRemote,p.eq.CopyRemoteIssueUrl,p.eq.OpenAutolinkUrl,p.eq.CopyAutolinkUrl]),this.container=e}preExecute(e,t){return"viewItem"===e.type&&e.node instanceof ir.K&&(t={...t,issue:{url:e.node.item.url},clipboard:e.command===p.eq.CopyRemoteIssueUrl||e.command===p.eq.CopyAutolinkUrl}),this.execute(t)}async execute(e){e.clipboard?await o.env.clipboard.writeText(e.issue.url):o.env.openExternal(o.Uri.parse(e.issue.url))}};ia=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?io(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&is(t,i,o),o})([(0,b.GQ)()],ia);var il=n(5804),ih=Object.defineProperty,ic=Object.getOwnPropertyDescriptor;let iu=class extends E.i6{constructor(e){super([p.eq.OpenPullRequestOnRemote,p.eq.CopyRemotePullRequestUrl]),this.container=e}preExecute(e,t){return"viewItem"===e.type&&e.node instanceof il.c&&(t={...t,pr:{url:e.node.pullRequest.url},clipboard:e.command===p.eq.CopyRemotePullRequestUrl}),this.execute(t)}async execute(e){if(e?.pr==null){if(e?.repoPath==null||e?.ref==null)return;let t=await this.container.git.getBestRemoteWithIntegration(e.repoPath);if(null==t)return;let i=this.container.integrations.getByRemote(t);if(null==i)return;let r=await i.getPullRequestForCommit(t.provider.repoDesc,e.ref);if(null==r){o.window.showInformationMessage(`No pull request associated with '${(0,et.c5)(e.ref)}'`);return}(e={...e}).pr=r}e.clipboard?await o.env.clipboard.writeText(e.pr.url):o.env.openExternal(o.Uri.parse(e.pr.url))}};iu=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ic(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ih(t,i,o),o})([(0,b.GQ)()],iu);var id=Object.defineProperty,ip=Object.getOwnPropertyDescriptor;let ig=class extends E.qg{constructor(e){super([p.eq.OpenRepoOnRemote,p.eq.Deprecated_OpenRepoInRemote,p.eq.CopyRemoteRepositoryUrl]),this.container=e}preExecute(e,t){return(0,E.W)(e)&&(t={...t,remote:e.node.remote.name}),e.command===p.eq.CopyRemoteRepositoryUrl&&(t={...t,clipboard:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r=null!=(t=(0,E.sZ)(t,e))?await g.wv.fromUri(t):void 0,s=(await G.us(r,e,i?.clipboard?"Choose which repository to copy the url from":"Choose which repository to open on remote"))?.path;if(s)try{await (0,b.gf)(p.eq.OpenOnRemote,{resource:{type:ek.o.Repo},repoPath:s,remote:i?.remote,clipboard:i?.clipboard})}catch(e){S.YJ.error(e,"OpenRepoOnRemoteCommand"),(0,y.qC)("Unable to open repository on remote provider")}}};ig=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ip(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&id(t,i,o),o})([(0,b.GQ)()],ig);var im=Object.defineProperty,iw=Object.getOwnPropertyDescriptor;let iv=class extends E.qg{constructor(e){super([p.eq.OpenRevisionFile,p.eq.OpenRevisionFileInDiffLeft,p.eq.OpenRevisionFileInDiffRight]),this.container=e}async execute(e,t,i){if(null==(t=(0,E.sZ)(t,e)))return;let r=await g.wv.fromUri(t);null==(i={...i}).line&&(i.line=e?.selection.active.line??0);try{if(null==i.revisionUri){if(r?.sha){let e=await this.container.git.getCommit(r.repoPath,r.sha);i.revisionUri=e?.file?.status==="D"?this.container.git.getRevisionUri(await e.getPreviousSha()??eQ.E1,e.file,e.repoPath):this.container.git.getRevisionUri(r)}else i.revisionUri=this.container.git.getRevisionUri(r)}await (0,ed.Av)(i.revisionUri,{annotationType:i.annotationType,line:i.line,...i.showOptions})}catch(e){S.YJ.error(e,"OpenRevisionFileCommand"),(0,y.qC)("Unable to open file revision")}}};iv=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?iw(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&im(t,i,o),o})([(0,b.GQ)()],iv);var iy=Object.defineProperty,ib=Object.getOwnPropertyDescriptor;let iC=class extends E.qg{constructor(e){super([p.eq.OpenWorkingFile,p.eq.OpenWorkingFileInDiffLeft,p.eq.OpenWorkingFileInDiffRight]),this.container=e}async execute(e,t,i){null==(i={...i}).line&&(i.line=e?.selection.active.line);try{if(null==i.uri){if(t=(0,E.sZ)(t,e),null==t)return}else t=i.uri;if(i.uri=await g.wv.fromUri(t),(0,g.my)(i.uri)&&i.uri.sha){let e=await this.container.git.getWorkingUri(i.uri.repoPath,i.uri);if(void 0===e){o.window.showWarningMessage("Unable to open working file. File could not be found in the working tree");return}i.uri=new g.wv(e,i.uri.repoPath)}void 0!==i.line&&0!==i.line&&(void 0===i.showOptions&&(i.showOptions={}),i.showOptions.selection=new o.Range(i.line,0,i.line,0));let r=await (0,q.fL)(i.uri,{...i.showOptions,throwOnError:!0});if(void 0===i.annotationType)return;await this.container.fileAnnotations.show(r,i.annotationType,{selection:{line:i.line}})}catch(e){S.YJ.error(e,"OpenWorkingFileCommand"),(0,y.qC)("Unable to open working file")}}};iC=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ib(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iy(t,i,o),o})([(0,b.GQ)()],iC);var iA=n(4532),ik=n(2216),iP=Object.defineProperty,iS=Object.getOwnPropertyDescriptor,iR=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?iS(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iP(t,i,o),o};let CreatePatchCommandBase=class CreatePatchCommandBase extends E.i6{constructor(e,t){super(t),this.container=e}async preExecute(e,t){if(null==t){if("scm-states"===e.type){let i;let r=new Map,s=new Set;for(let t of e.scmResourceStates){i??=await this.container.git.getOrOpenRepository(t.resourceUri),s.add(t.resourceUri.toString());let e=r.get(t.resourceGroupType);null==e?(e=[],r.set(t.resourceGroupType,e)):e.push(t)}t={repoPath:i?.path,to:1==r.size&&r.has(tr.Index)?eQ.QD:eQ.Oy,from:"HEAD",uris:[...(0,ep.kH)(s,e=>o.Uri.parse(e))]}}else if("scm-groups"===e.type){let i=e.scmResourceGroups[0];if(!i?.resourceStates?.length)return;let r=await this.container.git.getOrOpenRepository(i.resourceStates[0].resourceUri);t={repoPath:r?.path,to:"index"===i.id?eQ.QD:eQ.Oy,from:"HEAD"}}else"viewItem"===e.type&&((0,E.k7)(e)?(t={repoPath:e.node.commit.repoPath,to:e.node.commit.ref,from:`${e.node.commit.ref}^`},(0,E.CO)(e)&&(t.uris=[e.node.uri])):(0,E.A$)(e)&&(t={repoPath:e.node.uri.fsPath,to:e.node.compareRef.ref,from:e.node.compareWithRef.ref}))}return this.execute(t)}async getDiff(e,t){let i;if(t?.repoPath!=null&&(i=this.container.git.getRepository(t.repoPath)),null!=(i??=await (0,G.a0)(e)))return this.container.git.getDiff(i.uri,t?.to??eQ.Oy,t?.from??"HEAD",t?.uris?.length?{uris:t.uris}:void 0)}};let iD=class extends CreatePatchCommandBase{constructor(e){super(e,p.eq.CreatePatch)}async execute(e){let t=await this.getDiff("Create Patch",e);if(null==t)return;let i=await o.workspace.openTextDocument({content:t.contents,language:"diff"});await o.window.showTextDocument(i)}};iD=iR([(0,b.GQ)()],iD);let i$=class extends CreatePatchCommandBase{constructor(e){super(e,p.eq.CopyPatchToClipboard)}async execute(e){let t=await this.getDiff("Copy as Patch",e);null!=t&&(await o.env.clipboard.writeText(t.contents),o.window.showInformationMessage("Copied patch — use 'Apply Copied Patch' in another window to apply it"))}};i$=iR([(0,b.GQ)()],i$);let i_=class extends E.i6{constructor(e){super(p.eq.ApplyPatchFromClipboard),this.container=e}async execute(){let e=await o.env.clipboard.readText(),t=this.container.git.highlander;if(!(e.length&&await this.container.git.validatePatch(t?.uri??o.Uri.file(""),e))){o.window.showWarningMessage("No valid patch found in the clipboard");return}if(null!=(t??=await (0,G.a0)("Apply Copied Patch")))try{let i=await this.container.git.createUnreachableCommitForPatch(t.uri,e,"HEAD","Pasted Patch");if(null==i)return;await this.container.git.applyUnreachableCommitForPatch(t.uri,i.sha,{stash:!1}),o.window.showInformationMessage("Patch applied successfully")}catch(e){e instanceof iA.mw?e.reason===iA.Mp.AppliedWithConflicts?o.window.showWarningMessage("Patch applied with conflicts"):o.window.showErrorMessage(e.message):o.window.showErrorMessage(`Unable apply patch: ${e.message}`)}}};i_=iR([(0,b.GQ)()],i_);let iI=class extends E.i6{constructor(e){super([p.eq.CreateCloudPatch,p.eq.ShareAsCloudPatch]),this.container=e}preExecute(e,t){return null==t&&"viewItem"===e.type&&((0,E.k7)(e)?t={repoPath:e.node.commit.repoPath,to:e.node.commit.ref}:(0,E.A$)(e)&&(t={repoPath:e.node.uri.fsPath,to:e.node.compareRef.ref,from:e.node.compareWithRef.ref})),this.execute(t)}async execute(e){if(e?.repoPath==null)return(0,ik.A)({mode:"create"});let t=this.container.git.getRepository(e.repoPath);if(null==t)return(0,ik.A)({mode:"create"});let i=await iO(this.container,t,e);return null==i?(0,ik.A)({mode:"create",create:{repositories:[t]}}):(0,ik.A)({mode:"create",create:i})}};iI=iR([(0,b.GQ)()],iI);let iT=class extends E.qg{constructor(e){super(p.eq.OpenPatch),this.container=e}async execute(e){let t;if(e?.document?.languageId==="diff")t=e.document;else{let e=await o.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{Patches:["diff","patch"]},openLabel:"Open Patch",title:"Open Patch File"}),i=e?.[0];if(null==i)return;t=await o.workspace.openTextDocument(i),await o.window.showTextDocument(t)}let i={draftType:"local",patch:{type:"local",uri:t.uri,contents:t.getText()}};(0,ik.A)({mode:"view",draft:i})}};iT=iR([(0,b.GQ)()],iT);let iF=class extends E.i6{constructor(e){super(p.eq.OpenCloudPatch),this.container=e}async execute(e){if(e?.id==null&&e?.draft==null){o.window.showErrorMessage("Cannot open Cloud Patch; no patch or patch id provided");return}try{let t=e?.draft??await this.container.drafts.getDraft(e?.id);(0,ik.A)({mode:"view",draft:t})}catch(t){S.YJ.error(t,"OpenCloudPatchCommand"),o.window.showErrorMessage(`Unable to open Cloud Patch '${e.id}'`)}}};async function iO(e,t,i){if(null==i.to)return;let r=i.to??"HEAD",s={type:"revision",repository:{name:t.name,path:t.path,uri:t.uri.toString()},files:void 0,revision:{to:r,from:i.from??`${r}^`}},o={changes:[s]},n=await e.git.getCommit(t.uri,r);if(null==n)return;let a=n.message.trim(),l=a.indexOf("\n");if(l<0?o.title=a:(o.title=a.substring(0,l),o.description=a.substring(l+1).trim()),null==i.from){if(null==n.files)return;s.files=[...n.files]}else{let n=await e.git.getDiff(t.uri,r,i.from);if(null==n)return;let a=await e.git.getDiffFiles(t.uri,n.contents);if(a?.files==null)return;if(s.files=a.files,o.title=`Comparing ${(0,et.c5)(i.to)} with ${(0,et.c5)(i.from)}`,!(0,et.kp)(i.to)){let r=await e.git.getCommit(t.uri,i.to);null!=r&&(s.revision.to=r.sha)}if(!(0,et.kp)(i.from)){let r=await e.git.getCommit(t.uri,i.from);null!=r&&(s.revision.from=r.sha)}}return o}iF=iR([(0,b.GQ)()],iF);var ix=Object.defineProperty,iE=Object.getOwnPropertyDescriptor,iB=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?iE(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ix(t,i,o),o};let iU=class extends E.i6{constructor(e){super(p.eq.DisableRebaseEditor),this.container=e}execute(){return this.container.rebaseEditor.setEnabled(!1)}};iU=iB([(0,b.GQ)()],iU);let iW=class extends E.i6{constructor(e){super(p.eq.EnableRebaseEditor),this.container=e}execute(){return this.container.rebaseEditor.setEnabled(!0)}};iW=iB([(0,b.GQ)()],iW);var iN=Object.defineProperty,iq=Object.getOwnPropertyDescriptor;let iL=class extends E.i6{constructor(e){super(p.eq.RefreshHover),this.container=e}async execute(){await (0,b.CA)("editor.action.showHover")}};iL=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?iq(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iN(t,i,o),o})([(0,b.GQ)()],iL),n(7288);var iM=Object.defineProperty,iQ=Object.getOwnPropertyDescriptor,iG=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?iQ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iM(t,i,o),o};let iY=class extends E.i6{constructor(e){super(p.eq.FetchRepositories),this.container=e}async execute(){return(0,x.s)({command:"fetch",state:{repos:this.container.git.openRepositories}})}};iY=iG([(0,b.GQ)()],iY);let iV=class extends E.i6{constructor(e){super(p.eq.PullRepositories),this.container=e}async execute(){return(0,x.s)({command:"pull",state:{repos:this.container.git.openRepositories}})}};iV=iG([(0,b.GQ)()],iV);let iz=class extends E.i6{constructor(e){super(p.eq.PushRepositories),this.container=e}async execute(){return(0,x.s)({command:"push",state:{repos:this.container.git.openRepositories}})}};iz=iG([(0,b.GQ)()],iz);var iH=n(5576),ij=Object.defineProperty,iJ=Object.getOwnPropertyDescriptor,iK=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?iJ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ij(t,i,o),o};let iZ=class extends E.i6{constructor(e){super(p.eq.ResetAIKey),this.container=e}execute(){this.container.ai.reset()}};iZ=iK([(0,b.GQ)()],iZ);let iX=class extends E.i6{constructor(e){super(p.eq.ResetAvatarCache),this.container=e}execute(){(0,iH.ic)("all")}};iX=iK([(0,b.GQ)()],iX);let i0=class extends E.i6{constructor(e){super(p.eq.ResetSuppressedWarnings),this.container=e}async execute(){await C.i.update("advanced.messages",void 0,o.ConfigurationTarget.Global)}};i0=iK([(0,b.GQ)()],i0);let i1=class extends E.i6{constructor(e){super(p.eq.ResetTrackedUsage),this.container=e}async execute(){await this.container.usage.reset()}};i1=iK([(0,b.GQ)()],i1);var i2=Object.defineProperty,i4=Object.getOwnPropertyDescriptor;let i6=class extends E.i6{constructor(e){super(p.eq.ResetViewsLayout),this.container=e}async execute(){for(let[e,t]of p.Qd){try{await (0,b.CA)("vscode.moveViews",{viewIds:t.map(e=>`gitlens.views.${e}`),destinationId:e})}catch{}e.includes("gitlens")&&await (0,b.CA)(`${e}.resetViewContainerLocation`)}}};i6=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?i4(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&i2(t,i,o),o})([(0,b.GQ)()],i6);var i3=n(1644),i8=Object.defineProperty,i7=Object.getOwnPropertyDescriptor;let i5=class extends E.i6{constructor(e){super([p.eq.SearchCommits,p.eq.SearchCommitsInView]),this.container=e}preExecute(e,t){return e.command===p.eq.SearchCommitsInView?(t={...t}).showResultsInSideBar=!0:"viewItem"===e.type&&((t={...t}).showResultsInSideBar=!0,e.node instanceof i3.A&&(t.repoPath=e.node.repoPath,t.search=e.node.search,t.prefillOnly=!0),(0,E.Ip)(e)&&(t.repoPath=e.node.repo.path)),this.execute(t)}async execute(e){await (0,x.s)({command:"search",prefillOnly:e?.prefillOnly,state:{repo:e?.repoPath,...e?.search,showResultsInSideBar:C.i.get("gitCommands.search.showResultsInSideBar")??e?.showResultsInSideBar,openPickInView:e?.openPickInView??!1}})}};i5=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?i7(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&i8(t,i,o),o})([(0,b.GQ)()],i5),n(6552);var i9=Object.defineProperty,re=Object.getOwnPropertyDescriptor;let rt=class extends E.i6{constructor(e){super(p.eq.ShowLastQuickPick),this.container=e}execute(){let e=(0,E.OA)();if(void 0===e)return Promise.resolve(void 0);try{return o.commands.executeCommand(e.command,...e.args)}catch(e){return S.YJ.error(e,"ShowLastQuickPickCommand"),(0,y.qC)("Unable to show last quick pick")}}};rt=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?re(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&i9(t,i,o),o})([(0,b.GQ)()],rt);var ri=Object.defineProperty,rr=Object.getOwnPropertyDescriptor;let rs=class extends E.i6{constructor(e){super(p.eq.OpenOnlyChangedFiles),this.container=e}async execute(e){e={...e};try{let t,i;if(null==e.uris){let t=await (0,G.a0)("Open Changed & Close Unchanged Files");if(null==t)return;let i=await this.container.git.getStatusForRepo(t.uri);if(null==i){o.window.showWarningMessage("Unable to open changed & close unchanged files");return}e.uris=(0,ts.Gs)(i.files,e=>"D"!==e.status?e.uri:void 0)}let r=0===e.uris.length,s=new Set(e.uris);for(let n of o.window.tabGroups.all)for(let a of n.tabs){if(r){o.window.tabGroups.close(a,!0);continue}i=a.input instanceof o.TabInputText||a.input instanceof o.TabInputCustom||a.input instanceof o.TabInputNotebook?a.input.uri:a.input instanceof o.TabInputTextDiff||a.input instanceof o.TabInputNotebookDiff?a.input.modified:void 0,null!=i&&(t=e.uris.find(e=>Y.K.equals(e,i)),null!=t?s.delete(t):o.window.tabGroups.close(a,!0))}s.size>0&&(0,q.i3)([...s])}catch(e){S.YJ.error(e,"OpenOnlyChangedFilesCommand"),(0,y.qC)("Unable to open changed & close unchanged files")}}};rs=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ri(t,i,o),o})([(0,b.GQ)()],rs);var ro=Object.defineProperty,rn=Object.getOwnPropertyDescriptor;let ra=class extends E.yi{constructor(e){super([p.eq.ShowQuickBranchHistory,p.eq.ShowQuickCurrentBranchHistory]),this.container=e}preExecute(e,t){return e.command===p.eq.ShowQuickCurrentBranchHistory&&((t={...t}).branch="HEAD"),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r;let s=null!=(t=(0,E.sZ)(t,e))?await g.wv.fromUri(t):void 0,o=i?.repoPath??s?.repoPath??this.container.git.highlander?.path;return null!=o&&(i?.branch!=null?r="HEAD"===i.branch?"HEAD":(0,et.op)(i.branch,o,{refType:"branch",name:i.branch,remote:!1}):i?.tag!=null&&(r=(0,et.op)(i.tag,o,{refType:"tag",name:i.tag}))),(0,x.s)({command:"log",state:null!=o?{repo:o,reference:r}:{}})}};ra=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rn(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ro(t,i,o),o})([(0,b.GQ)()],ra),n(884),n(3840);var rl=Object.defineProperty,rh=Object.getOwnPropertyDescriptor;let rc=class extends E.yi{constructor(e){super([p.eq.OpenFileHistory,p.eq.OpenFolderHistory,p.eq.ShowQuickFileHistory,p.eq.QuickOpenFileHistory,p.eq.Deprecated_ShowFileHistoryInView]),this.container=e}preExecute(e,t){return(e.command===p.eq.OpenFileHistory||e.command===p.eq.OpenFolderHistory||e.command===p.eq.Deprecated_ShowFileHistoryInView)&&((t={...t}).showInSideBar=!0),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=(0,E.sZ)(t,e)))return;let r=await g.wv.fromUri(t);if(i?.showInSideBar){await this.container.fileHistoryView.showHistoryForUri(r);return}await (0,x.s)({command:"log",state:r?.repoPath!=null?{repo:r.repoPath,reference:i?.reference??"HEAD",fileName:r.relativePath}:{}})}};rc=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rh(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rl(t,i,o),o})([(0,b.GQ)()],rc);var ru=Object.defineProperty,rd=Object.getOwnPropertyDescriptor;let rp=class extends E.i6{constructor(e){super(p.eq.ShowQuickRepoStatus),this.container=e}async execute(e){return(0,x.s)({command:"status",state:{repo:e?.repoPath}})}};rp=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rd(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ru(t,i,o),o})([(0,b.GQ)()],rp);var rg=Object.defineProperty,rm=Object.getOwnPropertyDescriptor;let rf=class extends E.i6{constructor(e){super(p.eq.ShowQuickStashList),this.container=e}execute(e){return(0,x.s)({command:"stash",state:{subcommand:"list",repo:e?.repoPath}})}};rf=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rm(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rg(t,i,o),o})([(0,b.GQ)()],rf);var rw=Object.defineProperty,rv=Object.getOwnPropertyDescriptor;let ry=class extends E.i6{constructor(e){super([p.eq.ShowBranchesView,p.eq.ShowCommitDetailsView,p.eq.ShowCommitsView,p.eq.ShowContributorsView,p.eq.ShowDraftsView,p.eq.ShowFileHistoryView,p.eq.ShowGraphView,p.eq.ShowHomeView,p.eq.ShowAccountView,p.eq.ShowLineHistoryView,p.eq.ShowRemotesView,p.eq.ShowRepositoriesView,p.eq.ShowSearchAndCompareView,p.eq.ShowStashesView,p.eq.ShowTagsView,p.eq.ShowTimelineView,p.eq.ShowWorktreesView,p.eq.ShowWorkspacesView]),this.container=e}preExecute(e,...t){return this.execute(e,...t)}async execute(e,...t){switch(e.command){case p.eq.ShowBranchesView:return this.container.branchesView.show();case p.eq.ShowCommitDetailsView:return this.container.commitDetailsView.show();case p.eq.ShowCommitsView:return this.container.commitsView.show();case p.eq.ShowContributorsView:return this.container.contributorsView.show();case p.eq.ShowDraftsView:return this.container.draftsView.show();case p.eq.ShowFileHistoryView:return this.container.fileHistoryView.show();case p.eq.ShowHomeView:return this.container.homeView.show();case p.eq.ShowAccountView:return this.container.accountView.show();case p.eq.ShowGraphView:return this.container.graphView.show(void 0,...t);case p.eq.ShowLineHistoryView:return this.container.lineHistoryView.show();case p.eq.ShowRemotesView:return this.container.remotesView.show();case p.eq.ShowRepositoriesView:return this.container.repositoriesView.show();case p.eq.ShowSearchAndCompareView:return this.container.searchAndCompareView.show();case p.eq.ShowStashesView:return this.container.stashesView.show();case p.eq.ShowTagsView:return this.container.tagsView.show();case p.eq.ShowTimelineView:return this.container.timelineView.show();case p.eq.ShowWorktreesView:return this.container.worktreesView.show();case p.eq.ShowWorkspacesView:return this.container.workspacesView.show()}return Promise.resolve(void 0)}};ry=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rv(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rw(t,i,o),o})([(0,b.GQ)()],ry);var rb=n(1148),rC=Object.defineProperty,rA=Object.getOwnPropertyDescriptor;let rk=class extends E.i6{constructor(e){super(p.eq.StashApply),this.container=e}async preExecute(e,t){return(0,E.k7)(e)?(null==e.node.commit.message&&await e.node.commit.ensureFullDetails(),t={...t,stashItem:e.node.commit}):(0,E.Ip)(e)&&(t={...t,repoPath:e.node.repo.path}),this.execute(t)}async execute(e){return e?.deleteAfter?(0,rb.sr)(e?.repoPath??e?.stashItem?.repoPath,e?.stashItem):(0,rb.iQ)(e?.repoPath??e?.stashItem?.repoPath,e?.stashItem)}};rk=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rA(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rC(t,i,o),o})([(0,b.GQ)()],rk);var rP=n(7892),rS=Object.defineProperty,rR=Object.getOwnPropertyDescriptor;let rD=class extends E.i6{constructor(e){super([p.eq.StashSave,p.eq.StashSaveFiles]),this.container=e}async preExecute(e,t){if((0,E.M9)(e))(t={...t}).repoPath=e.node.file.repoPath??e.node.repoPath,t.uris=[g.wv.fromFile(e.node.file,t.repoPath)];else if((0,E.Ip)(e))(t={...t}).repoPath=e.node.repo.path;else if((0,E.Y1)(e))(t={...t}).repoPath=e.node.repoPath;else if("scm-states"===e.type){let i;t={...t};let r=!1,s=!1,o=[];for(let t of e.scmResourceStates)o.push(t.resourceUri),t.type===tt.UNTRACKED&&(s=!0),t.resourceGroupType===tr.Index?(r=!0,null==i&&(i=!0)):i=!1;let n=await this.container.git.getOrOpenRepository(o[0]);t.repoPath=n?.path,t.onlyStaged=null!=n&&!!i&&await n.supports(rP.B.StashOnlyStaged),null!=t.keepStaged||r||(t.keepStaged=!0),t.includeUntracked=s,t.uris=o}else if("scm-groups"===e.type){let i;t={...t};let r=!1,s=!1,o=[],n=[];for(let t of e.scmResourceGroups){for(let e of t.resourceStates)o.push(e.resourceUri),e.type===tt.UNTRACKED&&(s=!0);"index"===t.id?(r=!0,null==i&&(i=!0),n.push(...t.resourceStates.map(e=>e.resourceUri))):i=!1}let a=await this.container.git.getOrOpenRepository(o[0]);t.repoPath=a?.path,t.onlyStaged=null!=a&&!!i&&await a.supports(rP.B.StashOnlyStaged),null!=t.keepStaged||r||(t.keepStaged=!0),t.includeUntracked=s,t.onlyStaged?t.onlyStagedUris=n:t.uris=o}return this.execute(t)}execute(e){return(0,rb.qY)(e?.repoPath,e?.uris,e?.message,e?.includeUntracked,e?.keepStaged,e?.onlyStaged,e?.onlyStagedUris)}};rD=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rR(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rS(t,i,o),o})([(0,b.GQ)()],rD);var r$=Object.defineProperty,r_=Object.getOwnPropertyDescriptor;let rI=class extends E.i6{constructor(e){super(p.eq.SwitchAIModel),this.container=e}async execute(){await this.container.ai.switchProvider()}};async function rT(){let e=C.i.get("modes");if(null==e)return;let t=Object.keys(e);if(0===t.length)return;let i=C.i.get("mode.active"),r=t.map(t=>{let r=e[t];return{label:`${i===t?"$(check)  ":"     "}${r.name} mode`,description:r.description?`\xa0${p.or.Dash}\xa0 ${r.description}`:"",key:t}});return i&&null!=e[i]&&r.unshift({label:`Exit ${e[i].name} mode`,key:void 0}),await o.window.showQuickPick(r,{placeHolder:"select a GitLens mode to enter"})}rI=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?r_(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&r$(t,i,o),o})([(0,b.GQ)()],rI);var rF=n(3e3),rO=Object.defineProperty,rx=Object.getOwnPropertyDescriptor,rE=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rx(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rO(t,i,o),o};let rB=class extends E.i6{constructor(e){super(p.eq.SwitchMode),this.container=e}async execute(){let e=(0,rF.b1)(),t=await rT();if(void 0===t)return;(0,rF._W)(e,` \u2022 mode=${t.key??""}`);let i=C.i.get("mode.active");if(i!==t.key){if(null!=i&&0!==i.length){let e=C.i.get("modes"),r=e?.[i].annotations;null!=r&&r!==(null!=t.key?e?.[t.key].annotations:void 0)&&await this.container.fileAnnotations.clearAll()}await C.i.update("mode.active",t.key,o.ConfigurationTarget.Global)}}};rE([(0,$.Yz)({args:!1,scoped:!0,singleLine:!0,timed:!1})],rB.prototype,"execute",1),rB=rE([(0,b.GQ)()],rB);let rU=class extends E.i6{constructor(e){super(p.eq.ToggleReviewMode),this.container=e}async execute(){let e=C.i.get("modes");if(null==e||!Object.keys(e).includes("review"))return;let t="review"===C.i.get("mode.active")?void 0:"review";await C.i.update("mode.active",t,o.ConfigurationTarget.Global)}};rE([(0,$.Yz)({args:!1,singleLine:!0,timed:!1})],rU.prototype,"execute",1),rU=rE([(0,b.GQ)()],rU);let rW=class extends E.i6{constructor(e){super(p.eq.ToggleZenMode),this.container=e}async execute(){let e=C.i.get("modes");if(null==e||!Object.keys(e).includes("zen"))return;let t="zen"===C.i.get("mode.active")?void 0:"zen";await C.i.update("mode.active",t,o.ConfigurationTarget.Global)}};rE([(0,$.Yz)({args:!1,singleLine:!0,timed:!1})],rW.prototype,"execute",1),rW=rE([(0,b.GQ)()],rW);var rN=Object.defineProperty,rq=Object.getOwnPropertyDescriptor;let rL=class extends E.i6{constructor(e){super(p.eq.ToggleCodeLens),this.container=e}execute(){this.container.codeLens.toggleCodeLens()}};rL=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rq(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rN(t,i,o),o})([(0,b.GQ)()],rL);var rM=Object.defineProperty,rQ=Object.getOwnPropertyDescriptor,rG=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rQ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rM(t,i,o),o};let rY=class extends E.gd{constructor(e){super([p.eq.ClearFileAnnotations,p.eq.ComputingFileAnnotations]),this.container=e}async execute(e,t,i){if(null!=e&&!(0,q.sj)(e)&&null!=i&&!Y.K.equals(i,e.document.uri)){let t=o.window.visibleTextEditors.find(e=>Y.K.equals(i,e.document.uri));null!=t&&(e=t)}try{await this.container.fileAnnotations.clear(e)}catch(e){S.YJ.error(e,"ClearFileAnnotationsCommand"),(0,y.qC)("Unable to clear file annotations")}}};rY=rG([(0,b.GQ)()],rY);let rV=class extends E.qg{constructor(e){super([p.eq.ToggleFileBlame,p.eq.ToggleFileBlameInDiffLeft,p.eq.ToggleFileBlameInDiffRight]),this.container=e}execute(e,t,i){return rj(this.container,e,t,{...i,type:"blame"})}};rV=rG([(0,b.GQ)()],rV);let rz=class extends E.qg{constructor(e){super(p.eq.ToggleFileChanges),this.container=e}execute(e,t,i){return rj(this.container,e,t,{...i,type:"changes"})}};rz=rG([(0,b.GQ)()],rz);let rH=class extends E.qg{constructor(e){super([p.eq.ToggleFileHeatmap,p.eq.ToggleFileHeatmapInDiffLeft,p.eq.ToggleFileHeatmapInDiffRight]),this.container=e}execute(e,t,i){return rj(this.container,e,t,{...i,type:"heatmap"})}};async function rj(e,t,i,r){if(null!=t&&!(0,q.sj)(t)&&null!=i&&!Y.K.equals(i,t.document.uri)){let e=o.window.visibleTextEditors.find(e=>Y.K.equals(i,e.document.uri));null!=e&&(t=e)}try{r={type:"blame",...r},await e.fileAnnotations.toggle(t,r.type,{selection:r.context?.selection??{line:t?.selection.active.line},...r.context},r.on)}catch(e){S.YJ.error(e,"ToggleFileAnnotationsCommand"),(0,y.qC)(`Unable to toggle file ${r.type} annotations`)}}rH=rG([(0,b.GQ)()],rH);var rJ=Object.defineProperty,rK=Object.getOwnPropertyDescriptor;let rZ=class extends E.qg{constructor(e){super(p.eq.ToggleLineBlame),this.container=e}async execute(e,t){try{await this.container.lineAnnotations.toggle(e)}catch(e){S.YJ.error(e,"ToggleLineBlameCommand"),(0,y.qC)("Unable to toggle line blame annotations")}}};rZ=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rK(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rJ(t,i,o),o})([(0,b.GQ)()],rZ);var rX=Object.defineProperty,r0=Object.getOwnPropertyDescriptor;let r1=class extends E.i6{constructor(e){super(p.eq.GetStarted),this.container=e}execute(e){let t=this.container.context.extension.id;e===t&&(e=void 0),(0,q.IR)(t,e??"gitlens.welcome",void 0,!1)}};async function r2(e){let t,i;let r=e.extension.packageJSON.version,s=(0,F.op)(r,"> 2020.0.0"),n=C.i.get("defaultDateLocale"),a=(0,d.o$)(C.i.get("outputLevel"));S.YJ.configure({name:"GitLens",createChannel:function(t){let i=new S.um(o.window.createOutputChannel(t),500);return e.subscriptions.push(i),("error"===a||"warn"===a)&&(i.appendLine(`GitLens${s?" (pre-release)":""} v${r} activating in ${o.env.appName} (${o.version}) on the ${h.e6?"web":"desktop"}; language='${o.env.language}', logLevel='${a}', defaultDateLocale='${n}' (${o.env.machineId}|${o.env.sessionId})`),i.appendLine('To enable debug logging, set `"gitlens.outputLevel: "debug"` or run "GitLens: Enable Debug Logging" from the Command Palette')),i},toLoggable:function(e){return(0,g.my)(e)?`GitUri(${e.toString(!0)}${e.repoPath?` repoPath=${e.repoPath}`:""}${e.sha?` sha=${e.sha}`:""})`:e instanceof o.Uri?`Uri(${e.toString(!0)})`:(0,w.Oc)(e)||(0,m.gh)(e)||(0,f.S)(e)||(0,v.K8)(e)||(0,O.Qh)(e)?e.toString():"rootUri"in e&&e.rootUri instanceof o.Uri?`ScmRepository(rootUri=${e.rootUri.toString(!0)})`:"uri"in e&&e.uri instanceof o.Uri?`${"name"in e&&"index"in e?"WorkspaceFolder":(0,S.EZ)(e)}(uri=${e.uri.toString(!0)})`:void 0}},a,e.extensionMode===o.ExtensionMode.Development);let u=new D.Y(`GitLens${s?" (pre-release)":""} v${r}`,{log:{message:` activating in ${o.env.appName} (${o.version}) on the ${h.e6?"web":"desktop"}; language='${o.env.language}', logLevel='${a}', defaultDateLocale='${n}' (${o.env.machineId}|${o.env.sessionId})`}});if(s){let e=(0,F.K0)(r);if(new Date(e.major,e.minor-1,Number(e.patch.toString().substring(0,2))).getTime()<Date.now()-12096e5){u.stop({message:` was NOT activated because this pre-release version (${r}) has expired`}),setTimeout(y.CW,0,r);return}}o.workspace.isTrusted||(0,A.Qr)("gitlens:untrusted",!0),function(e,...t){e.globalState?.setKeysForSync([...t,p.wR.Version,p.wR.HomeViewWelcomeVisible])}(e);let $=new Storage(e),_=$.get(s?"synced:preVersion":"synced:version"),I=$.get(s?"preVersion":"version");t=null==I||null==_?_??I:1===(0,F.Oo)(_,I)?_:I,S.YJ.enabled("debug")&&(i=`syncedVersion=${_}, localVersion=${I}, previousVersion=${t}, welcome=${$.get("views:welcome:visible")}`),null==t&&$.store("views:welcome:visible",!0),C.E.configure(e),(0,k.uO)(n??o.env.language),e.subscriptions.push(C.i.onDidChange(e=>{C.i.changed(e,"defaultDateLocale")&&(0,k.uO)(C.i.get("defaultDateLocale")??o.env.language)}));let T=c.Container.create(e,$,s,r,t);(0,P.qw)(T.onReady)(()=>{e.subscriptions.push(...(0,b.SK)(T)),function(e){e.context.subscriptions.push(e.actionRunners.registerBuiltIn("createPullRequest",{label:e=>`Create Pull Request on ${e.remote?.provider?.name??"Remote"}`,run:async e=>{"createPullRequest"===e.type&&await (0,b.gf)(p.eq.CreatePullRequestOnRemote,{base:void 0,compare:e.branch.isRemote?(0,m.ak)(e.branch.name):e.branch.upstream?(0,m.ak)(e.branch.upstream):e.branch.name,remote:e.remote?.name??"",repoPath:e.repoPath})}}),e.actionRunners.registerBuiltIn("openPullRequest",{label:e=>`Open Pull Request on ${e.provider?.name??"Remote"}`,run:async e=>{"openPullRequest"===e.type&&await (0,b.gf)(p.eq.OpenPullRequestOnRemote,{pr:{url:e.pullRequest.url}})}}))}(T),function(e){e.subscriptions.push(c.Container.instance.actionRunners.registerBuiltInPartner("liveshare","hover.commands",{name:"Live Share",label:e=>"hover.commands"===e.type&&"You"!==e.commit.author.name?`$(live-share) Invite ${e.commit.author.name}${e.commit.author.presence?.statusText?` (${e.commit.author.presence?.statusText})`:""} to a Live Share Session`:"$(live-share) Start a Live Share Session",run:async e=>{if("hover.commands"!==e.type||"You"===e.commit.author.name){await (0,b.gf)(p.eq.InviteToLiveShare,{});return}await (0,b.gf)(p.eq.InviteToLiveShare,{email:e.commit.author.email})}}))}(e),o.workspace.isTrusted||e.subscriptions.push(o.workspace.onDidGrantWorkspaceTrust(()=>{(0,A.Qr)("gitlens:untrusted",void 0),T.telemetry.setGlobalAttribute("workspace.isTrusted",o.workspace.isTrusted)})),r6(T,r,s,t),$.store(s?"preVersion":"version",r),(null==_||1===(0,F.Oo)(r,_))&&$.store(s?"synced:preVersion":"synced:version",r),"debug"===a&&setTimeout(async()=>{"debug"===(0,d.o$)(C.i.get("outputLevel"))&&!T.prereleaseOrDebugging&&await (0,y.m0)()&&(0,b.gf)(p.eq.DisableDebugLogging)},6e4)}),T.debugging?((0,A.Qr)("gitlens:debugging",!0),(0,A.Qr)("gitlens:prerelease",!0)):T.prerelease&&(0,A.Qr)("gitlens:prerelease",!0),await T.ready();let x=(0,R.YX)(C.i.getAll(!0),{prefix:"config",stringify:"all"});T.telemetry.setGlobalAttributes({debugging:T.debugging,prerelease:s,install:null==t,upgrade:null!=t&&r!==t,upgradedFrom:null!=t&&r!==t?t:void 0});let E=new Api(T),B=T.mode,U=u.startTime,W=(0,l.a)(),N=u.elapsed();return u.stop({message:`activated${null!=i?`, ${i}`:""}${null!=B?`, mode: ${B.name}`:""}`}),T.telemetry.sendEvent("activate",{"activation.elapsed":N,"activation.mode":B?.name,...x},U,W),Promise.resolve(E)}function r4(){S.YJ.log("GitLens deactivating..."),c.Container.instance.deactivate()}async function r6(e,t,i,r){if(null==r){if(S.YJ.log(`GitLens first-time install; window.focused=${o.window.state.focused}`),!1===C.i.get("showWelcomeOnInstall"))return;if(o.window.state.focused)await e.storage.delete("pendingWelcomeOnFocus"),await (0,b.gf)(p.eq.ShowWelcomePage);else{await e.storage.store("pendingWelcomeOnFocus",!0);let t=o.window.onDidChangeWindowState(i=>{i.focused&&(t.dispose(),!0===e.storage.get("pendingWelcomeOnFocus")&&(e.storage.delete("pendingWelcomeOnFocus"),C.i.get("showWelcomeOnInstall")&&(0,b.gf)(p.eq.ShowWelcomePage)))});e.context.subscriptions.push(t)}return}r!==t&&S.YJ.log(`GitLens upgraded from v${r} to v${t}; window.focused=${o.window.state.focused}`);let s=(0,F.K0)(t),n=(0,F.K0)(r);if(s.major<n.major||s.major===n.major&&s.minor<n.minor)return;let a=i&&(0,F.op)(n,"< 2023.6.0800");if((s.major!==n.major||a)&&(t=a?"14":String(s.major),C.i.get("showWhatsNewAfterUpgrades"))){if(o.window.state.focused)await e.storage.delete("pendingWhatsNewOnFocus"),await (0,y.Yf)(t);else{await e.storage.store("pendingWhatsNewOnFocus",!0);let i=o.window.onDidChangeWindowState(r=>{r.focused&&(i.dispose(),!0===e.storage.get("pendingWhatsNewOnFocus")&&(e.storage.delete("pendingWhatsNewOnFocus"),C.i.get("showWhatsNewAfterUpgrades")&&(0,y.Yf)(t)))});e.context.subscriptions.push(i)}}}r1=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?r0(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rX(t,i,o),o})([(0,b.GQ)()],r1)})(),module.exports=a})();