{
  "version": 3,
  "file": "worker.js",
  "mappings": "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,MACA,MACA,SACA,KACA,OACA,MACA,QACA,MACA,MACA,IACA,IACA,OACA,QACA,SAEA,OACA,QACA,MACA,OACA,QACA,MACA,MAEA,IACA,KACA,MAEA,MACA,KACA,MACA,KACA,MACA,UACA,KACA,QACA,QACA,UACA,OACA,OACA,OACA,QACA,MACA,MACA,OACA,OACA,MACA,OACA,OACA,QACA,OACA,OACA,QACA,QACA,KACA,SACA,SACA,QACA,KACA,KACA,KACA,QACA,UACA,OACA,UACA,OACA,KACA,OACA,KACA,MACA,KACA,MACA,OACA,QACA,OACA,MACA,OACA,KACA,OACA,MACA,OACA,OACA,QAME4wB,EAAgB,IAAI5wB,IAAI,CAE1B,KACA,OACA,OACA,MACA,QACA,OACA,MACA,WACA,SACA,OACA,SACA,MACA,QACA,QACA,UACA,SACA,SACA,OACA,QACA,SACA,WACA,QACA,QACA,QACA,OACA,SACA,SACA,MACA,QACA,OACA,SAEGwxB,IAODb,EAA2C,IAAIvf,IAAI,G,uNC/gBzD,gBAMA,IAeYpB,EAfAD,KAAA,EAAAA,sBAAA,EAAAA,oBAAmB,KAC3B,mCACA,wBACA,yBACA,sBACA,cACA,4CASJ,SAAYC,GAER,sBAEA,oBAEA,sBACA,wBACA,kBACA,gBACA,kBACA,gBACA,qBACA,uBACH,CAdD,CAAYA,EAAA,EAAAA,mBAAA,EAAAA,iBAAgB,KA2E5B,MAAMyhB,EAAgE,CAClE,CAACzhB,EAAiBuhB,UAAW,WAC7B,CAACvhB,EAAiBgd,SAAU,UAC5B,CAAChd,EAAiB0hB,UAAW,WAC7B,CAAC1hB,EAAiB2hB,WAAY,YAC9B,CAAC3hB,EAAiB4hB,QAAS,SAC3B,CAAC5hB,EAAiB6hB,OAAQ,QAC1B,CAAC7hB,EAAiB8hB,QAAS,SAC3B,CAAC9hB,EAAiB+hB,OAAQ,QAC1B,CAAC/hB,EAAiBgiB,MAAO,cACzB,CAAChiB,EAAiBiiB,WAAY,aAWlC,SAAgBC,EAAgB9L,EAAiD+L,GAC7E,MAAMpF,EAAY0E,EAAyBrL,EAAQ2G,WAInD,IAAIqF,GAHah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",
  "sources": [
    ".././node_modules/diff/lib/convert/dmp.js",
    ".././node_modules/diff/lib/convert/xml.js",
    ".././node_modules/diff/lib/diff/array.js",
    ".././node_modules/diff/lib/diff/base.js",
    ".././node_modules/diff/lib/diff/character.js",
    ".././node_modules/diff/lib/diff/css.js",
    ".././node_modules/diff/lib/diff/json.js",
    ".././node_modules/diff/lib/diff/line.js",
    ".././node_modules/diff/lib/diff/sentence.js",
    ".././node_modules/diff/lib/diff/word.js",
    ".././node_modules/diff/lib/index.js",
    ".././node_modules/diff/lib/patch/apply.js",
    ".././node_modules/diff/lib/patch/create.js",
    ".././node_modules/diff/lib/patch/merge.js",
    ".././node_modules/diff/lib/patch/parse.js",
    ".././node_modules/diff/lib/util/array.js",
    ".././node_modules/diff/lib/util/distance-iterator.js",
    ".././node_modules/diff/lib/util/params.js",
    ".././src/elidableText/elidableText.ts",
    ".././src/elidableText/fromDiff.ts",
    ".././src/elidableText/fromIndentationTrees.ts",
    ".././src/elidableText/fromSourceCode.ts",
    ".././src/elidableText/index.ts",
    ".././src/elidableText/lineWithValueAndCost.ts",
    ".././src/fileSystem.ts",
    ".././src/indentation/classes.ts",
    ".././src/indentation/description.ts",
    ".././src/indentation/index.ts",
    ".././src/indentation/java.ts",
    ".././src/indentation/manipulation.ts",
    ".././src/indentation/markdown.ts",
    ".././src/indentation/parsing.ts",
    ".././src/languageMarker.ts",
    ".././src/lib.ts",
    ".././src/localImportContext.ts",
    ".././src/orchestrator.ts",
    ".././src/parse.ts",
    ".././src/parseBlock.ts",
    ".././src/prompt.ts",
    ".././src/siblingFunctions.ts",
    ".././src/snippetInclusion/cursorContext.ts",
    ".././src/snippetInclusion/cursorMatching.ts",
    ".././src/snippetInclusion/jaccardMatching.ts",
    ".././src/snippetInclusion/neighboringFiles.ts",
    ".././src/snippetInclusion/selectRelevance.ts",
    ".././src/snippetInclusion/snippets.ts",
    ".././src/snippetInclusion/windowDelineations.ts",
    ".././src/snippetProviders/language.ts",
    ".././src/snippetProviders/localImportContext.ts",
    ".././src/snippetProviders/neighborFiles.ts",
    ".././src/snippetProviders/path.ts",
    ".././src/snippetProviders/snippetProvider.ts",
    ".././src/suffixMatchCriteria.ts",
    ".././src/tokenization/index.ts",
    ".././src/tokenization/tokenizer.ts",
    ".././src/wishlist.ts",
    ".././src/workerProxy.ts",
    ".././node_modules/web-tree-sitter/tree-sitter.js",
    "../external node-commonjs \"assert\"",
    "../external node-commonjs \"fs\"",
    "../external node-commonjs \"path\"",
    "../external node-commonjs \"util\"",
    "../external node-commonjs \"worker_threads\"",
    "../webpack/bootstrap",
    ".././src/worker.js"
  ],
  "sourcesContent": [
    "/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertChangesToDMP = convertChangesToDMP;\n\n/*istanbul ignore end*/\n// See: http://code.google.com/p/google-diff-match-patch/wiki/API\nfunction convertChangesToDMP(changes) {\n  var ret = [],\n      change,\n      operation;\n\n  for (var i = 0; i < changes.length; i++) {\n    change = changes[i];\n\n    if (change.added) {\n      operation = 1;\n    } else if (change.removed) {\n      operation = -1;\n    } else {\n      operation = 0;\n    }\n\n    ret.push([operation, change.value]);\n  }\n\n  return ret;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb252ZXJ0L2RtcC5qcyJdLCJuYW1lcyI6WyJjb252ZXJ0Q2hhbmdlc1RvRE1QIiwiY2hhbmdlcyIsInJldCIsImNoYW5nZSIsIm9wZXJhdGlvbiIsImkiLCJsZW5ndGgiLCJhZGRlZCIsInJlbW92ZWQiLCJwdXNoIiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ08sU0FBU0EsbUJBQVQsQ0FBNkJDLE9BQTdCLEVBQXNDO0FBQzNDLE1BQUlDLEdBQUcsR0FBRyxFQUFWO0FBQUEsTUFDSUMsTUFESjtBQUFBLE1BRUlDLFNBRko7O0FBR0EsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSixPQUFPLENBQUNLLE1BQTVCLEVBQW9DRCxDQUFDLEVBQXJDLEVBQXlDO0FBQ3ZDRixJQUFBQSxNQUFNLEdBQUdGLE9BQU8sQ0FBQ0ksQ0FBRCxDQUFoQjs7QUFDQSxRQUFJRixNQUFNLENBQUNJLEtBQVgsRUFBa0I7QUFDaEJILE1BQUFBLFNBQVMsR0FBRyxDQUFaO0FBQ0QsS0FGRCxNQUVPLElBQUlELE1BQU0sQ0FBQ0ssT0FBWCxFQUFvQjtBQUN6QkosTUFBQUEsU0FBUyxHQUFHLENBQUMsQ0FBYjtBQUNELEtBRk0sTUFFQTtBQUNMQSxNQUFBQSxTQUFTLEdBQUcsQ0FBWjtBQUNEOztBQUVERixJQUFBQSxHQUFHLENBQUNPLElBQUosQ0FBUyxDQUFDTCxTQUFELEVBQVlELE1BQU0sQ0FBQ08sS0FBbkIsQ0FBVDtBQUNEOztBQUNELFNBQU9SLEdBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIFNlZTogaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2dvb2dsZS1kaWZmLW1hdGNoLXBhdGNoL3dpa2kvQVBJXG5leHBvcnQgZnVuY3Rpb24gY29udmVydENoYW5nZXNUb0RNUChjaGFuZ2VzKSB7XG4gIGxldCByZXQgPSBbXSxcbiAgICAgIGNoYW5nZSxcbiAgICAgIG9wZXJhdGlvbjtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hhbmdlID0gY2hhbmdlc1tpXTtcbiAgICBpZiAoY2hhbmdlLmFkZGVkKSB7XG4gICAgICBvcGVyYXRpb24gPSAxO1xuICAgIH0gZWxzZSBpZiAoY2hhbmdlLnJlbW92ZWQpIHtcbiAgICAgIG9wZXJhdGlvbiA9IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcGVyYXRpb24gPSAwO1xuICAgIH1cblxuICAgIHJldC5wdXNoKFtvcGVyYXRpb24sIGNoYW5nZS52YWx1ZV0pO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG4iXX0=\n",
    "/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertChangesToXML = convertChangesToXML;\n\n/*istanbul ignore end*/\nfunction convertChangesToXML(changes) {\n  var ret = [];\n\n  for (var i = 0; i < changes.length; i++) {\n    var change = changes[i];\n\n    if (change.added) {\n      ret.push('<ins>');\n    } else if (change.removed) {\n      ret.push('<del>');\n    }\n\n    ret.push(escapeHTML(change.value));\n\n    if (change.added) {\n      ret.push('</ins>');\n    } else if (change.removed) {\n      ret.push('</del>');\n    }\n  }\n\n  return ret.join('');\n}\n\nfunction escapeHTML(s) {\n  var n = s;\n  n = n.replace(/&/g, '&amp;');\n  n = n.replace(/</g, '&lt;');\n  n = n.replace(/>/g, '&gt;');\n  n = n.replace(/\"/g, '&quot;');\n  return n;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb252ZXJ0L3htbC5qcyJdLCJuYW1lcyI6WyJjb252ZXJ0Q2hhbmdlc1RvWE1MIiwiY2hhbmdlcyIsInJldCIsImkiLCJsZW5ndGgiLCJjaGFuZ2UiLCJhZGRlZCIsInB1c2giLCJyZW1vdmVkIiwiZXNjYXBlSFRNTCIsInZhbHVlIiwiam9pbiIsInMiLCJuIiwicmVwbGFjZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQU8sU0FBU0EsbUJBQVQsQ0FBNkJDLE9BQTdCLEVBQXNDO0FBQzNDLE1BQUlDLEdBQUcsR0FBRyxFQUFWOztBQUNBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0YsT0FBTyxDQUFDRyxNQUE1QixFQUFvQ0QsQ0FBQyxFQUFyQyxFQUF5QztBQUN2QyxRQUFJRSxNQUFNLEdBQUdKLE9BQU8sQ0FBQ0UsQ0FBRCxDQUFwQjs7QUFDQSxRQUFJRSxNQUFNLENBQUNDLEtBQVgsRUFBa0I7QUFDaEJKLE1BQUFBLEdBQUcsQ0FBQ0ssSUFBSixDQUFTLE9BQVQ7QUFDRCxLQUZELE1BRU8sSUFBSUYsTUFBTSxDQUFDRyxPQUFYLEVBQW9CO0FBQ3pCTixNQUFBQSxHQUFHLENBQUNLLElBQUosQ0FBUyxPQUFUO0FBQ0Q7O0FBRURMLElBQUFBLEdBQUcsQ0FBQ0ssSUFBSixDQUFTRSxVQUFVLENBQUNKLE1BQU0sQ0FBQ0ssS0FBUixDQUFuQjs7QUFFQSxRQUFJTCxNQUFNLENBQUNDLEtBQVgsRUFBa0I7QUFDaEJKLE1BQUFBLEdBQUcsQ0FBQ0ssSUFBSixDQUFTLFFBQVQ7QUFDRCxLQUZELE1BRU8sSUFBSUYsTUFBTSxDQUFDRyxPQUFYLEVBQW9CO0FBQ3pCTixNQUFBQSxHQUFHLENBQUNLLElBQUosQ0FBUyxRQUFUO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPTCxHQUFHLENBQUNTLElBQUosQ0FBUyxFQUFULENBQVA7QUFDRDs7QUFFRCxTQUFTRixVQUFULENBQW9CRyxDQUFwQixFQUF1QjtBQUNyQixNQUFJQyxDQUFDLEdBQUdELENBQVI7QUFDQUMsRUFBQUEsQ0FBQyxHQUFHQSxDQUFDLENBQUNDLE9BQUYsQ0FBVSxJQUFWLEVBQWdCLE9BQWhCLENBQUo7QUFDQUQsRUFBQUEsQ0FBQyxHQUFHQSxDQUFDLENBQUNDLE9BQUYsQ0FBVSxJQUFWLEVBQWdCLE1BQWhCLENBQUo7QUFDQUQsRUFBQUEsQ0FBQyxHQUFHQSxDQUFDLENBQUNDLE9BQUYsQ0FBVSxJQUFWLEVBQWdCLE1BQWhCLENBQUo7QUFDQUQsRUFBQUEsQ0FBQyxHQUFHQSxDQUFDLENBQUNDLE9BQUYsQ0FBVSxJQUFWLEVBQWdCLFFBQWhCLENBQUo7QUFFQSxTQUFPRCxDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gY29udmVydENoYW5nZXNUb1hNTChjaGFuZ2VzKSB7XG4gIGxldCByZXQgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGNoYW5nZSA9IGNoYW5nZXNbaV07XG4gICAgaWYgKGNoYW5nZS5hZGRlZCkge1xuICAgICAgcmV0LnB1c2goJzxpbnM+Jyk7XG4gICAgfSBlbHNlIGlmIChjaGFuZ2UucmVtb3ZlZCkge1xuICAgICAgcmV0LnB1c2goJzxkZWw+Jyk7XG4gICAgfVxuXG4gICAgcmV0LnB1c2goZXNjYXBlSFRNTChjaGFuZ2UudmFsdWUpKTtcblxuICAgIGlmIChjaGFuZ2UuYWRkZWQpIHtcbiAgICAgIHJldC5wdXNoKCc8L2lucz4nKTtcbiAgICB9IGVsc2UgaWYgKGNoYW5nZS5yZW1vdmVkKSB7XG4gICAgICByZXQucHVzaCgnPC9kZWw+Jyk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQuam9pbignJyk7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZUhUTUwocykge1xuICBsZXQgbiA9IHM7XG4gIG4gPSBuLnJlcGxhY2UoLyYvZywgJyZhbXA7Jyk7XG4gIG4gPSBuLnJlcGxhY2UoLzwvZywgJyZsdDsnKTtcbiAgbiA9IG4ucmVwbGFjZSgvPi9nLCAnJmd0OycpO1xuICBuID0gbi5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG5cbiAgcmV0dXJuIG47XG59XG4iXX0=\n",
    "/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.diffArrays = diffArrays;\nexports.arrayDiff = void 0;\n\n/*istanbul ignore end*/\nvar\n/*istanbul ignore start*/\n_base = _interopRequireDefault(require(\"./base\"))\n/*istanbul ignore end*/\n;\n\n/*istanbul ignore start*/ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/*istanbul ignore end*/\nvar arrayDiff = new\n/*istanbul ignore start*/\n_base\n/*istanbul ignore end*/\n[\n/*istanbul ignore start*/\n\"default\"\n/*istanbul ignore end*/\n]();\n\n/*istanbul ignore start*/\nexports.arrayDiff = arrayDiff;\n\n/*istanbul ignore end*/\narrayDiff.tokenize = function (value) {\n  return value.slice();\n};\n\narrayDiff.join = arrayDiff.removeEmpty = function (value) {\n  return value;\n};\n\nfunction diffArrays(oldArr, newArr, callback) {\n  return arrayDiff.diff(oldArr, newArr, callback);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaWZmL2FycmF5LmpzIl0sIm5hbWVzIjpbImFycmF5RGlmZiIsIkRpZmYiLCJ0b2tlbml6ZSIsInZhbHVlIiwic2xpY2UiLCJqb2luIiwicmVtb3ZlRW1wdHkiLCJkaWZmQXJyYXlzIiwib2xkQXJyIiwibmV3QXJyIiwiY2FsbGJhY2siLCJkaWZmIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7QUFFTyxJQUFNQSxTQUFTLEdBQUc7QUFBSUM7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUEsQ0FBSixFQUFsQjs7Ozs7O0FBQ1BELFNBQVMsQ0FBQ0UsUUFBVixHQUFxQixVQUFTQyxLQUFULEVBQWdCO0FBQ25DLFNBQU9BLEtBQUssQ0FBQ0MsS0FBTixFQUFQO0FBQ0QsQ0FGRDs7QUFHQUosU0FBUyxDQUFDSyxJQUFWLEdBQWlCTCxTQUFTLENBQUNNLFdBQVYsR0FBd0IsVUFBU0gsS0FBVCxFQUFnQjtBQUN2RCxTQUFPQSxLQUFQO0FBQ0QsQ0FGRDs7QUFJTyxTQUFTSSxVQUFULENBQW9CQyxNQUFwQixFQUE0QkMsTUFBNUIsRUFBb0NDLFFBQXBDLEVBQThDO0FBQUUsU0FBT1YsU0FBUyxDQUFDVyxJQUFWLENBQWVILE1BQWYsRUFBdUJDLE1BQXZCLEVBQStCQyxRQUEvQixDQUFQO0FBQWtEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERpZmYgZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGNvbnN0IGFycmF5RGlmZiA9IG5ldyBEaWZmKCk7XG5hcnJheURpZmYudG9rZW5pemUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUuc2xpY2UoKTtcbn07XG5hcnJheURpZmYuam9pbiA9IGFycmF5RGlmZi5yZW1vdmVFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBkaWZmQXJyYXlzKG9sZEFyciwgbmV3QXJyLCBjYWxsYmFjaykgeyByZXR1cm4gYXJyYXlEaWZmLmRpZmYob2xkQXJyLCBuZXdBcnIsIGNhbGxiYWNrKTsgfVxuIl19\n",
    "/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = Diff;\n\n/*istanbul ignore end*/\nfunction Diff() {}\n\nDiff.prototype = {\n  /*istanbul ignore start*/\n\n  /*istanbul ignore end*/\n  diff: function diff(oldString, newString) {\n    /*istanbul ignore start*/\n    var\n    /*istanbul ignore end*/\n    options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var callback = options.callback;\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    this.options = options;\n    var self = this;\n\n    function done(value) {\n      if (callback) {\n        setTimeout(function () {\n          callback(undefined, value);\n        }, 0);\n        return true;\n      } else {\n        return value;\n      }\n    } // Allow subclasses to massage the input prior to running\n\n\n    oldString = this.castInput(oldString);\n    newString = this.castInput(newString);\n    oldString = this.removeEmpty(this.tokenize(oldString));\n    newString = this.removeEmpty(this.tokenize(newString));\n    var newLen = newString.length,\n        oldLen = oldString.length;\n    var editLength = 1;\n    var maxEditLength = newLen + oldLen;\n\n    if (options.maxEditLength) {\n      maxEditLength = Math.min(maxEditLength, options.maxEditLength);\n    }\n\n    var bestPath = [{\n      newPos: -1,\n      components: []\n    }]; // Seed editLength = 0, i.e. the content starts with the same values\n\n    var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);\n\n    if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n      // Identity per the equality and tokenizer\n      return done([{\n        value: this.join(newString),\n        count: newString.length\n      }]);\n    } // Main worker method. checks all permutations of a given edit length for acceptance.\n\n\n    function execEditLength() {\n      for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {\n        var basePath =\n        /*istanbul ignore start*/\n        void 0\n        /*istanbul ignore end*/\n        ;\n\n        var addPath = bestPath[diagonalPath - 1],\n            removePath = bestPath[diagonalPath + 1],\n            _oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\n\n        if (addPath) {\n          // No one else is going to attempt to use this value, clear it\n          bestPath[diagonalPath - 1] = undefined;\n        }\n\n        var canAdd = addPath && addPath.newPos + 1 < newLen,\n            canRemove = removePath && 0 <= _oldPos && _oldPos < oldLen;\n\n        if (!canAdd && !canRemove) {\n          // If this path is a terminal then prune\n          bestPath[diagonalPath] = undefined;\n          continue;\n        } // Select the diagonal that we want to branch from. We select the prior\n        // path whose position in the new string is the farthest from the origin\n        // and does not pass the bounds of the diff graph\n\n\n        if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {\n          basePath = clonePath(removePath);\n          self.pushComponent(basePath.components, undefined, true);\n        } else {\n          basePath = addPath; // No need to clone, we've pulled it from the list\n\n          basePath.newPos++;\n          self.pushComponent(basePath.components, true, undefined);\n        }\n\n        _oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath); // If we have hit the end of both strings, then we are done\n\n        if (basePath.newPos + 1 >= newLen && _oldPos + 1 >= oldLen) {\n          return done(buildValues(self, basePath.components, newString, oldString, self.useLongestToken));\n        } else {\n          // Otherwise track this path as a potential candidate and continue.\n          bestPath[diagonalPath] = basePath;\n        }\n      }\n\n      editLength++;\n    } // Performs the length of edit iteration. Is a bit fugly as this has to support the\n    // sync and async mode which is never fun. Loops over execEditLength until a value\n    // is produced, or until the edit length exceeds options.maxEditLength (if given),\n    // in which case it will return undefined.\n\n\n    if (callback) {\n      (function exec() {\n        setTimeout(function () {\n          if (editLength > maxEditLength) {\n            return callback();\n          }\n\n          if (!execEditLength()) {\n            exec();\n          }\n        }, 0);\n      })();\n    } else {\n      while (editLength <= maxEditLength) {\n        var ret = execEditLength();\n\n        if (ret) {\n          return ret;\n        }\n      }\n    }\n  },\n\n  /*istanbul ignore start*/\n\n  /*istanbul ignore end*/\n  pushComponent: function pushComponent(components, added, removed) {\n    var last = components[components.length - 1];\n\n    if (last && last.added === added && last.removed === removed) {\n      // We need to clone here as the component clone operation is just\n      // as shallow array clone\n      components[components.length - 1] = {\n        count: last.count + 1,\n        added: added,\n        removed: removed\n      };\n    } else {\n      components.push({\n        count: 1,\n        added: added,\n        removed: removed\n      });\n    }\n  },\n\n  /*istanbul ignore start*/\n\n  /*istanbul ignore end*/\n  extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {\n    var newLen = newString.length,\n        oldLen = oldString.length,\n        newPos = basePath.newPos,\n        oldPos = newPos - diagonalPath,\n        commonCount = 0;\n\n    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {\n      newPos++;\n      oldPos++;\n      commonCount++;\n    }\n\n    if (commonCount) {\n      basePath.components.push({\n        count: commonCount\n      });\n    }\n\n    basePath.newPos = newPos;\n    return oldPos;\n  },\n\n  /*istanbul ignore start*/\n\n  /*istanbul ignore end*/\n  equals: function equals(left, right) {\n    if (this.options.comparator) {\n      return this.options.comparator(left, right);\n    } else {\n      return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();\n    }\n  },\n\n  /*istanbul ignore start*/\n\n  /*istanbul ignore end*/\n  removeEmpty: function removeEmpty(array) {\n    var ret = [];\n\n    for (var i = 0; i < array.length; i++) {\n      if (array[i]) {\n        ret.push(array[i]);\n      }\n    }\n\n    return ret;\n  },\n\n  /*istanbul ignore start*/\n\n  /*istanbul ignore end*/\n  castInput: function castInput(value) {\n    return value;\n  },\n\n  /*istanbul ignore start*/\n\n  /*istanbul ignore end*/\n  tokenize: function tokenize(value) {\n    return value.split('');\n  },\n\n  /*istanbul ignore start*/\n\n  /*istanbul ignore end*/\n  join: function join(chars) {\n    return chars.join('');\n  }\n};\n\nfunction buildValues(diff, components, newString, oldString, useLongestToken) {\n  var componentPos = 0,\n      componentLen = components.length,\n      newPos = 0,\n      oldPos = 0;\n\n  for (; componentPos < componentLen; componentPos++) {\n    var component = components[componentPos];\n\n    if (!component.removed) {\n      if (!component.added && useLongestToken) {\n        var value = newString.slice(newPos, newPos + component.count);\n        value = value.map(function (value, i) {\n          var oldValue = oldString[oldPos + i];\n          return oldValue.length > value.length ? oldValue : value;\n        });\n        component.value = diff.join(value);\n      } else {\n        component.value = diff.join(newString.slice(newPos, newPos + component.count));\n      }\n\n      newPos += component.count; // Common case\n\n      if (!component.added) {\n        oldPos += component.count;\n      }\n    } else {\n      component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));\n      oldPos += component.count; // Reverse add and remove so removes are output first to match common convention\n      // The diffing algorithm is tied to add then remove output and this is the simplest\n      // route to get the desired output with minimal overhead.\n\n      if (componentPos && components[componentPos - 1].added) {\n        var tmp = components[componentPos - 1];\n        components[componentPos - 1] = components[componentPos];\n        components[componentPos] = tmp;\n      }\n    }\n  } // Special case handle for when one terminal is ignored (i.e. whitespace).\n  // For this case we merge the terminal into the prior string and drop the change.\n  // This is only available for string mode.\n\n\n  var lastComponent = components[componentLen - 1];\n\n  if (componentLen > 1 && typeof lastComponent.value === 'string' && (lastComponent.added || lastComponent.removed) && diff.equals('', lastComponent.value)) {\n    components[componentLen - 2].value += lastComponent.value;\n    components.pop();\n  }\n\n  return components;\n}\n\nfunction clonePath(path) {\n  return {\n    newPos: path.newPos,\n    components: path.components.slice(0)\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",
    "/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.diffChars = diffChars;\nexports.characterDiff = void 0;\n\n/*istanbul ignore end*/\nvar\n/*istanbul ignore start*/\n_base = _interopRequireDefault(require(\"./base\"))\n/*istanbul ignore end*/\n;\n\n/*istanbul ignore start*/ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/*istanbul ignore end*/\nvar characterDiff = new\n/*istanbul ignore start*/\n_base\n/*istanbul ignore end*/\n[\n/*istanbul ignore start*/\n\"default\"\n/*istanbul ignore end*/\n]();\n\n/*istanbul ignore start*/\nexports.characterDiff = characterDiff;\n\n/*istanbul ignore end*/\nfunction diffChars(oldStr, newStr, options) {\n  return characterDiff.diff(oldStr, newStr, options);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaWZmL2NoYXJhY3Rlci5qcyJdLCJuYW1lcyI6WyJjaGFyYWN0ZXJEaWZmIiwiRGlmZiIsImRpZmZDaGFycyIsIm9sZFN0ciIsIm5ld1N0ciIsIm9wdGlvbnMiLCJkaWZmIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7QUFFTyxJQUFNQSxhQUFhLEdBQUc7QUFBSUM7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUEsQ0FBSixFQUF0Qjs7Ozs7O0FBQ0EsU0FBU0MsU0FBVCxDQUFtQkMsTUFBbkIsRUFBMkJDLE1BQTNCLEVBQW1DQyxPQUFuQyxFQUE0QztBQUFFLFNBQU9MLGFBQWEsQ0FBQ00sSUFBZCxDQUFtQkgsTUFBbkIsRUFBMkJDLE1BQTNCLEVBQW1DQyxPQUFuQyxDQUFQO0FBQXFEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERpZmYgZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGNvbnN0IGNoYXJhY3RlckRpZmYgPSBuZXcgRGlmZigpO1xuZXhwb3J0IGZ1bmN0aW9uIGRpZmZDaGFycyhvbGRTdHIsIG5ld1N0ciwgb3B0aW9ucykgeyByZXR1cm4gY2hhcmFjdGVyRGlmZi5kaWZmKG9sZFN0ciwgbmV3U3RyLCBvcHRpb25zKTsgfVxuIl19\n",
    "/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.diffCss = diffCss;\nexports.cssDiff = void 0;\n\n/*istanbul ignore end*/\nvar\n/*istanbul ignore start*/\n_base = _interopRequireDefault(require(\"./base\"))\n/*istanbul ignore end*/\n;\n\n/*istanbul ignore start*/ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/*istanbul ignore end*/\nvar cssDiff = new\n/*istanbul ignore start*/\n_base\n/*istanbul ignore end*/\n[\n/*istanbul ignore start*/\n\"default\"\n/*istanbul ignore end*/\n]();\n\n/*istanbul ignore start*/\nexports.cssDiff = cssDiff;\n\n/*istanbul ignore end*/\ncssDiff.tokenize = function (value) {\n  return value.split(/([{}:;,]|\\s+)/);\n};\n\nfunction diffCss(oldStr, newStr, callback) {\n  return cssDiff.diff(oldStr, newStr, callback);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaWZmL2Nzcy5qcyJdLCJuYW1lcyI6WyJjc3NEaWZmIiwiRGlmZiIsInRva2VuaXplIiwidmFsdWUiLCJzcGxpdCIsImRpZmZDc3MiLCJvbGRTdHIiLCJuZXdTdHIiLCJjYWxsYmFjayIsImRpZmYiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7OztBQUVPLElBQU1BLE9BQU8sR0FBRztBQUFJQztBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQTtBQUFBQSxDQUFKLEVBQWhCOzs7Ozs7QUFDUEQsT0FBTyxDQUFDRSxRQUFSLEdBQW1CLFVBQVNDLEtBQVQsRUFBZ0I7QUFDakMsU0FBT0EsS0FBSyxDQUFDQyxLQUFOLENBQVksZUFBWixDQUFQO0FBQ0QsQ0FGRDs7QUFJTyxTQUFTQyxPQUFULENBQWlCQyxNQUFqQixFQUF5QkMsTUFBekIsRUFBaUNDLFFBQWpDLEVBQTJDO0FBQUUsU0FBT1IsT0FBTyxDQUFDUyxJQUFSLENBQWFILE1BQWIsRUFBcUJDLE1BQXJCLEVBQTZCQyxRQUE3QixDQUFQO0FBQWdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERpZmYgZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGNvbnN0IGNzc0RpZmYgPSBuZXcgRGlmZigpO1xuY3NzRGlmZi50b2tlbml6ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5zcGxpdCgvKFt7fTo7LF18XFxzKykvKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBkaWZmQ3NzKG9sZFN0ciwgbmV3U3RyLCBjYWxsYmFjaykgeyByZXR1cm4gY3NzRGlmZi5kaWZmKG9sZFN0ciwgbmV3U3RyLCBjYWxsYmFjayk7IH1cbiJdfQ==\n",
    "/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.diffJson = diffJson;\nexports.canonicalize = canonicalize;\nexports.jsonDiff = void 0;\n\n/*istanbul ignore end*/\nvar\n/*istanbul ignore start*/\n_base = _interopRequireDefault(require(\"./base\"))\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_line = require(\"./line\")\n/*istanbul ignore end*/\n;\n\n/*istanbul ignore start*/ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*istanbul ignore end*/\nvar objectPrototypeToString = Object.prototype.toString;\nvar jsonDiff = new\n/*istanbul ignore start*/\n_base\n/*istanbul ignore end*/\n[\n/*istanbul ignore start*/\n\"default\"\n/*istanbul ignore end*/\n](); // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a\n// dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:\n\n/*istanbul ignore start*/\nexports.jsonDiff = jsonDiff;\n\n/*istanbul ignore end*/\njsonDiff.useLongestToken = true;\njsonDiff.tokenize =\n/*istanbul ignore start*/\n_line\n/*istanbul ignore end*/\n.\n/*istanbul ignore start*/\nlineDiff\n/*istanbul ignore end*/\n.tokenize;\n\njsonDiff.castInput = function (value) {\n  /*istanbul ignore start*/\n  var _this$options =\n  /*istanbul ignore end*/\n  this.options,\n      undefinedReplacement = _this$options.undefinedReplacement,\n      _this$options$stringi = _this$options.stringifyReplacer,\n      stringifyReplacer = _this$options$stringi === void 0 ? function (k, v)\n  /*istanbul ignore start*/\n  {\n    return (\n      /*istanbul ignore end*/\n      typeof v === 'undefined' ? undefinedReplacement : v\n    );\n  } : _this$options$stringi;\n  return typeof value === 'string' ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, '  ');\n};\n\njsonDiff.equals = function (left, right) {\n  return (\n    /*istanbul ignore start*/\n    _base\n    /*istanbul ignore end*/\n    [\n    /*istanbul ignore start*/\n    \"default\"\n    /*istanbul ignore end*/\n    ].prototype.equals.call(jsonDiff, left.replace(/,([\\r\\n])/g, '$1'), right.replace(/,([\\r\\n])/g, '$1'))\n  );\n};\n\nfunction diffJson(oldObj, newObj, options) {\n  return jsonDiff.diff(oldObj, newObj, options);\n} // This function handles the presence of circular references by bailing out when encountering an\n// object that is already on the \"stack\" of items being processed. Accepts an optional replacer\n\n\nfunction canonicalize(obj, stack, replacementStack, replacer, key) {\n  stack = stack || [];\n  replacementStack = replacementStack || [];\n\n  if (replacer) {\n    obj = replacer(key, obj);\n  }\n\n  var i;\n\n  for (i = 0; i < stack.length; i += 1) {\n    if (stack[i] === obj) {\n      return replacementStack[i];\n    }\n  }\n\n  var canonicalizedObj;\n\n  if ('[object Array]' === objectPrototypeToString.call(obj)) {\n    stack.push(obj);\n    canonicalizedObj = new Array(obj.length);\n    replacementStack.push(canonicalizedObj);\n\n    for (i = 0; i < obj.length; i += 1) {\n      canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);\n    }\n\n    stack.pop();\n    replacementStack.pop();\n    return canonicalizedObj;\n  }\n\n  if (obj && obj.toJSON) {\n    obj = obj.toJSON();\n  }\n\n  if (\n  /*istanbul ignore start*/\n  _typeof(\n  /*istanbul ignore end*/\n  obj) === 'object' && obj !== null) {\n    stack.push(obj);\n    canonicalizedObj = {};\n    replacementStack.push(canonicalizedObj);\n\n    var sortedKeys = [],\n        _key;\n\n    for (_key in obj) {\n      /* istanbul ignore else */\n      if (obj.hasOwnProperty(_key)) {\n        sortedKeys.push(_key);\n      }\n    }\n\n    sortedKeys.sort();\n\n    for (i = 0; i < sortedKeys.length; i += 1) {\n      _key = sortedKeys[i];\n      canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);\n    }\n\n    stack.pop();\n    replacementStack.pop();\n  } else {\n    canonicalizedObj = obj;\n  }\n\n  return canonicalizedObj;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",
    "/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.diffLines = diffLines;\nexports.diffTrimmedLines = diffTrimmedLines;\nexports.lineDiff = void 0;\n\n/*istanbul ignore end*/\nvar\n/*istanbul ignore start*/\n_base = _interopRequireDefault(require(\"./base\"))\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_params = require(\"../util/params\")\n/*istanbul ignore end*/\n;\n\n/*istanbul ignore start*/ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/*istanbul ignore end*/\nvar lineDiff = new\n/*istanbul ignore start*/\n_base\n/*istanbul ignore end*/\n[\n/*istanbul ignore start*/\n\"default\"\n/*istanbul ignore end*/\n]();\n\n/*istanbul ignore start*/\nexports.lineDiff = lineDiff;\n\n/*istanbul ignore end*/\nlineDiff.tokenize = function (value) {\n  var retLines = [],\n      linesAndNewlines = value.split(/(\\n|\\r\\n)/); // Ignore the final empty token that occurs if the string ends with a new line\n\n  if (!linesAndNewlines[linesAndNewlines.length - 1]) {\n    linesAndNewlines.pop();\n  } // Merge the content and line separators into single tokens\n\n\n  for (var i = 0; i < linesAndNewlines.length; i++) {\n    var line = linesAndNewlines[i];\n\n    if (i % 2 && !this.options.newlineIsToken) {\n      retLines[retLines.length - 1] += line;\n    } else {\n      if (this.options.ignoreWhitespace) {\n        line = line.trim();\n      }\n\n      retLines.push(line);\n    }\n  }\n\n  return retLines;\n};\n\nfunction diffLines(oldStr, newStr, callback) {\n  return lineDiff.diff(oldStr, newStr, callback);\n}\n\nfunction diffTrimmedLines(oldStr, newStr, callback) {\n  var options =\n  /*istanbul ignore start*/\n  (0,\n  /*istanbul ignore end*/\n\n  /*istanbul ignore start*/\n  _params\n  /*istanbul ignore end*/\n  .\n  /*istanbul ignore start*/\n  generateOptions)\n  /*istanbul ignore end*/\n  (callback, {\n    ignoreWhitespace: true\n  });\n  return lineDiff.diff(oldStr, newStr, options);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaWZmL2xpbmUuanMiXSwibmFtZXMiOlsibGluZURpZmYiLCJEaWZmIiwidG9rZW5pemUiLCJ2YWx1ZSIsInJldExpbmVzIiwibGluZXNBbmROZXdsaW5lcyIsInNwbGl0IiwibGVuZ3RoIiwicG9wIiwiaSIsImxpbmUiLCJvcHRpb25zIiwibmV3bGluZUlzVG9rZW4iLCJpZ25vcmVXaGl0ZXNwYWNlIiwidHJpbSIsInB1c2giLCJkaWZmTGluZXMiLCJvbGRTdHIiLCJuZXdTdHIiLCJjYWxsYmFjayIsImRpZmYiLCJkaWZmVHJpbW1lZExpbmVzIiwiZ2VuZXJhdGVPcHRpb25zIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7QUFFTyxJQUFNQSxRQUFRLEdBQUc7QUFBSUM7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUEsQ0FBSixFQUFqQjs7Ozs7O0FBQ1BELFFBQVEsQ0FBQ0UsUUFBVCxHQUFvQixVQUFTQyxLQUFULEVBQWdCO0FBQ2xDLE1BQUlDLFFBQVEsR0FBRyxFQUFmO0FBQUEsTUFDSUMsZ0JBQWdCLEdBQUdGLEtBQUssQ0FBQ0csS0FBTixDQUFZLFdBQVosQ0FEdkIsQ0FEa0MsQ0FJbEM7O0FBQ0EsTUFBSSxDQUFDRCxnQkFBZ0IsQ0FBQ0EsZ0JBQWdCLENBQUNFLE1BQWpCLEdBQTBCLENBQTNCLENBQXJCLEVBQW9EO0FBQ2xERixJQUFBQSxnQkFBZ0IsQ0FBQ0csR0FBakI7QUFDRCxHQVBpQyxDQVNsQzs7O0FBQ0EsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSixnQkFBZ0IsQ0FBQ0UsTUFBckMsRUFBNkNFLENBQUMsRUFBOUMsRUFBa0Q7QUFDaEQsUUFBSUMsSUFBSSxHQUFHTCxnQkFBZ0IsQ0FBQ0ksQ0FBRCxDQUEzQjs7QUFFQSxRQUFJQSxDQUFDLEdBQUcsQ0FBSixJQUFTLENBQUMsS0FBS0UsT0FBTCxDQUFhQyxjQUEzQixFQUEyQztBQUN6Q1IsTUFBQUEsUUFBUSxDQUFDQSxRQUFRLENBQUNHLE1BQVQsR0FBa0IsQ0FBbkIsQ0FBUixJQUFpQ0csSUFBakM7QUFDRCxLQUZELE1BRU87QUFDTCxVQUFJLEtBQUtDLE9BQUwsQ0FBYUUsZ0JBQWpCLEVBQW1DO0FBQ2pDSCxRQUFBQSxJQUFJLEdBQUdBLElBQUksQ0FBQ0ksSUFBTCxFQUFQO0FBQ0Q7O0FBQ0RWLE1BQUFBLFFBQVEsQ0FBQ1csSUFBVCxDQUFjTCxJQUFkO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPTixRQUFQO0FBQ0QsQ0F4QkQ7O0FBMEJPLFNBQVNZLFNBQVQsQ0FBbUJDLE1BQW5CLEVBQTJCQyxNQUEzQixFQUFtQ0MsUUFBbkMsRUFBNkM7QUFBRSxTQUFPbkIsUUFBUSxDQUFDb0IsSUFBVCxDQUFjSCxNQUFkLEVBQXNCQyxNQUF0QixFQUE4QkMsUUFBOUIsQ0FBUDtBQUFpRDs7QUFDaEcsU0FBU0UsZ0JBQVQsQ0FBMEJKLE1BQTFCLEVBQWtDQyxNQUFsQyxFQUEwQ0MsUUFBMUMsRUFBb0Q7QUFDekQsTUFBSVIsT0FBTztBQUFHO0FBQUE7QUFBQTs7QUFBQVc7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQTtBQUFBLEdBQWdCSCxRQUFoQixFQUEwQjtBQUFDTixJQUFBQSxnQkFBZ0IsRUFBRTtBQUFuQixHQUExQixDQUFkO0FBQ0EsU0FBT2IsUUFBUSxDQUFDb0IsSUFBVCxDQUFjSCxNQUFkLEVBQXNCQyxNQUF0QixFQUE4QlAsT0FBOUIsQ0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERpZmYgZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7Z2VuZXJhdGVPcHRpb25zfSBmcm9tICcuLi91dGlsL3BhcmFtcyc7XG5cbmV4cG9ydCBjb25zdCBsaW5lRGlmZiA9IG5ldyBEaWZmKCk7XG5saW5lRGlmZi50b2tlbml6ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIGxldCByZXRMaW5lcyA9IFtdLFxuICAgICAgbGluZXNBbmROZXdsaW5lcyA9IHZhbHVlLnNwbGl0KC8oXFxufFxcclxcbikvKTtcblxuICAvLyBJZ25vcmUgdGhlIGZpbmFsIGVtcHR5IHRva2VuIHRoYXQgb2NjdXJzIGlmIHRoZSBzdHJpbmcgZW5kcyB3aXRoIGEgbmV3IGxpbmVcbiAgaWYgKCFsaW5lc0FuZE5ld2xpbmVzW2xpbmVzQW5kTmV3bGluZXMubGVuZ3RoIC0gMV0pIHtcbiAgICBsaW5lc0FuZE5ld2xpbmVzLnBvcCgpO1xuICB9XG5cbiAgLy8gTWVyZ2UgdGhlIGNvbnRlbnQgYW5kIGxpbmUgc2VwYXJhdG9ycyBpbnRvIHNpbmdsZSB0b2tlbnNcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lc0FuZE5ld2xpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGxpbmUgPSBsaW5lc0FuZE5ld2xpbmVzW2ldO1xuXG4gICAgaWYgKGkgJSAyICYmICF0aGlzLm9wdGlvbnMubmV3bGluZUlzVG9rZW4pIHtcbiAgICAgIHJldExpbmVzW3JldExpbmVzLmxlbmd0aCAtIDFdICs9IGxpbmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuaWdub3JlV2hpdGVzcGFjZSkge1xuICAgICAgICBsaW5lID0gbGluZS50cmltKCk7XG4gICAgICB9XG4gICAgICByZXRMaW5lcy5wdXNoKGxpbmUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXRMaW5lcztcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBkaWZmTGluZXMob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKSB7IHJldHVybiBsaW5lRGlmZi5kaWZmKG9sZFN0ciwgbmV3U3RyLCBjYWxsYmFjayk7IH1cbmV4cG9ydCBmdW5jdGlvbiBkaWZmVHJpbW1lZExpbmVzKG9sZFN0ciwgbmV3U3RyLCBjYWxsYmFjaykge1xuICBsZXQgb3B0aW9ucyA9IGdlbmVyYXRlT3B0aW9ucyhjYWxsYmFjaywge2lnbm9yZVdoaXRlc3BhY2U6IHRydWV9KTtcbiAgcmV0dXJuIGxpbmVEaWZmLmRpZmYob2xkU3RyLCBuZXdTdHIsIG9wdGlvbnMpO1xufVxuIl19\n",
    "/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.diffSentences = diffSentences;\nexports.sentenceDiff = void 0;\n\n/*istanbul ignore end*/\nvar\n/*istanbul ignore start*/\n_base = _interopRequireDefault(require(\"./base\"))\n/*istanbul ignore end*/\n;\n\n/*istanbul ignore start*/ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/*istanbul ignore end*/\nvar sentenceDiff = new\n/*istanbul ignore start*/\n_base\n/*istanbul ignore end*/\n[\n/*istanbul ignore start*/\n\"default\"\n/*istanbul ignore end*/\n]();\n\n/*istanbul ignore start*/\nexports.sentenceDiff = sentenceDiff;\n\n/*istanbul ignore end*/\nsentenceDiff.tokenize = function (value) {\n  return value.split(/(\\S.+?[.!?])(?=\\s+|$)/);\n};\n\nfunction diffSentences(oldStr, newStr, callback) {\n  return sentenceDiff.diff(oldStr, newStr, callback);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaWZmL3NlbnRlbmNlLmpzIl0sIm5hbWVzIjpbInNlbnRlbmNlRGlmZiIsIkRpZmYiLCJ0b2tlbml6ZSIsInZhbHVlIiwic3BsaXQiLCJkaWZmU2VudGVuY2VzIiwib2xkU3RyIiwibmV3U3RyIiwiY2FsbGJhY2siLCJkaWZmIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7QUFHTyxJQUFNQSxZQUFZLEdBQUc7QUFBSUM7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUE7QUFBQUEsQ0FBSixFQUFyQjs7Ozs7O0FBQ1BELFlBQVksQ0FBQ0UsUUFBYixHQUF3QixVQUFTQyxLQUFULEVBQWdCO0FBQ3RDLFNBQU9BLEtBQUssQ0FBQ0MsS0FBTixDQUFZLHVCQUFaLENBQVA7QUFDRCxDQUZEOztBQUlPLFNBQVNDLGFBQVQsQ0FBdUJDLE1BQXZCLEVBQStCQyxNQUEvQixFQUF1Q0MsUUFBdkMsRUFBaUQ7QUFBRSxTQUFPUixZQUFZLENBQUNTLElBQWIsQ0FBa0JILE1BQWxCLEVBQTBCQyxNQUExQixFQUFrQ0MsUUFBbEMsQ0FBUDtBQUFxRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEaWZmIGZyb20gJy4vYmFzZSc7XG5cblxuZXhwb3J0IGNvbnN0IHNlbnRlbmNlRGlmZiA9IG5ldyBEaWZmKCk7XG5zZW50ZW5jZURpZmYudG9rZW5pemUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUuc3BsaXQoLyhcXFMuKz9bLiE/XSkoPz1cXHMrfCQpLyk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZGlmZlNlbnRlbmNlcyhvbGRTdHIsIG5ld1N0ciwgY2FsbGJhY2spIHsgcmV0dXJuIHNlbnRlbmNlRGlmZi5kaWZmKG9sZFN0ciwgbmV3U3RyLCBjYWxsYmFjayk7IH1cbiJdfQ==\n",
    "/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.diffWords = diffWords;\nexports.diffWordsWithSpace = diffWordsWithSpace;\nexports.wordDiff = void 0;\n\n/*istanbul ignore end*/\nvar\n/*istanbul ignore start*/\n_base = _interopRequireDefault(require(\"./base\"))\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_params = require(\"../util/params\")\n/*istanbul ignore end*/\n;\n\n/*istanbul ignore start*/ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/*istanbul ignore end*/\n// Based on https://en.wikipedia.org/wiki/Latin_script_in_Unicode\n//\n// Ranges and exceptions:\n// Latin-1 Supplement, 0080–00FF\n//  - U+00D7  × Multiplication sign\n//  - U+00F7  ÷ Division sign\n// Latin Extended-A, 0100–017F\n// Latin Extended-B, 0180–024F\n// IPA Extensions, 0250–02AF\n// Spacing Modifier Letters, 02B0–02FF\n//  - U+02C7  ˇ &#711;  Caron\n//  - U+02D8  ˘ &#728;  Breve\n//  - U+02D9  ˙ &#729;  Dot Above\n//  - U+02DA  ˚ &#730;  Ring Above\n//  - U+02DB  ˛ &#731;  Ogonek\n//  - U+02DC  ˜ &#732;  Small Tilde\n//  - U+02DD  ˝ &#733;  Double Acute Accent\n// Latin Extended Additional, 1E00–1EFF\nvar extendedWordChars = /^[A-Za-z\\xC0-\\u02C6\\u02C8-\\u02D7\\u02DE-\\u02FF\\u1E00-\\u1EFF]+$/;\nvar reWhitespace = /\\S/;\nvar wordDiff = new\n/*istanbul ignore start*/\n_base\n/*istanbul ignore end*/\n[\n/*istanbul ignore start*/\n\"default\"\n/*istanbul ignore end*/\n]();\n\n/*istanbul ignore start*/\nexports.wordDiff = wordDiff;\n\n/*istanbul ignore end*/\nwordDiff.equals = function (left, right) {\n  if (this.options.ignoreCase) {\n    left = left.toLowerCase();\n    right = right.toLowerCase();\n  }\n\n  return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);\n};\n\nwordDiff.tokenize = function (value) {\n  // All whitespace symbols except newline group into one token, each newline - in separate token\n  var tokens = value.split(/([^\\S\\r\\n]+|[()[\\]{}'\"\\r\\n]|\\b)/); // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.\n\n  for (var i = 0; i < tokens.length - 1; i++) {\n    // If we have an empty string in the next field and we have only word chars before and after, merge\n    if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {\n      tokens[i] += tokens[i + 2];\n      tokens.splice(i + 1, 2);\n      i--;\n    }\n  }\n\n  return tokens;\n};\n\nfunction diffWords(oldStr, newStr, options) {\n  options =\n  /*istanbul ignore start*/\n  (0,\n  /*istanbul ignore end*/\n\n  /*istanbul ignore start*/\n  _params\n  /*istanbul ignore end*/\n  .\n  /*istanbul ignore start*/\n  generateOptions)\n  /*istanbul ignore end*/\n  (options, {\n    ignoreWhitespace: true\n  });\n  return wordDiff.diff(oldStr, newStr, options);\n}\n\nfunction diffWordsWithSpace(oldStr, newStr, options) {\n  return wordDiff.diff(oldStr, newStr, options);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kaWZmL3dvcmQuanMiXSwibmFtZXMiOlsiZXh0ZW5kZWRXb3JkQ2hhcnMiLCJyZVdoaXRlc3BhY2UiLCJ3b3JkRGlmZiIsIkRpZmYiLCJlcXVhbHMiLCJsZWZ0IiwicmlnaHQiLCJvcHRpb25zIiwiaWdub3JlQ2FzZSIsInRvTG93ZXJDYXNlIiwiaWdub3JlV2hpdGVzcGFjZSIsInRlc3QiLCJ0b2tlbml6ZSIsInZhbHVlIiwidG9rZW5zIiwic3BsaXQiLCJpIiwibGVuZ3RoIiwic3BsaWNlIiwiZGlmZldvcmRzIiwib2xkU3RyIiwibmV3U3RyIiwiZ2VuZXJhdGVPcHRpb25zIiwiZGlmZiIsImRpZmZXb3Jkc1dpdGhTcGFjZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBTUEsaUJBQWlCLEdBQUcsK0RBQTFCO0FBRUEsSUFBTUMsWUFBWSxHQUFHLElBQXJCO0FBRU8sSUFBTUMsUUFBUSxHQUFHO0FBQUlDO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUFBLENBQUosRUFBakI7Ozs7OztBQUNQRCxRQUFRLENBQUNFLE1BQVQsR0FBa0IsVUFBU0MsSUFBVCxFQUFlQyxLQUFmLEVBQXNCO0FBQ3RDLE1BQUksS0FBS0MsT0FBTCxDQUFhQyxVQUFqQixFQUE2QjtBQUMzQkgsSUFBQUEsSUFBSSxHQUFHQSxJQUFJLENBQUNJLFdBQUwsRUFBUDtBQUNBSCxJQUFBQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ0csV0FBTixFQUFSO0FBQ0Q7O0FBQ0QsU0FBT0osSUFBSSxLQUFLQyxLQUFULElBQW1CLEtBQUtDLE9BQUwsQ0FBYUcsZ0JBQWIsSUFBaUMsQ0FBQ1QsWUFBWSxDQUFDVSxJQUFiLENBQWtCTixJQUFsQixDQUFsQyxJQUE2RCxDQUFDSixZQUFZLENBQUNVLElBQWIsQ0FBa0JMLEtBQWxCLENBQXhGO0FBQ0QsQ0FORDs7QUFPQUosUUFBUSxDQUFDVSxRQUFULEdBQW9CLFVBQVNDLEtBQVQsRUFBZ0I7QUFDbEM7QUFDQSxNQUFJQyxNQUFNLEdBQUdELEtBQUssQ0FBQ0UsS0FBTixDQUFZLGlDQUFaLENBQWIsQ0FGa0MsQ0FJbEM7O0FBQ0EsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRixNQUFNLENBQUNHLE1BQVAsR0FBZ0IsQ0FBcEMsRUFBdUNELENBQUMsRUFBeEMsRUFBNEM7QUFDMUM7QUFDQSxRQUFJLENBQUNGLE1BQU0sQ0FBQ0UsQ0FBQyxHQUFHLENBQUwsQ0FBUCxJQUFrQkYsTUFBTSxDQUFDRSxDQUFDLEdBQUcsQ0FBTCxDQUF4QixJQUNLaEIsaUJBQWlCLENBQUNXLElBQWxCLENBQXVCRyxNQUFNLENBQUNFLENBQUQsQ0FBN0IsQ0FETCxJQUVLaEIsaUJBQWlCLENBQUNXLElBQWxCLENBQXVCRyxNQUFNLENBQUNFLENBQUMsR0FBRyxDQUFMLENBQTdCLENBRlQsRUFFZ0Q7QUFDOUNGLE1BQUFBLE1BQU0sQ0FBQ0UsQ0FBRCxDQUFOLElBQWFGLE1BQU0sQ0FBQ0UsQ0FBQyxHQUFHLENBQUwsQ0FBbkI7QUFDQUYsTUFBQUEsTUFBTSxDQUFDSSxNQUFQLENBQWNGLENBQUMsR0FBRyxDQUFsQixFQUFxQixDQUFyQjtBQUNBQSxNQUFBQSxDQUFDO0FBQ0Y7QUFDRjs7QUFFRCxTQUFPRixNQUFQO0FBQ0QsQ0FqQkQ7O0FBbUJPLFNBQVNLLFNBQVQsQ0FBbUJDLE1BQW5CLEVBQTJCQyxNQUEzQixFQUFtQ2QsT0FBbkMsRUFBNEM7QUFDakRBLEVBQUFBLE9BQU87QUFBRztBQUFBO0FBQUE7O0FBQUFlO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUFBO0FBQUE7QUFBQSxHQUFnQmYsT0FBaEIsRUFBeUI7QUFBQ0csSUFBQUEsZ0JBQWdCLEVBQUU7QUFBbkIsR0FBekIsQ0FBVjtBQUNBLFNBQU9SLFFBQVEsQ0FBQ3FCLElBQVQsQ0FBY0gsTUFBZCxFQUFzQkMsTUFBdEIsRUFBOEJkLE9BQTlCLENBQVA7QUFDRDs7QUFFTSxTQUFTaUIsa0JBQVQsQ0FBNEJKLE1BQTVCLEVBQW9DQyxNQUFwQyxFQUE0Q2QsT0FBNUMsRUFBcUQ7QUFDMUQsU0FBT0wsUUFBUSxDQUFDcUIsSUFBVCxDQUFjSCxNQUFkLEVBQXNCQyxNQUF0QixFQUE4QmQsT0FBOUIsQ0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERpZmYgZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7Z2VuZXJhdGVPcHRpb25zfSBmcm9tICcuLi91dGlsL3BhcmFtcyc7XG5cbi8vIEJhc2VkIG9uIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluX3NjcmlwdF9pbl9Vbmljb2RlXG4vL1xuLy8gUmFuZ2VzIGFuZCBleGNlcHRpb25zOlxuLy8gTGF0aW4tMSBTdXBwbGVtZW50LCAwMDgw4oCTMDBGRlxuLy8gIC0gVSswMEQ3ICDDlyBNdWx0aXBsaWNhdGlvbiBzaWduXG4vLyAgLSBVKzAwRjcgIMO3IERpdmlzaW9uIHNpZ25cbi8vIExhdGluIEV4dGVuZGVkLUEsIDAxMDDigJMwMTdGXG4vLyBMYXRpbiBFeHRlbmRlZC1CLCAwMTgw4oCTMDI0RlxuLy8gSVBBIEV4dGVuc2lvbnMsIDAyNTDigJMwMkFGXG4vLyBTcGFjaW5nIE1vZGlmaWVyIExldHRlcnMsIDAyQjDigJMwMkZGXG4vLyAgLSBVKzAyQzcgIMuHICYjNzExOyAgQ2Fyb25cbi8vICAtIFUrMDJEOCAgy5ggJiM3Mjg7ICBCcmV2ZVxuLy8gIC0gVSswMkQ5ICDLmSAmIzcyOTsgIERvdCBBYm92ZVxuLy8gIC0gVSswMkRBICDLmiAmIzczMDsgIFJpbmcgQWJvdmVcbi8vICAtIFUrMDJEQiAgy5sgJiM3MzE7ICBPZ29uZWtcbi8vICAtIFUrMDJEQyAgy5wgJiM3MzI7ICBTbWFsbCBUaWxkZVxuLy8gIC0gVSswMkREICDLnSAmIzczMzsgIERvdWJsZSBBY3V0ZSBBY2NlbnRcbi8vIExhdGluIEV4dGVuZGVkIEFkZGl0aW9uYWwsIDFFMDDigJMxRUZGXG5jb25zdCBleHRlbmRlZFdvcmRDaGFycyA9IC9eW2EtekEtWlxcdXtDMH0tXFx1e0ZGfVxcdXtEOH0tXFx1e0Y2fVxcdXtGOH0tXFx1ezJDNn1cXHV7MkM4fS1cXHV7MkQ3fVxcdXsyREV9LVxcdXsyRkZ9XFx1ezFFMDB9LVxcdXsxRUZGfV0rJC91O1xuXG5jb25zdCByZVdoaXRlc3BhY2UgPSAvXFxTLztcblxuZXhwb3J0IGNvbnN0IHdvcmREaWZmID0gbmV3IERpZmYoKTtcbndvcmREaWZmLmVxdWFscyA9IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gIGlmICh0aGlzLm9wdGlvbnMuaWdub3JlQ2FzZSkge1xuICAgIGxlZnQgPSBsZWZ0LnRvTG93ZXJDYXNlKCk7XG4gICAgcmlnaHQgPSByaWdodC50b0xvd2VyQ2FzZSgpO1xuICB9XG4gIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCAodGhpcy5vcHRpb25zLmlnbm9yZVdoaXRlc3BhY2UgJiYgIXJlV2hpdGVzcGFjZS50ZXN0KGxlZnQpICYmICFyZVdoaXRlc3BhY2UudGVzdChyaWdodCkpO1xufTtcbndvcmREaWZmLnRva2VuaXplID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgLy8gQWxsIHdoaXRlc3BhY2Ugc3ltYm9scyBleGNlcHQgbmV3bGluZSBncm91cCBpbnRvIG9uZSB0b2tlbiwgZWFjaCBuZXdsaW5lIC0gaW4gc2VwYXJhdGUgdG9rZW5cbiAgbGV0IHRva2VucyA9IHZhbHVlLnNwbGl0KC8oW15cXFNcXHJcXG5dK3xbKClbXFxde30nXCJcXHJcXG5dfFxcYikvKTtcblxuICAvLyBKb2luIHRoZSBib3VuZGFyeSBzcGxpdHMgdGhhdCB3ZSBkbyBub3QgY29uc2lkZXIgdG8gYmUgYm91bmRhcmllcy4gVGhpcyBpcyBwcmltYXJpbHkgdGhlIGV4dGVuZGVkIExhdGluIGNoYXJhY3RlciBzZXQuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIC8vIElmIHdlIGhhdmUgYW4gZW1wdHkgc3RyaW5nIGluIHRoZSBuZXh0IGZpZWxkIGFuZCB3ZSBoYXZlIG9ubHkgd29yZCBjaGFycyBiZWZvcmUgYW5kIGFmdGVyLCBtZXJnZVxuICAgIGlmICghdG9rZW5zW2kgKyAxXSAmJiB0b2tlbnNbaSArIDJdXG4gICAgICAgICAgJiYgZXh0ZW5kZWRXb3JkQ2hhcnMudGVzdCh0b2tlbnNbaV0pXG4gICAgICAgICAgJiYgZXh0ZW5kZWRXb3JkQ2hhcnMudGVzdCh0b2tlbnNbaSArIDJdKSkge1xuICAgICAgdG9rZW5zW2ldICs9IHRva2Vuc1tpICsgMl07XG4gICAgICB0b2tlbnMuc3BsaWNlKGkgKyAxLCAyKTtcbiAgICAgIGktLTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRpZmZXb3JkcyhvbGRTdHIsIG5ld1N0ciwgb3B0aW9ucykge1xuICBvcHRpb25zID0gZ2VuZXJhdGVPcHRpb25zKG9wdGlvbnMsIHtpZ25vcmVXaGl0ZXNwYWNlOiB0cnVlfSk7XG4gIHJldHVybiB3b3JkRGlmZi5kaWZmKG9sZFN0ciwgbmV3U3RyLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpZmZXb3Jkc1dpdGhTcGFjZShvbGRTdHIsIG5ld1N0ciwgb3B0aW9ucykge1xuICByZXR1cm4gd29yZERpZmYuZGlmZihvbGRTdHIsIG5ld1N0ciwgb3B0aW9ucyk7XG59XG4iXX0=\n",
    "/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"Diff\", {\n  enumerable: true,\n  get: function get() {\n    return _base[\"default\"];\n  }\n});\nObject.defineProperty(exports, \"diffChars\", {\n  enumerable: true,\n  get: function get() {\n    return _character.diffChars;\n  }\n});\nObject.defineProperty(exports, \"diffWords\", {\n  enumerable: true,\n  get: function get() {\n    return _word.diffWords;\n  }\n});\nObject.defineProperty(exports, \"diffWordsWithSpace\", {\n  enumerable: true,\n  get: function get() {\n    return _word.diffWordsWithSpace;\n  }\n});\nObject.defineProperty(exports, \"diffLines\", {\n  enumerable: true,\n  get: function get() {\n    return _line.diffLines;\n  }\n});\nObject.defineProperty(exports, \"diffTrimmedLines\", {\n  enumerable: true,\n  get: function get() {\n    return _line.diffTrimmedLines;\n  }\n});\nObject.defineProperty(exports, \"diffSentences\", {\n  enumerable: true,\n  get: function get() {\n    return _sentence.diffSentences;\n  }\n});\nObject.defineProperty(exports, \"diffCss\", {\n  enumerable: true,\n  get: function get() {\n    return _css.diffCss;\n  }\n});\nObject.defineProperty(exports, \"diffJson\", {\n  enumerable: true,\n  get: function get() {\n    return _json.diffJson;\n  }\n});\nObject.defineProperty(exports, \"canonicalize\", {\n  enumerable: true,\n  get: function get() {\n    return _json.canonicalize;\n  }\n});\nObject.defineProperty(exports, \"diffArrays\", {\n  enumerable: true,\n  get: function get() {\n    return _array.diffArrays;\n  }\n});\nObject.defineProperty(exports, \"applyPatch\", {\n  enumerable: true,\n  get: function get() {\n    return _apply.applyPatch;\n  }\n});\nObject.defineProperty(exports, \"applyPatches\", {\n  enumerable: true,\n  get: function get() {\n    return _apply.applyPatches;\n  }\n});\nObject.defineProperty(exports, \"parsePatch\", {\n  enumerable: true,\n  get: function get() {\n    return _parse.parsePatch;\n  }\n});\nObject.defineProperty(exports, \"merge\", {\n  enumerable: true,\n  get: function get() {\n    return _merge.merge;\n  }\n});\nObject.defineProperty(exports, \"structuredPatch\", {\n  enumerable: true,\n  get: function get() {\n    return _create.structuredPatch;\n  }\n});\nObject.defineProperty(exports, \"createTwoFilesPatch\", {\n  enumerable: true,\n  get: function get() {\n    return _create.createTwoFilesPatch;\n  }\n});\nObject.defineProperty(exports, \"createPatch\", {\n  enumerable: true,\n  get: function get() {\n    return _create.createPatch;\n  }\n});\nObject.defineProperty(exports, \"convertChangesToDMP\", {\n  enumerable: true,\n  get: function get() {\n    return _dmp.convertChangesToDMP;\n  }\n});\nObject.defineProperty(exports, \"convertChangesToXML\", {\n  enumerable: true,\n  get: function get() {\n    return _xml.convertChangesToXML;\n  }\n});\n\n/*istanbul ignore end*/\nvar\n/*istanbul ignore start*/\n_base = _interopRequireDefault(require(\"./diff/base\"))\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_character = require(\"./diff/character\")\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_word = require(\"./diff/word\")\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_line = require(\"./diff/line\")\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_sentence = require(\"./diff/sentence\")\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_css = require(\"./diff/css\")\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_json = require(\"./diff/json\")\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_array = require(\"./diff/array\")\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_apply = require(\"./patch/apply\")\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_parse = require(\"./patch/parse\")\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_merge = require(\"./patch/merge\")\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_create = require(\"./patch/create\")\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_dmp = require(\"./convert/dmp\")\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_xml = require(\"./convert/xml\")\n/*istanbul ignore end*/\n;\n\n/*istanbul ignore start*/ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/*istanbul ignore end*/\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdCQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBTZWUgTElDRU5TRSBmaWxlIGZvciB0ZXJtcyBvZiB1c2UgKi9cblxuLypcbiAqIFRleHQgZGlmZiBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBUaGlzIGxpYnJhcnkgc3VwcG9ydHMgdGhlIGZvbGxvd2luZyBBUElTOlxuICogSnNEaWZmLmRpZmZDaGFyczogQ2hhcmFjdGVyIGJ5IGNoYXJhY3RlciBkaWZmXG4gKiBKc0RpZmYuZGlmZldvcmRzOiBXb3JkIChhcyBkZWZpbmVkIGJ5IFxcYiByZWdleCkgZGlmZiB3aGljaCBpZ25vcmVzIHdoaXRlc3BhY2VcbiAqIEpzRGlmZi5kaWZmTGluZXM6IExpbmUgYmFzZWQgZGlmZlxuICpcbiAqIEpzRGlmZi5kaWZmQ3NzOiBEaWZmIHRhcmdldGVkIGF0IENTUyBjb250ZW50XG4gKlxuICogVGhlc2UgbWV0aG9kcyBhcmUgYmFzZWQgb24gdGhlIGltcGxlbWVudGF0aW9uIHByb3Bvc2VkIGluXG4gKiBcIkFuIE8oTkQpIERpZmZlcmVuY2UgQWxnb3JpdGhtIGFuZCBpdHMgVmFyaWF0aW9uc1wiIChNeWVycywgMTk4NikuXG4gKiBodHRwOi8vY2l0ZXNlZXJ4LmlzdC5wc3UuZWR1L3ZpZXdkb2Mvc3VtbWFyeT9kb2k9MTAuMS4xLjQuNjkyN1xuICovXG5pbXBvcnQgRGlmZiBmcm9tICcuL2RpZmYvYmFzZSc7XG5pbXBvcnQge2RpZmZDaGFyc30gZnJvbSAnLi9kaWZmL2NoYXJhY3Rlcic7XG5pbXBvcnQge2RpZmZXb3JkcywgZGlmZldvcmRzV2l0aFNwYWNlfSBmcm9tICcuL2RpZmYvd29yZCc7XG5pbXBvcnQge2RpZmZMaW5lcywgZGlmZlRyaW1tZWRMaW5lc30gZnJvbSAnLi9kaWZmL2xpbmUnO1xuaW1wb3J0IHtkaWZmU2VudGVuY2VzfSBmcm9tICcuL2RpZmYvc2VudGVuY2UnO1xuXG5pbXBvcnQge2RpZmZDc3N9IGZyb20gJy4vZGlmZi9jc3MnO1xuaW1wb3J0IHtkaWZmSnNvbiwgY2Fub25pY2FsaXplfSBmcm9tICcuL2RpZmYvanNvbic7XG5cbmltcG9ydCB7ZGlmZkFycmF5c30gZnJvbSAnLi9kaWZmL2FycmF5JztcblxuaW1wb3J0IHthcHBseVBhdGNoLCBhcHBseVBhdGNoZXN9IGZyb20gJy4vcGF0Y2gvYXBwbHknO1xuaW1wb3J0IHtwYXJzZVBhdGNofSBmcm9tICcuL3BhdGNoL3BhcnNlJztcbmltcG9ydCB7bWVyZ2V9IGZyb20gJy4vcGF0Y2gvbWVyZ2UnO1xuaW1wb3J0IHtzdHJ1Y3R1cmVkUGF0Y2gsIGNyZWF0ZVR3b0ZpbGVzUGF0Y2gsIGNyZWF0ZVBhdGNofSBmcm9tICcuL3BhdGNoL2NyZWF0ZSc7XG5cbmltcG9ydCB7Y29udmVydENoYW5nZXNUb0RNUH0gZnJvbSAnLi9jb252ZXJ0L2RtcCc7XG5pbXBvcnQge2NvbnZlcnRDaGFuZ2VzVG9YTUx9IGZyb20gJy4vY29udmVydC94bWwnO1xuXG5leHBvcnQge1xuICBEaWZmLFxuXG4gIGRpZmZDaGFycyxcbiAgZGlmZldvcmRzLFxuICBkaWZmV29yZHNXaXRoU3BhY2UsXG4gIGRpZmZMaW5lcyxcbiAgZGlmZlRyaW1tZWRMaW5lcyxcbiAgZGlmZlNlbnRlbmNlcyxcblxuICBkaWZmQ3NzLFxuICBkaWZmSnNvbixcblxuICBkaWZmQXJyYXlzLFxuXG4gIHN0cnVjdHVyZWRQYXRjaCxcbiAgY3JlYXRlVHdvRmlsZXNQYXRjaCxcbiAgY3JlYXRlUGF0Y2gsXG4gIGFwcGx5UGF0Y2gsXG4gIGFwcGx5UGF0Y2hlcyxcbiAgcGFyc2VQYXRjaCxcbiAgbWVyZ2UsXG4gIGNvbnZlcnRDaGFuZ2VzVG9ETVAsXG4gIGNvbnZlcnRDaGFuZ2VzVG9YTUwsXG4gIGNhbm9uaWNhbGl6ZVxufTtcbiJdfQ==\n",
    "/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applyPatch = applyPatch;\nexports.applyPatches = applyPatches;\n\n/*istanbul ignore end*/\nvar\n/*istanbul ignore start*/\n_parse = require(\"./parse\")\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_distanceIterator = _interopRequireDefault(require(\"../util/distance-iterator\"))\n/*istanbul ignore end*/\n;\n\n/*istanbul ignore start*/ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/*istanbul ignore end*/\nfunction applyPatch(source, uniDiff) {\n  /*istanbul ignore start*/\n  var\n  /*istanbul ignore end*/\n  options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (typeof uniDiff === 'string') {\n    uniDiff =\n    /*istanbul ignore start*/\n    (0,\n    /*istanbul ignore end*/\n\n    /*istanbul ignore start*/\n    _parse\n    /*istanbul ignore end*/\n    .\n    /*istanbul ignore start*/\n    parsePatch)\n    /*istanbul ignore end*/\n    (uniDiff);\n  }\n\n  if (Array.isArray(uniDiff)) {\n    if (uniDiff.length > 1) {\n      throw new Error('applyPatch only works with a single input.');\n    }\n\n    uniDiff = uniDiff[0];\n  } // Apply the diff to the input\n\n\n  var lines = source.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\n      delimiters = source.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\n      hunks = uniDiff.hunks,\n      compareLine = options.compareLine || function (lineNumber, line, operation, patchContent)\n  /*istanbul ignore start*/\n  {\n    return (\n      /*istanbul ignore end*/\n      line === patchContent\n    );\n  },\n      errorCount = 0,\n      fuzzFactor = options.fuzzFactor || 0,\n      minLine = 0,\n      offset = 0,\n      removeEOFNL,\n      addEOFNL;\n  /**\n   * Checks if the hunk exactly fits on the provided location\n   */\n\n\n  function hunkFits(hunk, toPos) {\n    for (var j = 0; j < hunk.lines.length; j++) {\n      var line = hunk.lines[j],\n          operation = line.length > 0 ? line[0] : ' ',\n          content = line.length > 0 ? line.substr(1) : line;\n\n      if (operation === ' ' || operation === '-') {\n        // Context sanity check\n        if (!compareLine(toPos + 1, lines[toPos], operation, content)) {\n          errorCount++;\n\n          if (errorCount > fuzzFactor) {\n            return false;\n          }\n        }\n\n        toPos++;\n      }\n    }\n\n    return true;\n  } // Search best fit offsets for each hunk based on the previous ones\n\n\n  for (var i = 0; i < hunks.length; i++) {\n    var hunk = hunks[i],\n        maxLine = lines.length - hunk.oldLines,\n        localOffset = 0,\n        toPos = offset + hunk.oldStart - 1;\n    var iterator =\n    /*istanbul ignore start*/\n    (0,\n    /*istanbul ignore end*/\n\n    /*istanbul ignore start*/\n    _distanceIterator\n    /*istanbul ignore end*/\n    [\n    /*istanbul ignore start*/\n    \"default\"\n    /*istanbul ignore end*/\n    ])(toPos, minLine, maxLine);\n\n    for (; localOffset !== undefined; localOffset = iterator()) {\n      if (hunkFits(hunk, toPos + localOffset)) {\n        hunk.offset = offset += localOffset;\n        break;\n      }\n    }\n\n    if (localOffset === undefined) {\n      return false;\n    } // Set lower text limit to end of the current hunk, so next ones don't try\n    // to fit over already patched text\n\n\n    minLine = hunk.offset + hunk.oldStart + hunk.oldLines;\n  } // Apply patch hunks\n\n\n  var diffOffset = 0;\n\n  for (var _i = 0; _i < hunks.length; _i++) {\n    var _hunk = hunks[_i],\n        _toPos = _hunk.oldStart + _hunk.offset + diffOffset - 1;\n\n    diffOffset += _hunk.newLines - _hunk.oldLines;\n\n    for (var j = 0; j < _hunk.lines.length; j++) {\n      var line = _hunk.lines[j],\n          operation = line.length > 0 ? line[0] : ' ',\n          content = line.length > 0 ? line.substr(1) : line,\n          delimiter = _hunk.linedelimiters[j];\n\n      if (operation === ' ') {\n        _toPos++;\n      } else if (operation === '-') {\n        lines.splice(_toPos, 1);\n        delimiters.splice(_toPos, 1);\n        /* istanbul ignore else */\n      } else if (operation === '+') {\n        lines.splice(_toPos, 0, content);\n        delimiters.splice(_toPos, 0, delimiter);\n        _toPos++;\n      } else if (operation === '\\\\') {\n        var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;\n\n        if (previousOperation === '+') {\n          removeEOFNL = true;\n        } else if (previousOperation === '-') {\n          addEOFNL = true;\n        }\n      }\n    }\n  } // Handle EOFNL insertion/removal\n\n\n  if (removeEOFNL) {\n    while (!lines[lines.length - 1]) {\n      lines.pop();\n      delimiters.pop();\n    }\n  } else if (addEOFNL) {\n    lines.push('');\n    delimiters.push('\\n');\n  }\n\n  for (var _k = 0; _k < lines.length - 1; _k++) {\n    lines[_k] = lines[_k] + delimiters[_k];\n  }\n\n  return lines.join('');\n} // Wrapper that supports multiple file patches via callbacks.\n\n\nfunction applyPatches(uniDiff, options) {\n  if (typeof uniDiff === 'string') {\n    uniDiff =\n    /*istanbul ignore start*/\n    (0,\n    /*istanbul ignore end*/\n\n    /*istanbul ignore start*/\n    _parse\n    /*istanbul ignore end*/\n    .\n    /*istanbul ignore start*/\n    parsePatch)\n    /*istanbul ignore end*/\n    (uniDiff);\n  }\n\n  var currentIndex = 0;\n\n  function processIndex() {\n    var index = uniDiff[currentIndex++];\n\n    if (!index) {\n      return options.complete();\n    }\n\n    options.loadFile(index, function (err, data) {\n      if (err) {\n        return options.complete(err);\n      }\n\n      var updatedContent = applyPatch(data, index, options);\n      options.patched(index, updatedContent, function (err) {\n        if (err) {\n          return options.complete(err);\n        }\n\n        processIndex();\n      });\n    });\n  }\n\n  processIndex();\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",
    "/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.structuredPatch = structuredPatch;\nexports.formatPatch = formatPatch;\nexports.createTwoFilesPatch = createTwoFilesPatch;\nexports.createPatch = createPatch;\n\n/*istanbul ignore end*/\nvar\n/*istanbul ignore start*/\n_line = require(\"../diff/line\")\n/*istanbul ignore end*/\n;\n\n/*istanbul ignore start*/ function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*istanbul ignore end*/\nfunction structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof options.context === 'undefined') {\n    options.context = 4;\n  }\n\n  var diff =\n  /*istanbul ignore start*/\n  (0,\n  /*istanbul ignore end*/\n\n  /*istanbul ignore start*/\n  _line\n  /*istanbul ignore end*/\n  .\n  /*istanbul ignore start*/\n  diffLines)\n  /*istanbul ignore end*/\n  (oldStr, newStr, options);\n\n  if (!diff) {\n    return;\n  }\n\n  diff.push({\n    value: '',\n    lines: []\n  }); // Append an empty value to make cleanup easier\n\n  function contextLines(lines) {\n    return lines.map(function (entry) {\n      return ' ' + entry;\n    });\n  }\n\n  var hunks = [];\n  var oldRangeStart = 0,\n      newRangeStart = 0,\n      curRange = [],\n      oldLine = 1,\n      newLine = 1;\n\n  /*istanbul ignore start*/\n  var _loop = function _loop(\n  /*istanbul ignore end*/\n  i) {\n    var current = diff[i],\n        lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');\n    current.lines = lines;\n\n    if (current.added || current.removed) {\n      /*istanbul ignore start*/\n      var _curRange;\n\n      /*istanbul ignore end*/\n      // If we have previous context, start with that\n      if (!oldRangeStart) {\n        var prev = diff[i - 1];\n        oldRangeStart = oldLine;\n        newRangeStart = newLine;\n\n        if (prev) {\n          curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];\n          oldRangeStart -= curRange.length;\n          newRangeStart -= curRange.length;\n        }\n      } // Output our changes\n\n\n      /*istanbul ignore start*/\n\n      /*istanbul ignore end*/\n\n      /*istanbul ignore start*/\n      (_curRange =\n      /*istanbul ignore end*/\n      curRange).push.apply(\n      /*istanbul ignore start*/\n      _curRange\n      /*istanbul ignore end*/\n      ,\n      /*istanbul ignore start*/\n      _toConsumableArray(\n      /*istanbul ignore end*/\n      lines.map(function (entry) {\n        return (current.added ? '+' : '-') + entry;\n      }))); // Track the updated file position\n\n\n      if (current.added) {\n        newLine += lines.length;\n      } else {\n        oldLine += lines.length;\n      }\n    } else {\n      // Identical context lines. Track line changes\n      if (oldRangeStart) {\n        // Close out any changes that have been output (or join overlapping)\n        if (lines.length <= options.context * 2 && i < diff.length - 2) {\n          /*istanbul ignore start*/\n          var _curRange2;\n\n          /*istanbul ignore end*/\n          // Overlapping\n\n          /*istanbul ignore start*/\n\n          /*istanbul ignore end*/\n\n          /*istanbul ignore start*/\n          (_curRange2 =\n          /*istanbul ignore end*/\n          curRange).push.apply(\n          /*istanbul ignore start*/\n          _curRange2\n          /*istanbul ignore end*/\n          ,\n          /*istanbul ignore start*/\n          _toConsumableArray(\n          /*istanbul ignore end*/\n          contextLines(lines)));\n        } else {\n          /*istanbul ignore start*/\n          var _curRange3;\n\n          /*istanbul ignore end*/\n          // end the range and output\n          var contextSize = Math.min(lines.length, options.context);\n\n          /*istanbul ignore start*/\n\n          /*istanbul ignore end*/\n\n          /*istanbul ignore start*/\n          (_curRange3 =\n          /*istanbul ignore end*/\n          curRange).push.apply(\n          /*istanbul ignore start*/\n          _curRange3\n          /*istanbul ignore end*/\n          ,\n          /*istanbul ignore start*/\n          _toConsumableArray(\n          /*istanbul ignore end*/\n          contextLines(lines.slice(0, contextSize))));\n\n          var hunk = {\n            oldStart: oldRangeStart,\n            oldLines: oldLine - oldRangeStart + contextSize,\n            newStart: newRangeStart,\n            newLines: newLine - newRangeStart + contextSize,\n            lines: curRange\n          };\n\n          if (i >= diff.length - 2 && lines.length <= options.context) {\n            // EOF is inside this hunk\n            var oldEOFNewline = /\\n$/.test(oldStr);\n            var newEOFNewline = /\\n$/.test(newStr);\n            var noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;\n\n            if (!oldEOFNewline && noNlBeforeAdds && oldStr.length > 0) {\n              // special case: old has no eol and no trailing context; no-nl can end up before adds\n              // however, if the old file is empty, do not output the no-nl line\n              curRange.splice(hunk.oldLines, 0, '\\\\ No newline at end of file');\n            }\n\n            if (!oldEOFNewline && !noNlBeforeAdds || !newEOFNewline) {\n              curRange.push('\\\\ No newline at end of file');\n            }\n          }\n\n          hunks.push(hunk);\n          oldRangeStart = 0;\n          newRangeStart = 0;\n          curRange = [];\n        }\n      }\n\n      oldLine += lines.length;\n      newLine += lines.length;\n    }\n  };\n\n  for (var i = 0; i < diff.length; i++) {\n    /*istanbul ignore start*/\n    _loop(\n    /*istanbul ignore end*/\n    i);\n  }\n\n  return {\n    oldFileName: oldFileName,\n    newFileName: newFileName,\n    oldHeader: oldHeader,\n    newHeader: newHeader,\n    hunks: hunks\n  };\n}\n\nfunction formatPatch(diff) {\n  var ret = [];\n\n  if (diff.oldFileName == diff.newFileName) {\n    ret.push('Index: ' + diff.oldFileName);\n  }\n\n  ret.push('===================================================================');\n  ret.push('--- ' + diff.oldFileName + (typeof diff.oldHeader === 'undefined' ? '' : '\\t' + diff.oldHeader));\n  ret.push('+++ ' + diff.newFileName + (typeof diff.newHeader === 'undefined' ? '' : '\\t' + diff.newHeader));\n\n  for (var i = 0; i < diff.hunks.length; i++) {\n    var hunk = diff.hunks[i]; // Unified Diff Format quirk: If the chunk size is 0,\n    // the first number is one lower than one would expect.\n    // https://www.artima.com/weblogs/viewpost.jsp?thread=164293\n\n    if (hunk.oldLines === 0) {\n      hunk.oldStart -= 1;\n    }\n\n    if (hunk.newLines === 0) {\n      hunk.newStart -= 1;\n    }\n\n    ret.push('@@ -' + hunk.oldStart + ',' + hunk.oldLines + ' +' + hunk.newStart + ',' + hunk.newLines + ' @@');\n    ret.push.apply(ret, hunk.lines);\n  }\n\n  return ret.join('\\n') + '\\n';\n}\n\nfunction createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n  return formatPatch(structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options));\n}\n\nfunction createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {\n  return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",
    "/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calcLineCount = calcLineCount;\nexports.merge = merge;\n\n/*istanbul ignore end*/\nvar\n/*istanbul ignore start*/\n_create = require(\"./create\")\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_parse = require(\"./parse\")\n/*istanbul ignore end*/\n;\n\nvar\n/*istanbul ignore start*/\n_array = require(\"../util/array\")\n/*istanbul ignore end*/\n;\n\n/*istanbul ignore start*/ function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*istanbul ignore end*/\nfunction calcLineCount(hunk) {\n  /*istanbul ignore start*/\n  var _calcOldNewLineCount =\n  /*istanbul ignore end*/\n  calcOldNewLineCount(hunk.lines),\n      oldLines = _calcOldNewLineCount.oldLines,\n      newLines = _calcOldNewLineCount.newLines;\n\n  if (oldLines !== undefined) {\n    hunk.oldLines = oldLines;\n  } else {\n    delete hunk.oldLines;\n  }\n\n  if (newLines !== undefined) {\n    hunk.newLines = newLines;\n  } else {\n    delete hunk.newLines;\n  }\n}\n\nfunction merge(mine, theirs, base) {\n  mine = loadPatch(mine, base);\n  theirs = loadPatch(theirs, base);\n  var ret = {}; // For index we just let it pass through as it doesn't have any necessary meaning.\n  // Leaving sanity checks on this to the API consumer that may know more about the\n  // meaning in their own context.\n\n  if (mine.index || theirs.index) {\n    ret.index = mine.index || theirs.index;\n  }\n\n  if (mine.newFileName || theirs.newFileName) {\n    if (!fileNameChanged(mine)) {\n      // No header or no change in ours, use theirs (and ours if theirs does not exist)\n      ret.oldFileName = theirs.oldFileName || mine.oldFileName;\n      ret.newFileName = theirs.newFileName || mine.newFileName;\n      ret.oldHeader = theirs.oldHeader || mine.oldHeader;\n      ret.newHeader = theirs.newHeader || mine.newHeader;\n    } else if (!fileNameChanged(theirs)) {\n      // No header or no change in theirs, use ours\n      ret.oldFileName = mine.oldFileName;\n      ret.newFileName = mine.newFileName;\n      ret.oldHeader = mine.oldHeader;\n      ret.newHeader = mine.newHeader;\n    } else {\n      // Both changed... figure it out\n      ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);\n      ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);\n      ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);\n      ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);\n    }\n  }\n\n  ret.hunks = [];\n  var mineIndex = 0,\n      theirsIndex = 0,\n      mineOffset = 0,\n      theirsOffset = 0;\n\n  while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {\n    var mineCurrent = mine.hunks[mineIndex] || {\n      oldStart: Infinity\n    },\n        theirsCurrent = theirs.hunks[theirsIndex] || {\n      oldStart: Infinity\n    };\n\n    if (hunkBefore(mineCurrent, theirsCurrent)) {\n      // This patch does not overlap with any of the others, yay.\n      ret.hunks.push(cloneHunk(mineCurrent, mineOffset));\n      mineIndex++;\n      theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;\n    } else if (hunkBefore(theirsCurrent, mineCurrent)) {\n      // This patch does not overlap with any of the others, yay.\n      ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));\n      theirsIndex++;\n      mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;\n    } else {\n      // Overlap, merge as best we can\n      var mergedHunk = {\n        oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),\n        oldLines: 0,\n        newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),\n        newLines: 0,\n        lines: []\n      };\n      mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);\n      theirsIndex++;\n      mineIndex++;\n      ret.hunks.push(mergedHunk);\n    }\n  }\n\n  return ret;\n}\n\nfunction loadPatch(param, base) {\n  if (typeof param === 'string') {\n    if (/^@@/m.test(param) || /^Index:/m.test(param)) {\n      return (\n        /*istanbul ignore start*/\n        (0,\n        /*istanbul ignore end*/\n\n        /*istanbul ignore start*/\n        _parse\n        /*istanbul ignore end*/\n        .\n        /*istanbul ignore start*/\n        parsePatch)\n        /*istanbul ignore end*/\n        (param)[0]\n      );\n    }\n\n    if (!base) {\n      throw new Error('Must provide a base reference or pass in a patch');\n    }\n\n    return (\n      /*istanbul ignore start*/\n      (0,\n      /*istanbul ignore end*/\n\n      /*istanbul ignore start*/\n      _create\n      /*istanbul ignore end*/\n      .\n      /*istanbul ignore start*/\n      structuredPatch)\n      /*istanbul ignore end*/\n      (undefined, undefined, base, param)\n    );\n  }\n\n  return param;\n}\n\nfunction fileNameChanged(patch) {\n  return patch.newFileName && patch.newFileName !== patch.oldFileName;\n}\n\nfunction selectField(index, mine, theirs) {\n  if (mine === theirs) {\n    return mine;\n  } else {\n    index.conflict = true;\n    return {\n      mine: mine,\n      theirs: theirs\n    };\n  }\n}\n\nfunction hunkBefore(test, check) {\n  return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;\n}\n\nfunction cloneHunk(hunk, offset) {\n  return {\n    oldStart: hunk.oldStart,\n    oldLines: hunk.oldLines,\n    newStart: hunk.newStart + offset,\n    newLines: hunk.newLines,\n    lines: hunk.lines\n  };\n}\n\nfunction mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {\n  // This will generally result in a conflicted hunk, but there are cases where the context\n  // is the only overlap where we can successfully merge the content here.\n  var mine = {\n    offset: mineOffset,\n    lines: mineLines,\n    index: 0\n  },\n      their = {\n    offset: theirOffset,\n    lines: theirLines,\n    index: 0\n  }; // Handle any leading content\n\n  insertLeading(hunk, mine, their);\n  insertLeading(hunk, their, mine); // Now in the overlap content. Scan through and select the best changes from each.\n\n  while (mine.index < mine.lines.length && their.index < their.lines.length) {\n    var mineCurrent = mine.lines[mine.index],\n        theirCurrent = their.lines[their.index];\n\n    if ((mineCurrent[0] === '-' || mineCurrent[0] === '+') && (theirCurrent[0] === '-' || theirCurrent[0] === '+')) {\n      // Both modified ...\n      mutualChange(hunk, mine, their);\n    } else if (mineCurrent[0] === '+' && theirCurrent[0] === ' ') {\n      /*istanbul ignore start*/\n      var _hunk$lines;\n\n      /*istanbul ignore end*/\n      // Mine inserted\n\n      /*istanbul ignore start*/\n\n      /*istanbul ignore end*/\n\n      /*istanbul ignore start*/\n      (_hunk$lines =\n      /*istanbul ignore end*/\n      hunk.lines).push.apply(\n      /*istanbul ignore start*/\n      _hunk$lines\n      /*istanbul ignore end*/\n      ,\n      /*istanbul ignore start*/\n      _toConsumableArray(\n      /*istanbul ignore end*/\n      collectChange(mine)));\n    } else if (theirCurrent[0] === '+' && mineCurrent[0] === ' ') {\n      /*istanbul ignore start*/\n      var _hunk$lines2;\n\n      /*istanbul ignore end*/\n      // Theirs inserted\n\n      /*istanbul ignore start*/\n\n      /*istanbul ignore end*/\n\n      /*istanbul ignore start*/\n      (_hunk$lines2 =\n      /*istanbul ignore end*/\n      hunk.lines).push.apply(\n      /*istanbul ignore start*/\n      _hunk$lines2\n      /*istanbul ignore end*/\n      ,\n      /*istanbul ignore start*/\n      _toConsumableArray(\n      /*istanbul ignore end*/\n      collectChange(their)));\n    } else if (mineCurrent[0] === '-' && theirCurrent[0] === ' ') {\n      // Mine removed or edited\n      removal(hunk, mine, their);\n    } else if (theirCurrent[0] === '-' && mineCurrent[0] === ' ') {\n      // Their removed or edited\n      removal(hunk, their, mine, true);\n    } else if (mineCurrent === theirCurrent) {\n      // Context identity\n      hunk.lines.push(mineCurrent);\n      mine.index++;\n      their.index++;\n    } else {\n      // Context mismatch\n      conflict(hunk, collectChange(mine), collectChange(their));\n    }\n  } // Now push anything that may be remaining\n\n\n  insertTrailing(hunk, mine);\n  insertTrailing(hunk, their);\n  calcLineCount(hunk);\n}\n\nfunction mutualChange(hunk, mine, their) {\n  var myChanges = collectChange(mine),\n      theirChanges = collectChange(their);\n\n  if (allRemoves(myChanges) && allRemoves(theirChanges)) {\n    // Special case for remove changes that are supersets of one another\n    if (\n    /*istanbul ignore start*/\n    (0,\n    /*istanbul ignore end*/\n\n    /*istanbul ignore start*/\n    _array\n    /*istanbul ignore end*/\n    .\n    /*istanbul ignore start*/\n    arrayStartsWith)\n    /*istanbul ignore end*/\n    (myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {\n      /*istanbul ignore start*/\n      var _hunk$lines3;\n\n      /*istanbul ignore end*/\n\n      /*istanbul ignore start*/\n\n      /*istanbul ignore end*/\n\n      /*istanbul ignore start*/\n      (_hunk$lines3 =\n      /*istanbul ignore end*/\n      hunk.lines).push.apply(\n      /*istanbul ignore start*/\n      _hunk$lines3\n      /*istanbul ignore end*/\n      ,\n      /*istanbul ignore start*/\n      _toConsumableArray(\n      /*istanbul ignore end*/\n      myChanges));\n\n      return;\n    } else if (\n    /*istanbul ignore start*/\n    (0,\n    /*istanbul ignore end*/\n\n    /*istanbul ignore start*/\n    _array\n    /*istanbul ignore end*/\n    .\n    /*istanbul ignore start*/\n    arrayStartsWith)\n    /*istanbul ignore end*/\n    (theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {\n      /*istanbul ignore start*/\n      var _hunk$lines4;\n\n      /*istanbul ignore end*/\n\n      /*istanbul ignore start*/\n\n      /*istanbul ignore end*/\n\n      /*istanbul ignore start*/\n      (_hunk$lines4 =\n      /*istanbul ignore end*/\n      hunk.lines).push.apply(\n      /*istanbul ignore start*/\n      _hunk$lines4\n      /*istanbul ignore end*/\n      ,\n      /*istanbul ignore start*/\n      _toConsumableArray(\n      /*istanbul ignore end*/\n      theirChanges));\n\n      return;\n    }\n  } else if (\n  /*istanbul ignore start*/\n  (0,\n  /*istanbul ignore end*/\n\n  /*istanbul ignore start*/\n  _array\n  /*istanbul ignore end*/\n  .\n  /*istanbul ignore start*/\n  arrayEqual)\n  /*istanbul ignore end*/\n  (myChanges, theirChanges)) {\n    /*istanbul ignore start*/\n    var _hunk$lines5;\n\n    /*istanbul ignore end*/\n\n    /*istanbul ignore start*/\n\n    /*istanbul ignore end*/\n\n    /*istanbul ignore start*/\n    (_hunk$lines5 =\n    /*istanbul ignore end*/\n    hunk.lines).push.apply(\n    /*istanbul ignore start*/\n    _hunk$lines5\n    /*istanbul ignore end*/\n    ,\n    /*istanbul ignore start*/\n    _toConsumableArray(\n    /*istanbul ignore end*/\n    myChanges));\n\n    return;\n  }\n\n  conflict(hunk, myChanges, theirChanges);\n}\n\nfunction removal(hunk, mine, their, swap) {\n  var myChanges = collectChange(mine),\n      theirChanges = collectContext(their, myChanges);\n\n  if (theirChanges.merged) {\n    /*istanbul ignore start*/\n    var _hunk$lines6;\n\n    /*istanbul ignore end*/\n\n    /*istanbul ignore start*/\n\n    /*istanbul ignore end*/\n\n    /*istanbul ignore start*/\n    (_hunk$lines6 =\n    /*istanbul ignore end*/\n    hunk.lines).push.apply(\n    /*istanbul ignore start*/\n    _hunk$lines6\n    /*istanbul ignore end*/\n    ,\n    /*istanbul ignore start*/\n    _toConsumableArray(\n    /*istanbul ignore end*/\n    theirChanges.merged));\n  } else {\n    conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);\n  }\n}\n\nfunction conflict(hunk, mine, their) {\n  hunk.conflict = true;\n  hunk.lines.push({\n    conflict: true,\n    mine: mine,\n    theirs: their\n  });\n}\n\nfunction insertLeading(hunk, insert, their) {\n  while (insert.offset < their.offset && insert.index < insert.lines.length) {\n    var line = insert.lines[insert.index++];\n    hunk.lines.push(line);\n    insert.offset++;\n  }\n}\n\nfunction insertTrailing(hunk, insert) {\n  while (insert.index < insert.lines.length) {\n    var line = insert.lines[insert.index++];\n    hunk.lines.push(line);\n  }\n}\n\nfunction collectChange(state) {\n  var ret = [],\n      operation = state.lines[state.index][0];\n\n  while (state.index < state.lines.length) {\n    var line = state.lines[state.index]; // Group additions that are immediately after subtractions and treat them as one \"atomic\" modify change.\n\n    if (operation === '-' && line[0] === '+') {\n      operation = '+';\n    }\n\n    if (operation === line[0]) {\n      ret.push(line);\n      state.index++;\n    } else {\n      break;\n    }\n  }\n\n  return ret;\n}\n\nfunction collectContext(state, matchChanges) {\n  var changes = [],\n      merged = [],\n      matchIndex = 0,\n      contextChanges = false,\n      conflicted = false;\n\n  while (matchIndex < matchChanges.length && state.index < state.lines.length) {\n    var change = state.lines[state.index],\n        match = matchChanges[matchIndex]; // Once we've hit our add, then we are done\n\n    if (match[0] === '+') {\n      break;\n    }\n\n    contextChanges = contextChanges || change[0] !== ' ';\n    merged.push(match);\n    matchIndex++; // Consume any additions in the other block as a conflict to attempt\n    // to pull in the remaining context after this\n\n    if (change[0] === '+') {\n      conflicted = true;\n\n      while (change[0] === '+') {\n        changes.push(change);\n        change = state.lines[++state.index];\n      }\n    }\n\n    if (match.substr(1) === change.substr(1)) {\n      changes.push(change);\n      state.index++;\n    } else {\n      conflicted = true;\n    }\n  }\n\n  if ((matchChanges[matchIndex] || '')[0] === '+' && contextChanges) {\n    conflicted = true;\n  }\n\n  if (conflicted) {\n    return changes;\n  }\n\n  while (matchIndex < matchChanges.length) {\n    merged.push(matchChanges[matchIndex++]);\n  }\n\n  return {\n    merged: merged,\n    changes: changes\n  };\n}\n\nfunction allRemoves(changes) {\n  return changes.reduce(function (prev, change) {\n    return prev && change[0] === '-';\n  }, true);\n}\n\nfunction skipRemoveSuperset(state, removeChanges, delta) {\n  for (var i = 0; i < delta; i++) {\n    var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);\n\n    if (state.lines[state.index + i] !== ' ' + changeContent) {\n      return false;\n    }\n  }\n\n  state.index += delta;\n  return true;\n}\n\nfunction calcOldNewLineCount(lines) {\n  var oldLines = 0;\n  var newLines = 0;\n  lines.forEach(function (line) {\n    if (typeof line !== 'string') {\n      var myCount = calcOldNewLineCount(line.mine);\n      var theirCount = calcOldNewLineCount(line.theirs);\n\n      if (oldLines !== undefined) {\n        if (myCount.oldLines === theirCount.oldLines) {\n          oldLines += myCount.oldLines;\n        } else {\n          oldLines = undefined;\n        }\n      }\n\n      if (newLines !== undefined) {\n        if (myCount.newLines === theirCount.newLines) {\n          newLines += myCount.newLines;\n        } else {\n          newLines = undefined;\n        }\n      }\n    } else {\n      if (newLines !== undefined && (line[0] === '+' || line[0] === ' ')) {\n        newLines++;\n      }\n\n      if (oldLines !== undefined && (line[0] === '-' || line[0] === ' ')) {\n        oldLines++;\n      }\n    }\n  });\n  return {\n    oldLines: oldLines,\n    newLines: newLines\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",
    "/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parsePatch = parsePatch;\n\n/*istanbul ignore end*/\nfunction parsePatch(uniDiff) {\n  /*istanbul ignore start*/\n  var\n  /*istanbul ignore end*/\n  options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var diffstr = uniDiff.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\n      delimiters = uniDiff.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\n      list = [],\n      i = 0;\n\n  function parseIndex() {\n    var index = {};\n    list.push(index); // Parse diff metadata\n\n    while (i < diffstr.length) {\n      var line = diffstr[i]; // File header found, end parsing diff metadata\n\n      if (/^(\\-\\-\\-|\\+\\+\\+|@@)\\s/.test(line)) {\n        break;\n      } // Diff index\n\n\n      var header = /^(?:Index:|diff(?: -r \\w+)+)\\s+(.+?)\\s*$/.exec(line);\n\n      if (header) {\n        index.index = header[1];\n      }\n\n      i++;\n    } // Parse file headers if they are defined. Unified diff requires them, but\n    // there's no technical issues to have an isolated hunk without file header\n\n\n    parseFileHeader(index);\n    parseFileHeader(index); // Parse hunks\n\n    index.hunks = [];\n\n    while (i < diffstr.length) {\n      var _line = diffstr[i];\n\n      if (/^(Index:|diff|\\-\\-\\-|\\+\\+\\+)\\s/.test(_line)) {\n        break;\n      } else if (/^@@/.test(_line)) {\n        index.hunks.push(parseHunk());\n      } else if (_line && options.strict) {\n        // Ignore unexpected content unless in strict mode\n        throw new Error('Unknown line ' + (i + 1) + ' ' + JSON.stringify(_line));\n      } else {\n        i++;\n      }\n    }\n  } // Parses the --- and +++ headers, if none are found, no lines\n  // are consumed.\n\n\n  function parseFileHeader(index) {\n    var fileHeader = /^(---|\\+\\+\\+)\\s+(.*)$/.exec(diffstr[i]);\n\n    if (fileHeader) {\n      var keyPrefix = fileHeader[1] === '---' ? 'old' : 'new';\n      var data = fileHeader[2].split('\\t', 2);\n      var fileName = data[0].replace(/\\\\\\\\/g, '\\\\');\n\n      if (/^\".*\"$/.test(fileName)) {\n        fileName = fileName.substr(1, fileName.length - 2);\n      }\n\n      index[keyPrefix + 'FileName'] = fileName;\n      index[keyPrefix + 'Header'] = (data[1] || '').trim();\n      i++;\n    }\n  } // Parses a hunk\n  // This assumes that we are at the start of a hunk.\n\n\n  function parseHunk() {\n    var chunkHeaderIndex = i,\n        chunkHeaderLine = diffstr[i++],\n        chunkHeader = chunkHeaderLine.split(/@@ -(\\d+)(?:,(\\d+))? \\+(\\d+)(?:,(\\d+))? @@/);\n    var hunk = {\n      oldStart: +chunkHeader[1],\n      oldLines: typeof chunkHeader[2] === 'undefined' ? 1 : +chunkHeader[2],\n      newStart: +chunkHeader[3],\n      newLines: typeof chunkHeader[4] === 'undefined' ? 1 : +chunkHeader[4],\n      lines: [],\n      linedelimiters: []\n    }; // Unified Diff Format quirk: If the chunk size is 0,\n    // the first number is one lower than one would expect.\n    // https://www.artima.com/weblogs/viewpost.jsp?thread=164293\n\n    if (hunk.oldLines === 0) {\n      hunk.oldStart += 1;\n    }\n\n    if (hunk.newLines === 0) {\n      hunk.newStart += 1;\n    }\n\n    var addCount = 0,\n        removeCount = 0;\n\n    for (; i < diffstr.length; i++) {\n      // Lines starting with '---' could be mistaken for the \"remove line\" operation\n      // But they could be the header for the next file. Therefore prune such cases out.\n      if (diffstr[i].indexOf('--- ') === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf('+++ ') === 0 && diffstr[i + 2].indexOf('@@') === 0) {\n        break;\n      }\n\n      var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? ' ' : diffstr[i][0];\n\n      if (operation === '+' || operation === '-' || operation === ' ' || operation === '\\\\') {\n        hunk.lines.push(diffstr[i]);\n        hunk.linedelimiters.push(delimiters[i] || '\\n');\n\n        if (operation === '+') {\n          addCount++;\n        } else if (operation === '-') {\n          removeCount++;\n        } else if (operation === ' ') {\n          addCount++;\n          removeCount++;\n        }\n      } else {\n        break;\n      }\n    } // Handle the empty block count case\n\n\n    if (!addCount && hunk.newLines === 1) {\n      hunk.newLines = 0;\n    }\n\n    if (!removeCount && hunk.oldLines === 1) {\n      hunk.oldLines = 0;\n    } // Perform optional sanity checking\n\n\n    if (options.strict) {\n      if (addCount !== hunk.newLines) {\n        throw new Error('Added line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\n      }\n\n      if (removeCount !== hunk.oldLines) {\n        throw new Error('Removed line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\n      }\n    }\n\n    return hunk;\n  }\n\n  while (i < diffstr.length) {\n    parseIndex();\n  }\n\n  return list;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",
    "/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.arrayEqual = arrayEqual;\nexports.arrayStartsWith = arrayStartsWith;\n\n/*istanbul ignore end*/\nfunction arrayEqual(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  return arrayStartsWith(a, b);\n}\n\nfunction arrayStartsWith(array, start) {\n  if (start.length > array.length) {\n    return false;\n  }\n\n  for (var i = 0; i < start.length; i++) {\n    if (start[i] !== array[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2FycmF5LmpzIl0sIm5hbWVzIjpbImFycmF5RXF1YWwiLCJhIiwiYiIsImxlbmd0aCIsImFycmF5U3RhcnRzV2l0aCIsImFycmF5Iiwic3RhcnQiLCJpIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQU8sU0FBU0EsVUFBVCxDQUFvQkMsQ0FBcEIsRUFBdUJDLENBQXZCLEVBQTBCO0FBQy9CLE1BQUlELENBQUMsQ0FBQ0UsTUFBRixLQUFhRCxDQUFDLENBQUNDLE1BQW5CLEVBQTJCO0FBQ3pCLFdBQU8sS0FBUDtBQUNEOztBQUVELFNBQU9DLGVBQWUsQ0FBQ0gsQ0FBRCxFQUFJQyxDQUFKLENBQXRCO0FBQ0Q7O0FBRU0sU0FBU0UsZUFBVCxDQUF5QkMsS0FBekIsRUFBZ0NDLEtBQWhDLEVBQXVDO0FBQzVDLE1BQUlBLEtBQUssQ0FBQ0gsTUFBTixHQUFlRSxLQUFLLENBQUNGLE1BQXpCLEVBQWlDO0FBQy9CLFdBQU8sS0FBUDtBQUNEOztBQUVELE9BQUssSUFBSUksQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0QsS0FBSyxDQUFDSCxNQUExQixFQUFrQ0ksQ0FBQyxFQUFuQyxFQUF1QztBQUNyQyxRQUFJRCxLQUFLLENBQUNDLENBQUQsQ0FBTCxLQUFhRixLQUFLLENBQUNFLENBQUQsQ0FBdEIsRUFBMkI7QUFDekIsYUFBTyxLQUFQO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPLElBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBhcnJheUVxdWFsKGEsIGIpIHtcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBhcnJheVN0YXJ0c1dpdGgoYSwgYik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcnJheVN0YXJ0c1dpdGgoYXJyYXksIHN0YXJ0KSB7XG4gIGlmIChzdGFydC5sZW5ndGggPiBhcnJheS5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0YXJ0W2ldICE9PSBhcnJheVtpXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuIl19\n",
    "/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\n/*istanbul ignore end*/\n// Iterator that traverses in the range of [min, max], stepping\n// by distance from a given start position. I.e. for [0, 4], with\n// start of 2, this will iterate 2, 3, 1, 4, 0.\nfunction\n/*istanbul ignore start*/\n_default\n/*istanbul ignore end*/\n(start, minLine, maxLine) {\n  var wantForward = true,\n      backwardExhausted = false,\n      forwardExhausted = false,\n      localOffset = 1;\n  return function iterator() {\n    if (wantForward && !forwardExhausted) {\n      if (backwardExhausted) {\n        localOffset++;\n      } else {\n        wantForward = false;\n      } // Check if trying to fit beyond text length, and if not, check it fits\n      // after offset location (or desired location on first iteration)\n\n\n      if (start + localOffset <= maxLine) {\n        return localOffset;\n      }\n\n      forwardExhausted = true;\n    }\n\n    if (!backwardExhausted) {\n      if (!forwardExhausted) {\n        wantForward = true;\n      } // Check if trying to fit before text beginning, and if not, check it fits\n      // before offset location\n\n\n      if (minLine <= start - localOffset) {\n        return -localOffset++;\n      }\n\n      backwardExhausted = true;\n      return iterator();\n    } // We tried to fit hunk before text beginning and beyond text length, then\n    // hunk can't fit on the text. Return undefined\n\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2Rpc3RhbmNlLWl0ZXJhdG9yLmpzIl0sIm5hbWVzIjpbInN0YXJ0IiwibWluTGluZSIsIm1heExpbmUiLCJ3YW50Rm9yd2FyZCIsImJhY2t3YXJkRXhoYXVzdGVkIiwiZm9yd2FyZEV4aGF1c3RlZCIsImxvY2FsT2Zmc2V0IiwiaXRlcmF0b3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNlO0FBQUE7QUFBQTtBQUFBO0FBQUEsQ0FBU0EsS0FBVCxFQUFnQkMsT0FBaEIsRUFBeUJDLE9BQXpCLEVBQWtDO0FBQy9DLE1BQUlDLFdBQVcsR0FBRyxJQUFsQjtBQUFBLE1BQ0lDLGlCQUFpQixHQUFHLEtBRHhCO0FBQUEsTUFFSUMsZ0JBQWdCLEdBQUcsS0FGdkI7QUFBQSxNQUdJQyxXQUFXLEdBQUcsQ0FIbEI7QUFLQSxTQUFPLFNBQVNDLFFBQVQsR0FBb0I7QUFDekIsUUFBSUosV0FBVyxJQUFJLENBQUNFLGdCQUFwQixFQUFzQztBQUNwQyxVQUFJRCxpQkFBSixFQUF1QjtBQUNyQkUsUUFBQUEsV0FBVztBQUNaLE9BRkQsTUFFTztBQUNMSCxRQUFBQSxXQUFXLEdBQUcsS0FBZDtBQUNELE9BTG1DLENBT3BDO0FBQ0E7OztBQUNBLFVBQUlILEtBQUssR0FBR00sV0FBUixJQUF1QkosT0FBM0IsRUFBb0M7QUFDbEMsZUFBT0ksV0FBUDtBQUNEOztBQUVERCxNQUFBQSxnQkFBZ0IsR0FBRyxJQUFuQjtBQUNEOztBQUVELFFBQUksQ0FBQ0QsaUJBQUwsRUFBd0I7QUFDdEIsVUFBSSxDQUFDQyxnQkFBTCxFQUF1QjtBQUNyQkYsUUFBQUEsV0FBVyxHQUFHLElBQWQ7QUFDRCxPQUhxQixDQUt0QjtBQUNBOzs7QUFDQSxVQUFJRixPQUFPLElBQUlELEtBQUssR0FBR00sV0FBdkIsRUFBb0M7QUFDbEMsZUFBTyxDQUFDQSxXQUFXLEVBQW5CO0FBQ0Q7O0FBRURGLE1BQUFBLGlCQUFpQixHQUFHLElBQXBCO0FBQ0EsYUFBT0csUUFBUSxFQUFmO0FBQ0QsS0E5QndCLENBZ0N6QjtBQUNBOztBQUNELEdBbENEO0FBbUNEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSXRlcmF0b3IgdGhhdCB0cmF2ZXJzZXMgaW4gdGhlIHJhbmdlIG9mIFttaW4sIG1heF0sIHN0ZXBwaW5nXG4vLyBieSBkaXN0YW5jZSBmcm9tIGEgZ2l2ZW4gc3RhcnQgcG9zaXRpb24uIEkuZS4gZm9yIFswLCA0XSwgd2l0aFxuLy8gc3RhcnQgb2YgMiwgdGhpcyB3aWxsIGl0ZXJhdGUgMiwgMywgMSwgNCwgMC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBtaW5MaW5lLCBtYXhMaW5lKSB7XG4gIGxldCB3YW50Rm9yd2FyZCA9IHRydWUsXG4gICAgICBiYWNrd2FyZEV4aGF1c3RlZCA9IGZhbHNlLFxuICAgICAgZm9yd2FyZEV4aGF1c3RlZCA9IGZhbHNlLFxuICAgICAgbG9jYWxPZmZzZXQgPSAxO1xuXG4gIHJldHVybiBmdW5jdGlvbiBpdGVyYXRvcigpIHtcbiAgICBpZiAod2FudEZvcndhcmQgJiYgIWZvcndhcmRFeGhhdXN0ZWQpIHtcbiAgICAgIGlmIChiYWNrd2FyZEV4aGF1c3RlZCkge1xuICAgICAgICBsb2NhbE9mZnNldCsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FudEZvcndhcmQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgaWYgdHJ5aW5nIHRvIGZpdCBiZXlvbmQgdGV4dCBsZW5ndGgsIGFuZCBpZiBub3QsIGNoZWNrIGl0IGZpdHNcbiAgICAgIC8vIGFmdGVyIG9mZnNldCBsb2NhdGlvbiAob3IgZGVzaXJlZCBsb2NhdGlvbiBvbiBmaXJzdCBpdGVyYXRpb24pXG4gICAgICBpZiAoc3RhcnQgKyBsb2NhbE9mZnNldCA8PSBtYXhMaW5lKSB7XG4gICAgICAgIHJldHVybiBsb2NhbE9mZnNldDtcbiAgICAgIH1cblxuICAgICAgZm9yd2FyZEV4aGF1c3RlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFiYWNrd2FyZEV4aGF1c3RlZCkge1xuICAgICAgaWYgKCFmb3J3YXJkRXhoYXVzdGVkKSB7XG4gICAgICAgIHdhbnRGb3J3YXJkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgaWYgdHJ5aW5nIHRvIGZpdCBiZWZvcmUgdGV4dCBiZWdpbm5pbmcsIGFuZCBpZiBub3QsIGNoZWNrIGl0IGZpdHNcbiAgICAgIC8vIGJlZm9yZSBvZmZzZXQgbG9jYXRpb25cbiAgICAgIGlmIChtaW5MaW5lIDw9IHN0YXJ0IC0gbG9jYWxPZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIC1sb2NhbE9mZnNldCsrO1xuICAgICAgfVxuXG4gICAgICBiYWNrd2FyZEV4aGF1c3RlZCA9IHRydWU7XG4gICAgICByZXR1cm4gaXRlcmF0b3IoKTtcbiAgICB9XG5cbiAgICAvLyBXZSB0cmllZCB0byBmaXQgaHVuayBiZWZvcmUgdGV4dCBiZWdpbm5pbmcgYW5kIGJleW9uZCB0ZXh0IGxlbmd0aCwgdGhlblxuICAgIC8vIGh1bmsgY2FuJ3QgZml0IG9uIHRoZSB0ZXh0LiBSZXR1cm4gdW5kZWZpbmVkXG4gIH07XG59XG4iXX0=\n",
    "/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateOptions = generateOptions;\n\n/*istanbul ignore end*/\nfunction generateOptions(options, defaults) {\n  if (typeof options === 'function') {\n    defaults.callback = options;\n  } else if (options) {\n    for (var name in options) {\n      /* istanbul ignore else */\n      if (options.hasOwnProperty(name)) {\n        defaults[name] = options[name];\n      }\n    }\n  }\n\n  return defaults;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3BhcmFtcy5qcyJdLCJuYW1lcyI6WyJnZW5lcmF0ZU9wdGlvbnMiLCJvcHRpb25zIiwiZGVmYXVsdHMiLCJjYWxsYmFjayIsIm5hbWUiLCJoYXNPd25Qcm9wZXJ0eSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQU8sU0FBU0EsZUFBVCxDQUF5QkMsT0FBekIsRUFBa0NDLFFBQWxDLEVBQTRDO0FBQ2pELE1BQUksT0FBT0QsT0FBUCxLQUFtQixVQUF2QixFQUFtQztBQUNqQ0MsSUFBQUEsUUFBUSxDQUFDQyxRQUFULEdBQW9CRixPQUFwQjtBQUNELEdBRkQsTUFFTyxJQUFJQSxPQUFKLEVBQWE7QUFDbEIsU0FBSyxJQUFJRyxJQUFULElBQWlCSCxPQUFqQixFQUEwQjtBQUN4QjtBQUNBLFVBQUlBLE9BQU8sQ0FBQ0ksY0FBUixDQUF1QkQsSUFBdkIsQ0FBSixFQUFrQztBQUNoQ0YsUUFBQUEsUUFBUSxDQUFDRSxJQUFELENBQVIsR0FBaUJILE9BQU8sQ0FBQ0csSUFBRCxDQUF4QjtBQUNEO0FBQ0Y7QUFDRjs7QUFDRCxTQUFPRixRQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVPcHRpb25zKG9wdGlvbnMsIGRlZmF1bHRzKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGRlZmF1bHRzLmNhbGxiYWNrID0gb3B0aW9ucztcbiAgfSBlbHNlIGlmIChvcHRpb25zKSB7XG4gICAgZm9yIChsZXQgbmFtZSBpbiBvcHRpb25zKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgZGVmYXVsdHNbbmFtZV0gPSBvcHRpb25zW25hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGVmYXVsdHM7XG59XG4iXX0=\n",
    "/**\n * @fileoverview\n * This is the main class for using Elidable Texts,\n * a way to represent a larger, possibly multimodal document\n * to be used as prompt to an LLM.\n *\n * That document will need to be shortened to fit into a token budget.\n * Elidable Texts shorten it by dropping the least relevant lines,\n * and replacing them by ellipses (`[...]`).\n *\n * A typical way of using this class is to\n * - create an ElidableText from a some inputs,\n * - then call `makePrompt` to get a prompt that fits into a token budget.\n *\n * Like this:\n * ```\n * const question = new ElidableText(\n *   [`Could you look over Albert's PR and check whether we need to add tests for that one file?`, 0.5],\n *   [`They made the following changes to file ${this.filename} (in git diff format):`, 0.9],\n *   [this.diff, 0.7], // this.diff is an already constructed ElidableText\n *   [`The file now looks like this:`, 0.95],\n *   [documentWithLanguage, 0.8],\n *   [`Should I write tests for that?`, 1],\n * );\n * const prompt = question.makePrompt(1000); // makes sure no more than 1000 tokens\n * ```\n */\n\nimport {DocumentInfo} from '../prompt';\nimport {getTokenizer} from '../tokenization';\nimport {elidableTextForSourceCode} from './fromSourceCode';\nimport {LineWithValueAndCost} from './lineWithValueAndCost';\n\ntype InterpretableAsElidableText = string | ElidableText | DocumentInfo;\n\nexport class ElidableText {\n    lines: LineWithValueAndCost[] = [];\n\n    /**\n     * Create a text from a list of chunks, which can be strings or ElidableTexts.\n     * Supplying a number to the chunk corresponds to a priority.\n     * If the chunk is already elidable, the priorities are multiplied.\n     *\n     * If x is an ElidableText, then ElidableText(x) is the same as x.\n     * @param chunks\n     */\n    constructor(...chunks: (InterpretableAsElidableText | [InterpretableAsElidableText, number])[]) {\n        const lines: LineWithValueAndCost[] = [];\n        for (const chunk of chunks) {\n            // if array, take the second element as priority\n            const value = Array.isArray(chunk) ? chunk[1] : 1;\n            const input = Array.isArray(chunk) ? chunk[0] : chunk;\n            if (typeof input === 'string') {\n                input.split('\\n').forEach(line => lines.push(new LineWithValueAndCost(line, value)));\n            } else if (input instanceof ElidableText) {\n                lines.push(...input.lines.map(line => line.copy().adjustValue(value)));\n            } else if ('source' in input && 'languageId' in input) {\n                lines.push(...elidableTextForSourceCode(input).lines.map(line => line.copy().adjustValue(value)));\n            }\n        }\n        this.lines = lines;\n    }\n\n    adjust(multiplier: number): void {\n        this.lines.forEach(line => line.adjustValue(multiplier));\n    }\n\n    /** Change the cost of lines according to a specified function; e.g. to take into account different tokenziers */\n    recost(coster = (x: string) => getTokenizer().tokenLength(x + '\\n')): void {\n        this.lines.forEach(line => line.recost(coster));\n    }\n\n    /**\n     * Elides lines to make the prompt fit into a token budget.\n     * This is done by dropping the least desirable lines.\n     * @param maxTokens The maximum number of tokens to allow.\n     * @param ellipsis The string to use for ellipses.\n     * @param indentEllipses If true, indents ellipses with the minimum indentation of the elided lines.\n     * - only guarantees ellipses' indentation if there are sufficient tokens for it.\n     * - does not currently work well for tab-indented lines (will insert spaces instead of tabs)\n     * @param strategy \"removeLeastDesirable\" will greedily remove undesirable lines,\n     * \"removeLeastBangForBuck\" will remove the line that has the lowest value/cost ratio.\n     * The former is more likely to elide continguous blocks and thus often feels more natural.\n     * The latter can be more frugal by being less tempted to elide things like single whitespace lines.\n     * @param tokenizer The tokenizer to use for tokenizing the prompt.\n     */\n    makePrompt(\n        maxTokens: number,\n        ellipsis = '[...]',\n        indentEllipses = true,\n        strategy: 'removeLeastDesirable' | 'removeLeastBangForBuck' = 'removeLeastDesirable',\n        tokenizer = getTokenizer()\n    ): string {\n        // the function is factored out so that we can be sure that this.lines is not mutated\n        const lines = this.lines.map(line => line.copy());\n        return makePrompt(lines, maxTokens, ellipsis, indentEllipses, strategy, tokenizer);\n    }\n}\n\n/**\n * Worker function for {@link ElidableText.makePrompt}.\n * All params are the same except\n * @param lines The lines desired to be in the prompt -- will be mutated.\n */\nfunction makePrompt(\n    lines: LineWithValueAndCost[],\n    maxTokens: number,\n    ellipsis: string,\n    indentEllipses: boolean,\n    strategy: 'removeLeastDesirable' | 'removeLeastBangForBuck',\n    tokenizer: ReturnType<typeof getTokenizer>\n) {\n    if (tokenizer.tokenLength(ellipsis + '\\n') > maxTokens) {\n        throw new Error('maxTokens must be larger than the ellipsis length');\n    }\n    if (strategy === 'removeLeastBangForBuck') {\n        // adjust all line's values by dividing by their cost\n        lines.forEach(line => line.adjustValue(1 / line.cost));\n    }\n    // infiniteWorth is 1 bigger than the most desirable line\n    const infiniteWorth = lines.reduce((a, b) => Math.max(a, b.value), 0) + 1;\n    // indentationInfinity is longer than the longest line.text\n    const infiniteIndentation = lines.reduce((a, b) => Math.max(a, b.text.length), 0) + 1;\n    // the test of equality to possibly indented ellipses is whether it's identical to the trimmed ellipsis\n    const trimmedEllipsis = ellipsis.trim();\n\n    let totalCost = lines.reduce((sum, line) => sum + line.cost, 0);\n    let defensiveCounter = lines.length + 1;\n    while (totalCost > maxTokens && defensiveCounter-- >= -1) {\n        // find the least desirable line\n        const leastDesirable = lines.reduce((least, line) => {\n            if (line.value < least.value) {\n                return line;\n            } else {\n                return least;\n            }\n        });\n        // drop it, but replace with ellipsis if it's between two non-ellipsis lines\n        const index = lines.indexOf(leastDesirable);\n        // the right indentation is the indentation of the line (if not blank) or the most recent non-blank line\n        const mostRecentNonBlankLine = lines\n            .slice(0, index + 1)\n            .reverse()\n            .find(line => line.text.trim() !== '') ?? {text: ''};\n        const indentation = indentEllipses\n            ? Math.min(\n                  // the smallest one of: the index indentation, and the before and after indentation _should they be ellipses_\n                  // note that whitespace lines do not count\n                  mostRecentNonBlankLine.text.match(/^\\s*/)?.[0].length ?? 0,\n                  lines[index - 1]?.text.trim() === trimmedEllipsis\n                      ? lines[index - 1]?.text.match(/^\\s*/)?.[0].length ?? 0\n                      : infiniteIndentation,\n                  lines[index + 1]?.text.trim() === trimmedEllipsis\n                      ? lines[index + 1]?.text.match(/^\\s*/)?.[0].length ?? 0\n                      : infiniteIndentation\n              )\n            : 0;\n\n        // Known limitation: indentation will be off for tab-indented lines\n        const insert = ' '.repeat(indentation) + ellipsis;\n        const newEllipis = new LineWithValueAndCost(\n            insert,\n            infiniteWorth,\n            tokenizer.tokenLength(insert + '\\n'),\n            // validate only loosely -- infiniteWorth may be > 1, and that's ok here\n            'loose'\n        );\n\n        // now replace this line by the new ellipsis\n        lines.splice(index, 1, newEllipis);\n        // then delete the lines before and after if they are ellipses\n        if (lines[index + 1]?.text.trim() === trimmedEllipsis) {\n            lines.splice(index + 1, 1);\n        }\n        if (lines[index - 1]?.text.trim() === trimmedEllipsis) {\n            lines.splice(index - 1, 1);\n        }\n\n        const newTotalCost = lines.reduce((sum, line) => sum + line.cost, 0);\n        // if we don't make progress _and_ it's all ellipses, we've reached the case where we need to forgo indentation\n        if (newTotalCost >= totalCost && lines.every(line => line.value === infiniteWorth)) {\n            indentEllipses = false;\n        }\n        totalCost = newTotalCost;\n    }\n    if (defensiveCounter < 0) {\n        // this should not have happened, throw an error\n        throw new Error(\n            `Infinite loop in ElidableText.makePrompt: Defensive counter < 0 in ElidableText.makePrompt with end text:\\n ${lines\n                .map(line => line.text)\n                .join('\\n')}`\n        );\n    }\n    return lines.map(line => line.text).join('\\n');\n}\n",
    "import * as diff from 'diff';\nimport {flattenVirtual, mapLabels, parseTree, visitTree} from '../indentation';\nimport {DocumentInfo} from '../prompt';\nimport {ElidableText} from './elidableText';\nimport {fromTreeWithFocussedLines} from './fromIndentationTrees';\n\n/**\n * Returns two {@link ElidableText} objects, one for each of the two contents.\n * Lines that changed are focussed on.\n * @param oldContent\n * @param newContent\n * @returns\n */\nexport function elidableTextForDiff(\n    oldContent: string | DocumentInfo,\n    newContent: string | DocumentInfo\n): [ElidableText, ElidableText] {\n    // languageId is: if one of the contents is a DocumentInfo, use its, otherwise only if both are equal\n    const languageId =\n        typeof oldContent === 'string'\n            ? typeof newContent === 'string'\n                ? undefined\n                : newContent.languageId\n            : typeof newContent === 'string'\n            ? oldContent.languageId\n            : oldContent.languageId === newContent.languageId\n            ? oldContent.languageId\n            : undefined;\n    oldContent = typeof oldContent === 'string' ? oldContent : oldContent.source;\n    newContent = typeof newContent === 'string' ? newContent : newContent.source;\n\n    // collect lines that changed\n    const patch = diff.structuredPatch('', '', oldContent, newContent);\n    const changedLinesOld = new Set<number>();\n    const changedLinesNew = new Set<number>();\n    for (const hunk of patch.hunks) {\n        for (let i = hunk.oldStart; i < hunk.oldStart + hunk.oldLines; i++) {\n            changedLinesOld.add(i);\n        }\n        for (let i = hunk.newStart; i < hunk.newStart + hunk.newLines; i++) {\n            changedLinesNew.add(i);\n        }\n    }\n\n    // build indentation trees\n    const oldTree = mapLabels(flattenVirtual(parseTree(oldContent, languageId)), () => false);\n    const newTree = mapLabels(flattenVirtual(parseTree(newContent, languageId)), () => false);\n\n    // mark changed lines\n    visitTree(\n        oldTree,\n        node => {\n            if (node.type === 'line' || node.type === 'blank') {\n                if (changedLinesOld.has(node.lineNumber)) {\n                    node.label = true;\n                }\n            }\n        },\n        'topDown'\n    );\n    visitTree(\n        newTree,\n        node => {\n            if (node.type === 'line' || node.type === 'blank') {\n                if (changedLinesNew.has(node.lineNumber)) {\n                    node.label = true;\n                }\n            }\n        },\n        'topDown'\n    );\n\n    return [fromTreeWithFocussedLines(oldTree), fromTreeWithFocussedLines(newTree)];\n}\n",
    "/**\n * @fileoverview Utility functions for creating elidable texts from indentation trees.\n */\n\nimport {IndentationTree, deparseLine, foldTree, isBlank, mapLabels, visitTree} from '../indentation';\nimport {ElidableText} from './elidableText';\n\n/** All these costs are multiplicative, i.e. should be between 0 and 1 */\nexport type TreeTraversalConfig = {worthUp: number; worthSibling: number; worthDown: number};\nexport const DEFAULT_TREE_TRAVERSAL_CONFIG: TreeTraversalConfig = {\n    worthUp: 0.9,\n    worthSibling: 0.88,\n    worthDown: 0.8,\n};\n\n/**\n * Take some nodes of an indentation tree and make an elidable text from it,\n * valuing nodes closer to nodes labeled \"true\" more highly.\n * @param tree\n */\nexport function fromTreeWithFocussedLines(\n    tree: IndentationTree<boolean>,\n    config: TreeTraversalConfig = DEFAULT_TREE_TRAVERSAL_CONFIG\n): ElidableText {\n    // go through the tree and relabel the nodes with their distance from the nearest \"true\" node\n    const treeWithDistances = mapLabels(tree, (x: boolean) => (x ? (1 as number) : undefined));\n    // traverse the tree bottomUp to add config.costUp to the labels of the parents\n    visitTree(\n        treeWithDistances,\n        node => {\n            if (isBlank(node)) return;\n            const maxChildLabel = Math.max(...node.subs.map(child => child.label ?? 0));\n            node.label = Math.max(node.label ?? 0, maxChildLabel * config.worthUp);\n        },\n        'bottomUp'\n    );\n    // traverse the tree topDown and for all children, add config.costDown and config.costSibling\n    visitTree(\n        treeWithDistances,\n        node => {\n            if (isBlank(node)) {\n                return;\n            }\n            const values = node.subs.map(sub => sub.label ?? 0);\n            let new_values = [...values];\n            for (let i = 0; i < values.length; i++) {\n                if (values[i] === 0) {\n                    continue;\n                } else {\n                    new_values = new_values.map((v, j) =>\n                        Math.max(v, Math.pow(config.worthSibling, Math.abs(i - j)) * values[i])\n                    );\n                }\n            }\n            // add config.costDown\n            const nodeLabel = node.label;\n            if (nodeLabel !== undefined) {\n                new_values = new_values.map(v => Math.max(v, config.worthDown * nodeLabel));\n            }\n            node.subs.forEach((sub, i) => (sub.label = new_values[i]));\n        },\n        'topDown'\n    );\n    return fromTreeWithValuedLines(treeWithDistances);\n}\n\nexport function fromTreeWithValuedLines(tree: IndentationTree<number>): ElidableText {\n    const valuedLines = foldTree(\n        tree,\n        [] as [string, number][],\n        (node, acc) => {\n            if (node.type === 'line' || node.type === 'blank') {\n                acc.push(node.type === 'line' ? [deparseLine(node).trimEnd(), node.label ?? 0] : ['', node.label ?? 0]);\n            }\n            return acc;\n        },\n        'topDown'\n    );\n    return new ElidableText(...valuedLines);\n}\n",
    "import {flattenVirtual, isBlank, isLine, mapLabels, parseTree, visitTree} from '../indentation';\nimport {DocumentInfo} from '../prompt';\nimport {ElidableText} from './elidableText';\nimport {fromTreeWithFocussedLines} from './fromIndentationTrees';\n\n/**\n * Construct an {@link ElidableText} from a piece of source code, focussing on\n * the first line and last leaf that is not a closer.\n */\nexport function elidableTextForSourceCode(\n    contents: string | DocumentInfo,\n    focusOnLastLeaf = true,\n    focusOnFirstLine = true\n): ElidableText {\n    // if contents is a DocumentInfo, it has source and languageId, and we want to pass both to parseTree\n    const tree = typeof contents === 'string' ? parseTree(contents) : parseTree(contents.source, contents.languageId);\n    flattenVirtual(tree);\n    // we may want to include the last leaf that is not a closer, seeing the end as informative e.g. for appending\n    const treeWithFocussedLines = mapLabels<string, boolean>(tree, label => focusOnLastLeaf && label !== 'closer');\n    // if the label was closer, it's false now, but if there was no label, there still is no label\n    // let's make it explicit that a node is true iff it's not a closer and we do want to focusOnLastLeaf\n    visitTree(\n        treeWithFocussedLines,\n        node => {\n            if (node.label === undefined) {\n                node.label = focusOnLastLeaf && node.label !== false;\n            }\n        },\n        'topDown'\n    );\n    if (focusOnLastLeaf) {\n        visitTree(\n            treeWithFocussedLines,\n            node => {\n                if (node.label) {\n                    let foundLastTrue = false;\n                    for (const subnode of [...node.subs].reverse()) {\n                        if (subnode.label && !foundLastTrue) {\n                            foundLastTrue = true;\n                        } else {\n                            subnode.label = false;\n                        }\n                    }\n                } else {\n                    // all subs get label false\n                    for (const subnode of node.subs) {\n                        subnode.label = false;\n                    }\n                }\n                // we want to find the last _leaf_, so if there are subs, this is not it\n                if (node.subs.length > 0) {\n                    node.label = false;\n                }\n            },\n            'topDown'\n        );\n    }\n    // we may want to focus on the first lines, seeing the beginning as informative e.g. for the setup\n    if (focusOnFirstLine) {\n        visitTree(\n            treeWithFocussedLines,\n            node => {\n                node.label ||= (isLine(node) || isBlank(node)) && node.lineNumber == 0;\n            },\n            'topDown'\n        );\n    }\n\n    return fromTreeWithFocussedLines(treeWithFocussedLines);\n}\n",
    "export * from './elidableText';\nexport * from './fromDiff';\nexport * from './fromIndentationTrees';\nexport * from './fromSourceCode';\nexport * from './lineWithValueAndCost';\n",
    "import {getTokenizer} from '../tokenization';\n\n/**\n * A line of text together with:\n * * a value >= 0 representing how desirable it is (the higher the better)\n * * a cost >= 0 representing how costly it is to insert it, e.g. in tokens.\n * The text is expected to contain no \"\\n\" character.\n */\nexport class LineWithValueAndCost {\n    /**\n     * Create a line of text with a value and a cost.\n     * @param text The line of text without the `\\n` character.\n     * @param value The value, expressed from 0 (worthless) to 1 (essential). Values are expected to be combined multiplicatively.\n     * @param cost How costly it is to insert this line, e.g. in tokens. Costs are expected to be combined additively.\n     * @param validate Whether to validate the input. In some cases, it can make sense to extend the value to above 1 in very rare cases, but these must be deliberately allowed.\n     */\n    public constructor(\n        public readonly text: string,\n        private _value: number,\n        private _cost = getTokenizer().tokenLength(text + '\\n'),\n        validate: 'strict' | 'loose' | 'none' = 'strict'\n    ) {\n        // check that the text does not contain newlines\n        if (text.includes('\\n') && validate !== 'none') {\n            throw new Error('LineWithValueAndCost: text contains newline');\n        }\n        if (_value < 0 && validate !== 'none') {\n            throw new Error('LineWithValueAndCost: value is negative');\n        }\n        if (_cost < 0 && validate !== 'none') {\n            throw new Error('LineWithValueAndCost: cost is negative');\n        }\n        if (validate == 'strict' && _value > 1) {\n            throw new Error(\n                'Value should normally be between 0 and 1 -- set validation to `loose` to ignore this error'\n            );\n        }\n    }\n\n    public get value() {\n        return this._value;\n    }\n    public get cost() {\n        return this._cost;\n    }\n\n    /** Multiply the value with a multiplier, typically between 0 and 1 */\n    public adjustValue(multiplier: number): this {\n        this._value *= multiplier;\n        return this;\n    }\n\n    /** Change the cost of lines according to a specified function; e.g. to take into account different tokenizers */\n    public recost(coster = (x: string) => getTokenizer().tokenLength(x + '\\n')): this {\n        this._cost = coster(this.text);\n        return this;\n    }\n\n    public copy(): LineWithValueAndCost {\n        return new LineWithValueAndCost(this.text, this.value, this.cost, 'none');\n    }\n}\n",
    "import {promises as fsp} from 'fs';\n\n/**\n * The `FileStat`-type represents metadata about a file\n */\nexport interface FileStat {\n    /**\n     * The creation timestamp in milliseconds elapsed since January 1, 1970 00:00:00 UTC.\n     */\n    ctime: number;\n\n    /**\n     * The modification timestamp in milliseconds elapsed since January 1, 1970 00:00:00 UTC.\n     *\n     * *Note:* If the file changed, it is important to provide an updated `mtime` that advanced\n     * from the previous value. Otherwise there may be optimizations in place that will not show\n     * the updated file contents in an editor for example.\n     */\n\n    mtime: number;\n    /**\n     * The size in bytes.\n     *\n     * *Note:* If the file changed, it is important to provide an updated `size`. Otherwise there\n     * may be optimizations in place that will not show the updated file contents in an editor for\n     * example.\n     */\n    size: number;\n}\n\n/**\n * A basic file-system interface for reading files and checking their mtime.\n */\nexport abstract class FileSystem {\n    /**\n     * Read the entire contents of the given file.\n     *\n     * cf https://nodejs.org/api/fs.html#fs_fspromises_readfile_path_options\n     */\n    abstract readFile(uri: string): Promise<Uint8Array>;\n\n    /**\n     * Get the mtime in milliseconds of the given file.\n     *\n     * cf https://nodejs.org/api/fs.html#fs_stats_mtimems\n     */\n    abstract mtime(uri: string): Promise<number>;\n\n    abstract stat(uri: string): Promise<FileStat>;\n}\n\nexport const defaultFileSystem: FileSystem = {\n    readFile(uri: string) {\n        return fsp.readFile(uri);\n    },\n\n    async mtime(uri: string) {\n        let stat = await fsp.stat(uri);\n        return stat.mtimeMs;\n    },\n\n    async stat(uri: string): Promise<FileStat> {\n        const stat = await fsp.stat(uri);\n        return {\n            ctime: stat.ctimeMs,\n            mtime: stat.mtimeMs,\n            size: stat.size,\n        };\n    },\n};\n",
    "export type IndentationTree<L> = TopNode<L> | VirtualNode<L> | LineNode<L> | BlankNode<L>;\nexport type IndentationSubTree<L> = Exclude<IndentationTree<L>, TopNode<L>>;\n\ninterface NodeBase<L> {\n    label?: L;\n    subs: IndentationSubTree<L>[];\n}\n\n/**\n * Virtual nodes represent groupings are not directly visible in indentation.\n **/\nexport interface VirtualNode<L> extends NodeBase<L> {\n    type: 'virtual';\n    indentation: number;\n}\n\nexport interface TopNode<L> extends NodeBase<L> {\n    type: 'top';\n    indentation: -1;\n}\n\n/**\n * A line of source code and its sub-nodes\n * */\nexport interface LineNode<L> extends NodeBase<L> {\n    type: 'line';\n    indentation: number;\n    lineNumber: number;\n    sourceLine: string;\n}\n\n/**\n * A blank line\n */\nexport interface BlankNode<L> extends NodeBase<L> {\n    type: 'blank';\n    lineNumber: number;\n    subs: never[]; // Type trick to make it easier to code\n}\n\n/** Construct a virtual node */\nexport function virtualNode<L>(indentation: number, subs: IndentationSubTree<L>[], label?: L): VirtualNode<L> {\n    return {type: 'virtual', indentation, subs, label};\n}\n\n/** Construct a line node */\nexport function lineNode<L>(\n    indentation: number,\n    lineNumber: number,\n    sourceLine: string,\n    subs: IndentationSubTree<L>[],\n    label?: L\n): LineNode<L> {\n    if (sourceLine === '') {\n        throw new Error('Cannot create a line node with an empty source line');\n    }\n    return {type: 'line', indentation, lineNumber, sourceLine, subs, label};\n}\n\n/** Return a blank node */\nexport function blankNode(line: number): BlankNode<never> {\n    return {type: 'blank', lineNumber: line, subs: []};\n}\n\n/** Return a node representing the top node */\nexport function topNode<L>(subs?: IndentationSubTree<L>[]): TopNode<L> {\n    return {\n        type: 'top',\n        indentation: -1,\n        subs: subs ?? [],\n    };\n}\n\nexport function isBlank<L>(tree: IndentationTree<L>): tree is BlankNode<L> {\n    return tree.type === 'blank';\n}\n\nexport function isLine<L>(tree: IndentationTree<L>): tree is LineNode<L> {\n    return tree.type === 'line';\n}\n\nexport function isVirtual<L>(tree: IndentationTree<L>): tree is VirtualNode<L> {\n    return tree.type === 'virtual';\n}\n\nexport function isTop<L>(tree: IndentationTree<L>): tree is TopNode<L> {\n    return tree.type === 'top';\n}\n\n/**\n * Return the tree which consists of everything up to the line node with the\n * given number. All later siblings of that line node, recursively, are removed.\n *\n * This function does not assume the line numbers appear contiguously, but will\n * return anything before the numbered line, whether its line number is greater\n * or not.\n *\n * This is destructive and modifies the tree.\n */\nexport function cutTreeAfterLine(tree: IndentationTree<any>, lineNumber: number) {\n    function cut(tree: IndentationTree<any>): boolean {\n        if (!isVirtual(tree) && !isTop(tree) && tree.lineNumber === lineNumber) {\n            tree.subs = [];\n            return true;\n        }\n        for (let i = 0; i < tree.subs.length; i++) {\n            if (cut(tree.subs[i])) {\n                tree.subs = tree.subs.slice(0, i + 1);\n                return true;\n            }\n        }\n        return false;\n    }\n    cut(tree);\n}\n\n/**\n * A type expressing that JSON.parse(JSON.stringify(x)) === x.\n */\nexport type JsonStable = string | number | JsonStable[] | {[key: string]: JsonStable};\n\n/**\n * Return a deep duplicate of the tree -- this will only work if the labels can be stringified to parseable JSON.\n */\nexport function duplicateTree<L extends JsonStable>(tree: IndentationTree<L>): IndentationTree<L> {\n    return JSON.parse(JSON.stringify(tree));\n}\n",
    "import {IndentationTree, isBlank, isLine, isTop, isVirtual, JsonStable, LineNode} from './classes';\nimport {foldTree} from './manipulation';\n\n/**\n * Format only the given line node, and *NOT* its subnodes.\n * This essentially comprise indentation and a trailing newline.\n */\nexport function deparseLine(node: LineNode<any>): string {\n    return ' '.repeat(node.indentation) + node.sourceLine + '\\n';\n}\n\n/**\n * Return a flat string representation of the indentation tree.\n */\nexport function deparseTree<L>(tree: IndentationTree<L>): string {\n    function accumulator(tree: IndentationTree<L>, accum: string): string {\n        let str = '';\n        if (isLine(tree)) {\n            str = deparseLine(tree);\n        } else if (isBlank(tree)) {\n            str = '\\n';\n        }\n        return accum + str;\n    }\n    return foldTree(tree, '', accumulator, 'topDown');\n}\n\n/**\n * Return a list of flat strings whose concatenation equals `deparseTree`.\n * The source is cut at the lines whose labels appear in `cutAt`. In other\n * words, if a node has a labelled `A` that appears in `cutAt`, then there will\n * be at least three strings in the result: the concatenation of lines before\n * the node `A`, the lines covered by node `A`, and lines after the node `A`.\n *\n * FIXME: The cuts are *not* applied recursively: If e.g. node `A` has a\n * sub-node labelled `B` which is also in `cutAt`, then the result will still\n * contain only a single string for node `A`.\n *\n */\nexport function deparseAndCutTree<L>(tree: IndentationTree<L>, cutAt: L[]): {label: L | undefined; source: string}[] {\n    const cutAtSet = new Set(cutAt);\n    const cuts: {label: L | undefined; source: string}[] = [];\n    let curUndef = '';\n    // Reimplement visitTree to avoid descending into cut nodes.\n    function visit(tree: IndentationTree<L>) {\n        if (tree.label !== undefined && cutAtSet.has(tree.label)) {\n            if (curUndef !== '') {\n                cuts.push({label: undefined, source: curUndef});\n            }\n            cuts.push({\n                label: tree.label,\n                source: deparseTree(tree),\n            });\n            curUndef = '';\n        } else {\n            if (isLine(tree)) {\n                curUndef += deparseLine(tree);\n            }\n            tree.subs.forEach(visit);\n        }\n    }\n    visit(tree);\n    if (curUndef !== '') {\n        cuts.push({label: undefined, source: curUndef});\n    }\n    return cuts;\n}\n\n/**\n * Return a readable string representation of the tree.\n *\n * The output is closely related to building trees using the helper functions in\n * `indentation.test.ts`.\n */\nexport function describeTree(tree: IndentationTree<any>, indent = 0): string {\n    const ind = ' '.repeat(indent);\n    if (tree === undefined) {\n        return 'UNDEFINED NODE';\n    }\n    let children: string;\n    if (tree.subs === undefined) {\n        children = 'UNDEFINED SUBS';\n    } else {\n        children = tree.subs\n            .map((child: IndentationTree<any>) => {\n                return describeTree(child, indent + 2);\n            })\n            .join(',\\n');\n    }\n    if (children === '') {\n        children = '[]';\n    } else {\n        children = `[\\n${children}\\n      ${ind}]`;\n    }\n    const prefix = (isVirtual(tree) || isTop(tree) ? '   ' : String(tree.lineNumber).padStart(3, ' ')) + `:  ${ind}`;\n    const labelString = tree.label === undefined ? '' : JSON.stringify(tree.label);\n    if (isVirtual(tree) || isTop(tree)) {\n        return `${prefix}vnode(${tree.indentation}, ${labelString}, ${children})`;\n    } else if (isBlank(tree)) {\n        return `${prefix}blank(${labelString ?? ''})`;\n    } else {\n        return `${prefix}lnode(${tree.indentation}, ${labelString}, ${JSON.stringify(tree.sourceLine)}, ${children})`;\n    }\n}\n\n/**\n * Return a string that mimics the call that would construct the tree\n * This is less readable than describeTree, but useful to write code.\n */\nexport function encodeTree<T extends JsonStable>(tree: IndentationTree<T>, indent = ''): string {\n    const labelString = tree.label === undefined ? '' : `, ${JSON.stringify(tree.label)}`;\n\n    const subString =\n        !isBlank(tree) && tree.subs.length > 0\n            ? `[\\n${tree.subs.map(node => encodeTree(node, indent + '  ')).join(', \\n')}\\n${indent}]`\n            : '[]';\n\n    switch (tree.type) {\n        case 'blank':\n            return `${indent}blankNode(${tree.lineNumber}${labelString})`;\n        case 'top':\n            return `topNode(${subString}${labelString})`;\n        case 'virtual':\n            return `${indent}virtualNode(${tree.indentation}, ${subString}${labelString})`;\n        case 'line':\n            return `${indent}lineNode(${tree.indentation}, ${tree.lineNumber}, \"${tree.sourceLine}\", ${subString}${labelString})`;\n    }\n}\n\n/**\n * Return the first line number of the given tree.\n */\nexport function firstLineOf(tree: IndentationTree<any>): number | undefined {\n    if (isLine(tree) || isBlank(tree)) {\n        return tree.lineNumber;\n    }\n    for (const sub of tree.subs) {\n        const firstLine = firstLineOf(sub);\n        if (firstLine !== undefined) {\n            return firstLine;\n        }\n    }\n    return undefined;\n}\n\n/**\n * Return the last line number of the given tree.\n */\nexport function lastLineOf(tree: IndentationTree<any>): number | undefined {\n    let lastLine: number | undefined = undefined;\n    let i = tree.subs.length - 1;\n    while (i >= 0 && lastLine === undefined) {\n        lastLine = lastLineOf(tree.subs[i]);\n        i--;\n    }\n    if (lastLine === undefined && !isVirtual(tree) && !isTop(tree)) {\n        return tree.lineNumber;\n    } else {\n        return lastLine;\n    }\n}\n",
    "import {processJava} from './java';\nimport {processMarkdown} from './markdown';\nimport {registerLanguageSpecificParser} from './parsing';\n\nregisterLanguageSpecificParser('markdown', processMarkdown);\nregisterLanguageSpecificParser('java', processJava);\n\nexport * from './classes';\nexport * from './description';\nexport * from './manipulation';\nexport * from './parsing';\n",
    "import {IndentationTree, isBlank} from './classes';\nimport {visitTree} from './manipulation';\nimport {\n    LabelRule,\n    buildLabelRules,\n    combineClosersAndOpeners,\n    flattenVirtual,\n    labelLines,\n    labelVirtualInherited,\n} from './parsing';\n\n/**\n * Java labels.\n *\n *  * package: A package declaration;\n *  * import: An import stament\n *  * comment_single: Single-line comments starting with //\n *  * comment_multi: Multi-line comments starting with /*, or a vnode of\n *    multiple single-line comments.\n *  * annotation: A line starting with \"@\". Note that fields are habitually\n *    declared on one line, even if they have an annotation. In this case, the\n *    field will have the label \"annotation\" rather than \"member\".\n *  * closeBrace: A closing brace alone on a line.\n *  * member: Anything inside a class or interface that does not have a more\n *    specific label.\n */\nconst _javaLabelRules = {\n    package: /^package /,\n    import: /^import /,\n    class: /\\bclass /,\n    interface: /\\binterface /,\n    javadoc: /^\\/\\*\\*/,\n    comment_multi: /^\\/\\*[^*]/,\n    comment_single: /^\\/\\//,\n    annotation: /^@/,\n    opener: /^[\\[({]/,\n    closer: /^[\\])}]/,\n} as const;\nconst javaLabelRules: LabelRule<string>[] = buildLabelRules(_javaLabelRules);\n\n/**\n * processJava(parseRaw(text)) is supposed to serve as superior alternative to alternative parseTree(text, \"generic\")\n */\nexport function processJava<L>(originalTree: IndentationTree<L>): IndentationTree<L | string> {\n    let tree = originalTree as IndentationTree<L | string>;\n    labelLines(tree, javaLabelRules);\n    tree = combineClosersAndOpeners(tree);\n    tree = flattenVirtual(tree);\n    labelVirtualInherited(tree);\n    // Label all non-labelled subs of class and interface as member.\n    // We also relabel annotations that are direct subs of class or interface as\n    // member.\n    visitTree(\n        tree,\n        (tree: IndentationTree<L | string>) => {\n            if (tree.label === 'class' || tree.label === 'interface') {\n                for (const sub of tree.subs) {\n                    if (!isBlank(sub) && (sub.label === undefined || sub.label === 'annotation')) {\n                        sub.label = 'member';\n                    }\n                }\n            }\n        },\n        'bottomUp'\n    );\n    return tree;\n}\n",
    "import {IndentationSubTree, IndentationTree, TopNode, isTop, isVirtual, topNode} from './classes';\n\n/**\n * Clear all labels (and their types) from the tree.\n * This will modify the tree in place, or return a retyped tree.\n */\nexport function clearLabels(tree: IndentationTree<any>): IndentationTree<never> {\n    visitTree(\n        tree,\n        (tree: IndentationTree<any>) => {\n            tree.label = undefined;\n        },\n        'bottomUp'\n    );\n    return tree;\n}\n\n/** clear labels if condition is true */\nexport function clearLabelsIf<L, S>(\n    tree: IndentationTree<L | S>,\n    condition: (arg: L | S) => arg is S\n): IndentationTree<L> {\n    visitTree(\n        tree,\n        (tree: IndentationTree<L | S>) => {\n            tree.label = tree.label ? (condition(tree.label) ? undefined : tree.label) : undefined;\n        },\n        'bottomUp'\n    );\n    return tree as IndentationTree<L>;\n}\n\nexport function mapLabels<L1, L2>(\n    tree: IndentationSubTree<L1>,\n    map: (arg: L1) => L2 | undefined\n): IndentationSubTree<L2>;\nexport function mapLabels<L1, L2>(tree: TopNode<L1>, map: (arg: L1) => L2 | undefined): TopNode<L2>;\nexport function mapLabels<L1, L2>(tree: IndentationTree<L1>, map: (arg: L1) => L2 | undefined): IndentationTree<L2>;\n/**\n * Apply a type changing function to all labels.\n * This will return a new, retyped tree.\n * (For applying a type keeping function to a tree\n * that modifies it in place, use `visitTree`.)\n */\nexport function mapLabels<L1, L2>(tree: IndentationTree<L1>, map: (arg: L1) => L2 | undefined): IndentationTree<L2> {\n    switch (tree.type) {\n        case 'line':\n        case 'virtual':\n            const newSubs = tree.subs.map(sub => mapLabels(sub, map));\n            return {...tree, subs: newSubs, label: tree.label ? map(tree.label) : undefined};\n        case 'blank':\n            return {...tree, label: tree.label ? map(tree.label) : undefined};\n        case 'top':\n            return {\n                ...tree,\n                subs: tree.subs.map(sub => mapLabels(sub, map)),\n                label: tree.label ? map(tree.label) : undefined,\n            };\n    }\n}\n\n/**\n * Renumber the line numbers of the tree contiguously from 0 and up.\n */\nexport function resetLineNumbers(tree: IndentationTree<any>): void {\n    let lineNumber = 0;\n    function visitor(tree: IndentationTree<any>) {\n        if (!isVirtual(tree) && !isTop(tree)) {\n            tree.lineNumber = lineNumber;\n            lineNumber++;\n        }\n    }\n    visitTree(tree, visitor, 'topDown');\n}\n\n/**\n * Visit the tree with a function that is called on each node.\n *\n * If direction is topDown, then parents are visited before their children.\n * If direction is bottomUp, children are visited in order before their parents,\n * so that leaf nodes are visited first.\n */\nexport function visitTree<L>(\n    tree: IndentationTree<L>,\n    visitor: (tree: IndentationTree<L>) => void,\n    direction: 'topDown' | 'bottomUp'\n): void {\n    function _visit(tree: IndentationTree<L>) {\n        if (direction === 'topDown') {\n            visitor(tree);\n        }\n        tree.subs.forEach(subtree => {\n            _visit(subtree);\n        });\n        if (direction === 'bottomUp') {\n            visitor(tree);\n        }\n    }\n    _visit(tree);\n}\n\n/**\n * Visit the tree with a function that is called on each node --\n * if it returns false, children are not visited (in case of topDown),\n * or the parent is not visited anymore (in case of bottomUp).\n *\n * If direction is topDown, then parents are visited before their children.\n * If direction is bottomUp, children are visited in order before their parents,\n * so that leaf nodes are visited first.\n */\nexport function visitTreeConditionally<L>(\n    tree: IndentationTree<L>,\n    visitor: (tree: IndentationTree<L>) => boolean,\n    direction: 'topDown' | 'bottomUp'\n): void {\n    // IDEA: rewrite visitTree to reuse this code\n    function _visit(tree: IndentationTree<L>): boolean {\n        if (direction === 'topDown') {\n            if (!visitor(tree)) {\n                return false;\n            }\n        }\n        let shouldContinue = true;\n        tree.subs.forEach(subtree => {\n            shouldContinue = shouldContinue && _visit(subtree);\n        });\n        if (direction === 'bottomUp') {\n            shouldContinue = shouldContinue && visitor(tree);\n        }\n        return shouldContinue;\n    }\n    _visit(tree);\n}\n\n/**\n * Fold an accumulator function over the tree.\n *\n * If direction is topDown, then parents are visited before their children.\n * If direction is bottomUp, children are visited in order before their parents,\n * so that leaf nodes are visited first.\n */\nexport function foldTree<T, L>(\n    tree: IndentationTree<L>,\n    init: T,\n    accumulator: (tree: IndentationTree<L>, acc: T) => T,\n    direction: 'topDown' | 'bottomUp'\n): T {\n    let acc = init;\n    function visitor(tree: IndentationTree<L>) {\n        acc = accumulator(tree, acc);\n    }\n    visitTree(tree, visitor, direction);\n    return acc;\n}\n\nexport type Rebuilder<L> = (tree: IndentationTree<L>) => IndentationTree<L> | undefined;\n/**\n * Rebuild the tree from the bottom up by applying a function to each node.\n * The visitor function takes a node whose children have already been rebuilt,\n * and returns a new node to replace it (or undefined if it should be deleted).\n * Optionally, a function can be provided to skip nodes that should just be kept\n * without visiting them or their sub-nodes.\n */\nexport function rebuildTree<L>(\n    tree: IndentationTree<L>,\n    visitor: Rebuilder<L>,\n    skip?: (tree: IndentationTree<L>) => boolean\n): IndentationTree<L> {\n    const rebuild: Rebuilder<L> = (tree: IndentationTree<L>) => {\n        if (skip !== undefined && skip(tree)) {\n            return tree;\n        } else {\n            const newSubs = tree.subs.map(rebuild).filter(sub => sub !== undefined) as IndentationSubTree<L>[];\n            tree.subs = newSubs;\n            return visitor(tree);\n        }\n    };\n    const rebuilt = rebuild(tree);\n    if (rebuilt !== undefined) {\n        return rebuilt;\n    } else {\n        return topNode();\n    }\n}\n",
    "import {IndentationTree, isBlank, LineNode, TopNode, VirtualNode} from './classes';\nimport {buildLabelRules, flattenVirtual, groupBlocks, labelLines, LabelRule, labelVirtualInherited} from './parsing';\n\n/**\n\n */\nconst _MarkdownLabelRules = {\n    heading: /^# /,\n    subheading: /^## /,\n    subsubheading: /### /,\n} as const;\nconst MarkdownLabelRules: LabelRule<string>[] = buildLabelRules(_MarkdownLabelRules);\n\n/**\n * processMarkdown(parseRaw(text)) is supposed to serve as a superior alternative to parseTree(text, \"generic\")\n */\nexport function processMarkdown<L>(originalTree: IndentationTree<L>): IndentationTree<L | string> {\n    let tree = originalTree as IndentationTree<L | string>;\n    labelLines(tree, MarkdownLabelRules);\n\n    // We'll want to refer to the tree's subs, so let the type checker know it won't be blank\n    if (isBlank(tree)) {\n        return tree;\n    }\n\n    // the top level is ordered according to headings / subheadings / subsubheadings\n    function headingLevel(sub: IndentationTree<L | string>): number | undefined {\n        // 0 is the tree itself, so we start at 1\n        if (sub.label === 'heading') return 1;\n        if (sub.label === 'subheading') return 2;\n        if (sub.label === 'subsubheading') return 3;\n        return undefined;\n    }\n    let currentHierarchy: (TopNode<L | string> | LineNode<L | string> | VirtualNode<L | string>)[] = [tree];\n    let oldTreeSubs = [...tree.subs];\n    tree.subs = [];\n    for (const sub of oldTreeSubs) {\n        const level = headingLevel(sub);\n        if (level === undefined || isBlank(sub)) {\n            currentHierarchy[currentHierarchy.length - 1].subs.push(sub);\n        } else {\n            // take care of \"dangling\" levels, e.g. if we have a subsubheading after a heading\n            while (currentHierarchy.length < level) {\n                currentHierarchy.push(currentHierarchy[currentHierarchy.length - 1]);\n            }\n            // add this to the parent\n            currentHierarchy[level - 1].subs.push(sub);\n            // make this the tip of the hierarchy\n            currentHierarchy[level] = sub;\n            // delete all higher levels\n            while (currentHierarchy.length > level + 1) {\n                currentHierarchy.pop();\n            }\n        }\n    }\n\n    // now group paragraphs\n    tree = groupBlocks(tree);\n    tree = flattenVirtual(tree);\n    labelVirtualInherited(tree);\n\n    return tree;\n}\n",
    "import {\n    blankNode,\n    IndentationSubTree,\n    IndentationTree,\n    isBlank,\n    isLine,\n    isVirtual,\n    lineNode,\n    LineNode,\n    TopNode,\n    topNode,\n    virtualNode,\n    VirtualNode,\n} from './classes';\nimport {clearLabelsIf, Rebuilder, rebuildTree, visitTree} from './manipulation';\n\n/**\n * Perform a raw indentation-tree parse of a string. This is completely\n * language-agnostic and the returned tree is unlabeled.\n *\n *  - Blank lines pertain to the top-most node that they may, as restricted\n *    by next non-blank line. So e.g.\n *\n *         E\n *           e1\n *             e2\n *\n *           e3\n *\n *     Then e1.subs = [e2], and E.subs = [ e1, blank, e3 ].\n *\n */\nexport function parseRaw(source: string): IndentationTree<never> {\n    const rawLines = source.split('\\n');\n    // TODO: How to handle mix of tabs and spaces?\n    const indentations = rawLines.map(line => line.match(/^\\s*/)![0].length);\n    const lines = rawLines.map(line => line.trimLeft());\n    function parseNode(line: number): [LineNode<never>, number] {\n        const [subs, nextLine] = parseSubs(line + 1, indentations[line]);\n        const node: LineNode<never> = lineNode(indentations[line], line, lines[line], subs);\n        return [node, nextLine];\n    }\n    function parseSubs(initialLine: number, parentIndentation: number): [IndentationSubTree<never>[], number] {\n        let sub: IndentationTree<never> | undefined;\n        const subs: IndentationSubTree<never>[] = [];\n        let line = initialLine;\n        let lastBlank: number | undefined = undefined;\n        while (line < lines.length && (lines[line] === '' || indentations[line] > parentIndentation)) {\n            if (lines[line] === '') {\n                if (lastBlank === undefined) {\n                    lastBlank = line;\n                }\n                line += 1;\n            } else {\n                if (lastBlank !== undefined) {\n                    for (let i = lastBlank; i < line; i++) {\n                        subs.push(blankNode(i));\n                    }\n                    lastBlank = undefined;\n                }\n                [sub, line] = parseNode(line);\n                subs.push(sub);\n            }\n        }\n        // Trailing blanks are left for the grandparent\n        if (lastBlank !== undefined) {\n            line = lastBlank;\n        }\n        return [subs, line];\n    }\n    const [subs, parsedLine] = parseSubs(0, -1);\n    let line = parsedLine;\n    // Special case: trailing blank lines at end of file\n    while (line < lines.length && lines[line] === '') {\n        subs.push(blankNode(line));\n        line += 1;\n    }\n    if (line < lines.length) {\n        throw new Error(`Parsing did not go to end of file. Ended at ${line} out of ${lines.length}`);\n    }\n    return topNode(subs);\n}\n\ntype LineMatcher = (sourceLine: string) => boolean;\nexport interface LabelRule<L> {\n    matches: LineMatcher;\n    label: L | undefined;\n}\n\n/** Labels the line elements of the tree in-place according to rules */\nexport function labelLines<L>(tree: IndentationTree<L>, labelRules: LabelRule<L>[]): void {\n    function visitor(tree: IndentationTree<L>): void {\n        if (isLine(tree)) {\n            const rule = labelRules.find(rule => rule.matches(tree.sourceLine));\n            if (rule) {\n                tree.label = rule.label;\n            }\n        }\n    }\n    visitTree(tree, visitor, 'bottomUp');\n}\n\n/**\n * For each virtual node, if the node has only one non-blank sub, then label\n * the virtual node as that sub.\n */\nexport function labelVirtualInherited(tree: IndentationTree<any>): void {\n    function visitor(tree: IndentationTree<any>): void {\n        if (isVirtual(tree) && tree.label === undefined) {\n            const subs = tree.subs.filter(sub => !isBlank(sub));\n            if (subs.length === 1) {\n                tree.label = subs[0].label;\n            }\n        }\n    }\n    visitTree(tree, visitor, 'bottomUp');\n}\n\n/**\n * Function to convert a mapped object to a list of rules.\n * This allows some type magic for extracting a label type from a mapping of rules.\n */\nexport function buildLabelRules<L extends {[key: string]: RegExp | LineMatcher}>(ruleMap: L): LabelRule<keyof L>[] {\n    return (Object.keys(ruleMap) as (keyof L)[]).map(key => {\n        let matches: (sourceLine: string) => boolean;\n        if ((ruleMap[key] as RegExp).test) {\n            matches = sourceLine => (ruleMap[key] as RegExp).test(sourceLine);\n        } else {\n            matches = ruleMap[key] as LineMatcher;\n        }\n        return {\n            matches,\n            label: key,\n        };\n    });\n}\n\n/**\n * Fills the opener and closer indentation spec of\n * https://docs.google.com/document/d/1WxjTDzx8Qbf4Bklrp9KwiQsB4-kTOloAR5h86np3_OM/edit#heading=h.y5nobcviainb\n * 1. Openers alone in a line whose older sibling is a line are moved to be the first of that sibling's children,\n *    and their children integrated as subsequent children of their new parent.\n * 2. Closers following an older sibling (maybe with blanks in between) are moved to be the last of that sibling.\n * 3. If the closer in 2 has children themselves, their older siblings are wrapped in a virtual node\n */\nexport function combineClosersAndOpeners<L>(\n    tree: IndentationTree<L | 'opener' | 'closer'>\n): IndentationTree<L | 'opener' | 'closer'> {\n    // We'll make new virtual nodes, which comprise older siblings of a closer and get a temporary label\n    type S = L | 'opener' | 'closer' | 'newVirtual';\n    const rebuilder: Rebuilder<S> = function (tree: IndentationTree<S>) {\n        if (\n            tree.subs.length === 0 ||\n            tree.subs.findIndex(sub => sub.label === 'closer' || sub.label === 'opener') === -1\n        ) {\n            return tree;\n        }\n        const newSubs: IndentationSubTree<S>[] = [];\n        let lastNew: TopNode<S> | VirtualNode<S> | LineNode<S> | undefined;\n        for (let i = 0; i < tree.subs.length; i++) {\n            const sub = tree.subs[i];\n            const directOlderSibling = tree.subs[i - 1];\n            // 1. if opener whose older sibling is a line, move to first of that sibling's children\n            if (sub.label === 'opener' && directOlderSibling !== undefined && isLine(directOlderSibling)) {\n                // Move the bracket to be the last child of it\n                directOlderSibling.subs.push(sub);\n                sub.subs.forEach(sub => directOlderSibling.subs.push(sub));\n                sub.subs = [];\n            }\n            // 2. if a closer following an older sibling\n            else if (\n                sub.label === 'closer' &&\n                lastNew !== undefined &&\n                (isLine(sub) || isVirtual(sub)) &&\n                sub.indentation >= lastNew.indentation\n            ) {\n                // Move intervening blanks from newSubs to lastNew.subs\n                let j = newSubs.length - 1;\n                while (j > 0 && isBlank(newSubs[j])) {\n                    j -= 1;\n                }\n                lastNew.subs.push(...newSubs.splice(j + 1));\n\n                // 3.if the closer in 2 has children themselves, their older siblings are wrapped in a virtual node to distinguish them\n                // Except for leading blocks of virtual nodes which have already been wrapped that way\n                // i.e. take the longest initial subsequence of lastNew.subs that are all labeled 'virtual' and don't wrap those again\n                if (sub.subs.length > 0) {\n                    const firstNonVirtual = lastNew.subs.findIndex(sub => sub.label !== 'newVirtual');\n                    const subsToKeep = lastNew.subs.slice(0, firstNonVirtual);\n                    const subsToWrap = lastNew.subs.slice(firstNonVirtual);\n                    const wrappedSubs =\n                        subsToWrap.length > 0 ? [virtualNode(sub.indentation, subsToWrap, 'newVirtual')] : [];\n                    lastNew.subs = [...subsToKeep, ...wrappedSubs, sub];\n                } else {\n                    lastNew.subs.push(sub);\n                }\n            } else {\n                // nothing to do here, just add it normally\n                newSubs.push(sub);\n                if (!isBlank(sub)) {\n                    lastNew = sub;\n                }\n            }\n        }\n        tree.subs = newSubs;\n        return tree;\n    };\n    const returnTree = rebuildTree(tree, rebuilder);\n    clearLabelsIf<S, 'newVirtual'>(tree, (arg: S): arg is 'newVirtual' => arg === 'newVirtual');\n    // now returnTree does not have the helper label 'newVirtual' anymore\n    return returnTree as IndentationTree<L | 'opener' | 'closer'>;\n}\n\n/**\n * If there are more than 1 consecutive sibling separated from others by delimiters,\n * combine them into a virtual node.\n * The possibly several consecutive delimiters will be put with the preceding siblings into the virtual node.\n * Note that offside groupings should be done before this.\n */\nexport function groupBlocks<L>(\n    tree: IndentationTree<L>,\n    isDelimiter: (node: IndentationTree<L>) => boolean = isBlank,\n    label?: L\n): IndentationTree<L> {\n    const rebuilder: Rebuilder<L> = function (tree: IndentationTree<L>) {\n        if (tree.subs.length <= 1) {\n            return tree;\n        }\n        const newSubs: IndentationSubTree<L>[] = [];\n        let nodesSinceLastFlush: IndentationSubTree<L>[] = [];\n        let currentBlockIndentation: number | undefined;\n        let lastNodeWasDelimiter = false;\n\n        // we write to nodesSinceLastDelimiter as cache\n        // if we have a non-delimiter after a delimiter, we flush\n        // to a new virtual node appended to the newSubs array\n\n        function flushBlockIntoNewSubs(\n            final: boolean = false // if final, only wrap in virtual if there are newSubs already\n        ): void {\n            if (currentBlockIndentation !== undefined && (newSubs.length > 0 || !final)) {\n                const virtual = virtualNode(currentBlockIndentation, nodesSinceLastFlush, label);\n                newSubs.push(virtual);\n            } else {\n                nodesSinceLastFlush.forEach(node => newSubs.push(node));\n            }\n        }\n\n        for (let i = 0; i < tree.subs.length; i++) {\n            const sub = tree.subs[i];\n            const subIsDelimiter = isDelimiter(sub);\n            if (!subIsDelimiter && lastNodeWasDelimiter) {\n                flushBlockIntoNewSubs();\n                nodesSinceLastFlush = [];\n            }\n            lastNodeWasDelimiter = subIsDelimiter;\n            nodesSinceLastFlush.push(sub);\n            if (!isBlank(sub)) {\n                currentBlockIndentation = currentBlockIndentation ?? sub.indentation;\n            }\n        }\n\n        // treat the end of node like a block end, and make the virtual block if it wouldn't be a singleton\n        flushBlockIntoNewSubs(true);\n        tree.subs = newSubs;\n        return tree;\n    };\n    return rebuildTree(tree, rebuilder);\n}\n\n/**\n * Remove unlabeled virtual nodes which either:\n *  - Have one or no children\n *  - Are the only child of their parent\n * In either case, it is replaced by their children.\n */\nexport function flattenVirtual<L>(tree: IndentationTree<L>): IndentationTree<L> {\n    const rebuilder: Rebuilder<L> = function (tree) {\n        if (isVirtual(tree) && tree.label === undefined && tree.subs.length <= 1) {\n            if (tree.subs.length === 0) {\n                return undefined;\n            } else {\n                //tree.subs.length === 1\n                return tree.subs[0];\n            }\n        } else if (tree.subs.length === 1 && isVirtual(tree.subs[0]) && tree.subs[0].label === undefined) {\n            tree.subs = tree.subs[0].subs;\n        }\n        return tree;\n    };\n    return rebuildTree(tree, rebuilder);\n}\n\n/**\n * Generic labels.\n *\n *  * opener: A line starting with an opening parens, square bracket, or curly brace\n *  * closer: A line starting with a closing parens, square bracket, or curly brace\n */\nconst _genericLabelRules = {\n    opener: /^[\\[({]/,\n    closer: /^[\\])}]/,\n} as const;\nconst genericLabelRules: LabelRule<'opener' | 'closer'>[] = buildLabelRules(_genericLabelRules);\n\nconst LANGUAGE_SPECIFIC_PARSERS: {[key: string]: (raw: IndentationTree<never>) => IndentationTree<string>} = {};\n/**\n * Register a language-specific parser for a language.\n * This should normally be called in index.ts.\n */\nexport function registerLanguageSpecificParser(\n    language: string,\n    parser: (raw: IndentationTree<never>) => IndentationTree<string>\n): void {\n    LANGUAGE_SPECIFIC_PARSERS[language] = parser;\n}\n\nexport function parseTree(source: string, languageId?: string): IndentationTree<string> {\n    const raw = parseRaw(source);\n    const languageSpecificParser = LANGUAGE_SPECIFIC_PARSERS[languageId ?? ''];\n    if (languageSpecificParser) {\n        return languageSpecificParser(raw);\n    } else {\n        labelLines(raw, genericLabelRules);\n        const processedTree = combineClosersAndOpeners(raw);\n        return processedTree;\n    }\n}\n",
    "import {DocumentInfo} from './prompt';\n\n/**\n * Interface for writing single-line comments in a given language.\n * Does not include the terminal new-line character (i.e. for many languages,\n * `end` will just be the empty string).\n */\ninterface CommentMarker {\n    start: string;\n    end: string;\n}\n\n// Language files in VSCode:\n// https://code.visualstudio.com/docs/languages/identifiers#_known-language-identifiers\n//\n// Missing below from this list are:\n// Diff diff\n// Git\tgit-commit and git-rebase\n// JSON\tjson\n// ShaderLab\tshaderlab\n// Additional to that list are:\n// Erlang\n// Haskell\n// Kotlin\n// QL\n// Scala\n// Verilog\nexport const languageCommentMarkers: {[language: string]: CommentMarker} = {\n    abap: {start: '\"', end: ''},\n    bat: {start: 'REM', end: ''},\n    bibtex: {start: '%', end: ''},\n    blade: {start: '#', end: ''},\n    c: {start: '//', end: ''},\n    clojure: {start: ';', end: ''},\n    coffeescript: {start: '//', end: ''},\n    cpp: {start: '//', end: ''},\n    csharp: {start: '//', end: ''},\n    css: {start: '/*', end: '*/'},\n    dart: {start: '//', end: ''},\n    dockerfile: {start: '#', end: ''},\n    elixir: {start: '#', end: ''},\n    erb: {start: '<%#', end: '%>'},\n    erlang: {start: '%', end: ''},\n    fsharp: {start: '//', end: ''},\n    go: {start: '//', end: ''},\n    groovy: {start: '//', end: ''},\n    haml: {start: '-#', end: ''},\n    handlebars: {start: '{{!', end: '}}'},\n    haskell: {start: '--', end: ''},\n    html: {start: '<!--', end: '-->'},\n    ini: {start: ';', end: ''},\n    java: {start: '//', end: ''},\n    javascript: {start: '//', end: ''},\n    javascriptreact: {start: '//', end: ''},\n    jsonc: {start: '//', end: ''},\n    jsx: {start: '//', end: ''},\n    julia: {start: '#', end: ''},\n    kotlin: {start: '//', end: ''},\n    latex: {start: '%', end: ''},\n    less: {start: '//', end: ''},\n    lua: {start: '--', end: ''},\n    makefile: {start: '#', end: ''},\n    markdown: {start: '[]: #', end: ''},\n    'objective-c': {start: '//', end: ''},\n    'objective-cpp': {start: '//', end: ''},\n    perl: {start: '#', end: ''},\n    php: {start: '//', end: ''},\n    powershell: {start: '#', end: ''},\n    pug: {start: '//', end: ''},\n    python: {start: '#', end: ''},\n    ql: {start: '//', end: ''}, // QL is a query language for CodeQL\n    r: {start: '#', end: ''},\n    razor: {start: '<!--', end: '-->'},\n    ruby: {start: '#', end: ''},\n    rust: {start: '//', end: ''},\n    sass: {start: '//', end: ''},\n    scala: {start: '//', end: ''},\n    scss: {start: '//', end: ''},\n    shellscript: {start: '#', end: ''},\n    slim: {start: '/', end: ''},\n    solidity: {start: '//', end: ''},\n    sql: {start: '--', end: ''},\n    stylus: {start: '//', end: ''},\n    svelte: {start: '<!--', end: '-->'},\n    swift: {start: '//', end: ''},\n    terraform: {start: '#', end: ''},\n    tex: {start: '%', end: ''},\n    typescript: {start: '//', end: ''},\n    typescriptreact: {start: '//', end: ''},\n    vb: {start: \"'\", end: ''},\n    verilog: {start: '//', end: ''},\n    'vue-html': {start: '<!--', end: '-->'},\n    vue: {start: '//', end: ''},\n    xml: {start: '<!--', end: '-->'},\n    xsl: {start: '<!--', end: '-->'},\n    yaml: {start: '#', end: ''},\n};\n\nconst dontAddLanguageMarker: string[] = [\n    'php', // We don't know if the file starts with `<?php` or not\n    'plaintext', // Doesn't admit comments\n];\n\n// prettier-ignore\nconst shebangLines: { [language: string]: string } = {\n    \"html\":          \"<!DOCTYPE html>\",\n    \"python\":        \"#\\!/usr/bin/env python3\",\n    \"ruby\":          \"#\\!/usr/bin/env ruby\",\n    \"shellscript\":   \"#\\!/bin/sh\",\n    \"yaml\":          \"# YAML data\"\n}\n\n/**\n * Best-effort determining whether the top of the source already contains a\n * discernible language marker, in particular a shebang line\n * @param languageId The string name of the language\n * @returns True iff we determined a recognisable language marker\n */\n// prettier-ignore\nexport function hasLanguageMarker({ source } : DocumentInfo): boolean {\n    return source.startsWith(\"#\\!\") || source.startsWith(\"<!DOCTYPE\");\n}\n\n/**\n * Comment a single line of text in a given language.\n * E.g. for python, turn \"hello there\" into \"# hello there\"\n *\n * Note: This will not behave as you expect if `text` has multiple lines. In\n * that case, use {@link commentBlockAsSingles} instead.\n */\nexport function comment(text: string, languageId: string) {\n    const markers = languageCommentMarkers[languageId];\n    if (markers) {\n        const end = markers.end == '' ? '' : ' ' + markers.end;\n        return `${markers.start} ${text}${end}`;\n    }\n    return '';\n}\n\n/**\n * Comment a block of text using single-line comments.\n *\n * The returned comment block will have a trailing newline exactly when the\n * input does.\n */\nexport function commentBlockAsSingles(text: string, languageId: string) {\n    if (!languageCommentMarkers[languageId] || text === '') {\n        // Avoid spewing out a long list of blank lines\n        return '';\n    }\n    const trailingNewline = text.endsWith('\\n');\n    const lines = (trailingNewline ? text.slice(0, -1) : text).split('\\n');\n    const commented = lines.map(line => comment(line, languageId)).join('\\n');\n    return trailingNewline ? commented + '\\n' : commented;\n}\n\n/**\n * Return a one-line comment or text which describes the language of a\n * document, e.g. a shebang line or a comment.\n *\n * @param doc The document we want the marker for.\n * @returns A one-line string that describes the language.\n */\nexport function getLanguageMarker(doc: DocumentInfo): string {\n    const {languageId} = doc;\n    if (dontAddLanguageMarker.indexOf(languageId) === -1 && !hasLanguageMarker(doc)) {\n        if (languageId in shebangLines) {\n            return shebangLines[languageId];\n        } else {\n            return comment(`Language: ${languageId}`, languageId);\n        }\n    }\n    return '';\n}\n\n/**\n * Return a one-line comment containing the relative path of the document, if known.\n *\n * @param doc The document we want the marker for.\n * @returns A one-line comment that contains the relative path of the document.\n */\nexport function getPathMarker(doc: DocumentInfo): string {\n    if (doc.relativePath) {\n        return comment(`Path: ${doc.relativePath}`, doc.languageId);\n    }\n    return '';\n}\n\n/**\n * Appends a new line to a string if it does not already end with one.\n *\n * @param str String to append\n *\n * @returns A string with a new line escape character at the end.\n */\nexport function newLineEnded(str: string): string {\n    return str === '' || str.endsWith('\\n') ? str : str + '\\n';\n}\n",
    "import {resolve} from 'path';\nimport {Worker} from 'worker_threads';\n\nexport * from './elidableText';\nexport {FileStat, FileSystem} from './fileSystem';\nexport * from './indentation';\nexport {comment, commentBlockAsSingles, languageCommentMarkers} from './languageMarker';\nexport {SnippetOrchestrator} from './orchestrator';\nexport * from './parse';\nexport * from './parseBlock';\nexport * from './prompt';\nexport {CursorContextInfo, CursorContextOptions, getCursorContext} from './snippetInclusion/cursorContext';\nexport * from './snippetInclusion/cursorMatching';\nexport {NeighboringSnippetType, NeighboringTabsOption} from './snippetInclusion/neighboringFiles';\nexport {ScoredSnippet} from './snippetInclusion/selectRelevance';\nexport {SnippetProviderType, SnippetSemantics, SnippetWithProviderInfo} from './snippetInclusion/snippets';\nexport * from './tokenization';\n\n/**\n * Create a worker that can be used to invoke promptlib functions on a separate thread.\n *\n * The worker accepts messages of the form `{ id, fn, args }`, where `id` can be freely chosen by\n * the client, `fn` is the name of a function exported by the promptlib, and `args` is an array\n * of arguments to pass to the function.\n *\n * The worker will run the function named `fn` on a worker thread. If the function returns normally,\n * the worker sends a message `{ id, res }`, where `id` is the same as in the incoming message and\n * `res` is the result of the function. If the function throws an exception, the worker sends a\n * message `{ id, err }`, where `err` is the thrown exception.\n *\n * Note that arguments and results of functions invoked this way must be serializable as described\n * [in the Node.js documentation](https://nodejs.org/api/worker_threads.html#worker_threads_port_postmessage_value_transferlist).\n */\nexport function createWorker() {\n    return new Worker(resolve(__dirname, '..', 'dist', 'worker.js'));\n}\n",
    "import * as path from 'path';\nimport {dirname, extname, join} from 'path';\nimport {SyntaxNode} from 'web-tree-sitter';\nimport {FileSystem, defaultFileSystem} from './fileSystem';\nimport {getFirstPrecedingComment, parseTreeSitter, queryExports} from './parse';\nimport {DocumentInfoWithOffset} from './prompt';\n\n/**\n * Resolve the import `imp`, which is a TypeScript `import` statement appearing in a module whose\n * path is `importerPath`, using `fs`.\n *\n * If the import is not a local import (i.e., the import path does not start with `.`), or the file\n * it imports has an extension other than `.ts`, return `null`.\n */\nfunction resolveLocalTypeScriptImport(importerPath: string, imp: SyntaxNode): string | null {\n    let src = imp.namedChild(1)?.text.slice(1, -1);\n    if (!src || !src.startsWith('.')) return null;\n\n    if (extname(src) === '') {\n        src = src + '.ts';\n    } else if (extname(src) !== '.ts') {\n        return null;\n    }\n\n    return join(dirname(importerPath), src);\n}\n\n/**\n * Get a list of all names imported by `imp` (possibly with renaming), where\n * `imp` must be a TypeScript `import` statement.\n */\nfunction getTypescriptImportedNames(imp: SyntaxNode): {name: string; alias: string | undefined}[] {\n    let names = [];\n    if (imp.namedChild(0)?.type === 'import_clause') {\n        let importClause = imp.namedChild(0);\n        if (importClause?.namedChild(0)?.type === 'named_imports') {\n            let namedImports = importClause.namedChild(0);\n            for (let namedImport of namedImports?.namedChildren ?? []) {\n                if (namedImport.type === 'import_specifier') {\n                    const name = namedImport.childForFieldName('name')?.text;\n                    if (name) {\n                        const alias = namedImport.childForFieldName('alias')?.text;\n                        names.push({name, alias});\n                    }\n                }\n            }\n        }\n    }\n    return names;\n}\n\n/**\n * Module exports are modelled as a mapping from names to lists of declarations.\n *\n * The same name can map to multiple declarations for function signature exports.\n */\ntype Exports = Map<string, string[]>;\n\nconst exportsCache = new Map<string, {mtime: number; exports: Exports}>();\n\nconst EXPORTS_CACHE_LOW_WATER_MARK = 1000;\nconst EXPORTS_CACHE_HIGH_WATER_MARK = 2000;\n\n/**\n * Given a definition of a function or type, return its name and a corresponding\n * TypeScript declaration that only contains types but no code.\n *\n * For ambient declarations, we recursively process the wrapped declaration.\n *\n * For interfaces, enums, and type aliases, they are returned as-is.\n *\n * For function signatures and declarations, we turn them into signatures as\n * explained in the documentation for `extractTypeScriptFunctionDeclaration` below.\n *\n * Classes are turned into ambient declarations, using `extractTypeScriptMemberDeclaration`\n * to recursively process their members.\n */\nfunction extractTypeScriptDeclaration(srcString: string, defn: SyntaxNode | null): {name: string; decl: string} {\n    let name = defn?.childForFieldName('name')?.text ?? '';\n\n    switch (defn?.type) {\n        case 'ambient_declaration':\n            return extractTypeScriptDeclaration(srcString, defn.namedChild(0));\n        case 'interface_declaration':\n        case 'enum_declaration':\n        case 'type_alias_declaration':\n            return {name, decl: defn.text};\n        case 'function_declaration':\n        case 'function_signature':\n            return {name, decl: extractTypeScriptFunctionDeclaration(srcString, defn)};\n        case 'class_declaration': {\n            let memberDecls = extractTypeScriptBodyDecls(srcString, defn);\n            let decl = '';\n            if (memberDecls) {\n                let body = defn.childForFieldName('body')!;\n                // first, we take everything up to and including the start of the body\n                decl = `declare ${srcString.substring(defn.startIndex, body.startIndex + 1)}`;\n\n                // then we add the member declarations\n                decl += memberDecls.map(d => '\\n' + d).join('');\n\n                // finally, we add the closing brace\n                decl += `\\n}`;\n            }\n            return {name, decl};\n        }\n    }\n\n    return {name, decl: ''};\n}\n\n/**\n * Given a definition or a signature of a TypeScript function or method, return\n * a corresponding TypeScript declaration that only contains types but no code.\n *\n * We do this by taking the prefix up to and including the return type\n * annotation if present, or the parameter list otherwise. This does not always\n * yield a valid signature, for example in the presence of default parameters\n * and parameter properties, but it's good enough for the purposes of prompt\n * crafting.\n *\n * For functions (but nor for methods) we additionally prepend the `declare` keyword\n * to turn it into an ambient declaration.\n */\nfunction extractTypeScriptFunctionDeclaration(srcString: string, defn: SyntaxNode): string {\n    const endIndex = defn.childForFieldName('return_type')?.endIndex ?? defn.childForFieldName('parameters')?.endIndex;\n    if (endIndex !== undefined) {\n        let signature = srcString.substring(defn.startIndex, endIndex) + ';';\n        if (defn.type === 'function_declaration' || defn.type === 'function_signature') {\n            return 'declare ' + signature;\n        } else {\n            return signature;\n        }\n    }\n    return '';\n}\n\n/**\n * Get the indentation of `node`, that is, the shortest string of spaces and\n * tabs that starts at the beginning of a line and ends at the beginning of\n * `node`. If no such string exists, return `undefined`.\n */\nfunction getIndentation(srcString: string, node: SyntaxNode): string | undefined {\n    // skip backwards over tabs and spaces\n    let i = node.startIndex - 1;\n    while (i >= 0 && (srcString[i] === ' ' || srcString[i] === '\\t')) {\n        i--;\n    }\n    // if we're at the beginning of the file or at a newline, we've found our indentation\n    if (i < 0 || srcString[i] === '\\n') {\n        return srcString.substring(i + 1, node.startIndex);\n    }\n    // otherwise something more complicated is going on, so we'll return undefined\n    return undefined;\n}\n\n/**\n * Get the doc comment attached to `node`.\n *\n * This is defined as all text between the start of the first comment in the\n * longest unbroken run of comments preceding `node` and the start of `node`,\n * or the empty string if no such run exists.\n *\n * In particular, the \"doc comment\" will include leading whitespace of the\n * node, but not of the first comment in the run.\n */\nexport function getDocComment(srcString: string, node: SyntaxNode): string {\n    const docCommentNode = getFirstPrecedingComment(node);\n    return docCommentNode ? srcString.substring(docCommentNode.startIndex, node.startIndex) : '';\n}\n\n/**\n * Given a definition of a (non-private) class member, return a corresponding\n * TypeScript declaration that only contains types but no code.\n *\n * For ambient members, we recursively process the wrapped declaration.\n *\n * For method definitions and signatures we use `extractTypeScriptFunctionDeclaration` above.\n *\n * For fields, we chop off the initializer if present.\n */\nfunction extractTypeScriptMemberDeclaration(srcString: string, defn: SyntaxNode): string {\n    // filter out private members\n    if (defn?.firstChild?.type === 'accessibility_modifier' && defn.firstChild.text === 'private') {\n        return '';\n    }\n\n    const commentNode = getFirstPrecedingComment(defn);\n    const indentation = getIndentation(srcString, commentNode ?? defn) ?? '  ';\n    const docComment = getDocComment(srcString, defn);\n\n    switch (defn.type) {\n        case 'ambient_declaration':\n            const inner = defn.namedChild(0);\n            if (!inner) {\n                return '';\n            }\n            return indentation + docComment + extractTypeScriptMemberDeclaration(srcString, inner);\n        case 'method_definition':\n        case 'method_signature':\n            return indentation + docComment + extractTypeScriptFunctionDeclaration(srcString, defn);\n        case 'public_field_definition': {\n            // chop off initialiser if any\n            let endIndex = defn.childForFieldName('type')?.endIndex ?? defn.childForFieldName('name')?.endIndex;\n            if (endIndex !== undefined) {\n                return indentation + docComment + srcString.substring(defn.startIndex, endIndex) + ';';\n            }\n        }\n    }\n    return '';\n}\n\n/**\n * Given a definition of a class or interface, return a list of TypeScript declarations of\n * its members.\n *\n * @param srcString the source code of the file containing the class or interface\n * @param defn the class or interface definition\n */\nfunction extractTypeScriptBodyDecls(srcString: string, defn: SyntaxNode): string[] | undefined {\n    let body = defn.childForFieldName('body');\n    if (!body) {\n        return;\n    }\n\n    let memberDecls = body.namedChildren.map(member => extractTypeScriptMemberDeclaration(srcString, member));\n    // filter out members for which we could not extract a declaration\n    return memberDecls.filter(decl => decl);\n}\n\n/**\n * Construct a map representing declarations exported by the file at the given `uri`, which is\n * written in language `lang`.\n *\n * For TypeScript, this map associates exported types and functions with the (string representation of)\n * their declarations/signatures.\n *\n * For other languages, declaration extraction is not currently supported, so we always return an\n * empty map.\n */\nasync function getExportedDeclarations(uri: string, lang: string, fs: FileSystem): Promise<Exports> {\n    let exports = new Map<string, string[]>();\n\n    let mtime = -1;\n    try {\n        mtime = await fs.mtime(uri);\n    } catch {\n        // if anything wet wrong getting the mtime, simply report no exports\n        return exports;\n    }\n\n    let entry = exportsCache.get(uri);\n    if (entry && entry.mtime === mtime) return entry.exports;\n\n    if (lang === 'typescript') {\n        let tree = null;\n        try {\n            let srcBytes = await fs.readFile(uri);\n            let srcString = srcBytes.toString();\n            tree = await parseTreeSitter(lang, srcString);\n\n            for (let em of queryExports(lang, tree.rootNode)) {\n                for (let ec of em.captures) {\n                    let exp = ec.node;\n                    if (exp.type === 'export_statement') {\n                        let decl = exp.childForFieldName('declaration');\n\n                        // skip declarations with syntax errors\n                        if (decl?.hasError()) {\n                            continue;\n                        }\n\n                        let {name, decl: exportedDecl} = extractTypeScriptDeclaration(srcString, decl);\n\n                        if (name) {\n                            exportedDecl = getDocComment(srcString, exp) + exportedDecl;\n                            let exportedDecls = exports.get(name);\n                            if (!exportedDecls) {\n                                exportedDecls = [];\n                                exports.set(name, exportedDecls);\n                            }\n                            exportedDecls.push(exportedDecl);\n                        }\n                    }\n                }\n            }\n        } catch {\n            // if anything went wrong during reading or parsing the file, simply report no exports\n        } finally {\n            if (tree) tree.delete();\n        }\n    }\n\n    // if cache has more than EXPORTS_CACHE_HIGH_WATER_MARK entries, remove the oldest entries\n    // to bring its size down to EXPORTS_CACHE_LOW_WATER_MARK\n    if (exportsCache.size > EXPORTS_CACHE_HIGH_WATER_MARK) {\n        for (let key of exportsCache.keys()) {\n            exportsCache.delete(key);\n            if (exports.size <= EXPORTS_CACHE_LOW_WATER_MARK) {\n                break;\n            }\n        }\n    }\n\n    exportsCache.set(uri, {mtime, exports});\n    return exports;\n}\n\n/**\n * Find all import statements in the given subtree.\n */\nfunction getTypeScriptImports(root: SyntaxNode) {\n    let imports = [];\n    // note that import statements can only appear at the toplevel, so we can simply iterate over\n    // the root's children\n    for (let toplevelStmt of root.namedChildren) {\n        if (toplevelStmt.type === 'import_statement') {\n            imports.push(toplevelStmt);\n        }\n    }\n    return imports;\n}\n\n/** Regex to match a TypeScript import statement. */\nconst localImportRegex = /^\\s*import\\s*(type|)\\s*\\{[^}]*\\}\\s*from\\s*['\"]\\./gm;\n\n/**\n * Return the offset of the newline character after the last local import\n * statement in the given string.\n * Returns -1 if the source has no import statements.\n */\nfunction lastTypeScriptLocalImportOffset(source: string): number {\n    let lastImport = -1;\n    localImportRegex.lastIndex = -1; // restart the regex from the beginning\n    let m: RegExpExecArray | null;\n    do {\n        m = localImportRegex.exec(source);\n        if (m) {\n            lastImport = localImportRegex.lastIndex + m.length;\n        }\n    } while (m);\n\n    if (lastImport === -1) {\n        return -1;\n    }\n\n    const newlineAfterLastImport = source.indexOf('\\n', lastImport);\n    return newlineAfterLastImport !== -1 ? newlineAfterLastImport : source.length;\n}\n\n/**\n * Extract context information from local TypeScript imports.\n */\nasync function extractTypeScriptLocalImportContext(source: string, uri: string, fs: FileSystem): Promise<string[]> {\n    let languageId = 'typescript';\n    let localImportContext: string[] = [];\n\n    // Only parse up to and including the last line containing an import statement\n    const lastImportOffset = lastTypeScriptLocalImportOffset(source);\n    if (lastImportOffset === -1) {\n        return localImportContext;\n    }\n    source = source.substring(0, lastImportOffset);\n\n    let tree = await parseTreeSitter(languageId, source);\n\n    // Passing the URI with file causes the `stat` function to fail so we remove it\n    if (uri.startsWith('file://')) {\n        uri = uri.slice(7);\n        uri = path.resolve(uri);\n    }\n    try {\n        for (let imp of getTypeScriptImports(tree.rootNode)) {\n            let srcUri = resolveLocalTypeScriptImport(uri, imp);\n            if (!srcUri) continue;\n\n            let importedNames = getTypescriptImportedNames(imp);\n            if (importedNames.length === 0) continue;\n\n            let exports = await getExportedDeclarations(srcUri, languageId, fs);\n            for (let importedName of importedNames)\n                if (exports.has(importedName.name)) {\n                    localImportContext.push(...exports.get(importedName.name)!);\n                    // if the import came through an alias, we could simulate this by adding an alias\n                    // declaration, but the model seems to figure this out by itself, so we don't\n                }\n        }\n    } finally {\n        tree.delete();\n    }\n    return localImportContext;\n}\n\n/**\n * Extract context information from local imports.\n */\nexport async function extractLocalImportContext(doc: DocumentInfoWithOffset, fs?: FileSystem): Promise<string[]> {\n    let {source, uri, languageId} = doc;\n    if (fs === undefined) fs = defaultFileSystem;\n    if (fs) if (languageId === 'typescript') return extractTypeScriptLocalImportContext(source, uri, fs);\n    return [];\n}\n",
    "import {FileSystem} from './fileSystem';\nimport {DocumentInfo, DocumentInfoWithOffset, PromptOptions} from './prompt';\nimport {LineCursorHistory} from './snippetInclusion/neighboringFiles';\nimport {SnippetWithProviderInfo} from './snippetInclusion/snippets';\nimport {LanguageSnippetProvider} from './snippetProviders/language';\nimport {LocalImportContextSnippetProvider} from './snippetProviders/localImportContext';\nimport {NeighborFilesProvider} from './snippetProviders/neighborFiles';\nimport {PathSnippetProvider} from './snippetProviders/path';\nimport {SnippetProvider} from './snippetProviders/snippetProvider';\nimport {workerProxy} from './workerProxy';\n\nexport type SnippetProviderContext = {\n    currentFile: DocumentInfoWithOffset;\n    neighborFiles: DocumentInfo[];\n    options: PromptOptions;\n    lineCursorHistory?: LineCursorHistory;\n    // The filesystem is primarily intended for usage in tests and main-thread functions\n    fileSystem?: FileSystem;\n};\n\nconst OrchestratorTimeout = 250;\nconst SnippetProviders = [\n    LanguageSnippetProvider,\n    PathSnippetProvider,\n    NeighborFilesProvider,\n    LocalImportContextSnippetProvider,\n];\n\nexport class SnippetOrchestrator {\n    private providers: SnippetProvider[];\n\n    constructor() {\n        this.providers = SnippetProviders.map(provider => new provider(workerProxy));\n    }\n\n    // Since we don't export the workerProxy from promptlib and\n    // instead manage proxying here, we need to expose the functionality to\n    // start/stop threading so that it can be managed by the extension\n    startThreading = () => workerProxy.startThreading();\n    stopThreading = () => workerProxy.stopThreading();\n\n    public async getSnippets(context: SnippetProviderContext): Promise<SnippetWithProviderInfo[]> {\n        // Get snippets from each provider\n\n        return new Promise(async (resolve, reject) => {\n            const snippets: SnippetWithProviderInfo[] = [];\n            // Set a timeout to resolve what has returned when we hit a timeout\n            const timeout = setTimeout(() => {\n                resolve(snippets);\n            }, OrchestratorTimeout);\n\n            snippets.push(\n                ...(\n                    await Promise.all(\n                        this.providers.map(provider => {\n                            return provider.getSnippets(context);\n                        })\n                    )\n                ).flat()\n            );\n\n            clearTimeout(timeout);\n            resolve(snippets);\n        });\n    }\n}\n",
    "import {resolve} from 'path';\nimport * as Parser from 'web-tree-sitter';\nimport {Language, Query, QueryMatch, SyntaxNode, Tree} from 'web-tree-sitter';\nimport {DocumentInfoWithOffset} from './prompt';\n\nexport enum WASMLanguage {\n    Python = 'python',\n    JavaScript = 'javascript',\n    TypeScript = 'typescript',\n    TSX = 'tsx',\n    Go = 'go',\n    Ruby = 'ruby',\n}\n\n/**\n * A position of a syntax-tree node, specified by a zero-based start offset and a zero-based,\n * exclusive end offset.\n */\nexport interface NodePosition {\n    startIndex: number;\n    endIndex: number;\n}\n\nconst languageIdToWasmLanguageMapping: {[language: string]: WASMLanguage} = {\n    python: WASMLanguage.Python,\n    javascript: WASMLanguage.JavaScript,\n    javascriptreact: WASMLanguage.JavaScript,\n    jsx: WASMLanguage.JavaScript,\n    typescript: WASMLanguage.TypeScript,\n    typescriptreact: WASMLanguage.TSX,\n    go: WASMLanguage.Go,\n    ruby: WASMLanguage.Ruby,\n};\n\nexport function isSupportedLanguageId(languageId: string): boolean {\n    return languageId in languageIdToWasmLanguageMapping;\n}\n\nexport function languageIdToWasmLanguage(languageId: string): WASMLanguage {\n    if (!(languageId in languageIdToWasmLanguageMapping)) {\n        throw new Error(`Unrecognized language: ${languageId}`);\n    }\n    return languageIdToWasmLanguageMapping[languageId];\n}\n\n// function patterns defined in javascript grammar:\n// https://github.com/tree-sitter/tree-sitter-javascript/blob/3d9fe9786ee74fa5067577f138e1a7129f80fb41/grammar.js#L595-L629\n// same for typescript:\n// https://github.com/tree-sitter/tree-sitter-typescript/blob/2d1c7d5c10c33cb444d1781fa76f2936810afec4/common/define-grammar.js\nconst jsFunctionQuery = `[\n    (function body: (statement_block) @body)\n    (function_declaration body: (statement_block) @body)\n    (generator_function body: (statement_block) @body)\n    (generator_function_declaration body: (statement_block) @body)\n    (method_definition body: (statement_block) @body)\n    (arrow_function body: (statement_block) @body)\n  ] @function`;\n\n/*\nList of queries to run per language to find functions, as well as a cache\nfor parsed Query objects for each query.\n\nWe define named captures to be used by callers in a language-agnostic way:\n- @function: entire function signature and body\n- @docstring: optional docstring\n- @body: optional function body\n\nNOTE: use a [] match across function types to ensure we always match the\n      outermost function in case of nested functions.\n*/\nconst functionQuery: {[wasmLanguage in WASMLanguage]: [string, Query?][]} = {\n    python: [\n        // `(function_definition)` is defined in python grammar:\n        // https://github.com/tree-sitter/tree-sitter-python/blob/c4282ba411d990d313c5f8e7850bcaaf46fbf7da/grammar.js#L325-L338\n        // docstring is represented in grammar as an optional `(initial expression_statement (string))`\n        // at the start of the body block\n        [\n            `(function_definition body: (block\n             (expression_statement (string))? @docstring) @body) @function`,\n        ],\n        // handle malformed defs - no trailing semicolon or no body\n        [`(ERROR (\"def\" (identifier) (parameters))) @function`],\n    ],\n    javascript: [[jsFunctionQuery]],\n    typescript: [[jsFunctionQuery]],\n    tsx: [[jsFunctionQuery]],\n    go: [\n        // function patterns defined in go grammer:\n        // https://github.com/tree-sitter/tree-sitter-go/blob/b0c78230146705e867034e49a5ece20245b33490/grammar.js#L194-L209\n        [\n            `[\n            (function_declaration body: (block) @body)\n            (method_declaration body: (block) @body)\n          ] @function`,\n        ],\n    ],\n    ruby: [\n        // function patterns defined in ruby grammer:\n        // https://github.com/tree-sitter/tree-sitter-ruby/blob/master/grammar.js\n        // NOTE: Use a @params label for optional parameters to avoid capturing as\n        //       part of @body if parameters are present.\n        [\n            `[\n            (method name: (_) parameters: (method_parameters)? @params [(_)+ \"end\"] @body)\n            (singleton_method name: (_) parameters: (method_parameters)? @params [(_)+ \"end\"] @body)\n          ] @function`,\n        ],\n    ],\n};\n\n/** A call of the form `require(...)`. */\nconst requireCall = `(call_expression function: ((identifier) @req (#eq? @req \"require\")))`;\n\n/** A call of the form `require(...)` appearing in a variable declarator. */\nconst declaratorWithRequire = `(variable_declarator value: ${requireCall})`;\n\n/**\n * A CommonJS-style `require` import.\n *\n * Note that a declaration containing multiple `require`s is considered a single import.\n */\nconst commonJsImport = `\n    (lexical_declaration ${declaratorWithRequire}+)\n    (variable_declaration ${declaratorWithRequire}+)\n`;\n\nconst tsImportQueries: [string, Query?][] = [\n    // Since we only care about top level imports, we enforce that the parent node is \"program\"\n    [`(program [ ${commonJsImport} ] @import)`],\n    ['(program [ (import_statement) (import_alias) ] @import)'],\n];\n\nconst importsQuery: {[wasmLanguage in WASMLanguage]: [string, Query?][]} = {\n    python: [\n        // Since we only care about top level imports, we enforce that the parent node is \"module\"\n        [`(module (future_import_statement) @import)`],\n        [`(module (import_statement) @import)`],\n        [`(module (import_from_statement) @import)`],\n    ],\n    javascript: [\n        // Since we only care about top level imports, we enforce that the parent node is \"program\"\n        [`(program [ ${commonJsImport} ] @import)`],\n        ['(program [ (import_statement) ] @import)'],\n    ],\n    typescript: tsImportQueries,\n    tsx: tsImportQueries,\n    go: [\n        // TODO: handle import statements in go\n    ],\n    ruby: [\n        // TODO: handle import statements in ruby\n    ],\n};\n\nconst jsExportQueries: [string, Query?][] = [[`(program (export_statement) @export)`]];\n\nconst exportsQuery: {[wasmLanguage in WASMLanguage]: [string, Query?][]} = {\n    python: [\n        // TODO: handle exports in python\n    ],\n    javascript: jsExportQueries,\n    typescript: jsExportQueries,\n    tsx: jsExportQueries,\n    go: [\n        // TODO: handle exports in go\n    ],\n    ruby: [\n        // TODO: handle exports in ruby\n    ],\n};\n\nconst globalVarsQuery: {[wasmLanguage in WASMLanguage]: [string, Query?][]} = {\n    python: [\n        // Since we only care about top level global vars, we enforce that the parent node is \"module\"\n        [`(module (global_statement) @globalVar)`],\n        [`(module (expression_statement) @globalVar)`],\n    ],\n    javascript: [\n        // TODO: handle global vars in javascript\n    ],\n    typescript: [\n        // TODO: handle global vars in typescript\n    ],\n    tsx: [\n        // TODO: handle global vars in tsx\n    ],\n    go: [\n        // TODO: handle global vars in go\n    ],\n    ruby: [\n        // TODO: handle global vars in ruby\n    ],\n};\n\nconst jsFunctionTypes = [\n    'function',\n    'function_declaration',\n    'generator_function',\n    'generator_function_declaration',\n    'method_definition',\n    'arrow_function',\n];\n\n/**\n * TreeSitter node types corresponding to functions for the given language.\n */\nconst functionTypes: {[wasmLanguage in WASMLanguage]: Set<string>} = {\n    python: new Set(['function_definition']),\n    javascript: new Set(jsFunctionTypes),\n    typescript: new Set(jsFunctionTypes),\n    tsx: new Set(jsFunctionTypes),\n    go: new Set(['function_declaration', 'method_declaration']),\n    ruby: new Set(['method', 'singleton_method']),\n};\n\n/**\n * TreeSitter node types corresponding to syntactic constructs that can have function declarations\n * as their immediate children.\n */\nconst isFunctionParent: {[wasmLanguage in WASMLanguage]: (nd: SyntaxNode) => boolean} = {\n    python: nd => nd.type === 'module' || (nd.type === 'block' && nd.parent?.type === 'class_definition'),\n    javascript: nd => nd.type === 'program' || nd.type === 'class_body',\n    typescript: nd => nd.type === 'program' || nd.type === 'class_body',\n    tsx: nd => nd.type === 'program' || nd.type === 'class_body',\n    go: nd => nd.type === 'source_file',\n    ruby: nd => nd.type === 'program' || nd.type === 'class',\n};\n\nconst loadedLanguages = new Map<WASMLanguage, Language>();\n\nasync function loadWasmLanguage(language: WASMLanguage): Promise<Language> {\n    await Parser.init();\n    // construct a path that works both for the TypeScript source, which lives under `/src`, and for\n    // the transpiled JavaScript, which lives under `/dist`\n    const wasmFile = resolve(__dirname, '..', 'dist', `tree-sitter-${language}.wasm`);\n    return Language.load(wasmFile);\n}\n\nexport async function getLanguage(language: string): Promise<Language> {\n    const wasmLanguage = languageIdToWasmLanguage(language);\n    if (!loadedLanguages.has(wasmLanguage)) {\n        const loadedLang = await loadWasmLanguage(wasmLanguage);\n        loadedLanguages.set(wasmLanguage, loadedLang);\n    }\n    return loadedLanguages.get(wasmLanguage)!;\n}\n\n// This method returns a tree that the user needs to call `.delete()` before going out of scope.\nexport async function parseTreeSitter(language: string, source: string): Promise<Tree> {\n    // `getLanguage` calls `Parser.init`, which needs to be called before `new Parser()` below\n    let treeSitterLanguage = await getLanguage(language);\n    const parser = new Parser();\n    parser.setLanguage(treeSitterLanguage);\n    const parsedTree = parser.parse(source);\n\n    // Need to delete parser objects directly\n    parser.delete();\n    return parsedTree;\n}\n\nexport async function parsesWithoutError(language: string, source: string): Promise<boolean> {\n    const tree = await parseTreeSitter(language, source);\n    const result = !tree.rootNode.hasError();\n    tree.delete();\n    return result;\n}\n\nexport function getBlockCloseToken(language: string): string | null {\n    const wasmLanguage = languageIdToWasmLanguage(language);\n    switch (wasmLanguage) {\n        case WASMLanguage.Python:\n            return null;\n        case WASMLanguage.JavaScript:\n        case WASMLanguage.TypeScript:\n        case WASMLanguage.TSX:\n        case WASMLanguage.Go:\n            return '}';\n        case WASMLanguage.Ruby:\n            return 'end';\n    }\n}\n\nfunction innerQuery(queries: [string, Query?][], root: SyntaxNode): QueryMatch[] {\n    const matches = [];\n    for (const query of queries) {\n        // parse and cache query if this is the first time we've used it\n        if (!query[1]) {\n            const lang = root.tree.getLanguage() as Language;\n            // cache parsed query object\n            query[1] = lang.query(query[0]);\n        }\n        matches.push(...query[1].matches(root));\n    }\n    return matches;\n}\n\nexport function queryFunctions(language: string, root: SyntaxNode): QueryMatch[] {\n    const queries = functionQuery[languageIdToWasmLanguage(language)];\n    return innerQuery(queries, root);\n}\n\n/**\n * A list of all top-level imports in the given tree.\n *\n * Note that imports are _not_ guaranteed to be in the same order as the source code.\n */\nexport function queryImports(language: string, root: SyntaxNode): QueryMatch[] {\n    const queries = importsQuery[languageIdToWasmLanguage(language)];\n    return innerQuery(queries, root);\n}\n\nexport function queryExports(language: string, root: SyntaxNode): QueryMatch[] {\n    const queries = exportsQuery[languageIdToWasmLanguage(language)];\n    return innerQuery(queries, root);\n}\n\nexport function queryGlobalVars(language: string, root: SyntaxNode): QueryMatch[] {\n    const queries = globalVarsQuery[languageIdToWasmLanguage(language)];\n    return innerQuery(queries, root);\n}\n\nconst docstringQuery: [string, Query?] = [\n    `[\n    (class_definition (block (expression_statement (string))))\n    (function_definition (block (expression_statement (string))))\n]`,\n];\n\nexport function queryPythonIsDocstring(blockNode: SyntaxNode): boolean {\n    return innerQuery([docstringQuery], blockNode).length == 1;\n}\n\n/**\n * Find the closest ancestor node of `nd` that may have function declarations as sibling nodes.\n */\nexport function getAncestorWithSiblingFunctions(language: string, nd: SyntaxNode): SyntaxNode | null {\n    const check = isFunctionParent[languageIdToWasmLanguage(language)];\n    while (nd.parent) {\n        if (check(nd.parent)) return nd;\n        nd = nd.parent;\n    }\n    return nd.parent ? nd : null;\n}\n\n/**\n * Check if `nd` is a function.\n *\n * Note that for a JavaScript declaration like\n *\n * ```js\n * var f = function g() {}\n * ```\n *\n * only the node corresponding to the function expression `function g() {}` is considered to be\n * a function, not the entire declaration.\n *\n * Conversely, the declaration is considered a function definition (see below), but the function\n * expression is not.\n */\nexport function isFunction(language: string, nd: SyntaxNode): boolean {\n    return functionTypes[languageIdToWasmLanguage(language)].has(nd.type);\n}\n\n/**\n * Check if `nd` is a function definition.\n *\n * For languages other than JavaScript, this is the same as checking whether `nd` is a function.\n * For JavaScript, function expressions are _not_ considered function definitions, but declarations\n * and assignments assigning a function expression to a variable are.\n */\nexport function isFunctionDefinition(language: string, nd: SyntaxNode): boolean {\n    switch (languageIdToWasmLanguage(language)) {\n        case WASMLanguage.Python:\n        case WASMLanguage.Go:\n        case WASMLanguage.Ruby:\n            return isFunction(language, nd);\n        case WASMLanguage.JavaScript:\n        case WASMLanguage.TypeScript:\n        case WASMLanguage.TSX:\n            // either it is a stand-alone function declaration\n            if (\n                nd.type === 'function_declaration' ||\n                nd.type === 'generator_function_declaration' ||\n                nd.type === 'method_definition'\n            )\n                return true;\n\n            // or a declaration of a function-valued variable\n            if (nd.type === 'lexical_declaration' || nd.type === 'variable_declaration') {\n                // declarations with multiple declarators (`var x = ..., y = ...`) are unlikely to\n                // involve functions in practice, so we make our lives easier and short-circuit\n                if (nd.namedChildCount > 1) return false;\n                let declarator = nd.namedChild(0);\n                // this should never be null, but we check anyway to be safe\n                if (declarator == null) return false;\n                let init = declarator.namedChild(1);\n                return init !== null && isFunction(language, init);\n            }\n\n            // or an assignment to a function-valued variable\n            if (nd.type === 'expression_statement') {\n                let expr = nd.namedChild(0);\n                if (expr?.type === 'assignment_expression') {\n                    let rhs = expr.namedChild(1);\n                    return rhs !== null && isFunction(language, rhs);\n                }\n            }\n\n            return false;\n    }\n}\n\n/**\n * Get the first comment in a run of comments preceding `nd`, if any.\n *\n * That is, if `nd` is preceded by a single comment, return that comment. If it is\n * preceded by a sequence of more than one comments (without any intervening non-comment\n * nodes or blank lines), return the first comments in that sequence. Otherwise return `null`.\n *\n * Note that all comments are treated equally; in particular, for JavaScript, no distinction\n * is made between block comments and line comments.\n */\nexport function getFirstPrecedingComment(nd: SyntaxNode): SyntaxNode | null {\n    // starting from `nd`, walk backwards until we find a node that is not preceded by a comment\n    let cur = nd;\n    while (cur.previousSibling?.type === 'comment') {\n        let prev = cur.previousSibling;\n        // stop if there is an intervening blank line\n        if (prev.endPosition.row < cur.startPosition.row - 1) break;\n        cur = prev;\n    }\n\n    // if that node is itself a comment, it is the first one in a run of comments preceding `nd`\n    if (cur?.type === 'comment') return cur;\n    // otherwise it must be `nd`, so there aren't any comments preceding `nd`\n    return null;\n}\n\n/**\n * Get the positions of all function nodes in the given piece of source code.\n */\nexport async function getFunctionPositions(language: string, source: string): Promise<NodePosition[]> {\n    const tree = await parseTreeSitter(language, source);\n    const results = queryFunctions(language, tree.rootNode);\n    const positions = results.map(res => {\n        const fn = res.captures.find(c => c.name === 'function')!.node;\n        return {\n            startIndex: fn.startIndex,\n            endIndex: fn.endIndex,\n        };\n    });\n    tree.delete();\n    return positions;\n}\n\n/**\n * Very simple type that echo `vscode.Position` (which we cannot use directly in promptlib)\n */\nexport type IPosition = {\n    line: number;\n    character: number;\n};\n\n/*\nList of queries to run per language to find call sites.\ni.e. if the cursor is inside of the arg list of a function call, get the function name and the offset.\n*/\nconst callSiteQuery: {[language in WASMLanguage]: [string, Query?][]} = {\n    python: [\n        [\n            `(call\n            function:  [\n                (identifier) @caller\n                (attribute attribute:(identifier) @caller)\n            ]\n            arguments: (argument_list) @args\n        )`,\n        ],\n    ],\n    javascript: [],\n    tsx: [],\n    typescript: [],\n    go: [],\n    ruby: [],\n};\n\n/**\n * If the cursor is inside of the arg list of a function call, get the function name and the offset.\n *\n * For instance `x = foo(\"aasdf\", \"qwer\", bar(1,2,│));` If the cursor is at the position of the `│` then\n * getCallSites returns the name and position of both `foo` and `bar` in that order.\n */\nexport async function getCallSites(docInfo: DocumentInfoWithOffset): Promise<{name: string; position: IPosition}[]> {\n    // It is possible that non-WASM languages will get passed to `getCallSite` from `getSymbolDefSnippets`\n    // so we need to fail gracefully if that happens.\n    if (!(docInfo.languageId in callSiteQuery)) return [];\n\n    // TODO consider getting the source only up until the offset (e.g. the offset argument is not needed) and\n    // then adding a bunch of parens to the end of the source to make sure that the tree is complete\n    // otherwise we won't collect callers that don't have a closing parens\n    let offset = docInfo.offset;\n    let source = docInfo.source.substring(0, offset);\n    // guard against time-consuming parses of very large files\n    // TODO & WARNING pre-truncating long files has only been tested (poorly) against python and might not work well for all languages - test each!\n    const pretruncateOffset = Math.max(source.length - 5000, 0); // I picked this value arbitrarily - 5000 chars takes ~25ms to parse\n    const linesBeforeTruncation = source.substring(0, pretruncateOffset).split('\\n').length - 1;\n    offset -= pretruncateOffset;\n    source = source.substring(pretruncateOffset);\n    // artificially close all open parens, this is because tree-sitter will see `foo(bar(), a` and not consider `foo` a function\n    // but if we add a bunch of closing parens then this `foo(bar(), a)` will be interpreted as a function.\n    source = source + ')))))';\n    let callers: [string, IPosition][] = [];\n\n    // Parse the source code just before the cursor position, extract every function call and its arguments\n    const tree = await parseTreeSitter(docInfo.languageId, source);\n    const queries = callSiteQuery[languageIdToWasmLanguageMapping[docInfo.languageId]];\n    const results = innerQuery(queries, tree.rootNode);\n    results.forEach((res, resIndex) => {\n        let callerName = '';\n        let callerLineNo = 0;\n        let callerStartChar = 0;\n        let argsStartIndex = 0;\n        let argsEndIndex = 0;\n        // Then, for each function and arg list, get the name and position of the function and the start and end offset of the arg list\n        res.captures.forEach((cap, capIndex) => {\n            const node = cap.node;\n            if (cap.name == 'caller') {\n                callerName = source.substring(node.startIndex, node.endIndex);\n                callerLineNo = node.startPosition.row + linesBeforeTruncation;\n                callerStartChar = node.startPosition.column;\n            } else if (cap.name == 'args') {\n                argsStartIndex = node.startIndex;\n                argsEndIndex = node.endIndex;\n            }\n        });\n        // If the cursor is within the arg list of the function, then add the function name and position to the list of callers\n        if (offset >= argsStartIndex && offset <= argsEndIndex) {\n            // TODO check at endpoints\n            const callerLineCol: IPosition = {line: callerLineNo, character: callerStartChar};\n            callers.push([callerName, callerLineCol]); // These are outer first\n        }\n    });\n    tree.delete();\n    return callers.map(([name, position]) => ({name, position}));\n}\n",
    "import * as Parser from 'web-tree-sitter';\nimport {\n    WASMLanguage,\n    isSupportedLanguageId,\n    languageIdToWasmLanguage,\n    parseTreeSitter,\n    queryPythonIsDocstring,\n} from './parse';\n\nexport interface Position {\n    line: number; // 0-indexed\n    character: number; // 0-indexed\n}\n\nexport interface BlockParser {\n    isEmptyBlockStart: (text: string, offset: number) => Promise<boolean>;\n\n    /**\n     * Given a document prefix, offset, and a proposed completion, determines how much of the\n     * completion to keep in order to \"finish\" the following block when the completion is appended\n     * to the document prefix.\n     *\n     * If there is no such block, or the completion doesn't close the block, returns undefined.\n     */\n    isBlockBodyFinished: (prefix: string, completion: string, offset: number) => Promise<number | undefined>;\n\n    /**\n     * Given a document text and offset, determines the beginning of current matching node.\n     *\n     * If there is no such block, returns undefined.\n     */\n    getNodeStart: (text: string, offset: number) => Promise<number | undefined>;\n}\n\nabstract class BaseBlockParser implements BlockParser {\n    abstract isEmptyBlockStart(text: string, offset: number): Promise<boolean>;\n\n    constructor(\n        protected readonly languageId: string,\n        protected readonly nodeMatch: {[parent: string]: string},\n        /**\n         * A map from node types that have a block or an statement as a child\n         * to the field label of the child node that is a block or statement.\n         * For example, an if statement in a braced language.\n         */\n        protected readonly nodeTypesWithBlockOrStmtChild: Map<string, string>\n    ) {}\n\n    protected async getNodeMatchAtPosition<T>(\n        text: string,\n        offset: number,\n        cb: (nd: Parser.SyntaxNode) => T\n    ): Promise<T | undefined> {\n        const tree = await parseTreeSitter(this.languageId, text);\n        try {\n            // TODO:(hponde) It seems that we have an issue if it's at the end of the block:\n            // https://github.com/tree-sitter/tree-sitter/issues/407\n            const nodeAtPos = tree.rootNode.descendantForIndex(offset);\n\n            let nodeToComplete: Parser.SyntaxNode | null = nodeAtPos;\n\n            // find target element by looking at parent of cursor node\n            // don't stop at node types that may have a block child, but don't actually in this\n            // parse tree\n            while (nodeToComplete) {\n                const blockNodeType = this.nodeMatch[nodeToComplete.type];\n                if (blockNodeType) {\n                    if (!this.nodeTypesWithBlockOrStmtChild.has(nodeToComplete.type)) {\n                        break;\n                    }\n\n                    const fieldLabel = this.nodeTypesWithBlockOrStmtChild.get(nodeToComplete.type)!;\n                    const childToCheck =\n                        fieldLabel == ''\n                            ? nodeToComplete.namedChildren[0]\n                            : nodeToComplete.childForFieldName(fieldLabel);\n                    if (childToCheck?.type == blockNodeType) {\n                        break;\n                    }\n                }\n\n                nodeToComplete = nodeToComplete.parent;\n            }\n            if (!nodeToComplete) {\n                // No nodes we're interested in\n                return;\n            }\n            return cb(nodeToComplete);\n        } finally {\n            tree.delete();\n        }\n    }\n\n    protected getNextBlockAtPosition<T>(\n        text: string,\n        offset: number,\n        cb: (nd: Parser.SyntaxNode) => T\n    ): Promise<T | undefined> {\n        return this.getNodeMatchAtPosition(text, offset, nodeToComplete => {\n            // FIXME: childForFieldName always returns null\n            //   const block = nodeToComplete.childForFieldName(fieldToComplete);\n            // Instead, find child nodes of the langauge's nodeMatch type for\n            // nodeToComplete.\n            // Look in reverse order, in case of nodes with multiple blocks defined,\n            // such as try/catch/finally.\n            let block = nodeToComplete.children.reverse().find(x => x.type == this.nodeMatch[nodeToComplete.type]);\n            if (!block) {\n                // child of matching type isn't defined yet\n                return;\n            }\n\n            if (this.languageId == 'python' && block.parent) {\n                // handle empty block's parent being the colon (!)\n                const parent = block.parent.type == ':' ? block.parent.parent : block.parent;\n\n                // tree-sitter handles comments in a weird way, so we need to\n                // consume them.\n                let nextComment = parent?.nextSibling;\n\n                while (nextComment && nextComment.type == 'comment') {\n                    // next comment is inline at the end of the block\n                    // see issue: https://github.com/tree-sitter/tree-sitter-python/issues/113\n                    const commentInline =\n                        nextComment.startPosition.row == block.endPosition.row &&\n                        nextComment.startPosition.column >= block.endPosition.column;\n\n                    // next comment is on subsequent line and indented > parent's indentation\n                    // see issue: https://github.com/tree-sitter/tree-sitter-python/issues/112\n                    const commentAtEnd =\n                        nextComment.startPosition.row > parent!.endPosition.row &&\n                        nextComment.startPosition.column > parent!.startPosition.column;\n\n                    if (commentInline || commentAtEnd) {\n                        block = nextComment;\n                        nextComment = nextComment.nextSibling;\n                    } else {\n                        break;\n                    }\n                }\n            }\n\n            if (block.endIndex >= block.tree.rootNode.endIndex - 1 && (block.hasError() || block.parent!.hasError())) {\n                // TODO:(hponde) improve this logic\n                // block is the whole document, and has errors, most likely doc has\n                // preceding errors.\n                return;\n            }\n\n            // Return first block if not empty\n            return cb(block);\n        });\n    }\n\n    async isBlockBodyFinished(prefix: string, completion: string, offset: number): Promise<number | undefined> {\n        const solution = (prefix + completion).trimEnd();\n        const endIndex = await this.getNextBlockAtPosition(solution, offset, block => block.endIndex);\n        if (endIndex === undefined) {\n            // no block, not finished yet\n            return;\n        }\n        if (endIndex < solution.length) {\n            // descendant block is finished, stop at end of block\n            const lengthOfBlock = endIndex - prefix.length;\n            return lengthOfBlock > 0 ? lengthOfBlock : undefined;\n        }\n    }\n\n    getNodeStart(text: string, offset: number): Promise<number | undefined> {\n        const solution = text.trimEnd();\n        return this.getNodeMatchAtPosition(solution, offset, block => block.startIndex);\n    }\n}\n\nclass RegexBasedBlockParser extends BaseBlockParser {\n    constructor(\n        languageId: string,\n        protected readonly blockEmptyMatch: string,\n        private readonly lineMatch: RegExp,\n        nodeMatch: {[parent: string]: string},\n        nodeTypesWithBlockOrStmtChild: Map<string, string>\n    ) {\n        super(languageId, nodeMatch, nodeTypesWithBlockOrStmtChild);\n    }\n\n    private isBlockStart(line: string): boolean {\n        return this.lineMatch.test(line.trimStart());\n    }\n\n    private async isBlockBodyEmpty(text: string, offset: number): Promise<boolean> {\n        const res = await this.getNextBlockAtPosition(text, offset, block => {\n            // strip whitespace and compare with language-defined empty block\n            // Note that for Ruby, `block` is the closing `end` token, while for other\n            // languages it is the whole block, so we consider the text from the earlier of\n            // block.startIndex and offset, all the way up to block.endIndex.\n            if (block.startIndex < offset) offset = block.startIndex;\n            let blockText = text.substring(offset, block.endIndex).trim();\n            if (blockText == '' || blockText.replace(/\\s/g, '') == this.blockEmptyMatch) {\n                // block is empty\n                return true;\n            }\n            return false;\n        });\n        return res === undefined || res;\n    }\n\n    async isEmptyBlockStart(text: string, offset: number): Promise<boolean> {\n        offset = rewindToNearestNonWs(text, offset);\n        return this.isBlockStart(getLineAtOffset(text, offset)) && this.isBlockBodyEmpty(text, offset);\n    }\n}\n\nfunction getLineAtOffset(text: string, offset: number): string {\n    const prevNewline = text.lastIndexOf('\\n', offset - 1);\n    let nextNewline = text.indexOf('\\n', offset);\n    if (nextNewline < 0) {\n        nextNewline = text.length;\n    }\n    return text.slice(prevNewline + 1, nextNewline);\n}\n\n/**\n * Returns the cursor position immediately after the nearest non-whitespace\n * character.  If every character before offset is whitespace, returns 0.\n */\nfunction rewindToNearestNonWs(text: string, offset: number): number {\n    let result = offset;\n    while (result > 0 && /\\s/.test(text.charAt(result - 1))) {\n        result--;\n    }\n    return result;\n}\n\n/**\n * If `nd` is only preceded by whitespace on the line where it starts, return that whitespace;\n * otherwise, return undefined. The parameter `source` is the source text from which `nd` was\n * parsed.\n */\nfunction indent(nd: Parser.SyntaxNode, source: string): string | undefined {\n    const startIndex = nd.startIndex;\n    const lineStart = nd.startIndex - nd.startPosition.column;\n    const prefix = source.substring(lineStart, startIndex);\n    if (/^\\s*$/.test(prefix)) {\n        return prefix;\n    }\n    return undefined;\n}\n\n/**\n * Check if `snd` is \"outdented\" with respect to `fst`, that is, it starts on a later line, and\n * its indentation is no greater than that of `fst`.\n */\nfunction outdented(fst: Parser.SyntaxNode, snd: Parser.SyntaxNode, source: string): boolean {\n    if (snd.startPosition.row <= fst.startPosition.row) {\n        return false;\n    }\n    const fstIndent = indent(fst, source);\n    const sndIndent = indent(snd, source);\n    return fstIndent !== undefined && sndIndent !== undefined && fstIndent.startsWith(sndIndent);\n}\n\nclass TreeSitterBasedBlockParser extends BaseBlockParser {\n    constructor(\n        languageId: string,\n        nodeMatch: {[parent: string]: string},\n        nodeTypesWithBlockOrStmtChild: Map<string, string>,\n        private readonly startKeywords: string[],\n        private readonly blockNodeType: string,\n        /**\n         * The langauge-specific node type of an empty statement, that is,\n         * a statement with no text except possibly the statement terminator.\n         * For example, `;` is an empty statement in a braced language, but\n         * `pass` is not in Python.\n         */\n        private readonly emptyStatementType: string | null,\n        private readonly curlyBraceLanguage: boolean\n    ) {\n        super(languageId, nodeMatch, nodeTypesWithBlockOrStmtChild);\n    }\n\n    private isBlockEmpty(block: Parser.SyntaxNode, offset: number): boolean {\n        let trimmed = block.text.trim();\n\n        if (this.curlyBraceLanguage) {\n            if (trimmed.startsWith('{')) {\n                trimmed = trimmed.slice(1);\n            }\n            if (trimmed.endsWith('}')) {\n                trimmed = trimmed.slice(0, -1);\n            }\n            trimmed = trimmed.trim();\n        }\n\n        if (trimmed.length == 0) {\n            return true;\n        }\n\n        // Python: Consider a block that contains only a docstring empty.\n        if (\n            this.languageId == 'python' &&\n            (block.parent?.type == 'class_definition' || block.parent?.type == 'function_definition') &&\n            block.children.length == 1 &&\n            queryPythonIsDocstring(block.parent)\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    async isEmptyBlockStart(text: string, offset: number): Promise<boolean> {\n        if (offset > text.length) {\n            throw new RangeError('Invalid offset');\n        }\n\n        // Ensure that the cursor is at the end of a line, ignoring trailing whitespace.\n        for (let i = offset; i < text.length; i++) {\n            if (text.charAt(i) == '\\n') {\n                break;\n            } else if (/\\S/.test(text.charAt(i))) {\n                return false;\n            }\n        }\n\n        // This lets e.g. \"def foo():\\n█\" give a multiline suggestion.\n        offset = rewindToNearestNonWs(text, offset);\n\n        const tree = await parseTreeSitter(this.languageId, text);\n        try {\n            // offset here is the cursor position immediately after a whitespace\n            // character, but tree-sitter expects the index of the node to search for.\n            // Therefore we adjust the offset when we call into tree-sitter.\n            const nodeAtPos = tree.rootNode.descendantForIndex(offset - 1);\n            if (nodeAtPos == null) {\n                return false;\n            }\n\n            // Because of rewinding to the previous non-whitespace character, nodeAtPos may be\n            // \"}\".  That's not a good place to show multline ghost text.\n            if (this.curlyBraceLanguage && nodeAtPos.type == '}') {\n                return false;\n            }\n\n            // JS/TS: half open, empty blocks are sometimes parsed as objects\n            if (\n                (this.languageId == 'javascript' || this.languageId == 'typescript') &&\n                nodeAtPos.parent &&\n                nodeAtPos.parent.type == 'object' &&\n                nodeAtPos.parent.text.trim() == '{'\n            ) {\n                return true;\n            }\n\n            // TS: a function_signature/method_signature is a prefix of a\n            // function_declaration/method_declaration, so if nodeAtPos is a descendant of one of\n            // those node types and the signature looks incomplete, return true\n            if (this.languageId == 'typescript') {\n                let currNode = nodeAtPos;\n                while (currNode.parent) {\n                    if (currNode.type == 'function_signature' || currNode.type == 'method_signature') {\n                        // if the next node is outdented, the signature is probably incomplete and\n                        // TreeSitter may just have done some fanciful error correction, so we'll\n                        // assume that this is really meant to be an incomplete function\n                        const next = nodeAtPos.nextSibling;\n                        if (next && currNode.hasError() && outdented(currNode, next, text)) {\n                            return true;\n                        }\n\n                        // if, on the other hand, there is a semicolon, then the signature is\n                        // probably complete, and we should not show a multiline suggestion\n                        const semicolon = currNode.children.find(c => c.type == ';');\n                        return !semicolon && currNode.endIndex <= offset;\n                    }\n                    currNode = currNode.parent;\n                }\n            }\n\n            // Ignoring special cases, there are three situations when we want to return true:\n            //\n            // 1. nodeAtPos is in a block or a descendant of a block, the parent of the block is one of the node types\n            //    in this.nodeMatch, and the block is empty.\n            // 2. nodeAtPos is somewhere below an ERROR node, and that ERROR node has an anonymous child\n            //    matching one of the keywords we care about.  If that ERROR node also has a block child, the\n            //    block must be empty.\n            // 3. nodeAtPos is somewhere below a node type that we know can contain a block, and the block is either\n            //    not present or empty.\n\n            let errorNode = null;\n            let blockNode = null;\n            let blockParentNode = null;\n            let currNode: Parser.SyntaxNode | null = nodeAtPos;\n            while (currNode != null) {\n                if (currNode.type == this.blockNodeType) {\n                    blockNode = currNode;\n                    break;\n                }\n                if (this.nodeMatch[currNode.type]) {\n                    blockParentNode = currNode;\n                    break;\n                }\n                if (currNode.type == 'ERROR') {\n                    errorNode = currNode;\n                    break;\n                }\n                currNode = currNode.parent;\n            }\n            if (blockNode != null) {\n                if (!blockNode.parent || !this.nodeMatch[blockNode.parent.type]) {\n                    return false;\n                }\n\n                // Python: hack for unclosed docstrings.  There's no rhyme or reason to how the actual\n                // docstring comments are parsed, but overall the parse tree looks like:\n                // function_definition\n                //   - def\n                //   - identifier\n                //   - parameters\n                //   - :\n                //   - ERROR with text that starts with \"\"\" or '''\n                //   - block\n                //     - junk\n                //\n                // We do best effort here to detect that we're in an unclosed docstring and return true.\n                // Note that this won't work (we won't give a multline suggestion) if the docstring uses single\n                // quotes, which is allowed by the language standard but not idiomatic (see PEP 257,\n                // Docstring Conventions).\n                if (this.languageId == 'python') {\n                    const prevSibling = blockNode.previousSibling;\n                    if (\n                        prevSibling != null &&\n                        prevSibling.hasError() &&\n                        (prevSibling.text.startsWith('\"\"\"') || prevSibling.text.startsWith(\"'''\"))\n                    ) {\n                        return true;\n                    }\n                }\n\n                return this.isBlockEmpty(blockNode, offset);\n            }\n            if (errorNode != null) {\n                // TS: In a module such as \"module 'foo' {\" or internal_module such as \"namespace 'foo' {\"\n                // the open brace is parsed as an error node, like so:\n                // - expression_statement\n                //   - [internal_]module\n                //     - string\n                //   - ERROR\n                if (\n                    errorNode.previousSibling?.type == 'module' ||\n                    errorNode.previousSibling?.type == 'internal_module' ||\n                    errorNode.previousSibling?.type == 'def'\n                ) {\n                    return true;\n                }\n\n                // Search in reverse order so we get the latest block or keyword node.\n                const children = [...errorNode.children].reverse();\n                const keyword = children.find(child => this.startKeywords.includes(child.type));\n                let block = children.find(child => child.type == this.blockNodeType);\n\n                if (keyword) {\n                    switch (this.languageId) {\n                        case 'python': {\n                            // Python: try-except-finally\n                            // If the cursor is in either \"except\" or \"finally,\" but the try-except-finally isn't finished,\n                            // nodeAtPos will be parsed as an identifier.  If > 4 characters of \"except\" or \"finally\" have been\n                            // typed, it will be parsed as:\n                            // ERROR\n                            //   - try\n                            //   - :\n                            //   - ERROR\n                            //     - block\n                            //   - expression_statement\n                            //     - identifier\n                            //\n                            // In this case, we have to special-case finding the right block to check whether it's empty.\n                            if (keyword.type == 'try' && nodeAtPos.type == 'identifier' && nodeAtPos.text.length > 4) {\n                                block = children\n                                    .find(child => child.hasError())\n                                    ?.children.find(child => child.type == 'block');\n                            }\n\n                            // Python: sometimes nodes that are morally part of a block are parsed as statements\n                            // that are all children of an ERROR node.  Detect this by looking for \":\" and inspecting\n                            // its nextSibling.  Skip over \":\" inside parentheses because those could be part of a\n                            // typed parameter.\n                            let colonNode;\n                            let parenCount = 0;\n                            for (const child of errorNode.children) {\n                                if (child.type == ':' && parenCount == 0) {\n                                    colonNode = child;\n                                    break;\n                                }\n                                if (child.type == '(') {\n                                    parenCount += 1;\n                                }\n                                if (child.type == ')') {\n                                    parenCount -= 1;\n                                }\n                            }\n                            if (colonNode && keyword.endIndex <= colonNode.startIndex && colonNode.nextSibling) {\n                                // horrible hack to handle unfinished docstrings :(\n                                if (keyword.type == 'def') {\n                                    const sibling = colonNode.nextSibling;\n                                    if (sibling.type == '\"' || sibling.type == \"'\") {\n                                        return true;\n                                    }\n                                    if (sibling.type == 'ERROR' && (sibling.text == '\"\"\"' || sibling.text == \"'''\")) {\n                                        return true;\n                                    }\n                                }\n                                return false;\n                            }\n\n                            break;\n                        }\n                        case 'javascript': {\n                            // JS: method definition within a class, e.g. \"class C { foo()\"\n                            const formalParameters = children.find(child => child.type == 'formal_parameters');\n                            if (keyword.type == 'class' && formalParameters) {\n                                return true;\n                            }\n\n                            // JS: Don't mistake a half-open curly brace after a keyword under an error node for an empty\n                            // block.  If it has a nextSibling, then it's not empty. e.g. in \"do {\\n\\t;█\", the \";\" is an\n                            // empty_statement and the nextSibling of the \"{\".\n                            const leftCurlyBrace = children.find(child => child.type == '{');\n                            if (\n                                leftCurlyBrace &&\n                                leftCurlyBrace.startIndex > keyword.endIndex &&\n                                leftCurlyBrace.nextSibling != null\n                            ) {\n                                return false;\n                            }\n\n                            // JS: do-while: don't give a multline suggestion after the \"while\" keyword\n                            const doNode = children.find(child => child.type == 'do');\n                            if (doNode && keyword.type == 'while') {\n                                return false;\n                            }\n\n                            // JS: In an arrow function, if there is a next sibling of the arrow and it's not an open brace, we're not in a\n                            // block context and we should return false.\n                            if (keyword.type == '=>' && keyword.nextSibling && keyword.nextSibling.type != '{') {\n                                return false;\n                            }\n\n                            break;\n                        }\n                        case 'typescript': {\n                            // TS: Don't mistake a half-open curly brace after a keyword under an error node for an empty\n                            // block.  If it has a nextSibling, then it's not empty. e.g. in \"do {\\n\\t;█\", the \";\" is an\n                            // empty_statement and the nextSibling of the \"{\".\n                            const leftCurlyBrace = children.find(child => child.type == '{');\n                            if (\n                                leftCurlyBrace &&\n                                leftCurlyBrace.startIndex > keyword.endIndex &&\n                                leftCurlyBrace.nextSibling != null\n                            ) {\n                                return false;\n                            }\n\n                            // TS: do-while: don't give a multline suggestion after the \"while\" keyword\n                            const doNode = children.find(child => child.type == 'do');\n                            if (doNode && keyword.type == 'while') {\n                                return false;\n                            }\n\n                            // TS: In an arrow function, if there is a next sibling of the arrow and it's not an open brace, we're not in a\n                            // block context and we should return false.\n                            if (keyword.type == '=>' && keyword.nextSibling && keyword.nextSibling.type != '{') {\n                                return false;\n                            }\n\n                            break;\n                        }\n                    }\n\n                    if (block && block.startIndex > keyword.endIndex) {\n                        return this.isBlockEmpty(block, offset);\n                    }\n                    return true;\n                }\n            }\n            if (blockParentNode != null) {\n                const expectedType = this.nodeMatch[blockParentNode.type];\n                const block = blockParentNode.children\n                    .slice()\n                    .reverse()\n                    .find(x => x.type == expectedType);\n                if (!block) {\n                    // Some node types have a child that is either a block or a statement, e.g. \"if (foo)\".\n                    // If the user has started typing a non-block statement, then this is not the start of an\n                    // empty block.\n                    if (this.nodeTypesWithBlockOrStmtChild.has(blockParentNode.type)) {\n                        const fieldLabel = this.nodeTypesWithBlockOrStmtChild.get(blockParentNode.type)!;\n                        const child =\n                            fieldLabel == ''\n                                ? blockParentNode.children[0]\n                                : blockParentNode.childForFieldName(fieldLabel);\n                        if (child && child.type != this.blockNodeType && child.type != this.emptyStatementType) {\n                            return false;\n                        }\n                    }\n\n                    return true;\n                } else {\n                    return this.isBlockEmpty(block, offset);\n                }\n            }\n\n            return false;\n        } finally {\n            tree.delete();\n        }\n    }\n}\n\nconst wasmLanguageToBlockParser: {[languageId in WASMLanguage]: BlockParser} = {\n    python: new TreeSitterBasedBlockParser(\n        /* languageId */ 'python',\n        /* nodeMatch */ {\n            // Generated with script/tree-sitter-super-types tree-sitter-python block\n            class_definition: 'block',\n            elif_clause: 'block',\n            else_clause: 'block',\n            except_clause: 'block',\n            finally_clause: 'block',\n            for_statement: 'block',\n            function_definition: 'block',\n            if_statement: 'block',\n            try_statement: 'block',\n            while_statement: 'block',\n            with_statement: 'block',\n        },\n        /* nodeTypesWithBlockOrStmtChild */ new Map(),\n        /* startKeywords */ ['def', 'class', 'if', 'elif', 'else', 'for', 'while', 'try', 'except', 'finally', 'with'],\n        /* blockNodeType */ 'block',\n        /* emptyStatementType */ null,\n        /* curlyBraceLanguage */ false\n    ),\n    javascript: new TreeSitterBasedBlockParser(\n        /* languageId */ 'javascript',\n        /* nodeMatch */ {\n            // Generated with script/tree-sitter-super-types tree-sitter-javascript statement_block\n            arrow_function: 'statement_block',\n            catch_clause: 'statement_block',\n            do_statement: 'statement_block',\n            else_clause: 'statement_block',\n            finally_clause: 'statement_block',\n            for_in_statement: 'statement_block',\n            for_statement: 'statement_block',\n            function: 'statement_block',\n            function_declaration: 'statement_block',\n            generator_function: 'statement_block',\n            generator_function_declaration: 'statement_block',\n            if_statement: 'statement_block',\n            method_definition: 'statement_block',\n            try_statement: 'statement_block',\n            while_statement: 'statement_block',\n            with_statement: 'statement_block',\n            // Generated with script/tree-sitter-super-types tree-sitter-javascript class_body\n            class: 'class_body',\n            class_declaration: 'class_body',\n        },\n        /* nodeTypesWithBlockOrStmtChild */ new Map([\n            ['arrow_function', 'body'],\n            ['do_statement', 'body'],\n            ['else_clause', ''],\n            ['for_in_statement', 'body'],\n            ['for_statement', 'body'],\n            ['if_statement', 'consequence'],\n            ['while_statement', 'body'],\n            ['with_statement', 'body'],\n        ]),\n        /* startKeywords */ [\n            '=>',\n            'try',\n            'catch',\n            'finally',\n            'do',\n            'for',\n            'if',\n            'else',\n            'while',\n            'with',\n            'function',\n            'function*',\n            'class',\n        ],\n        /* blockNodeType */ 'statement_block',\n        /* emptyStatementType */ 'empty_statement',\n        /* curlyBraceLanguage */ true\n    ),\n    typescript: new TreeSitterBasedBlockParser(\n        /* languageId */ 'typescript',\n        /* nodeMatch */ {\n            // Generated with script/tree-sitter-super-types tree-sitter-typescript/typescript statement_block\n            ambient_declaration: 'statement_block',\n            arrow_function: 'statement_block',\n            catch_clause: 'statement_block',\n            do_statement: 'statement_block',\n            else_clause: 'statement_block',\n            finally_clause: 'statement_block',\n            for_in_statement: 'statement_block',\n            for_statement: 'statement_block',\n            function: 'statement_block',\n            function_declaration: 'statement_block',\n            generator_function: 'statement_block',\n            generator_function_declaration: 'statement_block',\n            if_statement: 'statement_block',\n            internal_module: 'statement_block',\n            method_definition: 'statement_block',\n            module: 'statement_block',\n            try_statement: 'statement_block',\n            while_statement: 'statement_block',\n            // Generated with script/tree-sitter-super-types tree-sitter-typescript/typescript class_body\n            abstract_class_declaration: 'class_body',\n            class: 'class_body',\n            class_declaration: 'class_body',\n        },\n        /* nodeTypesWithBlockOrStmtChild */ new Map([\n            ['arrow_function', 'body'],\n            ['do_statement', 'body'],\n            ['else_clause', ''],\n            ['for_in_statement', 'body'],\n            ['for_statement', 'body'],\n            ['if_statement', 'consequence'],\n            ['while_statement', 'body'],\n            ['with_statement', 'body'],\n        ]),\n        /* startKeywords */ [\n            'declare',\n            '=>',\n            'try',\n            'catch',\n            'finally',\n            'do',\n            'for',\n            'if',\n            'else',\n            'while',\n            'with',\n            'function',\n            'function*',\n            'class',\n        ],\n        /* blockNodeType */ 'statement_block',\n        /* emptyStatementType */ 'empty_statement',\n        /* curlyBraceLanguage */ true\n    ),\n    tsx: new TreeSitterBasedBlockParser(\n        /* languageId */ 'typescriptreact',\n        /* nodeMatch */ {\n            // Generated with script/tree-sitter-super-types tree-sitter-typescript/typescript statement_block\n            ambient_declaration: 'statement_block',\n            arrow_function: 'statement_block',\n            catch_clause: 'statement_block',\n            do_statement: 'statement_block',\n            else_clause: 'statement_block',\n            finally_clause: 'statement_block',\n            for_in_statement: 'statement_block',\n            for_statement: 'statement_block',\n            function: 'statement_block',\n            function_declaration: 'statement_block',\n            generator_function: 'statement_block',\n            generator_function_declaration: 'statement_block',\n            if_statement: 'statement_block',\n            internal_module: 'statement_block',\n            method_definition: 'statement_block',\n            module: 'statement_block',\n            try_statement: 'statement_block',\n            while_statement: 'statement_block',\n            // Generated with script/tree-sitter-super-types tree-sitter-typescript/typescript class_body\n            abstract_class_declaration: 'class_body',\n            class: 'class_body',\n            class_declaration: 'class_body',\n        },\n        /* nodeTypesWithBlockOrStmtChild */ new Map([\n            ['arrow_function', 'body'],\n            ['do_statement', 'body'],\n            ['else_clause', ''],\n            ['for_in_statement', 'body'],\n            ['for_statement', 'body'],\n            ['if_statement', 'consequence'],\n            ['while_statement', 'body'],\n            ['with_statement', 'body'],\n        ]),\n        /* startKeywords */ [\n            'declare',\n            '=>',\n            'try',\n            'catch',\n            'finally',\n            'do',\n            'for',\n            'if',\n            'else',\n            'while',\n            'with',\n            'function',\n            'function*',\n            'class',\n        ],\n        /* blockNodeType */ 'statement_block',\n        /* emptyStatementType */ 'empty_statement',\n        /* curlyBraceLanguage */ true\n    ),\n    go: new RegexBasedBlockParser(\n        /* languageId */ 'go',\n        /* blockEmptyMatch */ '{}',\n        /* lineMatch */ /\\b(func|if|else|for)\\b/,\n        /* nodeMatch */ {\n            // Generated with script/tree-sitter-super-types tree-sitter-go block\n            communication_case: 'block',\n            default_case: 'block',\n            expression_case: 'block',\n            for_statement: 'block',\n            func_literal: 'block',\n            function_declaration: 'block',\n            if_statement: 'block',\n            labeled_statement: 'block',\n            method_declaration: 'block',\n            type_case: 'block',\n        },\n        /* nodeTypesWithBlockOrStmtChild */ new Map() // Go always requires braces\n    ),\n    ruby: new RegexBasedBlockParser(\n        /* languageId */ 'ruby',\n        /* blockEmptyMatch */ 'end',\n        // Regex \\b matches word boundaries - `->{}` has no word boundary.\n        /* lineMatch */ /\\b(BEGIN|END|case|class|def|do|else|elsif|for|if|module|unless|until|while)\\b|->/,\n        /* nodeMatch */ {\n            // Ruby works differently from other languages because there is no\n            // block-level node, instead we use the literal 'end' node to\n            // represent the end of a block.\n            begin_block: '}',\n            block: '}',\n            end_block: '}',\n            lambda: 'block',\n            for: 'do',\n            until: 'do',\n            while: 'do',\n            case: 'end',\n            do: 'end',\n            if: 'end',\n            method: 'end',\n            module: 'end',\n            unless: 'end',\n            do_block: 'end',\n        },\n        // TODO(eaftan): Scour Ruby grammar for these\n        /* nodeTypesWithBlockOrStmtChild */ new Map()\n    ),\n};\n\nexport function getBlockParser(languageId: string): BlockParser {\n    return wasmLanguageToBlockParser[languageIdToWasmLanguage(languageId)];\n}\n\nexport async function isEmptyBlockStart(languageId: string, text: string, offset: number) {\n    if (!isSupportedLanguageId(languageId)) {\n        return false;\n    }\n    return getBlockParser(languageId).isEmptyBlockStart(text, offset);\n}\n\nexport async function isBlockBodyFinished(languageId: string, prefix: string, completion: string, offset: number) {\n    if (!isSupportedLanguageId(languageId)) {\n        return undefined;\n    }\n    return getBlockParser(languageId).isBlockBodyFinished(prefix, completion, offset);\n}\n\nexport async function getNodeStart(languageId: string, text: string, offset: number) {\n    if (!isSupportedLanguageId(languageId)) {\n        return;\n    }\n    return getBlockParser(languageId).getNodeStart(text, offset);\n}\n",
    "import {FileSystem} from './fileSystem';\nimport {newLineEnded} from './languageMarker';\nimport {getSiblingFunctionStart} from './siblingFunctions';\nimport {CursorSnippetsPickingStrategy} from './snippetInclusion/cursorMatching';\nimport {NeighboringSnippetType, NeighboringTabsOption} from './snippetInclusion/neighboringFiles';\nimport {\n    SingleSnippetProviderOptions,\n    SnippetProviderOptions,\n    SnippetProviderType,\n    SnippetWithProviderInfo,\n    processSnippetsForWishlist,\n} from './snippetInclusion/snippets';\nimport {findEditDistanceScore} from './suffixMatchCriteria';\nimport {TokenizerName, getTokenizer} from './tokenization';\nimport {\n    Priorities,\n    PromptBackground,\n    PromptChoices,\n    PromptElementKind,\n    PromptElementRanges,\n    PromptWishlist,\n} from './wishlist';\n/** The 1-entry cache for the suffix */\nlet cachedSuffix: {text: string; tokens: number[]} = {text: '', tokens: []};\n\n/**\n * Re. cached suffix, see the discussion in the PR: https://github.com/github/copilot-client/pull/2171\n * In an earlier version of the PR, we had declared variables cacheReusedCount,cacheReusablePromptTooLong\n * to track how often\n * (a) the cache is reused (cacheReusedCount) and\n * (b) when reusable, does the cache with the new prompt become too\n * long to be usable? (cacheReusablePromptTooLong)\n *\n * These are relevant to track in telemetry, and we will\n * implement the telemetry logs for these variables in a later iteration.\n * We have removed these variables in the PR since we were console.log'ging\n * it earlier, and that is not the preferred route.\n */\n\n/** The maximum number of tokens in a prompt. */\nexport const MAX_PROMPT_LENGTH = 1500;\n\n/** The maximum number of tokens that is used for calculate edit distance. */\nexport const MAX_EDIT_DISTANCE_LENGTH = 50;\n\n/**\n * The number of tokens to reserve for prefix + suffix encoding.\n * This value comes from hponde.\n */\nexport const TOKENS_RESERVED_FOR_SUFFIX_ENCODING = 5;\n\n/**\n * The maximal number of the final snippets to return.\n */\nexport const DEFAULT_NUM_OF_SNIPPETS: number = 4;\n\n/**\n * Information about a document, not including the offset.\n */\nexport interface DocumentInfo {\n    /** The file path of the document relative to its containing project or folder, if known. */\n    relativePath?: string;\n    /** The URI of the document. We can't pass URI class instances directly due to limitations of passing objects to the worker thread. */\n    uri: string;\n    /** The source text of the document. */\n    source: string;\n    /** The language identifier of the document. */\n    languageId: string;\n}\n\n/**\n * Information about a document, including an offset corresponding to\n * the cursor position.\n */\nexport interface DocumentInfoWithOffset extends DocumentInfo {\n    /** The offset in the document where we want the completion (0-indexed, between characters). */\n    offset: number;\n}\n\nexport enum LanguageMarkerOption {\n    NoMarker = 'nomarker',\n    Top = 'top', // Emulate that the first line of document is the language marker\n    Always = 'always', // Always visible\n}\n\nexport enum PathMarkerOption {\n    NoMarker = 'nomarker',\n    Top = 'top',\n    Always = 'always',\n}\n\nexport enum SnippetPositionOption {\n    /** Include neighbors towards the beginning of the file */\n    TopOfText = 'top',\n    /** Include neighbors directly above the line where the cursor is */\n    DirectlyAboveCursor = 'aboveCursor',\n    /**\n     * Include neighbors directly after the siblig insertion point\n     * for languages that have one (above cursor otherwise)\n     */\n    AfterSiblings = 'afterSiblings',\n}\n\nexport enum SnippetSelectionOption {\n    /** Select the closest match.*/\n    BestMatch = 'bestMatch',\n    /** Select K closest match. */\n    TopK = 'topK',\n}\n\nexport enum LocalImportContextOption {\n    /** Don't pull in any context for local imports. */\n    NoContext = 'nocontext',\n    /** Pull in declarations referenced by local imports. */\n    Declarations = 'declarations',\n}\n\nexport enum LineEndingOptions {\n    ConvertToUnix = 'unix', // convert \"\\r\\n\" and \"\\r\" line endings to the more token-efficient \\n\n    KeepOriginal = 'keep', // keep the original line endings (whether \\r\\n or \\n)\n}\n\nexport enum SuffixOption {\n    /** Do not include a suffix in the prompt. */\n    None = 'none',\n    /** Allocate 15% of the available tokens to the suffix. */\n    FifteenPercent = 'fifteenPercent',\n}\n\nexport enum SuffixMatchOption {\n    /** The method to use to compare suffix against cached suffix */\n    /** The suffix and cached suffix are to be equal */\n    Equal = 'equal',\n    /** Use Edit distance */\n    Levenshtein = 'levenshteineditdistance',\n}\n\nexport enum SuffixStartMode {\n    /** start from cursor by default */\n    Cursor = 'cursor',\n    /** start from cursor and trim start */\n    CursorTrimStart = 'cursortrimstart',\n    /** start from the first sibling function block */\n    SiblingBlock = 'siblingblock',\n    /** start from the first sibling function block and trim the leading whitespaces */\n    SiblingBlockTrimStart = 'siblingblocktrimstart',\n}\n\nexport class PromptOptions {\n    /** The maximum prompt length in tokens */\n    readonly maxPromptLength: number = MAX_PROMPT_LENGTH;\n    /** Whether to include a language marker in the prompt */\n    readonly languageMarker: LanguageMarkerOption = LanguageMarkerOption.Top;\n    /** Whether to include a path marker in the prompt */\n    readonly pathMarker: PathMarkerOption = PathMarkerOption.Top;\n    /** Whether to pull in context for local imports */\n    readonly localImportContext: LocalImportContextOption = LocalImportContextOption.NoContext;\n    /** Where to include the neighboring tabs info */\n    readonly snippetPosition: SnippetPositionOption = SnippetPositionOption.TopOfText;\n    /** The number of snippets to include */\n    readonly numberOfSnippets: number = DEFAULT_NUM_OF_SNIPPETS;\n    /** Options for each snippet provider */\n    readonly snippetProviderOptions: SnippetProviderOptions = {\n        // This normalization ensures that neighboring tabs is always scored\n        // above retrieved snippets:\n        //   - neighboring tabs get positive scores, higher is better\n        //   - retrieved snippets become negative scores, less negative is better\n        'neighboring-tabs': {\n            normalizationFunction: 'affine',\n            normalizationParams: [1.0, 0.0], // identity\n        },\n        retrieval: {\n            normalizationFunction: 'affine',\n            normalizationParams: [-1.0, 0.0],\n        },\n        'symbol-def': {\n            normalizationFunction: 'affine',\n            normalizationParams: [1.0, 0.0],\n            reservedSnippetCount: 2, // They are quite short, get two most outer caller functions\n        },\n        // Unused currently\n        language: {\n            normalizationFunction: 'affine',\n            normalizationParams: [1.0, 0.0],\n        },\n        path: {\n            normalizationFunction: 'affine',\n            normalizationParams: [1.0, 0.0],\n        },\n        'local-import-context': {\n            normalizationFunction: 'affine',\n            normalizationParams: [1.0, 0.0],\n        },\n    };\n    /** Whether to include content from neighboring tabs in the prompt */\n    readonly neighboringTabs: NeighboringTabsOption = NeighboringTabsOption.Eager;\n    /** The type of snippets that neighboring tabs should extract */\n    readonly neighboringSnippetTypes: NeighboringSnippetType = NeighboringSnippetType.NeighboringSnippets;\n    /** Whether to normalize line endings in the prompt */\n    readonly lineEnding: LineEndingOptions = LineEndingOptions.ConvertToUnix;\n    /** The percent of `maxPromptLength` to reserve for the suffix */\n    readonly suffixPercent: number = 0;\n    /** The percent of `maxPromptLength` to reserve for snippets */\n    readonly snippetPercent: number = 0;\n    /** The start mode to get suffix */\n    readonly suffixStartMode: SuffixStartMode = SuffixStartMode.Cursor;\n    /** TokenizerName used for prompt generation */\n    readonly tokenizerName: TokenizerName = TokenizerName.cushman001;\n    /** The threshold (in percent) for declaring match of new suffix with existing suffix */\n    readonly suffixMatchThreshold: number = 0;\n    /** The criteria to use for matching suffix with cachedSuffix, this is the percentage number*/\n    readonly suffixMatchCriteria: SuffixMatchOption = SuffixMatchOption.Levenshtein;\n    /** Selection options    */\n    readonly snippetSelection?: SnippetSelectionOption;\n    /** The number of snippets to select */\n    readonly snippetSelectionK?: number;\n    /** The threshold (as int) of length of the suffix only beyond which we will construct FIM requests */\n    readonly fimSuffixLengthThreshold: number = 0;\n    /** How to pick snippets for CursorHistoryMatcher */\n    readonly cursorSnippetsPickingStrategy: CursorSnippetsPickingStrategy = CursorSnippetsPickingStrategy.CursorJaccard;\n\n    constructor(\n        readonly fs: FileSystem,\n        options?: PartialPromptOptions\n    ) {\n        if (options) {\n            const selectionValue = options?.snippetSelection;\n            if (selectionValue && !Object.values(SnippetSelectionOption).includes(selectionValue)) {\n                throw new Error(`Invalid value for snippetSelection: ${selectionValue}`);\n            }\n            for (const key in options) {\n                if (key !== 'snippetProviderOptions') {\n                    // Note: this should really be improved so that the type\n                    // system can statically prove that this won't blow up in\n                    // run time (it will only do so if somewhat abused, right\n                    // now, to be fair). For now, we have a @ts-ignore.\n                    // @ts-ignore\n                    this[key] = options[key];\n                } else {\n                    // key === 'snippetProviderOptions'\n                    // For each provider, merge the options\n                    const newOptions = options.snippetProviderOptions || {};\n                    let provider: SnippetProviderType;\n                    for (provider in newOptions) {\n                        const providerOptions = newOptions[provider];\n                        if (providerOptions) {\n                            this.snippetProviderOptions[provider] = {\n                                ...this.snippetProviderOptions[provider],\n                                ...providerOptions,\n                            };\n                        }\n                    }\n                }\n            }\n        }\n\n        if (this.suffixPercent < 0 || this.suffixPercent > 100) {\n            throw new Error(`suffixPercent must be between 0 and 100, but was ${this.suffixPercent}`);\n        }\n\n        if (this.snippetPercent < 0 || this.snippetPercent > 100) {\n            throw new Error(`snippetPercent must be between 0 and 100, but was ${this.snippetPercent}`);\n        }\n\n        if (this.suffixMatchThreshold < 0 || this.suffixMatchThreshold > 100) {\n            throw new Error(`suffixMatchThreshold must be at between 0 and 100, but was ${this.suffixMatchThreshold}`);\n        }\n\n        // the threshold being -1 indicates we are not using this thresholding for the suffixes.\n        if (this.fimSuffixLengthThreshold < -1) {\n            throw new Error(`fimSuffixLengthThreshold must be at least -1, but was ${this.fimSuffixLengthThreshold}`);\n        }\n\n        if (this.snippetSelection === SnippetSelectionOption.TopK && this.snippetSelectionK === undefined) {\n            throw new Error('snippetSelectionK must be defined.');\n        }\n\n        if (\n            this.snippetSelection === SnippetSelectionOption.TopK &&\n            this.snippetSelectionK &&\n            this.snippetSelectionK <= 0\n        ) {\n            throw new Error(`snippetSelectionK must be greater than 0, but was ${this.snippetSelectionK}`);\n        }\n    }\n}\n\n/**\n * This type is used to represent options that may be set by the caller, and\n * which will be completed to a {@link PromptOptions} object by filling with the\n * default options.\n *\n * The invocation is complicated by snippet provider options which should be\n * allowed to only set some of the options on some of the providers.\n */\nexport type PartialPromptOptions = Partial<Omit<PromptOptions, 'snippetProviderOptions'>> & {\n    snippetProviderOptions?: Partial<Record<SnippetProviderType, Partial<SingleSnippetProviderOptions>>>;\n};\n\nexport interface PromptInfo {\n    prefix: string; // The prefix text\n    suffix: string; // The suffix text\n    prefixLength: number; // The length of the prefix in tokens\n    suffixLength: number; // The length of the suffix in tokens\n    promptChoices: PromptChoices; // Which choices were made when constructing the prompt\n    promptBackground: PromptBackground; // All the prompt elements information when constructing the prompt\n    promptElementRanges: PromptElementRanges; // Character ranges of prompt elements in the prompt\n}\n\n/**\n * A map that normalises common aliases of languageIds.\n */\nconst languageNormalizationMap: {[language: string]: string} = {\n    javascriptreact: 'javascript',\n    jsx: 'javascript',\n    typescriptreact: 'typescript',\n    jade: 'pug',\n    cshtml: 'razor',\n};\n\n/**\n * Return a normalized form of a language id, by lower casing and combining\n * certain languageId's that are not considered distinct by promptlib.\n */\nexport function normalizeLanguageId(languageId: string): string {\n    languageId = languageId.toLowerCase();\n    return languageNormalizationMap[languageId] ?? languageId;\n}\n\n/**\n * Constructs a prompt to pass to the OpenAI API.\n *\n * @remarks\n * The current implementation does the simplest thing possible: It estimates the number of\n * characters that will fit within the maximum length of a prompt in tokens, then returns a\n * substring of doc that starts at some reasonable index and ends at offset, such that\n * (end - start) <= estimated_length.\n *\n * This will change in the future.\n *\n * @param doc - A DocumentInfoWithOffset\n * @param options - A PromptOptions which controls the prompt crafting behaviour.\n * @param neighbors - A list of neighboring documents, e.g., documents open in other\n *                    editor tabs.\n * @param snippets - A list of snippets with scores and provider information\n *                   to (potentially) include in the prompt.\n * @param lineCursorHistory - A The first key is the file name, and the second key\n *                            is the line number, the value is the number of cursor\n *                            focused.\n *\n * @returns A dictionary containing the prompt to pass to the OpenAI API and the\n * resulting prompt length in tokens.\n */\nexport async function getPrompt(\n    fileSystem: FileSystem,\n    doc: DocumentInfoWithOffset,\n    options: PartialPromptOptions = {},\n    snippets: SnippetWithProviderInfo[] = []\n): Promise<PromptInfo> {\n    const completeOptions = new PromptOptions(fileSystem, options);\n\n    const tokenizer = getTokenizer(completeOptions.tokenizerName);\n\n    let useCachedSuffix = false;\n\n    const {source, offset} = doc;\n    if (offset < 0 || offset > source.length) {\n        throw new Error(`Offset ${offset} is out of range.`);\n    }\n    doc.languageId = normalizeLanguageId(doc.languageId);\n\n    // Make explicit the priorities implied by the different options\n    const priorities = new Priorities();\n    const directContextPriority = priorities.justBelow(Priorities.TOP);\n    const languageMarkerPriority =\n        completeOptions.languageMarker === LanguageMarkerOption.Always\n            ? priorities.justBelow(Priorities.TOP)\n            : priorities.justBelow(directContextPriority);\n    const pathMarkerPriority =\n        completeOptions.pathMarker === PathMarkerOption.Always\n            ? priorities.justBelow(Priorities.TOP)\n            : priorities.justBelow(directContextPriority);\n    const localImportContextPriority = priorities.justBelow(directContextPriority);\n    // There are two priorities for snippets: one for snippets that are\n    // within the token budget defined by `snippetPercent` and one that are\n    // outside of the token budget. The former are given a higher priority\n    // when assembling the prompt, but the lower priority ones are still\n    // included if there is space.\n    const lowSnippetPriority = priorities.justBelow(localImportContextPriority);\n    const highSnippetPriority = priorities.justAbove(directContextPriority);\n\n    // The wishlist keeps track of what we would like to include in the prompt\n    const promptWishlist = new PromptWishlist(tokenizer, completeOptions.lineEnding);\n\n    // Language Snippet\n    let languageSnippet = snippets.find(s => s.provider === SnippetProviderType.Language);\n    let languageMarkerLine: number | undefined;\n    if (completeOptions.languageMarker !== LanguageMarkerOption.NoMarker) {\n        if (languageSnippet) {\n            languageMarkerLine = promptWishlist.append(\n                languageSnippet.snippet,\n                PromptElementKind.LanguageMarker,\n                languageMarkerPriority\n            );\n        }\n    }\n\n    // Path Snippet\n    let pathSnippet = snippets.find(s => s.provider === SnippetProviderType.Path);\n    let pathMarkerLine: number | undefined;\n    if (completeOptions.pathMarker !== PathMarkerOption.NoMarker && pathSnippet !== undefined) {\n        // not just newline\n        if (pathSnippet.snippet.length > 0) {\n            pathMarkerLine = promptWishlist.append(\n                pathSnippet.snippet,\n                PromptElementKind.PathMarker,\n                pathMarkerPriority\n            );\n        }\n    }\n\n    // imports get inserted after the language / path markers, but before anything from the file itself\n    let localImportSnippet = snippets.filter(s => s.provider === SnippetProviderType.LocalImportContext);\n    if (completeOptions.localImportContext !== LocalImportContextOption.NoContext) {\n        for (const localImportContext of localImportSnippet) {\n            promptWishlist.append(\n                newLineEnded(localImportContext.snippet),\n                PromptElementKind.ImportedFile,\n                localImportContextPriority\n            );\n        }\n    }\n\n    // Remove language & path snippets from the list of snippets prior to wishlist fulfillment\n    // Because they have already been included above\n    snippets = snippets.filter(\n        s =>\n            s.provider !== SnippetProviderType.Language &&\n            s.provider !== SnippetProviderType.Path &&\n            s.provider !== SnippetProviderType.LocalImportContext\n    );\n\n    /** Deferred function to add the prepared snippets to the wishlist at\n     * the location at that points\n     */\n    function addSnippetsNow(): void {\n        // assign priorities based on budget\n        const budget = Math.round((completeOptions.snippetPercent / 100.0) * completeOptions.maxPromptLength);\n        const processedSnippets = processSnippetsForWishlist(\n            snippets,\n            doc.languageId,\n            tokenizer,\n            completeOptions.snippetProviderOptions,\n            {priorities, low: lowSnippetPriority, high: highSnippetPriority},\n            completeOptions.numberOfSnippets,\n            budget\n        );\n        // add to wishlist\n        processedSnippets.forEach(snippet => {\n            // TODO: this should be cleaned up https://github.com/github/copilot-client/issues/3303\n            let kind = PromptElementKind.SimilarFile;\n            if (snippet.provider === SnippetProviderType.Retrieval) {\n                kind = PromptElementKind.RetrievalSnippet;\n            } else if (snippet.provider == SnippetProviderType.SymbolDef) {\n                kind = PromptElementKind.SymbolDefinition;\n            }\n            promptWishlist.append(\n                snippet.announcedSnippet,\n                kind,\n                snippet.priority,\n                snippet.tokens,\n                snippet.normalizedScore\n            );\n        });\n    }\n\n    if (completeOptions.snippetPosition === SnippetPositionOption.TopOfText) {\n        addSnippetsNow();\n    }\n\n    /** The ids of lines of BeforeCursor elements in the promptlib */\n    const source_lines: number[] = [];\n    let directContext: string | undefined;\n    directContext = source.substring(0, offset);\n\n    if (completeOptions.snippetPosition === SnippetPositionOption.DirectlyAboveCursor) {\n        // first add all lines from directContext except the current partial one (if there is one)\n        const lastLineStart = directContext.lastIndexOf('\\n') + 1; // 0 if no newline\n        const directContextBeforePartialLastLine = directContext.substring(0, lastLineStart);\n        const partialLastLine = directContext.substring(lastLineStart); // may be \"\" if none\n        promptWishlist\n            .appendLineForLine(\n                directContextBeforePartialLastLine,\n                PromptElementKind.BeforeCursor,\n                directContextPriority\n            )\n            .forEach(id => source_lines.push(id));\n        addSnippetsNow();\n        // then add the partial last line, if it's not empty\n        if (partialLastLine.length > 0) {\n            source_lines.push(\n                promptWishlist.append(partialLastLine, PromptElementKind.AfterCursor, directContextPriority)\n            );\n            // note that the second-to-last line requires the last line, or it makes no sense\n            if (source_lines.length > 1) {\n                promptWishlist.require(source_lines[source_lines.length - 2], source_lines[source_lines.length - 1]);\n            }\n        }\n    } else {\n        promptWishlist\n            .appendLineForLine(directContext, PromptElementKind.BeforeCursor, directContextPriority)\n            .forEach(id => source_lines.push(id));\n    }\n\n    // the marker options `Top` intend to simulate the file beginning with the markers\n    // so the markers should depend on the first line of source code --\n    // if that is missing, so should they be\n    if (\n        LanguageMarkerOption.Top === completeOptions.languageMarker &&\n        source_lines.length > 0 &&\n        languageMarkerLine !== undefined\n    ) {\n        promptWishlist.require(languageMarkerLine, source_lines[0]);\n    }\n    if (\n        PathMarkerOption.Top === completeOptions.pathMarker &&\n        source_lines.length > 0 &&\n        pathMarkerLine !== undefined\n    ) {\n        languageMarkerLine\n            ? promptWishlist.require(pathMarkerLine, languageMarkerLine)\n            : promptWishlist.require(pathMarkerLine, source_lines[0]);\n    }\n\n    // Language markers are not necessary if the pathmarker already indicates extension\n    if (languageMarkerLine !== undefined && pathMarkerLine !== undefined) {\n        promptWishlist.exclude(pathMarkerLine, languageMarkerLine);\n    }\n\n    let actualSuffix = source.slice(offset);\n\n    if (completeOptions.suffixPercent === 0 || actualSuffix.length <= completeOptions.fimSuffixLengthThreshold) {\n        return promptWishlist.fulfill(completeOptions.maxPromptLength);\n    } else {\n        let offset = doc.offset;\n        if (\n            completeOptions.suffixStartMode !== SuffixStartMode.Cursor &&\n            completeOptions.suffixStartMode !== SuffixStartMode.CursorTrimStart\n        ) {\n            offset = await getSiblingFunctionStart(doc);\n        }\n\n        // First, construct prefix using the wishlist.\n        const availableTokens = completeOptions.maxPromptLength - TOKENS_RESERVED_FOR_SUFFIX_ENCODING;\n        let prefixTargetTokens = Math.floor((availableTokens * (100 - completeOptions.suffixPercent)) / 100);\n        let promptInfo = promptWishlist.fulfill(prefixTargetTokens);\n\n        // Then construct suffix using the remaining tokens.  The prefix/wishlist computation usually\n        // does not consume all the available tokens, so we reallocate any remaining to the suffix.\n        const suffixTargetTokens = availableTokens - promptInfo.prefixLength;\n        let suffixText = source.slice(offset);\n        if (\n            completeOptions.suffixStartMode === SuffixStartMode.SiblingBlockTrimStart ||\n            completeOptions.suffixStartMode === SuffixStartMode.CursorTrimStart\n        ) {\n            suffixText = suffixText.trimStart();\n        }\n\n        const suffix = tokenizer.takeFirstTokens(suffixText, suffixTargetTokens);\n\n        // If there is not enough text to fill the suffix, allocate the extra tokens to\n        // the prefix and recompute it.\n        if (suffix.tokens.length <= suffixTargetTokens - 3) {\n            // only recompute prefix if we can increase its length by >= 3 tokens\n            prefixTargetTokens = availableTokens - suffix.tokens.length;\n            promptInfo = promptWishlist.fulfill(prefixTargetTokens);\n        }\n\n        if (completeOptions.suffixMatchCriteria === SuffixMatchOption.Equal) {\n            if (\n                suffix.tokens.length === cachedSuffix.tokens.length &&\n                suffix.tokens.every((v, i) => v === cachedSuffix.tokens[i])\n            ) {\n                useCachedSuffix = true;\n            }\n        } else if (completeOptions.suffixMatchCriteria === SuffixMatchOption.Levenshtein) {\n            // if the current suffix is an empty string, then do not add the cachedSuffix\n            if (suffix.tokens.length > 0 && completeOptions.suffixMatchThreshold > 0) {\n                // only compare the first MAX_EDIT_DISTANCE_LENGTH tokens to speed up.\n                const dist = findEditDistanceScore(\n                    suffix.tokens.slice(0, MAX_EDIT_DISTANCE_LENGTH),\n                    cachedSuffix.tokens.slice(0, MAX_EDIT_DISTANCE_LENGTH)\n                )?.score;\n                if (\n                    100 * dist <\n                    completeOptions.suffixMatchThreshold * Math.min(MAX_EDIT_DISTANCE_LENGTH, suffix.tokens.length)\n                ) {\n                    useCachedSuffix = true;\n                }\n            }\n        }\n\n        if (useCachedSuffix === true && cachedSuffix.tokens.length <= suffixTargetTokens) {\n            // Similar to codeblock above for actual suffix, if there is not enough text to fill the suffix, allocate extra\n            // tokens to the prefix and recompute it.\n            if (cachedSuffix.tokens.length <= suffixTargetTokens - 3) {\n                // only recompute prefix if we can increase its length by >= 3 tokens\n                prefixTargetTokens = availableTokens - cachedSuffix.tokens.length;\n                promptInfo = promptWishlist.fulfill(prefixTargetTokens);\n            }\n            promptInfo.suffix = cachedSuffix.text;\n            promptInfo.suffixLength = cachedSuffix.tokens.length;\n        } else {\n            // EITHER suffix is not close to cachedSuffix OR cachedSuffix is too long. In either case, we devolve to actual suffix.\n            // Note: when cachedSuffix is too long, we have the option of truncating the cachedSuffix using takeFirstTokens but that\n            // would already invalidate the cache property that we want (in SPM mode).\n            promptInfo.suffix = suffix.text;\n            promptInfo.suffixLength = suffix.tokens.length;\n\n            // log current count, reset the suffix and counts\n            // TODO:\n            // About 0.1% of the time log the cachedReusedCount and the suffix used\n            // to telemetry. Discussion ongoing on Slack.\n            // Right now, console.logging cacheReusedCount so as to make the project.\n            cachedSuffix = suffix;\n        }\n\n        return promptInfo;\n    }\n}\n",
    "import {\n    getAncestorWithSiblingFunctions,\n    getFirstPrecedingComment,\n    isFunctionDefinition,\n    isSupportedLanguageId,\n    parseTreeSitter,\n} from './parse';\nimport {DocumentInfoWithOffset} from './prompt';\n\n/**\n * Find the sibling function start index to the given offset in the source code.\n *\n * @param documentInfo The document description\n *         (of which source text, offset and language will be used)\n * @returns start index of the first sibling block\n */\nexport async function getSiblingFunctionStart({source, offset, languageId}: DocumentInfoWithOffset) {\n    if (isSupportedLanguageId(languageId)) {\n        const tree = await parseTreeSitter(languageId, source);\n        try {\n            // find syntax-tree node we are on or right after\n            let startingOffset = offset;\n            while (startingOffset >= 0 && /\\s/.test(source[startingOffset])) startingOffset--;\n            const nd = tree.rootNode.descendantForIndex(startingOffset);\n\n            // find the closest ancestor that may have sibling functions\n            const anc = getAncestorWithSiblingFunctions(languageId, nd);\n            if (anc) {\n                // find sibling functions and include them all\n                for (let sibling = anc.nextSibling; sibling; sibling = sibling.nextSibling) {\n                    if (isFunctionDefinition(languageId, sibling)) {\n                        // take `sibling`, as well as any comments immediately preceding it, but not if\n                        // it precedes or spans `offset`\n                        const docComment = getFirstPrecedingComment(sibling);\n                        const startIndex = docComment?.startIndex ?? sibling.startIndex;\n                        if (startIndex < offset) {\n                            continue;\n                        }\n\n                        return startIndex;\n                    }\n                }\n\n                if (anc.endIndex >= offset) {\n                    return anc.endIndex;\n                }\n            }\n        } finally {\n            tree.delete();\n        }\n    }\n\n    return offset;\n}\n",
    "/**\n * Cursor contexts used by snippet providers, e.g. retrieval and neighboring tabs.\n *\n * A 'cursor context' is quite similar to a prompt, but it is meant as a more\n * basic, lightweight and ultimately myopic look at what the user is currently doing.\n */\n\nimport {DocumentInfoWithOffset} from '../prompt';\nimport {getTokenizer, TokenizerName} from '../tokenization';\n\n/**\n * Options for cursor context generation.\n */\nexport type CursorContextOptions = {\n    /** The maximum cursor context length in tokens */\n    maxTokenLength?: number;\n\n    /** The maximum number of lines in a cursor context */\n    maxLineCount?: number;\n\n    /** TokenizerName for the tokenization */\n    tokenizerName: TokenizerName;\n};\n\nconst defaultCursorContextOptions: CursorContextOptions = {\n    tokenizerName: TokenizerName.cushman002,\n};\n\nfunction cursorContextOptions(options?: Partial<CursorContextOptions>): CursorContextOptions {\n    return {...defaultCursorContextOptions, ...options};\n}\n\nexport interface CursorContextInfo {\n    /** The compiled context as a string */\n    context: string;\n    /** The number of tokens in the context */\n    tokenLength: number;\n    /** The number of lines in the context */\n    lineCount: number;\n    /** TokenizerName for the tokenization */\n    tokenizerName: TokenizerName;\n}\n\n/**\n * Return a cursor context corresponding to this document info.\n * This is essentially a trimmed-down version of a prompt.\n * Tokenizer, if not provided as an option, currently defaults to cushman002\n *\n * If maxLineCount or maxTokenLength are 0, an empty context is returned\n * If exactly one of `maxLineCount` or `maxTokenLength` is defined, the limit is applied for that one only\n * If both are defined, we apply both conditions so end up using the shorter of the two constraints\n * If both are undefined, the entire document up to the cursor is returned\n */\nexport function getCursorContext(\n    doc: DocumentInfoWithOffset,\n    options: Partial<CursorContextOptions> = {}\n): CursorContextInfo {\n    const completeOptions = cursorContextOptions(options);\n    const tokenizer = getTokenizer(completeOptions.tokenizerName);\n\n    if (completeOptions.maxLineCount !== undefined && completeOptions.maxLineCount < 0) {\n        throw new Error('maxLineCount must be non-negative if defined');\n    }\n    if (completeOptions.maxTokenLength !== undefined && completeOptions.maxTokenLength < 0) {\n        throw new Error('maxTokenLength must be non-negative if defined');\n    }\n\n    if (completeOptions.maxLineCount === 0 || completeOptions.maxTokenLength === 0) {\n        return {\n            context: '',\n            lineCount: 0,\n            tokenLength: 0,\n            tokenizerName: completeOptions.tokenizerName,\n        };\n    }\n\n    let context = doc.source.slice(0, doc.offset); // Trim to cursor location, offset is a character location\n    if (completeOptions.maxLineCount !== undefined) {\n        context = context.split('\\n').slice(-completeOptions.maxLineCount).join('\\n');\n    }\n    if (completeOptions.maxTokenLength !== undefined) {\n        context = tokenizer.takeLastLinesTokens(context, completeOptions.maxTokenLength);\n    }\n    return {\n        context,\n        lineCount: context.split('\\n').length,\n        tokenLength: tokenizer.tokenLength(context),\n        tokenizerName: completeOptions.tokenizerName,\n    };\n}\n",
    "import {DocumentInfo, DocumentInfoWithOffset, SnippetSelectionOption} from '../prompt';\nimport {CursorContextInfo, getCursorContext} from './cursorContext';\nimport {computeScore} from './jaccardMatching';\nimport {ScoredSnippetMarker, SortOptions, WindowedMatcher} from './selectRelevance';\nimport {SnippetProviderType, SnippetSemantics, SnippetWithProviderInfo} from './snippets';\nimport {getBasicWindowDelineations} from './windowDelineations';\n\n/**\n * 3 different strategies to pick up snippets by cursor history.\n * CursorOnly:\n *      Pick up the most clicked snippets.\n * CursorJaccard:\n *      Pick up the most clicked snippets, and re-sort them by Jaccard similarity.\n * JaccardCursor:\n *      Pick up the most similar snippet by Jaccard similarity, and re-sort them by the number of clicked.\n */\nexport enum CursorSnippetsPickingStrategy {\n    CursorOnly = 'cursoronly',\n    CursorJaccard = 'cursorjaccard',\n    JaccardCursor = 'jaccardcursor',\n}\n\nclass FifoCache<T> {\n    private keys: string[] = [];\n    private cache: {[key: string]: T} = {};\n    private size: number;\n    constructor(size: number) {\n        this.size = size;\n    }\n    put(key: string, value: T) {\n        this.cache[key] = value;\n        if (this.keys.length > this.size) {\n            this.keys.push(key);\n            const leavingKey = this.keys.shift() ?? '';\n            delete this.cache[leavingKey];\n        }\n    }\n    get(key: string): T | undefined {\n        return this.cache[key];\n    }\n}\n\n/**\n * For a number of documents (the neighboring tabs),\n * associate to each document and its kind of window computation (as key)\n * the sequence b_1, ..., b_n, where\n * b_i is the set of tokens in the ith window --\n * e.g. for window length 10,\n * WINDOWED_TOKEN_SET_CACHE(doc)[0]\n * holds the tokens in the first 10 lines of the document.\n */\nconst WINDOWED_TOKEN_SET_CACHE = new FifoCache<Set<string>[]>(20);\n\nclass CustomizedFixedWindowSizeJaccardMatcher extends WindowedMatcher {\n    private windowLength: number;\n\n    public constructor(referenceDoc: DocumentInfoWithOffset, windowLength: number) {\n        super(referenceDoc);\n        this.windowLength = windowLength;\n    }\n\n    protected id(): string {\n        return 'CustomizedFixedWindowSizeJaccardMatcher:' + this.windowLength;\n    }\n\n    protected getWindowsDelineations(lines: string[]): [number, number][] {\n        return getBasicWindowDelineations(this.windowLength, lines);\n    }\n\n    protected _getCursorContextInfo(referenceDoc: DocumentInfoWithOffset): CursorContextInfo {\n        return getCursorContext(referenceDoc, {\n            maxLineCount: this.windowLength,\n        });\n    }\n\n    protected similarityScore(a: Set<string>, b: Set<string>): number {\n        return computeScore(a, b);\n    }\n\n    /**\n     * Returns all snippet markers with their scores.\n     * @param objectDoc\n     * @param candidates This is a Map from start line to end line. This funciton only returns the snippets that the start line and end line are in the map.\n     *                   We need it because we want to ignore the code snippets that are not clicked. See the references in CursorHistoryMatcher.\n     *\n     */\n    override retrieveAllSnippets(\n        objectDoc: DocumentInfo,\n        sortOption = SortOptions.Descending,\n        candidates?: Map<number, number>\n    ): ScoredSnippetMarker[] {\n        const snippets: ScoredSnippetMarker[] = [];\n\n        if (objectDoc.source.length === 0 || this.referenceTokens.size === 0) {\n            return snippets;\n        }\n\n        const lines = objectDoc.source.split('\\n');\n        const key = this.id() + ':' + objectDoc.source;\n        const tokensInWindows = WINDOWED_TOKEN_SET_CACHE.get(key) ?? [];\n        // if the tokens are not cached, we need to compute them\n        const needToComputeTokens = tokensInWindows.length == 0;\n        const tokenizedLines = needToComputeTokens ? lines.map(this.tokenizer.tokenize, this.tokenizer) : [];\n\n        // Compute the windows with the score\n        for (const [index, [startLine, endLine]] of this.getWindowsDelineations(lines).entries()) {\n            if (needToComputeTokens) {\n                const tokensInWindow = new Set<string>();\n                tokenizedLines.slice(startLine, endLine).forEach(x => x.forEach(tokensInWindow.add, tokensInWindow));\n                tokensInWindows.push(tokensInWindow);\n            }\n\n            if (candidates !== undefined && candidates.get(startLine) !== endLine) {\n                continue;\n            }\n\n            // Now tokensInWindows[index] contains the tokens in the window, whether we just computed them or not\n            const tokensInWindow = tokensInWindows[index];\n            const score = this.similarityScore(tokensInWindow, this.referenceTokens);\n            snippets.push({\n                score,\n                startLine,\n                endLine,\n            });\n        }\n\n        // If we didn't get the token sets from the cache, time to put them there!\n        if (needToComputeTokens) {\n            WINDOWED_TOKEN_SET_CACHE.put(key, tokensInWindows);\n        }\n\n        return this.sortScoredSnippets(snippets, sortOption);\n    }\n}\n\n/**\n * Find the best matches from a neighbor file by cursor history information.\n */\nexport class CursorHistoryMatcher {\n    private windowLength: number;\n    private lineCursorHistory: Map<string, Map<number, number>>;\n    private jaccardMatcher: CustomizedFixedWindowSizeJaccardMatcher;\n    private strategy: CursorSnippetsPickingStrategy;\n\n    private constructor(\n        referenceDoc: DocumentInfoWithOffset,\n        windowLength: number,\n        lineCursorHistory: Map<string, Map<number, number>>,\n        strategy: CursorSnippetsPickingStrategy\n    ) {\n        this.windowLength = windowLength;\n        this.lineCursorHistory = lineCursorHistory;\n        this.jaccardMatcher = new CustomizedFixedWindowSizeJaccardMatcher(referenceDoc, windowLength);\n        this.strategy = strategy;\n    }\n\n    static FACTORY = (\n        windowLength: number,\n        lineCursorHistory: Map<string, Map<number, number>>,\n        strategy: CursorSnippetsPickingStrategy\n    ) => {\n        return {\n            to: (referenceDoc: DocumentInfoWithOffset) =>\n                new CursorHistoryMatcher(referenceDoc, windowLength, lineCursorHistory, strategy),\n        };\n    };\n\n    /**\n     * Returns a sorted array of snippets with their scores according to the sort option.\n     * @param snippets ScoredSnippetMarker[]\n     *\n     */\n    private sortScoredSnippets(\n        snippets: ScoredSnippetMarker[],\n        sortOption = SortOptions.Descending\n    ): ScoredSnippetMarker[] {\n        return sortOption == SortOptions.Ascending\n            ? snippets.sort((snippetA, snippetB) => (snippetA.score > snippetB.score ? 1 : -1))\n            : sortOption == SortOptions.Descending\n            ? snippets.sort((snippetA, snippetB) => (snippetA.score > snippetB.score ? -1 : 1))\n            : snippets;\n    }\n\n    private markerToSnippet(nonOverlappingSnippets: ScoredSnippetMarker[], lines: string[]): SnippetWithProviderInfo[] {\n        return nonOverlappingSnippets.map(snippetMarker => ({\n            snippet: lines.slice(snippetMarker.startLine, snippetMarker.endLine).join('\\n'),\n            provider: SnippetProviderType.NeighboringTabs,\n            semantics: SnippetSemantics.Snippet,\n            ...snippetMarker,\n        }));\n    }\n\n    public async findMatches(\n        objectDoc: DocumentInfo,\n        snippetSelectionOption = SnippetSelectionOption.BestMatch,\n        snippetSelectionK?: number\n    ): Promise<SnippetWithProviderInfo[]> {\n        if (snippetSelectionOption == SnippetSelectionOption.BestMatch) {\n            const bestMatch = await this.findBestMatch(objectDoc);\n            if (bestMatch === undefined) {\n                return [];\n            } else {\n                return [bestMatch];\n            }\n        }\n\n        if (snippetSelectionOption == SnippetSelectionOption.TopK) {\n            return (await this.findTopKMatches(objectDoc, snippetSelectionK)) || [];\n        }\n\n        return [];\n    }\n\n    /**\n     * Returns the snippet from the object document that is most similar to the reference Document.\n     * - The returned score\n     *   - For CursorOnly, the returned score is the number clicks.\n     *   - For CursorJaccard and JaccardCursor, The returned score is the sum of the number of clicks and the Jaccard similarity.\n     *     The number of clicks is always a integer, and the Jaccard similarity is always a float less than 1.\n     *     So we can assume that the code snippet will be sorted by the number of clicks first, and then by the Jaccard similarity.\n     * - Algorithm\n     *   - CursorOnly\n     *     Pick up the most clicked snippets. If there are multiply snippets with the same number of clicks,\n     *     it will return the middle one in the file.\n     *   - CursorJaccard\n     *     Pick up the most clicked snippets, and re-sort them by Jaccard similarity.\n     *   - JaccardCursor\n     *     It is equivalent to FixedWindowSizeJaccardMatcher.findBestMatch, because we just pick the most similar one snippet.\n     * @param objectDoc\n     */\n    public async findBestMatch(objectDoc: DocumentInfo): Promise<SnippetWithProviderInfo | undefined> {\n        if (objectDoc.source.length === 0) {\n            return undefined;\n        }\n\n        if (this.strategy === CursorSnippetsPickingStrategy.CursorOnly) {\n            let snippetsByCursor = this.retrieveCursorSnippets(objectDoc);\n            snippetsByCursor = this.sortScoredSnippets(snippetsByCursor, SortOptions.Descending);\n            if (snippetsByCursor.length === 0) {\n                return undefined;\n            }\n\n            const bestCursorScore = Math.max(...snippetsByCursor.map(s => s.score));\n            const bestSnippets = snippetsByCursor.filter(s => s.score === bestCursorScore);\n            const bestInMiddle = bestSnippets.sort((a, b) => a.startLine - b.startLine)[\n                Math.floor(bestSnippets.length / 2)\n            ];\n\n            const lines = objectDoc.source.split('\\n');\n            return {\n                snippet: lines.slice(bestInMiddle.startLine, bestInMiddle.endLine).join('\\n'),\n                provider: SnippetProviderType.NeighboringTabs,\n                semantics: SnippetSemantics.Snippet,\n                ...bestInMiddle,\n            };\n        } else if (this.strategy === CursorSnippetsPickingStrategy.CursorJaccard) {\n            let snippetsByCursor = this.retrieveCursorSnippets(objectDoc);\n            snippetsByCursor = this.sortScoredSnippets(snippetsByCursor, SortOptions.Descending);\n            if (snippetsByCursor.length === 0) {\n                return undefined;\n            }\n\n            const bestCursorScore = Math.max(...snippetsByCursor.map(s => s.score));\n            const bestSnippetsByCursor = [];\n            const bestSnippetsBoundaryByCursor = new Map<number, number>();\n            for (const snippet of snippetsByCursor) {\n                if (snippet.score === bestCursorScore) {\n                    bestSnippetsByCursor.push(snippet);\n                    bestSnippetsBoundaryByCursor.set(snippet.startLine, snippet.endLine);\n                }\n            }\n\n            const bestSnippets = this.jaccardMatcher.retrieveAllSnippets(\n                objectDoc,\n                SortOptions.Descending,\n                bestSnippetsBoundaryByCursor\n            );\n\n            if (bestSnippets.length === 0) {\n                return undefined;\n            }\n\n            const bestSnippet = bestSnippets[0];\n            for (const snippet of snippetsByCursor) {\n                if (snippet.startLine === bestSnippet.startLine && snippet.endLine === bestSnippet.endLine) {\n                    bestSnippet.score += snippet.score;\n                    break;\n                }\n            }\n\n            const lines = objectDoc.source.split('\\n');\n            return {\n                snippet: lines.slice(bestSnippet.startLine, bestSnippet.endLine).join('\\n'),\n                provider: SnippetProviderType.NeighboringTabs,\n                semantics: SnippetSemantics.Snippet,\n                ...bestSnippet,\n            };\n        } else if (this.strategy === CursorSnippetsPickingStrategy.JaccardCursor) {\n            const bestSnippet = await this.jaccardMatcher.findBestMatch(objectDoc);\n            if (bestSnippet === undefined) {\n                return undefined;\n            }\n\n            let snippetsByCursor = this.retrieveCursorSnippets(objectDoc);\n            snippetsByCursor = this.sortScoredSnippets(snippetsByCursor, SortOptions.Descending);\n            if (snippetsByCursor.length === 0) {\n                return undefined;\n            }\n\n            for (const snippet of snippetsByCursor) {\n                if (snippet.startLine === bestSnippet.startLine && snippet.endLine === bestSnippet.endLine) {\n                    bestSnippet.score += snippet.score;\n                    break;\n                }\n            }\n\n            return bestSnippet;\n        }\n    }\n\n    /**\n     * Returns the snippets from the object document that are most similar to the reference Document.\n     * - The returned score\n     *   - For CursorOnly, the returned score is the number clicks.\n     *   - For CursorJaccard and JaccardCursor, The returned score is the sum of the number of clicks and the Jaccard similarity.\n     *     The number of clicks is always a integer, and the Jaccard similarity is always a float less than 1.\n     *     So we can assume that the code snippet will be sorted by the number of clicks first, and then by the Jaccard similarity.\n     * - Algorithm\n     *   - CursorOnly\n     *     Pick up the top K clicked snippets.\n     *   - CursorJaccard\n     *     Generate all the snippet that was clicked more than 1 time.\n     *     Calculate the Jaccard similarity between the snippet and the object document.\n     *     Re-sort them by the number of clicks as the first key and Jaccard similarity as the second key.\n     *     Pick up the top K snippets.\n     *   - JaccardCursor\n     *     Get the top K snippets by Jaccard similarity.\n     *     Calculate the number of clicks for each snippet, and re-sort them.\n     * @param objectDoc\n     * @param snippetSelectionK\n     * @returns\n     */\n    private async findTopKMatches(\n        objectDoc: DocumentInfo,\n        snippetSelectionK = 1\n    ): Promise<SnippetWithProviderInfo[] | undefined> {\n        if (objectDoc.source.length === 0 || snippetSelectionK < 1) {\n            return undefined;\n        }\n\n        const lines = objectDoc.source.split('\\n');\n        let snippetsByCursor = this.retrieveCursorSnippets(objectDoc);\n        if (snippetsByCursor.length === 0) {\n            return undefined;\n        }\n\n        if (this.strategy === CursorSnippetsPickingStrategy.CursorOnly) {\n            snippetsByCursor = this.sortScoredSnippets(snippetsByCursor, SortOptions.Descending);\n            let nonOverlappingSnippets: ScoredSnippetMarker[] = this.gatherNonOverlappingSnippets(\n                snippetsByCursor,\n                snippetSelectionK\n            );\n            return this.markerToSnippet(nonOverlappingSnippets, lines);\n        } else if (this.strategy === CursorSnippetsPickingStrategy.CursorJaccard) {\n            snippetsByCursor = this.sortScoredSnippets(snippetsByCursor, SortOptions.Descending);\n            const snippetCandidates = new Map<number, number>(snippetsByCursor.map(s => [s.startLine, s.endLine]));\n            const allSnippetsSortedByJaccard = this.jaccardMatcher.retrieveAllSnippets(\n                objectDoc,\n                SortOptions.Descending,\n                snippetCandidates\n            );\n            const jaccardMap = allSnippetsSortedByJaccard.reduce(\n                (m, s) => m.set([s.startLine, s.endLine].join(','), s.score),\n                new Map<string, number>()\n            );\n\n            // Sort the code snippet by 2 keys, the number of clicks is the primary key, and the second one is the jaccard similarity.\n            // And I don't want to change the type of score. So I add them together and sort them.\n            // We ignore the corner case where a jaccard similarity of 1 will behave like an additional click for the ordering\n            snippetsByCursor.forEach(v => (v.score += jaccardMap.get([v.startLine, v.endLine].join(',')) ?? 0));\n            snippetsByCursor = this.sortScoredSnippets(snippetsByCursor, SortOptions.Descending);\n            let nonOverlappingSnippets: ScoredSnippetMarker[] = this.gatherNonOverlappingSnippets(\n                snippetsByCursor,\n                snippetSelectionK\n            );\n            return this.markerToSnippet(nonOverlappingSnippets, lines);\n        } else if (this.strategy === CursorSnippetsPickingStrategy.JaccardCursor) {\n            const topKByJaccard = await this.jaccardMatcher.findTopKMatches(objectDoc, snippetSelectionK);\n            if (topKByJaccard === undefined) {\n                return undefined;\n            }\n\n            const cursorMap = snippetsByCursor.reduce(\n                (m, s) => m.set([s.startLine, s.endLine].join(','), s.score),\n                new Map<string, number>()\n            );\n            topKByJaccard.forEach(v => (v.score += cursorMap.get([v.startLine, v.endLine].join(',')) ?? 0));\n            const resortedTopKByJaccard = this.sortScoredSnippets(topKByJaccard, SortOptions.Descending);\n            return this.markerToSnippet(resortedTopKByJaccard, lines);\n        }\n    }\n\n    private gatherNonOverlappingSnippets(snippetsByCursor: ScoredSnippetMarker[], snippetSelectionK: number) {\n        let nonOverlappingSnippets: ScoredSnippetMarker[] = [snippetsByCursor[0]];\n\n        // step forward into snippets until finding a snippet that has no overlap with any snippet in nonOverlappingSnippets\n        for (\n            let currentIndex = 1;\n            currentIndex < snippetsByCursor.length && nonOverlappingSnippets.length < snippetSelectionK;\n            currentIndex++\n        ) {\n            if (\n                nonOverlappingSnippets.findIndex(\n                    snippet =>\n                        snippetsByCursor[currentIndex].startLine < snippet.endLine &&\n                        snippetsByCursor[currentIndex].endLine > snippet.startLine\n                ) == -1\n            ) {\n                nonOverlappingSnippets.push(snippetsByCursor[currentIndex]);\n            }\n        }\n        return nonOverlappingSnippets;\n    }\n\n    /**\n     * Retrieve the snippets containing at least 1 cursor click. If there are less lines than the fixed size, we will get 1 snippet if it contains at least 1 click.\n     */\n    private retrieveCursorSnippets(objectDoc: DocumentInfo): ScoredSnippetMarker[] {\n        const snippets: ScoredSnippetMarker[] = [];\n\n        if (objectDoc.source.length === 0) {\n            return snippets;\n        }\n\n        const cursors = this.lineCursorHistory.get(objectDoc.uri);\n        if (cursors === undefined) {\n            return snippets;\n        }\n\n        const lines = objectDoc.source.split('\\n');\n\n        enum pointType {\n            leftBoundary,\n            rightBoundary,\n        }\n\n        let sparsePoints: [number, pointType, number][] = [];\n        for (const [line, num] of cursors.entries()) {\n            if (line >= lines.length) {\n                continue;\n            }\n\n            sparsePoints.push([Math.max(0, line - this.windowLength + 1), pointType.leftBoundary, num]);\n            sparsePoints.push([line + 1, pointType.rightBoundary, num]);\n        }\n\n        sparsePoints.push([lines.length, pointType.leftBoundary, 0]);\n        sparsePoints = sparsePoints.sort((a, b) => a[0] - b[0]);\n\n        let numCursors = 0;\n        let previousLine = 0;\n        for (const [line, type, num] of sparsePoints) {\n            if (numCursors > 0) {\n                for (\n                    let index = previousLine;\n                    index < line && (index == 0 || index + this.windowLength <= lines.length);\n                    index++\n                ) {\n                    snippets.push({\n                        score: numCursors,\n                        startLine: index,\n                        endLine: Math.min(lines.length, index + this.windowLength),\n                    });\n                }\n            }\n\n            if (type === pointType.leftBoundary) {\n                numCursors += num;\n            } else {\n                numCursors -= num;\n            }\n\n            previousLine = line;\n        }\n\n        return snippets;\n    }\n}\n",
    "import {DocumentInfoWithOffset} from '../prompt';\nimport {CursorContextInfo, getCursorContext} from './cursorContext';\nimport {FunctionalMatcher, WindowedMatcher} from './selectRelevance';\nimport {getBasicWindowDelineations} from './windowDelineations';\n\nexport class FixedWindowSizeJaccardMatcher extends WindowedMatcher {\n    private windowLength: number;\n\n    private constructor(referenceDoc: DocumentInfoWithOffset, windowLength: number) {\n        super(referenceDoc);\n        this.windowLength = windowLength;\n    }\n\n    static FACTORY = (windowLength: number) => {\n        return {\n            to: (referenceDoc: DocumentInfoWithOffset) => new FixedWindowSizeJaccardMatcher(referenceDoc, windowLength),\n        };\n    };\n\n    protected id(): string {\n        return 'fixed:' + this.windowLength;\n    }\n\n    protected getWindowsDelineations(lines: string[]): [number, number][] {\n        return getBasicWindowDelineations(this.windowLength, lines);\n    }\n\n    protected _getCursorContextInfo(referenceDoc: DocumentInfoWithOffset): CursorContextInfo {\n        return getCursorContext(referenceDoc, {\n            maxLineCount: this.windowLength,\n        });\n    }\n\n    protected similarityScore(a: Set<string>, b: Set<string>): number {\n        return computeScore(a, b);\n    }\n}\n\nexport class FunctionJaccardMatcher extends FunctionalMatcher {\n    private windowLength: number;\n\n    protected id(): string {\n        return 'function:' + this.windowLength;\n    }\n    protected getWindowsDelineations(lines: string[]): [number, number][] {\n        return getBasicWindowDelineations(this.windowLength, lines);\n    }\n\n    private constructor(referenceDoc: DocumentInfoWithOffset, windowLength: number) {\n        super(referenceDoc);\n        this.windowLength = windowLength;\n    }\n\n    static FACTORY = (windowLength: number) => {\n        return {\n            to: (referenceDoc: DocumentInfoWithOffset) => new FunctionJaccardMatcher(referenceDoc, windowLength),\n        };\n    };\n\n    protected _getCursorContextInfo(referenceDoc: DocumentInfoWithOffset): CursorContextInfo {\n        return getCursorContext(referenceDoc, {\n            maxLineCount: this.windowLength,\n        });\n    }\n\n    protected similarityScore(a: Set<string>, b: Set<string>): number {\n        return computeScore(a, b);\n    }\n}\n\n/**\n * Compute the Jaccard metric of number of elements in the intersection\n * divided by number of elements in the union\n */\nexport function computeScore(a: Set<string>, b: Set<string>) {\n    const intersection = new Set();\n    a.forEach(x => {\n        if (b.has(x)) {\n            intersection.add(x);\n        }\n    });\n    return intersection.size / (a.size + b.size - intersection.size);\n}\n",
    "import {ok} from 'assert';\nimport {DocumentInfo, DocumentInfoWithOffset, SnippetSelectionOption} from '../prompt';\nimport {CursorHistoryMatcher, CursorSnippetsPickingStrategy} from './cursorMatching';\nimport {FixedWindowSizeJaccardMatcher, FunctionJaccardMatcher} from './jaccardMatching';\nimport {SnippetWithProviderInfo} from './snippets';\n\nexport enum NeighboringTabsOption {\n    None = 'none',\n    Conservative = 'conservative', // set jaccard threshold 0.3\n    Medium = 'medium', // set jaccard threshold 0.1\n    Eager = 'eager', // set jaccard threshold 0.0\n    EagerButLittle = 'eagerButLittle',\n    EagerButMedium = 'eagerButMedium',\n    EagerButMuch = 'eagerButMuch',\n    RetrievalComparable = 'retrievalComparable',\n}\n\nexport enum NeighboringSnippetType {\n    NeighboringFunctions = 'neighboringFunction',\n    NeighboringSnippets = 'neighboringSnippet',\n    CursorHistoryMatcher = 'cursorhistorymatcher',\n}\n\ninterface NeighborSelection {\n    snippetLength: number;\n    threshold: number;\n    numberOfSnippets: number;\n}\n// * @param lineCursorHistory - A The first key is the file name, and the second key\n// *                            is the line number, the value is the number of cursor\n// *                            focused.\nexport type LineCursorHistory = Map<string, Map<number, number>>;\n\nexport const neighborOptionToSelection: Record<NeighboringTabsOption | string, NeighborSelection> = {\n    none: {\n        snippetLength: 1,\n        threshold: -1,\n        numberOfSnippets: 0,\n    },\n    conservative: {\n        snippetLength: 10,\n        threshold: 0.3,\n        numberOfSnippets: 1,\n    },\n    medium: {\n        snippetLength: 20,\n        threshold: 0.1,\n        numberOfSnippets: 2,\n    },\n    eager: {\n        snippetLength: 60,\n        threshold: 0,\n        numberOfSnippets: 4,\n    },\n    eagerButLittle: {\n        snippetLength: 10,\n        threshold: 0,\n        numberOfSnippets: 1,\n    },\n    eagerButMedium: {\n        snippetLength: 20,\n        threshold: 0,\n        numberOfSnippets: 4,\n    },\n    eagerButMuch: {\n        snippetLength: 60,\n        threshold: 0,\n        numberOfSnippets: 6,\n    },\n    retrievalComparable: {\n        snippetLength: 30,\n        threshold: 0,\n        numberOfSnippets: 4,\n    },\n};\n\n// Sanity thresholds on the number of neighbors to consider\nconst MAX_CHARACTERS_PER_FILE = 10000;\nconst MAX_NUMBER_OF_FILES = 20;\n\nfunction getMatcher(\n    doc: DocumentInfoWithOffset,\n    neighboringSnippetTypes: NeighboringSnippetType,\n    selection: NeighborSelection,\n    lineCursorHistory?: Map<string, Map<number, number>>,\n    cursorSnippetsPickingStrategy: CursorSnippetsPickingStrategy = CursorSnippetsPickingStrategy.CursorJaccard\n) {\n    let matcherFactory;\n    if (neighboringSnippetTypes === NeighboringSnippetType.NeighboringSnippets) {\n        matcherFactory = FixedWindowSizeJaccardMatcher.FACTORY(selection.snippetLength);\n    } else if (neighboringSnippetTypes === NeighboringSnippetType.NeighboringFunctions) {\n        // To be removed in https://github.com/github/copilot-client/pull/3448\n        matcherFactory = FunctionJaccardMatcher.FACTORY(selection.snippetLength);\n    } else {\n        ok(lineCursorHistory !== undefined, 'lineCursorHistory should not be undefined');\n        matcherFactory = CursorHistoryMatcher.FACTORY(\n            selection.snippetLength,\n            lineCursorHistory,\n            cursorSnippetsPickingStrategy\n        );\n    }\n    return matcherFactory.to(doc);\n}\n\n/**\n * @returns A SnippetWithProviderInfo describing the best matches from neighbors.\n */\nexport async function getNeighborSnippets(\n    doc: DocumentInfoWithOffset,\n    neighbors: DocumentInfo[],\n    neighboringSnippetTypes: NeighboringSnippetType,\n    options: NeighboringTabsOption | string,\n    snippetSelectionOption?: SnippetSelectionOption,\n    snippetSelectionK?: number,\n    lineCursorHistory?: LineCursorHistory,\n    cursorSnippetsPickingStrategy?: CursorSnippetsPickingStrategy\n): Promise<SnippetWithProviderInfo[]> {\n    const selection = {...neighborOptionToSelection[options]};\n    const matcher = getMatcher(\n        doc,\n        neighboringSnippetTypes,\n        selection,\n        lineCursorHistory,\n        cursorSnippetsPickingStrategy\n    );\n    if (selection.numberOfSnippets === 0) {\n        return [];\n    }\n\n    const snippets = (\n        await neighbors\n            // filter out absurdly long or absurdly many open files\n            .filter(neighbor => neighbor.source.length < MAX_CHARACTERS_PER_FILE && neighbor.source.length > 0)\n            // slice(0) duplicates an array\n            .slice(0, MAX_NUMBER_OF_FILES)\n            .reduce(\n                async (\n                    acc,\n                    neighbor // accumulator of all snippets from all neighbors\n                ) =>\n                    (await acc).concat(\n                        (await matcher.findMatches(neighbor, snippetSelectionOption, snippetSelectionK)).map(\n                            snippet => ({relativePath: neighbor.relativePath, ...snippet})\n                        )\n                    ),\n                Promise.resolve([] as SnippetWithProviderInfo[])\n            )\n    )\n        .filter(\n            neighbor =>\n                // remove files that had no match at all\n                neighbor.score &&\n                neighbor.snippet &&\n                // remove files that had a low score\n                neighbor.score > selection.threshold\n        )\n        // order them with best (highest scores) last\n        .sort((a, b) => a.score - b.score)\n        // take the best options from the end\n        .slice(-selection.numberOfSnippets);\n    return snippets;\n}\n",
    "import {getFunctionPositions, isSupportedLanguageId} from '../parse';\nimport {DocumentInfo, DocumentInfoWithOffset, SnippetSelectionOption} from '../prompt';\nimport {CursorContextInfo} from './cursorContext';\nimport {SnippetProviderType, SnippetSemantics, SnippetWithProviderInfo} from './snippets';\n\nclass FifoCache<T> {\n    private keys: string[] = [];\n    private cache: {[key: string]: T} = {};\n    private size: number;\n    constructor(size: number) {\n        this.size = size;\n    }\n    put(key: string, value: T) {\n        this.cache[key] = value;\n        if (this.keys.length > this.size) {\n            this.keys.push(key);\n            const leavingKey = this.keys.shift() ?? '';\n            delete this.cache[leavingKey];\n        }\n    }\n    get(key: string): T | undefined {\n        return this.cache[key];\n    }\n}\n\n/**\n * A snippet of code together with a relevance score\n */\nexport interface ScoredSnippetMarker {\n    score: number;\n    startLine: number;\n    endLine: number;\n}\n\nexport interface ScoredSnippet extends ScoredSnippetMarker {\n    snippet: string;\n    relativePath?: string;\n}\n\nexport enum SortOptions {\n    Ascending = 'ascending',\n    Descending = 'descending',\n    None = 'none',\n}\n\nclass Tokenizer {\n    private readonly stopsForLanguage: Set<string>;\n    constructor(doc: DocumentInfo) {\n        this.stopsForLanguage = SPECIFIC_STOPS.get(doc.languageId) ?? GENERIC_STOPS;\n    }\n    tokenize(a: string): Set<string> {\n        return new Set<string>(splitIntoWords(a).filter(x => !this.stopsForLanguage.has(x)));\n    }\n}\n\n/**\n * For a number of documents (the neighboring tabs),\n * associate to each document and its kind of window computation (as key)\n * the sequence b_1, ..., b_n, where\n * b_i is the set of tokens in the ith window --\n * e.g. for window length 10,\n * WINDOWED_TOKEN_SET_CACHE(doc)[0]\n * holds the tokens in the first 10 lines of the document.\n */\nconst WINDOWED_TOKEN_SET_CACHE = new FifoCache<Set<string>[]>(20);\n\n/**\n * A matcher factory should be able to produce one matcher\n * for each document to which matches are to be found.\n * I.e. MatcherFactory.to(doc) is a matcher that matches against doc.\n */\nexport interface MatcherFactory {\n    to(doc: DocumentInfoWithOffset): {\n        findBestMatch(objectDoc: DocumentInfo): Promise<ScoredSnippet | undefined>;\n        findMatches(\n            objectDoc: DocumentInfo,\n            snippetSelectionOption: SnippetSelectionOption | undefined,\n            snippetSelectionK?: number\n        ): Promise<ScoredSnippet[]>;\n    };\n}\n\n/**\n * For a given document, extracts the best matching snippets from other documents\n * by comparing all of a set of windows in the object doc.\n */\nexport abstract class WindowedMatcher {\n    protected referenceDoc: DocumentInfoWithOffset;\n    protected tokenizer: Tokenizer;\n\n    protected abstract id(): string;\n    protected abstract similarityScore(a: Set<string>, b: Set<string>): number;\n    /**\n     * Given an array of lines, returns an array of pairs <startLine, endLine> of indices,\n     * such that each pair is a window of lines to consider adding.\n     * startLine is inclusive, endLine is exclusive.\n     * @param lines Lines of a source text, in order\n     */\n    protected abstract getWindowsDelineations(lines: string[]): [number, number][];\n\n    /**\n     * Subclasses should implement this method to return the desired context info for tokenization\n     * from the reference document. Will only be called after constructor is finished.\n     * The tokenizer used in WindowedMatcher is a simple tokenizer for Jaccard similarity, NOT an\n     * OpenAI model tokenizer.\n     */\n    protected abstract _getCursorContextInfo(referenceDoc: DocumentInfoWithOffset): CursorContextInfo;\n\n    protected constructor(referenceDoc: DocumentInfoWithOffset) {\n        this.referenceDoc = referenceDoc;\n        this.tokenizer = new Tokenizer(referenceDoc); // Just uses language info from referenceDoc\n    }\n\n    /**\n     * Lazy getter for referenceTokens since it relies on properties\n     * that are not initialized in the constructor of WindowedMatcher\n     * but in the constructor of its subclasses.\n     */\n    get referenceTokens(): Set<string> {\n        return this.tokenizer.tokenize(this._getCursorContextInfo(this.referenceDoc).context);\n    }\n\n    /**\n     * Returns a sorted array of snippets with their scores according to the sort option.\n     * @param snippets ScoredSnippet[]\n     *\n     */\n    sortScoredSnippets(snippets: ScoredSnippetMarker[], sortOption = SortOptions.Descending): ScoredSnippetMarker[] {\n        return sortOption == SortOptions.Ascending\n            ? snippets.sort((snippetA, snippetB) => (snippetA.score > snippetB.score ? 1 : -1))\n            : sortOption == SortOptions.Descending\n            ? snippets.sort((snippetA, snippetB) => (snippetA.score > snippetB.score ? -1 : 1))\n            : snippets;\n    }\n    /**\n     * Returns all snippet markers with their scores.\n     * @param objectDoc\n     *\n     */\n    retrieveAllSnippets(objectDoc: DocumentInfo, sortOption = SortOptions.Descending): ScoredSnippetMarker[] {\n        const snippets: ScoredSnippetMarker[] = [];\n\n        if (objectDoc.source.length === 0 || this.referenceTokens.size === 0) {\n            return snippets;\n        }\n\n        const lines = objectDoc.source.split('\\n');\n        const key = this.id() + ':' + objectDoc.source;\n        const tokensInWindows = WINDOWED_TOKEN_SET_CACHE.get(key) ?? [];\n        // if the tokens are not cached, we need to compute them\n        const needToComputeTokens = tokensInWindows.length == 0;\n        const tokenizedLines = needToComputeTokens ? lines.map(this.tokenizer.tokenize, this.tokenizer) : [];\n\n        // Compute the windows with the score\n        for (const [index, [startLine, endLine]] of this.getWindowsDelineations(lines).entries()) {\n            if (needToComputeTokens) {\n                const tokensInWindow = new Set<string>();\n                tokenizedLines.slice(startLine, endLine).forEach(x => x.forEach(tokensInWindow.add, tokensInWindow));\n                tokensInWindows.push(tokensInWindow);\n            }\n            // Now tokensInWindows[index] contains the tokens in the window, whether we just computed them or not\n            const tokensInWindow = tokensInWindows[index];\n            const score = this.similarityScore(tokensInWindow, this.referenceTokens);\n            snippets.push({\n                score,\n                startLine,\n                endLine,\n            });\n        }\n\n        // If we didn't get the token sets from the cache, time to put them there!\n        if (needToComputeTokens) {\n            WINDOWED_TOKEN_SET_CACHE.put(key, tokensInWindows);\n        }\n\n        return this.sortScoredSnippets(snippets, sortOption);\n    }\n\n    async findMatches(\n        objectDoc: DocumentInfo,\n        snippetSelectionOption = SnippetSelectionOption.BestMatch,\n        snippetSelectionK?: number\n    ): Promise<SnippetWithProviderInfo[]> {\n        if (snippetSelectionOption == SnippetSelectionOption.BestMatch) {\n            const snippet = await this.findBestMatch(objectDoc);\n            return snippet ? [snippet] : [];\n        }\n\n        if (snippetSelectionOption == SnippetSelectionOption.TopK) {\n            return (await this.findTopKMatches(objectDoc, snippetSelectionK)) || [];\n        }\n\n        return [];\n    }\n\n    /**\n     * Returns the snippet from the object document\n     * that is most similar to the reference Document\n     * together with its Jaccard score\n     *\n     * @param objectDoc\n     */\n    async findBestMatch(objectDoc: DocumentInfo): Promise<SnippetWithProviderInfo | undefined> {\n        if (objectDoc.source.length === 0 || this.referenceTokens.size === 0) {\n            return undefined;\n        }\n        const lines = objectDoc.source.split('\\n');\n        const snippets = this.retrieveAllSnippets(objectDoc, SortOptions.Descending);\n\n        // safe guard against empty lists\n        if (snippets.length === 0) {\n            return undefined;\n        }\n        if (snippets[0].score === 0) {\n            return undefined;\n        }\n\n        // Compute the window with the best match\n        const snippetCode = lines.slice(snippets[0].startLine, snippets[0].endLine).join('\\n');\n        return {\n            snippet: snippetCode,\n            semantics: SnippetSemantics.Snippet,\n            provider: SnippetProviderType.NeighboringTabs,\n            ...snippets[0],\n        };\n    }\n\n    /**\n     * Returns the snippet from the object document\n     * that is most similar to the reference Document\n     * together with its Jaccard score\n     *\n     * @param objectDoc\n     */\n    async findTopKMatches(\n        objectDoc: DocumentInfo,\n        snippetSelectionK = 1\n    ): Promise<SnippetWithProviderInfo[] | undefined> {\n        if (objectDoc.source.length === 0 || this.referenceTokens.size === 0 || snippetSelectionK < 1) {\n            return undefined;\n        }\n\n        const lines = objectDoc.source.split('\\n');\n\n        const snippets = this.retrieveAllSnippets(objectDoc, SortOptions.Descending);\n        if (snippets.length === 0 || snippets[0].score === 0) {\n            return undefined;\n        }\n\n        const nonOverlappingSnippets: ScoredSnippetMarker[] = [snippets[0]];\n\n        // step forward into snippets until finding a snippet that has no overlap with any snippet in nonOverlappingSnippets\n        for (\n            let currentIndex = 1;\n            currentIndex < snippets.length && nonOverlappingSnippets.length < snippetSelectionK;\n            currentIndex++\n        ) {\n            if (\n                nonOverlappingSnippets.findIndex(\n                    snippet =>\n                        snippets[currentIndex].startLine < snippet.endLine &&\n                        snippets[currentIndex].endLine > snippet.startLine\n                ) == -1\n            ) {\n                nonOverlappingSnippets.push(snippets[currentIndex]);\n            }\n        }\n        return nonOverlappingSnippets.map(snippetMarker => ({\n            snippet: lines.slice(snippetMarker.startLine, snippetMarker.endLine).join('\\n'),\n            semantics: SnippetSemantics.Snippet,\n            provider: SnippetProviderType.NeighboringTabs,\n            ...snippetMarker,\n        }));\n    }\n}\n\nasync function getNeighboringFunctions(neighbor: DocumentInfo) {\n    let neighborFuncs: DocumentInfo[] = [];\n    if (isSupportedLanguageId(neighbor.languageId)) {\n        const funcPositions = await getFunctionPositions(neighbor.languageId, neighbor.source);\n        for (let i = 0; i < funcPositions.length; i++) {\n            let {startIndex, endIndex} = funcPositions[i];\n            let func_source = neighbor.source.substring(startIndex, endIndex);\n            neighborFuncs.push({\n                source: func_source,\n                relativePath: neighbor.relativePath,\n                languageId: neighbor.languageId,\n                uri: neighbor.uri,\n            });\n        }\n    }\n    return neighborFuncs;\n}\n\nexport abstract class FunctionalMatcher extends WindowedMatcher {\n    protected constructor(referenceDoc: DocumentInfoWithOffset) {\n        super(referenceDoc);\n    }\n\n    getMatchingScore(neighborDoc: DocumentInfo): ScoredSnippet {\n        const neighborDocTokens = this.tokenizer.tokenize(neighborDoc.source);\n        const score = this.similarityScore(neighborDocTokens, this.referenceTokens);\n\n        return {\n            snippet: neighborDoc.source,\n            score: score,\n            startLine: 0,\n            endLine: 0,\n        };\n    }\n\n    override async findBestMatch(objectDoc: DocumentInfo): Promise<SnippetWithProviderInfo | undefined> {\n        const snippets = await this.findMatches(objectDoc);\n        // safe guard against empty lists\n        if (snippets.length === 0) {\n            return undefined;\n        }\n        if (snippets[0].score === 0) {\n            return undefined;\n        }\n        return snippets[0];\n    }\n\n    override async findMatches(\n        objectDoc: DocumentInfo,\n        snippetSelectionOption?: SnippetSelectionOption,\n        snippetSelectionK?: number\n    ): Promise<SnippetWithProviderInfo[]> {\n        if (objectDoc.source.length === 0 || this.referenceTokens.size === 0) {\n            return [];\n        }\n        const neighborFuncs = await getNeighboringFunctions(objectDoc);\n\n        if (neighborFuncs.length == 0) {\n            // if no function was extracted, return default code snippets.\n            const lines = objectDoc.source.split('\\n');\n            const snippets = this.retrieveAllSnippets(objectDoc, SortOptions.Descending);\n            // safe guard against empty lists\n            if (snippets.length === 0) {\n                return [];\n            }\n            if (snippets[0].score === 0) {\n                return [];\n            }\n            // Compute the window with the best match\n            const snippetCode = lines.slice(snippets[0].startLine, snippets[0].endLine).join('\\n');\n            return [\n                {\n                    snippet: snippetCode,\n                    semantics: SnippetSemantics.Snippet,\n                    provider: SnippetProviderType.NeighboringTabs,\n                    ...snippets[0],\n                },\n            ];\n        }\n\n        const snippets: SnippetWithProviderInfo[] = [];\n        for (let func of neighborFuncs) {\n            const snippet = this.getMatchingScore(func);\n            snippets.push({\n                semantics: SnippetSemantics.Function,\n                provider: SnippetProviderType.NeighboringTabs,\n                ...snippet,\n            });\n        }\n        return snippets;\n    }\n}\n\n/**\n * Split by non-alphanumeric characters\n */\nexport function splitIntoWords(a: string): string[] {\n    return a.split(/[^a-zA-Z0-9]/).filter(x => x.length > 0);\n}\n\nconst ENGLISH_STOPS = new Set([\n    // - pronouns\n    'we',\n    'our',\n    'you',\n    'it',\n    'its',\n    'they',\n    'them',\n    'their',\n    'this',\n    'that',\n    'these',\n    'those',\n    // - verbs\n    'is',\n    'are',\n    'was',\n    'were',\n    'be',\n    'been',\n    'being',\n    'have',\n    'has',\n    'had',\n    'having',\n    'do',\n    'does',\n    'did',\n    'doing',\n    'can',\n    'don',\n    't',\n    's',\n    'will',\n    'would',\n    'should',\n    // - wh-words\n    'what',\n    'which',\n    'who',\n    'when',\n    'where',\n    'why',\n    'how',\n    // - articles\n    'a',\n    'an',\n    'the',\n    // - prepositions\n    'and',\n    'or',\n    'not',\n    'no',\n    'but',\n    'because',\n    'as',\n    'until',\n    'again',\n    'further',\n    'then',\n    'once',\n    'here',\n    'there',\n    'all',\n    'any',\n    'both',\n    'each',\n    'few',\n    'more',\n    'most',\n    'other',\n    'some',\n    'such',\n    'above',\n    'below',\n    'to',\n    'during',\n    'before',\n    'after',\n    'of',\n    'at',\n    'by',\n    'about',\n    'between',\n    'into',\n    'through',\n    'from',\n    'up',\n    'down',\n    'in',\n    'out',\n    'on',\n    'off',\n    'over',\n    'under',\n    'only',\n    'own',\n    'same',\n    'so',\n    'than',\n    'too',\n    'very',\n    'just',\n    'now',\n]);\n\n/**\n * A generic set of stops for any programming language\n */\nconst GENERIC_STOPS = new Set([\n    // words that are common in programming languages\n    'if',\n    'then',\n    'else',\n    'for',\n    'while',\n    'with',\n    'def',\n    'function',\n    'return',\n    'TODO',\n    'import',\n    'try',\n    'catch',\n    'raise',\n    'finally',\n    'repeat',\n    'switch',\n    'case',\n    'match',\n    'assert',\n    'continue',\n    'break',\n    'const',\n    'class',\n    'enum',\n    'struct',\n    'static',\n    'new',\n    'super',\n    'this',\n    'var',\n    // words that are common in English comments:\n    ...ENGLISH_STOPS,\n]);\n\n/**\n * Specific stops for certain languages\n * Note that ENGLISH_STOPS need to be added to this set if they are to be included\n */\nconst SPECIFIC_STOPS: Map<string, Set<string>> = new Map([\n    // none yet\n]);\n",
    "import {commentBlockAsSingles} from '../languageMarker';\nimport {Tokenizer} from '../tokenization';\nimport {Priorities} from '../wishlist';\nimport {ScoredSnippet} from './selectRelevance';\n\n/** Indicates what provider produced a given snippet. */\nexport enum SnippetProviderType {\n    NeighboringTabs = 'neighboring-tabs',\n    Retrieval = 'retrieval',\n    SymbolDef = 'symbol-def',\n    Language = 'language',\n    Path = 'path',\n    LocalImportContext = 'local-import-context',\n}\n\n/**\n * The semantics of a snippet. For example, some providers\n * might always produce a snippet that is a complete function\n * whereas others might produce a snippet that are inherhently\n * partial.\n */\nexport enum SnippetSemantics {\n    /** The contents of the snippet is a function. */\n    Function = 'function',\n    /** The contents of the snippet is an unspecified snippet. */\n    Snippet = 'snippet',\n    /** The following are from hover text */\n    Variable = 'variable',\n    Parameter = 'parameter',\n    Method = 'method',\n    Class = 'class',\n    Module = 'module',\n    Alias = 'alias',\n    Enum = 'enum member',\n    Interface = 'interface',\n}\n\n/** Extends a ScoredSnippet with information about its provider. */\nexport interface SnippetWithProviderInfo extends ScoredSnippet {\n    /** The provider that created this snippet. */\n    provider: SnippetProviderType;\n    /** The semantical meaning of the snippet's contents. */\n    semantics: SnippetSemantics;\n}\n\nexport interface SingleSnippetProviderOptions {\n    /** Which function to apply for score normalization */\n    normalizationFunction: 'affine';\n    /** The parameters/coefficients for the score normalization function */\n    normalizationParams: number[];\n    /**\n     * Number of snippets reserved to this provider, disregarding whether other\n     * providers have higher-scoring snippets.\n     */\n    reservedSnippetCount?: number;\n}\n\n/**\n * The options for all snippet providers.\n */\nexport type SnippetProviderOptions = Record<SnippetProviderType, SingleSnippetProviderOptions>;\n\n/**\n * A snippet with a normalized score\n */\nexport interface SnippetWithNormalizedScore extends Omit<SnippetWithProviderInfo, 'score'> {\n    providerScore: number;\n    normalizedScore: number;\n}\n\n/**\n * The most processed form of a snippet that contains fully rendered and\n * prioritized snippets, including their token count. Can be used directly\n * with the wishlist. The priority is a wishlist priority, not a score.\n */\nexport interface ProcessedSnippet {\n    /** The announced (i.e. formatted) snippet */\n    announcedSnippet: string;\n    /** Wishlish priority */\n    priority: number;\n    /** The score of the snippet as given directly by the provider */\n    providerScore: number;\n    /** The normalized score */\n    normalizedScore: number;\n    /** The number of tokens in the (announced) snippet */\n    tokens: number;\n    /** The provider */\n    provider: SnippetProviderType;\n    /** Relative path */\n    relativePath?: string;\n}\n\n/**\n * A map from semantics enum to a human / LLM-readable label that we\n * include when announcing a snippet.\n */\nconst snippetSemanticsToString: {[key in SnippetSemantics]: string} = {\n    [SnippetSemantics.Function]: 'function',\n    [SnippetSemantics.Snippet]: 'snippet',\n    [SnippetSemantics.Variable]: 'variable',\n    [SnippetSemantics.Parameter]: 'parameter',\n    [SnippetSemantics.Method]: 'method',\n    [SnippetSemantics.Class]: 'class',\n    [SnippetSemantics.Module]: 'module',\n    [SnippetSemantics.Alias]: 'alias',\n    [SnippetSemantics.Enum]: 'enum member',\n    [SnippetSemantics.Interface]: 'interface',\n};\n\n/**\n * Formats a snippet for inclusion in the prompt.\n *\n * This does three things:\n * 1. Adds an announcement headline.\n * 2. Formats each line as a single-line comment in the language of the target doc.\n * 3. Adds a trailing newline if one was not already there.\n */\nexport function announceSnippet(snippet: Omit<SnippetWithProviderInfo, 'score'>, targetDocLanguageId: string): string {\n    const semantics = snippetSemanticsToString[snippet.semantics];\n    const headline = snippet.relativePath\n        ? `Compare this ${semantics} from ${snippet.relativePath}:`\n        : `Compare this ${semantics}:`;\n    let headlinedSnippet = headline + '\\n' + snippet.snippet;\n    if (!headlinedSnippet.endsWith('\\n')) {\n        headlinedSnippet += '\\n';\n    }\n    return commentBlockAsSingles(headlinedSnippet, targetDocLanguageId);\n}\n\nexport function normalizeSnippetScore<S extends {provider: SnippetProviderType; score: number}>(\n    snippet: S,\n    providerOptions: SnippetProviderOptions\n): Omit<S, 'score'> & {providerScore: number; normalizedScore: number} {\n    const options = providerOptions[snippet.provider];\n    if (!options) {\n        throw new Error('Unknown snippet provider: ' + snippet.provider);\n    }\n    const {score: providerScore, ...snippetRem} = snippet;\n    let normalizedScore = providerScore;\n    if (options.normalizationFunction === 'affine') {\n        const [a, b] = options.normalizationParams;\n        normalizedScore = a * providerScore + b;\n    } else {\n        throw new Error(\n            `Unknown normalization function ${options.normalizationFunction} for snippet provider ${snippet.provider}`\n        );\n    }\n    return {\n        ...snippetRem, // Remove score\n        providerScore,\n        normalizedScore,\n    };\n}\n\n/**\n * Sorts snippets in-place in descending order by their normalized score.\n */\nfunction sortSnippetsDescending<S extends {normalizedScore: number}>(snippets: S[]): void {\n    snippets.sort((a, b) => b.normalizedScore - a.normalizedScore);\n}\n\n/**\n * Selects `numberOfSnippets` simultanously adhering to two principles:\n *   1. Select the best `reservedSnippetCount` snippets from each provider,\n *      according to their normalized score.\n *   2. Select the best snippets according to normalized score across all\n *      providers, until `numberOfSnippets` have been selected in total.\n *\n * NOTE: If the total number of `reservedSnippetCount` exceeds\n * `numberOfSnippets`, then this method throws an exception.\n *\n * The returned snippets are returned in order of decreasing normalized score,\n * i.e. the best snippets are first in each list.\n */\nexport function selectSnippets(\n    snippets: SnippetWithProviderInfo[],\n    numberOfSnippets: number,\n    providerOptions: SnippetProviderOptions\n): {reserved: SnippetWithNormalizedScore[]; candidates: SnippetWithNormalizedScore[]} {\n    if (numberOfSnippets == 0) {\n        return {reserved: [], candidates: []};\n    }\n    // Compute all the normalized scores\n    const normalizedSnippets: SnippetWithNormalizedScore[] = snippets.map(snippet =>\n        normalizeSnippetScore(snippet, providerOptions)\n    );\n    // Split snippets by provider\n    const snippetsByProvider = new Map<SnippetProviderType, SnippetWithNormalizedScore[]>();\n    let provider: SnippetProviderType;\n    for (provider in providerOptions) {\n        snippetsByProvider.set(provider, []);\n    }\n    for (const snippet of normalizedSnippets) {\n        let snippets = snippetsByProvider.get(snippet.provider);\n        if (!snippets) {\n            throw new Error('Unknown snippet provider: ' + snippet.provider);\n        }\n        snippets.push(snippet);\n    }\n    for (const [_provider, snippets] of snippetsByProvider) {\n        sortSnippetsDescending(snippets);\n    }\n    // Pick all reserved snippets\n    let reserved: SnippetWithNormalizedScore[] = [];\n    for (provider in providerOptions) {\n        const options = providerOptions[provider];\n        const count = options.reservedSnippetCount || 0;\n        if (count > 0) {\n            const snippets = snippetsByProvider.get(provider) || [];\n            reserved = reserved.concat(snippets.slice(0, count));\n            snippetsByProvider.set(provider, snippets.slice(count));\n        }\n    }\n    sortSnippetsDescending(reserved);\n    let candidates: SnippetWithNormalizedScore[] = [];\n    if (reserved.length > numberOfSnippets) {\n        throw new Error('Reserved snippet count exceeds number of snippets');\n    }\n    if (reserved.length < numberOfSnippets) {\n        // Flatten and resort all remaining snippets\n        const remaining = Array.from(snippetsByProvider.values()).flat();\n        sortSnippetsDescending(remaining);\n        // Pick the best remaining snippets\n        candidates = remaining.slice(0, numberOfSnippets - reserved.length);\n    }\n    return {reserved, candidates};\n}\n\n/**\n * \"Processes\" a list of snippets and assigns priorities.\n *\n * The snippets will get their scores normalized, will be announced, and will be\n * selected according to best-normalized score while adhering to any\n * reservations stipulated in `providerOptions`. See {@link selectSnippets} for\n * details.\n *\n * The returned snippets will then be assigned priorites descendingly from\n * `priorities.high` respectively `priorities.low`, or not included at all,\n * according to two parameters `totalPrioritized` and `highPriorityBudget`.\n *\n * The snippets are also returned by increasing normalized score. If they are\n * enqueued in this order in the wishlist, then the highest-scoring snippets\n * will appear closest to the cursor.\n *\n * By definition, a reserved snippet may be selected with higher priority than a\n * non-reserved candidate snippet with better normalized score. The reserved\n * snippet is then guaranteed to be selected in the wishlist before the\n * non-reserved snippet, but if both are ultimately selected, the non-reserved\n * one will appear last in the prompt.\n *\n * @param snippets The snippets to process.\n * @param providerOptions The options for each snippet provider.\n * @param priorities Priorities to assign to snippets: high priority is assigned\n * to the first `highPriorityBudget` tokens, low priority to the remaining\n * `totalPrioritized` snippets.\n * @param totalPrioritized The maximal number of snippets to return, i.e. if\n * more snippets are passed in, we remove the least desirable.\n * @param highPriorityBudget The number of tokens to use for high priority\n * snippets\n */\nexport function processSnippetsForWishlist(\n    snippets: SnippetWithProviderInfo[],\n    targetDocLanguageId: string,\n    tokenizer: Tokenizer,\n    providerOptions: SnippetProviderOptions,\n    priorities: {priorities: Priorities; low: number; high: number},\n    totalPrioritized: number,\n    highPriorityBudget: number\n): ProcessedSnippet[] {\n    // selectSnippets returns in order of decreasing normalized score, i.e. best\n    // first in each list.\n    const {reserved, candidates} = selectSnippets(snippets, totalPrioritized, providerOptions);\n    let usedBudget = 0;\n    let processedSnippets: ProcessedSnippet[] = [];\n    let nextHighPriority = priorities.high;\n    let nextLowPriority = priorities.low;\n    function process(snippet: SnippetWithNormalizedScore, usedBudget: number): number {\n        const announced = announceSnippet(snippet, targetDocLanguageId);\n        const tokens = tokenizer.tokenLength(announced);\n        let priority: number;\n        if (usedBudget + tokens <= highPriorityBudget) {\n            priority = nextHighPriority;\n            nextHighPriority = priorities.priorities.justBelow(priority);\n        } else {\n            priority = nextLowPriority;\n            nextLowPriority = priorities.priorities.justBelow(priority);\n        }\n        processedSnippets.push({\n            announcedSnippet: announced,\n            provider: snippet.provider,\n            providerScore: snippet.providerScore,\n            normalizedScore: snippet.normalizedScore,\n            priority,\n            tokens,\n            relativePath: snippet.relativePath,\n        });\n        return usedBudget + tokens;\n    }\n    // We first assign priorities to the reserved snippets.\n    // Then to the remaining candidates.\n    for (const snippet of [...reserved, ...candidates]) {\n        if (processedSnippets.length >= totalPrioritized) {\n            break;\n        }\n        usedBudget = process(snippet, usedBudget);\n    }\n    // Re-sort the list by increasing normalized score\n    sortSnippetsDescending(processedSnippets);\n    processedSnippets.reverse();\n    return processedSnippets;\n}\n",
    "import {IndentationTree} from '../indentation/classes';\nimport {clearLabels, visitTree} from '../indentation/manipulation';\nimport {parseTree} from '../indentation/parsing';\n\n/**\n * Returns a list of (startline, endline) pairs representing fixed size windows\n *\n * @param windowLength length of fixed size window\n * @param lines lines to extract fixed size windows from\n * @returns list of (startline, endline) pairs\n */\nexport function getBasicWindowDelineations(windowLength: number, lines: string[]): [number, number][] {\n    const windows: [number, number][] = [];\n    const length = lines.length;\n    if (length == 0) {\n        return [];\n    }\n    if (length < windowLength) {\n        // if not long enough to reach a single window length, return full document\n        return [[0, length]];\n    }\n    for (let startLine = 0; startLine < length - windowLength + 1; startLine++) {\n        windows.push([startLine, startLine + windowLength]);\n    }\n    return windows;\n}\n\n/**\n * Calculate all windows like with the following properties:\n * - they are all of length <= maxLength\n * - they are all of length >= minLength\n *   - except if they are followed by enough blank lines to reach length >= minLength\n * - they are a contiguous subsequence from [parentline, child1, child2, ..., childn]\n * - which neither starts nor ends with a blank line\n * Note that windows of the form \"parent with all its children\" could\n * appear in different ways with that definition,\n * e.g. as \"childi\" of its parent, and as \"parent, child1, ..., childn\" where the parent is itself.\n * Nevertheless, it will only be listed once.\n * @param lines\n */\nexport function getIndentationWindowsDelineations(\n    lines: string[],\n    languageId: string,\n    minLength: number,\n    maxLength: number\n): [number, number][] {\n    // Deal with degenerate cases\n    if (lines.length < minLength || maxLength == 0) {\n        return [];\n    }\n\n    const windows: [number, number][] = [];\n    // For each node, keep track of how long its children extend, or whether it can't be included in a window anyhow\n    type TreeLabel = {totalLength: number; firstLineAfter: number};\n    // Todo: add groupBlocks here as well\n    const labeledTree = clearLabels(parseTree(lines.join('\\n'), languageId)) as IndentationTree<TreeLabel>;\n    visitTree(\n        labeledTree,\n        node => {\n            if (node.type === 'blank') {\n                node.label = {totalLength: 1, firstLineAfter: node.lineNumber + 1};\n                return;\n            }\n            // Statistics to gather on the way, to be consumed by parents\n            let totalLength = node.type === 'line' ? 1 : 0;\n            let firstLineAfter = node.type === 'line' ? node.lineNumber + 1 : NaN;\n            // we consider intervals [a, b] which correspond to including children number a (-1 means parent) through b exclusive.\n            // the window start and end lines are computed here, such that startLine (inclusive) to endLine (exclusive) covers the window\n            function getStartLine(a: number) {\n                return a == -1\n                    ? firstLineAfter - totalLength\n                    : node.subs[a].label!.firstLineAfter - node.subs[a].label!.totalLength;\n            }\n            function getEndLine(b: number, startLine: number) {\n                return b == 0 ? startLine + 1 : node.subs[b - 1].label!.firstLineAfter;\n            }\n            // iteratively go through candidates for [a, b[:\n            // if from a to including b would be too long, add the window a to b exclusive and increase a as far as necessary, otherwise increase b\n            // a = -1 will mean: include the parent\n            let a = node.type === 'line' ? -1 : 0; // if the parent is a line, consider using it\n            let lengthFromAToBInclusive = node.type === 'line' ? 1 : 0; // if so, the length is 1, otherwise 0\n            let lastBThatWasntABlank = 0;\n            for (let b = 0; b < node.subs.length; b++) {\n                // don't let the window start with blank lines\n                while (a >= 0 && a < node.subs.length && node.subs[a].type === 'blank') {\n                    lengthFromAToBInclusive -= node.subs[a].label!.totalLength;\n                    a++;\n                }\n                if (node.subs[b].type !== 'blank') {\n                    lastBThatWasntABlank = b;\n                }\n                // add subs[b] to the window\n                firstLineAfter = node.subs[b].label!.firstLineAfter;\n                totalLength += node.subs[b].label!.totalLength;\n                lengthFromAToBInclusive += node.subs[b].label!.totalLength;\n                if (lengthFromAToBInclusive > maxLength) {\n                    const startLine = getStartLine(a);\n                    const endLine = getEndLine(b, startLine);\n                    const endLineTrimmedForBlanks =\n                        lastBThatWasntABlank == b ? endLine : getEndLine(lastBThatWasntABlank, startLine);\n                    // for the test, note that blanks count for getting us over the minLength:\n                    if (minLength <= endLine - startLine) {\n                        windows.push([startLine, endLineTrimmedForBlanks]);\n                    }\n                    while (lengthFromAToBInclusive > maxLength) {\n                        // remove subs[a] from the window\n                        lengthFromAToBInclusive -=\n                            a == -1\n                                ? node.type == 'line'\n                                    ? 1\n                                    : // this cannot happen: if not a line, we start with a = 0 unless it's a line\n                                      0\n                                : node.subs[a].label!.totalLength;\n                        a++;\n                    }\n                }\n            }\n            // if there's anything left to add (a < b), do it\n            if (a < node.subs.length) {\n                const startLine = getStartLine(a);\n                const endLine = firstLineAfter;\n                const endLineTrimmedForBlanks =\n                    a == -1 ? endLine : node.subs[lastBThatWasntABlank].label!.firstLineAfter;\n                // note: even if fillUpWindowWithPartOfNextNeighbor is true,\n                // there is no next neighbor here, so nothing to extend the window to\n                if (minLength <= endLine - startLine) {\n                    windows.push([startLine, endLineTrimmedForBlanks]);\n                }\n                // Set the node's label\n            }\n            node.label = {totalLength, firstLineAfter};\n        },\n        'bottomUp'\n    );\n    // windows is an array of [start, end] pairs,\n    // but some may appear twice, and should be removed\n    return windows\n        .sort((a, b) => a[0] - b[0] || a[1] - b[1])\n        .filter((a, i, arr) => i == 0 || a[0] != arr[i - 1][0] || a[1] != arr[i - 1][1]);\n}\n",
    "import {getLanguageMarker, newLineEnded} from '../languageMarker';\nimport {SnippetProviderContext} from '../orchestrator';\nimport {normalizeLanguageId} from '../prompt';\nimport {SnippetProviderType, SnippetSemantics, SnippetWithProviderInfo} from '../snippetInclusion/snippets';\nimport {SnippetProvider} from './snippetProvider';\n\nexport class LanguageSnippetProvider extends SnippetProvider {\n    public async buildSnippets(context: SnippetProviderContext): Promise<SnippetWithProviderInfo[]> {\n        const {currentFile} = context;\n        currentFile.languageId = normalizeLanguageId(currentFile.languageId);\n        return [\n            {\n                provider: SnippetProviderType.Language,\n                semantics: SnippetSemantics.Snippet,\n                snippet: newLineEnded(getLanguageMarker(currentFile)),\n                relativePath: currentFile.relativePath,\n                startLine: 0,\n                endLine: 0,\n                score: 0,\n            },\n        ];\n    }\n}\n",
    "import {newLineEnded} from '../languageMarker';\nimport {SnippetProviderContext} from '../orchestrator';\nimport {DocumentInfoWithOffset, LocalImportContextOption} from '../prompt';\nimport {SnippetProviderType, SnippetSemantics, SnippetWithProviderInfo} from '../snippetInclusion/snippets';\nimport {SnippetProvider} from './snippetProvider';\n\nexport class LocalImportContextSnippetProvider extends SnippetProvider {\n    private formSnippets(imports: string[], currentFile: DocumentInfoWithOffset): SnippetWithProviderInfo[] {\n        return imports.map(importPath => ({\n            provider: SnippetProviderType.LocalImportContext,\n            semantics: SnippetSemantics.Snippet,\n            snippet: newLineEnded(importPath),\n            relativePath: currentFile.relativePath,\n            startLine: 0,\n            endLine: 0,\n            score: 1,\n        }));\n    }\n\n    public async buildSnippets(context: SnippetProviderContext): Promise<SnippetWithProviderInfo[]> {\n        // Note: the fileSystem is only intended for testing, we cannot serialize it\n        const {currentFile, options, fileSystem} = context;\n\n        // Short circuit if not enabled\n        if (options.localImportContext == LocalImportContextOption.NoContext) return [];\n\n        // This is being proxied to the worker thread because TreeSitter is\n        // CPU intensive and can induce latency in the main thread\n        const localImportContext = await this.api.extractLocalImportContext(currentFile, fileSystem);\n        return this.formSnippets(localImportContext, currentFile);\n    }\n}\n",
    "import {SnippetWithProviderInfo} from '../lib';\nimport {SnippetProviderContext} from '../orchestrator';\nimport {NeighboringTabsOption} from '../snippetInclusion/neighboringFiles';\nimport {SnippetProvider} from './snippetProvider';\n\nexport class NeighborFilesProvider extends SnippetProvider {\n    async buildSnippets(context: SnippetProviderContext): Promise<SnippetWithProviderInfo[]> {\n        const {currentFile, neighborFiles, options, lineCursorHistory} = context;\n        if (\n            options &&\n            neighborFiles &&\n            neighborFiles.length &&\n            options.neighboringTabs !== NeighboringTabsOption.None\n        ) {\n            const snippets = await this.api.getNeighborSnippets(\n                currentFile,\n                neighborFiles,\n                options.neighboringSnippetTypes,\n                options.neighboringTabs,\n                options.snippetSelection,\n                options.snippetSelectionK,\n                lineCursorHistory,\n                options.cursorSnippetsPickingStrategy\n            );\n            return snippets;\n        }\n        return [];\n    }\n}\n",
    "import {getPathMarker, newLineEnded} from '../languageMarker';\nimport {SnippetProviderContext} from '../orchestrator';\nimport {normalizeLanguageId} from '../prompt';\nimport {SnippetProviderType, SnippetSemantics, SnippetWithProviderInfo} from '../snippetInclusion/snippets';\nimport {SnippetProvider} from './snippetProvider';\n\nexport class PathSnippetProvider extends SnippetProvider {\n    public async buildSnippets(context: SnippetProviderContext): Promise<SnippetWithProviderInfo[]> {\n        const {currentFile} = context;\n        currentFile.languageId = normalizeLanguageId(currentFile.languageId);\n        return [\n            {\n                provider: SnippetProviderType.Path,\n                semantics: SnippetSemantics.Snippet,\n                snippet: newLineEnded(getPathMarker(currentFile)),\n                relativePath: currentFile.relativePath,\n                startLine: 0,\n                endLine: 0,\n                score: 0,\n            },\n        ];\n    }\n}\n",
    "import {SnippetProviderContext} from '../orchestrator';\nimport {SnippetWithProviderInfo} from '../snippetInclusion/snippets';\nimport {WorkerProxy} from '../workerProxy';\n\nexport abstract class SnippetProvider {\n    api: WorkerProxy;\n\n    constructor(workerProxy: WorkerProxy) {\n        this.api = workerProxy;\n    }\n    protected abstract buildSnippets(context: SnippetProviderContext): Promise<SnippetWithProviderInfo[]>;\n\n    public getSnippets(context: SnippetProviderContext): Promise<SnippetWithProviderInfo[]> {\n        return new Promise(async (resolve, reject) => {\n            resolve(this.buildSnippets(context));\n        });\n    }\n}\n",
    "export interface ScoredSuffix {\n    score: number;\n}\n\nexport function findEditDistanceScore(a: number[], b: number[]): ScoredSuffix {\n    if (a.length === 0 || b.length === 0) {\n        return {score: a.length + b.length};\n    }\n\n    const matrix = Array.from({length: a.length}).map(() => Array.from({length: b.length}).map(() => 0));\n    for (let i = 0; i < a.length; i++) {\n        matrix[i][0] = i;\n    }\n\n    for (let i = 0; i < b.length; i++) {\n        matrix[0][i] = i;\n    }\n\n    for (let j = 0; j < b.length; j++) {\n        for (let i = 0; i < a.length; i++) {\n            matrix[i][j] = Math.min(\n                (i == 0 ? j : matrix[i - 1][j]) + 1,\n                (j == 0 ? i : matrix[i][j - 1]) + 1,\n                (i == 0 || j == 0 ? Math.max(i, j) : matrix[i - 1][j - 1]) + (a[i] == b[j] ? 0 : 1)\n            );\n        }\n    }\n\n    return {score: matrix[a.length - 1][b.length - 1]};\n}\n",
    "export * from './tokenizer';\n",
    "// This file is based on\n//    https://github.com/latitudegames/GPT-3-Encoder\n//    by AIDungeon\n// which is released under the MIT License:\n//\n// MIT License\n//\n// Copyright (c) 2020 AIDungeon\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// The original from https://github.com/latitudegames/GPT-3-Encoder\n// includes code which was modified from https://github.com/openai/gpt-2\n//\n// Important invariants about tokenization:\n// - Tokenization works by a first pass that splits the text into chunks using\n//   the regular expression `pat`.\n// - Each chunk is then split into tokens.\n// - All chunks' tokens are then concatenated to form the complete tokenization.\n// - Newlines appear in only three tokens: \"\\n\", \"\\n\\n\", \"\\n\"+nonbreaking space\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport {TextDecoder, TextEncoder} from 'util';\n\n/////\n// Helper functions\n/////\n\nconst range = (x: number, y: number) => {\n    const res = Array.from(Array(y).keys()).slice(x);\n    return res;\n};\n\nconst ord = (x: string) => {\n    return x.charCodeAt(0);\n};\n\nconst chr = (x: number) => {\n    return String.fromCharCode(x);\n};\n\nconst textDecoder = new TextDecoder('utf-8');\nconst decodeStr = (arr: number[]) => {\n    return textDecoder.decode(new Uint8Array(arr));\n};\n\nconst dictZip = (x: string[], y: number[]) => {\n    const result = new Map<string, number>();\n    x.forEach((_, i) => {\n        result.set(x[i], y[i]);\n    });\n    return result;\n};\n\nfunction bytes_to_unicode(map: Map<number, string>) {\n    const bs = range(ord('!'), ord('~') + 1).concat(range(ord('¡'), ord('¬') + 1), range(ord('®'), ord('ÿ') + 1));\n\n    let cs = bs.slice();\n    let n = 0;\n    for (let b = 0; b < 2 ** 8; b++) {\n        if (!bs.includes(b)) {\n            bs.push(b);\n            cs.push(2 ** 8 + n);\n            n = n + 1;\n        }\n    }\n\n    const cs_ = cs.map(x => chr(x));\n    for (let i = 0; i < bs.length; i++) {\n        map.set(bs[i], cs_[i]);\n    }\n}\n\nfunction get_char_pairs(word: string[]): Set<[string, string]> {\n    const pairs = new Set<[string, string]>();\n    let prev_char = word[0];\n    for (let i = 1; i < word.length; i++) {\n        const char = word[i];\n        pairs.add([prev_char, char]);\n        prev_char = char;\n    }\n    return pairs;\n}\n\nconst pat = /'s|'t|'re|'ve|'m|'ll|'d| ?\\p{L}+| ?\\p{N}+| ?[^\\s\\p{L}\\p{N}]+|\\s+(?!\\S)|\\s+/gu;\n\nexport interface Tokenizer {\n    /**\n     * Returns the tokenization of the input string as a list of integers\n     * representing tokens.\n     */\n    tokenize(text: string): Array<number>;\n\n    /**\n     * Returns the string representation of the tokens in `tokens`, given in integer\n     * representation.\n     *\n     * This is the functional inverse of `tokenize`.\n     */\n    detokenize(tokens: number[]): string;\n\n    /**\n     * Returns the tokenization of the input string as a list of strings.\n     *\n     * The concatenation of the output of this function is equal to the input.\n     */\n    tokenizeStrings(text: string): string[];\n\n    /**\n     * Return the length of `text` in number of tokens.\n     *\n     * @param {str} text - The input text\n     * @returns {number}\n     */\n    tokenLength(text: string): number;\n\n    /**\n     * Return a suffix of `text` which is `n` tokens long.\n     * If `text` is at most `n` tokens, return `text`.\n     *\n     * Note: This implementation does not attempt to return\n     * the longest possible suffix, only *some* suffix of at\n     * most `n` tokens.\n     *\n     * @param {string} text - The text from which to take\n     * @param {number} n - How many tokens to take\n     * @returns A suffix of `text`, as a `string`.\n     */\n    takeLastTokens(text: string, n: number): string;\n\n    /**\n     * Return a prefix of `text` which is `n` tokens long.\n     * If `text` is at most `n` tokens, return `text`.\n     *\n     * Note: This implementation does not attempt to return\n     * the longest possible prefix, only *some* prefix of at\n     * most `n` tokens.\n     *\n     * @param {string} text - The text from which to take\n     * @param {number} n - How many tokens to take\n     * @returns A prefix of `text`, as a `{ text: string, tokens: number[] }`.\n     */\n    takeFirstTokens(text: string, n: number): {text: string; tokens: number[]};\n\n    /**\n     * Return the longest suffix of `text` of complete lines and is at most\n     * `n` tokens long.\n     * @param {string} text - The text from which to take\n     * @param {number} n - How many tokens to take\n     */\n    takeLastLinesTokens(text: string, n: number): string;\n}\n\nexport enum TokenizerName {\n    cushman001 = 'cushman001',\n    cushman002 = 'cushman002',\n    mock = 'mock',\n}\n\nconst tokenizers = new Map<TokenizerName, Tokenizer>();\n\nexport function getTokenizer(name: TokenizerName = TokenizerName.cushman002): Tokenizer {\n    let tokenizer = tokenizers.get(name);\n    if (tokenizer !== undefined) {\n        return tokenizer;\n    }\n\n    if (name === TokenizerName.mock) {\n        tokenizer = new MockTokenizer();\n    } else {\n        tokenizer = new BPETokenizer(name);\n    }\n    tokenizers.set(name, tokenizer);\n    return tokenizer;\n}\n\nclass BPETokenizer implements Tokenizer {\n    private decoder = new Map<number, string>();\n    private encoder: Map<string, number>;\n    private bpe_ranks: Map<string, number>;\n    private byte_encoder = new Map<number, string>();\n    private byte_decoder = new Map<string, number>();\n    private cache = new Map();\n\n    private textEncoder = new TextEncoder();\n\n    constructor(name: Exclude<TokenizerName, TokenizerName.mock> = TokenizerName.cushman002) {\n        let VOCAB = '';\n        let ENCODER = '';\n        if (name === TokenizerName.cushman001) {\n            VOCAB = 'vocab_cushman001.bpe';\n            ENCODER = 'tokenizer_cushman001.json';\n        } else if (name === TokenizerName.cushman002) {\n            VOCAB = 'vocab_cushman002.bpe';\n            ENCODER = 'tokenizer_cushman002.json';\n        } else {\n            throw new Error(`Unknown tokenizer name: ${name}`);\n        }\n        const encoder_path = fs.readFileSync(path.resolve(__dirname, 'resources', name, ENCODER));\n        const encoder_json = JSON.parse(encoder_path.toString());\n        this.encoder = new Map(Object.entries(encoder_json));\n        for (let [key, value] of this.encoder) {\n            this.decoder.set(value, key);\n        }\n\n        const bpe_file = fs.readFileSync(path.resolve(__dirname, 'resources', name, VOCAB), 'utf-8');\n        const bpe_merges = bpe_file\n            .split('\\n')\n            .slice(1)\n            .filter(l => l.trim().length > 0);\n        this.bpe_ranks = dictZip(bpe_merges, range(0, bpe_merges.length));\n\n        bytes_to_unicode(this.byte_encoder);\n        this.byte_encoder.forEach((value, key, _) => {\n            this.byte_decoder.set(value, key);\n        });\n    }\n\n    private encodeStr = (str: string): number[] => {\n        return Array.from(this.textEncoder.encode(str));\n    };\n\n    private byteEncodeStr(s: string) {\n        return this.encodeStr(s).map(x => this.byte_encoder.get(x)!);\n    }\n\n    private mutatingConcat(dest: any[], src: any[]): any[] {\n        for (let i = 0; i < src.length; i++) {\n            dest.push(src[i]);\n        }\n        return dest;\n    }\n\n    private bpe(chunk: string): number[] {\n        if (this.cache.has(chunk)) {\n            return this.cache.get(chunk);\n        }\n        let bytes = this.byteEncodeStr(chunk);\n        let pairs = get_char_pairs(bytes);\n        if (!pairs) {\n            return bytes.map(x => this.encoder.get(x)!);\n        }\n\n        while (true) {\n            const minPairs = new Map<Number, [string, string]>();\n            pairs.forEach(pair => {\n                const joined_pair = pair.join(' ');\n                const rank = this.bpe_ranks.get(joined_pair);\n                minPairs.set(rank === undefined || isNaN(rank) ? 10e10 : rank, pair);\n            });\n\n            const minPairsKeys = Array.from(minPairs.keys()).map(x => Number(x));\n\n            const bigram = minPairs.get(Math.min(...minPairsKeys));\n\n            if (!bigram || !this.bpe_ranks.has(bigram.join(' '))) {\n                break;\n            }\n\n            const first = bigram[0];\n            const second = bigram[1];\n            let new_bytes = [];\n            let i = 0;\n\n            while (i < bytes.length) {\n                const j = bytes.indexOf(first, i);\n                if (j === -1) {\n                    this.mutatingConcat(new_bytes, bytes.slice(i));\n                    break;\n                }\n                this.mutatingConcat(new_bytes, bytes.slice(i, j));\n                i = j;\n\n                if (bytes[i] === first && i < bytes.length - 1 && bytes[i + 1] === second) {\n                    new_bytes.push(first + second);\n                    i = i + 2;\n                } else {\n                    new_bytes.push(bytes[i]);\n                    i = i + 1;\n                }\n            }\n\n            bytes = new_bytes;\n            if (bytes.length === 1) {\n                break;\n            } else {\n                pairs = get_char_pairs(bytes);\n            }\n        }\n\n        const tokens = bytes.map(x => this.encoder.get(x)!);\n        this.cache.set(chunk, tokens);\n        return tokens;\n    }\n\n    tokenize(text: string): number[] {\n        let tokens: number[] = [];\n        const matches = Array.from(text.matchAll(pat)).map(x => x[0]);\n        for (let chunk of matches) {\n            const chunk_tokens = this.bpe(chunk);\n            this.mutatingConcat(tokens, chunk_tokens);\n        }\n        return tokens;\n    }\n\n    tokenLength(text: string): number {\n        return this.tokenize(text).length;\n    }\n\n    takeLastTokens(text: string, n: number): string {\n        if (n <= 0) return '';\n\n        // Find long enough suffix of text that has >= n + 2 tokens\n        // We add the 2 extra tokens to avoid the edge case where\n        // we cut at exactly n tokens and may get an odd tokenization.\n        const CHARS_PER_TOKENS_START = 4;\n        const CHARS_PER_TOKENS_ADD = 1;\n        let chars = Math.min(text.length, n * CHARS_PER_TOKENS_START); //First guess\n        let suffix = text.slice(-chars);\n        let suffixT = this.tokenize(suffix);\n        while (suffixT.length < n + 2 && chars < text.length) {\n            chars = Math.min(text.length, chars + n * CHARS_PER_TOKENS_ADD);\n            suffix = text.slice(-chars);\n            suffixT = this.tokenize(suffix);\n        }\n        if (suffixT.length < n) {\n            // text must be <= n tokens long\n            return text;\n        }\n        // Return last n tokens\n        suffixT = suffixT.slice(-n);\n        return this.detokenize(suffixT);\n    }\n\n    takeFirstTokens(text: string, n: number): {text: string; tokens: number[]} {\n        if (n <= 0) return {text: '', tokens: []};\n\n        // Find long enough suffix of text that has >= n + 2 tokens\n        // We add the 2 extra tokens to avoid the edge case where\n        // we cut at exactly n tokens and may get an odd tokenization.\n        const CHARS_PER_TOKENS_START = 4;\n        const CHARS_PER_TOKENS_ADD = 1;\n        let chars = Math.min(text.length, n * CHARS_PER_TOKENS_START); //First guess\n        let prefix = text.slice(0, chars);\n        let prefix_t = this.tokenize(prefix);\n        while (prefix_t.length < n + 2 && chars < text.length) {\n            chars = Math.min(text.length, chars + n * CHARS_PER_TOKENS_ADD);\n            prefix = text.slice(0, chars);\n            prefix_t = this.tokenize(prefix);\n        }\n        if (prefix_t.length < n) {\n            // text must be <= n tokens long\n            return {\n                text: text,\n                tokens: prefix_t,\n            };\n        }\n        // Return first n tokens\n        prefix_t = prefix_t.slice(0, n);\n        return {\n            text: this.detokenize(prefix_t),\n            tokens: prefix_t,\n        };\n    }\n\n    takeLastLinesTokens(text: string, n: number): string {\n        const suffix = this.takeLastTokens(text, n);\n        if (suffix.length === text.length || text[text.length - suffix.length - 1] === '\\n') {\n            // Edge case: We already took whole lines\n            return suffix;\n        }\n        let newline = suffix.indexOf('\\n');\n        return suffix.substring(newline + 1);\n    }\n\n    detokenize(tokens: number[]): string {\n        let text = tokens.map(x => this.decoder.get(x)).join('');\n        text = decodeStr(text.split('').map(x => this.byte_decoder.get(x)!));\n        return text;\n    }\n\n    tokenizeStrings(text: string): string[] {\n        const tokens = this.tokenize(text);\n        return tokens.map(token =>\n            decodeStr(\n                this.decoder\n                    .get(token)!\n                    .split('')\n                    .map(char => this.byte_decoder.get(char)!)\n            )\n        );\n    }\n}\n\nclass MockTokenizer implements Tokenizer {\n    private hash = (str: string) => {\n        let hash = 0;\n        for (let i = 0; i < str.length; i++) {\n            const char = str.charCodeAt(i);\n            hash = (hash << 5) - hash + char;\n            hash &= hash & 0xffff;\n        }\n        return hash;\n    };\n\n    tokenize(text: string): number[] {\n        return this.tokenizeStrings(text).map(this.hash);\n    }\n    detokenize(tokens: number[]): string {\n        return tokens.map(token => token.toString()).join(' ');\n    }\n    tokenizeStrings(text: string): string[] {\n        return text.split(/\\b/);\n    }\n    tokenLength(text: string): number {\n        return this.tokenizeStrings(text).length;\n    }\n    takeLastTokens(text: string, n: number): string {\n        return this.tokenizeStrings(text).slice(-n).join('');\n    }\n    takeFirstTokens(text: string, n: number): {text: string; tokens: number[]} {\n        const tokens = this.tokenizeStrings(text).slice(0, n);\n        return {text: tokens.join(''), tokens: tokens.map(this.hash)};\n    }\n    takeLastLinesTokens(text: string, n: number): string {\n        const suffix = this.takeLastTokens(text, n);\n        if (suffix.length === text.length || text[text.length - suffix.length - 1] === '\\n') {\n            // Edge case: We already took whole lines\n            return suffix;\n        }\n        let newline = suffix.indexOf('\\n');\n        return suffix.substring(newline + 1);\n    }\n}\n",
    "import {LineEndingOptions, PromptInfo} from './prompt';\nimport {Tokenizer} from './tokenization';\n\nexport enum PromptElementKind {\n    BeforeCursor = 'BeforeCursor',\n    AfterCursor = 'AfterCursor',\n    SimilarFile = 'SimilarFile',\n    RetrievalSnippet = 'RetrievalSnippet',\n    SymbolDefinition = 'SymbolDefinition',\n    ImportedFile = 'ImportedFile',\n    LanguageMarker = 'LanguageMarker',\n    PathMarker = 'PathMarker',\n}\n\ninterface PromptElement {\n    id: number;\n    kind: PromptElementKind;\n    priority: number;\n    text: string;\n    tokens: number;\n    requires: PromptElement[]; // Elements that must have been selected before this one\n    excludes: PromptElement[]; // Elements that will be skipped if this one is already selected\n    score: number; // score of the element if exist else set to -1\n}\n\n/**\n * Helper: given a list of indexed items and a target index, return an\n * item of the list with the smallest index that is greater than the target.\n */\nfunction getMinimalGreater<T extends {index: number}>(items: T[], targetIndex: number): T | undefined {\n    let bestIndex: number = Infinity;\n    let best: T | undefined = undefined;\n    for (const elem of items) {\n        if (elem.index > targetIndex && elem.index < bestIndex) {\n            best = elem;\n            bestIndex = elem.index;\n        }\n    }\n    return best;\n}\n\ninterface PromptBackgroundElement {\n    score: string;\n    length: number;\n}\n\nexport class PromptBackground {\n    used: Map<number, PromptBackgroundElement> = new Map<number, PromptBackgroundElement>();\n    unused: Map<number, PromptBackgroundElement> = new Map<number, PromptBackgroundElement>();\n\n    /**\n     * Register the decision to use a certain element in the prompt\n     * @param element The element\n     */\n    markUsed(element: PromptElement): void {\n        if (this.IsSnippet(element)) {\n            this.used.set(element.id, this.convert(element));\n        }\n    }\n\n    /**\n     * Undo the registration\n     * @param element The element\n     */\n    undoMarkUsed(element: PromptElement) {\n        if (this.IsSnippet(element)) {\n            this.used.delete(element.id);\n        }\n    }\n\n    /**\n     * Register the decision against using a certain element in the prompt\n     * @param element The element\n     */\n    markUnused(element: PromptElement): void {\n        if (this.IsSnippet(element)) {\n            this.unused.set(element.id, this.convert(element));\n        }\n    }\n\n    private convert(element: PromptElement): PromptBackgroundElement {\n        return {\n            score: element.score.toFixed(4),\n            length: element.text.length,\n        };\n    }\n\n    private IsSnippet(element: PromptElement): boolean {\n        return element.kind == PromptElementKind.SimilarFile || element.kind == PromptElementKind.RetrievalSnippet;\n    }\n}\n\nexport class PromptChoices {\n    used: Map<PromptElementKind, number> = new Map<PromptElementKind, number>();\n    unused: Map<PromptElementKind, number> = new Map<PromptElementKind, number>();\n\n    /**\n     * Counts how many elements of PromptElementKind were included.\n     * Useful for telemetry.\n     */\n    usedCounts: Map<PromptElementKind, number> = new Map<PromptElementKind, number>();\n    unusedCounts: Map<PromptElementKind, number> = new Map<PromptElementKind, number>();\n\n    /**\n     * Register the decision to use a certain element in the prompt\n     * @param element The element\n     */\n    markUsed(element: PromptElement): void {\n        this.used.set(element.kind, (this.used.get(element.kind) || 0) + element.tokens);\n        this.usedCounts.set(element.kind, (this.usedCounts.get(element.kind) || 0) + 1);\n    }\n\n    /**\n     * Undo the registration\n     * @param element The element\n     */\n    undoMarkUsed(element: PromptElement) {\n        this.used.set(element.kind, (this.used.get(element.kind) || 0) - element.tokens);\n        this.usedCounts.set(element.kind, (this.usedCounts.get(element.kind) || 0) - 1);\n    }\n\n    /**\n     * Register the decision against using a certain element in the prompt\n     * @param element The element\n     */\n    markUnused(element: PromptElement): void {\n        this.unused.set(element.kind, (this.unused.get(element.kind) || 0) + element.tokens);\n        this.unusedCounts.set(element.kind, (this.unusedCounts.get(element.kind) || 0) + 1);\n    }\n}\n\ninterface PromptElementRange {\n    kind: PromptElementKind;\n    start: number;\n    end: number;\n}\n\nexport class PromptElementRanges {\n    ranges = new Array<PromptElementRange>();\n\n    constructor(usedElements: {element: PromptElement; index: number}[]) {\n        /**\n         * Update ranges to reflect character indices of elements used in the prompt\n         */\n        let nextRangeStart: number = 0;\n        let previousKind: PromptElementKind | undefined = undefined;\n\n        for (const {element} of usedElements) {\n            if (element.text.length === 0) {\n                continue;\n            }\n            // We want to merge adjacent elements from BeforeCursor because each line is a separate element\n            if (previousKind === PromptElementKind.BeforeCursor && element.kind === PromptElementKind.BeforeCursor) {\n                this.ranges[this.ranges.length - 1].end += element.text.length;\n            } else {\n                this.ranges.push({\n                    kind: element.kind,\n                    start: nextRangeStart,\n                    end: nextRangeStart + element.text.length,\n                });\n            }\n\n            previousKind = element.kind;\n            nextRangeStart += element.text.length;\n        }\n    }\n}\n\nexport class PromptWishlist {\n    private content: PromptElement[] = [];\n    lineEndingOption: LineEndingOptions;\n\n    /**\n     * An object to keep track of a list of desired prompt elements,\n     * and assemble the prompt text from them.\n     * @param lineEndingOption The line ending option to use\n     */\n    constructor(\n        private readonly tokenizer: Tokenizer,\n        lineEndingOption: LineEndingOptions\n    ) {\n        this.tokenizer = tokenizer;\n        this.lineEndingOption = lineEndingOption;\n    }\n\n    getContent(): PromptElement[] {\n        return [...this.content];\n    }\n\n    private convertLineEndings(text: string) {\n        if (this.lineEndingOption === LineEndingOptions.ConvertToUnix) {\n            text = text.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n        }\n        return text;\n    }\n\n    /**\n     * Create a new {@link PromptElement} and add it to the wishlist\n     * @param text The content of the element\n     * @param kind The {@link PromptElementKind} each line will have.\n     * @param priority A number representing the priority (larger means higher).\n     * Priorities can be managed with a {@link Priorities} object.\n     * @param tokens The number of tokens used by the element if tokenzied standalone;\n     * will be computed if not supplied.\n     * @param score The score of the prompt element, default to -1 if not supplied\n     */\n    append(\n        text: string,\n        kind: PromptElementKind,\n        priority: number,\n        tokens: number = this.tokenizer.tokenLength(text),\n        score: number = NaN\n    ): number {\n        text = this.convertLineEndings(text);\n        // make new id\n        const id = this.content.length;\n        this.content.push({id, text, kind, priority, tokens, requires: [], excludes: [], score: score});\n        return id;\n    }\n\n    /**\n     * Append each line of the text as {@link PromptElement} to the wishlist,\n     * such that earlier lines depend on later ones.\n     * @param text The content of the text\n     * @param kind The {@link PromptElementKind} each line will have.\n     * @param priority A number representing the priority (larger means higher) all lines will have.\n     * Since equal priorities are tiebreaked by the order of the lines,\n     * later lines will have a better chance to get into the prompt.\n     * Priorities can be managed with a {@link Priorities} object.\n     */\n    appendLineForLine(text: string, kind: PromptElementKind, priority: number): number[] {\n        text = this.convertLineEndings(text);\n        const rawLines = text.split('\\n');\n        // make sure the lines are \"\\n\"-ended\n        for (let i = 0; i < rawLines.length - 1; i++) {\n            rawLines[i] += '\\n';\n        }\n        const lines: string[] = [];\n        rawLines.forEach((line, i) => {\n            if (line === '\\n' && lines.length > 0 && !lines[lines.length - 1].endsWith('\\n\\n')) {\n                lines[lines.length - 1] += '\\n';\n            } else {\n                lines.push(line);\n            }\n        });\n        const returns: number[] = [];\n        lines.forEach((line, i) => {\n            if (line !== '') {\n                // note that is always true for i < lines.length - 1\n                returns.push(this.append(line, kind, priority));\n                // let earlier lines depend on later ones\n                if (i > 0) {\n                    this.content[this.content.length - 2].requires = [this.content[this.content.length - 1]];\n                }\n            }\n        });\n        return returns;\n    }\n\n    /**\n     * Adds a dependency of the first to the second element,\n     * addressed by ID\n     */\n    require(dependentId: number, dependeeId: number) {\n        const dependent = this.content.find(e => e.id === dependentId);\n        const dependee = this.content.find(e => e.id === dependeeId);\n        if (dependent && dependee) {\n            dependent.requires.push(dependee);\n        }\n    }\n\n    /**\n     * Adds an exclusion:\n     * if the first element is present, the second element won't be added anymore\n     * addressed by ID\n     */\n    exclude(excludingId: number, excludedId: number) {\n        const excluding = this.content.find(e => e.id === excludingId);\n        const excluded = this.content.find(e => e.id === excludedId);\n        if (excluding && excluded) {\n            excluding.excludes.push(excluded);\n        }\n    }\n\n    /**\n     * Return a PromptInfo describing the prompt which _fulfills_ the wishlist:\n     *\n     * That means it has the following properties:\n     * 1. the token length does not exceed maxPromptLength\n     * 2. the order of the elements is as described in the wishlist\n     * 3. pairs of elements such that the higher priority one excludes the lower will not both be selected\n     * 4. elements that depend on another element will only be selected if the other one has higher priority and is selected\n     *\n     * Under all such subsets of the wishlist, it is maximal in the ordering where\n     * set A < set B if there is an element e such that\n     * * e in B and not in A\n     * * B and A do not differ in elements of higher priority than e\n     * * B and A do not differ in elements of equal priority but later position in the wishlist than e\n     *\n     * Implementation note: the condition in 4 that the dependee has higher priority is owing\n     * to the algorithm implementing the wish fulfillment and may either be changed, or\n     * we might remove the possibility to depend on a lower priority element altogether.\n     *\n     * @param maxPromptLength The maximum allowed prompt length in tokens\n     * @returns A {@link PromptInfo} describing the prompt arrived at following the rules given above\n     */\n    fulfill(maxPromptLength: number): PromptInfo {\n        // keep a tally of the choices made\n        const tallyOfChoices = new PromptChoices();\n        const promptBackground = new PromptBackground();\n        // to avoid ties, move the priority of tied elements\n\n        // want to add the highest priorities first,\n        // but the final text should be in the order of the array\n        // to keep track of that, add an index to each element of content\n        const indexedContent = this.content.map((e, i) => {\n            return {element: e, index: i};\n        });\n\n        // sorted by priority -- highest first, in case of a tie: latest first\n        indexedContent.sort((a, b) => {\n            if (a.element.priority === b.element.priority) {\n                return b.index - a.index;\n            }\n            return b.element.priority - a.element.priority;\n        });\n\n        const idsThatHaveAlreadyBeenAdded: Set<number> = new Set<number>();\n        const idsConflictingWithAlreadyAddedIds: Set<number> = new Set<number>();\n        let budgetBreakingElement: {element: PromptElement; index: number} | undefined; // use this to include the first element that breaks the budget\n        const remainingContent: {element: PromptElement; index: number}[] = [];\n        let remainingBudget = maxPromptLength;\n        indexedContent.forEach(e => {\n            const element = e.element;\n            const index = e.index;\n            // we need to have budget, meet the requirements and have not\n            // excluded the element\n            if (\n                remainingBudget >= 0 &&\n                (remainingBudget > 0 || budgetBreakingElement === undefined) &&\n                element.requires.every(r => idsThatHaveAlreadyBeenAdded.has(r.id)) &&\n                !idsConflictingWithAlreadyAddedIds.has(element.id)\n            ) {\n                let budgetUse = element.tokens;\n                // taking care of a bizarre edge case: double new line is a single token\n                // _except_ if the following line starts with non-whitespace\n                const probableNextElem = getMinimalGreater(remainingContent, index)?.element;\n                if (element.text.endsWith('\\n\\n') && probableNextElem && !probableNextElem.text.match(/^\\s/)) {\n                    budgetUse++;\n                }\n                if (remainingBudget >= budgetUse) {\n                    remainingBudget -= budgetUse;\n                    idsThatHaveAlreadyBeenAdded.add(element.id);\n                    element.excludes.forEach(e => idsConflictingWithAlreadyAddedIds.add(e.id));\n                    tallyOfChoices.markUsed(element);\n                    promptBackground.markUsed(element);\n                    remainingContent.push(e);\n                } else {\n                    // remember the element that broke the budget -- we may try whether it can still be included\n                    if (budgetBreakingElement === undefined) {\n                        budgetBreakingElement = e;\n                    } else {\n                        tallyOfChoices.markUnused(e.element);\n                        promptBackground.markUnused(e.element);\n                    }\n                }\n            } else {\n                tallyOfChoices.markUnused(element);\n                promptBackground.markUnused(element);\n            }\n        });\n\n        // The budgeting logic for indexedContent is an approximation that can be\n        // off slightly if the wishlist's order is very different from its priorities.\n        // This may be due to:\n        // * partial lines added together\n        // * double new lines being a single token iff the next line does not start with whitespace\n        //\n        // We need to make sure that on no account can the prompt be too long.\n        // Also, we want to test whether one more element would still fit.\n\n        // Check that we do not go over:\n        remainingContent.sort((a, b) => a.index - b.index);\n        let prompt = remainingContent.reduce((a, b) => a + b.element.text, '');\n        let promptLength = this.tokenizer.tokenLength(prompt);\n        while (promptLength > maxPromptLength) {\n            // take the least priority element and remove it after all\n            remainingContent.sort((a, b) => {\n                // Sort by least priority last, then by lowest index last\n                if (b.element.priority === a.element.priority) {\n                    return b.index - a.index;\n                } else {\n                    return b.element.priority - a.element.priority;\n                }\n            });\n            const removeAfterAll = remainingContent.pop();\n            if (removeAfterAll) {\n                tallyOfChoices.undoMarkUsed(removeAfterAll.element);\n                tallyOfChoices.markUnused(removeAfterAll.element);\n                promptBackground.undoMarkUsed(removeAfterAll.element);\n                promptBackground.markUnused(removeAfterAll.element);\n                // Do not want the headaches that come with removing something\n                // and adding it back again\n                if (budgetBreakingElement !== undefined) {\n                    // We haven't yet marked the budget breaking element as unused\n                    tallyOfChoices.markUnused(budgetBreakingElement.element);\n                    promptBackground.markUnused(budgetBreakingElement.element);\n                }\n                budgetBreakingElement = undefined;\n            }\n            remainingContent.sort((a, b) => a.index - b.index);\n            prompt = remainingContent.reduce((a, b) => a + b.element.text, '');\n            promptLength = this.tokenizer.tokenLength(prompt);\n        }\n\n        // Conversely, check whether we can get in more content\n        // copy the remainingContent:\n        const extendedContent = [...remainingContent];\n        if (budgetBreakingElement !== undefined) {\n            extendedContent.push(budgetBreakingElement);\n            extendedContent.sort((a, b) => a.index - b.index);\n            const prompt = extendedContent.reduce((a, b) => a + b.element.text, '');\n            const promptLength = this.tokenizer.tokenLength(prompt);\n            if (promptLength <= maxPromptLength) {\n                // we can fit more content\n                tallyOfChoices.markUsed(budgetBreakingElement.element);\n                promptBackground.markUsed(budgetBreakingElement.element);\n\n                const promptElementRanges = new PromptElementRanges(extendedContent);\n                return {\n                    prefix: prompt,\n                    suffix: '',\n                    prefixLength: promptLength,\n                    suffixLength: 0,\n                    promptChoices: tallyOfChoices,\n                    promptBackground: promptBackground,\n                    promptElementRanges: promptElementRanges,\n                };\n            } else {\n                // we can't use it\n                tallyOfChoices.markUnused(budgetBreakingElement.element);\n                promptBackground.markUnused(budgetBreakingElement.element);\n            }\n        }\n\n        const promptElementRanges = new PromptElementRanges(remainingContent);\n        return {\n            prefix: prompt,\n            suffix: '',\n            prefixLength: promptLength,\n            suffixLength: 0,\n            promptChoices: tallyOfChoices,\n            promptBackground: promptBackground,\n            promptElementRanges: promptElementRanges,\n        };\n    }\n}\n\n/**\n * A class to keep track of the choices made in a prompt\n * Implementation note:\n * This is fine for now, but repeated calls to justAbove, justBelow, etc.\n * will run into precision problems for >4000 or so priorities.\n */\nexport class Priorities {\n    registeredPriorities = [0, 1];\n    static TOP = 1;\n    static BOTTOM = 0;\n    /**\n     * Register a new priority\n     * @param priority The numerical value\n     * @returns\n     */\n    register(priority: number) {\n        if (priority > Priorities.TOP || priority < Priorities.BOTTOM) {\n            throw new Error('Priority must be between 0 and 1');\n        }\n        this.registeredPriorities.push(priority);\n        return priority;\n    }\n\n    /**\n     * Registers a new priority above the given priorities,\n     * but not above any other registered priority\n     * @param priorities\n     * @returns\n     */\n    justAbove(...priorities: number[]): number {\n        const priority = Math.max(...priorities);\n        const nearestNeighbor = Math.min(...this.registeredPriorities.filter(p => p > priority));\n        return this.register((nearestNeighbor + priority) / 2);\n    }\n\n    /**\n     * Registers a new priority below the given priorities,\n     * but not below any other registered priority\n     * @param priorities\n     * @returns\n     */\n    justBelow(...priorities: number[]): number {\n        const priority = Math.min(...priorities);\n        const nearestNeighbor = Math.max(...this.registeredPriorities.filter(p => p < priority));\n        return this.register((nearestNeighbor + priority) / 2);\n    }\n\n    /**\n     * Verifies that the two priorities are adjacent in the list of priorities,\n     * and returns one in the middle.\n     */\n    between(lower: number, higher: number): number {\n        if (\n            this.registeredPriorities.some(p => p > lower && p < higher) ||\n            !(this.registeredPriorities.includes(lower) && this.registeredPriorities.includes(higher))\n        ) {\n            throw new Error('Priorities must be adjacent in the list of priorities');\n        }\n        return this.register((lower + higher) / 2);\n    }\n}\n",
    "import {resolve} from 'path';\nimport {MessageChannel, MessagePort, Worker, isMainThread, workerData} from 'worker_threads';\nimport {extractLocalImportContext} from './localImportContext';\nimport {NodePosition} from './parse';\nimport {DocumentInfo, DocumentInfoWithOffset, PromptInfo, PromptOptions} from './prompt';\nimport {getNeighborSnippets} from './snippetInclusion/neighboringFiles';\n\n// function used for testing\nexport function sleep(delay: number): Promise<string> {\n    return new Promise(resolve => {\n        var start = new Date().getTime();\n        while (new Date().getTime() < start + delay);\n        resolve(`delay: ${delay}`);\n    });\n}\n\ntype PromiseCallbacks = {resolve: Function; reject: Function};\n\nexport const workerFns = ['getNeighborSnippets', 'extractLocalImportContext', 'sleep'] as const;\nexport type ProxiedFunction = (typeof workerFns)[number];\n/** The interface types appearing in argument or return types of proxiable functions. */\ntype ProxiedInterface = NodePosition | DocumentInfo | DocumentInfoWithOffset | PromptInfo | PromptOptions;\n/**\n * A type that can be copied using the [structured clone algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm).\n *\n * Note: This is an approximation; it doesn't currently seem to be possible to capture this precisely\n * (https://github.com/microsoft/TypeScript/issues/29941).\n */\ntype CloneableType =\n    // primitives\n    | boolean\n    | number\n    | string\n    | undefined\n    // objects with cloneable properties\n    | {[key in keyof ProxiedInterface]: CloneableType}\n    // arrays with clonable elements\n    | CloneableType[];\n\n/**\n * A class to manage a worker thread and to proxy functions for execution on the worker thread\n *\n * The class gets instantiated on the main thread and is by deafult \"not threaded\". When threading\n * is turned on, the class creates a worker thread containing another instance of itself and does the following:\n *   - the main thread instance overwrites its own methods with the `proxy` functions that delegate to the\n *     functions on the worker instance (this happens according to the `workerFns` list)\n *   - listeners are configured on the worker thread to receive messages from the main thread\n *     containing the names of the functions to execute and their arguments\n *   - listeners are configured on the main thread to receive messages from the worker thread\n *     containing the outputs of the proxy functions\n *\n */\n\nexport class WorkerProxy {\n    private nextHandlerId = 0;\n    private handlers = new Map<number, PromiseCallbacks>();\n    fns = new Map<string, Function>();\n    declare worker: Worker | undefined;\n    declare port: MessagePort;\n\n    // proxy functions\n    extractLocalImportContext = extractLocalImportContext;\n    getNeighborSnippets = getNeighborSnippets;\n    sleep = sleep;\n    // proxy functions end\n\n    constructor() {\n        if (!isMainThread && workerData) {\n            // invoke on the worker thread only\n            this.configureWorkerResponse(workerData.port);\n        }\n    }\n\n    initWorker() {\n        const {port1, port2} = new MessageChannel();\n        this.port = port1;\n        this.worker = new Worker(resolve(__dirname, '..', 'dist', 'workerProxy.js'), {\n            // port2 is the port on which the worker will respond to messages\n            workerData: {port: port2},\n            transferList: [port2],\n        });\n\n        // Add listeners to the main thread\n        this.port.on('message', m => this.handleMessage(m));\n        this.port.on('error', e => this.handleError(e));\n    }\n\n    startThreading() {\n        if (this.worker) {\n            throw new Error('Worker thread already initialized.');\n        }\n        this.proxyFunctions();\n        this.initWorker();\n    }\n\n    stopThreading() {\n        if (this.worker) {\n            this.worker.terminate();\n            this.worker.removeAllListeners();\n            this.worker = undefined;\n            this.unproxyFunctions();\n            this.handlers.clear();\n        }\n    }\n\n    proxyFunctions() {\n        for (const fn of workerFns) {\n            // preserve references to original functions\n            this.fns.set(fn, this[fn]);\n            this.proxy(fn);\n        }\n    }\n\n    unproxyFunctions() {\n        for (const fn of workerFns) {\n            const originalFn = this.fns.get(fn) as WorkerProxy[typeof fn];\n            if (originalFn) {\n                (this[fn] as Function) = originalFn;\n            } else {\n                throw new Error(`Unproxy function not found: ${fn}`);\n            }\n        }\n    }\n\n    /**\n     * the function that executes on the worker thread\n     * sets up listener on the worker to respond to messages sent from the main thread\n     */\n    configureWorkerResponse(port: MessagePort) {\n        this.port = port;\n        this.port.on('message', async ({id, fn, args}: {id: number; fn: ProxiedFunction; args: CloneableType[]}) => {\n            const proxiedFunction = this[fn];\n            if (!proxiedFunction) {\n                throw new Error(`Function not found: ${fn}`);\n            }\n            try {\n                let res = await (proxiedFunction as Function).apply(this, args as Parameters<typeof proxiedFunction>);\n                this.port.postMessage({id, res});\n            } catch (err) {\n                this.port.postMessage({id, err});\n            }\n        });\n    }\n\n    /**\n     * resolve the promise associated with the message id sent to the worker\n     */\n    handleMessage({id, err, res}: {id: number; err: Error; res: any}) {\n        const handler = this.handlers.get(id);\n        if (handler) {\n            this.handlers.delete(id);\n            if (err) {\n                handler.reject(err);\n            } else {\n                handler.resolve(res);\n            }\n        }\n    }\n\n    handleError(maybeError: unknown) {\n        console.log(maybeError);\n        // add the local stack trace to the error so the uncaught exception handler can log where it originated\n        let err;\n        if (maybeError instanceof Error) {\n            err = maybeError;\n            const ourStack = new Error().stack;\n            if (err.stack && ourStack?.match(/^Error\\n/)) {\n                err.stack += ourStack.replace(/^Error/, '');\n            }\n        } else {\n            err = new Error(`Non-error thrown: ${maybeError}`);\n        }\n        for (const handler of this.handlers.values()) {\n            handler.reject(err);\n        }\n        throw err;\n    }\n\n    /**\n     * Wrap function `fn` into a proxy that sends a message\n     * with the function name and arguments to the worker and returns a promise that will be\n     * resolved with the result the worker returns or rejected with any exception the worker\n     * encounters.\n     *\n     * The wrapped function must return a promise, and its arguments and return values must be\n     * primitive values or objects that can be serialized by the worker-threads library.\n     */\n    proxy<T extends ProxiedFunction>(fn: T) {\n        this[fn] = function <R extends CloneableType>(...args: CloneableType[]): Promise<R> {\n            const id = this.nextHandlerId++;\n            return new Promise((resolve, reject) => {\n                this.handlers.set(id, {resolve, reject});\n                this.port?.postMessage({id, fn, args});\n            });\n        };\n    }\n}\n\nexport let workerProxy = new WorkerProxy();\n\n// for testing we need to reset the singleton instance\nexport const reset = () => {\n    workerProxy.stopThreading();\n    workerProxy = new WorkerProxy();\n};\n",
    "var Module=void 0!==Module?Module:{},TreeSitter=function(){var initPromise,document=\"object\"==typeof window?{currentScript:window.document.currentScript}:null;class Parser{constructor(){this.initialize()}initialize(){throw new Error(\"cannot construct a Parser before calling `init()`\")}static init(moduleOptions){return initPromise||(Module=Object.assign({},Module,moduleOptions),initPromise=new Promise((resolveInitPromise=>{var moduleOverrides=Object.assign({},Module),arguments_=[],thisProgram=\"./this.program\",quit_=(e,t)=>{throw t},ENVIRONMENT_IS_WEB=\"object\"==typeof window,ENVIRONMENT_IS_WORKER=\"function\"==typeof importScripts,ENVIRONMENT_IS_NODE=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,scriptDirectory=\"\",read_,readAsync,readBinary,setWindowTitle;function locateFile(e){return Module.locateFile?Module.locateFile(e,scriptDirectory):scriptDirectory+e}function logExceptionOnExit(e){if(e instanceof ExitStatus)return;err(\"exiting due to exception: \"+e)}if(ENVIRONMENT_IS_NODE){var fs=require(\"fs\"),nodePath=require(\"path\");scriptDirectory=ENVIRONMENT_IS_WORKER?nodePath.dirname(scriptDirectory)+\"/\":__dirname+\"/\",read_=(e,t)=>(e=isFileURI(e)?new URL(e):nodePath.normalize(e),fs.readFileSync(e,t?void 0:\"utf8\")),readBinary=e=>{var t=read_(e,!0);return t.buffer||(t=new Uint8Array(t)),t},readAsync=(e,t,r)=>{e=isFileURI(e)?new URL(e):nodePath.normalize(e),fs.readFile(e,(function(e,_){e?r(e):t(_.buffer)}))},process.argv.length>1&&(thisProgram=process.argv[1].replace(/\\\\/g,\"/\")),arguments_=process.argv.slice(2),\"undefined\"!=typeof module&&(module.exports=Module),quit_=(e,t)=>{if(keepRuntimeAlive())throw process.exitCode=e,t;logExceptionOnExit(t),process.exit(e)},Module.inspect=function(){return\"[Emscripten Module object]\"}}else(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&(ENVIRONMENT_IS_WORKER?scriptDirectory=self.location.href:void 0!==document&&document.currentScript&&(scriptDirectory=document.currentScript.src),scriptDirectory=0!==scriptDirectory.indexOf(\"blob:\")?scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",read_=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.send(null),t.responseText},ENVIRONMENT_IS_WORKER&&(readBinary=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response)}),readAsync=(e,t,r)=>{var _=new XMLHttpRequest;_.open(\"GET\",e,!0),_.responseType=\"arraybuffer\",_.onload=()=>{200==_.status||0==_.status&&_.response?t(_.response):r()},_.onerror=r,_.send(null)},setWindowTitle=e=>document.title=e);var out=Module.print||console.log.bind(console),err=Module.printErr||console.warn.bind(console);Object.assign(Module,moduleOverrides),moduleOverrides=null,Module.arguments&&(arguments_=Module.arguments),Module.thisProgram&&(thisProgram=Module.thisProgram),Module.quit&&(quit_=Module.quit);var STACK_ALIGN=16,dynamicLibraries=Module.dynamicLibraries||[],wasmBinary;Module.wasmBinary&&(wasmBinary=Module.wasmBinary);var noExitRuntime=Module.noExitRuntime||!0,wasmMemory;\"object\"!=typeof WebAssembly&&abort(\"no native wasm support detected\");var ABORT=!1,EXITSTATUS,UTF8Decoder=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function UTF8ArrayToString(e,t,r){for(var _=t+r,n=t;e[n]&&!(n>=_);)++n;if(n-t>16&&e.buffer&&UTF8Decoder)return UTF8Decoder.decode(e.subarray(t,n));for(var s=\"\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192!=(224&a)){var i=63&e[t++];if((a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])<65536)s+=String.fromCharCode(a);else{var l=a-65536;s+=String.fromCharCode(55296|l>>10,56320|1023&l)}}else s+=String.fromCharCode((31&a)<<6|o)}else s+=String.fromCharCode(a)}return s}function UTF8ToString(e,t){return e?UTF8ArrayToString(HEAPU8,e,t):\"\"}function stringToUTF8Array(e,t,r,_){if(!(_>0))return 0;for(var n=r,s=r+_-1,a=0;a<e.length;++a){var o=e.charCodeAt(a);if(o>=55296&&o<=57343)o=65536+((1023&o)<<10)|1023&e.charCodeAt(++a);if(o<=127){if(r>=s)break;t[r++]=o}else if(o<=2047){if(r+1>=s)break;t[r++]=192|o>>6,t[r++]=128|63&o}else if(o<=65535){if(r+2>=s)break;t[r++]=224|o>>12,t[r++]=128|o>>6&63,t[r++]=128|63&o}else{if(r+3>=s)break;t[r++]=240|o>>18,t[r++]=128|o>>12&63,t[r++]=128|o>>6&63,t[r++]=128|63&o}}return t[r]=0,r-n}function stringToUTF8(e,t,r){return stringToUTF8Array(e,HEAPU8,t,r)}function lengthBytesUTF8(e){for(var t=0,r=0;r<e.length;++r){var _=e.charCodeAt(r);_<=127?t++:_<=2047?t+=2:_>=55296&&_<=57343?(t+=4,++r):t+=3}return t}function updateGlobalBufferAndViews(e){buffer=e,Module.HEAP8=HEAP8=new Int8Array(e),Module.HEAP16=HEAP16=new Int16Array(e),Module.HEAP32=HEAP32=new Int32Array(e),Module.HEAPU8=HEAPU8=new Uint8Array(e),Module.HEAPU16=HEAPU16=new Uint16Array(e),Module.HEAPU32=HEAPU32=new Uint32Array(e),Module.HEAPF32=HEAPF32=new Float32Array(e),Module.HEAPF64=HEAPF64=new Float64Array(e)}var INITIAL_MEMORY=Module.INITIAL_MEMORY||33554432;wasmMemory=Module.wasmMemory?Module.wasmMemory:new WebAssembly.Memory({initial:INITIAL_MEMORY/65536,maximum:32768}),wasmMemory&&(buffer=wasmMemory.buffer),INITIAL_MEMORY=buffer.byteLength,updateGlobalBufferAndViews(buffer);var wasmTable=new WebAssembly.Table({initial:20,element:\"anyfunc\"}),__ATPRERUN__=[],__ATINIT__=[],__ATMAIN__=[],__ATPOSTRUN__=[],__RELOC_FUNCS__=[],runtimeInitialized=!1;function keepRuntimeAlive(){return noExitRuntime}function preRun(){if(Module.preRun)for(\"function\"==typeof Module.preRun&&(Module.preRun=[Module.preRun]);Module.preRun.length;)addOnPreRun(Module.preRun.shift());callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=!0,callRuntimeCallbacks(__RELOC_FUNCS__),callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function postRun(){if(Module.postRun)for(\"function\"==typeof Module.postRun&&(Module.postRun=[Module.postRun]);Module.postRun.length;)addOnPostRun(Module.postRun.shift());callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(e){__ATPRERUN__.unshift(e)}function addOnInit(e){__ATINIT__.unshift(e)}function addOnPostRun(e){__ATPOSTRUN__.unshift(e)}var runDependencies=0,runDependencyWatcher=null,dependenciesFulfilled=null;function addRunDependency(e){runDependencies++,Module.monitorRunDependencies&&Module.monitorRunDependencies(runDependencies)}function removeRunDependency(e){if(runDependencies--,Module.monitorRunDependencies&&Module.monitorRunDependencies(runDependencies),0==runDependencies&&(null!==runDependencyWatcher&&(clearInterval(runDependencyWatcher),runDependencyWatcher=null),dependenciesFulfilled)){var t=dependenciesFulfilled;dependenciesFulfilled=null,t()}}function abort(e){throw Module.onAbort&&Module.onAbort(e),err(e=\"Aborted(\"+e+\")\"),ABORT=!0,EXITSTATUS=1,e+=\". Build with -sASSERTIONS for more info.\",new WebAssembly.RuntimeError(e)}var dataURIPrefix=\"data:application/octet-stream;base64,\",wasmBinaryFile,tempDouble,tempI64;function isDataURI(e){return e.startsWith(dataURIPrefix)}function isFileURI(e){return e.startsWith(\"file://\")}function getBinary(e){try{if(e==wasmBinaryFile&&wasmBinary)return new Uint8Array(wasmBinary);if(readBinary)return readBinary(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){abort(e)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(\"function\"==typeof fetch&&!isFileURI(wasmBinaryFile))return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then((function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\";return e.arrayBuffer()})).catch((function(){return getBinary(wasmBinaryFile)}));if(readAsync)return new Promise((function(e,t){readAsync(wasmBinaryFile,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return getBinary(wasmBinaryFile)}))}function createWasm(){var e={env:asmLibraryArg,wasi_snapshot_preview1:asmLibraryArg,\"GOT.mem\":new Proxy(asmLibraryArg,GOTHandler),\"GOT.func\":new Proxy(asmLibraryArg,GOTHandler)};function t(e,t){var r=e.exports;r=relocateExports(r,1024);var _=getDylinkMetadata(t);_.neededDynlibs&&(dynamicLibraries=_.neededDynlibs.concat(dynamicLibraries)),mergeLibSymbols(r,\"main\"),Module.asm=r,addOnInit(Module.asm.__wasm_call_ctors),__RELOC_FUNCS__.push(Module.asm.__wasm_apply_data_relocs),removeRunDependency(\"wasm-instantiate\")}function r(e){t(e.instance,e.module)}function _(t){return getBinaryPromise().then((function(t){return WebAssembly.instantiate(t,e)})).then((function(e){return e})).then(t,(function(e){err(\"failed to asynchronously prepare wasm: \"+e),abort(e)}))}if(addRunDependency(\"wasm-instantiate\"),Module.instantiateWasm)try{return Module.instantiateWasm(e,t)}catch(e){return err(\"Module.instantiateWasm callback failed with error: \"+e),!1}return wasmBinary||\"function\"!=typeof WebAssembly.instantiateStreaming||isDataURI(wasmBinaryFile)||isFileURI(wasmBinaryFile)||ENVIRONMENT_IS_NODE||\"function\"!=typeof fetch?_(r):fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then((function(t){return WebAssembly.instantiateStreaming(t,e).then(r,(function(e){return err(\"wasm streaming compile failed: \"+e),err(\"falling back to ArrayBuffer instantiation\"),_(r)}))})),{}}wasmBinaryFile=\"tree-sitter.wasm\",isDataURI(wasmBinaryFile)||(wasmBinaryFile=locateFile(wasmBinaryFile));var ASM_CONSTS={};function ExitStatus(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}var GOT={},CurrentModuleWeakSymbols=new Set([]),GOTHandler={get:function(e,t){var r=GOT[t];return r||(r=GOT[t]=new WebAssembly.Global({value:\"i32\",mutable:!0})),CurrentModuleWeakSymbols.has(t)||(r.required=!0),r}};function callRuntimeCallbacks(e){for(;e.length>0;)e.shift()(Module)}function getDylinkMetadata(e){var t=0,r=0;function _(){for(var r=0,_=1;;){var n=e[t++];if(r+=(127&n)*_,_*=128,!(128&n))break}return r}function n(){var r=_();return UTF8ArrayToString(e,(t+=r)-r,r)}function s(e,t){if(e)throw new Error(t)}var a=\"dylink.0\";if(e instanceof WebAssembly.Module){var o=WebAssembly.Module.customSections(e,a);0===o.length&&(a=\"dylink\",o=WebAssembly.Module.customSections(e,a)),s(0===o.length,\"need dylink section\"),r=(e=new Uint8Array(o[0])).length}else{s(!(1836278016==new Uint32Array(new Uint8Array(e.subarray(0,24)).buffer)[0]),\"need to see wasm magic number\"),s(0!==e[8],\"need the dylink section to be first\"),t=9;var i=_();r=t+i,a=n()}var l={neededDynlibs:[],tlsExports:new Set,weakImports:new Set};if(\"dylink\"==a){l.memorySize=_(),l.memoryAlign=_(),l.tableSize=_(),l.tableAlign=_();for(var u=_(),d=0;d<u;++d){var c=n();l.neededDynlibs.push(c)}}else{s(\"dylink.0\"!==a);for(;t<r;){var m=e[t++],p=_();if(1===m)l.memorySize=_(),l.memoryAlign=_(),l.tableSize=_(),l.tableAlign=_();else if(2===m)for(u=_(),d=0;d<u;++d)c=n(),l.neededDynlibs.push(c);else if(3===m)for(var f=_();f--;){var h=n();256&_()&&l.tlsExports.add(h)}else if(4===m)for(f=_();f--;){n(),h=n();1==(3&_())&&l.weakImports.add(h)}else t+=p}}return l}function getValue(e,t=\"i8\"){switch(t.endsWith(\"*\")&&(t=\"*\"),t){case\"i1\":case\"i8\":return HEAP8[e>>0];case\"i16\":return HEAP16[e>>1];case\"i32\":case\"i64\":return HEAP32[e>>2];case\"float\":return HEAPF32[e>>2];case\"double\":return HEAPF64[e>>3];case\"*\":return HEAPU32[e>>2];default:abort(\"invalid type for getValue: \"+t)}return null}function asmjsMangle(e){return 0==e.indexOf(\"dynCall_\")||[\"stackAlloc\",\"stackSave\",\"stackRestore\",\"getTempRet0\",\"setTempRet0\"].includes(e)?e:\"_\"+e}function mergeLibSymbols(e,t){for(var r in e)if(e.hasOwnProperty(r)){asmLibraryArg.hasOwnProperty(r)||(asmLibraryArg[r]=e[r]);var _=asmjsMangle(r);Module.hasOwnProperty(_)||(Module[_]=e[r]),\"__main_argc_argv\"==r&&(Module._main=e[r])}}var LDSO={loadedLibsByName:{},loadedLibsByHandle:{}};function dynCallLegacy(e,t,r){var _=Module[\"dynCall_\"+e];return r&&r.length?_.apply(null,[t].concat(r)):_.call(null,t)}var wasmTableMirror=[];function getWasmTableEntry(e){var t=wasmTableMirror[e];return t||(e>=wasmTableMirror.length&&(wasmTableMirror.length=e+1),wasmTableMirror[e]=t=wasmTable.get(e)),t}function dynCall(e,t,r){return e.includes(\"j\")?dynCallLegacy(e,t,r):getWasmTableEntry(t).apply(null,r)}function createInvokeFunction(e){return function(){var t=stackSave();try{return dynCall(e,arguments[0],Array.prototype.slice.call(arguments,1))}catch(e){if(stackRestore(t),e!==e+0)throw e;_setThrew(1,0)}}}var ___heap_base=78144;function zeroMemory(e,t){return HEAPU8.fill(0,e,e+t),e}function getMemory(e){if(runtimeInitialized)return zeroMemory(_malloc(e),e);var t=___heap_base,r=t+e+15&-16;return ___heap_base=r,GOT.__heap_base.value=r,t}function isInternalSym(e){return[\"__cpp_exception\",\"__c_longjmp\",\"__wasm_apply_data_relocs\",\"__dso_handle\",\"__tls_size\",\"__tls_align\",\"__set_stack_limits\",\"_emscripten_tls_init\",\"__wasm_init_tls\",\"__wasm_call_ctors\",\"__start_em_asm\",\"__stop_em_asm\"].includes(e)}function uleb128Encode(e,t){e<128?t.push(e):t.push(e%128|128,e>>7)}function sigToWasmTypes(e){for(var t={i:\"i32\",j:\"i32\",f:\"f32\",d:\"f64\",p:\"i32\"},r={parameters:[],results:\"v\"==e[0]?[]:[t[e[0]]]},_=1;_<e.length;++_)r.parameters.push(t[e[_]]),\"j\"===e[_]&&r.parameters.push(\"i32\");return r}function generateFuncType(e,t){var r=e.slice(0,1),_=e.slice(1),n={i:127,p:127,j:126,f:125,d:124};t.push(96),uleb128Encode(_.length,t);for(var s=0;s<_.length;++s)t.push(n[_[s]]);\"v\"==r?t.push(0):t.push(1,n[r])}function convertJsFunctionToWasm(e,t){if(\"function\"==typeof WebAssembly.Function)return new WebAssembly.Function(sigToWasmTypes(t),e);var r=[1];generateFuncType(t,r);var _=[0,97,115,109,1,0,0,0,1];uleb128Encode(r.length,_),_.push.apply(_,r),_.push(2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0);var n=new WebAssembly.Module(new Uint8Array(_));return new WebAssembly.Instance(n,{e:{f:e}}).exports.f}function updateTableMap(e,t){if(functionsInTableMap)for(var r=e;r<e+t;r++){var _=getWasmTableEntry(r);_&&functionsInTableMap.set(_,r)}}var functionsInTableMap=void 0,freeTableIndexes=[];function getEmptyTableSlot(){if(freeTableIndexes.length)return freeTableIndexes.pop();try{wasmTable.grow(1)}catch(e){if(!(e instanceof RangeError))throw e;throw\"Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.\"}return wasmTable.length-1}function setWasmTableEntry(e,t){wasmTable.set(e,t),wasmTableMirror[e]=wasmTable.get(e)}function addFunction(e,t){if(functionsInTableMap||(functionsInTableMap=new WeakMap,updateTableMap(0,wasmTable.length)),functionsInTableMap.has(e))return functionsInTableMap.get(e);var r=getEmptyTableSlot();try{setWasmTableEntry(r,e)}catch(_){if(!(_ instanceof TypeError))throw _;setWasmTableEntry(r,convertJsFunctionToWasm(e,t))}return functionsInTableMap.set(e,r),r}function updateGOT(e,t){for(var r in e)if(!isInternalSym(r)){var _=e[r];r.startsWith(\"orig$\")&&(r=r.split(\"$\")[1],t=!0),GOT[r]||(GOT[r]=new WebAssembly.Global({value:\"i32\",mutable:!0})),(t||0==GOT[r].value)&&(\"function\"==typeof _?GOT[r].value=addFunction(_):\"number\"==typeof _?GOT[r].value=_:err(\"unhandled export type for `\"+r+\"`: \"+typeof _))}}function relocateExports(e,t,r){var _={};for(var n in e){var s=e[n];\"object\"==typeof s&&(s=s.value),\"number\"==typeof s&&(s+=t),_[n]=s}return updateGOT(_,r),_}function resolveGlobalSymbol(e,t){var r;return t&&(r=asmLibraryArg[\"orig$\"+e]),r||(r=asmLibraryArg[e])&&r.stub&&(r=void 0),r||(r=Module[asmjsMangle(e)]),!r&&e.startsWith(\"invoke_\")&&(r=createInvokeFunction(e.split(\"_\")[1])),r}function alignMemory(e,t){return Math.ceil(e/t)*t}function loadWebAssemblyModule(binary,flags,handle){var metadata=getDylinkMetadata(binary);function loadModule(){var firstLoad=!handle||!HEAP8[handle+12>>0];if(firstLoad){var memAlign=Math.pow(2,metadata.memoryAlign);memAlign=Math.max(memAlign,STACK_ALIGN);var memoryBase=metadata.memorySize?alignMemory(getMemory(metadata.memorySize+memAlign),memAlign):0,tableBase=metadata.tableSize?wasmTable.length:0;handle&&(HEAP8[handle+12>>0]=1,HEAPU32[handle+16>>2]=memoryBase,HEAP32[handle+20>>2]=metadata.memorySize,HEAPU32[handle+24>>2]=tableBase,HEAP32[handle+28>>2]=metadata.tableSize)}else memoryBase=HEAPU32[handle+16>>2],tableBase=HEAPU32[handle+24>>2];var tableGrowthNeeded=tableBase+metadata.tableSize-wasmTable.length,moduleExports;function resolveSymbol(e){var t=resolveGlobalSymbol(e,!1);return t||(t=moduleExports[e]),t}tableGrowthNeeded>0&&wasmTable.grow(tableGrowthNeeded);var proxyHandler={get:function(e,t){switch(t){case\"__memory_base\":return memoryBase;case\"__table_base\":return tableBase}if(t in asmLibraryArg)return asmLibraryArg[t];var r;t in e||(e[t]=function(){return r||(r=resolveSymbol(t)),r.apply(null,arguments)});return e[t]}},proxy=new Proxy({},proxyHandler),info={\"GOT.mem\":new Proxy({},GOTHandler),\"GOT.func\":new Proxy({},GOTHandler),env:proxy,wasi_snapshot_preview1:proxy};function postInstantiation(instance){function addEmAsm(addr,body){for(var args=[],arity=0;arity<16&&-1!=body.indexOf(\"$\"+arity);arity++)args.push(\"$\"+arity);args=args.join(\",\");var func=\"(\"+args+\" ) => { \"+body+\"};\";ASM_CONSTS[start]=eval(func)}if(updateTableMap(tableBase,metadata.tableSize),moduleExports=relocateExports(instance.exports,memoryBase),flags.allowUndefined||reportUndefinedSymbols(),\"__start_em_asm\"in moduleExports)for(var start=moduleExports.__start_em_asm,stop=moduleExports.__stop_em_asm;start<stop;){var jsString=UTF8ToString(start);addEmAsm(start,jsString),start=HEAPU8.indexOf(0,start)+1}var applyRelocs=moduleExports.__wasm_apply_data_relocs;applyRelocs&&(runtimeInitialized?applyRelocs():__RELOC_FUNCS__.push(applyRelocs));var init=moduleExports.__wasm_call_ctors;return init&&(runtimeInitialized?init():__ATINIT__.push(init)),moduleExports}if(flags.loadAsync){if(binary instanceof WebAssembly.Module){var instance=new WebAssembly.Instance(binary,info);return Promise.resolve(postInstantiation(instance))}return WebAssembly.instantiate(binary,info).then((function(e){return postInstantiation(e.instance)}))}var module=binary instanceof WebAssembly.Module?binary:new WebAssembly.Module(binary),instance=new WebAssembly.Instance(module,info);return postInstantiation(instance)}return CurrentModuleWeakSymbols=metadata.weakImports,flags.loadAsync?metadata.neededDynlibs.reduce((function(e,t){return e.then((function(){return loadDynamicLibrary(t,flags)}))}),Promise.resolve()).then((function(){return loadModule()})):(metadata.neededDynlibs.forEach((function(e){loadDynamicLibrary(e,flags)})),loadModule())}function loadDynamicLibrary(e,t,r){t=t||{global:!0,nodelete:!0};var _=LDSO.loadedLibsByName[e];if(_)return t.global&&!_.global&&(_.global=!0,\"loading\"!==_.module&&mergeLibSymbols(_.module,e)),t.nodelete&&_.refcount!==1/0&&(_.refcount=1/0),_.refcount++,r&&(LDSO.loadedLibsByHandle[r]=_),!t.loadAsync||Promise.resolve(!0);function n(e){if(t.fs&&t.fs.findObject(e)){var r=t.fs.readFile(e,{encoding:\"binary\"});return r instanceof Uint8Array||(r=new Uint8Array(r)),t.loadAsync?Promise.resolve(r):r}if(e=locateFile(e),t.loadAsync)return new Promise((function(t,r){readAsync(e,(e=>t(new Uint8Array(e))),r)}));if(!readBinary)throw new Error(e+\": file not found, and synchronous loading of external files is not available\");return readBinary(e)}function s(){if(\"undefined\"!=typeof preloadedWasm&&preloadedWasm[e]){var _=preloadedWasm[e];return t.loadAsync?Promise.resolve(_):_}return t.loadAsync?n(e).then((function(e){return loadWebAssemblyModule(e,t,r)})):loadWebAssemblyModule(n(e),t,r)}function a(t){_.global&&mergeLibSymbols(t,e),_.module=t}return _={refcount:t.nodelete?1/0:1,name:e,module:\"loading\",global:t.global},LDSO.loadedLibsByName[e]=_,r&&(LDSO.loadedLibsByHandle[r]=_),t.loadAsync?s().then((function(e){return a(e),!0})):(a(s()),!0)}function reportUndefinedSymbols(){for(var e in GOT)if(0==GOT[e].value){var t=resolveGlobalSymbol(e,!0);if(!t&&!GOT[e].required)continue;if(\"function\"==typeof t)GOT[e].value=addFunction(t,t.sig);else{if(\"number\"!=typeof t)throw new Error(\"bad export type for `\"+e+\"`: \"+typeof t);GOT[e].value=t}}}function preloadDylibs(){dynamicLibraries.length?(addRunDependency(\"preloadDylibs\"),dynamicLibraries.reduce((function(e,t){return e.then((function(){return loadDynamicLibrary(t,{loadAsync:!0,global:!0,nodelete:!0,allowUndefined:!0})}))}),Promise.resolve()).then((function(){reportUndefinedSymbols(),removeRunDependency(\"preloadDylibs\")}))):reportUndefinedSymbols()}function setValue(e,t,r=\"i8\"){switch(r.endsWith(\"*\")&&(r=\"*\"),r){case\"i1\":case\"i8\":HEAP8[e>>0]=t;break;case\"i16\":HEAP16[e>>1]=t;break;case\"i32\":HEAP32[e>>2]=t;break;case\"i64\":tempI64=[t>>>0,(tempDouble=t,+Math.abs(tempDouble)>=1?tempDouble>0?(0|Math.min(+Math.floor(tempDouble/4294967296),4294967295))>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[e>>2]=tempI64[0],HEAP32[e+4>>2]=tempI64[1];break;case\"float\":HEAPF32[e>>2]=t;break;case\"double\":HEAPF64[e>>3]=t;break;case\"*\":HEAPU32[e>>2]=t;break;default:abort(\"invalid type for setValue: \"+r)}}var ___memory_base=new WebAssembly.Global({value:\"i32\",mutable:!1},1024),___stack_pointer=new WebAssembly.Global({value:\"i32\",mutable:!0},78144),___table_base=new WebAssembly.Global({value:\"i32\",mutable:!1},1),nowIsMonotonic=!0,_emscripten_get_now;function __emscripten_get_now_is_monotonic(){return nowIsMonotonic}function _abort(){abort(\"\")}function _emscripten_date_now(){return Date.now()}function _emscripten_memcpy_big(e,t,r){HEAPU8.copyWithin(e,t,t+r)}function getHeapMax(){return 2147483648}function emscripten_realloc_buffer(e){try{return wasmMemory.grow(e-buffer.byteLength+65535>>>16),updateGlobalBufferAndViews(wasmMemory.buffer),1}catch(e){}}function _emscripten_resize_heap(e){var t=HEAPU8.length;e>>>=0;var r=getHeapMax();if(e>r)return!1;for(var _=1;_<=4;_*=2){var n=t*(1+.2/_);if(n=Math.min(n,e+100663296),emscripten_realloc_buffer(Math.min(r,(s=Math.max(e,n))+((a=65536)-s%a)%a)))return!0}var s,a;return!1}__emscripten_get_now_is_monotonic.sig=\"i\",Module._abort=_abort,_abort.sig=\"v\",_emscripten_date_now.sig=\"d\",_emscripten_get_now=ENVIRONMENT_IS_NODE?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.now(),_emscripten_get_now.sig=\"d\",_emscripten_memcpy_big.sig=\"vppp\",_emscripten_resize_heap.sig=\"ip\";var SYSCALLS={DEFAULT_POLLMASK:5,calculateAt:function(e,t,r){if(PATH.isAbs(t))return t;var _;-100===e?_=FS.cwd():_=SYSCALLS.getStreamFromFD(e).path;if(0==t.length){if(!r)throw new FS.ErrnoError(44);return _}return PATH.join2(_,t)},doStat:function(e,t,r){try{var _=e(t)}catch(e){if(e&&e.node&&PATH.normalize(t)!==PATH.normalize(FS.getPath(e.node)))return-54;throw e}HEAP32[r>>2]=_.dev,HEAP32[r+8>>2]=_.ino,HEAP32[r+12>>2]=_.mode,HEAPU32[r+16>>2]=_.nlink,HEAP32[r+20>>2]=_.uid,HEAP32[r+24>>2]=_.gid,HEAP32[r+28>>2]=_.rdev,tempI64=[_.size>>>0,(tempDouble=_.size,+Math.abs(tempDouble)>=1?tempDouble>0?(0|Math.min(+Math.floor(tempDouble/4294967296),4294967295))>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[r+40>>2]=tempI64[0],HEAP32[r+44>>2]=tempI64[1],HEAP32[r+48>>2]=4096,HEAP32[r+52>>2]=_.blocks;var n=_.atime.getTime(),s=_.mtime.getTime(),a=_.ctime.getTime();return tempI64=[Math.floor(n/1e3)>>>0,(tempDouble=Math.floor(n/1e3),+Math.abs(tempDouble)>=1?tempDouble>0?(0|Math.min(+Math.floor(tempDouble/4294967296),4294967295))>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[r+56>>2]=tempI64[0],HEAP32[r+60>>2]=tempI64[1],HEAPU32[r+64>>2]=n%1e3*1e3,tempI64=[Math.floor(s/1e3)>>>0,(tempDouble=Math.floor(s/1e3),+Math.abs(tempDouble)>=1?tempDouble>0?(0|Math.min(+Math.floor(tempDouble/4294967296),4294967295))>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[r+72>>2]=tempI64[0],HEAP32[r+76>>2]=tempI64[1],HEAPU32[r+80>>2]=s%1e3*1e3,tempI64=[Math.floor(a/1e3)>>>0,(tempDouble=Math.floor(a/1e3),+Math.abs(tempDouble)>=1?tempDouble>0?(0|Math.min(+Math.floor(tempDouble/4294967296),4294967295))>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[r+88>>2]=tempI64[0],HEAP32[r+92>>2]=tempI64[1],HEAPU32[r+96>>2]=a%1e3*1e3,tempI64=[_.ino>>>0,(tempDouble=_.ino,+Math.abs(tempDouble)>=1?tempDouble>0?(0|Math.min(+Math.floor(tempDouble/4294967296),4294967295))>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[r+104>>2]=tempI64[0],HEAP32[r+108>>2]=tempI64[1],0},doMsync:function(e,t,r,_,n){if(!FS.isFile(t.node.mode))throw new FS.ErrnoError(43);if(2&_)return 0;var s=HEAPU8.slice(e,e+r);FS.msync(t,s,n,r,_)},varargs:void 0,get:function(){return SYSCALLS.varargs+=4,HEAP32[SYSCALLS.varargs-4>>2]},getStr:function(e){return UTF8ToString(e)},getStreamFromFD:function(e){var t=FS.getStream(e);if(!t)throw new FS.ErrnoError(8);return t}};function _proc_exit(e){EXITSTATUS=e,keepRuntimeAlive()||(Module.onExit&&Module.onExit(e),ABORT=!0),quit_(e,new ExitStatus(e))}function exitJS(e,t){EXITSTATUS=e,_proc_exit(e)}_proc_exit.sig=\"vi\";var _exit=exitJS;function _fd_close(e){try{var t=SYSCALLS.getStreamFromFD(e);return FS.close(t),0}catch(e){if(\"undefined\"==typeof FS||!(e instanceof FS.ErrnoError))throw e;return e.errno}}function convertI32PairToI53Checked(e,t){return t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN}function _fd_seek(e,t,r,_,n){try{var s=convertI32PairToI53Checked(t,r);if(isNaN(s))return 61;var a=SYSCALLS.getStreamFromFD(e);return FS.llseek(a,s,_),tempI64=[a.position>>>0,(tempDouble=a.position,+Math.abs(tempDouble)>=1?tempDouble>0?(0|Math.min(+Math.floor(tempDouble/4294967296),4294967295))>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[n>>2]=tempI64[0],HEAP32[n+4>>2]=tempI64[1],a.getdents&&0===s&&0===_&&(a.getdents=null),0}catch(e){if(\"undefined\"==typeof FS||!(e instanceof FS.ErrnoError))throw e;return e.errno}}function doWritev(e,t,r,_){for(var n=0,s=0;s<r;s++){var a=HEAPU32[t>>2],o=HEAPU32[t+4>>2];t+=8;var i=FS.write(e,HEAP8,a,o,_);if(i<0)return-1;n+=i,void 0!==_&&(_+=i)}return n}function _fd_write(e,t,r,_){try{var n=doWritev(SYSCALLS.getStreamFromFD(e),t,r);return HEAPU32[_>>2]=n,0}catch(e){if(\"undefined\"==typeof FS||!(e instanceof FS.ErrnoError))throw e;return e.errno}}function _tree_sitter_log_callback(e,t){if(currentLogCallback){const r=UTF8ToString(t);currentLogCallback(r,0!==e)}}function _tree_sitter_parse_callback(e,t,r,_,n){var s=currentParseCallback(t,{row:r,column:_});\"string\"==typeof s?(setValue(n,s.length,\"i32\"),stringToUTF16(s,e,10240)):setValue(n,0,\"i32\")}function handleException(e){if(e instanceof ExitStatus||\"unwind\"==e)return EXITSTATUS;quit_(1,e)}function allocateUTF8OnStack(e){var t=lengthBytesUTF8(e)+1,r=stackAlloc(t);return stringToUTF8Array(e,HEAP8,r,t),r}function stringToUTF16(e,t,r){if(void 0===r&&(r=2147483647),r<2)return 0;for(var _=t,n=(r-=2)<2*e.length?r/2:e.length,s=0;s<n;++s){var a=e.charCodeAt(s);HEAP16[t>>1]=a,t+=2}return HEAP16[t>>1]=0,t-_}function AsciiToString(e){for(var t=\"\";;){var r=HEAPU8[e++>>0];if(!r)return t;t+=String.fromCharCode(r)}}_exit.sig=\"vi\",_fd_close.sig=\"ii\",_fd_seek.sig=\"iijip\",_fd_write.sig=\"iippp\";var asmLibraryArg={__heap_base:___heap_base,__indirect_function_table:wasmTable,__memory_base:___memory_base,__stack_pointer:___stack_pointer,__table_base:___table_base,_emscripten_get_now_is_monotonic:__emscripten_get_now_is_monotonic,abort:_abort,emscripten_get_now:_emscripten_get_now,emscripten_memcpy_big:_emscripten_memcpy_big,emscripten_resize_heap:_emscripten_resize_heap,exit:_exit,fd_close:_fd_close,fd_seek:_fd_seek,fd_write:_fd_write,memory:wasmMemory,tree_sitter_log_callback:_tree_sitter_log_callback,tree_sitter_parse_callback:_tree_sitter_parse_callback},asm=createWasm(),___wasm_call_ctors=Module.___wasm_call_ctors=function(){return(___wasm_call_ctors=Module.___wasm_call_ctors=Module.asm.__wasm_call_ctors).apply(null,arguments)},___wasm_apply_data_relocs=Module.___wasm_apply_data_relocs=function(){return(___wasm_apply_data_relocs=Module.___wasm_apply_data_relocs=Module.asm.__wasm_apply_data_relocs).apply(null,arguments)},_malloc=Module._malloc=function(){return(_malloc=Module._malloc=Module.asm.malloc).apply(null,arguments)},_calloc=Module._calloc=function(){return(_calloc=Module._calloc=Module.asm.calloc).apply(null,arguments)},_realloc=Module._realloc=function(){return(_realloc=Module._realloc=Module.asm.realloc).apply(null,arguments)},_free=Module._free=function(){return(_free=Module._free=Module.asm.free).apply(null,arguments)},_ts_language_symbol_count=Module._ts_language_symbol_count=function(){return(_ts_language_symbol_count=Module._ts_language_symbol_count=Module.asm.ts_language_symbol_count).apply(null,arguments)},_ts_language_version=Module._ts_language_version=function(){return(_ts_language_version=Module._ts_language_version=Module.asm.ts_language_version).apply(null,arguments)},_ts_language_field_count=Module._ts_language_field_count=function(){return(_ts_language_field_count=Module._ts_language_field_count=Module.asm.ts_language_field_count).apply(null,arguments)},_ts_language_symbol_name=Module._ts_language_symbol_name=function(){return(_ts_language_symbol_name=Module._ts_language_symbol_name=Module.asm.ts_language_symbol_name).apply(null,arguments)},_ts_language_symbol_for_name=Module._ts_language_symbol_for_name=function(){return(_ts_language_symbol_for_name=Module._ts_language_symbol_for_name=Module.asm.ts_language_symbol_for_name).apply(null,arguments)},_ts_language_symbol_type=Module._ts_language_symbol_type=function(){return(_ts_language_symbol_type=Module._ts_language_symbol_type=Module.asm.ts_language_symbol_type).apply(null,arguments)},_ts_language_field_name_for_id=Module._ts_language_field_name_for_id=function(){return(_ts_language_field_name_for_id=Module._ts_language_field_name_for_id=Module.asm.ts_language_field_name_for_id).apply(null,arguments)},_memset=Module._memset=function(){return(_memset=Module._memset=Module.asm.memset).apply(null,arguments)},_memcpy=Module._memcpy=function(){return(_memcpy=Module._memcpy=Module.asm.memcpy).apply(null,arguments)},_ts_parser_delete=Module._ts_parser_delete=function(){return(_ts_parser_delete=Module._ts_parser_delete=Module.asm.ts_parser_delete).apply(null,arguments)},_ts_parser_reset=Module._ts_parser_reset=function(){return(_ts_parser_reset=Module._ts_parser_reset=Module.asm.ts_parser_reset).apply(null,arguments)},_ts_parser_set_language=Module._ts_parser_set_language=function(){return(_ts_parser_set_language=Module._ts_parser_set_language=Module.asm.ts_parser_set_language).apply(null,arguments)},_ts_parser_timeout_micros=Module._ts_parser_timeout_micros=function(){return(_ts_parser_timeout_micros=Module._ts_parser_timeout_micros=Module.asm.ts_parser_timeout_micros).apply(null,arguments)},_ts_parser_set_timeout_micros=Module._ts_parser_set_timeout_micros=function(){return(_ts_parser_set_timeout_micros=Module._ts_parser_set_timeout_micros=Module.asm.ts_parser_set_timeout_micros).apply(null,arguments)},_memmove=Module._memmove=function(){return(_memmove=Module._memmove=Module.asm.memmove).apply(null,arguments)},_memcmp=Module._memcmp=function(){return(_memcmp=Module._memcmp=Module.asm.memcmp).apply(null,arguments)},_ts_query_new=Module._ts_query_new=function(){return(_ts_query_new=Module._ts_query_new=Module.asm.ts_query_new).apply(null,arguments)},_ts_query_delete=Module._ts_query_delete=function(){return(_ts_query_delete=Module._ts_query_delete=Module.asm.ts_query_delete).apply(null,arguments)},_iswspace=Module._iswspace=function(){return(_iswspace=Module._iswspace=Module.asm.iswspace).apply(null,arguments)},_iswalnum=Module._iswalnum=function(){return(_iswalnum=Module._iswalnum=Module.asm.iswalnum).apply(null,arguments)},_ts_query_pattern_count=Module._ts_query_pattern_count=function(){return(_ts_query_pattern_count=Module._ts_query_pattern_count=Module.asm.ts_query_pattern_count).apply(null,arguments)},_ts_query_capture_count=Module._ts_query_capture_count=function(){return(_ts_query_capture_count=Module._ts_query_capture_count=Module.asm.ts_query_capture_count).apply(null,arguments)},_ts_query_string_count=Module._ts_query_string_count=function(){return(_ts_query_string_count=Module._ts_query_string_count=Module.asm.ts_query_string_count).apply(null,arguments)},_ts_query_capture_name_for_id=Module._ts_query_capture_name_for_id=function(){return(_ts_query_capture_name_for_id=Module._ts_query_capture_name_for_id=Module.asm.ts_query_capture_name_for_id).apply(null,arguments)},_ts_query_string_value_for_id=Module._ts_query_string_value_for_id=function(){return(_ts_query_string_value_for_id=Module._ts_query_string_value_for_id=Module.asm.ts_query_string_value_for_id).apply(null,arguments)},_ts_query_predicates_for_pattern=Module._ts_query_predicates_for_pattern=function(){return(_ts_query_predicates_for_pattern=Module._ts_query_predicates_for_pattern=Module.asm.ts_query_predicates_for_pattern).apply(null,arguments)},_ts_tree_copy=Module._ts_tree_copy=function(){return(_ts_tree_copy=Module._ts_tree_copy=Module.asm.ts_tree_copy).apply(null,arguments)},_ts_tree_delete=Module._ts_tree_delete=function(){return(_ts_tree_delete=Module._ts_tree_delete=Module.asm.ts_tree_delete).apply(null,arguments)},_ts_init=Module._ts_init=function(){return(_ts_init=Module._ts_init=Module.asm.ts_init).apply(null,arguments)},_ts_parser_new_wasm=Module._ts_parser_new_wasm=function(){return(_ts_parser_new_wasm=Module._ts_parser_new_wasm=Module.asm.ts_parser_new_wasm).apply(null,arguments)},_ts_parser_enable_logger_wasm=Module._ts_parser_enable_logger_wasm=function(){return(_ts_parser_enable_logger_wasm=Module._ts_parser_enable_logger_wasm=Module.asm.ts_parser_enable_logger_wasm).apply(null,arguments)},_ts_parser_parse_wasm=Module._ts_parser_parse_wasm=function(){return(_ts_parser_parse_wasm=Module._ts_parser_parse_wasm=Module.asm.ts_parser_parse_wasm).apply(null,arguments)},_ts_language_type_is_named_wasm=Module._ts_language_type_is_named_wasm=function(){return(_ts_language_type_is_named_wasm=Module._ts_language_type_is_named_wasm=Module.asm.ts_language_type_is_named_wasm).apply(null,arguments)},_ts_language_type_is_visible_wasm=Module._ts_language_type_is_visible_wasm=function(){return(_ts_language_type_is_visible_wasm=Module._ts_language_type_is_visible_wasm=Module.asm.ts_language_type_is_visible_wasm).apply(null,arguments)},_ts_tree_root_node_wasm=Module._ts_tree_root_node_wasm=function(){return(_ts_tree_root_node_wasm=Module._ts_tree_root_node_wasm=Module.asm.ts_tree_root_node_wasm).apply(null,arguments)},_ts_tree_edit_wasm=Module._ts_tree_edit_wasm=function(){return(_ts_tree_edit_wasm=Module._ts_tree_edit_wasm=Module.asm.ts_tree_edit_wasm).apply(null,arguments)},_ts_tree_get_changed_ranges_wasm=Module._ts_tree_get_changed_ranges_wasm=function(){return(_ts_tree_get_changed_ranges_wasm=Module._ts_tree_get_changed_ranges_wasm=Module.asm.ts_tree_get_changed_ranges_wasm).apply(null,arguments)},_ts_tree_cursor_new_wasm=Module._ts_tree_cursor_new_wasm=function(){return(_ts_tree_cursor_new_wasm=Module._ts_tree_cursor_new_wasm=Module.asm.ts_tree_cursor_new_wasm).apply(null,arguments)},_ts_tree_cursor_delete_wasm=Module._ts_tree_cursor_delete_wasm=function(){return(_ts_tree_cursor_delete_wasm=Module._ts_tree_cursor_delete_wasm=Module.asm.ts_tree_cursor_delete_wasm).apply(null,arguments)},_ts_tree_cursor_reset_wasm=Module._ts_tree_cursor_reset_wasm=function(){return(_ts_tree_cursor_reset_wasm=Module._ts_tree_cursor_reset_wasm=Module.asm.ts_tree_cursor_reset_wasm).apply(null,arguments)},_ts_tree_cursor_goto_first_child_wasm=Module._ts_tree_cursor_goto_first_child_wasm=function(){return(_ts_tree_cursor_goto_first_child_wasm=Module._ts_tree_cursor_goto_first_child_wasm=Module.asm.ts_tree_cursor_goto_first_child_wasm).apply(null,arguments)},_ts_tree_cursor_goto_next_sibling_wasm=Module._ts_tree_cursor_goto_next_sibling_wasm=function(){return(_ts_tree_cursor_goto_next_sibling_wasm=Module._ts_tree_cursor_goto_next_sibling_wasm=Module.asm.ts_tree_cursor_goto_next_sibling_wasm).apply(null,arguments)},_ts_tree_cursor_goto_parent_wasm=Module._ts_tree_cursor_goto_parent_wasm=function(){return(_ts_tree_cursor_goto_parent_wasm=Module._ts_tree_cursor_goto_parent_wasm=Module.asm.ts_tree_cursor_goto_parent_wasm).apply(null,arguments)},_ts_tree_cursor_current_node_type_id_wasm=Module._ts_tree_cursor_current_node_type_id_wasm=function(){return(_ts_tree_cursor_current_node_type_id_wasm=Module._ts_tree_cursor_current_node_type_id_wasm=Module.asm.ts_tree_cursor_current_node_type_id_wasm).apply(null,arguments)},_ts_tree_cursor_current_node_is_named_wasm=Module._ts_tree_cursor_current_node_is_named_wasm=function(){return(_ts_tree_cursor_current_node_is_named_wasm=Module._ts_tree_cursor_current_node_is_named_wasm=Module.asm.ts_tree_cursor_current_node_is_named_wasm).apply(null,arguments)},_ts_tree_cursor_current_node_is_missing_wasm=Module._ts_tree_cursor_current_node_is_missing_wasm=function(){return(_ts_tree_cursor_current_node_is_missing_wasm=Module._ts_tree_cursor_current_node_is_missing_wasm=Module.asm.ts_tree_cursor_current_node_is_missing_wasm).apply(null,arguments)},_ts_tree_cursor_current_node_id_wasm=Module._ts_tree_cursor_current_node_id_wasm=function(){return(_ts_tree_cursor_current_node_id_wasm=Module._ts_tree_cursor_current_node_id_wasm=Module.asm.ts_tree_cursor_current_node_id_wasm).apply(null,arguments)},_ts_tree_cursor_start_position_wasm=Module._ts_tree_cursor_start_position_wasm=function(){return(_ts_tree_cursor_start_position_wasm=Module._ts_tree_cursor_start_position_wasm=Module.asm.ts_tree_cursor_start_position_wasm).apply(null,arguments)},_ts_tree_cursor_end_position_wasm=Module._ts_tree_cursor_end_position_wasm=function(){return(_ts_tree_cursor_end_position_wasm=Module._ts_tree_cursor_end_position_wasm=Module.asm.ts_tree_cursor_end_position_wasm).apply(null,arguments)},_ts_tree_cursor_start_index_wasm=Module._ts_tree_cursor_start_index_wasm=function(){return(_ts_tree_cursor_start_index_wasm=Module._ts_tree_cursor_start_index_wasm=Module.asm.ts_tree_cursor_start_index_wasm).apply(null,arguments)},_ts_tree_cursor_end_index_wasm=Module._ts_tree_cursor_end_index_wasm=function(){return(_ts_tree_cursor_end_index_wasm=Module._ts_tree_cursor_end_index_wasm=Module.asm.ts_tree_cursor_end_index_wasm).apply(null,arguments)},_ts_tree_cursor_current_field_id_wasm=Module._ts_tree_cursor_current_field_id_wasm=function(){return(_ts_tree_cursor_current_field_id_wasm=Module._ts_tree_cursor_current_field_id_wasm=Module.asm.ts_tree_cursor_current_field_id_wasm).apply(null,arguments)},_ts_tree_cursor_current_node_wasm=Module._ts_tree_cursor_current_node_wasm=function(){return(_ts_tree_cursor_current_node_wasm=Module._ts_tree_cursor_current_node_wasm=Module.asm.ts_tree_cursor_current_node_wasm).apply(null,arguments)},_ts_node_symbol_wasm=Module._ts_node_symbol_wasm=function(){return(_ts_node_symbol_wasm=Module._ts_node_symbol_wasm=Module.asm.ts_node_symbol_wasm).apply(null,arguments)},_ts_node_child_count_wasm=Module._ts_node_child_count_wasm=function(){return(_ts_node_child_count_wasm=Module._ts_node_child_count_wasm=Module.asm.ts_node_child_count_wasm).apply(null,arguments)},_ts_node_named_child_count_wasm=Module._ts_node_named_child_count_wasm=function(){return(_ts_node_named_child_count_wasm=Module._ts_node_named_child_count_wasm=Module.asm.ts_node_named_child_count_wasm).apply(null,arguments)},_ts_node_child_wasm=Module._ts_node_child_wasm=function(){return(_ts_node_child_wasm=Module._ts_node_child_wasm=Module.asm.ts_node_child_wasm).apply(null,arguments)},_ts_node_named_child_wasm=Module._ts_node_named_child_wasm=function(){return(_ts_node_named_child_wasm=Module._ts_node_named_child_wasm=Module.asm.ts_node_named_child_wasm).apply(null,arguments)},_ts_node_child_by_field_id_wasm=Module._ts_node_child_by_field_id_wasm=function(){return(_ts_node_child_by_field_id_wasm=Module._ts_node_child_by_field_id_wasm=Module.asm.ts_node_child_by_field_id_wasm).apply(null,arguments)},_ts_node_next_sibling_wasm=Module._ts_node_next_sibling_wasm=function(){return(_ts_node_next_sibling_wasm=Module._ts_node_next_sibling_wasm=Module.asm.ts_node_next_sibling_wasm).apply(null,arguments)},_ts_node_prev_sibling_wasm=Module._ts_node_prev_sibling_wasm=function(){return(_ts_node_prev_sibling_wasm=Module._ts_node_prev_sibling_wasm=Module.asm.ts_node_prev_sibling_wasm).apply(null,arguments)},_ts_node_next_named_sibling_wasm=Module._ts_node_next_named_sibling_wasm=function(){return(_ts_node_next_named_sibling_wasm=Module._ts_node_next_named_sibling_wasm=Module.asm.ts_node_next_named_sibling_wasm).apply(null,arguments)},_ts_node_prev_named_sibling_wasm=Module._ts_node_prev_named_sibling_wasm=function(){return(_ts_node_prev_named_sibling_wasm=Module._ts_node_prev_named_sibling_wasm=Module.asm.ts_node_prev_named_sibling_wasm).apply(null,arguments)},_ts_node_parent_wasm=Module._ts_node_parent_wasm=function(){return(_ts_node_parent_wasm=Module._ts_node_parent_wasm=Module.asm.ts_node_parent_wasm).apply(null,arguments)},_ts_node_descendant_for_index_wasm=Module._ts_node_descendant_for_index_wasm=function(){return(_ts_node_descendant_for_index_wasm=Module._ts_node_descendant_for_index_wasm=Module.asm.ts_node_descendant_for_index_wasm).apply(null,arguments)},_ts_node_named_descendant_for_index_wasm=Module._ts_node_named_descendant_for_index_wasm=function(){return(_ts_node_named_descendant_for_index_wasm=Module._ts_node_named_descendant_for_index_wasm=Module.asm.ts_node_named_descendant_for_index_wasm).apply(null,arguments)},_ts_node_descendant_for_position_wasm=Module._ts_node_descendant_for_position_wasm=function(){return(_ts_node_descendant_for_position_wasm=Module._ts_node_descendant_for_position_wasm=Module.asm.ts_node_descendant_for_position_wasm).apply(null,arguments)},_ts_node_named_descendant_for_position_wasm=Module._ts_node_named_descendant_for_position_wasm=function(){return(_ts_node_named_descendant_for_position_wasm=Module._ts_node_named_descendant_for_position_wasm=Module.asm.ts_node_named_descendant_for_position_wasm).apply(null,arguments)},_ts_node_start_point_wasm=Module._ts_node_start_point_wasm=function(){return(_ts_node_start_point_wasm=Module._ts_node_start_point_wasm=Module.asm.ts_node_start_point_wasm).apply(null,arguments)},_ts_node_end_point_wasm=Module._ts_node_end_point_wasm=function(){return(_ts_node_end_point_wasm=Module._ts_node_end_point_wasm=Module.asm.ts_node_end_point_wasm).apply(null,arguments)},_ts_node_start_index_wasm=Module._ts_node_start_index_wasm=function(){return(_ts_node_start_index_wasm=Module._ts_node_start_index_wasm=Module.asm.ts_node_start_index_wasm).apply(null,arguments)},_ts_node_end_index_wasm=Module._ts_node_end_index_wasm=function(){return(_ts_node_end_index_wasm=Module._ts_node_end_index_wasm=Module.asm.ts_node_end_index_wasm).apply(null,arguments)},_ts_node_to_string_wasm=Module._ts_node_to_string_wasm=function(){return(_ts_node_to_string_wasm=Module._ts_node_to_string_wasm=Module.asm.ts_node_to_string_wasm).apply(null,arguments)},_ts_node_children_wasm=Module._ts_node_children_wasm=function(){return(_ts_node_children_wasm=Module._ts_node_children_wasm=Module.asm.ts_node_children_wasm).apply(null,arguments)},_ts_node_named_children_wasm=Module._ts_node_named_children_wasm=function(){return(_ts_node_named_children_wasm=Module._ts_node_named_children_wasm=Module.asm.ts_node_named_children_wasm).apply(null,arguments)},_ts_node_descendants_of_type_wasm=Module._ts_node_descendants_of_type_wasm=function(){return(_ts_node_descendants_of_type_wasm=Module._ts_node_descendants_of_type_wasm=Module.asm.ts_node_descendants_of_type_wasm).apply(null,arguments)},_ts_node_is_named_wasm=Module._ts_node_is_named_wasm=function(){return(_ts_node_is_named_wasm=Module._ts_node_is_named_wasm=Module.asm.ts_node_is_named_wasm).apply(null,arguments)},_ts_node_has_changes_wasm=Module._ts_node_has_changes_wasm=function(){return(_ts_node_has_changes_wasm=Module._ts_node_has_changes_wasm=Module.asm.ts_node_has_changes_wasm).apply(null,arguments)},_ts_node_has_error_wasm=Module._ts_node_has_error_wasm=function(){return(_ts_node_has_error_wasm=Module._ts_node_has_error_wasm=Module.asm.ts_node_has_error_wasm).apply(null,arguments)},_ts_node_is_missing_wasm=Module._ts_node_is_missing_wasm=function(){return(_ts_node_is_missing_wasm=Module._ts_node_is_missing_wasm=Module.asm.ts_node_is_missing_wasm).apply(null,arguments)},_ts_query_matches_wasm=Module._ts_query_matches_wasm=function(){return(_ts_query_matches_wasm=Module._ts_query_matches_wasm=Module.asm.ts_query_matches_wasm).apply(null,arguments)},_ts_query_captures_wasm=Module._ts_query_captures_wasm=function(){return(_ts_query_captures_wasm=Module._ts_query_captures_wasm=Module.asm.ts_query_captures_wasm).apply(null,arguments)},___cxa_atexit=Module.___cxa_atexit=function(){return(___cxa_atexit=Module.___cxa_atexit=Module.asm.__cxa_atexit).apply(null,arguments)},_iswdigit=Module._iswdigit=function(){return(_iswdigit=Module._iswdigit=Module.asm.iswdigit).apply(null,arguments)},_iswalpha=Module._iswalpha=function(){return(_iswalpha=Module._iswalpha=Module.asm.iswalpha).apply(null,arguments)},_iswlower=Module._iswlower=function(){return(_iswlower=Module._iswlower=Module.asm.iswlower).apply(null,arguments)},_memchr=Module._memchr=function(){return(_memchr=Module._memchr=Module.asm.memchr).apply(null,arguments)},_strlen=Module._strlen=function(){return(_strlen=Module._strlen=Module.asm.strlen).apply(null,arguments)},_towupper=Module._towupper=function(){return(_towupper=Module._towupper=Module.asm.towupper).apply(null,arguments)},_setThrew=Module._setThrew=function(){return(_setThrew=Module._setThrew=Module.asm.setThrew).apply(null,arguments)},stackSave=Module.stackSave=function(){return(stackSave=Module.stackSave=Module.asm.stackSave).apply(null,arguments)},stackRestore=Module.stackRestore=function(){return(stackRestore=Module.stackRestore=Module.asm.stackRestore).apply(null,arguments)},stackAlloc=Module.stackAlloc=function(){return(stackAlloc=Module.stackAlloc=Module.asm.stackAlloc).apply(null,arguments)},__Znwm=Module.__Znwm=function(){return(__Znwm=Module.__Znwm=Module.asm._Znwm).apply(null,arguments)},__ZdlPv=Module.__ZdlPv=function(){return(__ZdlPv=Module.__ZdlPv=Module.asm._ZdlPv).apply(null,arguments)},__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev=Module.__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev=function(){return(__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev=Module.__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev=Module.asm._ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev).apply(null,arguments)},__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm=Module.__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm=function(){return(__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm=Module.__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm=Module.asm._ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm).apply(null,arguments)},__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm=Module.__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm=function(){return(__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm=Module.__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm=Module.asm._ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm).apply(null,arguments)},__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm=Module.__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm=function(){return(__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm=Module.__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm=Module.asm._ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm).apply(null,arguments)},__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4copyEPcmm=Module.__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4copyEPcmm=function(){return(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4copyEPcmm=Module.__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4copyEPcmm=Module.asm._ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4copyEPcmm).apply(null,arguments)},__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc=Module.__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc=function(){return(__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc=Module.__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc=Module.asm._ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc).apply(null,arguments)},__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev=Module.__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev=function(){return(__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev=Module.__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev=Module.asm._ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev).apply(null,arguments)},__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw=Module.__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw=function(){return(__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw=Module.__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw=Module.asm._ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw).apply(null,arguments)},__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEmw=Module.__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEmw=function(){return(__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEmw=Module.__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEmw=Module.asm._ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEmw).apply(null,arguments)},dynCall_jiji=Module.dynCall_jiji=function(){return(dynCall_jiji=Module.dynCall_jiji=Module.asm.dynCall_jiji).apply(null,arguments)},_orig$ts_parser_timeout_micros=Module._orig$ts_parser_timeout_micros=function(){return(_orig$ts_parser_timeout_micros=Module._orig$ts_parser_timeout_micros=Module.asm.orig$ts_parser_timeout_micros).apply(null,arguments)},_orig$ts_parser_set_timeout_micros=Module._orig$ts_parser_set_timeout_micros=function(){return(_orig$ts_parser_set_timeout_micros=Module._orig$ts_parser_set_timeout_micros=Module.asm.orig$ts_parser_set_timeout_micros).apply(null,arguments)},calledRun;function callMain(e){var t=Module._main;if(t){(e=e||[]).unshift(thisProgram);var r=e.length,_=stackAlloc(4*(r+1)),n=_>>2;e.forEach((e=>{HEAP32[n++]=allocateUTF8OnStack(e)})),HEAP32[n]=0;try{var s=t(r,_);return exitJS(s,!0),s}catch(e){return handleException(e)}}}Module.AsciiToString=AsciiToString,Module.stringToUTF16=stringToUTF16,dependenciesFulfilled=function e(){calledRun||run(),calledRun||(dependenciesFulfilled=e)};var dylibsLoaded=!1;function run(e){function t(){calledRun||(calledRun=!0,Module.calledRun=!0,ABORT||(initRuntime(),preMain(),Module.onRuntimeInitialized&&Module.onRuntimeInitialized(),shouldRunNow&&callMain(e),postRun()))}e=e||arguments_,runDependencies>0||!dylibsLoaded&&(preloadDylibs(),dylibsLoaded=!0,runDependencies>0)||(preRun(),runDependencies>0||(Module.setStatus?(Module.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){Module.setStatus(\"\")}),1),t()}),1)):t()))}if(Module.preInit)for(\"function\"==typeof Module.preInit&&(Module.preInit=[Module.preInit]);Module.preInit.length>0;)Module.preInit.pop()();var shouldRunNow=!0;Module.noInitialRun&&(shouldRunNow=!1),run();const C=Module,INTERNAL={},SIZE_OF_INT=4,SIZE_OF_NODE=5*SIZE_OF_INT,SIZE_OF_POINT=2*SIZE_OF_INT,SIZE_OF_RANGE=2*SIZE_OF_INT+2*SIZE_OF_POINT,ZERO_POINT={row:0,column:0},QUERY_WORD_REGEX=/[\\w-.]*/g,PREDICATE_STEP_TYPE_CAPTURE=1,PREDICATE_STEP_TYPE_STRING=2,LANGUAGE_FUNCTION_REGEX=/^_?tree_sitter_\\w+/;var VERSION,MIN_COMPATIBLE_VERSION,TRANSFER_BUFFER,currentParseCallback,currentLogCallback;class ParserImpl{static init(){TRANSFER_BUFFER=C._ts_init(),VERSION=getValue(TRANSFER_BUFFER,\"i32\"),MIN_COMPATIBLE_VERSION=getValue(TRANSFER_BUFFER+SIZE_OF_INT,\"i32\")}initialize(){C._ts_parser_new_wasm(),this[0]=getValue(TRANSFER_BUFFER,\"i32\"),this[1]=getValue(TRANSFER_BUFFER+SIZE_OF_INT,\"i32\")}delete(){C._ts_parser_delete(this[0]),C._free(this[1]),this[0]=0,this[1]=0}setLanguage(e){let t;if(e){if(e.constructor!==Language)throw new Error(\"Argument must be a Language\");{t=e[0];const r=C._ts_language_version(t);if(r<MIN_COMPATIBLE_VERSION||VERSION<r)throw new Error(`Incompatible language version ${r}. Compatibility range ${MIN_COMPATIBLE_VERSION} through ${VERSION}.`)}}else t=0,e=null;return this.language=e,C._ts_parser_set_language(this[0],t),this}getLanguage(){return this.language}parse(e,t,r){if(\"string\"==typeof e)currentParseCallback=(t,r,_)=>e.slice(t,_);else{if(\"function\"!=typeof e)throw new Error(\"Argument must be a string or a function\");currentParseCallback=e}this.logCallback?(currentLogCallback=this.logCallback,C._ts_parser_enable_logger_wasm(this[0],1)):(currentLogCallback=null,C._ts_parser_enable_logger_wasm(this[0],0));let _=0,n=0;if(r&&r.includedRanges){_=r.includedRanges.length,n=C._calloc(_,SIZE_OF_RANGE);let e=n;for(let t=0;t<_;t++)marshalRange(e,r.includedRanges[t]),e+=SIZE_OF_RANGE}const s=C._ts_parser_parse_wasm(this[0],this[1],t?t[0]:0,n,_);if(!s)throw currentParseCallback=null,currentLogCallback=null,new Error(\"Parsing failed\");const a=new Tree(INTERNAL,s,this.language,currentParseCallback);return currentParseCallback=null,currentLogCallback=null,a}reset(){C._ts_parser_reset(this[0])}setTimeoutMicros(e){C._ts_parser_set_timeout_micros(this[0],e)}getTimeoutMicros(){return C._ts_parser_timeout_micros(this[0])}setLogger(e){if(e){if(\"function\"!=typeof e)throw new Error(\"Logger callback must be a function\")}else e=null;return this.logCallback=e,this}getLogger(){return this.logCallback}}class Tree{constructor(e,t,r,_){assertInternal(e),this[0]=t,this.language=r,this.textCallback=_}copy(){const e=C._ts_tree_copy(this[0]);return new Tree(INTERNAL,e,this.language,this.textCallback)}delete(){C._ts_tree_delete(this[0]),this[0]=0}edit(e){marshalEdit(e),C._ts_tree_edit_wasm(this[0])}get rootNode(){return C._ts_tree_root_node_wasm(this[0]),unmarshalNode(this)}getLanguage(){return this.language}walk(){return this.rootNode.walk()}getChangedRanges(e){if(e.constructor!==Tree)throw new TypeError(\"Argument must be a Tree\");C._ts_tree_get_changed_ranges_wasm(this[0],e[0]);const t=getValue(TRANSFER_BUFFER,\"i32\"),r=getValue(TRANSFER_BUFFER+SIZE_OF_INT,\"i32\"),_=new Array(t);if(t>0){let e=r;for(let r=0;r<t;r++)_[r]=unmarshalRange(e),e+=SIZE_OF_RANGE;C._free(r)}return _}}class Node{constructor(e,t){assertInternal(e),this.tree=t}get typeId(){return marshalNode(this),C._ts_node_symbol_wasm(this.tree[0])}get type(){return this.tree.language.types[this.typeId]||\"ERROR\"}get endPosition(){return marshalNode(this),C._ts_node_end_point_wasm(this.tree[0]),unmarshalPoint(TRANSFER_BUFFER)}get endIndex(){return marshalNode(this),C._ts_node_end_index_wasm(this.tree[0])}get text(){return getText(this.tree,this.startIndex,this.endIndex)}isNamed(){return marshalNode(this),1===C._ts_node_is_named_wasm(this.tree[0])}hasError(){return marshalNode(this),1===C._ts_node_has_error_wasm(this.tree[0])}hasChanges(){return marshalNode(this),1===C._ts_node_has_changes_wasm(this.tree[0])}isMissing(){return marshalNode(this),1===C._ts_node_is_missing_wasm(this.tree[0])}equals(e){return this.id===e.id}child(e){return marshalNode(this),C._ts_node_child_wasm(this.tree[0],e),unmarshalNode(this.tree)}namedChild(e){return marshalNode(this),C._ts_node_named_child_wasm(this.tree[0],e),unmarshalNode(this.tree)}childForFieldId(e){return marshalNode(this),C._ts_node_child_by_field_id_wasm(this.tree[0],e),unmarshalNode(this.tree)}childForFieldName(e){const t=this.tree.language.fields.indexOf(e);if(-1!==t)return this.childForFieldId(t)}get childCount(){return marshalNode(this),C._ts_node_child_count_wasm(this.tree[0])}get namedChildCount(){return marshalNode(this),C._ts_node_named_child_count_wasm(this.tree[0])}get firstChild(){return this.child(0)}get firstNamedChild(){return this.namedChild(0)}get lastChild(){return this.child(this.childCount-1)}get lastNamedChild(){return this.namedChild(this.namedChildCount-1)}get children(){if(!this._children){marshalNode(this),C._ts_node_children_wasm(this.tree[0]);const e=getValue(TRANSFER_BUFFER,\"i32\"),t=getValue(TRANSFER_BUFFER+SIZE_OF_INT,\"i32\");if(this._children=new Array(e),e>0){let r=t;for(let t=0;t<e;t++)this._children[t]=unmarshalNode(this.tree,r),r+=SIZE_OF_NODE;C._free(t)}}return this._children}get namedChildren(){if(!this._namedChildren){marshalNode(this),C._ts_node_named_children_wasm(this.tree[0]);const e=getValue(TRANSFER_BUFFER,\"i32\"),t=getValue(TRANSFER_BUFFER+SIZE_OF_INT,\"i32\");if(this._namedChildren=new Array(e),e>0){let r=t;for(let t=0;t<e;t++)this._namedChildren[t]=unmarshalNode(this.tree,r),r+=SIZE_OF_NODE;C._free(t)}}return this._namedChildren}descendantsOfType(e,t,r){Array.isArray(e)||(e=[e]),t||(t=ZERO_POINT),r||(r=ZERO_POINT);const _=[],n=this.tree.language.types;for(let t=0,r=n.length;t<r;t++)e.includes(n[t])&&_.push(t);const s=C._malloc(SIZE_OF_INT*_.length);for(let e=0,t=_.length;e<t;e++)setValue(s+e*SIZE_OF_INT,_[e],\"i32\");marshalNode(this),C._ts_node_descendants_of_type_wasm(this.tree[0],s,_.length,t.row,t.column,r.row,r.column);const a=getValue(TRANSFER_BUFFER,\"i32\"),o=getValue(TRANSFER_BUFFER+SIZE_OF_INT,\"i32\"),i=new Array(a);if(a>0){let e=o;for(let t=0;t<a;t++)i[t]=unmarshalNode(this.tree,e),e+=SIZE_OF_NODE}return C._free(o),C._free(s),i}get nextSibling(){return marshalNode(this),C._ts_node_next_sibling_wasm(this.tree[0]),unmarshalNode(this.tree)}get previousSibling(){return marshalNode(this),C._ts_node_prev_sibling_wasm(this.tree[0]),unmarshalNode(this.tree)}get nextNamedSibling(){return marshalNode(this),C._ts_node_next_named_sibling_wasm(this.tree[0]),unmarshalNode(this.tree)}get previousNamedSibling(){return marshalNode(this),C._ts_node_prev_named_sibling_wasm(this.tree[0]),unmarshalNode(this.tree)}get parent(){return marshalNode(this),C._ts_node_parent_wasm(this.tree[0]),unmarshalNode(this.tree)}descendantForIndex(e,t=e){if(\"number\"!=typeof e||\"number\"!=typeof t)throw new Error(\"Arguments must be numbers\");marshalNode(this);let r=TRANSFER_BUFFER+SIZE_OF_NODE;return setValue(r,e,\"i32\"),setValue(r+SIZE_OF_INT,t,\"i32\"),C._ts_node_descendant_for_index_wasm(this.tree[0]),unmarshalNode(this.tree)}namedDescendantForIndex(e,t=e){if(\"number\"!=typeof e||\"number\"!=typeof t)throw new Error(\"Arguments must be numbers\");marshalNode(this);let r=TRANSFER_BUFFER+SIZE_OF_NODE;return setValue(r,e,\"i32\"),setValue(r+SIZE_OF_INT,t,\"i32\"),C._ts_node_named_descendant_for_index_wasm(this.tree[0]),unmarshalNode(this.tree)}descendantForPosition(e,t=e){if(!isPoint(e)||!isPoint(t))throw new Error(\"Arguments must be {row, column} objects\");marshalNode(this);let r=TRANSFER_BUFFER+SIZE_OF_NODE;return marshalPoint(r,e),marshalPoint(r+SIZE_OF_POINT,t),C._ts_node_descendant_for_position_wasm(this.tree[0]),unmarshalNode(this.tree)}namedDescendantForPosition(e,t=e){if(!isPoint(e)||!isPoint(t))throw new Error(\"Arguments must be {row, column} objects\");marshalNode(this);let r=TRANSFER_BUFFER+SIZE_OF_NODE;return marshalPoint(r,e),marshalPoint(r+SIZE_OF_POINT,t),C._ts_node_named_descendant_for_position_wasm(this.tree[0]),unmarshalNode(this.tree)}walk(){return marshalNode(this),C._ts_tree_cursor_new_wasm(this.tree[0]),new TreeCursor(INTERNAL,this.tree)}toString(){marshalNode(this);const e=C._ts_node_to_string_wasm(this.tree[0]),t=AsciiToString(e);return C._free(e),t}}class TreeCursor{constructor(e,t){assertInternal(e),this.tree=t,unmarshalTreeCursor(this)}delete(){marshalTreeCursor(this),C._ts_tree_cursor_delete_wasm(this.tree[0]),this[0]=this[1]=this[2]=0}reset(e){marshalNode(e),marshalTreeCursor(this,TRANSFER_BUFFER+SIZE_OF_NODE),C._ts_tree_cursor_reset_wasm(this.tree[0]),unmarshalTreeCursor(this)}get nodeType(){return this.tree.language.types[this.nodeTypeId]||\"ERROR\"}get nodeTypeId(){return marshalTreeCursor(this),C._ts_tree_cursor_current_node_type_id_wasm(this.tree[0])}get nodeId(){return marshalTreeCursor(this),C._ts_tree_cursor_current_node_id_wasm(this.tree[0])}get nodeIsNamed(){return marshalTreeCursor(this),1===C._ts_tree_cursor_current_node_is_named_wasm(this.tree[0])}get nodeIsMissing(){return marshalTreeCursor(this),1===C._ts_tree_cursor_current_node_is_missing_wasm(this.tree[0])}get nodeText(){marshalTreeCursor(this);const e=C._ts_tree_cursor_start_index_wasm(this.tree[0]),t=C._ts_tree_cursor_end_index_wasm(this.tree[0]);return getText(this.tree,e,t)}get startPosition(){return marshalTreeCursor(this),C._ts_tree_cursor_start_position_wasm(this.tree[0]),unmarshalPoint(TRANSFER_BUFFER)}get endPosition(){return marshalTreeCursor(this),C._ts_tree_cursor_end_position_wasm(this.tree[0]),unmarshalPoint(TRANSFER_BUFFER)}get startIndex(){return marshalTreeCursor(this),C._ts_tree_cursor_start_index_wasm(this.tree[0])}get endIndex(){return marshalTreeCursor(this),C._ts_tree_cursor_end_index_wasm(this.tree[0])}currentNode(){return marshalTreeCursor(this),C._ts_tree_cursor_current_node_wasm(this.tree[0]),unmarshalNode(this.tree)}currentFieldId(){return marshalTreeCursor(this),C._ts_tree_cursor_current_field_id_wasm(this.tree[0])}currentFieldName(){return this.tree.language.fields[this.currentFieldId()]}gotoFirstChild(){marshalTreeCursor(this);const e=C._ts_tree_cursor_goto_first_child_wasm(this.tree[0]);return unmarshalTreeCursor(this),1===e}gotoNextSibling(){marshalTreeCursor(this);const e=C._ts_tree_cursor_goto_next_sibling_wasm(this.tree[0]);return unmarshalTreeCursor(this),1===e}gotoParent(){marshalTreeCursor(this);const e=C._ts_tree_cursor_goto_parent_wasm(this.tree[0]);return unmarshalTreeCursor(this),1===e}}class Language{constructor(e,t){assertInternal(e),this[0]=t,this.types=new Array(C._ts_language_symbol_count(this[0]));for(let e=0,t=this.types.length;e<t;e++)C._ts_language_symbol_type(this[0],e)<2&&(this.types[e]=UTF8ToString(C._ts_language_symbol_name(this[0],e)));this.fields=new Array(C._ts_language_field_count(this[0])+1);for(let e=0,t=this.fields.length;e<t;e++){const t=C._ts_language_field_name_for_id(this[0],e);this.fields[e]=0!==t?UTF8ToString(t):null}}get version(){return C._ts_language_version(this[0])}get fieldCount(){return this.fields.length-1}fieldIdForName(e){const t=this.fields.indexOf(e);return-1!==t?t:null}fieldNameForId(e){return this.fields[e]||null}idForNodeType(e,t){const r=lengthBytesUTF8(e),_=C._malloc(r+1);stringToUTF8(e,_,r+1);const n=C._ts_language_symbol_for_name(this[0],_,r,t);return C._free(_),n||null}get nodeTypeCount(){return C._ts_language_symbol_count(this[0])}nodeTypeForId(e){const t=C._ts_language_symbol_name(this[0],e);return t?UTF8ToString(t):null}nodeTypeIsNamed(e){return!!C._ts_language_type_is_named_wasm(this[0],e)}nodeTypeIsVisible(e){return!!C._ts_language_type_is_visible_wasm(this[0],e)}query(e){const t=lengthBytesUTF8(e),r=C._malloc(t+1);stringToUTF8(e,r,t+1);const _=C._ts_query_new(this[0],r,t,TRANSFER_BUFFER,TRANSFER_BUFFER+SIZE_OF_INT);if(!_){const t=getValue(TRANSFER_BUFFER+SIZE_OF_INT,\"i32\"),_=UTF8ToString(r,getValue(TRANSFER_BUFFER,\"i32\")).length,n=e.substr(_,100).split(\"\\n\")[0];let s,a=n.match(QUERY_WORD_REGEX)[0];switch(t){case 2:s=new RangeError(`Bad node name '${a}'`);break;case 3:s=new RangeError(`Bad field name '${a}'`);break;case 4:s=new RangeError(`Bad capture name @${a}`);break;case 5:s=new TypeError(`Bad pattern structure at offset ${_}: '${n}'...`),a=\"\";break;default:s=new SyntaxError(`Bad syntax at offset ${_}: '${n}'...`),a=\"\"}throw s.index=_,s.length=a.length,C._free(r),s}const n=C._ts_query_string_count(_),s=C._ts_query_capture_count(_),a=C._ts_query_pattern_count(_),o=new Array(s),i=new Array(n);for(let e=0;e<s;e++){const t=C._ts_query_capture_name_for_id(_,e,TRANSFER_BUFFER),r=getValue(TRANSFER_BUFFER,\"i32\");o[e]=UTF8ToString(t,r)}for(let e=0;e<n;e++){const t=C._ts_query_string_value_for_id(_,e,TRANSFER_BUFFER),r=getValue(TRANSFER_BUFFER,\"i32\");i[e]=UTF8ToString(t,r)}const l=new Array(a),u=new Array(a),d=new Array(a),c=new Array(a),m=new Array(a);for(let e=0;e<a;e++){const t=C._ts_query_predicates_for_pattern(_,e,TRANSFER_BUFFER),r=getValue(TRANSFER_BUFFER,\"i32\");c[e]=[],m[e]=[];const n=[];let s=t;for(let t=0;t<r;t++){const t=getValue(s,\"i32\");s+=SIZE_OF_INT;const r=getValue(s,\"i32\");if(s+=SIZE_OF_INT,t===PREDICATE_STEP_TYPE_CAPTURE)n.push({type:\"capture\",name:o[r]});else if(t===PREDICATE_STEP_TYPE_STRING)n.push({type:\"string\",value:i[r]});else if(n.length>0){if(\"string\"!==n[0].type)throw new Error(\"Predicates must begin with a literal value\");const t=n[0].value;let r=!0;switch(t){case\"not-eq?\":r=!1;case\"eq?\":if(3!==n.length)throw new Error(\"Wrong number of arguments to `#eq?` predicate. Expected 2, got \"+(n.length-1));if(\"capture\"!==n[1].type)throw new Error(`First argument of \\`#eq?\\` predicate must be a capture. Got \"${n[1].value}\"`);if(\"capture\"===n[2].type){const t=n[1].name,_=n[2].name;m[e].push((function(e){let n,s;for(const r of e)r.name===t&&(n=r.node),r.name===_&&(s=r.node);return void 0===n||void 0===s||n.text===s.text===r}))}else{const t=n[1].name,_=n[2].value;m[e].push((function(e){for(const n of e)if(n.name===t)return n.node.text===_===r;return!0}))}break;case\"not-match?\":r=!1;case\"match?\":if(3!==n.length)throw new Error(`Wrong number of arguments to \\`#match?\\` predicate. Expected 2, got ${n.length-1}.`);if(\"capture\"!==n[1].type)throw new Error(`First argument of \\`#match?\\` predicate must be a capture. Got \"${n[1].value}\".`);if(\"string\"!==n[2].type)throw new Error(`Second argument of \\`#match?\\` predicate must be a string. Got @${n[2].value}.`);const _=n[1].name,s=new RegExp(n[2].value);m[e].push((function(e){for(const t of e)if(t.name===_)return s.test(t.node.text)===r;return!0}));break;case\"set!\":if(n.length<2||n.length>3)throw new Error(`Wrong number of arguments to \\`#set!\\` predicate. Expected 1 or 2. Got ${n.length-1}.`);if(n.some((e=>\"string\"!==e.type)))throw new Error('Arguments to `#set!` predicate must be a strings.\".');l[e]||(l[e]={}),l[e][n[1].value]=n[2]?n[2].value:null;break;case\"is?\":case\"is-not?\":if(n.length<2||n.length>3)throw new Error(`Wrong number of arguments to \\`#${t}\\` predicate. Expected 1 or 2. Got ${n.length-1}.`);if(n.some((e=>\"string\"!==e.type)))throw new Error(`Arguments to \\`#${t}\\` predicate must be a strings.\".`);const a=\"is?\"===t?u:d;a[e]||(a[e]={}),a[e][n[1].value]=n[2]?n[2].value:null;break;default:c[e].push({operator:t,operands:n.slice(1)})}n.length=0}}Object.freeze(l[e]),Object.freeze(u[e]),Object.freeze(d[e])}return C._free(r),new Query(INTERNAL,_,o,m,c,Object.freeze(l),Object.freeze(u),Object.freeze(d))}static load(e){let t;if(e instanceof Uint8Array)t=Promise.resolve(e);else{const r=e;if(\"undefined\"!=typeof process&&process.versions&&process.versions.node){const e=require(\"fs\");t=Promise.resolve(e.readFileSync(r))}else t=fetch(r).then((e=>e.arrayBuffer().then((t=>{if(e.ok)return new Uint8Array(t);{const r=new TextDecoder(\"utf-8\").decode(t);throw new Error(`Language.load failed with status ${e.status}.\\n\\n${r}`)}}))))}const r=\"function\"==typeof loadSideModule?loadSideModule:loadWebAssemblyModule;return t.then((e=>r(e,{loadAsync:!0}))).then((e=>{const t=Object.keys(e),r=t.find((e=>LANGUAGE_FUNCTION_REGEX.test(e)&&!e.includes(\"external_scanner_\")));r||console.log(`Couldn't find language function in WASM file. Symbols:\\n${JSON.stringify(t,null,2)}`);const _=e[r]();return new Language(INTERNAL,_)}))}}class Query{constructor(e,t,r,_,n,s,a,o){assertInternal(e),this[0]=t,this.captureNames=r,this.textPredicates=_,this.predicates=n,this.setProperties=s,this.assertedProperties=a,this.refutedProperties=o,this.exceededMatchLimit=!1}delete(){C._ts_query_delete(this[0]),this[0]=0}matches(e,t,r,_){t||(t=ZERO_POINT),r||(r=ZERO_POINT),_||(_={});let n=_.matchLimit;if(void 0===n)n=0;else if(\"number\"!=typeof n)throw new Error(\"Arguments must be numbers\");marshalNode(e),C._ts_query_matches_wasm(this[0],e.tree[0],t.row,t.column,r.row,r.column,n);const s=getValue(TRANSFER_BUFFER,\"i32\"),a=getValue(TRANSFER_BUFFER+SIZE_OF_INT,\"i32\"),o=getValue(TRANSFER_BUFFER+2*SIZE_OF_INT,\"i32\"),i=new Array(s);this.exceededMatchLimit=!!o;let l=0,u=a;for(let t=0;t<s;t++){const r=getValue(u,\"i32\");u+=SIZE_OF_INT;const _=getValue(u,\"i32\");u+=SIZE_OF_INT;const n=new Array(_);if(u=unmarshalCaptures(this,e.tree,u,n),this.textPredicates[r].every((e=>e(n)))){i[l++]={pattern:r,captures:n};const e=this.setProperties[r];e&&(i[t].setProperties=e);const _=this.assertedProperties[r];_&&(i[t].assertedProperties=_);const s=this.refutedProperties[r];s&&(i[t].refutedProperties=s)}}return i.length=l,C._free(a),i}captures(e,t,r,_){t||(t=ZERO_POINT),r||(r=ZERO_POINT),_||(_={});let n=_.matchLimit;if(void 0===n)n=0;else if(\"number\"!=typeof n)throw new Error(\"Arguments must be numbers\");marshalNode(e),C._ts_query_captures_wasm(this[0],e.tree[0],t.row,t.column,r.row,r.column,n);const s=getValue(TRANSFER_BUFFER,\"i32\"),a=getValue(TRANSFER_BUFFER+SIZE_OF_INT,\"i32\"),o=getValue(TRANSFER_BUFFER+2*SIZE_OF_INT,\"i32\"),i=[];this.exceededMatchLimit=!!o;const l=[];let u=a;for(let t=0;t<s;t++){const t=getValue(u,\"i32\");u+=SIZE_OF_INT;const r=getValue(u,\"i32\");u+=SIZE_OF_INT;const _=getValue(u,\"i32\");if(u+=SIZE_OF_INT,l.length=r,u=unmarshalCaptures(this,e.tree,u,l),this.textPredicates[t].every((e=>e(l)))){const e=l[_],r=this.setProperties[t];r&&(e.setProperties=r);const n=this.assertedProperties[t];n&&(e.assertedProperties=n);const s=this.refutedProperties[t];s&&(e.refutedProperties=s),i.push(e)}}return C._free(a),i}predicatesForPattern(e){return this.predicates[e]}didExceedMatchLimit(){return this.exceededMatchLimit}}function getText(e,t,r){const _=r-t;let n=e.textCallback(t,null,r);for(t+=n.length;t<r;){const _=e.textCallback(t,null,r);if(!(_&&_.length>0))break;t+=_.length,n+=_}return t>r&&(n=n.slice(0,_)),n}function unmarshalCaptures(e,t,r,_){for(let n=0,s=_.length;n<s;n++){const s=getValue(r,\"i32\"),a=unmarshalNode(t,r+=SIZE_OF_INT);r+=SIZE_OF_NODE,_[n]={name:e.captureNames[s],node:a}}return r}function assertInternal(e){if(e!==INTERNAL)throw new Error(\"Illegal constructor\")}function isPoint(e){return e&&\"number\"==typeof e.row&&\"number\"==typeof e.column}function marshalNode(e){let t=TRANSFER_BUFFER;setValue(t,e.id,\"i32\"),t+=SIZE_OF_INT,setValue(t,e.startIndex,\"i32\"),t+=SIZE_OF_INT,setValue(t,e.startPosition.row,\"i32\"),t+=SIZE_OF_INT,setValue(t,e.startPosition.column,\"i32\"),t+=SIZE_OF_INT,setValue(t,e[0],\"i32\")}function unmarshalNode(e,t=TRANSFER_BUFFER){const r=getValue(t,\"i32\");if(0===r)return null;const _=getValue(t+=SIZE_OF_INT,\"i32\"),n=getValue(t+=SIZE_OF_INT,\"i32\"),s=getValue(t+=SIZE_OF_INT,\"i32\"),a=getValue(t+=SIZE_OF_INT,\"i32\"),o=new Node(INTERNAL,e);return o.id=r,o.startIndex=_,o.startPosition={row:n,column:s},o[0]=a,o}function marshalTreeCursor(e,t=TRANSFER_BUFFER){setValue(t+0*SIZE_OF_INT,e[0],\"i32\"),setValue(t+1*SIZE_OF_INT,e[1],\"i32\"),setValue(t+2*SIZE_OF_INT,e[2],\"i32\")}function unmarshalTreeCursor(e){e[0]=getValue(TRANSFER_BUFFER+0*SIZE_OF_INT,\"i32\"),e[1]=getValue(TRANSFER_BUFFER+1*SIZE_OF_INT,\"i32\"),e[2]=getValue(TRANSFER_BUFFER+2*SIZE_OF_INT,\"i32\")}function marshalPoint(e,t){setValue(e,t.row,\"i32\"),setValue(e+SIZE_OF_INT,t.column,\"i32\")}function unmarshalPoint(e){return{row:getValue(e,\"i32\"),column:getValue(e+SIZE_OF_INT,\"i32\")}}function marshalRange(e,t){marshalPoint(e,t.startPosition),marshalPoint(e+=SIZE_OF_POINT,t.endPosition),setValue(e+=SIZE_OF_POINT,t.startIndex,\"i32\"),setValue(e+=SIZE_OF_INT,t.endIndex,\"i32\"),e+=SIZE_OF_INT}function unmarshalRange(e){const t={};return t.startPosition=unmarshalPoint(e),e+=SIZE_OF_POINT,t.endPosition=unmarshalPoint(e),e+=SIZE_OF_POINT,t.startIndex=getValue(e,\"i32\"),e+=SIZE_OF_INT,t.endIndex=getValue(e,\"i32\"),t}function marshalEdit(e){let t=TRANSFER_BUFFER;marshalPoint(t,e.startPosition),t+=SIZE_OF_POINT,marshalPoint(t,e.oldEndPosition),t+=SIZE_OF_POINT,marshalPoint(t,e.newEndPosition),t+=SIZE_OF_POINT,setValue(t,e.startIndex,\"i32\"),t+=SIZE_OF_INT,setValue(t,e.oldEndIndex,\"i32\"),t+=SIZE_OF_INT,setValue(t,e.newEndIndex,\"i32\"),t+=SIZE_OF_INT}for(const e of Object.getOwnPropertyNames(ParserImpl.prototype))Object.defineProperty(Parser.prototype,e,{value:ParserImpl.prototype[e],enumerable:!1,writable:!1});Parser.Language=Language,Module.onRuntimeInitialized=()=>{ParserImpl.init(),resolveInitPromise()}})))}}return Parser}();\"object\"==typeof exports&&(module.exports=TreeSitter);\n",
    "module.exports = require(\"assert\");",
    "module.exports = require(\"fs\");",
    "module.exports = require(\"path\");",
    "module.exports = require(\"util\");",
    "module.exports = require(\"worker_threads\");",
    "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n",
    "const promptlib = require('./lib');\nconst {parentPort} = require('worker_threads');\nconst {defaultFileSystem} = require('./fileSystem');\n\nparentPort.on('message', async ({id, fn, args}) => {\n    try {\n        if (fn === 'getPrompt') {\n            let res = await promptlib.getPrompt(defaultFileSystem, ...args);\n            parentPort.postMessage({id, res});\n        } else {\n            let res = await promptlib[fn](...args);\n            parentPort.postMessage({id, res});\n        }\n    } catch (err) {\n        if (!err instanceof Error) {\n            // Emscripten throws a non-Error object to exit the process.  There's not much we can do with non-Error\n            // objects at any rate at they lack a stack trace.\n            throw err;\n        }\n        parentPort.postMessage({id, err});\n    }\n});\n"
  ],
  "names": [
    "Object",
    "defineProperty",
    "exports",
    "value",
    "convertChangesToDMP",
    "changes",
    "change",
    "operation",
    "ret",
    "i",
    "length",
    "added",
    "removed",
    "push",
    "convertChangesToXML",
    "s",
    "n",
    "replace",
    "join",
    "obj",
    "diffArrays",
    "oldArr",
    "newArr",
    "callback",
    "arrayDiff",
    "diff",
    "__esModule",
    "tokenize",
    "slice",
    "removeEmpty",
    "Diff",
    "buildValues",
    "components",
    "newString",
    "oldString",
    "useLongestToken",
    "componentPos",
    "componentLen",
    "newPos",
    "oldPos",
    "component",
    "count",
    "tmp",
    "map",
    "oldValue",
    "lastComponent",
    "equals",
    "pop",
    "prototype",
    "options",
    "arguments",
    "undefined",
    "this",
    "self",
    "done",
    "setTimeout",
    "castInput",
    "newLen",
    "oldLen",
    "editLength",
    "maxEditLength",
    "Math",
    "min",
    "bestPath",
    "extractCommon",
    "execEditLength",
    "diagonalPath",
    "basePath",
    "addPath",
    "removePath",
    "_oldPos",
    "canAdd",
    "canRemove",
    "path",
    "pushComponent",
    "exec",
    "last",
    "commonCount",
    "left",
    "right",
    "comparator",
    "ignoreCase",
    "toLowerCase",
    "array",
    "split",
    "chars",
    "diffChars",
    "oldStr",
    "newStr",
    "characterDiff",
    "diffCss",
    "cssDiff",
    "diffJson",
    "oldObj",
    "newObj",
    "jsonDiff",
    "canonicalize",
    "_base",
    "_line",
    "_typeof",
    "Symbol",
    "iterator",
    "constructor",
    "objectPrototypeToString",
    "toString",
    "stack",
    "replacementStack",
    "replacer",
    "key",
    "canonicalizedObj",
    "call",
    "Array",
    "toJSON",
    "_key",
    "sortedKeys",
    "hasOwnProperty",
    "sort",
    "lineDiff",
    "_this$options",
    "undefinedReplacement",
    "_this$options$stringi",
    "stringifyReplacer",
    "k",
    "v",
    "JSON",
    "stringify",
    "diffLines",
    "diffTrimmedLines",
    "_params",
    "generateOptions",
    "ignoreWhitespace",
    "retLines",
    "linesAndNewlines",
    "line",
    "newlineIsToken",
    "trim",
    "diffSentences",
    "sentenceDiff",
    "diffWords",
    "wordDiff",
    "diffWordsWithSpace",
    "extendedWordChars",
    "reWhitespace",
    "test",
    "tokens",
    "splice",
    "enumerable",
    "get",
    "_character",
    "_word",
    "_sentence",
    "_css",
    "_json",
    "_array",
    "_apply",
    "applyPatch",
    "applyPatches",
    "_parse",
    "parsePatch",
    "_merge",
    "merge",
    "_create",
    "structuredPatch",
    "createTwoFilesPatch",
    "createPatch",
    "_dmp",
    "_xml",
    "uniDiff",
    "currentIndex",
    "processIndex",
    "index",
    "complete",
    "loadFile",
    "err",
    "data",
    "updatedContent",
    "patched",
    "_distanceIterator",
    "source",
    "isArray",
    "Error",
    "removeEOFNL",
    "addEOFNL",
    "lines",
    "delimiters",
    "match",
    "hunks",
    "compareLine",
    "lineNumber",
    "patchContent",
    "errorCount",
    "fuzzFactor",
    "minLine",
    "offset",
    "hunkFits",
    "hunk",
    "toPos",
    "j",
    "content",
    "substr",
    "maxLine",
    "oldLines",
    "localOffset",
    "oldStart",
    "diffOffset",
    "_i",
    "_hunk",
    "_toPos",
    "newLines",
    "delimiter",
    "linedelimiters",
    "previousOperation",
    "_k",
    "formatPatch",
    "fileName",
    "oldHeader",
    "newHeader",
    "_toConsumableArray",
    "arr",
    "_arrayLikeToArray",
    "_arrayWithoutHoles",
    "iter",
    "from",
    "_iterableToArray",
    "o",
    "minLen",
    "name",
    "_unsupportedIterableToArray",
    "TypeError",
    "_nonIterableSpread",
    "len",
    "arr2",
    "oldFileName",
    "newFileName",
    "context",
    "oldRangeStart",
    "newRangeStart",
    "curRange",
    "oldLine",
    "newLine",
    "_loop",
    "current",
    "_curRange",
    "prev",
    "contextLines",
    "apply",
    "entry",
    "_curRange2",
    "_curRange3",
    "contextSize",
    "newStart",
    "oldEOFNewline",
    "newEOFNewline",
    "noNlBeforeAdds",
    "calcLineCount",
    "mine",
    "theirs",
    "base",
    "loadPatch",
    "fileNameChanged",
    "selectField",
    "mineIndex",
    "theirsIndex",
    "mineOffset",
    "theirsOffset",
    "mineCurrent",
    "Infinity",
    "theirsCurrent",
    "hunkBefore",
    "cloneHunk",
    "mergedHunk",
    "mergeLines",
    "_calcOldNewLineCount",
    "calcOldNewLineCount",
    "param",
    "patch",
    "conflict",
    "check",
    "mineLines",
    "theirOffset",
    "theirLines",
    "their",
    "insertLeading",
    "theirCurrent",
    "_hunk$lines",
    "collectChange",
    "_hunk$lines2",
    "removal",
    "mutualChange",
    "insertTrailing",
    "myChanges",
    "theirChanges",
    "allRemoves",
    "_hunk$lines3",
    "_hunk$lines4",
    "arrayStartsWith",
    "skipRemoveSuperset",
    "arrayEqual",
    "_hunk$lines5",
    "swap",
    "_hunk$lines6",
    "state",
    "matchChanges",
    "merged",
    "matchIndex",
    "contextChanges",
    "conflicted",
    "collectContext",
    "insert",
    "reduce",
    "removeChanges",
    "delta",
    "changeContent",
    "forEach",
    "myCount",
    "theirCount",
    "diffstr",
    "list",
    "parseIndex",
    "header",
    "parseFileHeader",
    "parseHunk",
    "strict",
    "fileHeader",
    "keyPrefix",
    "chunkHeaderIndex",
    "chunkHeader",
    "addCount",
    "removeCount",
    "indexOf",
    "start",
    "a",
    "b",
    "wantForward",
    "backwardExhausted",
    "forwardExhausted",
    "defaults",
    "ElidableText",
    "chunks",
    "chunk",
    "input",
    "LineWithValueAndCost",
    "copy",
    "adjustValue",
    "elidableTextForSourceCode",
    "adjust",
    "multiplier",
    "recost",
    "coster",
    "x",
    "getTokenizer",
    "tokenLength",
    "makePrompt",
    "maxTokens",
    "ellipsis",
    "indentEllipses",
    "strategy",
    "tokenizer",
    "cost",
    "infiniteWorth",
    "max",
    "infiniteIndentation",
    "text",
    "trimmedEllipsis",
    "totalCost",
    "sum",
    "defensiveCounter",
    "leastDesirable",
    "least",
    "mostRecentNonBlankLine",
    "reverse",
    "find",
    "indentation",
    "repeat",
    "newEllipis",
    "newTotalCost",
    "every",
    "oldContent",
    "newContent",
    "languageId",
    "changedLinesOld",
    "Set",
    "changedLinesNew",
    "add",
    "oldTree",
    "mapLabels",
    "flattenVirtual",
    "parseTree",
    "newTree",
    "visitTree",
    "node",
    "type",
    "has",
    "label",
    "fromTreeWithFocussedLines",
    "fromTreeWithValuedLines",
    "tree",
    "valuedLines",
    "foldTree",
    "acc",
    "deparseLine",
    "trimEnd",
    "DEFAULT_TREE_TRAVERSAL_CONFIG",
    "worthUp",
    "worthSibling",
    "worthDown",
    "config",
    "treeWithDistances",
    "isBlank",
    "maxChildLabel",
    "subs",
    "child",
    "values",
    "sub",
    "new_values",
    "pow",
    "abs",
    "nodeLabel",
    "contents",
    "focusOnLastLeaf",
    "focusOnFirstLine",
    "treeWithFocussedLines",
    "foundLastTrue",
    "subnode",
    "isLine",
    "_value",
    "_cost",
    "validate",
    "includes",
    "defaultFileSystem",
    "readFile",
    "uri",
    "async",
    "stat",
    "mtimeMs",
    "ctime",
    "ctimeMs",
    "mtime",
    "size",
    "isVirtual",
    "isTop",
    "sourceLine",
    "cut",
    "parse",
    "deparseTree",
    "accum",
    "str",
    "cutAt",
    "cutAtSet",
    "cuts",
    "curUndef",
    "visit",
    "describeTree",
    "indent",
    "ind",
    "children",
    "prefix",
    "String",
    "padStart",
    "labelString",
    "encodeTree",
    "subString",
    "firstLineOf",
    "firstLine",
    "lastLineOf",
    "lastLine",
    "registerLanguageSpecificParser",
    "processMarkdown",
    "processJava",
    "javaLabelRules",
    "buildLabelRules",
    "package",
    "import",
    "class",
    "interface",
    "javadoc",
    "comment_multi",
    "comment_single",
    "annotation",
    "opener",
    "closer",
    "originalTree",
    "labelLines",
    "combineClosersAndOpeners",
    "labelVirtualInherited",
    "visitor",
    "direction",
    "_visit",
    "subtree",
    "condition",
    "newSubs",
    "shouldContinue",
    "init",
    "accumulator",
    "skip",
    "rebuild",
    "filter",
    "rebuilt",
    "topNode",
    "MarkdownLabelRules",
    "heading",
    "subheading",
    "subsubheading",
    "headingLevel",
    "currentHierarchy",
    "oldTreeSubs",
    "level",
    "groupBlocks",
    "parseRaw",
    "rawLines",
    "indentations",
    "trimLeft",
    "parseNode",
    "nextLine",
    "parseSubs",
    "lineNode",
    "initialLine",
    "parentIndentation",
    "lastBlank",
    "blankNode",
    "parsedLine",
    "labelRules",
    "rule",
    "matches",
    "ruleMap",
    "keys",
    "returnTree",
    "rebuildTree",
    "findIndex",
    "lastNew",
    "directOlderSibling",
    "firstNonVirtual",
    "subsToKeep",
    "subsToWrap",
    "wrappedSubs",
    "virtualNode",
    "clearLabelsIf",
    "arg",
    "isDelimiter",
    "currentBlockIndentation",
    "nodesSinceLastFlush",
    "lastNodeWasDelimiter",
    "flushBlockIntoNewSubs",
    "final",
    "virtual",
    "subIsDelimiter",
    "genericLabelRules",
    "LANGUAGE_SPECIFIC_PARSERS",
    "language",
    "parser",
    "raw",
    "languageSpecificParser",
    "languageCommentMarkers",
    "abap",
    "end",
    "bat",
    "bibtex",
    "blade",
    "c",
    "clojure",
    "coffeescript",
    "cpp",
    "csharp",
    "css",
    "dart",
    "dockerfile",
    "elixir",
    "erb",
    "erlang",
    "fsharp",
    "go",
    "groovy",
    "haml",
    "handlebars",
    "haskell",
    "html",
    "ini",
    "java",
    "javascript",
    "javascriptreact",
    "jsonc",
    "jsx",
    "julia",
    "kotlin",
    "latex",
    "less",
    "lua",
    "makefile",
    "markdown",
    "perl",
    "php",
    "powershell",
    "pug",
    "python",
    "ql",
    "r",
    "razor",
    "ruby",
    "rust",
    "sass",
    "scala",
    "scss",
    "shellscript",
    "slim",
    "solidity",
    "sql",
    "stylus",
    "svelte",
    "swift",
    "terraform",
    "tex",
    "typescript",
    "typescriptreact",
    "vb",
    "verilog",
    "vue",
    "xml",
    "xsl",
    "yaml",
    "dontAddLanguageMarker",
    "shebangLines",
    "hasLanguageMarker",
    "startsWith",
    "comment",
    "markers",
    "trailingNewline",
    "endsWith",
    "commented",
    "doc",
    "relativePath",
    "FileSystem",
    "commentBlockAsSingles",
    "SnippetOrchestrator",
    "getCursorContext",
    "NeighboringSnippetType",
    "NeighboringTabsOption",
    "SnippetProviderType",
    "SnippetSemantics",
    "Worker",
    "resolve",
    "__dirname",
    "resolveLocalTypeScriptImport",
    "importerPath",
    "imp",
    "src",
    "namedChild",
    "extname",
    "dirname",
    "getTypescriptImportedNames",
    "names",
    "importClause",
    "namedImports",
    "namedImport",
    "namedChildren",
    "childForFieldName",
    "alias",
    "exportsCache",
    "Map",
    "EXPORTS_CACHE_LOW_WATER_MARK",
    "EXPORTS_CACHE_HIGH_WATER_MARK",
    "extractTypeScriptDeclaration",
    "srcString",
    "defn",
    "decl",
    "extractTypeScriptFunctionDeclaration",
    "memberDecls",
    "body",
    "member",
    "extractTypeScriptMemberDeclaration",
    "extractTypeScriptBodyDecls",
    "substring",
    "startIndex",
    "d",
    "endIndex",
    "signature",
    "getDocComment",
    "docCommentNode",
    "getFirstPrecedingComment",
    "firstChild",
    "getIndentation",
    "docComment",
    "inner",
    "getExportedDeclarations",
    "lang",
    "fs",
    "parseTreeSitter",
    "em",
    "queryExports",
    "rootNode",
    "ec",
    "captures",
    "exp",
    "hasError",
    "exportedDecl",
    "exportedDecls",
    "set",
    "delete",
    "localImportRegex",
    "localImportContext",
    "lastImportOffset",
    "m",
    "lastImport",
    "lastIndex",
    "newlineAfterLastImport",
    "lastTypeScriptLocalImportOffset",
    "root",
    "imports",
    "toplevelStmt",
    "getTypeScriptImports",
    "srcUri",
    "importedNames",
    "importedName",
    "extractTypeScriptLocalImportContext",
    "SnippetProviders",
    "LanguageSnippetProvider",
    "PathSnippetProvider",
    "NeighborFilesProvider",
    "LocalImportContextSnippetProvider",
    "startThreading",
    "workerProxy",
    "stopThreading",
    "providers",
    "provider",
    "Promise",
    "reject",
    "snippets",
    "timeout",
    "all",
    "getSnippets",
    "flat",
    "clearTimeout",
    "WASMLanguage",
    "languageIdToWasmLanguageMapping",
    "Python",
    "JavaScript",
    "TypeScript",
    "TSX",
    "Go",
    "Ruby",
    "languageIdToWasmLanguage",
    "jsFunctionQuery",
    "functionQuery",
    "tsx",
    "declaratorWithRequire",
    "commonJsImport",
    "tsImportQueries",
    "importsQuery",
    "jsExportQueries",
    "exportsQuery",
    "globalVarsQuery",
    "jsFunctionTypes",
    "functionTypes",
    "isFunctionParent",
    "nd",
    "parent",
    "loadedLanguages",
    "getLanguage",
    "wasmLanguage",
    "loadedLang",
    "Parser",
    "wasmFile",
    "Language",
    "load",
    "loadWasmLanguage",
    "treeSitterLanguage",
    "setLanguage",
    "parsedTree",
    "innerQuery",
    "queries",
    "query",
    "queryFunctions",
    "result",
    "docstringQuery",
    "isFunction",
    "blockNode",
    "namedChildCount",
    "declarator",
    "expr",
    "rhs",
    "cur",
    "previousSibling",
    "endPosition",
    "row",
    "startPosition",
    "positions",
    "res",
    "fn",
    "callSiteQuery",
    "docInfo",
    "pretruncateOffset",
    "linesBeforeTruncation",
    "callers",
    "resIndex",
    "callerName",
    "callerLineNo",
    "callerStartChar",
    "argsStartIndex",
    "argsEndIndex",
    "cap",
    "capIndex",
    "column",
    "callerLineCol",
    "character",
    "position",
    "BaseBlockParser",
    "nodeMatch",
    "nodeTypesWithBlockOrStmtChild",
    "cb",
    "nodeToComplete",
    "descendantForIndex",
    "blockNodeType",
    "fieldLabel",
    "childToCheck",
    "getNextBlockAtPosition",
    "getNodeMatchAtPosition",
    "block",
    "nextComment",
    "nextSibling",
    "commentInline",
    "commentAtEnd",
    "completion",
    "solution",
    "lengthOfBlock",
    "getNodeStart",
    "RegexBasedBlockParser",
    "blockEmptyMatch",
    "lineMatch",
    "super",
    "isBlockStart",
    "trimStart",
    "blockText",
    "rewindToNearestNonWs",
    "prevNewline",
    "lastIndexOf",
    "nextNewline",
    "getLineAtOffset",
    "isBlockBodyEmpty",
    "charAt",
    "lineStart",
    "outdented",
    "fst",
    "snd",
    "fstIndent",
    "sndIndent",
    "TreeSitterBasedBlockParser",
    "startKeywords",
    "emptyStatementType",
    "curlyBraceLanguage",
    "isBlockEmpty",
    "trimmed",
    "queryPythonIsDocstring",
    "RangeError",
    "nodeAtPos",
    "currNode",
    "next",
    "errorNode",
    "blockParentNode",
    "prevSibling",
    "keyword",
    "colonNode",
    "parenCount",
    "sibling",
    "formalParameters",
    "leftCurlyBrace",
    "expectedType",
    "wasmLanguageToBlockParser",
    "class_definition",
    "elif_clause",
    "else_clause",
    "except_clause",
    "finally_clause",
    "for_statement",
    "function_definition",
    "if_statement",
    "try_statement",
    "while_statement",
    "with_statement",
    "arrow_function",
    "catch_clause",
    "do_statement",
    "for_in_statement",
    "function",
    "function_declaration",
    "generator_function",
    "generator_function_declaration",
    "method_definition",
    "class_declaration",
    "ambient_declaration",
    "internal_module",
    "module",
    "abstract_class_declaration",
    "communication_case",
    "default_case",
    "expression_case",
    "func_literal",
    "labeled_statement",
    "method_declaration",
    "type_case",
    "begin_block",
    "end_block",
    "lambda",
    "for",
    "until",
    "while",
    "case",
    "do",
    "if",
    "method",
    "unless",
    "do_block",
    "getBlockParser",
    "isSupportedLanguageId",
    "isEmptyBlockStart",
    "isBlockBodyFinished",
    "cachedSuffix",
    "LanguageMarkerOption",
    "PathMarkerOption",
    "SnippetPositionOption",
    "SnippetSelectionOption",
    "LocalImportContextOption",
    "LineEndingOptions",
    "SuffixMatchOption",
    "SuffixStartMode",
    "SuffixOption",
    "MAX_PROMPT_LENGTH",
    "MAX_EDIT_DISTANCE_LENGTH",
    "TOKENS_RESERVED_FOR_SUFFIX_ENCODING",
    "DEFAULT_NUM_OF_SNIPPETS",
    "PromptOptions",
    "maxPromptLength",
    "languageMarker",
    "Top",
    "pathMarker",
    "NoContext",
    "snippetPosition",
    "TopOfText",
    "numberOfSnippets",
    "snippetProviderOptions",
    "normalizationFunction",
    "normalizationParams",
    "retrieval",
    "reservedSnippetCount",
    "neighboringTabs",
    "Eager",
    "neighboringSnippetTypes",
    "NeighboringSnippets",
    "lineEnding",
    "ConvertToUnix",
    "suffixPercent",
    "snippetPercent",
    "suffixStartMode",
    "Cursor",
    "tokenizerName",
    "TokenizerName",
    "cushman001",
    "suffixMatchThreshold",
    "suffixMatchCriteria",
    "Levenshtein",
    "fimSuffixLengthThreshold",
    "cursorSnippetsPickingStrategy",
    "CursorSnippetsPickingStrategy",
    "CursorJaccard",
    "selectionValue",
    "snippetSelection",
    "newOptions",
    "providerOptions",
    "TopK",
    "snippetSelectionK",
    "languageNormalizationMap",
    "jade",
    "cshtml",
    "normalizeLanguageId",
    "fileSystem",
    "completeOptions",
    "useCachedSuffix",
    "priorities",
    "Priorities",
    "directContextPriority",
    "justBelow",
    "TOP",
    "languageMarkerPriority",
    "Always",
    "pathMarkerPriority",
    "localImportContextPriority",
    "lowSnippetPriority",
    "highSnippetPriority",
    "justAbove",
    "promptWishlist",
    "PromptWishlist",
    "languageMarkerLine",
    "languageSnippet",
    "NoMarker",
    "append",
    "snippet",
    "PromptElementKind",
    "LanguageMarker",
    "pathMarkerLine",
    "pathSnippet",
    "Path",
    "PathMarker",
    "localImportSnippet",
    "LocalImportContext",
    "newLineEnded",
    "ImportedFile",
    "addSnippetsNow",
    "budget",
    "round",
    "processSnippetsForWishlist",
    "low",
    "high",
    "kind",
    "SimilarFile",
    "Retrieval",
    "RetrievalSnippet",
    "SymbolDef",
    "SymbolDefinition",
    "announcedSnippet",
    "priority",
    "normalizedScore",
    "source_lines",
    "directContext",
    "DirectlyAboveCursor",
    "lastLineStart",
    "directContextBeforePartialLastLine",
    "partialLastLine",
    "appendLineForLine",
    "BeforeCursor",
    "id",
    "AfterCursor",
    "require",
    "exclude",
    "actualSuffix",
    "fulfill",
    "CursorTrimStart",
    "getSiblingFunctionStart",
    "availableTokens",
    "prefixTargetTokens",
    "floor",
    "promptInfo",
    "suffixTargetTokens",
    "prefixLength",
    "suffixText",
    "SiblingBlockTrimStart",
    "suffix",
    "takeFirstTokens",
    "Equal",
    "dist",
    "findEditDistanceScore",
    "score",
    "suffixLength",
    "startingOffset",
    "anc",
    "getAncestorWithSiblingFunctions",
    "isFunctionDefinition",
    "defaultCursorContextOptions",
    "cushman002",
    "cursorContextOptions",
    "maxLineCount",
    "maxTokenLength",
    "lineCount",
    "takeLastLinesTokens",
    "WINDOWED_TOKEN_SET_CACHE",
    "cache",
    "put",
    "leavingKey",
    "shift",
    "CustomizedFixedWindowSizeJaccardMatcher",
    "WindowedMatcher",
    "referenceDoc",
    "windowLength",
    "getWindowsDelineations",
    "getBasicWindowDelineations",
    "_getCursorContextInfo",
    "similarityScore",
    "computeScore",
    "retrieveAllSnippets",
    "objectDoc",
    "sortOption",
    "SortOptions",
    "Descending",
    "candidates",
    "referenceTokens",
    "tokensInWindows",
    "needToComputeTokens",
    "tokenizedLines",
    "startLine",
    "endLine",
    "entries",
    "tokensInWindow",
    "sortScoredSnippets",
    "CursorHistoryMatcher",
    "lineCursorHistory",
    "jaccardMatcher",
    "Ascending",
    "snippetA",
    "snippetB",
    "markerToSnippet",
    "nonOverlappingSnippets",
    "snippetMarker",
    "NeighboringTabs",
    "semantics",
    "Snippet",
    "snippetSelectionOption",
    "BestMatch",
    "bestMatch",
    "findBestMatch",
    "findTopKMatches",
    "CursorOnly",
    "snippetsByCursor",
    "retrieveCursorSnippets",
    "bestCursorScore",
    "bestSnippets",
    "bestInMiddle",
    "bestSnippetsByCursor",
    "bestSnippetsBoundaryByCursor",
    "bestSnippet",
    "JaccardCursor",
    "gatherNonOverlappingSnippets",
    "snippetCandidates",
    "jaccardMap",
    "topKByJaccard",
    "cursorMap",
    "resortedTopKByJaccard",
    "cursors",
    "pointType",
    "sparsePoints",
    "num",
    "leftBoundary",
    "rightBoundary",
    "numCursors",
    "previousLine",
    "FACTORY",
    "to",
    "FixedWindowSizeJaccardMatcher",
    "FunctionJaccardMatcher",
    "FunctionalMatcher",
    "intersection",
    "neighborOptionToSelection",
    "none",
    "snippetLength",
    "threshold",
    "conservative",
    "medium",
    "eager",
    "eagerButLittle",
    "eagerButMedium",
    "eagerButMuch",
    "retrievalComparable",
    "neighbors",
    "selection",
    "matcher",
    "matcherFactory",
    "NeighboringFunctions",
    "ok",
    "getMatcher",
    "neighbor",
    "concat",
    "findMatches",
    "Tokenizer",
    "stopsForLanguage",
    "SPECIFIC_STOPS",
    "GENERIC_STOPS",
    "splitIntoWords",
    "getMatchingScore",
    "neighborDoc",
    "neighborDocTokens",
    "neighborFuncs",
    "funcPositions",
    "getFunctionPositions",
    "func_source",
    "getNeighboringFunctions",
    "func",
    "Function",
    "ENGLISH_STOPS",
    "snippetSemanticsToString",
    "Variable",
    "Parameter",
    "Method",
    "Class",
    "Module",
    "Alias",
    "Enum",
    "Interface",
    "announceSnippet",
    "targetDocLanguageId",
    "headlinedSnippet",
    "normalizeSnippetScore",
    "providerScore",
    "snippetRem",
    "sortSnippetsDescending",
    "selectSnippets",
    "reserved",
    "normalizedSnippets",
    "snippetsByProvider",
    "_provider",
    "remaining",
    "totalPrioritized",
    "highPriorityBudget",
    "usedBudget",
    "processedSnippets",
    "nextHighPriority",
    "nextLowPriority",
    "process",
    "announced",
    "windows",
    "minLength",
    "maxLength",
    "labeledTree",
    "clearLabels",
    "totalLength",
    "firstLineAfter",
    "NaN",
    "getStartLine",
    "getEndLine",
    "lengthFromAToBInclusive",
    "lastBThatWasntABlank",
    "endLineTrimmedForBlanks",
    "SnippetProvider",
    "currentFile",
    "getLanguageMarker",
    "formSnippets",
    "importPath",
    "api",
    "extractLocalImportContext",
    "neighborFiles",
    "None",
    "getNeighborSnippets",
    "getPathMarker",
    "buildSnippets",
    "matrix",
    "range",
    "y",
    "ord",
    "charCodeAt",
    "textDecoder",
    "TextDecoder",
    "decodeStr",
    "decode",
    "Uint8Array",
    "get_char_pairs",
    "word",
    "pairs",
    "prev_char",
    "char",
    "pat",
    "tokenizers",
    "mock",
    "MockTokenizer",
    "BPETokenizer",
    "decoder",
    "byte_encoder",
    "byte_decoder",
    "textEncoder",
    "TextEncoder",
    "encodeStr",
    "encode",
    "VOCAB",
    "ENCODER",
    "encoder_path",
    "readFileSync",
    "encoder_json",
    "encoder",
    "bpe_merges",
    "l",
    "bpe_ranks",
    "_",
    "dictZip",
    "bs",
    "cs",
    "cs_",
    "fromCharCode",
    "chr",
    "bytes_to_unicode",
    "byteEncodeStr",
    "mutatingConcat",
    "dest",
    "bpe",
    "bytes",
    "minPairs",
    "pair",
    "joined_pair",
    "rank",
    "isNaN",
    "minPairsKeys",
    "Number",
    "bigram",
    "first",
    "second",
    "new_bytes",
    "matchAll",
    "chunk_tokens",
    "takeLastTokens",
    "suffixT",
    "detokenize",
    "prefix_t",
    "newline",
    "tokenizeStrings",
    "token",
    "hash",
    "PromptBackground",
    "used",
    "unused",
    "markUsed",
    "element",
    "IsSnippet",
    "convert",
    "undoMarkUsed",
    "markUnused",
    "toFixed",
    "PromptChoices",
    "usedCounts",
    "unusedCounts",
    "PromptElementRanges",
    "usedElements",
    "ranges",
    "previousKind",
    "nextRangeStart",
    "lineEndingOption",
    "getContent",
    "convertLineEndings",
    "requires",
    "excludes",
    "returns",
    "dependentId",
    "dependeeId",
    "dependent",
    "e",
    "dependee",
    "excludingId",
    "excludedId",
    "excluding",
    "excluded",
    "tallyOfChoices",
    "promptBackground",
    "indexedContent",
    "idsThatHaveAlreadyBeenAdded",
    "idsConflictingWithAlreadyAddedIds",
    "budgetBreakingElement",
    "remainingContent",
    "remainingBudget",
    "budgetUse",
    "probableNextElem",
    "items",
    "targetIndex",
    "best",
    "bestIndex",
    "elem",
    "getMinimalGreater",
    "prompt",
    "promptLength",
    "removeAfterAll",
    "extendedContent",
    "promptElementRanges",
    "promptChoices",
    "registeredPriorities",
    "register",
    "BOTTOM",
    "nearestNeighbor",
    "p",
    "between",
    "lower",
    "higher",
    "some",
    "sleep",
    "delay",
    "Date",
    "getTime",
    "workerFns",
    "WorkerProxy",
    "nextHandlerId",
    "handlers",
    "fns",
    "isMainThread",
    "workerData",
    "configureWorkerResponse",
    "port",
    "initWorker",
    "port1",
    "port2",
    "MessageChannel",
    "worker",
    "transferList",
    "on",
    "handleMessage",
    "handleError",
    "proxyFunctions",
    "terminate",
    "removeAllListeners",
    "unproxyFunctions",
    "clear",
    "proxy",
    "originalFn",
    "args",
    "proxiedFunction",
    "postMessage",
    "handler",
    "maybeError",
    "console",
    "log",
    "ourStack",
    "reset",
    "TreeSitter",
    "initPromise",
    "document",
    "window",
    "currentScript",
    "initialize",
    "static",
    "moduleOptions",
    "assign",
    "resolveInitPromise",
    "moduleOverrides",
    "arguments_",
    "thisProgram",
    "quit_",
    "t",
    "ENVIRONMENT_IS_WEB",
    "ENVIRONMENT_IS_WORKER",
    "importScripts",
    "ENVIRONMENT_IS_NODE",
    "versions",
    "scriptDirectory",
    "read_",
    "readAsync",
    "readBinary",
    "setWindowTitle",
    "locateFile",
    "logExceptionOnExit",
    "ExitStatus",
    "nodePath",
    "isFileURI",
    "URL",
    "normalize",
    "buffer",
    "argv",
    "keepRuntimeAlive",
    "exitCode",
    "exit",
    "inspect",
    "location",
    "href",
    "XMLHttpRequest",
    "open",
    "send",
    "responseText",
    "responseType",
    "response",
    "onload",
    "status",
    "onerror",
    "title",
    "out",
    "print",
    "bind",
    "printErr",
    "warn",
    "quit",
    "STACK_ALIGN",
    "dynamicLibraries",
    "wasmBinary",
    "noExitRuntime",
    "wasmMemory",
    "WebAssembly",
    "abort",
    "ABORT",
    "EXITSTATUS",
    "UTF8Decoder",
    "HEAP8",
    "HEAPU8",
    "HEAP16",
    "HEAPU16",
    "HEAP32",
    "HEAPU32",
    "HEAPF32",
    "HEAPF64",
    "UTF8ArrayToString",
    "subarray",
    "UTF8ToString",
    "stringToUTF8Array",
    "stringToUTF8",
    "lengthBytesUTF8",
    "updateGlobalBufferAndViews",
    "Int8Array",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "Float32Array",
    "Float64Array",
    "INITIAL_MEMORY",
    "Memory",
    "initial",
    "maximum",
    "byteLength",
    "wasmTable",
    "Table",
    "__ATPRERUN__",
    "__ATINIT__",
    "__ATMAIN__",
    "__ATPOSTRUN__",
    "__RELOC_FUNCS__",
    "runtimeInitialized",
    "preRun",
    "addOnPreRun",
    "callRuntimeCallbacks",
    "initRuntime",
    "preMain",
    "postRun",
    "addOnPostRun",
    "unshift",
    "addOnInit",
    "runDependencies",
    "runDependencyWatcher",
    "dependenciesFulfilled",
    "addRunDependency",
    "monitorRunDependencies",
    "removeRunDependency",
    "clearInterval",
    "onAbort",
    "RuntimeError",
    "dataURIPrefix",
    "wasmBinaryFile",
    "tempDouble",
    "tempI64",
    "isDataURI",
    "getBinary",
    "getBinaryPromise",
    "fetch",
    "credentials",
    "then",
    "arrayBuffer",
    "catch",
    "createWasm",
    "env",
    "asmLibraryArg",
    "wasi_snapshot_preview1",
    "Proxy",
    "GOTHandler",
    "relocateExports",
    "getDylinkMetadata",
    "neededDynlibs",
    "mergeLibSymbols",
    "asm",
    "__wasm_call_ctors",
    "__wasm_apply_data_relocs",
    "instance",
    "instantiate",
    "instantiateWasm",
    "instantiateStreaming",
    "ASM_CONSTS",
    "message",
    "GOT",
    "CurrentModuleWeakSymbols",
    "Global",
    "mutable",
    "required",
    "customSections",
    "tlsExports",
    "weakImports",
    "memorySize",
    "memoryAlign",
    "tableSize",
    "tableAlign",
    "u",
    "f",
    "h",
    "getValue",
    "asmjsMangle",
    "_main",
    "LDSO",
    "loadedLibsByName",
    "loadedLibsByHandle",
    "dynCallLegacy",
    "wasmTableMirror",
    "getWasmTableEntry",
    "dynCall",
    "createInvokeFunction",
    "stackSave",
    "stackRestore",
    "_setThrew",
    "___heap_base",
    "zeroMemory",
    "fill",
    "getMemory",
    "_malloc",
    "__heap_base",
    "isInternalSym",
    "uleb128Encode",
    "sigToWasmTypes",
    "parameters",
    "results",
    "generateFuncType",
    "convertJsFunctionToWasm",
    "Instance",
    "updateTableMap",
    "functionsInTableMap",
    "freeTableIndexes",
    "getEmptyTableSlot",
    "grow",
    "setWasmTableEntry",
    "addFunction",
    "WeakMap",
    "updateGOT",
    "resolveGlobalSymbol",
    "stub",
    "alignMemory",
    "ceil",
    "loadWebAssemblyModule",
    "binary",
    "flags",
    "handle",
    "metadata",
    "loadModule",
    "firstLoad",
    "memAlign",
    "memoryBase",
    "tableBase",
    "tableGrowthNeeded",
    "moduleExports",
    "resolveSymbol",
    "proxyHandler",
    "info",
    "postInstantiation",
    "addEmAsm",
    "addr",
    "arity",
    "eval",
    "allowUndefined",
    "reportUndefinedSymbols",
    "__start_em_asm",
    "stop",
    "__stop_em_asm",
    "jsString",
    "applyRelocs",
    "loadAsync",
    "loadDynamicLibrary",
    "global",
    "nodelete",
    "refcount",
    "findObject",
    "encoding",
    "preloadedWasm",
    "sig",
    "preloadDylibs",
    "setValue",
    "___memory_base",
    "___stack_pointer",
    "___table_base",
    "nowIsMonotonic",
    "_emscripten_get_now",
    "__emscripten_get_now_is_monotonic",
    "_abort",
    "_emscripten_date_now",
    "now",
    "_emscripten_memcpy_big",
    "copyWithin",
    "getHeapMax",
    "emscripten_realloc_buffer",
    "_emscripten_resize_heap",
    "hrtime",
    "performance",
    "SYSCALLS",
    "DEFAULT_POLLMASK",
    "calculateAt",
    "PATH",
    "isAbs",
    "FS",
    "cwd",
    "getStreamFromFD",
    "ErrnoError",
    "join2",
    "doStat",
    "getPath",
    "dev",
    "ino",
    "mode",
    "nlink",
    "uid",
    "gid",
    "rdev",
    "blocks",
    "atime",
    "doMsync",
    "isFile",
    "msync",
    "varargs",
    "getStr",
    "getStream",
    "_proc_exit",
    "onExit",
    "exitJS",
    "_exit",
    "_fd_close",
    "close",
    "errno",
    "convertI32PairToI53Checked",
    "_fd_seek",
    "llseek",
    "getdents",
    "doWritev",
    "write",
    "_fd_write",
    "_tree_sitter_log_callback",
    "currentLogCallback",
    "_tree_sitter_parse_callback",
    "currentParseCallback",
    "stringToUTF16",
    "handleException",
    "allocateUTF8OnStack",
    "stackAlloc",
    "AsciiToString",
    "__indirect_function_table",
    "__memory_base",
    "__stack_pointer",
    "__table_base",
    "_emscripten_get_now_is_monotonic",
    "emscripten_get_now",
    "emscripten_memcpy_big",
    "emscripten_resize_heap",
    "fd_close",
    "fd_seek",
    "fd_write",
    "memory",
    "tree_sitter_log_callback",
    "tree_sitter_parse_callback",
    "___wasm_call_ctors",
    "___wasm_apply_data_relocs",
    "malloc",
    "_calloc",
    "calloc",
    "_realloc",
    "realloc",
    "_free",
    "free",
    "_ts_language_symbol_count",
    "ts_language_symbol_count",
    "_ts_language_version",
    "ts_language_version",
    "_ts_language_field_count",
    "ts_language_field_count",
    "_ts_language_symbol_name",
    "ts_language_symbol_name",
    "_ts_language_symbol_for_name",
    "ts_language_symbol_for_name",
    "_ts_language_symbol_type",
    "ts_language_symbol_type",
    "_ts_language_field_name_for_id",
    "ts_language_field_name_for_id",
    "_memset",
    "memset",
    "_memcpy",
    "memcpy",
    "_ts_parser_delete",
    "ts_parser_delete",
    "_ts_parser_reset",
    "ts_parser_reset",
    "_ts_parser_set_language",
    "ts_parser_set_language",
    "_ts_parser_timeout_micros",
    "ts_parser_timeout_micros",
    "_ts_parser_set_timeout_micros",
    "ts_parser_set_timeout_micros",
    "_memmove",
    "memmove",
    "_memcmp",
    "memcmp",
    "_ts_query_new",
    "ts_query_new",
    "_ts_query_delete",
    "ts_query_delete",
    "_iswspace",
    "iswspace",
    "_iswalnum",
    "iswalnum",
    "_ts_query_pattern_count",
    "ts_query_pattern_count",
    "_ts_query_capture_count",
    "ts_query_capture_count",
    "_ts_query_string_count",
    "ts_query_string_count",
    "_ts_query_capture_name_for_id",
    "ts_query_capture_name_for_id",
    "_ts_query_string_value_for_id",
    "ts_query_string_value_for_id",
    "_ts_query_predicates_for_pattern",
    "ts_query_predicates_for_pattern",
    "_ts_tree_copy",
    "ts_tree_copy",
    "_ts_tree_delete",
    "ts_tree_delete",
    "_ts_init",
    "ts_init",
    "_ts_parser_new_wasm",
    "ts_parser_new_wasm",
    "_ts_parser_enable_logger_wasm",
    "ts_parser_enable_logger_wasm",
    "_ts_parser_parse_wasm",
    "ts_parser_parse_wasm",
    "_ts_language_type_is_named_wasm",
    "ts_language_type_is_named_wasm",
    "_ts_language_type_is_visible_wasm",
    "ts_language_type_is_visible_wasm",
    "_ts_tree_root_node_wasm",
    "ts_tree_root_node_wasm",
    "_ts_tree_edit_wasm",
    "ts_tree_edit_wasm",
    "_ts_tree_get_changed_ranges_wasm",
    "ts_tree_get_changed_ranges_wasm",
    "_ts_tree_cursor_new_wasm",
    "ts_tree_cursor_new_wasm",
    "_ts_tree_cursor_delete_wasm",
    "ts_tree_cursor_delete_wasm",
    "_ts_tree_cursor_reset_wasm",
    "ts_tree_cursor_reset_wasm",
    "_ts_tree_cursor_goto_first_child_wasm",
    "ts_tree_cursor_goto_first_child_wasm",
    "_ts_tree_cursor_goto_next_sibling_wasm",
    "ts_tree_cursor_goto_next_sibling_wasm",
    "_ts_tree_cursor_goto_parent_wasm",
    "ts_tree_cursor_goto_parent_wasm",
    "_ts_tree_cursor_current_node_type_id_wasm",
    "ts_tree_cursor_current_node_type_id_wasm",
    "_ts_tree_cursor_current_node_is_named_wasm",
    "ts_tree_cursor_current_node_is_named_wasm",
    "_ts_tree_cursor_current_node_is_missing_wasm",
    "ts_tree_cursor_current_node_is_missing_wasm",
    "_ts_tree_cursor_current_node_id_wasm",
    "ts_tree_cursor_current_node_id_wasm",
    "_ts_tree_cursor_start_position_wasm",
    "ts_tree_cursor_start_position_wasm",
    "_ts_tree_cursor_end_position_wasm",
    "ts_tree_cursor_end_position_wasm",
    "_ts_tree_cursor_start_index_wasm",
    "ts_tree_cursor_start_index_wasm",
    "_ts_tree_cursor_end_index_wasm",
    "ts_tree_cursor_end_index_wasm",
    "_ts_tree_cursor_current_field_id_wasm",
    "ts_tree_cursor_current_field_id_wasm",
    "_ts_tree_cursor_current_node_wasm",
    "ts_tree_cursor_current_node_wasm",
    "_ts_node_symbol_wasm",
    "ts_node_symbol_wasm",
    "_ts_node_child_count_wasm",
    "ts_node_child_count_wasm",
    "_ts_node_named_child_count_wasm",
    "ts_node_named_child_count_wasm",
    "_ts_node_child_wasm",
    "ts_node_child_wasm",
    "_ts_node_named_child_wasm",
    "ts_node_named_child_wasm",
    "_ts_node_child_by_field_id_wasm",
    "ts_node_child_by_field_id_wasm",
    "_ts_node_next_sibling_wasm",
    "ts_node_next_sibling_wasm",
    "_ts_node_prev_sibling_wasm",
    "ts_node_prev_sibling_wasm",
    "_ts_node_next_named_sibling_wasm",
    "ts_node_next_named_sibling_wasm",
    "_ts_node_prev_named_sibling_wasm",
    "ts_node_prev_named_sibling_wasm",
    "_ts_node_parent_wasm",
    "ts_node_parent_wasm",
    "_ts_node_descendant_for_index_wasm",
    "ts_node_descendant_for_index_wasm",
    "_ts_node_named_descendant_for_index_wasm",
    "ts_node_named_descendant_for_index_wasm",
    "_ts_node_descendant_for_position_wasm",
    "ts_node_descendant_for_position_wasm",
    "_ts_node_named_descendant_for_position_wasm",
    "ts_node_named_descendant_for_position_wasm",
    "_ts_node_start_point_wasm",
    "ts_node_start_point_wasm",
    "_ts_node_end_point_wasm",
    "ts_node_end_point_wasm",
    "_ts_node_start_index_wasm",
    "ts_node_start_index_wasm",
    "_ts_node_end_index_wasm",
    "ts_node_end_index_wasm",
    "_ts_node_to_string_wasm",
    "ts_node_to_string_wasm",
    "_ts_node_children_wasm",
    "ts_node_children_wasm",
    "_ts_node_named_children_wasm",
    "ts_node_named_children_wasm",
    "_ts_node_descendants_of_type_wasm",
    "ts_node_descendants_of_type_wasm",
    "_ts_node_is_named_wasm",
    "ts_node_is_named_wasm",
    "_ts_node_has_changes_wasm",
    "ts_node_has_changes_wasm",
    "_ts_node_has_error_wasm",
    "ts_node_has_error_wasm",
    "_ts_node_is_missing_wasm",
    "ts_node_is_missing_wasm",
    "_ts_query_matches_wasm",
    "ts_query_matches_wasm",
    "_ts_query_captures_wasm",
    "ts_query_captures_wasm",
    "___cxa_atexit",
    "__cxa_atexit",
    "_iswdigit",
    "iswdigit",
    "_iswalpha",
    "iswalpha",
    "_iswlower",
    "iswlower",
    "_memchr",
    "memchr",
    "_strlen",
    "strlen",
    "_towupper",
    "towupper",
    "setThrew",
    "__Znwm",
    "_Znwm",
    "__ZdlPv",
    "_ZdlPv",
    "__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev",
    "_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev",
    "__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm",
    "_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm",
    "__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm",
    "_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm",
    "__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm",
    "_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm",
    "__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4copyEPcmm",
    "_ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4copyEPcmm",
    "__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc",
    "_ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc",
    "__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev",
    "_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev",
    "__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw",
    "_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw",
    "__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEmw",
    "_ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6resizeEmw",
    "dynCall_jiji",
    "_orig$ts_parser_timeout_micros",
    "orig$ts_parser_timeout_micros",
    "_orig$ts_parser_set_timeout_micros",
    "orig$ts_parser_set_timeout_micros",
    "calledRun",
    "callMain",
    "run",
    "dylibsLoaded",
    "onRuntimeInitialized",
    "shouldRunNow",
    "setStatus",
    "preInit",
    "noInitialRun",
    "C",
    "INTERNAL",
    "SIZE_OF_INT",
    "SIZE_OF_NODE",
    "SIZE_OF_POINT",
    "SIZE_OF_RANGE",
    "ZERO_POINT",
    "QUERY_WORD_REGEX",
    "PREDICATE_STEP_TYPE_CAPTURE",
    "PREDICATE_STEP_TYPE_STRING",
    "LANGUAGE_FUNCTION_REGEX",
    "VERSION",
    "MIN_COMPATIBLE_VERSION",
    "TRANSFER_BUFFER",
    "ParserImpl",
    "logCallback",
    "includedRanges",
    "marshalRange",
    "Tree",
    "setTimeoutMicros",
    "getTimeoutMicros",
    "setLogger",
    "getLogger",
    "assertInternal",
    "textCallback",
    "edit",
    "marshalEdit",
    "unmarshalNode",
    "walk",
    "getChangedRanges",
    "unmarshalRange",
    "Node",
    "typeId",
    "marshalNode",
    "types",
    "unmarshalPoint",
    "getText",
    "isNamed",
    "hasChanges",
    "isMissing",
    "childForFieldId",
    "fields",
    "childCount",
    "firstNamedChild",
    "lastChild",
    "lastNamedChild",
    "_children",
    "_namedChildren",
    "descendantsOfType",
    "nextNamedSibling",
    "previousNamedSibling",
    "namedDescendantForIndex",
    "descendantForPosition",
    "isPoint",
    "marshalPoint",
    "namedDescendantForPosition",
    "TreeCursor",
    "unmarshalTreeCursor",
    "marshalTreeCursor",
    "nodeType",
    "nodeTypeId",
    "nodeId",
    "nodeIsNamed",
    "nodeIsMissing",
    "nodeText",
    "currentNode",
    "currentFieldId",
    "currentFieldName",
    "gotoFirstChild",
    "gotoNextSibling",
    "gotoParent",
    "version",
    "fieldCount",
    "fieldIdForName",
    "fieldNameForId",
    "idForNodeType",
    "nodeTypeCount",
    "nodeTypeForId",
    "nodeTypeIsNamed",
    "nodeTypeIsVisible",
    "SyntaxError",
    "RegExp",
    "operator",
    "operands",
    "freeze",
    "Query",
    "loadSideModule",
    "captureNames",
    "textPredicates",
    "predicates",
    "setProperties",
    "assertedProperties",
    "refutedProperties",
    "exceededMatchLimit",
    "matchLimit",
    "unmarshalCaptures",
    "pattern",
    "predicatesForPattern",
    "didExceedMatchLimit",
    "oldEndPosition",
    "newEndPosition",
    "oldEndIndex",
    "newEndIndex",
    "getOwnPropertyNames",
    "writable",
    "__webpack_module_cache__",
    "__webpack_require__",
    "moduleId",
    "cachedModule",
    "__webpack_modules__",
    "promptlib",
    "parentPort",
    "getPrompt"
  ],
  "sourceRoot": "../prompt/src"
}
