{"version":3,"file":"test/suite/index.js","mappings":"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","sources":["webpack://rainbow-csv/./contrib/wcwidth/combining.js","webpack://rainbow-csv/./contrib/wcwidth/index.js","webpack://rainbow-csv/./extension.js","webpack://rainbow-csv/./fast_load_utils.js","webpack://rainbow-csv/./node_modules/assert/build/assert.js","webpack://rainbow-csv/./node_modules/assert/build/internal/assert/assertion_error.js","webpack://rainbow-csv/./node_modules/assert/build/internal/errors.js","webpack://rainbow-csv/./node_modules/assert/build/internal/util/comparisons.js","webpack://rainbow-csv/./node_modules/call-bind/callBound.js","webpack://rainbow-csv/./node_modules/call-bind/index.js","webpack://rainbow-csv/./node_modules/define-data-property/index.js","webpack://rainbow-csv/./node_modules/define-properties/index.js","webpack://rainbow-csv/./node_modules/for-each/index.js","webpack://rainbow-csv/./node_modules/function-bind/implementation.js","webpack://rainbow-csv/./node_modules/function-bind/index.js","webpack://rainbow-csv/./node_modules/get-intrinsic/index.js","webpack://rainbow-csv/./node_modules/gopd/index.js","webpack://rainbow-csv/./node_modules/has-property-descriptors/index.js","webpack://rainbow-csv/./node_modules/has-proto/index.js","webpack://rainbow-csv/./node_modules/has-symbols/index.js","webpack://rainbow-csv/./node_modules/has-symbols/shams.js","webpack://rainbow-csv/./node_modules/has-tostringtag/shams.js","webpack://rainbow-csv/./node_modules/hasown/index.js","webpack://rainbow-csv/./node_modules/inherits/inherits_browser.js","webpack://rainbow-csv/./node_modules/is-arguments/index.js","webpack://rainbow-csv/./node_modules/is-callable/index.js","webpack://rainbow-csv/./node_modules/is-generator-function/index.js","webpack://rainbow-csv/./node_modules/is-nan/implementation.js","webpack://rainbow-csv/./node_modules/is-nan/index.js","webpack://rainbow-csv/./node_modules/is-nan/polyfill.js","webpack://rainbow-csv/./node_modules/is-nan/shim.js","webpack://rainbow-csv/./node_modules/is-typed-array/index.js","webpack://rainbow-csv/./node_modules/object-is/implementation.js","webpack://rainbow-csv/./node_modules/object-is/index.js","webpack://rainbow-csv/./node_modules/object-is/polyfill.js","webpack://rainbow-csv/./node_modules/object-is/shim.js","webpack://rainbow-csv/./node_modules/object-keys/implementation.js","webpack://rainbow-csv/./node_modules/object-keys/index.js","webpack://rainbow-csv/./node_modules/object-keys/isArguments.js","webpack://rainbow-csv/./node_modules/object.assign/implementation.js","webpack://rainbow-csv/./node_modules/object.assign/polyfill.js","webpack://rainbow-csv/./node_modules/process/browser.js","webpack://rainbow-csv/./node_modules/set-function-length/index.js","webpack://rainbow-csv/./node_modules/util/support/isBufferBrowser.js","webpack://rainbow-csv/./node_modules/util/support/types.js","webpack://rainbow-csv/./node_modules/util/util.js","webpack://rainbow-csv/./node_modules/which-typed-array/index.js","webpack://rainbow-csv/./rainbow_utils.js","webpack://rainbow-csv/./rbql_core/rbql-js/csv_utils.js","webpack://rainbow-csv/./rbql_core/rbql-js/rbql.js","webpack://rainbow-csv/./rbql_core/rbql-js/rbql_csv.js","webpack://rainbow-csv/./test/suite/unit_tests.js","webpack://rainbow-csv/external commonjs \"vscode\"","webpack://rainbow-csv/./node_modules/available-typed-arrays/index.js","webpack://rainbow-csv/webpack/bootstrap","webpack://rainbow-csv/webpack/runtime/global","webpack://rainbow-csv/./test/suite/index.js"],"sourcesContent":["module.exports = [\n    [ 0x0300, 0x036F ], [ 0x0483, 0x0486 ], [ 0x0488, 0x0489 ],\n    [ 0x0591, 0x05BD ], [ 0x05BF, 0x05BF ], [ 0x05C1, 0x05C2 ],\n    [ 0x05C4, 0x05C5 ], [ 0x05C7, 0x05C7 ], [ 0x0600, 0x0603 ],\n    [ 0x0610, 0x0615 ], [ 0x064B, 0x065E ], [ 0x0670, 0x0670 ],\n    [ 0x06D6, 0x06E4 ], [ 0x06E7, 0x06E8 ], [ 0x06EA, 0x06ED ],\n    [ 0x070F, 0x070F ], [ 0x0711, 0x0711 ], [ 0x0730, 0x074A ],\n    [ 0x07A6, 0x07B0 ], [ 0x07EB, 0x07F3 ], [ 0x0901, 0x0902 ],\n    [ 0x093C, 0x093C ], [ 0x0941, 0x0948 ], [ 0x094D, 0x094D ],\n    [ 0x0951, 0x0954 ], [ 0x0962, 0x0963 ], [ 0x0981, 0x0981 ],\n    [ 0x09BC, 0x09BC ], [ 0x09C1, 0x09C4 ], [ 0x09CD, 0x09CD ],\n    [ 0x09E2, 0x09E3 ], [ 0x0A01, 0x0A02 ], [ 0x0A3C, 0x0A3C ],\n    [ 0x0A41, 0x0A42 ], [ 0x0A47, 0x0A48 ], [ 0x0A4B, 0x0A4D ],\n    [ 0x0A70, 0x0A71 ], [ 0x0A81, 0x0A82 ], [ 0x0ABC, 0x0ABC ],\n    [ 0x0AC1, 0x0AC5 ], [ 0x0AC7, 0x0AC8 ], [ 0x0ACD, 0x0ACD ],\n    [ 0x0AE2, 0x0AE3 ], [ 0x0B01, 0x0B01 ], [ 0x0B3C, 0x0B3C ],\n    [ 0x0B3F, 0x0B3F ], [ 0x0B41, 0x0B43 ], [ 0x0B4D, 0x0B4D ],\n    [ 0x0B56, 0x0B56 ], [ 0x0B82, 0x0B82 ], [ 0x0BC0, 0x0BC0 ],\n    [ 0x0BCD, 0x0BCD ], [ 0x0C3E, 0x0C40 ], [ 0x0C46, 0x0C48 ],\n    [ 0x0C4A, 0x0C4D ], [ 0x0C55, 0x0C56 ], [ 0x0CBC, 0x0CBC ],\n    [ 0x0CBF, 0x0CBF ], [ 0x0CC6, 0x0CC6 ], [ 0x0CCC, 0x0CCD ],\n    [ 0x0CE2, 0x0CE3 ], [ 0x0D41, 0x0D43 ], [ 0x0D4D, 0x0D4D ],\n    [ 0x0DCA, 0x0DCA ], [ 0x0DD2, 0x0DD4 ], [ 0x0DD6, 0x0DD6 ],\n    [ 0x0E31, 0x0E31 ], [ 0x0E34, 0x0E3A ], [ 0x0E47, 0x0E4E ],\n    [ 0x0EB1, 0x0EB1 ], [ 0x0EB4, 0x0EB9 ], [ 0x0EBB, 0x0EBC ],\n    [ 0x0EC8, 0x0ECD ], [ 0x0F18, 0x0F19 ], [ 0x0F35, 0x0F35 ],\n    [ 0x0F37, 0x0F37 ], [ 0x0F39, 0x0F39 ], [ 0x0F71, 0x0F7E ],\n    [ 0x0F80, 0x0F84 ], [ 0x0F86, 0x0F87 ], [ 0x0F90, 0x0F97 ],\n    [ 0x0F99, 0x0FBC ], [ 0x0FC6, 0x0FC6 ], [ 0x102D, 0x1030 ],\n    [ 0x1032, 0x1032 ], [ 0x1036, 0x1037 ], [ 0x1039, 0x1039 ],\n    [ 0x1058, 0x1059 ], [ 0x1160, 0x11FF ], [ 0x135F, 0x135F ],\n    [ 0x1712, 0x1714 ], [ 0x1732, 0x1734 ], [ 0x1752, 0x1753 ],\n    [ 0x1772, 0x1773 ], [ 0x17B4, 0x17B5 ], [ 0x17B7, 0x17BD ],\n    [ 0x17C6, 0x17C6 ], [ 0x17C9, 0x17D3 ], [ 0x17DD, 0x17DD ],\n    [ 0x180B, 0x180D ], [ 0x18A9, 0x18A9 ], [ 0x1920, 0x1922 ],\n    [ 0x1927, 0x1928 ], [ 0x1932, 0x1932 ], [ 0x1939, 0x193B ],\n    [ 0x1A17, 0x1A18 ], [ 0x1B00, 0x1B03 ], [ 0x1B34, 0x1B34 ],\n    [ 0x1B36, 0x1B3A ], [ 0x1B3C, 0x1B3C ], [ 0x1B42, 0x1B42 ],\n    [ 0x1B6B, 0x1B73 ], [ 0x1DC0, 0x1DCA ], [ 0x1DFE, 0x1DFF ],\n    [ 0x200B, 0x200F ], [ 0x202A, 0x202E ], [ 0x2060, 0x2063 ],\n    [ 0x206A, 0x206F ], [ 0x20D0, 0x20EF ], [ 0x302A, 0x302F ],\n    [ 0x3099, 0x309A ], [ 0xA806, 0xA806 ], [ 0xA80B, 0xA80B ],\n    [ 0xA825, 0xA826 ], [ 0xFB1E, 0xFB1E ], [ 0xFE00, 0xFE0F ],\n    [ 0xFE20, 0xFE23 ], [ 0xFEFF, 0xFEFF ], [ 0xFFF9, 0xFFFB ],\n    [ 0x10A01, 0x10A03 ], [ 0x10A05, 0x10A06 ], [ 0x10A0C, 0x10A0F ],\n    [ 0x10A38, 0x10A3A ], [ 0x10A3F, 0x10A3F ], [ 0x1D167, 0x1D169 ],\n    [ 0x1D173, 0x1D182 ], [ 0x1D185, 0x1D18B ], [ 0x1D1AA, 0x1D1AD ],\n    [ 0x1D242, 0x1D244 ], [ 0xE0001, 0xE0001 ], [ 0xE0020, 0xE007F ],\n    [ 0xE0100, 0xE01EF ]\n]\n","\"use strict\"\n\nvar combining = require('./combining')\n\nvar DEFAULTS = {\n  nul: 0,\n  control: 0\n}\n\nmodule.exports = function wcwidth(str) {\n  return wcswidth(str, DEFAULTS)\n}\n\n/*\n *  The following functions define the column width of an ISO 10646\n *  character as follows:\n *  - The null character (U+0000) has a column width of 0.\n *  - Other C0/C1 control characters and DEL will lead to a return value\n *    of -1.\n *  - Non-spacing and enclosing combining characters (general category\n *    code Mn or Me in the\n *    Unicode database) have a column width of 0.\n *  - SOFT HYPHEN (U+00AD) has a column width of 1.\n *  - Other format characters (general category code Cf in the Unicode\n *    database) and ZERO WIDTH\n *    SPACE (U+200B) have a column width of 0.\n *  - Hangul Jamo medial vowels and final consonants (U+1160-U+11FF)\n *    have a column width of 0.\n *  - Spacing characters in the East Asian Wide (W) or East Asian\n *    Full-width (F) category as\n *    defined in Unicode Technical Report #11 have a column width of 2.\n *  - All remaining characters (including all printable ISO 8859-1 and\n *    WGL4 characters, Unicode control characters, etc.) have a column\n *    width of 1.\n *  This implementation assumes that characters are encoded in ISO 10646.\n*/\n\nfunction wcswidth(str, opts) {\n  if (typeof str !== 'string') return wcwidth(str, opts)\n\n  var s = 0\n  for (var i = 0; i < str.length; i++) {\n    var n = wcwidth(str.charCodeAt(i), opts)\n    if (n < 0) return -1\n    s += n\n  }\n\n  return s\n}\n\nfunction wcwidth(ucs, opts) {\n  // test for 8-bit control characters\n  if (ucs === 0) return opts.nul\n  if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0)) return opts.control\n\n  // binary search in table of non-spacing characters\n  if (bisearch(ucs)) return 0\n\n  // if we arrive here, ucs is not a combining or C0/C1 control character\n  return 1 +\n      (ucs >= 0x1100 &&\n       (ucs <= 0x115f ||                       // Hangul Jamo init. consonants\n        ucs == 0x2329 || ucs == 0x232a ||\n        (ucs >= 0x2e80 && ucs <= 0xa4cf &&\n         ucs != 0x303f) ||                     // CJK ... Yi\n        (ucs >= 0xac00 && ucs <= 0xd7a3) ||    // Hangul Syllables\n        (ucs >= 0xf900 && ucs <= 0xfaff) ||    // CJK Compatibility Ideographs\n        (ucs >= 0xfe10 && ucs <= 0xfe19) ||    // Vertical forms\n        (ucs >= 0xfe30 && ucs <= 0xfe6f) ||    // CJK Compatibility Forms\n        (ucs >= 0xff00 && ucs <= 0xff60) ||    // Fullwidth Forms\n        (ucs >= 0xffe0 && ucs <= 0xffe6) ||\n        (ucs >= 0x20000 && ucs <= 0x2fffd) ||\n        (ucs >= 0x30000 && ucs <= 0x3fffd)));\n}\n\nfunction bisearch(ucs) {\n  var min = 0\n  var max = combining.length - 1\n  var mid\n\n  if (ucs < combining[0][0] || ucs > combining[max][1]) return false\n\n  while (max >= min) {\n    mid = Math.floor((min + max) / 2)\n    if (ucs > combining[mid][1]) min = mid + 1\n    else if (ucs < combining[mid][0]) max = mid - 1\n    else return true\n  }\n\n  return false\n}\n","const vscode = require('vscode');\n\nconst path = require('path');\nconst fs = require('fs');\nconst os = require('os');\nconst child_process = require('child_process');\n\nconst fast_load_utils = require('./fast_load_utils.js');\n\n// Please see DEV_README.md file for additional info.\n\n\nconst csv_utils = require('./rbql_core/rbql-js/csv_utils.js');\n\nvar rbql_csv = null; // Using lazy load to improve startup performance.\nfunction ll_rbql_csv() {\n    if (rbql_csv === null)\n        rbql_csv = require('./rbql_core/rbql-js/rbql_csv.js');\n    return rbql_csv;\n}\n\n\nvar rainbow_utils = null; // Using lazy load to improve startup performance.\nfunction ll_rainbow_utils() {\n    if (rainbow_utils === null) {\n        rainbow_utils = require('./rainbow_utils.js');\n    }\n    return rainbow_utils;\n}\n\n// FIXME Add a way to separate output directory setting for different systems.\n// FIXME Start RBQL with python3 first and switch to python on failure.\n\nconst is_web_ext = (os.homedir === undefined); // Runs as web extension in browser.\nconst preview_window_size = 100;\nconst scratch_buf_marker = 'vscode_rbql_scratch';\nconst dynamic_csv_highlight_margin = 50; // TODO make configurable\n\nlet client_html_template_web = null;\n\nvar aligned_files = new Set();\nvar result_set_parent_map = new Map();\nvar cached_table_parse_result = new Map(); // TODO store doc timestamp / size to invalidate the entry when the doc changes.\nvar manual_comment_prefix_stoplist = new Set();\n\nvar rbql_status_bar_button = null;\nvar align_shrink_button = null;\nvar rainbow_off_status_bar_button = null;\nvar rainbow_on_status_bar_button = null;\nvar copy_back_button = null;\nvar column_info_button = null;\nvar dynamic_dialect_select_button = null;\n\nvar rbql_context = null;\n\nvar last_rbql_queries = new Map(); // Query history does not replace this structure, it is also used to store partially entered queries for preview window switch.\n\nvar client_html_template = null;\n\n// This `global_state` is persistent across VSCode restarts.\nvar global_state = null;\n\nvar preview_panel = null;\n\nvar doc_first_edit_subscription = null;\nvar keyboard_cursor_subscription = null;\n\nvar last_closed_rainbow_doc_info = null;\n\nvar _unit_test_last_rbql_report = null; // For unit tests only.\nvar _unit_test_last_warnings = null; // For unit tests only.\n\nlet cursor_timeout_handle = null;\n\nlet rainbow_token_event = null;\nlet comment_token_event = null;\nlet sticky_header_disposable = null;\n\nconst DYNAMIC_CSV = 'dynamic csv';\n\nconst QUOTED_POLICY = 'quoted';\nconst WHITESPACE_POLICY = 'whitespace';\nconst QUOTED_RFC_POLICY = 'quoted_rfc';\nconst SIMPLE_POLICY = 'simple';\n\n\nlet extension_context = {\n    lint_results: new Map(),\n    lint_status_bar_button: null,\n    dynamic_document_dialects: new Map(),\n    custom_comment_prefixes: new Map(),\n    original_language_ids: new Map(),\n    reenable_rainbow_language_infos: new Map(), // This only needed for \"Rainbow On\" functionality that reverts \"Rainbow Off\" effect.\n    autodetection_stoplist: new Set(),\n    autodetection_temporarily_disabled_for_rbql: false,\n    dynamic_dialect_for_next_request: null,\n};\n\nconst dialect_map = {\n    'csv': [',', QUOTED_POLICY],\n    'tsv': ['\\t', SIMPLE_POLICY],\n    'csv (semicolon)': [';', QUOTED_POLICY],\n    'csv (pipe)': ['|', SIMPLE_POLICY],\n    'csv (whitespace)': [' ', WHITESPACE_POLICY],\n    [DYNAMIC_CSV]: [null, null]\n};\n\nconst tokenTypes = ['rainbow1', 'macro', 'function', 'comment', 'string', 'parameter', 'type', 'enumMember', 'keyword', 'regexp'];\nconst tokens_legend = new vscode.SemanticTokensLegend(tokenTypes);\n\n\nfunction is_eligible_scheme(vscode_doc)  {\n    // Make sure that the the doc has a valid scheme.\n    // We don't want to handle virtual docs and docs created by other extensions, see https://code.visualstudio.com/api/extension-guides/virtual-documents#events-and-visibility and https://github.com/mechatroner/vscode_rainbow_csv/issues/123\n    // VScode also opens pairing virtual `.git` documents for git-controlled files that we also want to skip, see https://github.com/microsoft/vscode/issues/22561.\n    // \"vscode-test-web\" scheme is used for browser unit tests.\n    return vscode_doc && vscode_doc.uri && ['file', 'untitled', 'vscode-test-web'].indexOf(vscode_doc.uri.scheme) != -1;\n}\n\n\nfunction is_eligible_doc(vscode_doc) {\n    // For new untitled scratch documents `fileName` would be \"Untitled-1\", \"Untitled-2\", etc, so we won't enter this branch.\n    return vscode_doc && vscode_doc.uri && vscode_doc.fileName && is_eligible_scheme(vscode_doc);\n}\n\n\nfunction is_rainbow_dialect_doc(vscode_doc) {\n    return is_eligible_doc(vscode_doc) && dialect_map.hasOwnProperty(vscode_doc.languageId);\n}\n\n\nfunction make_dialect_info(delim, policy) {\n    return {'delim': delim, 'policy': policy};\n}\n\n\nfunction make_dynamic_dialect_key(file_path) {\n    return 'dynamic_dialect:' + file_path;\n}\n\n\nasync function save_dynamic_info(extension_context, file_path, dialect_info) {\n    await save_to_global_state(make_dynamic_dialect_key(file_path), dialect_info);\n    extension_context.dynamic_document_dialects.set(file_path, dialect_info);\n}\n\n\nasync function remove_dynamic_info(file_path) {\n    await save_to_global_state(make_dynamic_dialect_key(file_path), undefined);\n    extension_context.dynamic_document_dialects.delete(file_path);\n}\n\n\nfunction get_dynamic_info(file_path) {\n    // Filetypes (lang modes) are not preserved across doc reopen but surprisingly preserved across VSCode restarts so we are also storing them in persistent global state.\n    // Persistent dialect info has some minor drawbacks (e.g. performance also restart not completely resetting the state is an issue by itself in some scenarios) and could be reconsidered if more serious issues are found.\n    if (extension_context.dynamic_document_dialects.has(file_path)) {\n        return extension_context.dynamic_document_dialects.get(file_path);\n    }\n    // Failed to get from the session-local dynamic_document_dialects - check if we have it persistently stored from a previous session.\n    let dialect_info = get_from_global_state(make_dynamic_dialect_key(file_path), null);\n    if (dialect_info && dialect_info.hasOwnProperty('delim') && dialect_info.hasOwnProperty('policy')) {\n        extension_context.dynamic_document_dialects.set(file_path, dialect_info);\n        return dialect_info;\n    }\n    return null;\n}\n\n\nfunction safe_lower(src_str) {\n    if (!src_str)\n        return src_str;\n    return src_str.toLowerCase();\n}\n\n\nfunction get_default_policy(separator) {\n    // This function is most likely a temporal workaround, get rid of it when possible.\n    for (let language_id in dialect_map) {\n        if (!dialect_map.hasOwnProperty(language_id))\n            continue;\n        if (dialect_map[language_id][0] == separator)\n            return dialect_map[language_id][1];\n    }\n    return SIMPLE_POLICY;\n}\n\n\nfunction map_dialect_to_language_id(separator, policy) {\n    for (let language_id in dialect_map) {\n        if (!dialect_map.hasOwnProperty(language_id))\n            continue;\n        if (dialect_map[language_id][0] == separator && dialect_map[language_id][1] == policy)\n            return language_id;\n    }\n    return DYNAMIC_CSV;\n}\n\n\n// This structure will get properly initialized during the startup.\nlet absolute_path_map = {\n    'rbql_client.js': null,\n    'contrib/textarea-caret-position/index.js': null,\n    'rbql_suggest.js': null,\n    'rbql_logo.svg': null,\n    'rbql_client.html': null,\n    'rbql mock/rbql_mock.py': null,\n    'rbql_core/vscode_rbql.py': null\n};\n\n\nfunction show_single_line_error(error_msg) {\n    var active_window = vscode.window;\n    if (!active_window)\n        return;\n    // Do not \"await\" error messages because the promise gets resolved only on error dismissal.\n    active_window.showErrorMessage(error_msg);\n}\n\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\nasync function report_progress(progress, status_message) {\n    progress.report({message: status_message});\n    // Push the current stack to the JS callback queue to allow UI update.\n    await sleep(0);\n}\n\n\nfunction get_from_global_state(key, default_value) {\n    // Load KV pair from the \"global state\" which is persistent across VSCode restarts.\n    if (global_state) {\n        var value = global_state.get(key);\n        if (value !== null && value !== undefined)\n            return value;\n    }\n    return default_value;\n}\n\n\nasync function save_to_global_state(key, value) {\n    // Save KV pair to the \"global state\" which is persistent across VSCode restarts.\n    if (global_state && key) {\n        await global_state.update(key, value);\n        return true;\n    }\n    return false;\n}\n\n\nasync function replace_doc_content(active_editor, active_doc, new_content) {\n    let invalid_range = new vscode.Range(0, 0, active_doc.lineCount /* Intentionally missing the '-1' */, 0);\n    let full_range = active_doc.validateRange(invalid_range);\n    await active_editor.edit(edit => edit.replace(full_range, new_content));\n}\n\n\nfunction make_header_key(file_path) {\n    return 'rbql_header_info:' + file_path;\n}\n\n\nfunction make_with_headers_key(file_path) {\n    return 'rbql_with_headers:' + file_path;\n}\n\n\nfunction get_from_config(param_name, default_value, config=null) {\n    if (!config) {\n        config = vscode.workspace.getConfiguration('rainbow_csv');\n    }\n    return config ? config.get(param_name) : default_value;\n}\n\n\nfunction get_header_from_document(document, delim, policy, comment_prefix) {\n    let [_header_lnum, header_line] = ll_rainbow_utils().get_header_line(document, comment_prefix);\n    if (!header_line) {\n        return null;\n    }\n    return csv_utils.smart_split(header_line, delim, policy, /*preserve_quotes_and_whitespaces=*/false)[0];\n}\n\n\nfunction get_header(document, delim, policy, comment_prefix) {\n    var file_path = document.fileName;\n    if (file_path) {\n        let header_info = get_from_global_state(make_header_key(file_path), null);\n        if (header_info !== null && header_info.header !== null) {\n            return header_info.header;\n        }\n    }\n    return get_header_from_document(document, delim, policy, comment_prefix);\n}\n\n\nfunction get_dialect(document) {\n    let language_id = document.languageId;\n    let delim = null;\n    let policy = null;\n\n    let comment_prefix = '';\n    if (extension_context.custom_comment_prefixes.has(document.fileName)) {\n        comment_prefix = extension_context.custom_comment_prefixes.get(document.fileName);\n    } else {\n        comment_prefix = get_from_config('comment_prefix', '');\n    }\n    if (language_id != DYNAMIC_CSV && dialect_map.hasOwnProperty(language_id)) {\n        [delim, policy] = dialect_map[language_id];\n        return [delim, policy, comment_prefix];\n    }\n    let dialect_info = null;\n    if (language_id == DYNAMIC_CSV) {\n        dialect_info = get_dynamic_info(document.fileName);\n    }\n    if (dialect_info) {\n        return [dialect_info.delim, dialect_info.policy, comment_prefix];\n    }\n    // The language id can be `dynamic csv` here e.g. if user just now manually selected the \"Dynamic CSV\" filetype.\n    return [null, null, null];\n}\n\n\nfunction enable_rainbow_ui(active_doc) {\n    if (dynamic_dialect_select_button) {\n        dynamic_dialect_select_button.hide();\n    }\n    ll_rainbow_utils().show_lint_status_bar_button(vscode, extension_context, active_doc.fileName, active_doc.languageId);\n    show_rbql_status_bar_button();\n    show_align_shrink_button(active_doc.fileName);\n    show_rainbow_off_status_bar_button();\n    show_rbql_copy_to_source_button(active_doc.fileName);\n    show_column_info_button(); // This function finds active_doc internally, but the possible inconsistency is harmless.\n\n    if (get_from_config('enable_cursor_position_info', false)) {\n        keyboard_cursor_subscription = vscode.window.onDidChangeTextEditorSelection(handle_cursor_movement);\n    }\n}\n\n\nclass StickyHeaderProvider {\n    // We don't utilize typescript `implement` interface keyword, because TS doesn't seem to be exporting interfaces to JS (unlike classes).\n    constructor() {\n    }\n    async provideDocumentSymbols(document) {\n        // This can trigger multiple times for the same doc because otherwise this won't work in case of e.g. header edit.\n        let [_delim, policy, comment_prefix] = get_dialect(document);\n        if (!policy) {\n            return null;\n        }\n        let header_lnum = null;\n        var file_path = document.fileName;\n        if (file_path) {\n            let header_info = get_from_global_state(make_header_key(file_path), null);\n            if (header_info !== null && header_info.header_line_num !== null) {\n                header_lnum = header_info.header_line_num;\n            }\n        }\n\n        if (header_lnum === null) {\n            header_lnum = ll_rainbow_utils().get_header_line(document, comment_prefix)[0];\n        }\n        if (header_lnum === null || header_lnum >= document.lineCount - 1) {\n            return null;\n        }\n        let full_range = new vscode.Range(header_lnum, 0, document.lineCount - 1, 65535);\n        full_range = document.validateRange(full_range); // Just in case, should be always NOOP.\n        let header_range = new vscode.Range(header_lnum, 0, header_lnum, 65535);\n        if (!full_range.contains(header_range)) {\n            return; // Should never happen.\n        }\n        let symbol_kind = vscode.SymbolKind.File; // It is vscode.SymbolKind.File because it shows a nice \"File\" icon in the upper navigational panel. Another nice option is \"Class\".\n        let header_symbol = new vscode.DocumentSymbol('data', '', symbol_kind, full_range, header_range);\n        return [header_symbol];\n    }\n}\n\n\nfunction register_sticky_header_provider(force=false) {\n    if (sticky_header_disposable !== null) {\n        if (force) {\n            sticky_header_disposable.dispose();\n        } else {\n            return;\n        }\n    }\n    // TODO consider enabling the provider unconditionally, consider checking all supported languages and not just csv.\n    let sticky_scroll_enabled = vscode.workspace.getConfiguration('editor.stickyScroll').get('enabled') === true || vscode.workspace.getConfiguration('editor.stickyScroll', {languageId : 'csv'}).get('enabled') === true;\n    if (!sticky_scroll_enabled) {\n        return; // Do not register symbol provider to avoid showing annoying entry in the upper navig bar and other possible side effects.\n    }\n\n    let header_symbol_provider = new StickyHeaderProvider();\n    let document_selector = [];\n    for (let language_id in dialect_map) {\n        if (dialect_map.hasOwnProperty(language_id)) {\n            document_selector.push({language: language_id});\n        }\n    }\n    sticky_header_disposable = vscode.languages.registerDocumentSymbolProvider(document_selector, header_symbol_provider);\n}\n\n\nfunction enable_dynamic_semantic_tokenization() {\n    // Conflict with some other extensions can cause semantic highlighting to completely fail, see https://github.com/mechatroner/vscode_rainbow_csv/issues/149. TODO: Investigate.\n    let token_provider = new RainbowTokenProvider();\n    if (rainbow_token_event !== null) {\n        rainbow_token_event.dispose();\n    }\n    let document_selector = { language: DYNAMIC_CSV }; // Use '*' to select all languages if needed.\n    rainbow_token_event = vscode.languages.registerDocumentRangeSemanticTokensProvider(document_selector, token_provider, tokens_legend);\n}\n\n\nfunction register_comment_tokenization_handler() {\n    let token_provider = new CommentTokenProvider();\n    if (comment_token_event !== null) {\n        comment_token_event.dispose();\n    }\n    let document_selector = [];\n    for (let language_id in dialect_map) {\n        if (dialect_map.hasOwnProperty(language_id) && language_id != DYNAMIC_CSV) {\n            // We skip DYNAMIC_CSV here because its provider already handles comment lines.\n            document_selector.push({language: language_id});\n        }\n    }\n    comment_token_event = vscode.languages.registerDocumentRangeSemanticTokensProvider(document_selector, token_provider, tokens_legend);\n}\n\n\nasync function get_dialect_from_user_dialog() {\n    let title = \"Select separator character or string e.g. `,` or `:=`. For tab use `TAB`\";\n    let input_box_props = {\"prompt\": title, \"value\": ','};\n    let delim = await vscode.window.showInputBox(input_box_props);\n    if (!delim) {\n        return [null, null];\n    }\n    if (delim == 'TAB') {\n        delim = '\\t';\n    }\n    let policy = (delim == ',' || delim == ';') ? QUOTED_RFC_POLICY : SIMPLE_POLICY;\n    return [delim, policy];\n}\n\n\nasync function choose_dynamic_separator() {\n    let active_doc = get_active_doc();\n    if (active_doc.languageId != DYNAMIC_CSV) {\n        show_single_line_error('Dynamic separator can only be adjusted for \"Dynamic CSV\" filetype.');\n        return;\n    }\n    let [delim, policy] = await get_dialect_from_user_dialog();\n    if (!delim) {\n        show_single_line_error('Unable to use empty string separator');\n        return;\n    }\n    await save_dynamic_info(extension_context, active_doc.fileName, make_dialect_info(delim, policy));\n    await enable_rainbow_features_if_csv(active_doc);\n}\n\n\nfunction show_choose_dynamic_separator_button() {\n    if (!dynamic_dialect_select_button)\n        dynamic_dialect_select_button = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n    dynamic_dialect_select_button.text = 'Choose Separator...';\n    dynamic_dialect_select_button.tooltip = 'Click to choose Dynamic CSV separator';\n    dynamic_dialect_select_button.command = 'rainbow-csv.ChooseDynamicSeparator';\n    dynamic_dialect_select_button.show();\n}\n\nasync function try_resolve_incomplete_dynamic_csv_dialect_if_needed(active_doc) {\n    if (!active_doc || !active_doc.fileName) {\n        return;\n    }\n    if (extension_context.dynamic_dialect_for_next_request != null) {\n        // This branch has precedence over regular `get_dialect()` in the next branch because the same temp doc e.g. \"Untitled-1\" can be reused with a different dynamic dialect info that was previously set.\n        await save_dynamic_info(extension_context, active_doc.fileName, extension_context.dynamic_dialect_for_next_request);\n        extension_context.dynamic_dialect_for_next_request = null;\n        return;\n    }\n    let [delim, policy, comment_prefix] = get_dialect(active_doc);\n    if (delim && policy) {\n        return; // All good.\n    }\n    [delim, policy] = await get_dialect_from_user_dialog();\n    if (delim && policy) {\n        await save_dynamic_info(extension_context, active_doc.fileName, make_dialect_info(delim, policy));\n        return;\n    }\n    // Still no luck, show the button so that the user can at least complete the dialog later.\n    show_choose_dynamic_separator_button();\n}\n\n\nasync function enable_rainbow_features_if_csv(active_doc) {\n    if (!is_rainbow_dialect_doc(active_doc)) {\n        return;\n    }\n    if (rainbow_on_status_bar_button) {\n        rainbow_on_status_bar_button.hide();\n    }\n    var language_id = active_doc.languageId;\n    if (language_id == DYNAMIC_CSV) {\n        await try_resolve_incomplete_dynamic_csv_dialect_if_needed(active_doc);\n    }\n    let [delim, policy, comment_prefix] = get_dialect(active_doc);\n    if (!delim || !policy) {\n        // Make sure UI elements are disabled.\n        disable_ui_elements();\n        return;\n    }\n    if (comment_prefix) {\n        // It is currently impoossible to set comment_prefix on document level, so we have to set it on language level instead.\n        // This could potentially cause minor problems in very rare situations.\n        // Applying 'setLanguageConfiguration' doesn't disable static configuration in language-configuration.json.\n        vscode.languages.setLanguageConfiguration(language_id, { comments: { lineComment: comment_prefix } });\n    }\n    if (language_id == DYNAMIC_CSV) {\n        // Re-enable tokenization to explicitly trigger the highligthing. Sometimes this doesn't happen automatically.\n        enable_dynamic_semantic_tokenization();\n    }\n    register_sticky_header_provider();\n    enable_rainbow_ui(active_doc);\n    await csv_lint(active_doc, false);\n}\n\n\nfunction disable_ui_elements() {\n    let all_buttons = [extension_context.lint_status_bar_button, rbql_status_bar_button, rainbow_off_status_bar_button, copy_back_button, align_shrink_button, column_info_button, dynamic_dialect_select_button];\n    for (let i = 0; i < all_buttons.length; i++) {\n        if (all_buttons[i])\n            all_buttons[i].hide();\n    }\n    if (keyboard_cursor_subscription) {\n        keyboard_cursor_subscription.dispose();\n        keyboard_cursor_subscription = null;\n    }\n}\n\n\nfunction disable_rainbow_features_if_non_csv(active_doc) {\n    if (is_rainbow_dialect_doc(active_doc)) {\n        if (rainbow_on_status_bar_button) {\n            rainbow_on_status_bar_button.hide();\n        }\n        return;\n    }\n    if (is_eligible_doc(active_doc) && extension_context.reenable_rainbow_language_infos.has(active_doc.fileName)) {\n        // Show \"Rainbow On\" button. The button will be hidden again if user clicks away by `disable_rainbow_features_if_non_csv`.\n        // Only show for non-rainbow docs since this mechanism can interfere with manual filetype selection UI.\n        show_rainbow_on_status_bar_button();\n    } else {\n        if (rainbow_on_status_bar_button) {\n            rainbow_on_status_bar_button.hide();\n        }\n    }\n    disable_ui_elements();\n}\n\n\nfunction get_active_editor() {\n    var active_window = vscode.window;\n    if (!active_window)\n        return null;\n    var active_editor = active_window.activeTextEditor;\n    if (!active_editor)\n        return null;\n    return active_editor;\n}\n\n\nfunction get_active_doc(active_editor=null) {\n    if (!active_editor)\n        active_editor = get_active_editor();\n    if (!active_editor)\n        return null;\n    var active_doc = active_editor.document;\n    if (!active_doc)\n        return null;\n    return active_doc;\n}\n\n\nfunction is_active_doc(vscode_doc) {\n    let active_doc = get_active_doc();\n    return (active_doc && active_doc.uri && vscode_doc && vscode_doc.uri && active_doc.uri.toString() == vscode_doc.uri.toString());\n}\n\n\nfunction show_align_shrink_button(file_path) {\n    if (!align_shrink_button)\n        align_shrink_button = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n    if (aligned_files.has(file_path)) {\n        align_shrink_button.text = 'Shrink';\n        align_shrink_button.tooltip = 'Click to shrink table (Then you can click again to align)';\n        align_shrink_button.command = 'rainbow-csv.Shrink';\n    } else {\n        align_shrink_button.text = 'Align';\n        align_shrink_button.tooltip = 'Click to align table (Then you can click again to shrink)';\n        align_shrink_button.command = 'rainbow-csv.Align';\n    }\n    align_shrink_button.show();\n}\n\n\nfunction do_show_column_info_button(full_report, short_report) {\n    if (!column_info_button)\n        column_info_button = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 1000);\n    column_info_button.text = short_report;\n    column_info_button.tooltip = full_report;\n    column_info_button.show();\n}\n\n\nfunction make_hover(document, language_id, position, cancellation_token) {\n    if (!get_from_config('enable_tooltip', false)) {\n        return;\n    }\n    let [delim, policy, comment_prefix] = get_dialect(document);\n    let cursor_position_info = ll_rainbow_utils().get_cursor_position_info(vscode, document, delim, policy, comment_prefix, position);\n    if (!cursor_position_info || cancellation_token.isCancellationRequested)\n        return null;\n    let enable_tooltip_column_names = get_from_config('enable_tooltip_column_names', false);\n    let header = get_header(document, delim, policy, comment_prefix);\n    if (!header) {\n        return null;\n    }\n    let [_full_text, short_report] = ll_rainbow_utils().format_cursor_position_info(cursor_position_info, header, enable_tooltip_column_names, /*show_comments=*/true, /*max_label_length=*/25);\n    return new vscode.Hover(short_report);\n}\n\n\nfunction show_column_info_button() {\n    let active_editor = get_active_editor();\n    if (!active_editor) {\n        return false;\n    }\n    let position = ll_rainbow_utils().get_cursor_position_if_unambiguous(active_editor);\n    if (!position) {\n        return false;\n    }\n    let active_doc = get_active_doc(active_editor);\n    let [delim, policy, comment_prefix] = get_dialect(active_doc);\n    let cursor_position_info = ll_rainbow_utils().get_cursor_position_info(vscode, active_doc, delim, policy, comment_prefix, position);\n    if (!cursor_position_info)\n        return false;\n    let enable_tooltip_column_names = get_from_config('enable_tooltip_column_names', false);\n    let header = get_header(active_doc, delim, policy, comment_prefix);\n    if (!header)\n        return false;\n    let [full_report, short_report] = ll_rainbow_utils().format_cursor_position_info(cursor_position_info, header, enable_tooltip_column_names, /*show_comments=*/false, /*max_label_length=*/25);\n    do_show_column_info_button(full_report, short_report);\n    return true;\n}\n\n\nfunction show_rainbow_off_status_bar_button() {\n    if (!rainbow_off_status_bar_button)\n        rainbow_off_status_bar_button = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n    rainbow_off_status_bar_button.text = 'Rainbow OFF';\n    rainbow_off_status_bar_button.tooltip = 'Click to restore original file type and syntax';\n    rainbow_off_status_bar_button.command = 'rainbow-csv.RainbowSeparatorOff';\n    rainbow_off_status_bar_button.show();\n}\n\n\nfunction show_rainbow_on_status_bar_button() {\n    if (!rainbow_on_status_bar_button)\n        rainbow_on_status_bar_button = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n    rainbow_on_status_bar_button.text = 'Rainbow ON';\n    rainbow_on_status_bar_button.tooltip = 'Click to reenable Rainbow CSV for this file';\n    rainbow_on_status_bar_button.command = 'rainbow-csv.RainbowSeparatorOn';\n    rainbow_on_status_bar_button.show();\n}\n\n\nfunction show_rbql_status_bar_button() {\n    if (!rbql_status_bar_button)\n        rbql_status_bar_button = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n    rbql_status_bar_button.text = 'Query';\n    rbql_status_bar_button.tooltip = 'Click to run SQL-like RBQL query';\n    rbql_status_bar_button.command = 'rainbow-csv.RBQL';\n    rbql_status_bar_button.show();\n}\n\n\nfunction show_rbql_copy_to_source_button(file_path) {\n    let parent_table_path = result_set_parent_map.get(safe_lower(file_path));\n    if (!parent_table_path || parent_table_path.indexOf(scratch_buf_marker) != -1)\n        return;\n    let parent_basename = path.basename(parent_table_path);\n    if (!copy_back_button)\n        copy_back_button = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n    copy_back_button.text = 'Copy Back';\n    copy_back_button.tooltip = `Copy to parent table: ${parent_basename}`;\n    copy_back_button.command = 'rainbow-csv.CopyBack';\n    copy_back_button.show();\n}\n\n\nasync function csv_lint(active_doc, is_manual_op) {\n    if (!active_doc)\n        active_doc = get_active_doc();\n    if (!is_rainbow_dialect_doc(active_doc)) {\n        return null;\n    }\n    var file_path = active_doc.fileName; // For new untitled scratch documents this would be \"Untitled-1\", \"Untitled-2\", etc...\n    var language_id = active_doc.languageId;\n    let lint_cache_key = `${file_path}.${language_id}`;\n    if (!is_manual_op) {\n        if (extension_context.lint_results.has(lint_cache_key))\n            return null;\n        if (!get_from_config('enable_auto_csv_lint', false))\n            return null;\n    }\n    let [delim, policy, comment_prefix] = get_dialect(active_doc);\n    if (policy === null)\n        return null;\n    extension_context.lint_results.set(lint_cache_key, {is_processing: true});\n    ll_rainbow_utils().show_lint_status_bar_button(vscode, extension_context, file_path, language_id); // Visual feedback.\n    let detect_trailing_spaces = get_from_config('csv_lint_detect_trailing_spaces', false);\n    let [_records, _num_records_parsed, fields_info, first_defective_line, first_trailing_space_line, _comments] = fast_load_utils.parse_document_records(active_doc, delim, policy, comment_prefix, /*stop_on_warning=*/true, /*max_records_to_parse=*/-1, /*collect_records=*/false, /*preserve_quotes_and_whitespaces=*/true, detect_trailing_spaces);\n    let is_ok = (first_defective_line === null && fields_info.size <= 1);\n    let lint_result = {'is_ok': is_ok, 'first_defective_line': first_defective_line, 'fields_info': fields_info, 'first_trailing_space_line': first_trailing_space_line};\n    extension_context.lint_results.set(lint_cache_key, lint_result);\n    if (is_manual_op) {\n        // Need timeout here to give user enough time to notice green -> yellow -> green switch, this is a sort of visual feedback.\n        await sleep(500);\n    }\n    ll_rainbow_utils().show_lint_status_bar_button(vscode, extension_context, file_path, language_id); // Visual feedback.\n    return lint_result;\n}\n\n\nasync function csv_lint_cmd() {\n    // TODO re-run on each file save with content change.\n    let lint_report_for_unit_tests = await csv_lint(null, true);\n    return lint_report_for_unit_tests;\n}\n\n\nasync function run_internal_test_cmd(integration_test_options) {\n    if (integration_test_options && integration_test_options.check_initialization_state) {\n        // This mode is to ensure that the most basic operations do not cause rainbow csv to load extra (potentially heavy) code.\n        // Vim uses the same approach with its plugin/autoload folder layout design.\n        return {initialized: global_state !== null, lazy_loaded: rainbow_utils !== null};\n    }\n    if (integration_test_options && integration_test_options.check_last_rbql_report) {\n        return _unit_test_last_rbql_report;\n    }\n    if (integration_test_options && integration_test_options.check_last_rbql_warnings) {\n        return {'warnings': _unit_test_last_warnings};\n    }\n    return null;\n}\n\n\nasync function show_warnings(warnings) {\n    _unit_test_last_warnings = [];\n    if (!warnings || !warnings.length)\n        return;\n    var active_window = vscode.window;\n    if (!active_window)\n        return null;\n    for (var i = 0; i < warnings.length; i++) {\n        // Do not \"await\" warning messages because the promise gets resolved only on warning dismissal.\n        active_window.showWarningMessage('RBQL warning: ' + warnings[i]);\n    }\n    _unit_test_last_warnings = warnings;\n}\n\n\nasync function handle_rbql_result_file_node(text_doc, delim, policy, warnings) {\n    try {\n        await vscode.window.showTextDocument(text_doc);\n    } catch (error) {\n        show_single_line_error('Unable to open RBQL result document');\n        return;\n    }\n    let language_id = map_dialect_to_language_id(delim, policy);\n    if (language_id && text_doc.languageId != language_id) {\n        // In non-web version we open a new doc without preset filetype, so we need to manually set it.\n        await vscode.languages.setTextDocumentLanguage(text_doc, language_id);\n    }\n    await show_warnings(warnings);\n}\n\n\nasync function handle_rbql_result_file_web(text_doc, warnings) {\n    try {\n        await vscode.window.showTextDocument(text_doc);\n    } catch (error) {\n        show_single_line_error('Unable to open RBQL result document');\n        return;\n    }\n    await show_warnings(warnings);\n}\n\n\n\nfunction command_async_wrapper(cmd, args) {\n    return new Promise(function (resolve, reject) {\n        let stdout_data = '';\n        let stderr_data = '';\n        let process = child_process.spawn(cmd, args, {'windowsHide': true});\n        process.stdout.on('data', function(data) {\n            stdout_data += data.toString();\n        });\n        process.stderr.on('data', function(data) {\n            stderr_data += data.toString();\n        });\n        process.on('close', function (code) { // Consider replacing 'close' with 'exit'.\n            resolve({'exit_code': code, 'stdout': stdout_data, 'stderr': stderr_data});\n        });\n        process.on('error', function (err) {\n            reject(err);\n        });\n    });\n}\n\n\nfunction get_dst_table_name(input_path, output_delim) {\n    var table_name = path.basename(input_path);\n    var orig_extension = path.extname(table_name);\n    var delim_ext_map = {'\\t': '.tsv', ',': '.csv'};\n    var dst_extension = '.txt';\n    if (delim_ext_map.hasOwnProperty(output_delim)) {\n        dst_extension = delim_ext_map[output_delim];\n    } else if (orig_extension.length > 1) {\n        dst_extension = orig_extension;\n    }\n    let result_table_name = table_name + dst_extension;\n    if (result_table_name == table_name) { // Just being paranoid to avoid overwriting input table accidentally when output dir configured to be the same as input.\n        result_table_name += '.txt';\n    }\n    return result_table_name;\n}\n\n\nfunction file_path_to_query_key(file_path) {\n    return (file_path && file_path.indexOf(scratch_buf_marker) != -1) ? scratch_buf_marker : file_path;\n}\n\nfunction get_dst_table_dir(input_table_path) {\n    let rbql_output_dir = get_from_config('rbql_output_dir', 'TMP');\n    if (rbql_output_dir == 'TMP') {\n        return os.tmpdir();\n    } else if (rbql_output_dir == 'INPUT') {\n        return path.dirname(input_table_path);\n    } else {\n        // Return custom directory. If the directory does not exist or isn't writable RBQL itself will report more or less clear error.\n        return rbql_output_dir;\n    }\n}\n\n\nasync function run_command_and_parse_output(cmd, args) {\n    let execution_result = null;\n    try {\n        execution_result = await command_async_wrapper(cmd, args);\n    } catch (error) {\n        let error_details = error ? error.name + ': ' + error.message : '';\n        let error_msg = 'Something went wrong. Make sure you have python installed and added to PATH variable in your OS. Or you can use it with JavaScript instead - it should work out of the box\\nDetails:\\n' + error_details;\n        return {error_type: 'Integration', error_msg: error_msg};\n    }\n    let json_report = execution_result.stdout;\n    if (!json_report || execution_result.stderr) {\n        let error_msg = execution_result.stderr || 'empty error';\n        return {error_type: 'Integration', error_msg: error_msg};\n    }\n    try {\n        return JSON.parse(json_report);\n    } catch (e) {\n        return {error_type: 'Integration', error_msg: 'Unable to parse JSON report'};\n    }\n}\n\n\nasync function send_report_to_webview(webview, error_type, error_msg) {\n    let report_msg = {'msg_type': 'rbql_report'};\n    if (error_type)\n        report_msg[\"error_type\"] = error_type;\n    if (error_msg)\n        report_msg[\"error_msg\"] = error_msg;\n    _unit_test_last_rbql_report = report_msg;\n    await webview.postMessage(report_msg);\n}\n\n\nasync function run_rbql_query(webview, input_path, csv_encoding, backend_language, rbql_query, output_dialect, with_headers) {\n    // TODO refactor this function.\n    last_rbql_queries.set(file_path_to_query_key(input_path), rbql_query);\n    var cmd = 'python';\n    const test_marker = 'test ';\n    let close_and_error_guard = {'process_reported': false};\n\n    let [input_delim, input_policy, comment_prefix] = [rbql_context.delim, rbql_context.policy, rbql_context.comment_prefix];\n    let [output_delim, output_policy] = [input_delim, input_policy];\n    if (output_dialect == 'csv')\n        [output_delim, output_policy] = [',', QUOTED_POLICY];\n    if (output_dialect == 'tsv')\n        [output_delim, output_policy] = ['\\t', SIMPLE_POLICY];\n    rbql_context.output_delim = output_delim;\n    rbql_context.output_policy = output_policy;\n\n    let output_path = is_web_ext ? null : path.join(get_dst_table_dir(input_path), get_dst_table_name(input_path, output_delim));\n\n    if (rbql_query.startsWith(test_marker)) {\n        if (rbql_query.indexOf('nopython') != -1) {\n            cmd = 'nopython';\n        }\n        let args = [absolute_path_map['rbql mock/rbql_mock.py'], rbql_query];\n        let execution_result = await run_command_and_parse_output(cmd, args);\n        console.log(JSON.stringify(execution_result));\n        if (execution_result.hasOwnProperty('error_type') || execution_result.hasOwnProperty('error_msg')) {\n            await send_report_to_webview(webview, execution_result.error_type, execution_result.error_msg);\n            return;\n        }\n        await send_report_to_webview(webview, null, null);\n        return;\n    }\n    if (backend_language == 'js') {\n        let warnings = [];\n        let result_doc = null;\n        let target_language_id = map_dialect_to_language_id(output_delim, output_policy);\n        try {\n            if (is_web_ext) {\n                let result_lines = await ll_rainbow_utils().rbql_query_web(rbql_query, rbql_context.input_document, input_delim, input_policy, output_delim, output_policy, warnings, with_headers, comment_prefix);\n                let output_doc_cfg = {content: result_lines.join('\\n'), language: target_language_id};\n                if (target_language_id == DYNAMIC_CSV) {\n                    extension_context.dynamic_dialect_for_next_request = make_dialect_info(output_delim, output_policy);\n                }\n                extension_context.autodetection_temporarily_disabled_for_rbql = true;\n                result_doc = await vscode.workspace.openTextDocument(output_doc_cfg);\n                await send_report_to_webview(webview, null, null);\n                await handle_rbql_result_file_web(result_doc, warnings);\n                extension_context.dynamic_dialect_for_next_request = null;\n                extension_context.autodetection_temporarily_disabled_for_rbql = false;\n            } else {\n                let csv_options = {'bulk_read': true};\n                await ll_rainbow_utils().rbql_query_node(global_state, rbql_query, input_path, input_delim, input_policy, output_path, output_delim, output_policy, csv_encoding, warnings, with_headers, comment_prefix, /*user_init_code=*/'', csv_options);\n                result_set_parent_map.set(safe_lower(output_path), input_path);\n                if (target_language_id == DYNAMIC_CSV) {\n                    extension_context.dynamic_dialect_for_next_request = make_dialect_info(output_delim, output_policy);\n                }\n                extension_context.autodetection_temporarily_disabled_for_rbql = true;\n                result_doc = await vscode.workspace.openTextDocument(output_path);\n                await send_report_to_webview(webview, null, null);\n                await handle_rbql_result_file_node(result_doc, output_delim, output_policy, warnings);\n                extension_context.dynamic_dialect_for_next_request = null;\n                extension_context.autodetection_temporarily_disabled_for_rbql = false;\n            }\n        } catch (e) {\n            let [error_type, error_msg] = ll_rbql_csv().exception_to_error_info(e);\n            await send_report_to_webview(webview, error_type, error_msg);\n            return;\n        }\n    } else {\n        if (is_web_ext) {\n            await send_report_to_webview(webview, 'Input error', 'Python backend for RBQL is not supported in web version, please use JavaScript backend.');\n            return;\n        }\n        let cmd_safe_query = Buffer.from(rbql_query, \"utf-8\").toString(\"base64\");\n        if (!comment_prefix) {\n            comment_prefix = '';\n        }\n        let args = [absolute_path_map['rbql_core/vscode_rbql.py'], cmd_safe_query, input_path, input_delim, input_policy, output_path, output_delim, output_policy, comment_prefix, csv_encoding];\n        if (with_headers)\n            args.push('--with_headers');\n        let execution_result = await run_command_and_parse_output(cmd, args);\n        if (execution_result.hasOwnProperty('error_type') || execution_result.hasOwnProperty('error_msg')) {\n            await send_report_to_webview(webview, execution_result.error_type, execution_result.error_msg);\n            return;\n        }\n        await send_report_to_webview(webview, null, null);\n        extension_context.autodetection_stoplist.add(output_path);\n        result_set_parent_map.set(safe_lower(output_path), input_path);\n        extension_context.autodetection_temporarily_disabled_for_rbql = true;\n        let target_language_id = map_dialect_to_language_id(output_delim, output_policy);\n        let output_doc = await vscode.workspace.openTextDocument(output_path);\n        extension_context.autodetection_temporarily_disabled_for_rbql = false;\n        // We need dynamic_dialect_for_next_request here because we can't open the output_doc with DYNAMIC_CSV, it will be switched on doc-ropen.\n        if (target_language_id == DYNAMIC_CSV) {\n            extension_context.dynamic_dialect_for_next_request = make_dialect_info(output_delim, output_policy);\n        }\n        await handle_rbql_result_file_node(output_doc, output_delim, output_policy, execution_result.warnings);\n        extension_context.dynamic_dialect_for_next_request = null;\n    }\n}\n\n\nasync function set_header_line() {\n    let active_editor = get_active_editor();\n    if (!active_editor)\n        return;\n    var active_doc = get_active_doc(active_editor);\n    if (!active_doc)\n        return;\n\n    let [delim, policy, _comment_prefix] = get_dialect(active_doc);\n    if (policy === null) {\n        show_single_line_error('Unable to set header line: no separator specified');\n        return;\n    }\n    let file_path = active_doc.fileName;\n    if (!file_path) {\n        show_single_line_error('Unable to set header line for non-file documents');\n        return;\n    }\n    let selection = active_editor.selection;\n    let header_line = selection.start.line;\n    let raw_header = active_doc.lineAt(header_line).text;\n    let header = csv_utils.smart_split(raw_header, delim, policy, false)[0];\n\n    // The advantage of saving the parsed list of column names is that it would stay consistent even if some lines are added/deleted before the header line (line migration).\n    // The advantage of saving the line number is that it is resilient to modifications of header line itself.\n    // It is also possible to verify consistency of header line and header column names and return null if they are inconsistent and return null.\n    // But discarding the inconsistent header line is probably not very obvious and user-friendly way of handling this.\n    // Showing the inconsistent header is probably better since these column names are only used for UI/readability and a wrong sticky line obviously hints on what happened and how to fix it, while a suddenly disappeared sticky line could be seen as a bug.\n    await save_to_global_state(make_header_key(file_path), {header_line_num: header_line, header: header});\n    // Re-register sticky header provider because otherwise it won't re-generate the symbols unless there were no edits to the file.\n    register_sticky_header_provider(/*force=*/true);\n}\n\n\nfunction preserve_original_language_id_if_needed(file_path, original_language_id, original_language_ids) {\n    if (!file_path) {\n        return;\n    }\n    if (dialect_map.hasOwnProperty(original_language_id)) {\n        // This is to prevent invalid noop \"dynamic csv\" -> \"dynamic csv\" switch without carying dialect info.\n        // And to simplify state management in general by not storing any rainbow dialects.\n        return;\n    }\n    original_language_ids.set(file_path, original_language_id);\n}\n\n\nasync function manually_set_rainbow_separator(policy=null) {\n    // The effect of manually setting the separator will disapear in the preview mode when the file is toggled in preview tab: see https://code.visualstudio.com/docs/getstarted/userinterface#_preview-mode\n    // Also the effect may disappear in case of \"curious doc reopening\" problem, see DEV_README for more info.\n    let active_editor = get_active_editor();\n    if (!active_editor)\n        return;\n    var active_doc = get_active_doc(active_editor);\n    if (!is_eligible_doc(active_doc)) {\n        return;\n    }\n    let selection = active_editor.selection;\n    if (!selection) {\n        show_single_line_error(\"Selection is empty: separator must be selected with the editor cursor\");\n        return;\n    }\n    if (selection.start.line != selection.end.line) {\n        show_single_line_error(\"Rainbow separator must not span multiple lines\");\n        return;\n    }\n    let separator = active_doc.lineAt(selection.start.line).text.substring(selection.start.character, selection.end.character);\n    if (!separator) {\n        show_single_line_error(\"Make nonempty separator selection with the cursor\");\n        return;\n    }\n    if (policy == QUOTED_RFC_POLICY && separator != ',' && separator != ';') {\n        show_single_line_error(\"Only comma and semicolon separators are currently supported to use with multiline fields.\");\n        return;\n    }\n    if (policy === null) {\n        policy = get_default_policy(separator);\n    }\n    let language_id = map_dialect_to_language_id(separator, policy);\n    // Adding to stoplist just in case: this is the manual op, so the user now fully controls the filetype.\n    extension_context.autodetection_stoplist.add(active_doc.fileName);\n    let original_language_id = active_doc.languageId;\n    if (original_language_id == DYNAMIC_CSV && language_id == DYNAMIC_CSV) {\n        // We need to somehow explicitly re-tokenize file, because otherwise setTextDocumentLanguage would be a NO-OP, so we do this workaround with temporarily switching to plaintext and back.\n        extension_context.autodetection_stoplist.add(active_doc.fileName); // This is to avoid potential autodetection in plaintext.\n        extension_context.autodetection_temporarily_disabled_for_rbql = true;\n        active_doc = await vscode.languages.setTextDocumentLanguage(active_doc, 'plaintext');\n        extension_context.autodetection_temporarily_disabled_for_rbql = false;\n    }\n    if (language_id == DYNAMIC_CSV) {\n        await save_dynamic_info(extension_context, active_doc.fileName, make_dialect_info(separator, policy));\n    }\n    let doc = await vscode.languages.setTextDocumentLanguage(active_doc, language_id);\n    preserve_original_language_id_if_needed(doc.fileName, original_language_id, extension_context.original_language_ids);\n}\n\n\nasync function set_comment_prefix() {\n    let active_editor = get_active_editor();\n    if (!active_editor)\n        return;\n    var active_doc = get_active_doc(active_editor);\n    if (!active_doc)\n        return;\n    let selection = active_editor.selection;\n    if (!selection) {\n        show_single_line_error(\"Selection is empty\");\n        return;\n    }\n    let comment_prefix = active_doc.lineAt(selection.start.line).text.substring(selection.start.character, selection.end.character);\n    extension_context.custom_comment_prefixes.set(active_doc.fileName, comment_prefix);\n    if (!comment_prefix) {\n        manual_comment_prefix_stoplist.add(active_doc.fileName);\n    } else {\n        manual_comment_prefix_stoplist.delete(active_doc.fileName);\n    }\n    if (comment_prefix) {\n        vscode.languages.setLanguageConfiguration(active_doc.languageId, { comments: { lineComment: comment_prefix } });\n    }\n    if (active_doc.languageId == DYNAMIC_CSV) {\n        // Re-enable tokenization to explicitly trigger the highligthing. Sometimes this doesn't happen automatically.\n        enable_dynamic_semantic_tokenization();\n    } else {\n        // Re-enable comment tokenization to explicitly adjust the comment highligthing (sometimes to disable it if comment prefix is set to an empty string).\n        register_comment_tokenization_handler();\n    }\n}\n\n\nasync function restore_original_language() {\n    let active_doc = get_active_doc();\n    if (!active_doc)\n        return;\n    let file_path = active_doc.fileName;\n    let original_language_id = 'plaintext';\n    if (extension_context.original_language_ids.has(file_path)) {\n        original_language_id = extension_context.original_language_ids.get(file_path);\n    }\n    if (dialect_map.hasOwnProperty(original_language_id) || !dialect_map.hasOwnProperty(active_doc.languageId)) {\n        show_single_line_error(\"Unable to restore original language\");\n        return;\n    }\n\n    if (file_path) {\n        // Preserve rainbow language info, so that the user can later re-enable it for this file.\n        let current_language_info = {language_id: active_doc.languageId};\n        let dynamic_dialect_info = get_dynamic_info(file_path);\n        if (dynamic_dialect_info) {\n            current_language_info.dynamic_dialect_info = dynamic_dialect_info;\n        }\n        extension_context.reenable_rainbow_language_infos.set(file_path, current_language_info);\n        extension_context.autodetection_stoplist.add(file_path);\n    }\n\n    active_doc = await vscode.languages.setTextDocumentLanguage(active_doc, original_language_id);\n    // There is no onDidChangeActiveTextEditor even for language change so we need to explicitly disable rainbow features.\n    disable_rainbow_features_if_non_csv(active_doc);\n    // The only reason why we might want to clean up dynamic dialect info here is to facilitate triggering dynamic_document_dialect selection UI after manual filetype swith at the later point so that the user could choose a different dynamic dialect without manual selection by cursor / commands.\n    remove_dynamic_info(file_path);\n}\n\n\nasync function reenable_rainbow_language() {\n    var active_doc = get_active_doc();\n    if (!active_doc)\n        return;\n    let file_path = active_doc.fileName;\n    if (!extension_context.reenable_rainbow_language_infos.has(file_path)) {\n        // Make sure we have previous rainbow dialect saved.\n        show_single_line_error(\"Unable to re-enable rainbow highlighting automatically, select filetype manually or select a new separator with cursor.\");\n        return;\n    }\n    let rainbow_language_info = extension_context.reenable_rainbow_language_infos.get(file_path);\n    // Delete from the stoplist to revert \"Rainbow Off\" side-effects.\n    extension_context.autodetection_stoplist.delete(file_path);\n    if (rainbow_language_info.hasOwnProperty('dynamic_dialect_info')) {\n        await save_dynamic_info(extension_context, file_path, rainbow_language_info.dynamic_dialect_info);\n    }\n    // Preserve current (non-rainbow) language id to allow switching between \"Rainbow Off\"/\"Rainbow On\".\n    preserve_original_language_id_if_needed(file_path, active_doc.languageId, extension_context.original_language_ids);\n    // Delete from the \"reenable\" map to hide the \"Rainbow ON\" button on next refresh.\n    extension_context.reenable_rainbow_language_infos.delete(file_path);\n    if (rainbow_on_status_bar_button) {\n        // Hide the button explicitly.\n        rainbow_on_status_bar_button.hide();\n    }\n    let doc = await vscode.languages.setTextDocumentLanguage(active_doc, rainbow_language_info.language_id);\n}\n\n\nasync function set_join_table_name() {\n    if (is_web_ext) {\n        show_single_line_error('This command is currently unavailable in web mode.');\n        return;\n    }\n    var active_doc = get_active_doc();\n    if (!active_doc)\n        return;\n    let file_path = active_doc.fileName;\n    if (!file_path) {\n        show_single_line_error('Unable to use this document as join table');\n        return;\n    }\n    var title = \"Input table name to use in RBQL JOIN expressions instead of table path\";\n    var input_box_props = {\"prompt\": title, \"value\": 'b'};\n    let table_name = await vscode.window.showInputBox(input_box_props);\n    if (!table_name)\n        return; // User pressed Esc and closed the input box.\n    await save_to_global_state(ll_rainbow_utils().make_table_name_key(table_name), file_path);\n}\n\n\nasync function set_virtual_header() {\n    var active_doc = get_active_doc();\n    let [delim, policy, comment_prefix] = get_dialect(active_doc);\n    if (policy === null) {\n        show_single_line_error('Unable to set virtual header: no separator specified');\n        return;\n    }\n    var file_path = active_doc.fileName;\n    if (!file_path) {\n        show_single_line_error('Unable to edit column names for non-file documents');\n        return;\n    }\n    var old_header = get_header(active_doc, delim, policy, comment_prefix);\n    var title = \"Adjust column names displayed in hover tooltips. Actual header line and file content won't be affected.\";\n    var old_header_str = old_header ? quoted_join(old_header, delim) : '';\n    var input_box_props = {\"prompt\": title, \"value\": old_header_str};\n    let raw_new_header = await vscode.window.showInputBox(input_box_props);\n    if (!raw_new_header)\n        return; // User pressed Esc and closed the input box.\n    let new_header = csv_utils.smart_split(raw_new_header, delim, policy, false)[0];\n    await save_to_global_state(make_header_key(file_path), {header_line_num: null, header: new_header});\n}\n\n\nasync function column_edit(edit_mode) {\n    let active_editor = get_active_editor();\n    if (!active_editor)\n        return;\n    let active_doc = active_editor.document;\n    if (!active_doc)\n        return;\n    let [delim, policy, comment_prefix] = get_dialect(active_doc);\n    if (policy === null) {\n        return;\n    }\n    let position = ll_rainbow_utils().get_cursor_position_if_unambiguous(active_editor);\n    if (!position) {\n        show_single_line_error('Unable to enter column edit mode: make sure that no text is selected and only one cursor is active');\n        return;\n    }\n    if (active_doc.lineCount >= 10000) {\n        show_single_line_error('Multicursor column edit works only for files smaller than 10000 lines.');\n        return;\n    }\n    let col_num = (ll_rainbow_utils().get_cursor_position_info(vscode, active_doc, delim, policy, comment_prefix, position)).column_number;\n    let [selections, error_msg, warning_msg] = ll_rainbow_utils().generate_column_edit_selections(vscode, active_doc, delim, policy, comment_prefix, edit_mode, col_num);\n    if (error_msg !== null) {\n        show_single_line_error(error_msg);\n        return;\n    }\n    if (warning_msg) {\n        vscode.window.showWarningMessage(warning_msg);\n    }\n    active_editor.selections = selections;\n    // Call showTextDocument so that the editor will gain focus and the cursors will become active and blinking. This is a critical step here!\n    await vscode.window.showTextDocument(active_doc);\n}\n\n\nasync function shrink_table() {\n    let active_editor = get_active_editor();\n    let active_doc = get_active_doc(active_editor);\n    if (!is_rainbow_dialect_doc(active_doc)) {\n        return;\n    }\n    let [delim, policy, comment_prefix] = get_dialect(active_doc);\n    if (policy === null) {\n        return;\n    }\n    let progress_options = {location: vscode.ProgressLocation.Window, title: 'Rainbow CSV'};\n    await vscode.window.withProgress(progress_options, async (progress) => {\n        await report_progress(progress, 'Preparing');\n        let [shrinked_doc_text, first_failed_line] = ll_rainbow_utils().shrink_columns(active_doc, delim, policy, comment_prefix);\n        if (first_failed_line) {\n            show_single_line_error(`Unable to shrink: Inconsistent double quotes at line ${first_failed_line}`);\n            return;\n        }\n        aligned_files.delete(active_doc.fileName);\n        show_align_shrink_button(active_doc.fileName);\n        if (shrinked_doc_text === null) {\n            vscode.window.showWarningMessage('No trailing whitespaces found, skipping');\n            return;\n        }\n        await report_progress(progress, 'Shrinking columns');\n        await replace_doc_content(active_editor, active_doc, shrinked_doc_text);\n    });\n}\n\n\nasync function align_table() {\n    let active_editor = get_active_editor();\n    let active_doc = get_active_doc(active_editor);\n    if (!is_rainbow_dialect_doc(active_doc))\n        return;\n    let [delim, policy, comment_prefix] = get_dialect(active_doc);\n    if (policy === null) {\n        return;\n    }\n    let progress_options = {location: vscode.ProgressLocation.Window, title: 'Rainbow CSV'};\n    await vscode.window.withProgress(progress_options, async (progress) => {\n        await report_progress(progress, 'Calculating column statistics');\n        let double_width_alignment = get_from_config('double_width_alignment', true);\n        let [column_stats, first_failed_line, records, comments] = ll_rainbow_utils().calc_column_stats(active_doc, delim, policy, comment_prefix, double_width_alignment);\n        if (first_failed_line) {\n            show_single_line_error(`Unable to align: Inconsistent double quotes at line ${first_failed_line}`);\n            return;\n        }\n        column_stats = ll_rainbow_utils().adjust_column_stats(column_stats, delim.length);\n        if (column_stats === null) {\n            show_single_line_error('Unable to allign: Internal Rainbow CSV Error');\n            return;\n        }\n        await report_progress(progress, 'Preparing final alignment');\n        let aligned_doc_text = ll_rainbow_utils().align_columns(records, comments, column_stats, delim);\n\n        await report_progress(progress, 'Aligning columns');\n        let align_in_scratch_file = get_from_config('align_in_scratch_file', false);\n        let is_scratch_file = active_doc.uri && active_doc.uri.scheme == 'untitled';\n        if (align_in_scratch_file && !is_scratch_file) {\n            let aligned_doc_cfg = {content: aligned_doc_text, language: active_doc.languageId};\n            let scratch_doc = await vscode.workspace.openTextDocument(aligned_doc_cfg);\n            aligned_files.add(scratch_doc.fileName);\n            await vscode.window.showTextDocument(scratch_doc);\n            show_align_shrink_button(scratch_doc.fileName); // This is likely redundant but won't hurt.\n        } else {\n            await replace_doc_content(active_editor, active_doc, aligned_doc_text);\n            aligned_files.add(active_doc.fileName);\n            show_align_shrink_button(active_doc.fileName);\n        }\n    });\n}\n\n\nasync function do_copy_back(query_result_doc, active_editor) {\n    let data = query_result_doc.getText();\n    let active_doc = get_active_doc(active_editor);\n    if (!active_doc)\n        return;\n    await replace_doc_content(active_editor, active_doc, data);\n}\n\n\nasync function copy_back() {\n    if (is_web_ext) {\n        show_single_line_error('This command is currently unavailable in web mode.');\n        return;\n    }\n    let result_doc = get_active_doc();\n    if (!result_doc)\n        return;\n    let file_path = result_doc.fileName;\n    let parent_table_path = result_set_parent_map.get(safe_lower(file_path));\n    if (!parent_table_path)\n        return;\n    let parent_doc = await vscode.workspace.openTextDocument(parent_table_path);\n    let parent_editor = await vscode.window.showTextDocument(parent_doc);\n    await do_copy_back(result_doc, parent_editor);\n}\n\n\nasync function update_query_history(query) {\n    let history_list = get_from_global_state('rbql_query_history', []);\n    let old_index = history_list.indexOf(query);\n    if (old_index != -1) {\n        history_list.splice(old_index, 1);\n    } else if (history_list.length >= 20) {\n        history_list.splice(0, 1);\n    }\n    history_list.push(query);\n    await save_to_global_state('rbql_query_history', history_list);\n}\n\n\nasync function handle_rbql_client_message(webview, message, integration_test_options=null) {\n    let message_type = message['msg_type'];\n\n    if (message_type == 'handshake') {\n        var backend_language = get_from_global_state('rbql_backend_language', 'js');\n        var encoding = get_from_global_state('rbql_encoding', 'utf-8');\n        var init_msg = {'msg_type': 'handshake', 'backend_language': backend_language, 'encoding': encoding};\n        ll_rainbow_utils().sample_preview_records_from_context(rbql_context, init_msg, preview_window_size, cached_table_parse_result);\n        let path_key = file_path_to_query_key(rbql_context.input_document_path);\n        if (last_rbql_queries.has(path_key))\n            init_msg['last_query'] = last_rbql_queries.get(path_key);\n        let history_list = get_from_global_state('rbql_query_history', []);\n        init_msg['query_history'] = history_list;\n        init_msg['policy'] = rbql_context.policy;\n        init_msg['with_headers'] = rbql_context.with_headers;\n        init_msg['header_for_ui'] = rbql_context.header_for_ui;\n        init_msg['is_web_ext'] = is_web_ext;\n        if (integration_test_options) {\n            init_msg['integration_test_language'] = integration_test_options.rbql_backend;\n            init_msg['integration_test_query'] = integration_test_options.rbql_query;\n            init_msg['integration_test_with_headers'] = integration_test_options.with_headers || false;\n            init_msg['integration_test_delay'] = integration_test_options.integration_test_delay || 2000;\n        }\n        await webview.postMessage(init_msg);\n    }\n\n    if (message_type == 'fetch_table_header') {\n        try {\n            let table_id = message['table_id'];\n            let encoding = message['encoding'];\n\n            let input_table_dir = rbql_context.input_document_path ? path.dirname(rbql_context.input_document_path) : null;\n            let table_path = ll_rainbow_utils().find_table_path(global_state, input_table_dir, table_id);\n            if (!table_path)\n                return;\n            let header_line = await ll_rainbow_utils().read_header(table_path, encoding);\n            if (!header_line) {\n                return;\n            }\n            let [fields, warning] = csv_utils.smart_split(header_line, rbql_context.delim, rbql_context.policy, false);\n            if (!warning) {\n                webview.postMessage({'msg_type': 'fetch_table_header_response', 'header_for_ui': fields});\n            }\n        } catch (e) {\n            console.error('Unable to get join table header: ' + String(e));\n        }\n    }\n\n    if (message_type == 'update_query') {\n        let rbql_query = message['query'];\n        if (!rbql_query)\n            return;\n        if (rbql_context.input_document_path)\n            last_rbql_queries.set(file_path_to_query_key(rbql_context.input_document_path), rbql_query);\n    }\n\n    if (message_type == 'with_headers_change') {\n        rbql_context.with_headers = message['with_headers'];\n        if (rbql_context.input_document_path)\n            await save_to_global_state(make_with_headers_key(rbql_context.input_document_path), rbql_context.with_headers);\n    }\n\n    if (message_type == 'navigate') {\n        var navig_direction = message['direction'];\n        if (navig_direction == 'backward') {\n            rbql_context.requested_start_record -= preview_window_size;\n        } else if (navig_direction == 'forward') {\n            rbql_context.requested_start_record += preview_window_size;\n        } else if (navig_direction == 'begin') {\n            rbql_context.requested_start_record = 0;\n        } else if (navig_direction == 'end') {\n            rbql_context.requested_start_record = rbql_context.input_document.lineCount; // This is just max possible value which is incorrect and will be adjusted later.\n        }\n        let protocol_message = {'msg_type': 'navigate'};\n        ll_rainbow_utils().sample_preview_records_from_context(rbql_context, protocol_message, preview_window_size, cached_table_parse_result);\n        await webview.postMessage(protocol_message);\n    }\n\n    if (message_type == 'run') {\n        let rbql_query = message['query'];\n        let backend_language = message['backend_language'];\n        let encoding = message['encoding'];\n        let output_dialect = message['output_dialect'];\n        let with_headers = message['with_headers'];\n        await update_query_history(rbql_query);\n        await run_rbql_query(webview, rbql_context.input_document_path, encoding, backend_language, rbql_query, output_dialect, with_headers);\n    }\n\n    if (message_type == 'edit_udf') {\n        if (is_web_ext) {\n            await send_report_to_webview(webview, 'Input error', 'UDFs are currently not supported in web version');\n            return;\n        }\n        let backend_language = message['backend_language'];\n        let udf_file_path = null;\n        let default_content = '';\n        if (backend_language == 'js') {\n            udf_file_path = path.join(os.homedir(), '.rbql_init_source.js');\n            default_content = ll_rainbow_utils().get_default_js_udf_content();\n        } else {\n            udf_file_path = path.join(os.homedir(), '.rbql_init_source.py');\n            default_content = ll_rainbow_utils().get_default_python_udf_content();\n        }\n        if (!fs.existsSync(udf_file_path)) {\n            fs.writeFileSync(udf_file_path, default_content);\n        }\n        let udf_doc = await vscode.workspace.openTextDocument(udf_file_path);\n        await vscode.window.showTextDocument(udf_doc);\n    }\n\n    if (message_type == 'global_param_change') {\n        await save_to_global_state(message['key'], message['value']);\n    }\n}\n\n\nfunction adjust_webview_paths(paths_list, client_html) {\n    for (const local_path of paths_list) {\n        let adjusted_webview_url = null;\n        if (is_web_ext) {\n            adjusted_webview_url = absolute_path_map[local_path];\n        } else {\n            adjusted_webview_url = preview_panel.webview.asWebviewUri(vscode.Uri.file(absolute_path_map[local_path]));\n        }\n        client_html = client_html.replace(`src=\"${local_path}\"`, `src=\"${adjusted_webview_url}\"`);\n    }\n    return client_html;\n}\n\n\nasync function edit_rbql(integration_test_options=null) {\n    let active_window = vscode.window;\n    if (!active_window)\n        return;\n    let active_editor = active_window.activeTextEditor;\n    if (!active_editor)\n        return;\n    let active_doc = active_editor.document;\n    if (!active_doc)\n        return;\n    let orig_uri = active_doc.uri;\n    if (!orig_uri)\n        return;\n    // For web orig_uri.scheme can have other valid values e.g. `vscode-test-web` when testing the browser integration.\n    if (orig_uri.scheme != 'file' && orig_uri.scheme != 'untitled' && !is_web_ext)\n        return;\n    if (orig_uri.scheme == 'file' && active_doc.isDirty && !is_web_ext) {\n        show_single_line_error(\"Unable to run RBQL: file has unsaved changes\");\n        return;\n    }\n    let input_path = null;\n    if (orig_uri.scheme == 'untitled' && !is_web_ext) {\n        // Scheme 'untitled' means that the document is a scratch buffer that hasn't been saved yet, see https://code.visualstudio.com/api/references/document-selector\n        let data = active_doc.getText();\n        let rnd_suffix = String(Math.floor(Math.random() * 1000000));\n        input_path = path.join(os.tmpdir(), `${scratch_buf_marker}_${rnd_suffix}.txt`);\n        // TODO consider adding username to the input_path and using chmod 600 on it.\n        fs.writeFileSync(input_path, data);\n    } else {\n        input_path = active_doc.fileName;\n    }\n\n    if (!input_path) {\n        show_single_line_error(\"Unable to run RBQL for this file\");\n        return;\n    }\n\n    let [delim, policy, comment_prefix] = get_dialect(active_doc);\n    if (policy === null) {\n        policy = 'monocolumn';\n        delim = 'monocolumn';\n    }\n    let with_headers_by_default = get_from_config('rbql_with_headers_by_default', false);\n    let with_headers = get_from_global_state(make_with_headers_key(input_path), with_headers_by_default);\n    let header_for_ui = get_header_from_document(active_doc, delim, policy, comment_prefix);\n    rbql_context = {\n        \"input_document\": active_doc,\n        \"input_document_path\": input_path,\n        \"requested_start_record\": 0,\n        \"delim\": delim,\n        \"policy\": policy,\n        \"comment_prefix\": comment_prefix,\n        \"with_headers\": with_headers,\n        \"header_for_ui\": header_for_ui\n    };\n\n    preview_panel = vscode.window.createWebviewPanel('rbql-console', 'RBQL Console', vscode.ViewColumn.Active, {enableScripts: true});\n    if (!client_html_template) {\n        if (is_web_ext) {\n            client_html_template = client_html_template_web;\n        } else {\n            client_html_template = fs.readFileSync(absolute_path_map['rbql_client.html'], \"utf8\");\n        }\n    }\n    let client_html = client_html_template;\n    client_html = adjust_webview_paths(['contrib/textarea-caret-position/index.js', 'rbql_suggest.js', 'rbql_client.js', 'rbql_logo.svg'], client_html);\n    preview_panel.webview.html = client_html;\n    preview_panel.webview.onDidReceiveMessage(function(message) { handle_rbql_client_message(preview_panel.webview, message, integration_test_options); });\n}\n\n\nfunction autodetect_dialect(config, active_doc, candidate_separators, comment_prefix) {\n    let candidate_dialects = [];\n    for (let separator of candidate_separators) {\n        let policy = get_default_policy(separator);\n        let dialect_id = map_dialect_to_language_id(separator, policy);\n        if (!dialect_id || !policy)\n            continue;\n        candidate_dialects.push([dialect_id, separator, policy]);\n        if (separator == ',' || separator == ';') {\n            candidate_dialects.push([DYNAMIC_CSV, separator, QUOTED_RFC_POLICY]);\n        }\n    }\n    let detect_trailing_spaces = get_from_config('csv_lint_detect_trailing_spaces', false, config);\n    let min_num_lines = get_from_config('autodetection_min_line_count', 10, config);\n    if (active_doc.lineCount < min_num_lines)\n        return [null, null, null];\n    let [best_dialect, best_separator, best_policy, best_dialect_first_trailing_space_line] = [null, null, null, null];\n    let best_dialect_num_columns = 1;\n    for (let candidate_dialect of candidate_dialects) {\n        let [dialect_id, separator, policy] = candidate_dialect;\n        let [_records, num_records_parsed, fields_info, first_defective_line, first_trailing_space_line, _comments] = fast_load_utils.parse_document_records(active_doc, separator, policy, comment_prefix, /*stop_on_warning=*/true, /*max_records_to_parse=*/-1, /*collect_records=*/false, /*preserve_quotes_and_whitespaces=*/true, detect_trailing_spaces, /*min_num_fields_for_autodetection=*/best_dialect_num_columns + 1);\n        if (first_defective_line !== null || fields_info.size != 1)\n            continue;\n        if (num_records_parsed < min_num_lines) {\n            // Ensure that min_num_lines also applies to number of parsed records. There could be a discrepancy between number of lines and records due to comment lines and/or multiline rfc records.\n            continue;\n        }\n        let num_columns = Array.from(fields_info.keys())[0];\n        if (num_columns >= best_dialect_num_columns + 1) {\n            best_dialect_num_columns = num_columns;\n            [best_dialect, best_separator, best_policy] = [dialect_id, separator, policy];\n            best_dialect_first_trailing_space_line = first_trailing_space_line;\n        }\n    }\n    return [best_dialect, best_separator, best_policy, best_dialect_first_trailing_space_line];\n}\n\n\nfunction autodetect_dialect_frequency_based(active_doc, candidate_separators, max_num_chars_to_test) {\n    let [best_dialect, best_separator, best_policy] = ['csv', ',', QUOTED_POLICY];\n    let best_dialect_frequency = 0;\n    let data = active_doc.getText();\n    if (!data)\n        return [best_dialect, best_separator, best_policy];\n    for (let separator of candidate_separators) {\n        if (separator == ' ' || separator == '.')\n            continue; // Whitespace and dot have advantage over other separators in this algorithm, so we just skip them.\n        let frequency = 0;\n        for (let j = 0; j < max_num_chars_to_test && j < data.length; j++) {\n            if (data[j] == separator)\n                frequency += 1;\n        }\n        if (frequency > best_dialect_frequency) {\n            let policy = get_default_policy(separator);\n            let dialect_id = map_dialect_to_language_id(separator, policy);\n            [best_dialect, best_separator, best_policy] = [dialect_id, separator, policy];\n            best_dialect_frequency = frequency;\n        }\n    }\n    return [best_dialect, best_separator, best_policy];\n}\n\n\nasync function try_autodetect_and_set_rainbow_filetype(vscode, config, extension_context, active_doc) {\n    // VSCode to some extent is capable of \"remembering\" doc id in the previous invocation, at least when used in debug mode.\n\n    // VSCode may (and will?) forget documentId of a document \"A\" if document \"B\" is opened in the tab where \"A\" was (double VS single click in file browser panel).\n    // see https://code.visualstudio.com/docs/getstarted/userinterface#_preview-mode\n    if (extension_context.autodetection_temporarily_disabled_for_rbql)\n        return active_doc;\n    if (!is_eligible_doc(active_doc)) {\n        return active_doc;\n    }\n    if (!get_from_config('enable_separator_autodetection', false, config))\n        return active_doc;\n    var file_path = active_doc.fileName;\n    if (extension_context.autodetection_stoplist.has(file_path)) {\n        return active_doc;\n    }\n    var original_language_id = active_doc.languageId;\n    let is_default_csv = (file_path.endsWith('.csv') || file_path.endsWith('.CSV')) && original_language_id == 'csv';\n    if (original_language_id != 'plaintext' && !is_default_csv)\n        return active_doc;\n\n    let candidate_separators = get_from_config('autodetect_separators', [], config).map((s) => s === 'TAB' ? '\\t' : s);\n    if (!dialect_map.hasOwnProperty(original_language_id) &&\n        last_closed_rainbow_doc_info &&\n        last_closed_rainbow_doc_info.file_path === file_path &&\n        Math.abs(Date.now() - last_closed_rainbow_doc_info.timestamp) < 1000) {\n        // The same file was recently closed with rainbow dialect and re-opened as another filetype, most likely manual language switch, do not autodetect.\n        // Do not add to autodetection_stoplist because it goes against VSCode approach to discard all language mode state on reopen.\n        // Also adding to autodetection_stoplist would make \"curious doc reopening\" problem worse.\n        // Do not initialize \"Rainbow ON\" because either it was already enabled or user goes through the native UI and therefore showing Rainbow ON is not idiomatic/consistent/relevant.\n        return active_doc;\n    }\n\n    let comment_prefix_for_autodetection = get_from_config('comment_prefix', '', config) || '#'; // Assume '#' as a comment prefix for autodetection purposes only.\n    let [rainbow_csv_language_id, delim, policy, first_trailing_space_line] = autodetect_dialect(config, active_doc, candidate_separators, comment_prefix_for_autodetection);\n    if (rainbow_csv_language_id) {\n        // Add the file to lint results to avoid re-parsing it with CSV Lint later.\n        extension_context.lint_results.set(`${file_path}.${rainbow_csv_language_id}`, {'is_ok': true, 'first_trailing_space_line': first_trailing_space_line});\n    } else if (!rainbow_csv_language_id && is_default_csv) {\n        // Smart autodetection method has failed, but we need to choose a separator because this is a csv file. Let's just find the most popular one within the first N characters.\n        [rainbow_csv_language_id, delim, policy] = autodetect_dialect_frequency_based(active_doc, candidate_separators, /*max_num_chars_to_test=*/10000);\n    }\n    if (!rainbow_csv_language_id)\n        return active_doc;\n    // Intentionally do not store comment prefix used for autodetection in the dialect info since it is not file-specific anyway and is stored in the settings.\n    // And in case if user changes it in the settings it would immediately affect the autodetected files.\n    if (rainbow_csv_language_id == DYNAMIC_CSV) {\n        await save_dynamic_info(extension_context, file_path, make_dialect_info(delim, policy), extension_context);\n    }\n    if (rainbow_csv_language_id == original_language_id)\n        return active_doc;\n\n    // We can't add the doc path to autodetection_stoplist here (for autodetect-once semantic)\n    // because the doc could be in preview mode and VSCode won't remember language_id so we might need to autodetect it again later.\n\n    preserve_original_language_id_if_needed(file_path, original_language_id, extension_context.original_language_ids);\n    let doc = await vscode.languages.setTextDocumentLanguage(active_doc, rainbow_csv_language_id);\n    return doc;\n}\n\n\nasync function handle_first_edit_for_an_empty_doc(change_event) {\n    if (!change_event)\n        return;\n    if (doc_first_edit_subscription) {\n        doc_first_edit_subscription.dispose();\n        doc_first_edit_subscription = null;\n    }\n    await try_autodetect_and_set_rainbow_filetype(vscode, vscode.workspace.getConfiguration('rainbow_csv'), extension_context, change_event.document);\n}\n\n\nasync function handle_editor_switch(editor) {\n    // This event is not triggered when language mode is changed.\n    // We need this handler to hide and show UI elements when user switches between the doc tabs.\n    // When the file is larger than 50MB, editor and active_doc are null/undefined.\n    let active_doc = get_active_doc(editor);\n    // When switching between the open non-preview doc tabs the doc open/close events are (typically) not triggered for the actual files (exception is \"curious doc reopening\" problem, see DEV_README.md)\n    // but open and close events could (and will) be triggered for some virtual files e.g. paired files with .git scheme.\n    disable_rainbow_features_if_non_csv(active_doc);\n    await enable_rainbow_features_if_csv(active_doc); // No-op if non-csv.\n}\n\n\nfunction do_handle_cursor_movement() {\n    if (!show_column_info_button() && column_info_button) {\n        column_info_button.hide();\n    }\n}\n\n\nfunction handle_cursor_movement(_unused_cursor_event) {\n    if (cursor_timeout_handle !== null) {\n        clearTimeout(cursor_timeout_handle);\n    }\n    // We need timeout delay here to deduplicate/debounce events from multiple consecutive movements, see https://stackoverflow.com/a/49050990/2898283.\n    cursor_timeout_handle = setTimeout(() => do_handle_cursor_movement(), 10);\n}\n\n\nasync function handle_doc_open(new_doc) {\n    // The onDidOpenTextDocument handler will trigger for already \"opened\" docs too if they are re-opened in the same tab. Example\n    // Document \"A\" opens in tab1 -> triggers onDidOpenTextDocument\n    // Document \"B\" opens in tab1 -> triggers onDidOpenTextDocument  (this could happen if user clicks on document \"B\" in the left file browser panel)\n    // Document \"A\" opens in tab1 -> triggers onDidOpenTextDocument again! The previous languageId is reset.\n    // In other words if user opens a different document in the same tab (single click VS double click in the file browser panel) it may trigger the curent document closing and opening of a new doc.\n    // This behavior is called Preview Mode, see https://vscode.one/new-tab-vscode/ and https://code.visualstudio.com/docs/getstarted/userinterface#_preview-mode\n\n    if (!is_eligible_doc(new_doc)) {\n        return;\n    }\n\n    // Register a handler for copy-pasting CSV-formated data into an empty doc. Empty docs have lineCount equal 1.\n    if (get_from_config('enable_separator_autodetection', false) && doc_first_edit_subscription === null && new_doc.isUntitled && new_doc.lineCount <= 1) {\n        doc_first_edit_subscription = vscode.workspace.onDidChangeTextDocument(handle_first_edit_for_an_empty_doc);\n        return;\n    }\n\n    new_doc = await try_autodetect_and_set_rainbow_filetype(vscode, vscode.workspace.getConfiguration('rainbow_csv'), extension_context, new_doc);\n    // There might be some redundancy between this code and onDidChangeActiveTextEditor handler, but this actually desired as long as methods are idempotent.\n    // It is much better to do the same thing twice (if it is idempotent) to ensure the required behavior than rely on assumptions about external VSCode mechanisms (aka Defensive Programming).\n    if (is_active_doc(new_doc)) {\n        disable_rainbow_features_if_non_csv(new_doc); // We need this to handle manual switch from csv to txt, this would immediately remove UI elements, that would stay otherwise.\n        await enable_rainbow_features_if_csv(new_doc); // No-op if non-csv.\n    }\n}\n\n\nasync function handle_doc_close(doc_to_close) {\n    // NOTE: Closing of doc A (csv) followed by opening of the same doc A (non-csv) can also be caused by the \"curious doc reopening\" problem, see DEV_README.md.\n\n    // This is a workaround hack to prevent repeated autodetection on csv -> txt language switch.\n    // In that case a csv file will be closed and shortly after a txt file with the same path will be opened, so we don't want to apply autodetection to it.\n    // This will also trigger when virtual docs (e.g. `.git` pairs) are closed, but it is probably fine to reset last_closed_rainbow_doc_info in that case.\n    if (!is_rainbow_dialect_doc(doc_to_close)) {\n        last_closed_rainbow_doc_info = null;\n        return;\n    }\n    last_closed_rainbow_doc_info = {file_path: doc_to_close.fileName, timestamp: Date.now()};\n\n    if (is_active_doc(doc_to_close)) {\n        // In order to disable elements we need to check that the closed rainbow doc is in fact active doc to avoid removing UI when a non-focused CSV or non-csv file is being closed.\n        // Inactive CSV closing can happen in the background if user closes with \"x\" top-right corner button another inactive tab with another CSV file.\n        disable_ui_elements();\n    }\n}\n\n\nfunction quote_field(field, delim) {\n    if (field.indexOf('\"') != -1 || field.indexOf(delim) != -1) {\n        return '\"' + field.replace(/\"/g, '\"\"') + '\"';\n    }\n    return field;\n}\n\n\nfunction quoted_join(fields, delim) {\n    var quoted_fields = fields.map(function(val) { return quote_field(val, delim); });\n    return quoted_fields.join(delim);\n}\n\n\nasync function make_preview(uri, preview_mode) {\n    if (is_web_ext) {\n        show_single_line_error('This command is currently unavailable in web mode.');\n        return;\n    }\n    var file_path = uri.fsPath;\n    if (!file_path || !fs.existsSync(file_path)) {\n        vscode.window.showErrorMessage('Invalid file');\n        return;\n    }\n\n    var size_limit = 1024000; // ~1MB\n    var file_size_in_bytes = fs.statSync(file_path)['size'];\n    if (file_size_in_bytes <= size_limit) {\n        vscode.window.showWarningMessage('Rainbow CSV: The file is not big enough, showing the full file instead. Use this preview for files larger than 1MB');\n        let full_orig_doc = await vscode.workspace.openTextDocument(file_path);\n        await vscode.window.showTextDocument(full_orig_doc);\n        return;\n    }\n\n    let file_basename = path.basename(file_path);\n    const out_path = path.join(os.tmpdir(), `.rb_csv_preview.${preview_mode}.${file_basename}`);\n\n    fs.open(file_path, 'r', (err, fd) => {\n        if (err) {\n            console.log(err.message);\n            vscode.window.showErrorMessage('Unable to preview file');\n            return;\n        }\n\n        var buffer = Buffer.alloc(size_limit);\n        let read_begin_pos = preview_mode == 'head' ? 0 : Math.max(file_size_in_bytes - size_limit, 0);\n        fs.read(fd, buffer, 0, size_limit, read_begin_pos, function(err, _num) {\n            if (err) {\n                console.log(err.message);\n                vscode.window.showErrorMessage('Unable to preview file');\n                return;\n            }\n\n            const buffer_str = buffer.toString();\n            // TODO handle old mac '\\r' line endings - still used by Mac version of Excel.\n            let content = null;\n            if (preview_mode == 'head') {\n                content = buffer_str.substr(0, buffer_str.lastIndexOf(buffer_str.includes('\\r\\n') ? '\\r\\n' : '\\n'));\n            } else {\n                content = buffer_str.substr(buffer_str.indexOf('\\n') + 1);\n            }\n            fs.writeFileSync(out_path, content);\n            vscode.workspace.openTextDocument(out_path).then(doc => vscode.window.showTextDocument(doc));\n        });\n    });\n}\n\n\nfunction register_csv_hover_info_provider(language_id, context) {\n    let hover_provider = vscode.languages.registerHoverProvider(language_id, {\n        provideHover(document, position, token) {\n            return make_hover(document, language_id, position, token);\n        }\n    });\n    context.subscriptions.push(hover_provider);\n}\n\n\nclass RainbowTokenProvider {\n    // We don't utilize typescript `implement` interface keyword, because TS doesn't seem to be exporting interfaces to JS (unlike classes).\n    constructor() {\n    }\n    async provideDocumentRangeSemanticTokens(document, range, _token) {\n        let [delim, policy, comment_prefix] = get_dialect(document);\n        if (!policy || document.languageId != DYNAMIC_CSV) {\n            return null;\n        }\n        let table_ranges = ll_rainbow_utils().parse_document_range(vscode, document, delim, policy, comment_prefix, range);\n        // Create a new builder to clear the previous tokens.\n        const builder = new vscode.SemanticTokensBuilder(tokens_legend);\n        for (let row_info of table_ranges) {\n            if (row_info.hasOwnProperty('comment_range')) {\n                builder.push(row_info.comment_range, 'comment');\n            } else {\n                for (let col_num = 0; col_num < row_info.record_ranges.length; col_num++) {\n                    for (let record_range of row_info.record_ranges[col_num]) {\n                        // One logical field can map to multiple tokens if it spans multiple lines because VSCode doesn't support multiline tokens.\n                        builder.push(record_range, tokenTypes[col_num % tokenTypes.length]);\n                    }\n                }\n            }\n        }\n        return builder.build();\n    }\n}\n\n\nclass CommentTokenProvider {\n    constructor() {\n    }\n    async provideDocumentRangeSemanticTokens(doc, range, _token) {\n        let [_delim, policy, comment_prefix] = get_dialect(doc);\n        if (manual_comment_prefix_stoplist.has(doc.fileName) && !comment_prefix) {\n            // We can't use empty comment prefix (and early return) - in that case the previous highlighting would not go away due to a VSCode quirk, need to make an empty build instead to make sure that all previously highlighted lines were cleared.\n            comment_prefix = '#####COMMENT_PREFIX_THAT_CAN_NOT_OCCURE_IN_A_NORMAL_FILE_AND_EVEN_IF_IT_OCCURES_NOT_A_BIG_DEAL####';\n        }\n        if (!comment_prefix || policy === null || policy == QUOTED_RFC_POLICY) {\n            return null; // Sanity check: with QUOTED_RFC_POLICY we should be using a different tokenizer which also handles comments.\n        }\n        // Create a new builder to clear the previous tokens.\n        const builder = new vscode.SemanticTokensBuilder(tokens_legend);\n        let begin_line = Math.max(0, range.start.line - dynamic_csv_highlight_margin);\n        let end_line = Math.min(doc.lineCount, range.end.line + dynamic_csv_highlight_margin);\n        for (let lnum = begin_line; lnum < end_line; lnum++) {\n            let line_text = doc.lineAt(lnum).text;\n            if (line_text.startsWith(comment_prefix)) {\n                builder.push(new vscode.Range(lnum, 0, lnum, line_text.length), 'comment');\n            }\n        }\n        return builder.build();\n    }\n}\n\n\nasync function activate(context) {\n    // TODO consider storing `context` itself in a global variable.\n    global_state = context.globalState;\n\n    if (is_web_ext) {\n        let rbql_client_uri = vscode.Uri.joinPath(context.extensionUri, 'rbql_client.html');\n        let bytes = await vscode.workspace.fs.readFile(rbql_client_uri);\n        // Using TextDecoder because it should work fine in web extension.\n        client_html_template_web = new TextDecoder().decode(bytes);\n    }\n\n    for (let local_path in absolute_path_map) {\n        if (absolute_path_map.hasOwnProperty(local_path)) {\n            if (is_web_ext) {\n                absolute_path_map[local_path] = vscode.Uri.joinPath(context.extensionUri, local_path);\n            } else {\n                absolute_path_map[local_path] = context.asAbsolutePath(local_path);\n            }\n        }\n    }\n\n    if (get_from_config('enable_tooltip', false)) {\n        for (let language_id in dialect_map) {\n            if (dialect_map.hasOwnProperty(language_id)) {\n                register_csv_hover_info_provider(language_id, context);\n            }\n        }\n    }\n\n    var lint_cmd = vscode.commands.registerCommand('rainbow-csv.CSVLint', csv_lint_cmd);\n    var rbql_cmd = vscode.commands.registerCommand('rainbow-csv.RBQL', edit_rbql);\n    var set_header_line_cmd = vscode.commands.registerCommand('rainbow-csv.SetHeaderLine', set_header_line);\n    var set_comment_prefix_cmd = vscode.commands.registerCommand('rainbow-csv.SetCommentPrefix', set_comment_prefix);\n    var edit_column_names_cmd = vscode.commands.registerCommand('rainbow-csv.SetVirtualHeader', set_virtual_header);\n    var set_join_table_name_cmd = vscode.commands.registerCommand('rainbow-csv.SetJoinTableName', set_join_table_name); // WEB_DISABLED\n    var column_edit_before_cmd = vscode.commands.registerCommand('rainbow-csv.ColumnEditBefore', async function() { await column_edit('ce_before'); });\n    var choose_dynamic_separator_cmd = vscode.commands.registerCommand('rainbow-csv.ChooseDynamicSeparator', async function() { await choose_dynamic_separator(); });\n    var column_edit_after_cmd = vscode.commands.registerCommand('rainbow-csv.ColumnEditAfter', async function() { await column_edit('ce_after'); });\n    var column_edit_select_cmd = vscode.commands.registerCommand('rainbow-csv.ColumnEditSelect', async function() { await column_edit('ce_select'); });\n    var set_separator_cmd = vscode.commands.registerCommand('rainbow-csv.RainbowSeparator', () => { manually_set_rainbow_separator(/*policy=*/null); });\n    var set_separator_multiline_cmd = vscode.commands.registerCommand('rainbow-csv.RainbowSeparatorMultiline', () => { manually_set_rainbow_separator(QUOTED_RFC_POLICY); });\n    var rainbow_off_cmd = vscode.commands.registerCommand('rainbow-csv.RainbowSeparatorOff', restore_original_language);\n    var rainbow_on_cmd = vscode.commands.registerCommand('rainbow-csv.RainbowSeparatorOn', reenable_rainbow_language);\n    var sample_head_cmd = vscode.commands.registerCommand('rainbow-csv.SampleHead', async function(uri) { await make_preview(uri, 'head'); }); // WEB_DISABLED\n    var sample_tail_cmd = vscode.commands.registerCommand('rainbow-csv.SampleTail', async function(uri) { await make_preview(uri, 'tail'); }); // WEB_DISABLED\n    var align_cmd = vscode.commands.registerCommand('rainbow-csv.Align', align_table);\n    var shrink_cmd = vscode.commands.registerCommand('rainbow-csv.Shrink', shrink_table);\n    var copy_back_cmd = vscode.commands.registerCommand('rainbow-csv.CopyBack', copy_back); // WEB_DISABLED\n    var internal_test_cmd = vscode.commands.registerCommand('rainbow-csv.InternalTest', run_internal_test_cmd);\n\n    var doc_open_event = vscode.workspace.onDidOpenTextDocument(handle_doc_open);\n    var doc_close_event = vscode.workspace.onDidCloseTextDocument(handle_doc_close);\n    var switch_event = vscode.window.onDidChangeActiveTextEditor(handle_editor_switch);\n\n    enable_dynamic_semantic_tokenization();\n\n    if (get_from_config('comment_prefix', null)) {\n        register_comment_tokenization_handler();\n    }\n\n    // The only purpose to add the entries to context.subscriptions is to guarantee their disposal during extension deactivation\n    context.subscriptions.push(lint_cmd);\n    context.subscriptions.push(rbql_cmd);\n    context.subscriptions.push(edit_column_names_cmd);\n    context.subscriptions.push(column_edit_before_cmd);\n    context.subscriptions.push(column_edit_after_cmd);\n    context.subscriptions.push(column_edit_select_cmd);\n    context.subscriptions.push(set_separator_cmd);\n    context.subscriptions.push(set_separator_multiline_cmd);\n    context.subscriptions.push(rainbow_off_cmd);\n    context.subscriptions.push(rainbow_on_cmd);\n    context.subscriptions.push(sample_head_cmd);\n    context.subscriptions.push(sample_tail_cmd);\n    context.subscriptions.push(set_join_table_name_cmd);\n    context.subscriptions.push(align_cmd);\n    context.subscriptions.push(shrink_cmd);\n    context.subscriptions.push(copy_back_cmd);\n    context.subscriptions.push(set_header_line_cmd);\n    context.subscriptions.push(set_comment_prefix_cmd);\n    context.subscriptions.push(internal_test_cmd);\n    context.subscriptions.push(choose_dynamic_separator_cmd);\n\n    context.subscriptions.push(doc_open_event);\n    context.subscriptions.push(doc_close_event);\n    context.subscriptions.push(switch_event);\n\n\n    // Need this because \"onDidOpenTextDocument()\" doesn't get called for the first open document.\n    // Another issue is when dev debug logging mode is enabled, the first document would be \"Log\" because it is printing something and gets VSCode focus.\n    await sleep(1000);\n    let active_doc = get_active_doc();\n    handle_doc_open(active_doc);\n}\n\n\nfunction deactivate() {\n    // This method is called when extension is deactivated.\n}\n\n\nexports.activate = activate;\nexports.deactivate = deactivate;\n\n// Exports just for unit tests:\nexports.autodetect_dialect_frequency_based = autodetect_dialect_frequency_based;\nexports.try_autodetect_and_set_rainbow_filetype = try_autodetect_and_set_rainbow_filetype;\n","// This file stores only functionality that is required for idle operation of Rainbow CSV i.e. autodetection only.\n// We want to avoid loading/parsing a lot of JS code in cases where we don't have any CSV files to work with.\n\nconst csv_utils = require('./rbql_core/rbql-js/csv_utils.js');\n\nclass AssertionError extends Error {}\n\nfunction assert(condition, message=null) {\n    if (!condition) {\n        if (!message) {\n            message = 'Assertion error';\n        }\n        throw new AssertionError(message);\n    }\n}\n\nclass RecordTextConsumer {\n    // The only purpose of this class is to avoid code duplication when dealing with leftover lines in line_aggregator (the second `consume` call).\n    constructor(delim, policy, stop_on_warning, collect_records, preserve_quotes_and_whitespaces, detect_trailing_spaces, min_num_fields_for_autodetection) {\n        this.delim = delim;\n        this.policy = policy;\n        this.stop_on_warning = stop_on_warning;\n        this.first_defective_line = null;\n        this.records = collect_records ? [] : null;\n        this.collect_records = collect_records;\n        this.num_records_parsed = 0;\n        this.fields_info = new Map();\n        this.first_trailing_space_line = null;\n        this.detect_trailing_spaces = detect_trailing_spaces;\n        this.preserve_quotes_and_whitespaces = preserve_quotes_and_whitespaces;\n        this.min_num_fields_for_autodetection = min_num_fields_for_autodetection;\n    }\n\n    consume(record_text, record_start_line) {\n        let [record, warning] = csv_utils.smart_split(record_text, this.delim, this.policy, this.preserve_quotes_and_whitespaces);\n        if (warning) {\n            if (this.first_defective_line === null) {\n                this.first_defective_line = record_start_line;\n            }\n            if (this.stop_on_warning)\n                return /*can_continue=*/false;\n        }\n        if (this.detect_trailing_spaces && this.first_trailing_space_line === null) {\n            for (let field of record) {\n                if (field.length && (field.charAt(0) == ' ' || field.charAt(field.length - 1) == ' ')) {\n                    this.first_trailing_space_line = record_start_line;\n                }\n            }\n        }\n        if (!this.fields_info.has(record.length)) {\n            this.fields_info.set(record.length, this.num_records_parsed);\n            if (this.min_num_fields_for_autodetection != -1) {\n                // Autodetection mode: stop on inconsistent records length and when there is not enough columns (typically less than 2 i.e. 1).\n                if (record.length < this.min_num_fields_for_autodetection)\n                    return /*can_continue=*/false;\n                if (this.fields_info.size > 1)\n                    return /*can_continue=*/false;\n            }\n        }\n        if (this.collect_records) {\n            this.records.push(record);\n        }\n        this.num_records_parsed += 1;\n        return /*can_continue=*/true;\n    }\n}\n\n\nfunction parse_document_records(document, delim, policy, comment_prefix=null, stop_on_warning=false, max_records_to_parse=-1, collect_records=true, preserve_quotes_and_whitespaces=false, detect_trailing_spaces=false, min_num_fields_for_autodetection=-1) {\n    let num_lines = document.lineCount;\n    let record_start_line = 0;\n    let line_aggregator = new csv_utils.MultilineRecordAggregator(comment_prefix);\n    let consumer = new RecordTextConsumer(delim, policy, stop_on_warning, collect_records, preserve_quotes_and_whitespaces, detect_trailing_spaces, min_num_fields_for_autodetection);\n    let comments = []; // An ordered list of {record_no, comment_text} tuples which can be merged with the records later.\n\n    for (let lnum = 0; lnum < num_lines; ++lnum) {\n        let line_text = document.lineAt(lnum).text;\n        if (lnum + 1 >= num_lines && line_text == \"\") {\n            if (collect_records) {\n                // Treat the last empty line as a comment - this is to prevent align/shrink functions from removing it.\n                comments.push({record_num: consumer.num_records_parsed, comment_text: line_text});\n            }\n            break; // Skip the last empty line.\n        }\n        let record_text = null;\n        if (policy == 'quoted_rfc') {\n            line_aggregator.add_line(line_text);\n            if (line_aggregator.has_comment_line) {\n                record_start_line = lnum + 1;\n                line_aggregator.reset();\n                if (collect_records) {\n                    comments.push({record_num: consumer.num_records_parsed, comment_text: line_text});\n                }\n                continue;\n            } else if (line_aggregator.has_full_record) {\n                record_text = line_aggregator.get_full_line('\\n');\n                line_aggregator.reset();\n            } else {\n                continue;\n            }\n        } else {\n            if (comment_prefix && line_text.startsWith(comment_prefix)) {\n                record_start_line = lnum + 1;\n                if (collect_records) {\n                    comments.push({record_num: consumer.num_records_parsed, comment_text: line_text});\n                }\n                continue;\n            } else {\n                record_text = line_text;\n            }\n        }\n        if (!consumer.consume(record_text, record_start_line)) {\n            return [consumer.records, consumer.num_records_parsed, consumer.fields_info, consumer.first_defective_line, consumer.first_trailing_space_line, comments];\n        }\n        record_start_line = lnum + 1;\n        if (max_records_to_parse !== -1 && consumer.num_records_parsed >= max_records_to_parse) {\n            return [consumer.records, consumer.num_records_parsed, consumer.fields_info, consumer.first_defective_line, consumer.first_trailing_space_line, comments];\n        }\n    }\n\n    if (line_aggregator.is_inside_multiline_record()) {\n        assert(policy == 'quoted_rfc');\n        consumer.consume(line_aggregator.get_full_line('\\n'), record_start_line);\n    }\n    return [consumer.records, consumer.num_records_parsed, consumer.fields_info, consumer.first_defective_line, consumer.first_trailing_space_line, comments];\n}\n\n\nmodule.exports.parse_document_records = parse_document_records;\nmodule.exports.assert = assert;\n","// Currently in sync with Node.js lib/assert.js\n// https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b\n\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nvar _require = require('./internal/errors'),\n  _require$codes = _require.codes,\n  ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT,\n  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n  ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE,\n  ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE,\n  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;\nvar AssertionError = require('./internal/assert/assertion_error');\nvar _require2 = require('util/'),\n  inspect = _require2.inspect;\nvar _require$types = require('util/').types,\n  isPromise = _require$types.isPromise,\n  isRegExp = _require$types.isRegExp;\nvar objectAssign = require('object.assign/polyfill')();\nvar objectIs = require('object-is/polyfill')();\nvar RegExpPrototypeTest = require('call-bind/callBound')('RegExp.prototype.test');\nvar errorCache = new Map();\nvar isDeepEqual;\nvar isDeepStrictEqual;\nvar parseExpressionAt;\nvar findNodeAround;\nvar decoder;\nfunction lazyLoadComparison() {\n  var comparison = require('./internal/util/comparisons');\n  isDeepEqual = comparison.isDeepEqual;\n  isDeepStrictEqual = comparison.isDeepStrictEqual;\n}\n\n// Escape control characters but not \\n and \\t to keep the line breaks and\n// indentation intact.\n// eslint-disable-next-line no-control-regex\nvar escapeSequencesRegExp = /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f]/g;\nvar meta = [\"\\\\u0000\", \"\\\\u0001\", \"\\\\u0002\", \"\\\\u0003\", \"\\\\u0004\", \"\\\\u0005\", \"\\\\u0006\", \"\\\\u0007\", '\\\\b', '', '', \"\\\\u000b\", '\\\\f', '', \"\\\\u000e\", \"\\\\u000f\", \"\\\\u0010\", \"\\\\u0011\", \"\\\\u0012\", \"\\\\u0013\", \"\\\\u0014\", \"\\\\u0015\", \"\\\\u0016\", \"\\\\u0017\", \"\\\\u0018\", \"\\\\u0019\", \"\\\\u001a\", \"\\\\u001b\", \"\\\\u001c\", \"\\\\u001d\", \"\\\\u001e\", \"\\\\u001f\"];\nvar escapeFn = function escapeFn(str) {\n  return meta[str.charCodeAt(0)];\n};\nvar warned = false;\n\n// The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\nvar NO_EXCEPTION_SENTINEL = {};\n\n// All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided. All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction innerFail(obj) {\n  if (obj.message instanceof Error) throw obj.message;\n  throw new AssertionError(obj);\n}\nfunction fail(actual, expected, message, operator, stackStartFn) {\n  var argsLen = arguments.length;\n  var internalMessage;\n  if (argsLen === 0) {\n    internalMessage = 'Failed';\n  } else if (argsLen === 1) {\n    message = actual;\n    actual = undefined;\n  } else {\n    if (warned === false) {\n      warned = true;\n      var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);\n      warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');\n    }\n    if (argsLen === 2) operator = '!=';\n  }\n  if (message instanceof Error) throw message;\n  var errArgs = {\n    actual: actual,\n    expected: expected,\n    operator: operator === undefined ? 'fail' : operator,\n    stackStartFn: stackStartFn || fail\n  };\n  if (message !== undefined) {\n    errArgs.message = message;\n  }\n  var err = new AssertionError(errArgs);\n  if (internalMessage) {\n    err.message = internalMessage;\n    err.generatedMessage = true;\n  }\n  throw err;\n}\nassert.fail = fail;\n\n// The AssertionError is defined in internal/error.\nassert.AssertionError = AssertionError;\nfunction innerOk(fn, argLen, value, message) {\n  if (!value) {\n    var generatedMessage = false;\n    if (argLen === 0) {\n      generatedMessage = true;\n      message = 'No value argument passed to `assert.ok()`';\n    } else if (message instanceof Error) {\n      throw message;\n    }\n    var err = new AssertionError({\n      actual: value,\n      expected: true,\n      message: message,\n      operator: '==',\n      stackStartFn: fn\n    });\n    err.generatedMessage = generatedMessage;\n    throw err;\n  }\n}\n\n// Pure assertion tests whether a value is truthy, as determined\n// by !!value.\nfunction ok() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  innerOk.apply(void 0, [ok, args.length].concat(args));\n}\nassert.ok = ok;\n\n// The equality assertion tests shallow, coercive equality with ==.\n/* eslint-disable no-restricted-properties */\nassert.equal = function equal(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n  // eslint-disable-next-line eqeqeq\n  if (actual != expected) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: '==',\n      stackStartFn: equal\n    });\n  }\n};\n\n// The non-equality assertion tests for whether two objects are not\n// equal with !=.\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n  // eslint-disable-next-line eqeqeq\n  if (actual == expected) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: '!=',\n      stackStartFn: notEqual\n    });\n  }\n};\n\n// The equivalence assertion tests a deep equality relation.\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n  if (isDeepEqual === undefined) lazyLoadComparison();\n  if (!isDeepEqual(actual, expected)) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: 'deepEqual',\n      stackStartFn: deepEqual\n    });\n  }\n};\n\n// The non-equivalence assertion tests for any deep inequality.\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n  if (isDeepEqual === undefined) lazyLoadComparison();\n  if (isDeepEqual(actual, expected)) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: 'notDeepEqual',\n      stackStartFn: notDeepEqual\n    });\n  }\n};\n/* eslint-enable */\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n  if (isDeepEqual === undefined) lazyLoadComparison();\n  if (!isDeepStrictEqual(actual, expected)) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: 'deepStrictEqual',\n      stackStartFn: deepStrictEqual\n    });\n  }\n};\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n  if (isDeepEqual === undefined) lazyLoadComparison();\n  if (isDeepStrictEqual(actual, expected)) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: 'notDeepStrictEqual',\n      stackStartFn: notDeepStrictEqual\n    });\n  }\n}\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n  if (!objectIs(actual, expected)) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: 'strictEqual',\n      stackStartFn: strictEqual\n    });\n  }\n};\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n  if (objectIs(actual, expected)) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: 'notStrictEqual',\n      stackStartFn: notStrictEqual\n    });\n  }\n};\nvar Comparison = /*#__PURE__*/_createClass(function Comparison(obj, keys, actual) {\n  var _this = this;\n  _classCallCheck(this, Comparison);\n  keys.forEach(function (key) {\n    if (key in obj) {\n      if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && RegExpPrototypeTest(obj[key], actual[key])) {\n        _this[key] = actual[key];\n      } else {\n        _this[key] = obj[key];\n      }\n    }\n  });\n});\nfunction compareExceptionKey(actual, expected, key, message, keys, fn) {\n  if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {\n    if (!message) {\n      // Create placeholder objects to create a nice output.\n      var a = new Comparison(actual, keys);\n      var b = new Comparison(expected, keys, actual);\n      var err = new AssertionError({\n        actual: a,\n        expected: b,\n        operator: 'deepStrictEqual',\n        stackStartFn: fn\n      });\n      err.actual = actual;\n      err.expected = expected;\n      err.operator = fn.name;\n      throw err;\n    }\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: fn.name,\n      stackStartFn: fn\n    });\n  }\n}\nfunction expectedException(actual, expected, msg, fn) {\n  if (typeof expected !== 'function') {\n    if (isRegExp(expected)) return RegExpPrototypeTest(expected, actual);\n    // assert.doesNotThrow does not accept objects.\n    if (arguments.length === 2) {\n      throw new ERR_INVALID_ARG_TYPE('expected', ['Function', 'RegExp'], expected);\n    }\n\n    // Handle primitives properly.\n    if (_typeof(actual) !== 'object' || actual === null) {\n      var err = new AssertionError({\n        actual: actual,\n        expected: expected,\n        message: msg,\n        operator: 'deepStrictEqual',\n        stackStartFn: fn\n      });\n      err.operator = fn.name;\n      throw err;\n    }\n    var keys = Object.keys(expected);\n    // Special handle errors to make sure the name and the message are compared\n    // as well.\n    if (expected instanceof Error) {\n      keys.push('name', 'message');\n    } else if (keys.length === 0) {\n      throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');\n    }\n    if (isDeepEqual === undefined) lazyLoadComparison();\n    keys.forEach(function (key) {\n      if (typeof actual[key] === 'string' && isRegExp(expected[key]) && RegExpPrototypeTest(expected[key], actual[key])) {\n        return;\n      }\n      compareExceptionKey(actual, expected, key, msg, keys, fn);\n    });\n    return true;\n  }\n  // Guard instanceof against arrow functions as they don't have a prototype.\n  if (expected.prototype !== undefined && actual instanceof expected) {\n    return true;\n  }\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n  return expected.call({}, actual) === true;\n}\nfunction getActual(fn) {\n  if (typeof fn !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);\n  }\n  try {\n    fn();\n  } catch (e) {\n    return e;\n  }\n  return NO_EXCEPTION_SENTINEL;\n}\nfunction checkIsPromise(obj) {\n  // Accept native ES6 promises and promises that are implemented in a similar\n  // way. Do not accept thenables that use a function as `obj` and that have no\n  // `catch` handler.\n\n  // TODO: thenables are checked up until they have the correct methods,\n  // but according to documentation, the `then` method should receive\n  // the `fulfill` and `reject` arguments as well or it may be never resolved.\n\n  return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';\n}\nfunction waitForActual(promiseFn) {\n  return Promise.resolve().then(function () {\n    var resultPromise;\n    if (typeof promiseFn === 'function') {\n      // Return a rejected promise if `promiseFn` throws synchronously.\n      resultPromise = promiseFn();\n      // Fail in case no promise is returned.\n      if (!checkIsPromise(resultPromise)) {\n        throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);\n      }\n    } else if (checkIsPromise(promiseFn)) {\n      resultPromise = promiseFn;\n    } else {\n      throw new ERR_INVALID_ARG_TYPE('promiseFn', ['Function', 'Promise'], promiseFn);\n    }\n    return Promise.resolve().then(function () {\n      return resultPromise;\n    }).then(function () {\n      return NO_EXCEPTION_SENTINEL;\n    }).catch(function (e) {\n      return e;\n    });\n  });\n}\nfunction expectsError(stackStartFn, actual, error, message) {\n  if (typeof error === 'string') {\n    if (arguments.length === 4) {\n      throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);\n    }\n    if (_typeof(actual) === 'object' && actual !== null) {\n      if (actual.message === error) {\n        throw new ERR_AMBIGUOUS_ARGUMENT('error/message', \"The error message \\\"\".concat(actual.message, \"\\\" is identical to the message.\"));\n      }\n    } else if (actual === error) {\n      throw new ERR_AMBIGUOUS_ARGUMENT('error/message', \"The error \\\"\".concat(actual, \"\\\" is identical to the message.\"));\n    }\n    message = error;\n    error = undefined;\n  } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);\n  }\n  if (actual === NO_EXCEPTION_SENTINEL) {\n    var details = '';\n    if (error && error.name) {\n      details += \" (\".concat(error.name, \")\");\n    }\n    details += message ? \": \".concat(message) : '.';\n    var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';\n    innerFail({\n      actual: undefined,\n      expected: error,\n      operator: stackStartFn.name,\n      message: \"Missing expected \".concat(fnType).concat(details),\n      stackStartFn: stackStartFn\n    });\n  }\n  if (error && !expectedException(actual, error, message, stackStartFn)) {\n    throw actual;\n  }\n}\nfunction expectsNoError(stackStartFn, actual, error, message) {\n  if (actual === NO_EXCEPTION_SENTINEL) return;\n  if (typeof error === 'string') {\n    message = error;\n    error = undefined;\n  }\n  if (!error || expectedException(actual, error)) {\n    var details = message ? \": \".concat(message) : '.';\n    var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';\n    innerFail({\n      actual: actual,\n      expected: error,\n      operator: stackStartFn.name,\n      message: \"Got unwanted \".concat(fnType).concat(details, \"\\n\") + \"Actual message: \\\"\".concat(actual && actual.message, \"\\\"\"),\n      stackStartFn: stackStartFn\n    });\n  }\n  throw actual;\n}\nassert.throws = function throws(promiseFn) {\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n  expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));\n};\nassert.rejects = function rejects(promiseFn) {\n  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    args[_key3 - 1] = arguments[_key3];\n  }\n  return waitForActual(promiseFn).then(function (result) {\n    return expectsError.apply(void 0, [rejects, result].concat(args));\n  });\n};\nassert.doesNotThrow = function doesNotThrow(fn) {\n  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    args[_key4 - 1] = arguments[_key4];\n  }\n  expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));\n};\nassert.doesNotReject = function doesNotReject(fn) {\n  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    args[_key5 - 1] = arguments[_key5];\n  }\n  return waitForActual(fn).then(function (result) {\n    return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));\n  });\n};\nassert.ifError = function ifError(err) {\n  if (err !== null && err !== undefined) {\n    var message = 'ifError got unwanted exception: ';\n    if (_typeof(err) === 'object' && typeof err.message === 'string') {\n      if (err.message.length === 0 && err.constructor) {\n        message += err.constructor.name;\n      } else {\n        message += err.message;\n      }\n    } else {\n      message += inspect(err);\n    }\n    var newErr = new AssertionError({\n      actual: err,\n      expected: null,\n      operator: 'ifError',\n      message: message,\n      stackStartFn: ifError\n    });\n\n    // Make sure we actually have a stack trace!\n    var origStack = err.stack;\n    if (typeof origStack === 'string') {\n      // This will remove any duplicated frames from the error frames taken\n      // from within `ifError` and add the original error frames to the newly\n      // created ones.\n      var tmp2 = origStack.split('\\n');\n      tmp2.shift();\n      // Filter all frames existing in err.stack.\n      var tmp1 = newErr.stack.split('\\n');\n      for (var i = 0; i < tmp2.length; i++) {\n        // Find the first occurrence of the frame.\n        var pos = tmp1.indexOf(tmp2[i]);\n        if (pos !== -1) {\n          // Only keep new frames.\n          tmp1 = tmp1.slice(0, pos);\n          break;\n        }\n      }\n      newErr.stack = \"\".concat(tmp1.join('\\n'), \"\\n\").concat(tmp2.join('\\n'));\n    }\n    throw newErr;\n  }\n};\n\n// Currently in sync with Node.js lib/assert.js\n// https://github.com/nodejs/node/commit/2a871df3dfb8ea663ef5e1f8f62701ec51384ecb\nfunction internalMatch(string, regexp, message, fn, fnName) {\n  if (!isRegExp(regexp)) {\n    throw new ERR_INVALID_ARG_TYPE('regexp', 'RegExp', regexp);\n  }\n  var match = fnName === 'match';\n  if (typeof string !== 'string' || RegExpPrototypeTest(regexp, string) !== match) {\n    if (message instanceof Error) {\n      throw message;\n    }\n    var generatedMessage = !message;\n\n    // 'The input was expected to not match the regular expression ' +\n    message = message || (typeof string !== 'string' ? 'The \"string\" argument must be of type string. Received type ' + \"\".concat(_typeof(string), \" (\").concat(inspect(string), \")\") : (match ? 'The input did not match the regular expression ' : 'The input was expected to not match the regular expression ') + \"\".concat(inspect(regexp), \". Input:\\n\\n\").concat(inspect(string), \"\\n\"));\n    var err = new AssertionError({\n      actual: string,\n      expected: regexp,\n      message: message,\n      operator: fnName,\n      stackStartFn: fn\n    });\n    err.generatedMessage = generatedMessage;\n    throw err;\n  }\n}\nassert.match = function match(string, regexp, message) {\n  internalMatch(string, regexp, message, match, 'match');\n};\nassert.doesNotMatch = function doesNotMatch(string, regexp, message) {\n  internalMatch(string, regexp, message, doesNotMatch, 'doesNotMatch');\n};\n\n// Expose a strict only variant of assert\nfunction strict() {\n  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    args[_key6] = arguments[_key6];\n  }\n  innerOk.apply(void 0, [strict, args.length].concat(args));\n}\nassert.strict = objectAssign(strict, assert, {\n  equal: assert.strictEqual,\n  deepEqual: assert.deepStrictEqual,\n  notEqual: assert.notStrictEqual,\n  notDeepEqual: assert.notDeepStrictEqual\n});\nassert.strict.strict = assert.strict;","// Currently in sync with Node.js lib/internal/assert/assertion_error.js\n// https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c\n\n'use strict';\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar _require = require('util/'),\n  inspect = _require.inspect;\nvar _require2 = require('../errors'),\n  ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE;\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\nfunction endsWith(str, search, this_len) {\n  if (this_len === undefined || this_len > str.length) {\n    this_len = str.length;\n  }\n  return str.substring(this_len - search.length, this_len) === search;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\nfunction repeat(str, count) {\n  count = Math.floor(count);\n  if (str.length == 0 || count == 0) return '';\n  var maxCount = str.length * count;\n  count = Math.floor(Math.log(count) / Math.log(2));\n  while (count) {\n    str += str;\n    count--;\n  }\n  str += str.substring(0, maxCount - str.length);\n  return str;\n}\nvar blue = '';\nvar green = '';\nvar red = '';\nvar white = '';\nvar kReadableOperator = {\n  deepStrictEqual: 'Expected values to be strictly deep-equal:',\n  strictEqual: 'Expected values to be strictly equal:',\n  strictEqualObject: 'Expected \"actual\" to be reference-equal to \"expected\":',\n  deepEqual: 'Expected values to be loosely deep-equal:',\n  equal: 'Expected values to be loosely equal:',\n  notDeepStrictEqual: 'Expected \"actual\" not to be strictly deep-equal to:',\n  notStrictEqual: 'Expected \"actual\" to be strictly unequal to:',\n  notStrictEqualObject: 'Expected \"actual\" not to be reference-equal to \"expected\":',\n  notDeepEqual: 'Expected \"actual\" not to be loosely deep-equal to:',\n  notEqual: 'Expected \"actual\" to be loosely unequal to:',\n  notIdentical: 'Values identical but not reference-equal:'\n};\n\n// Comparing short primitives should just show === / !== instead of using the\n// diff.\nvar kMaxShortLength = 10;\nfunction copyError(source) {\n  var keys = Object.keys(source);\n  var target = Object.create(Object.getPrototypeOf(source));\n  keys.forEach(function (key) {\n    target[key] = source[key];\n  });\n  Object.defineProperty(target, 'message', {\n    value: source.message\n  });\n  return target;\n}\nfunction inspectValue(val) {\n  // The util.inspect default values could be changed. This makes sure the\n  // error messages contain the necessary information nevertheless.\n  return inspect(val, {\n    compact: false,\n    customInspect: false,\n    depth: 1000,\n    maxArrayLength: Infinity,\n    // Assert compares only enumerable properties (with a few exceptions).\n    showHidden: false,\n    // Having a long line as error is better than wrapping the line for\n    // comparison for now.\n    // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we\n    // have meta information about the inspected properties (i.e., know where\n    // in what line the property starts and ends).\n    breakLength: Infinity,\n    // Assert does not detect proxies currently.\n    showProxy: false,\n    sorted: true,\n    // Inspect getters as we also check them when comparing entries.\n    getters: true\n  });\n}\nfunction createErrDiff(actual, expected, operator) {\n  var other = '';\n  var res = '';\n  var lastPos = 0;\n  var end = '';\n  var skipped = false;\n  var actualInspected = inspectValue(actual);\n  var actualLines = actualInspected.split('\\n');\n  var expectedLines = inspectValue(expected).split('\\n');\n  var i = 0;\n  var indicator = '';\n\n  // In case both values are objects explicitly mark them as not reference equal\n  // for the `strictEqual` operator.\n  if (operator === 'strictEqual' && _typeof(actual) === 'object' && _typeof(expected) === 'object' && actual !== null && expected !== null) {\n    operator = 'strictEqualObject';\n  }\n\n  // If \"actual\" and \"expected\" fit on a single line and they are not strictly\n  // equal, check further special handling.\n  if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {\n    var inputLength = actualLines[0].length + expectedLines[0].length;\n    // If the character length of \"actual\" and \"expected\" together is less than\n    // kMaxShortLength and if neither is an object and at least one of them is\n    // not `zero`, use the strict equal comparison to visualize the output.\n    if (inputLength <= kMaxShortLength) {\n      if ((_typeof(actual) !== 'object' || actual === null) && (_typeof(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {\n        // -0 === +0\n        return \"\".concat(kReadableOperator[operator], \"\\n\\n\") + \"\".concat(actualLines[0], \" !== \").concat(expectedLines[0], \"\\n\");\n      }\n    } else if (operator !== 'strictEqualObject') {\n      // If the stderr is a tty and the input length is lower than the current\n      // columns per line, add a mismatch indicator below the output. If it is\n      // not a tty, use a default value of 80 characters.\n      var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;\n      if (inputLength < maxLength) {\n        while (actualLines[0][i] === expectedLines[0][i]) {\n          i++;\n        }\n        // Ignore the first characters.\n        if (i > 2) {\n          // Add position indicator for the first mismatch in case it is a\n          // single line and the input length is less than the column length.\n          indicator = \"\\n  \".concat(repeat(' ', i), \"^\");\n          i = 0;\n        }\n      }\n    }\n  }\n\n  // Remove all ending lines that match (this optimizes the output for\n  // readability by reducing the number of total changed lines).\n  var a = actualLines[actualLines.length - 1];\n  var b = expectedLines[expectedLines.length - 1];\n  while (a === b) {\n    if (i++ < 2) {\n      end = \"\\n  \".concat(a).concat(end);\n    } else {\n      other = a;\n    }\n    actualLines.pop();\n    expectedLines.pop();\n    if (actualLines.length === 0 || expectedLines.length === 0) break;\n    a = actualLines[actualLines.length - 1];\n    b = expectedLines[expectedLines.length - 1];\n  }\n  var maxLines = Math.max(actualLines.length, expectedLines.length);\n  // Strict equal with identical objects that are not identical by reference.\n  // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })\n  if (maxLines === 0) {\n    // We have to get the result again. The lines were all removed before.\n    var _actualLines = actualInspected.split('\\n');\n\n    // Only remove lines in case it makes sense to collapse those.\n    // TODO: Accept env to always show the full error.\n    if (_actualLines.length > 30) {\n      _actualLines[26] = \"\".concat(blue, \"...\").concat(white);\n      while (_actualLines.length > 27) {\n        _actualLines.pop();\n      }\n    }\n    return \"\".concat(kReadableOperator.notIdentical, \"\\n\\n\").concat(_actualLines.join('\\n'), \"\\n\");\n  }\n  if (i > 3) {\n    end = \"\\n\".concat(blue, \"...\").concat(white).concat(end);\n    skipped = true;\n  }\n  if (other !== '') {\n    end = \"\\n  \".concat(other).concat(end);\n    other = '';\n  }\n  var printedLines = 0;\n  var msg = kReadableOperator[operator] + \"\\n\".concat(green, \"+ actual\").concat(white, \" \").concat(red, \"- expected\").concat(white);\n  var skippedMsg = \" \".concat(blue, \"...\").concat(white, \" Lines skipped\");\n  for (i = 0; i < maxLines; i++) {\n    // Only extra expected lines exist\n    var cur = i - lastPos;\n    if (actualLines.length < i + 1) {\n      // If the last diverging line is more than one line above and the\n      // current line is at least line three, add some of the former lines and\n      // also add dots to indicate skipped entries.\n      if (cur > 1 && i > 2) {\n        if (cur > 4) {\n          res += \"\\n\".concat(blue, \"...\").concat(white);\n          skipped = true;\n        } else if (cur > 3) {\n          res += \"\\n  \".concat(expectedLines[i - 2]);\n          printedLines++;\n        }\n        res += \"\\n  \".concat(expectedLines[i - 1]);\n        printedLines++;\n      }\n      // Mark the current line as the last diverging one.\n      lastPos = i;\n      // Add the expected line to the cache.\n      other += \"\\n\".concat(red, \"-\").concat(white, \" \").concat(expectedLines[i]);\n      printedLines++;\n      // Only extra actual lines exist\n    } else if (expectedLines.length < i + 1) {\n      // If the last diverging line is more than one line above and the\n      // current line is at least line three, add some of the former lines and\n      // also add dots to indicate skipped entries.\n      if (cur > 1 && i > 2) {\n        if (cur > 4) {\n          res += \"\\n\".concat(blue, \"...\").concat(white);\n          skipped = true;\n        } else if (cur > 3) {\n          res += \"\\n  \".concat(actualLines[i - 2]);\n          printedLines++;\n        }\n        res += \"\\n  \".concat(actualLines[i - 1]);\n        printedLines++;\n      }\n      // Mark the current line as the last diverging one.\n      lastPos = i;\n      // Add the actual line to the result.\n      res += \"\\n\".concat(green, \"+\").concat(white, \" \").concat(actualLines[i]);\n      printedLines++;\n      // Lines diverge\n    } else {\n      var expectedLine = expectedLines[i];\n      var actualLine = actualLines[i];\n      // If the lines diverge, specifically check for lines that only diverge by\n      // a trailing comma. In that case it is actually identical and we should\n      // mark it as such.\n      var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine);\n      // If the expected line has a trailing comma but is otherwise identical,\n      // add a comma at the end of the actual line. Otherwise the output could\n      // look weird as in:\n      //\n      //   [\n      //     1         // No comma at the end!\n      // +   2\n      //   ]\n      //\n      if (divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {\n        divergingLines = false;\n        actualLine += ',';\n      }\n      if (divergingLines) {\n        // If the last diverging line is more than one line above and the\n        // current line is at least line three, add some of the former lines and\n        // also add dots to indicate skipped entries.\n        if (cur > 1 && i > 2) {\n          if (cur > 4) {\n            res += \"\\n\".concat(blue, \"...\").concat(white);\n            skipped = true;\n          } else if (cur > 3) {\n            res += \"\\n  \".concat(actualLines[i - 2]);\n            printedLines++;\n          }\n          res += \"\\n  \".concat(actualLines[i - 1]);\n          printedLines++;\n        }\n        // Mark the current line as the last diverging one.\n        lastPos = i;\n        // Add the actual line to the result and cache the expected diverging\n        // line so consecutive diverging lines show up as +++--- and not +-+-+-.\n        res += \"\\n\".concat(green, \"+\").concat(white, \" \").concat(actualLine);\n        other += \"\\n\".concat(red, \"-\").concat(white, \" \").concat(expectedLine);\n        printedLines += 2;\n        // Lines are identical\n      } else {\n        // Add all cached information to the result before adding other things\n        // and reset the cache.\n        res += other;\n        other = '';\n        // If the last diverging line is exactly one line above or if it is the\n        // very first line, add the line to the result.\n        if (cur === 1 || i === 0) {\n          res += \"\\n  \".concat(actualLine);\n          printedLines++;\n        }\n      }\n    }\n    // Inspected object to big (Show ~20 rows max)\n    if (printedLines > 20 && i < maxLines - 2) {\n      return \"\".concat(msg).concat(skippedMsg, \"\\n\").concat(res, \"\\n\").concat(blue, \"...\").concat(white).concat(other, \"\\n\") + \"\".concat(blue, \"...\").concat(white);\n    }\n  }\n  return \"\".concat(msg).concat(skipped ? skippedMsg : '', \"\\n\").concat(res).concat(other).concat(end).concat(indicator);\n}\nvar AssertionError = /*#__PURE__*/function (_Error, _inspect$custom) {\n  _inherits(AssertionError, _Error);\n  var _super = _createSuper(AssertionError);\n  function AssertionError(options) {\n    var _this;\n    _classCallCheck(this, AssertionError);\n    if (_typeof(options) !== 'object' || options === null) {\n      throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);\n    }\n    var message = options.message,\n      operator = options.operator,\n      stackStartFn = options.stackStartFn;\n    var actual = options.actual,\n      expected = options.expected;\n    var limit = Error.stackTraceLimit;\n    Error.stackTraceLimit = 0;\n    if (message != null) {\n      _this = _super.call(this, String(message));\n    } else {\n      if (process.stderr && process.stderr.isTTY) {\n        // Reset on each call to make sure we handle dynamically set environment\n        // variables correct.\n        if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {\n          blue = \"\\x1B[34m\";\n          green = \"\\x1B[32m\";\n          white = \"\\x1B[39m\";\n          red = \"\\x1B[31m\";\n        } else {\n          blue = '';\n          green = '';\n          white = '';\n          red = '';\n        }\n      }\n      // Prevent the error stack from being visible by duplicating the error\n      // in a very close way to the original in case both sides are actually\n      // instances of Error.\n      if (_typeof(actual) === 'object' && actual !== null && _typeof(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {\n        actual = copyError(actual);\n        expected = copyError(expected);\n      }\n      if (operator === 'deepStrictEqual' || operator === 'strictEqual') {\n        _this = _super.call(this, createErrDiff(actual, expected, operator));\n      } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {\n        // In case the objects are equal but the operator requires unequal, show\n        // the first object and say A equals B\n        var base = kReadableOperator[operator];\n        var res = inspectValue(actual).split('\\n');\n\n        // In case \"actual\" is an object, it should not be reference equal.\n        if (operator === 'notStrictEqual' && _typeof(actual) === 'object' && actual !== null) {\n          base = kReadableOperator.notStrictEqualObject;\n        }\n\n        // Only remove lines in case it makes sense to collapse those.\n        // TODO: Accept env to always show the full error.\n        if (res.length > 30) {\n          res[26] = \"\".concat(blue, \"...\").concat(white);\n          while (res.length > 27) {\n            res.pop();\n          }\n        }\n\n        // Only print a single input.\n        if (res.length === 1) {\n          _this = _super.call(this, \"\".concat(base, \" \").concat(res[0]));\n        } else {\n          _this = _super.call(this, \"\".concat(base, \"\\n\\n\").concat(res.join('\\n'), \"\\n\"));\n        }\n      } else {\n        var _res = inspectValue(actual);\n        var other = '';\n        var knownOperators = kReadableOperator[operator];\n        if (operator === 'notDeepEqual' || operator === 'notEqual') {\n          _res = \"\".concat(kReadableOperator[operator], \"\\n\\n\").concat(_res);\n          if (_res.length > 1024) {\n            _res = \"\".concat(_res.slice(0, 1021), \"...\");\n          }\n        } else {\n          other = \"\".concat(inspectValue(expected));\n          if (_res.length > 512) {\n            _res = \"\".concat(_res.slice(0, 509), \"...\");\n          }\n          if (other.length > 512) {\n            other = \"\".concat(other.slice(0, 509), \"...\");\n          }\n          if (operator === 'deepEqual' || operator === 'equal') {\n            _res = \"\".concat(knownOperators, \"\\n\\n\").concat(_res, \"\\n\\nshould equal\\n\\n\");\n          } else {\n            other = \" \".concat(operator, \" \").concat(other);\n          }\n        }\n        _this = _super.call(this, \"\".concat(_res).concat(other));\n      }\n    }\n    Error.stackTraceLimit = limit;\n    _this.generatedMessage = !message;\n    Object.defineProperty(_assertThisInitialized(_this), 'name', {\n      value: 'AssertionError [ERR_ASSERTION]',\n      enumerable: false,\n      writable: true,\n      configurable: true\n    });\n    _this.code = 'ERR_ASSERTION';\n    _this.actual = actual;\n    _this.expected = expected;\n    _this.operator = operator;\n    if (Error.captureStackTrace) {\n      // eslint-disable-next-line no-restricted-syntax\n      Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);\n    }\n    // Create error message including the error code in the name.\n    _this.stack;\n    // Reset the name.\n    _this.name = 'AssertionError';\n    return _possibleConstructorReturn(_this);\n  }\n  _createClass(AssertionError, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.name, \" [\").concat(this.code, \"]: \").concat(this.message);\n    }\n  }, {\n    key: _inspect$custom,\n    value: function value(recurseTimes, ctx) {\n      // This limits the `actual` and `expected` property default inspection to\n      // the minimum depth. Otherwise those values would be too verbose compared\n      // to the actual error message which contains a combined view of these two\n      // input values.\n      return inspect(this, _objectSpread(_objectSpread({}, ctx), {}, {\n        customInspect: false,\n        depth: 0\n      }));\n    }\n  }]);\n  return AssertionError;\n}( /*#__PURE__*/_wrapNativeSuper(Error), inspect.custom);\nmodule.exports = AssertionError;","// Currently in sync with Node.js lib/internal/errors.js\n// https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f\n\n/* eslint node-core/documented-errors: \"error\" */\n/* eslint node-core/alphabetize-errors: \"error\" */\n/* eslint node-core/prefer-util-format-errors: \"error\" */\n\n'use strict';\n\n// The whole point behind this internal module is to allow Node.js to no\n// longer be forced to treat every error message change as a semver-major\n// change. The NodeError classes here all expose a `code` property whose\n// value statically and permanently identifies the error. While the error\n// message may change, the code should not.\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nvar codes = {};\n\n// Lazy loaded\nvar assert;\nvar util;\nfunction createErrorType(code, message, Base) {\n  if (!Base) {\n    Base = Error;\n  }\n  function getMessage(arg1, arg2, arg3) {\n    if (typeof message === 'string') {\n      return message;\n    } else {\n      return message(arg1, arg2, arg3);\n    }\n  }\n  var NodeError = /*#__PURE__*/function (_Base) {\n    _inherits(NodeError, _Base);\n    var _super = _createSuper(NodeError);\n    function NodeError(arg1, arg2, arg3) {\n      var _this;\n      _classCallCheck(this, NodeError);\n      _this = _super.call(this, getMessage(arg1, arg2, arg3));\n      _this.code = code;\n      return _this;\n    }\n    return _createClass(NodeError);\n  }(Base);\n  codes[code] = NodeError;\n}\n\n// https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js\nfunction oneOf(expected, thing) {\n  if (Array.isArray(expected)) {\n    var len = expected.length;\n    expected = expected.map(function (i) {\n      return String(i);\n    });\n    if (len > 2) {\n      return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(', '), \", or \") + expected[len - 1];\n    } else if (len === 2) {\n      return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n    } else {\n      return \"of \".concat(thing, \" \").concat(expected[0]);\n    }\n  } else {\n    return \"of \".concat(thing, \" \").concat(String(expected));\n  }\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\nfunction startsWith(str, search, pos) {\n  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\nfunction endsWith(str, search, this_len) {\n  if (this_len === undefined || this_len > str.length) {\n    this_len = str.length;\n  }\n  return str.substring(this_len - search.length, this_len) === search;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\nfunction includes(str, search, start) {\n  if (typeof start !== 'number') {\n    start = 0;\n  }\n  if (start + search.length > str.length) {\n    return false;\n  } else {\n    return str.indexOf(search, start) !== -1;\n  }\n}\ncreateErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The \"%s\" argument is ambiguous. %s', TypeError);\ncreateErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {\n  if (assert === undefined) assert = require('../assert');\n  assert(typeof name === 'string', \"'name' must be a string\");\n\n  // determiner: 'must be' or 'must not be'\n  var determiner;\n  if (typeof expected === 'string' && startsWith(expected, 'not ')) {\n    determiner = 'must not be';\n    expected = expected.replace(/^not /, '');\n  } else {\n    determiner = 'must be';\n  }\n  var msg;\n  if (endsWith(name, ' argument')) {\n    // For cases like 'first argument'\n    msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  } else {\n    var type = includes(name, '.') ? 'property' : 'argument';\n    msg = \"The \\\"\".concat(name, \"\\\" \").concat(type, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  }\n\n  // TODO(BridgeAR): Improve the output by showing `null` and similar.\n  msg += \". Received type \".concat(_typeof(actual));\n  return msg;\n}, TypeError);\ncreateErrorType('ERR_INVALID_ARG_VALUE', function (name, value) {\n  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';\n  if (util === undefined) util = require('util/');\n  var inspected = util.inspect(value);\n  if (inspected.length > 128) {\n    inspected = \"\".concat(inspected.slice(0, 128), \"...\");\n  }\n  return \"The argument '\".concat(name, \"' \").concat(reason, \". Received \").concat(inspected);\n}, TypeError, RangeError);\ncreateErrorType('ERR_INVALID_RETURN_VALUE', function (input, name, value) {\n  var type;\n  if (value && value.constructor && value.constructor.name) {\n    type = \"instance of \".concat(value.constructor.name);\n  } else {\n    type = \"type \".concat(_typeof(value));\n  }\n  return \"Expected \".concat(input, \" to be returned from the \\\"\").concat(name, \"\\\"\") + \" function but got \".concat(type, \".\");\n}, TypeError);\ncreateErrorType('ERR_MISSING_ARGS', function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  if (assert === undefined) assert = require('../assert');\n  assert(args.length > 0, 'At least one arg needs to be specified');\n  var msg = 'The ';\n  var len = args.length;\n  args = args.map(function (a) {\n    return \"\\\"\".concat(a, \"\\\"\");\n  });\n  switch (len) {\n    case 1:\n      msg += \"\".concat(args[0], \" argument\");\n      break;\n    case 2:\n      msg += \"\".concat(args[0], \" and \").concat(args[1], \" arguments\");\n      break;\n    default:\n      msg += args.slice(0, len - 1).join(', ');\n      msg += \", and \".concat(args[len - 1], \" arguments\");\n      break;\n  }\n  return \"\".concat(msg, \" must be specified\");\n}, TypeError);\nmodule.exports.codes = codes;","// Currently in sync with Node.js lib/internal/util/comparisons.js\n// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9\n\n'use strict';\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar regexFlagsSupported = /a/g.flags !== undefined;\nvar arrayFromSet = function arrayFromSet(set) {\n  var array = [];\n  set.forEach(function (value) {\n    return array.push(value);\n  });\n  return array;\n};\nvar arrayFromMap = function arrayFromMap(map) {\n  var array = [];\n  map.forEach(function (value, key) {\n    return array.push([key, value]);\n  });\n  return array;\n};\nvar objectIs = Object.is ? Object.is : require('object-is');\nvar objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function () {\n  return [];\n};\nvar numberIsNaN = Number.isNaN ? Number.isNaN : require('is-nan');\nfunction uncurryThis(f) {\n  return f.call.bind(f);\n}\nvar hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\nvar propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);\nvar objectToString = uncurryThis(Object.prototype.toString);\nvar _require$types = require('util/').types,\n  isAnyArrayBuffer = _require$types.isAnyArrayBuffer,\n  isArrayBufferView = _require$types.isArrayBufferView,\n  isDate = _require$types.isDate,\n  isMap = _require$types.isMap,\n  isRegExp = _require$types.isRegExp,\n  isSet = _require$types.isSet,\n  isNativeError = _require$types.isNativeError,\n  isBoxedPrimitive = _require$types.isBoxedPrimitive,\n  isNumberObject = _require$types.isNumberObject,\n  isStringObject = _require$types.isStringObject,\n  isBooleanObject = _require$types.isBooleanObject,\n  isBigIntObject = _require$types.isBigIntObject,\n  isSymbolObject = _require$types.isSymbolObject,\n  isFloat32Array = _require$types.isFloat32Array,\n  isFloat64Array = _require$types.isFloat64Array;\nfunction isNonIndex(key) {\n  if (key.length === 0 || key.length > 10) return true;\n  for (var i = 0; i < key.length; i++) {\n    var code = key.charCodeAt(i);\n    if (code < 48 || code > 57) return true;\n  }\n  // The maximum size for an array is 2 ** 32 -1.\n  return key.length === 10 && key >= Math.pow(2, 32);\n}\nfunction getOwnNonIndexProperties(value) {\n  return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));\n}\n\n// Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n// original notice:\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n  var x = a.length;\n  var y = b.length;\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nvar ONLY_ENUMERABLE = undefined;\nvar kStrict = true;\nvar kLoose = false;\nvar kNoIterator = 0;\nvar kIsArray = 1;\nvar kIsSet = 2;\nvar kIsMap = 3;\n\n// Check if they have the same source and flags\nfunction areSimilarRegExps(a, b) {\n  return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);\n}\nfunction areSimilarFloatArrays(a, b) {\n  if (a.byteLength !== b.byteLength) {\n    return false;\n  }\n  for (var offset = 0; offset < a.byteLength; offset++) {\n    if (a[offset] !== b[offset]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction areSimilarTypedArrays(a, b) {\n  if (a.byteLength !== b.byteLength) {\n    return false;\n  }\n  return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;\n}\nfunction areEqualArrayBuffers(buf1, buf2) {\n  return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;\n}\nfunction isEqualBoxedPrimitive(val1, val2) {\n  if (isNumberObject(val1)) {\n    return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));\n  }\n  if (isStringObject(val1)) {\n    return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);\n  }\n  if (isBooleanObject(val1)) {\n    return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);\n  }\n  if (isBigIntObject(val1)) {\n    return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);\n  }\n  return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);\n}\n\n// Notes: Type tags are historical [[Class]] properties that can be set by\n// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS\n// and retrieved using Object.prototype.toString.call(obj) in JS\n// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring\n// for a list of tags pre-defined in the spec.\n// There are some unspecified tags in the wild too (e.g. typed array tags).\n// Since tags can be altered, they only serve fast failures\n//\n// Typed arrays and buffers are checked by comparing the content in their\n// underlying ArrayBuffer. This optimization requires that it's\n// reasonable to interpret their underlying memory in the same way,\n// which is checked by comparing their type tags.\n// (e.g. a Uint8Array and a Uint16Array with the same memory content\n// could still be different because they will be interpreted differently).\n//\n// For strict comparison, objects should have\n// a) The same built-in type tags\n// b) The same prototypes.\n\nfunction innerDeepEqual(val1, val2, strict, memos) {\n  // All identical values are equivalent, as determined by ===.\n  if (val1 === val2) {\n    if (val1 !== 0) return true;\n    return strict ? objectIs(val1, val2) : true;\n  }\n\n  // Check more closely if val1 and val2 are equal.\n  if (strict) {\n    if (_typeof(val1) !== 'object') {\n      return typeof val1 === 'number' && numberIsNaN(val1) && numberIsNaN(val2);\n    }\n    if (_typeof(val2) !== 'object' || val1 === null || val2 === null) {\n      return false;\n    }\n    if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {\n      return false;\n    }\n  } else {\n    if (val1 === null || _typeof(val1) !== 'object') {\n      if (val2 === null || _typeof(val2) !== 'object') {\n        // eslint-disable-next-line eqeqeq\n        return val1 == val2;\n      }\n      return false;\n    }\n    if (val2 === null || _typeof(val2) !== 'object') {\n      return false;\n    }\n  }\n  var val1Tag = objectToString(val1);\n  var val2Tag = objectToString(val2);\n  if (val1Tag !== val2Tag) {\n    return false;\n  }\n  if (Array.isArray(val1)) {\n    // Check for sparse arrays and general fast path\n    if (val1.length !== val2.length) {\n      return false;\n    }\n    var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);\n    var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n    return keyCheck(val1, val2, strict, memos, kIsArray, keys1);\n  }\n  // [browserify] This triggers on certain types in IE (Map/Set) so we don't\n  // wan't to early return out of the rest of the checks. However we can check\n  // if the second value is one of these values and the first isn't.\n  if (val1Tag === '[object Object]') {\n    // return keyCheck(val1, val2, strict, memos, kNoIterator);\n    if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {\n      return false;\n    }\n  }\n  if (isDate(val1)) {\n    if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {\n      return false;\n    }\n  } else if (isRegExp(val1)) {\n    if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {\n      return false;\n    }\n  } else if (isNativeError(val1) || val1 instanceof Error) {\n    // Do not compare the stack as it might differ even though the error itself\n    // is otherwise identical.\n    if (val1.message !== val2.message || val1.name !== val2.name) {\n      return false;\n    }\n  } else if (isArrayBufferView(val1)) {\n    if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {\n      if (!areSimilarFloatArrays(val1, val2)) {\n        return false;\n      }\n    } else if (!areSimilarTypedArrays(val1, val2)) {\n      return false;\n    }\n    // Buffer.compare returns true, so val1.length === val2.length. If they both\n    // only contain numeric keys, we don't need to exam further than checking\n    // the symbols.\n    var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);\n    var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);\n    if (_keys.length !== _keys2.length) {\n      return false;\n    }\n    return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);\n  } else if (isSet(val1)) {\n    if (!isSet(val2) || val1.size !== val2.size) {\n      return false;\n    }\n    return keyCheck(val1, val2, strict, memos, kIsSet);\n  } else if (isMap(val1)) {\n    if (!isMap(val2) || val1.size !== val2.size) {\n      return false;\n    }\n    return keyCheck(val1, val2, strict, memos, kIsMap);\n  } else if (isAnyArrayBuffer(val1)) {\n    if (!areEqualArrayBuffers(val1, val2)) {\n      return false;\n    }\n  } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {\n    return false;\n  }\n  return keyCheck(val1, val2, strict, memos, kNoIterator);\n}\nfunction getEnumerables(val, keys) {\n  return keys.filter(function (k) {\n    return propertyIsEnumerable(val, k);\n  });\n}\nfunction keyCheck(val1, val2, strict, memos, iterationType, aKeys) {\n  // For all remaining Object pairs, including Array, objects and Maps,\n  // equivalence is determined by having:\n  // a) The same number of owned enumerable properties\n  // b) The same set of keys/indexes (although not necessarily the same order)\n  // c) Equivalent values for every corresponding key/index\n  // d) For Sets and Maps, equal contents\n  // Note: this accounts for both named and indexed properties on Arrays.\n  if (arguments.length === 5) {\n    aKeys = Object.keys(val1);\n    var bKeys = Object.keys(val2);\n\n    // The pair must have the same number of owned properties.\n    if (aKeys.length !== bKeys.length) {\n      return false;\n    }\n  }\n\n  // Cheap key test\n  var i = 0;\n  for (; i < aKeys.length; i++) {\n    if (!hasOwnProperty(val2, aKeys[i])) {\n      return false;\n    }\n  }\n  if (strict && arguments.length === 5) {\n    var symbolKeysA = objectGetOwnPropertySymbols(val1);\n    if (symbolKeysA.length !== 0) {\n      var count = 0;\n      for (i = 0; i < symbolKeysA.length; i++) {\n        var key = symbolKeysA[i];\n        if (propertyIsEnumerable(val1, key)) {\n          if (!propertyIsEnumerable(val2, key)) {\n            return false;\n          }\n          aKeys.push(key);\n          count++;\n        } else if (propertyIsEnumerable(val2, key)) {\n          return false;\n        }\n      }\n      var symbolKeysB = objectGetOwnPropertySymbols(val2);\n      if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {\n        return false;\n      }\n    } else {\n      var _symbolKeysB = objectGetOwnPropertySymbols(val2);\n      if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {\n        return false;\n      }\n    }\n  }\n  if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {\n    return true;\n  }\n\n  // Use memos to handle cycles.\n  if (memos === undefined) {\n    memos = {\n      val1: new Map(),\n      val2: new Map(),\n      position: 0\n    };\n  } else {\n    // We prevent up to two map.has(x) calls by directly retrieving the value\n    // and checking for undefined. The map can only contain numbers, so it is\n    // safe to check for undefined only.\n    var val2MemoA = memos.val1.get(val1);\n    if (val2MemoA !== undefined) {\n      var val2MemoB = memos.val2.get(val2);\n      if (val2MemoB !== undefined) {\n        return val2MemoA === val2MemoB;\n      }\n    }\n    memos.position++;\n  }\n  memos.val1.set(val1, memos.position);\n  memos.val2.set(val2, memos.position);\n  var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);\n  memos.val1.delete(val1);\n  memos.val2.delete(val2);\n  return areEq;\n}\nfunction setHasEqualElement(set, val1, strict, memo) {\n  // Go looking.\n  var setValues = arrayFromSet(set);\n  for (var i = 0; i < setValues.length; i++) {\n    var val2 = setValues[i];\n    if (innerDeepEqual(val1, val2, strict, memo)) {\n      // Remove the matching element to make sure we do not check that again.\n      set.delete(val2);\n      return true;\n    }\n  }\n  return false;\n}\n\n// See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using\n// Sadly it is not possible to detect corresponding values properly in case the\n// type is a string, number, bigint or boolean. The reason is that those values\n// can match lots of different string values (e.g., 1n == '+00001').\nfunction findLooseMatchingPrimitives(prim) {\n  switch (_typeof(prim)) {\n    case 'undefined':\n      return null;\n    case 'object':\n      // Only pass in null as object!\n      return undefined;\n    case 'symbol':\n      return false;\n    case 'string':\n      prim = +prim;\n    // Loose equal entries exist only if the string is possible to convert to\n    // a regular number and not NaN.\n    // Fall through\n    case 'number':\n      if (numberIsNaN(prim)) {\n        return false;\n      }\n  }\n  return true;\n}\nfunction setMightHaveLoosePrim(a, b, prim) {\n  var altValue = findLooseMatchingPrimitives(prim);\n  if (altValue != null) return altValue;\n  return b.has(altValue) && !a.has(altValue);\n}\nfunction mapMightHaveLoosePrim(a, b, prim, item, memo) {\n  var altValue = findLooseMatchingPrimitives(prim);\n  if (altValue != null) {\n    return altValue;\n  }\n  var curB = b.get(altValue);\n  if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {\n    return false;\n  }\n  return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);\n}\nfunction setEquiv(a, b, strict, memo) {\n  // This is a lazily initiated Set of entries which have to be compared\n  // pairwise.\n  var set = null;\n  var aValues = arrayFromSet(a);\n  for (var i = 0; i < aValues.length; i++) {\n    var val = aValues[i];\n    // Note: Checking for the objects first improves the performance for object\n    // heavy sets but it is a minor slow down for primitives. As they are fast\n    // to check this improves the worst case scenario instead.\n    if (_typeof(val) === 'object' && val !== null) {\n      if (set === null) {\n        set = new Set();\n      }\n      // If the specified value doesn't exist in the second set its an not null\n      // object (or non strict only: a not matching primitive) we'll need to go\n      // hunting for something thats deep-(strict-)equal to it. To make this\n      // O(n log n) complexity we have to copy these values in a new set first.\n      set.add(val);\n    } else if (!b.has(val)) {\n      if (strict) return false;\n\n      // Fast path to detect missing string, symbol, undefined and null values.\n      if (!setMightHaveLoosePrim(a, b, val)) {\n        return false;\n      }\n      if (set === null) {\n        set = new Set();\n      }\n      set.add(val);\n    }\n  }\n  if (set !== null) {\n    var bValues = arrayFromSet(b);\n    for (var _i = 0; _i < bValues.length; _i++) {\n      var _val = bValues[_i];\n      // We have to check if a primitive value is already\n      // matching and only if it's not, go hunting for it.\n      if (_typeof(_val) === 'object' && _val !== null) {\n        if (!setHasEqualElement(set, _val, strict, memo)) return false;\n      } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {\n        return false;\n      }\n    }\n    return set.size === 0;\n  }\n  return true;\n}\nfunction mapHasEqualEntry(set, map, key1, item1, strict, memo) {\n  // To be able to handle cases like:\n  //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])\n  // ... we need to consider *all* matching keys, not just the first we find.\n  var setValues = arrayFromSet(set);\n  for (var i = 0; i < setValues.length; i++) {\n    var key2 = setValues[i];\n    if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {\n      set.delete(key2);\n      return true;\n    }\n  }\n  return false;\n}\nfunction mapEquiv(a, b, strict, memo) {\n  var set = null;\n  var aEntries = arrayFromMap(a);\n  for (var i = 0; i < aEntries.length; i++) {\n    var _aEntries$i = _slicedToArray(aEntries[i], 2),\n      key = _aEntries$i[0],\n      item1 = _aEntries$i[1];\n    if (_typeof(key) === 'object' && key !== null) {\n      if (set === null) {\n        set = new Set();\n      }\n      set.add(key);\n    } else {\n      // By directly retrieving the value we prevent another b.has(key) check in\n      // almost all possible cases.\n      var item2 = b.get(key);\n      if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {\n        if (strict) return false;\n        // Fast path to detect missing string, symbol, undefined and null\n        // keys.\n        if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;\n        if (set === null) {\n          set = new Set();\n        }\n        set.add(key);\n      }\n    }\n  }\n  if (set !== null) {\n    var bEntries = arrayFromMap(b);\n    for (var _i2 = 0; _i2 < bEntries.length; _i2++) {\n      var _bEntries$_i = _slicedToArray(bEntries[_i2], 2),\n        _key = _bEntries$_i[0],\n        item = _bEntries$_i[1];\n      if (_typeof(_key) === 'object' && _key !== null) {\n        if (!mapHasEqualEntry(set, a, _key, item, strict, memo)) return false;\n      } else if (!strict && (!a.has(_key) || !innerDeepEqual(a.get(_key), item, false, memo)) && !mapHasEqualEntry(set, a, _key, item, false, memo)) {\n        return false;\n      }\n    }\n    return set.size === 0;\n  }\n  return true;\n}\nfunction objEquiv(a, b, strict, keys, memos, iterationType) {\n  // Sets and maps don't have their entries accessible via normal object\n  // properties.\n  var i = 0;\n  if (iterationType === kIsSet) {\n    if (!setEquiv(a, b, strict, memos)) {\n      return false;\n    }\n  } else if (iterationType === kIsMap) {\n    if (!mapEquiv(a, b, strict, memos)) {\n      return false;\n    }\n  } else if (iterationType === kIsArray) {\n    for (; i < a.length; i++) {\n      if (hasOwnProperty(a, i)) {\n        if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {\n          return false;\n        }\n      } else if (hasOwnProperty(b, i)) {\n        return false;\n      } else {\n        // Array is sparse.\n        var keysA = Object.keys(a);\n        for (; i < keysA.length; i++) {\n          var key = keysA[i];\n          if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {\n            return false;\n          }\n        }\n        if (keysA.length !== Object.keys(b).length) {\n          return false;\n        }\n        return true;\n      }\n    }\n  }\n\n  // The pair must have equivalent values for every corresponding key.\n  // Possibly expensive deep test:\n  for (i = 0; i < keys.length; i++) {\n    var _key2 = keys[i];\n    if (!innerDeepEqual(a[_key2], b[_key2], strict, memos)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isDeepEqual(val1, val2) {\n  return innerDeepEqual(val1, val2, kLoose);\n}\nfunction isDeepStrictEqual(val1, val2) {\n  return innerDeepEqual(val1, val2, kStrict);\n}\nmodule.exports = {\n  isDeepEqual: isDeepEqual,\n  isDeepStrictEqual: isDeepStrictEqual\n};","'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBind = require('./');\n\nvar $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));\n\nmodule.exports = function callBoundIntrinsic(name, allowMissing) {\n\tvar intrinsic = GetIntrinsic(name, !!allowMissing);\n\tif (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {\n\t\treturn callBind(intrinsic);\n\t}\n\treturn intrinsic;\n};\n","'use strict';\n\nvar bind = require('function-bind');\nvar GetIntrinsic = require('get-intrinsic');\nvar setFunctionLength = require('set-function-length');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $apply = GetIntrinsic('%Function.prototype.apply%');\nvar $call = GetIntrinsic('%Function.prototype.call%');\nvar $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);\n\nvar $defineProperty = GetIntrinsic('%Object.defineProperty%', true);\nvar $max = GetIntrinsic('%Math.max%');\n\nif ($defineProperty) {\n\ttry {\n\t\t$defineProperty({}, 'a', { value: 1 });\n\t} catch (e) {\n\t\t// IE 8 has a broken defineProperty\n\t\t$defineProperty = null;\n\t}\n}\n\nmodule.exports = function callBind(originalFunction) {\n\tif (typeof originalFunction !== 'function') {\n\t\tthrow new $TypeError('a function is required');\n\t}\n\tvar func = $reflectApply(bind, $call, arguments);\n\treturn setFunctionLength(\n\t\tfunc,\n\t\t1 + $max(0, originalFunction.length - (arguments.length - 1)),\n\t\ttrue\n\t);\n};\n\nvar applyBind = function applyBind() {\n\treturn $reflectApply(bind, $apply, arguments);\n};\n\nif ($defineProperty) {\n\t$defineProperty(module.exports, 'apply', { value: applyBind });\n} else {\n\tmodule.exports.apply = applyBind;\n}\n","'use strict';\n\nvar hasPropertyDescriptors = require('has-property-descriptors')();\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $defineProperty = hasPropertyDescriptors && GetIntrinsic('%Object.defineProperty%', true);\nif ($defineProperty) {\n\ttry {\n\t\t$defineProperty({}, 'a', { value: 1 });\n\t} catch (e) {\n\t\t// IE 8 has a broken defineProperty\n\t\t$defineProperty = false;\n\t}\n}\n\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar gopd = require('gopd');\n\n/** @type {(obj: Record<PropertyKey, unknown>, property: PropertyKey, value: unknown, nonEnumerable?: boolean | null, nonWritable?: boolean | null, nonConfigurable?: boolean | null, loose?: boolean) => void} */\nmodule.exports = function defineDataProperty(\n\tobj,\n\tproperty,\n\tvalue\n) {\n\tif (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {\n\t\tthrow new $TypeError('`obj` must be an object or a function`');\n\t}\n\tif (typeof property !== 'string' && typeof property !== 'symbol') {\n\t\tthrow new $TypeError('`property` must be a string or a symbol`');\n\t}\n\tif (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {\n\t\tthrow new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');\n\t}\n\tif (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {\n\t\tthrow new $TypeError('`nonWritable`, if provided, must be a boolean or null');\n\t}\n\tif (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {\n\t\tthrow new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');\n\t}\n\tif (arguments.length > 6 && typeof arguments[6] !== 'boolean') {\n\t\tthrow new $TypeError('`loose`, if provided, must be a boolean');\n\t}\n\n\tvar nonEnumerable = arguments.length > 3 ? arguments[3] : null;\n\tvar nonWritable = arguments.length > 4 ? arguments[4] : null;\n\tvar nonConfigurable = arguments.length > 5 ? arguments[5] : null;\n\tvar loose = arguments.length > 6 ? arguments[6] : false;\n\n\t/* @type {false | TypedPropertyDescriptor<unknown>} */\n\tvar desc = !!gopd && gopd(obj, property);\n\n\tif ($defineProperty) {\n\t\t$defineProperty(obj, property, {\n\t\t\tconfigurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,\n\t\t\tenumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,\n\t\t\tvalue: value,\n\t\t\twritable: nonWritable === null && desc ? desc.writable : !nonWritable\n\t\t});\n\t} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {\n\t\t// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable\n\t\tobj[property] = value; // eslint-disable-line no-param-reassign\n\t} else {\n\t\tthrow new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');\n\t}\n};\n","'use strict';\n\nvar keys = require('object-keys');\nvar hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';\n\nvar toStr = Object.prototype.toString;\nvar concat = Array.prototype.concat;\nvar defineDataProperty = require('define-data-property');\n\nvar isFunction = function (fn) {\n\treturn typeof fn === 'function' && toStr.call(fn) === '[object Function]';\n};\n\nvar supportsDescriptors = require('has-property-descriptors')();\n\nvar defineProperty = function (object, name, value, predicate) {\n\tif (name in object) {\n\t\tif (predicate === true) {\n\t\t\tif (object[name] === value) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (!isFunction(predicate) || !predicate()) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (supportsDescriptors) {\n\t\tdefineDataProperty(object, name, value, true);\n\t} else {\n\t\tdefineDataProperty(object, name, value);\n\t}\n};\n\nvar defineProperties = function (object, map) {\n\tvar predicates = arguments.length > 2 ? arguments[2] : {};\n\tvar props = keys(map);\n\tif (hasSymbols) {\n\t\tprops = concat.call(props, Object.getOwnPropertySymbols(map));\n\t}\n\tfor (var i = 0; i < props.length; i += 1) {\n\t\tdefineProperty(object, props[i], map[props[i]], predicates[props[i]]);\n\t}\n};\n\ndefineProperties.supportsDescriptors = !!supportsDescriptors;\n\nmodule.exports = defineProperties;\n","'use strict';\n\nvar isCallable = require('is-callable');\n\nvar toStr = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar forEachArray = function forEachArray(array, iterator, receiver) {\n    for (var i = 0, len = array.length; i < len; i++) {\n        if (hasOwnProperty.call(array, i)) {\n            if (receiver == null) {\n                iterator(array[i], i, array);\n            } else {\n                iterator.call(receiver, array[i], i, array);\n            }\n        }\n    }\n};\n\nvar forEachString = function forEachString(string, iterator, receiver) {\n    for (var i = 0, len = string.length; i < len; i++) {\n        // no such thing as a sparse string.\n        if (receiver == null) {\n            iterator(string.charAt(i), i, string);\n        } else {\n            iterator.call(receiver, string.charAt(i), i, string);\n        }\n    }\n};\n\nvar forEachObject = function forEachObject(object, iterator, receiver) {\n    for (var k in object) {\n        if (hasOwnProperty.call(object, k)) {\n            if (receiver == null) {\n                iterator(object[k], k, object);\n            } else {\n                iterator.call(receiver, object[k], k, object);\n            }\n        }\n    }\n};\n\nvar forEach = function forEach(list, iterator, thisArg) {\n    if (!isCallable(iterator)) {\n        throw new TypeError('iterator must be a function');\n    }\n\n    var receiver;\n    if (arguments.length >= 3) {\n        receiver = thisArg;\n    }\n\n    if (toStr.call(list) === '[object Array]') {\n        forEachArray(list, iterator, receiver);\n    } else if (typeof list === 'string') {\n        forEachString(list, iterator, receiver);\n    } else {\n        forEachObject(list, iterator, receiver);\n    }\n};\n\nmodule.exports = forEach;\n","'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar toStr = Object.prototype.toString;\nvar max = Math.max;\nvar funcType = '[object Function]';\n\nvar concatty = function concatty(a, b) {\n    var arr = [];\n\n    for (var i = 0; i < a.length; i += 1) {\n        arr[i] = a[i];\n    }\n    for (var j = 0; j < b.length; j += 1) {\n        arr[j + a.length] = b[j];\n    }\n\n    return arr;\n};\n\nvar slicy = function slicy(arrLike, offset) {\n    var arr = [];\n    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {\n        arr[j] = arrLike[i];\n    }\n    return arr;\n};\n\nvar joiny = function (arr, joiner) {\n    var str = '';\n    for (var i = 0; i < arr.length; i += 1) {\n        str += arr[i];\n        if (i + 1 < arr.length) {\n            str += joiner;\n        }\n    }\n    return str;\n};\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slicy(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                concatty(args, arguments)\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        }\n        return target.apply(\n            that,\n            concatty(args, arguments)\n        );\n\n    };\n\n    var boundLength = max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs[i] = '$' + i;\n    }\n\n    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n","'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n","'use strict';\n\nvar undefined;\n\nvar $SyntaxError = SyntaxError;\nvar $Function = Function;\nvar $TypeError = TypeError;\n\n// eslint-disable-next-line consistent-return\nvar getEvalledConstructor = function (expressionSyntax) {\n\ttry {\n\t\treturn $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n\t} catch (e) {}\n};\n\nvar $gOPD = Object.getOwnPropertyDescriptor;\nif ($gOPD) {\n\ttry {\n\t\t$gOPD({}, '');\n\t} catch (e) {\n\t\t$gOPD = null; // this is IE 8, which has a broken gOPD\n\t}\n}\n\nvar throwTypeError = function () {\n\tthrow new $TypeError();\n};\nvar ThrowTypeError = $gOPD\n\t? (function () {\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n\t\t\targuments.callee; // IE 8 does not throw here\n\t\t\treturn throwTypeError;\n\t\t} catch (calleeThrows) {\n\t\t\ttry {\n\t\t\t\t// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n\t\t\t\treturn $gOPD(arguments, 'callee').get;\n\t\t\t} catch (gOPDthrows) {\n\t\t\t\treturn throwTypeError;\n\t\t\t}\n\t\t}\n\t}())\n\t: throwTypeError;\n\nvar hasSymbols = require('has-symbols')();\nvar hasProto = require('has-proto')();\n\nvar getProto = Object.getPrototypeOf || (\n\thasProto\n\t\t? function (x) { return x.__proto__; } // eslint-disable-line no-proto\n\t\t: null\n);\n\nvar needsEval = {};\n\nvar TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);\n\nvar INTRINSICS = {\n\t'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,\n\t'%Array%': Array,\n\t'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n\t'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,\n\t'%AsyncFromSyncIteratorPrototype%': undefined,\n\t'%AsyncFunction%': needsEval,\n\t'%AsyncGenerator%': needsEval,\n\t'%AsyncGeneratorFunction%': needsEval,\n\t'%AsyncIteratorPrototype%': needsEval,\n\t'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n\t'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,\n\t'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,\n\t'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,\n\t'%Boolean%': Boolean,\n\t'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n\t'%Date%': Date,\n\t'%decodeURI%': decodeURI,\n\t'%decodeURIComponent%': decodeURIComponent,\n\t'%encodeURI%': encodeURI,\n\t'%encodeURIComponent%': encodeURIComponent,\n\t'%Error%': Error,\n\t'%eval%': eval, // eslint-disable-line no-eval\n\t'%EvalError%': EvalError,\n\t'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n\t'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n\t'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,\n\t'%Function%': $Function,\n\t'%GeneratorFunction%': needsEval,\n\t'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n\t'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n\t'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n\t'%isFinite%': isFinite,\n\t'%isNaN%': isNaN,\n\t'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,\n\t'%JSON%': typeof JSON === 'object' ? JSON : undefined,\n\t'%Map%': typeof Map === 'undefined' ? undefined : Map,\n\t'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),\n\t'%Math%': Math,\n\t'%Number%': Number,\n\t'%Object%': Object,\n\t'%parseFloat%': parseFloat,\n\t'%parseInt%': parseInt,\n\t'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n\t'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n\t'%RangeError%': RangeError,\n\t'%ReferenceError%': ReferenceError,\n\t'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n\t'%RegExp%': RegExp,\n\t'%Set%': typeof Set === 'undefined' ? undefined : Set,\n\t'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),\n\t'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n\t'%String%': String,\n\t'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,\n\t'%Symbol%': hasSymbols ? Symbol : undefined,\n\t'%SyntaxError%': $SyntaxError,\n\t'%ThrowTypeError%': ThrowTypeError,\n\t'%TypedArray%': TypedArray,\n\t'%TypeError%': $TypeError,\n\t'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n\t'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n\t'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n\t'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n\t'%URIError%': URIError,\n\t'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n\t'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,\n\t'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet\n};\n\nif (getProto) {\n\ttry {\n\t\tnull.error; // eslint-disable-line no-unused-expressions\n\t} catch (e) {\n\t\t// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229\n\t\tvar errorProto = getProto(getProto(e));\n\t\tINTRINSICS['%Error.prototype%'] = errorProto;\n\t}\n}\n\nvar doEval = function doEval(name) {\n\tvar value;\n\tif (name === '%AsyncFunction%') {\n\t\tvalue = getEvalledConstructor('async function () {}');\n\t} else if (name === '%GeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('function* () {}');\n\t} else if (name === '%AsyncGeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('async function* () {}');\n\t} else if (name === '%AsyncGenerator%') {\n\t\tvar fn = doEval('%AsyncGeneratorFunction%');\n\t\tif (fn) {\n\t\t\tvalue = fn.prototype;\n\t\t}\n\t} else if (name === '%AsyncIteratorPrototype%') {\n\t\tvar gen = doEval('%AsyncGenerator%');\n\t\tif (gen && getProto) {\n\t\t\tvalue = getProto(gen.prototype);\n\t\t}\n\t}\n\n\tINTRINSICS[name] = value;\n\n\treturn value;\n};\n\nvar LEGACY_ALIASES = {\n\t'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],\n\t'%ArrayPrototype%': ['Array', 'prototype'],\n\t'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],\n\t'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],\n\t'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],\n\t'%ArrayProto_values%': ['Array', 'prototype', 'values'],\n\t'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],\n\t'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],\n\t'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],\n\t'%BooleanPrototype%': ['Boolean', 'prototype'],\n\t'%DataViewPrototype%': ['DataView', 'prototype'],\n\t'%DatePrototype%': ['Date', 'prototype'],\n\t'%ErrorPrototype%': ['Error', 'prototype'],\n\t'%EvalErrorPrototype%': ['EvalError', 'prototype'],\n\t'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],\n\t'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],\n\t'%FunctionPrototype%': ['Function', 'prototype'],\n\t'%Generator%': ['GeneratorFunction', 'prototype'],\n\t'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],\n\t'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],\n\t'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],\n\t'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],\n\t'%JSONParse%': ['JSON', 'parse'],\n\t'%JSONStringify%': ['JSON', 'stringify'],\n\t'%MapPrototype%': ['Map', 'prototype'],\n\t'%NumberPrototype%': ['Number', 'prototype'],\n\t'%ObjectPrototype%': ['Object', 'prototype'],\n\t'%ObjProto_toString%': ['Object', 'prototype', 'toString'],\n\t'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],\n\t'%PromisePrototype%': ['Promise', 'prototype'],\n\t'%PromiseProto_then%': ['Promise', 'prototype', 'then'],\n\t'%Promise_all%': ['Promise', 'all'],\n\t'%Promise_reject%': ['Promise', 'reject'],\n\t'%Promise_resolve%': ['Promise', 'resolve'],\n\t'%RangeErrorPrototype%': ['RangeError', 'prototype'],\n\t'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],\n\t'%RegExpPrototype%': ['RegExp', 'prototype'],\n\t'%SetPrototype%': ['Set', 'prototype'],\n\t'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],\n\t'%StringPrototype%': ['String', 'prototype'],\n\t'%SymbolPrototype%': ['Symbol', 'prototype'],\n\t'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],\n\t'%TypedArrayPrototype%': ['TypedArray', 'prototype'],\n\t'%TypeErrorPrototype%': ['TypeError', 'prototype'],\n\t'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],\n\t'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],\n\t'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],\n\t'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],\n\t'%URIErrorPrototype%': ['URIError', 'prototype'],\n\t'%WeakMapPrototype%': ['WeakMap', 'prototype'],\n\t'%WeakSetPrototype%': ['WeakSet', 'prototype']\n};\n\nvar bind = require('function-bind');\nvar hasOwn = require('hasown');\nvar $concat = bind.call(Function.call, Array.prototype.concat);\nvar $spliceApply = bind.call(Function.apply, Array.prototype.splice);\nvar $replace = bind.call(Function.call, String.prototype.replace);\nvar $strSlice = bind.call(Function.call, String.prototype.slice);\nvar $exec = bind.call(Function.call, RegExp.prototype.exec);\n\n/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */\nvar rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */\nvar stringToPath = function stringToPath(string) {\n\tvar first = $strSlice(string, 0, 1);\n\tvar last = $strSlice(string, -1);\n\tif (first === '%' && last !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n\t} else if (last === '%' && first !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n\t}\n\tvar result = [];\n\t$replace(string, rePropName, function (match, number, quote, subString) {\n\t\tresult[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;\n\t});\n\treturn result;\n};\n/* end adaptation */\n\nvar getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n\tvar intrinsicName = name;\n\tvar alias;\n\tif (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n\t\talias = LEGACY_ALIASES[intrinsicName];\n\t\tintrinsicName = '%' + alias[0] + '%';\n\t}\n\n\tif (hasOwn(INTRINSICS, intrinsicName)) {\n\t\tvar value = INTRINSICS[intrinsicName];\n\t\tif (value === needsEval) {\n\t\t\tvalue = doEval(intrinsicName);\n\t\t}\n\t\tif (typeof value === 'undefined' && !allowMissing) {\n\t\t\tthrow new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t\t}\n\n\t\treturn {\n\t\t\talias: alias,\n\t\t\tname: intrinsicName,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tthrow new $SyntaxError('intrinsic ' + name + ' does not exist!');\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n\tif (typeof name !== 'string' || name.length === 0) {\n\t\tthrow new $TypeError('intrinsic name must be a non-empty string');\n\t}\n\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\tthrow new $TypeError('\"allowMissing\" argument must be a boolean');\n\t}\n\n\tif ($exec(/^%?[^%]*%?$/, name) === null) {\n\t\tthrow new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');\n\t}\n\tvar parts = stringToPath(name);\n\tvar intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n\n\tvar intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n\tvar intrinsicRealName = intrinsic.name;\n\tvar value = intrinsic.value;\n\tvar skipFurtherCaching = false;\n\n\tvar alias = intrinsic.alias;\n\tif (alias) {\n\t\tintrinsicBaseName = alias[0];\n\t\t$spliceApply(parts, $concat([0, 1], alias));\n\t}\n\n\tfor (var i = 1, isOwn = true; i < parts.length; i += 1) {\n\t\tvar part = parts[i];\n\t\tvar first = $strSlice(part, 0, 1);\n\t\tvar last = $strSlice(part, -1);\n\t\tif (\n\t\t\t(\n\t\t\t\t(first === '\"' || first === \"'\" || first === '`')\n\t\t\t\t|| (last === '\"' || last === \"'\" || last === '`')\n\t\t\t)\n\t\t\t&& first !== last\n\t\t) {\n\t\t\tthrow new $SyntaxError('property names with quotes must have matching quotes');\n\t\t}\n\t\tif (part === 'constructor' || !isOwn) {\n\t\t\tskipFurtherCaching = true;\n\t\t}\n\n\t\tintrinsicBaseName += '.' + part;\n\t\tintrinsicRealName = '%' + intrinsicBaseName + '%';\n\n\t\tif (hasOwn(INTRINSICS, intrinsicRealName)) {\n\t\t\tvalue = INTRINSICS[intrinsicRealName];\n\t\t} else if (value != null) {\n\t\t\tif (!(part in value)) {\n\t\t\t\tif (!allowMissing) {\n\t\t\t\t\tthrow new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');\n\t\t\t\t}\n\t\t\t\treturn void undefined;\n\t\t\t}\n\t\t\tif ($gOPD && (i + 1) >= parts.length) {\n\t\t\t\tvar desc = $gOPD(value, part);\n\t\t\t\tisOwn = !!desc;\n\n\t\t\t\t// By convention, when a data property is converted to an accessor\n\t\t\t\t// property to emulate a data property that does not suffer from\n\t\t\t\t// the override mistake, that accessor's getter is marked with\n\t\t\t\t// an `originalValue` property. Here, when we detect this, we\n\t\t\t\t// uphold the illusion by pretending to see that original data\n\t\t\t\t// property, i.e., returning the value rather than the getter\n\t\t\t\t// itself.\n\t\t\t\tif (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n\t\t\t\t\tvalue = desc.get;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = value[part];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tisOwn = hasOwn(value, part);\n\t\t\t\tvalue = value[part];\n\t\t\t}\n\n\t\t\tif (isOwn && !skipFurtherCaching) {\n\t\t\t\tINTRINSICS[intrinsicRealName] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n};\n","'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);\n\nif ($gOPD) {\n\ttry {\n\t\t$gOPD([], 'length');\n\t} catch (e) {\n\t\t// IE 8 has a broken gOPD\n\t\t$gOPD = null;\n\t}\n}\n\nmodule.exports = $gOPD;\n","'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $defineProperty = GetIntrinsic('%Object.defineProperty%', true);\n\nvar hasPropertyDescriptors = function hasPropertyDescriptors() {\n\tif ($defineProperty) {\n\t\ttry {\n\t\t\t$defineProperty({}, 'a', { value: 1 });\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\t// IE 8 has a broken defineProperty\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n};\n\nhasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {\n\t// node v0.6 has a bug where array lengths can be Set but not Defined\n\tif (!hasPropertyDescriptors()) {\n\t\treturn null;\n\t}\n\ttry {\n\t\treturn $defineProperty([], 'length', { value: 1 }).length !== 1;\n\t} catch (e) {\n\t\t// In Firefox 4-22, defining length on an array throws an exception.\n\t\treturn true;\n\t}\n};\n\nmodule.exports = hasPropertyDescriptors;\n","'use strict';\n\nvar test = {\n\tfoo: {}\n};\n\nvar $Object = Object;\n\nmodule.exports = function hasProto() {\n\treturn { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);\n};\n","'use strict';\n\nvar origSymbol = typeof Symbol !== 'undefined' && Symbol;\nvar hasSymbolSham = require('./shams');\n\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n","'use strict';\n\n/* eslint complexity: [2, 18], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\tvar descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nvar hasSymbols = require('has-symbols/shams');\n\nmodule.exports = function hasToStringTagShams() {\n\treturn hasSymbols() && !!Symbol.toStringTag;\n};\n","'use strict';\n\nvar call = Function.prototype.call;\nvar $hasOwn = Object.prototype.hasOwnProperty;\nvar bind = require('function-bind');\n\n/** @type {(o: {}, p: PropertyKey) => p is keyof o} */\nmodule.exports = bind.call(call, $hasOwn);\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar callBound = require('call-bind/callBound');\n\nvar $toString = callBound('Object.prototype.toString');\n\nvar isStandardArguments = function isArguments(value) {\n\tif (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {\n\t\treturn false;\n\t}\n\treturn $toString(value) === '[object Arguments]';\n};\n\nvar isLegacyArguments = function isArguments(value) {\n\tif (isStandardArguments(value)) {\n\t\treturn true;\n\t}\n\treturn value !== null &&\n\t\ttypeof value === 'object' &&\n\t\ttypeof value.length === 'number' &&\n\t\tvalue.length >= 0 &&\n\t\t$toString(value) !== '[object Array]' &&\n\t\t$toString(value.callee) === '[object Function]';\n};\n\nvar supportsStandardArguments = (function () {\n\treturn isStandardArguments(arguments);\n}());\n\nisStandardArguments.isLegacyArguments = isLegacyArguments; // for tests\n\nmodule.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;\n","'use strict';\n\nvar fnToStr = Function.prototype.toString;\nvar reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;\nvar badArrayLike;\nvar isCallableMarker;\nif (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {\n\ttry {\n\t\tbadArrayLike = Object.defineProperty({}, 'length', {\n\t\t\tget: function () {\n\t\t\t\tthrow isCallableMarker;\n\t\t\t}\n\t\t});\n\t\tisCallableMarker = {};\n\t\t// eslint-disable-next-line no-throw-literal\n\t\treflectApply(function () { throw 42; }, null, badArrayLike);\n\t} catch (_) {\n\t\tif (_ !== isCallableMarker) {\n\t\t\treflectApply = null;\n\t\t}\n\t}\n} else {\n\treflectApply = null;\n}\n\nvar constructorRegex = /^\\s*class\\b/;\nvar isES6ClassFn = function isES6ClassFunction(value) {\n\ttry {\n\t\tvar fnStr = fnToStr.call(value);\n\t\treturn constructorRegex.test(fnStr);\n\t} catch (e) {\n\t\treturn false; // not a function\n\t}\n};\n\nvar tryFunctionObject = function tryFunctionToStr(value) {\n\ttry {\n\t\tif (isES6ClassFn(value)) { return false; }\n\t\tfnToStr.call(value);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\nvar toStr = Object.prototype.toString;\nvar objectClass = '[object Object]';\nvar fnClass = '[object Function]';\nvar genClass = '[object GeneratorFunction]';\nvar ddaClass = '[object HTMLAllCollection]'; // IE 11\nvar ddaClass2 = '[object HTML document.all class]';\nvar ddaClass3 = '[object HTMLCollection]'; // IE 9-10\nvar hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`\n\nvar isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing\n\nvar isDDA = function isDocumentDotAll() { return false; };\nif (typeof document === 'object') {\n\t// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly\n\tvar all = document.all;\n\tif (toStr.call(all) === toStr.call(document.all)) {\n\t\tisDDA = function isDocumentDotAll(value) {\n\t\t\t/* globals document: false */\n\t\t\t// in IE 6-8, typeof document.all is \"object\" and it's truthy\n\t\t\tif ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {\n\t\t\t\ttry {\n\t\t\t\t\tvar str = toStr.call(value);\n\t\t\t\t\treturn (\n\t\t\t\t\t\tstr === ddaClass\n\t\t\t\t\t\t|| str === ddaClass2\n\t\t\t\t\t\t|| str === ddaClass3 // opera 12.16\n\t\t\t\t\t\t|| str === objectClass // IE 6-8\n\t\t\t\t\t) && value('') == null; // eslint-disable-line eqeqeq\n\t\t\t\t} catch (e) { /**/ }\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t}\n}\n\nmodule.exports = reflectApply\n\t? function isCallable(value) {\n\t\tif (isDDA(value)) { return true; }\n\t\tif (!value) { return false; }\n\t\tif (typeof value !== 'function' && typeof value !== 'object') { return false; }\n\t\ttry {\n\t\t\treflectApply(value, null, badArrayLike);\n\t\t} catch (e) {\n\t\t\tif (e !== isCallableMarker) { return false; }\n\t\t}\n\t\treturn !isES6ClassFn(value) && tryFunctionObject(value);\n\t}\n\t: function isCallable(value) {\n\t\tif (isDDA(value)) { return true; }\n\t\tif (!value) { return false; }\n\t\tif (typeof value !== 'function' && typeof value !== 'object') { return false; }\n\t\tif (hasToStringTag) { return tryFunctionObject(value); }\n\t\tif (isES6ClassFn(value)) { return false; }\n\t\tvar strClass = toStr.call(value);\n\t\tif (strClass !== fnClass && strClass !== genClass && !(/^\\[object HTML/).test(strClass)) { return false; }\n\t\treturn tryFunctionObject(value);\n\t};\n","'use strict';\n\nvar toStr = Object.prototype.toString;\nvar fnToStr = Function.prototype.toString;\nvar isFnRegex = /^\\s*(?:function)?\\*/;\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar getProto = Object.getPrototypeOf;\nvar getGeneratorFunc = function () { // eslint-disable-line consistent-return\n\tif (!hasToStringTag) {\n\t\treturn false;\n\t}\n\ttry {\n\t\treturn Function('return function*() {}')();\n\t} catch (e) {\n\t}\n};\nvar GeneratorFunction;\n\nmodule.exports = function isGeneratorFunction(fn) {\n\tif (typeof fn !== 'function') {\n\t\treturn false;\n\t}\n\tif (isFnRegex.test(fnToStr.call(fn))) {\n\t\treturn true;\n\t}\n\tif (!hasToStringTag) {\n\t\tvar str = toStr.call(fn);\n\t\treturn str === '[object GeneratorFunction]';\n\t}\n\tif (!getProto) {\n\t\treturn false;\n\t}\n\tif (typeof GeneratorFunction === 'undefined') {\n\t\tvar generatorFunc = getGeneratorFunc();\n\t\tGeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;\n\t}\n\treturn getProto(fn) === GeneratorFunction;\n};\n","'use strict';\n\n/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */\n\nmodule.exports = function isNaN(value) {\n\treturn value !== value;\n};\n","'use strict';\n\nvar callBind = require('call-bind');\nvar define = require('define-properties');\n\nvar implementation = require('./implementation');\nvar getPolyfill = require('./polyfill');\nvar shim = require('./shim');\n\nvar polyfill = callBind(getPolyfill(), Number);\n\n/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */\n\ndefine(polyfill, {\n\tgetPolyfill: getPolyfill,\n\timplementation: implementation,\n\tshim: shim\n});\n\nmodule.exports = polyfill;\n","'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = function getPolyfill() {\n\tif (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {\n\t\treturn Number.isNaN;\n\t}\n\treturn implementation;\n};\n","'use strict';\n\nvar define = require('define-properties');\nvar getPolyfill = require('./polyfill');\n\n/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */\n\nmodule.exports = function shimNumberIsNaN() {\n\tvar polyfill = getPolyfill();\n\tdefine(Number, { isNaN: polyfill }, {\n\t\tisNaN: function testIsNaN() {\n\t\t\treturn Number.isNaN !== polyfill;\n\t\t}\n\t});\n\treturn polyfill;\n};\n","'use strict';\n\nvar whichTypedArray = require('which-typed-array');\n\nmodule.exports = function isTypedArray(value) {\n\treturn !!whichTypedArray(value);\n};\n","'use strict';\n\nvar numberIsNaN = function (value) {\n\treturn value !== value;\n};\n\nmodule.exports = function is(a, b) {\n\tif (a === 0 && b === 0) {\n\t\treturn 1 / a === 1 / b;\n\t}\n\tif (a === b) {\n\t\treturn true;\n\t}\n\tif (numberIsNaN(a) && numberIsNaN(b)) {\n\t\treturn true;\n\t}\n\treturn false;\n};\n\n","'use strict';\n\nvar define = require('define-properties');\nvar callBind = require('call-bind');\n\nvar implementation = require('./implementation');\nvar getPolyfill = require('./polyfill');\nvar shim = require('./shim');\n\nvar polyfill = callBind(getPolyfill(), Object);\n\ndefine(polyfill, {\n\tgetPolyfill: getPolyfill,\n\timplementation: implementation,\n\tshim: shim\n});\n\nmodule.exports = polyfill;\n","'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = function getPolyfill() {\n\treturn typeof Object.is === 'function' ? Object.is : implementation;\n};\n","'use strict';\n\nvar getPolyfill = require('./polyfill');\nvar define = require('define-properties');\n\nmodule.exports = function shimObjectIs() {\n\tvar polyfill = getPolyfill();\n\tdefine(Object, { is: polyfill }, {\n\t\tis: function testObjectIs() {\n\t\t\treturn Object.is !== polyfill;\n\t\t}\n\t});\n\treturn polyfill;\n};\n","'use strict';\n\nvar keysShim;\nif (!Object.keys) {\n\t// modified from https://github.com/es-shims/es5-shim\n\tvar has = Object.prototype.hasOwnProperty;\n\tvar toStr = Object.prototype.toString;\n\tvar isArgs = require('./isArguments'); // eslint-disable-line global-require\n\tvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\tvar hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');\n\tvar hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');\n\tvar dontEnums = [\n\t\t'toString',\n\t\t'toLocaleString',\n\t\t'valueOf',\n\t\t'hasOwnProperty',\n\t\t'isPrototypeOf',\n\t\t'propertyIsEnumerable',\n\t\t'constructor'\n\t];\n\tvar equalsConstructorPrototype = function (o) {\n\t\tvar ctor = o.constructor;\n\t\treturn ctor && ctor.prototype === o;\n\t};\n\tvar excludedKeys = {\n\t\t$applicationCache: true,\n\t\t$console: true,\n\t\t$external: true,\n\t\t$frame: true,\n\t\t$frameElement: true,\n\t\t$frames: true,\n\t\t$innerHeight: true,\n\t\t$innerWidth: true,\n\t\t$onmozfullscreenchange: true,\n\t\t$onmozfullscreenerror: true,\n\t\t$outerHeight: true,\n\t\t$outerWidth: true,\n\t\t$pageXOffset: true,\n\t\t$pageYOffset: true,\n\t\t$parent: true,\n\t\t$scrollLeft: true,\n\t\t$scrollTop: true,\n\t\t$scrollX: true,\n\t\t$scrollY: true,\n\t\t$self: true,\n\t\t$webkitIndexedDB: true,\n\t\t$webkitStorageInfo: true,\n\t\t$window: true\n\t};\n\tvar hasAutomationEqualityBug = (function () {\n\t\t/* global window */\n\t\tif (typeof window === 'undefined') { return false; }\n\t\tfor (var k in window) {\n\t\t\ttry {\n\t\t\t\tif (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tequalsConstructorPrototype(window[k]);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}());\n\tvar equalsConstructorPrototypeIfNotBuggy = function (o) {\n\t\t/* global window */\n\t\tif (typeof window === 'undefined' || !hasAutomationEqualityBug) {\n\t\t\treturn equalsConstructorPrototype(o);\n\t\t}\n\t\ttry {\n\t\t\treturn equalsConstructorPrototype(o);\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tkeysShim = function keys(object) {\n\t\tvar isObject = object !== null && typeof object === 'object';\n\t\tvar isFunction = toStr.call(object) === '[object Function]';\n\t\tvar isArguments = isArgs(object);\n\t\tvar isString = isObject && toStr.call(object) === '[object String]';\n\t\tvar theKeys = [];\n\n\t\tif (!isObject && !isFunction && !isArguments) {\n\t\t\tthrow new TypeError('Object.keys called on a non-object');\n\t\t}\n\n\t\tvar skipProto = hasProtoEnumBug && isFunction;\n\t\tif (isString && object.length > 0 && !has.call(object, 0)) {\n\t\t\tfor (var i = 0; i < object.length; ++i) {\n\t\t\t\ttheKeys.push(String(i));\n\t\t\t}\n\t\t}\n\n\t\tif (isArguments && object.length > 0) {\n\t\t\tfor (var j = 0; j < object.length; ++j) {\n\t\t\t\ttheKeys.push(String(j));\n\t\t\t}\n\t\t} else {\n\t\t\tfor (var name in object) {\n\t\t\t\tif (!(skipProto && name === 'prototype') && has.call(object, name)) {\n\t\t\t\t\ttheKeys.push(String(name));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (hasDontEnumBug) {\n\t\t\tvar skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);\n\n\t\t\tfor (var k = 0; k < dontEnums.length; ++k) {\n\t\t\t\tif (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {\n\t\t\t\t\ttheKeys.push(dontEnums[k]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn theKeys;\n\t};\n}\nmodule.exports = keysShim;\n","'use strict';\n\nvar slice = Array.prototype.slice;\nvar isArgs = require('./isArguments');\n\nvar origKeys = Object.keys;\nvar keysShim = origKeys ? function keys(o) { return origKeys(o); } : require('./implementation');\n\nvar originalKeys = Object.keys;\n\nkeysShim.shim = function shimObjectKeys() {\n\tif (Object.keys) {\n\t\tvar keysWorksWithArguments = (function () {\n\t\t\t// Safari 5.0 bug\n\t\t\tvar args = Object.keys(arguments);\n\t\t\treturn args && args.length === arguments.length;\n\t\t}(1, 2));\n\t\tif (!keysWorksWithArguments) {\n\t\t\tObject.keys = function keys(object) { // eslint-disable-line func-name-matching\n\t\t\t\tif (isArgs(object)) {\n\t\t\t\t\treturn originalKeys(slice.call(object));\n\t\t\t\t}\n\t\t\t\treturn originalKeys(object);\n\t\t\t};\n\t\t}\n\t} else {\n\t\tObject.keys = keysShim;\n\t}\n\treturn Object.keys || keysShim;\n};\n\nmodule.exports = keysShim;\n","'use strict';\n\nvar toStr = Object.prototype.toString;\n\nmodule.exports = function isArguments(value) {\n\tvar str = toStr.call(value);\n\tvar isArgs = str === '[object Arguments]';\n\tif (!isArgs) {\n\t\tisArgs = str !== '[object Array]' &&\n\t\t\tvalue !== null &&\n\t\t\ttypeof value === 'object' &&\n\t\t\ttypeof value.length === 'number' &&\n\t\t\tvalue.length >= 0 &&\n\t\t\ttoStr.call(value.callee) === '[object Function]';\n\t}\n\treturn isArgs;\n};\n","'use strict';\n\n// modified from https://github.com/es-shims/es6-shim\nvar objectKeys = require('object-keys');\nvar hasSymbols = require('has-symbols/shams')();\nvar callBound = require('call-bind/callBound');\nvar toObject = Object;\nvar $push = callBound('Array.prototype.push');\nvar $propIsEnumerable = callBound('Object.prototype.propertyIsEnumerable');\nvar originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;\n\n// eslint-disable-next-line no-unused-vars\nmodule.exports = function assign(target, source1) {\n\tif (target == null) { throw new TypeError('target must be an object'); }\n\tvar to = toObject(target); // step 1\n\tif (arguments.length === 1) {\n\t\treturn to; // step 2\n\t}\n\tfor (var s = 1; s < arguments.length; ++s) {\n\t\tvar from = toObject(arguments[s]); // step 3.a.i\n\n\t\t// step 3.a.ii:\n\t\tvar keys = objectKeys(from);\n\t\tvar getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);\n\t\tif (getSymbols) {\n\t\t\tvar syms = getSymbols(from);\n\t\t\tfor (var j = 0; j < syms.length; ++j) {\n\t\t\t\tvar key = syms[j];\n\t\t\t\tif ($propIsEnumerable(from, key)) {\n\t\t\t\t\t$push(keys, key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// step 3.a.iii:\n\t\tfor (var i = 0; i < keys.length; ++i) {\n\t\t\tvar nextKey = keys[i];\n\t\t\tif ($propIsEnumerable(from, nextKey)) { // step 3.a.iii.2\n\t\t\t\tvar propValue = from[nextKey]; // step 3.a.iii.2.a\n\t\t\t\tto[nextKey] = propValue; // step 3.a.iii.2.b\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to; // step 4\n};\n","'use strict';\n\nvar implementation = require('./implementation');\n\nvar lacksProperEnumerationOrder = function () {\n\tif (!Object.assign) {\n\t\treturn false;\n\t}\n\t/*\n\t * v8, specifically in node 4.x, has a bug with incorrect property enumeration order\n\t * note: this does not detect the bug unless there's 20 characters\n\t */\n\tvar str = 'abcdefghijklmnopqrst';\n\tvar letters = str.split('');\n\tvar map = {};\n\tfor (var i = 0; i < letters.length; ++i) {\n\t\tmap[letters[i]] = letters[i];\n\t}\n\tvar obj = Object.assign({}, map);\n\tvar actual = '';\n\tfor (var k in obj) {\n\t\tactual += k;\n\t}\n\treturn str !== actual;\n};\n\nvar assignHasPendingExceptions = function () {\n\tif (!Object.assign || !Object.preventExtensions) {\n\t\treturn false;\n\t}\n\t/*\n\t * Firefox 37 still has \"pending exception\" logic in its Object.assign implementation,\n\t * which is 72% slower than our shim, and Firefox 40's native implementation.\n\t */\n\tvar thrower = Object.preventExtensions({ 1: 2 });\n\ttry {\n\t\tObject.assign(thrower, 'xy');\n\t} catch (e) {\n\t\treturn thrower[1] === 'y';\n\t}\n\treturn false;\n};\n\nmodule.exports = function getPolyfill() {\n\tif (!Object.assign) {\n\t\treturn implementation;\n\t}\n\tif (lacksProperEnumerationOrder()) {\n\t\treturn implementation;\n\t}\n\tif (assignHasPendingExceptions()) {\n\t\treturn implementation;\n\t}\n\treturn Object.assign;\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar define = require('define-data-property');\nvar hasDescriptors = require('has-property-descriptors')();\nvar gOPD = require('gopd');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $floor = GetIntrinsic('%Math.floor%');\n\nmodule.exports = function setFunctionLength(fn, length) {\n\tif (typeof fn !== 'function') {\n\t\tthrow new $TypeError('`fn` is not a function');\n\t}\n\tif (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {\n\t\tthrow new $TypeError('`length` must be a positive 32-bit integer');\n\t}\n\n\tvar loose = arguments.length > 2 && !!arguments[2];\n\n\tvar functionLengthIsConfigurable = true;\n\tvar functionLengthIsWritable = true;\n\tif ('length' in fn && gOPD) {\n\t\tvar desc = gOPD(fn, 'length');\n\t\tif (desc && !desc.configurable) {\n\t\t\tfunctionLengthIsConfigurable = false;\n\t\t}\n\t\tif (desc && !desc.writable) {\n\t\t\tfunctionLengthIsWritable = false;\n\t\t}\n\t}\n\n\tif (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {\n\t\tif (hasDescriptors) {\n\t\t\tdefine(fn, 'length', length, true, true);\n\t\t} else {\n\t\t\tdefine(fn, 'length', length);\n\t\t}\n\t}\n\treturn fn;\n};\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","// Currently in sync with Node.js lib/internal/util/types.js\n// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9\n\n'use strict';\n\nvar isArgumentsObject = require('is-arguments');\nvar isGeneratorFunction = require('is-generator-function');\nvar whichTypedArray = require('which-typed-array');\nvar isTypedArray = require('is-typed-array');\n\nfunction uncurryThis(f) {\n  return f.call.bind(f);\n}\n\nvar BigIntSupported = typeof BigInt !== 'undefined';\nvar SymbolSupported = typeof Symbol !== 'undefined';\n\nvar ObjectToString = uncurryThis(Object.prototype.toString);\n\nvar numberValue = uncurryThis(Number.prototype.valueOf);\nvar stringValue = uncurryThis(String.prototype.valueOf);\nvar booleanValue = uncurryThis(Boolean.prototype.valueOf);\n\nif (BigIntSupported) {\n  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);\n}\n\nif (SymbolSupported) {\n  var symbolValue = uncurryThis(Symbol.prototype.valueOf);\n}\n\nfunction checkBoxedPrimitive(value, prototypeValueOf) {\n  if (typeof value !== 'object') {\n    return false;\n  }\n  try {\n    prototypeValueOf(value);\n    return true;\n  } catch(e) {\n    return false;\n  }\n}\n\nexports.isArgumentsObject = isArgumentsObject;\nexports.isGeneratorFunction = isGeneratorFunction;\nexports.isTypedArray = isTypedArray;\n\n// Taken from here and modified for better browser support\n// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js\nfunction isPromise(input) {\n\treturn (\n\t\t(\n\t\t\ttypeof Promise !== 'undefined' &&\n\t\t\tinput instanceof Promise\n\t\t) ||\n\t\t(\n\t\t\tinput !== null &&\n\t\t\ttypeof input === 'object' &&\n\t\t\ttypeof input.then === 'function' &&\n\t\t\ttypeof input.catch === 'function'\n\t\t)\n\t);\n}\nexports.isPromise = isPromise;\n\nfunction isArrayBufferView(value) {\n  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {\n    return ArrayBuffer.isView(value);\n  }\n\n  return (\n    isTypedArray(value) ||\n    isDataView(value)\n  );\n}\nexports.isArrayBufferView = isArrayBufferView;\n\n\nfunction isUint8Array(value) {\n  return whichTypedArray(value) === 'Uint8Array';\n}\nexports.isUint8Array = isUint8Array;\n\nfunction isUint8ClampedArray(value) {\n  return whichTypedArray(value) === 'Uint8ClampedArray';\n}\nexports.isUint8ClampedArray = isUint8ClampedArray;\n\nfunction isUint16Array(value) {\n  return whichTypedArray(value) === 'Uint16Array';\n}\nexports.isUint16Array = isUint16Array;\n\nfunction isUint32Array(value) {\n  return whichTypedArray(value) === 'Uint32Array';\n}\nexports.isUint32Array = isUint32Array;\n\nfunction isInt8Array(value) {\n  return whichTypedArray(value) === 'Int8Array';\n}\nexports.isInt8Array = isInt8Array;\n\nfunction isInt16Array(value) {\n  return whichTypedArray(value) === 'Int16Array';\n}\nexports.isInt16Array = isInt16Array;\n\nfunction isInt32Array(value) {\n  return whichTypedArray(value) === 'Int32Array';\n}\nexports.isInt32Array = isInt32Array;\n\nfunction isFloat32Array(value) {\n  return whichTypedArray(value) === 'Float32Array';\n}\nexports.isFloat32Array = isFloat32Array;\n\nfunction isFloat64Array(value) {\n  return whichTypedArray(value) === 'Float64Array';\n}\nexports.isFloat64Array = isFloat64Array;\n\nfunction isBigInt64Array(value) {\n  return whichTypedArray(value) === 'BigInt64Array';\n}\nexports.isBigInt64Array = isBigInt64Array;\n\nfunction isBigUint64Array(value) {\n  return whichTypedArray(value) === 'BigUint64Array';\n}\nexports.isBigUint64Array = isBigUint64Array;\n\nfunction isMapToString(value) {\n  return ObjectToString(value) === '[object Map]';\n}\nisMapToString.working = (\n  typeof Map !== 'undefined' &&\n  isMapToString(new Map())\n);\n\nfunction isMap(value) {\n  if (typeof Map === 'undefined') {\n    return false;\n  }\n\n  return isMapToString.working\n    ? isMapToString(value)\n    : value instanceof Map;\n}\nexports.isMap = isMap;\n\nfunction isSetToString(value) {\n  return ObjectToString(value) === '[object Set]';\n}\nisSetToString.working = (\n  typeof Set !== 'undefined' &&\n  isSetToString(new Set())\n);\nfunction isSet(value) {\n  if (typeof Set === 'undefined') {\n    return false;\n  }\n\n  return isSetToString.working\n    ? isSetToString(value)\n    : value instanceof Set;\n}\nexports.isSet = isSet;\n\nfunction isWeakMapToString(value) {\n  return ObjectToString(value) === '[object WeakMap]';\n}\nisWeakMapToString.working = (\n  typeof WeakMap !== 'undefined' &&\n  isWeakMapToString(new WeakMap())\n);\nfunction isWeakMap(value) {\n  if (typeof WeakMap === 'undefined') {\n    return false;\n  }\n\n  return isWeakMapToString.working\n    ? isWeakMapToString(value)\n    : value instanceof WeakMap;\n}\nexports.isWeakMap = isWeakMap;\n\nfunction isWeakSetToString(value) {\n  return ObjectToString(value) === '[object WeakSet]';\n}\nisWeakSetToString.working = (\n  typeof WeakSet !== 'undefined' &&\n  isWeakSetToString(new WeakSet())\n);\nfunction isWeakSet(value) {\n  return isWeakSetToString(value);\n}\nexports.isWeakSet = isWeakSet;\n\nfunction isArrayBufferToString(value) {\n  return ObjectToString(value) === '[object ArrayBuffer]';\n}\nisArrayBufferToString.working = (\n  typeof ArrayBuffer !== 'undefined' &&\n  isArrayBufferToString(new ArrayBuffer())\n);\nfunction isArrayBuffer(value) {\n  if (typeof ArrayBuffer === 'undefined') {\n    return false;\n  }\n\n  return isArrayBufferToString.working\n    ? isArrayBufferToString(value)\n    : value instanceof ArrayBuffer;\n}\nexports.isArrayBuffer = isArrayBuffer;\n\nfunction isDataViewToString(value) {\n  return ObjectToString(value) === '[object DataView]';\n}\nisDataViewToString.working = (\n  typeof ArrayBuffer !== 'undefined' &&\n  typeof DataView !== 'undefined' &&\n  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))\n);\nfunction isDataView(value) {\n  if (typeof DataView === 'undefined') {\n    return false;\n  }\n\n  return isDataViewToString.working\n    ? isDataViewToString(value)\n    : value instanceof DataView;\n}\nexports.isDataView = isDataView;\n\n// Store a copy of SharedArrayBuffer in case it's deleted elsewhere\nvar SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;\nfunction isSharedArrayBufferToString(value) {\n  return ObjectToString(value) === '[object SharedArrayBuffer]';\n}\nfunction isSharedArrayBuffer(value) {\n  if (typeof SharedArrayBufferCopy === 'undefined') {\n    return false;\n  }\n\n  if (typeof isSharedArrayBufferToString.working === 'undefined') {\n    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());\n  }\n\n  return isSharedArrayBufferToString.working\n    ? isSharedArrayBufferToString(value)\n    : value instanceof SharedArrayBufferCopy;\n}\nexports.isSharedArrayBuffer = isSharedArrayBuffer;\n\nfunction isAsyncFunction(value) {\n  return ObjectToString(value) === '[object AsyncFunction]';\n}\nexports.isAsyncFunction = isAsyncFunction;\n\nfunction isMapIterator(value) {\n  return ObjectToString(value) === '[object Map Iterator]';\n}\nexports.isMapIterator = isMapIterator;\n\nfunction isSetIterator(value) {\n  return ObjectToString(value) === '[object Set Iterator]';\n}\nexports.isSetIterator = isSetIterator;\n\nfunction isGeneratorObject(value) {\n  return ObjectToString(value) === '[object Generator]';\n}\nexports.isGeneratorObject = isGeneratorObject;\n\nfunction isWebAssemblyCompiledModule(value) {\n  return ObjectToString(value) === '[object WebAssembly.Module]';\n}\nexports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;\n\nfunction isNumberObject(value) {\n  return checkBoxedPrimitive(value, numberValue);\n}\nexports.isNumberObject = isNumberObject;\n\nfunction isStringObject(value) {\n  return checkBoxedPrimitive(value, stringValue);\n}\nexports.isStringObject = isStringObject;\n\nfunction isBooleanObject(value) {\n  return checkBoxedPrimitive(value, booleanValue);\n}\nexports.isBooleanObject = isBooleanObject;\n\nfunction isBigIntObject(value) {\n  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);\n}\nexports.isBigIntObject = isBigIntObject;\n\nfunction isSymbolObject(value) {\n  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);\n}\nexports.isSymbolObject = isSymbolObject;\n\nfunction isBoxedPrimitive(value) {\n  return (\n    isNumberObject(value) ||\n    isStringObject(value) ||\n    isBooleanObject(value) ||\n    isBigIntObject(value) ||\n    isSymbolObject(value)\n  );\n}\nexports.isBoxedPrimitive = isBoxedPrimitive;\n\nfunction isAnyArrayBuffer(value) {\n  return typeof Uint8Array !== 'undefined' && (\n    isArrayBuffer(value) ||\n    isSharedArrayBuffer(value)\n  );\n}\nexports.isAnyArrayBuffer = isAnyArrayBuffer;\n\n['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {\n  Object.defineProperty(exports, method, {\n    enumerable: false,\n    value: function() {\n      throw new Error(method + ' is not supported in userland');\n    }\n  });\n});\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnvRegex = /^$/;\n\nif (process.env.NODE_DEBUG) {\n  var debugEnv = process.env.NODE_DEBUG;\n  debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g, '\\\\$&')\n    .replace(/\\*/g, '.*')\n    .replace(/,/g, '$|^')\n    .toUpperCase();\n  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');\n}\nexports.debuglog = function(set) {\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (debugEnvRegex.test(set)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').slice(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.slice(1, -1);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nexports.types = require('./support/types');\n\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\nexports.types.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\nexports.types.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\nexports.types.isNativeError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },\n            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n","'use strict';\n\nvar forEach = require('for-each');\nvar availableTypedArrays = require('available-typed-arrays');\nvar callBind = require('call-bind');\nvar callBound = require('call-bind/callBound');\nvar gOPD = require('gopd');\n\nvar $toString = callBound('Object.prototype.toString');\nvar hasToStringTag = require('has-tostringtag/shams')();\n\nvar g = typeof globalThis === 'undefined' ? global : globalThis;\nvar typedArrays = availableTypedArrays();\n\nvar $slice = callBound('String.prototype.slice');\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\n\nvar $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {\n\tfor (var i = 0; i < array.length; i += 1) {\n\t\tif (array[i] === value) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\nvar cache = { __proto__: null };\nif (hasToStringTag && gOPD && getPrototypeOf) {\n\tforEach(typedArrays, function (typedArray) {\n\t\tvar arr = new g[typedArray]();\n\t\tif (Symbol.toStringTag in arr) {\n\t\t\tvar proto = getPrototypeOf(arr);\n\t\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\t\tif (!descriptor) {\n\t\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t\t}\n\t\t\tcache['$' + typedArray] = callBind(descriptor.get);\n\t\t}\n\t});\n} else {\n\tforEach(typedArrays, function (typedArray) {\n\t\tvar arr = new g[typedArray]();\n\t\tvar fn = arr.slice || arr.set;\n\t\tif (fn) {\n\t\t\tcache['$' + typedArray] = callBind(fn);\n\t\t}\n\t});\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\tvar found = false;\n\tforEach(cache, function (getter, typedArray) {\n\t\tif (!found) {\n\t\t\ttry {\n\t\t\t\tif ('$' + getter(value) === typedArray) {\n\t\t\t\t\tfound = $slice(typedArray, 1);\n\t\t\t\t}\n\t\t\t} catch (e) { /**/ }\n\t\t}\n\t});\n\treturn found;\n};\n\nvar trySlices = function tryAllSlices(value) {\n\tvar found = false;\n\tforEach(cache, function (getter, name) {\n\t\tif (!found) {\n\t\t\ttry {\n\t\t\t\tgetter(value);\n\t\t\t\tfound = $slice(name, 1);\n\t\t\t} catch (e) { /**/ }\n\t\t}\n\t});\n\treturn found;\n};\n\nmodule.exports = function whichTypedArray(value) {\n\tif (!value || typeof value !== 'object') { return false; }\n\tif (!hasToStringTag) {\n\t\tvar tag = $slice($toString(value), 8, -1);\n\t\tif ($indexOf(typedArrays, tag) > -1) {\n\t\t\treturn tag;\n\t\t}\n\t\tif (tag !== 'Object') {\n\t\t\treturn false;\n\t\t}\n\t\t// node < 0.6 hits here on real Typed Arrays\n\t\treturn trySlices(value);\n\t}\n\tif (!gOPD) { return null; } // unknown engine\n\treturn tryTypedArrays(value);\n};\n","const os = require('os');\nconst fs = require('fs');\nconst path = require('path');\n\nconst rbql = require('./rbql_core/rbql-js/rbql.js');\nconst rbql_csv = require('./rbql_core/rbql-js/rbql_csv.js');\nconst csv_utils = require('./rbql_core/rbql-js/csv_utils.js');\n\nconst fast_load_utils = require('./fast_load_utils.js');\n\nconst wcwidth = require('./contrib/wcwidth/index.js');\n\nconst non_numeric_sentinel = -1;\nconst number_regex = /^([0-9]+)(\\.[0-9]+)?$/;\n\n// Copypasted from extension.js\nconst QUOTED_RFC_POLICY = 'quoted_rfc';\nconst QUOTED_POLICY = 'quoted';\nconst dynamic_csv_highlight_margin = 50; // TODO make configurable.\nconst max_preview_field_length = 250;\nconst alignment_extra_readability_whitespace_length = 1;\n\n\nclass AssertionError extends Error {}\n\nfunction assert(condition, message=null) {\n    if (!condition) {\n        if (!message) {\n            message = 'Assertion error';\n        }\n        throw new AssertionError(message);\n    }\n}\n\n\nfunction get_default_js_udf_content() {\n    let default_content = `// This file can be used to store RBQL UDFs. Example:\n    //\n    // function foo(value) {\n    //     return 'foo ' + String(value.length);\n    // }\n    // \n    // Functions defined in this file can be used in RBQL queries e.g.\n    // SELECT foo(a1), a2 WHERE foo(a3) != 'foo 5' LIMIT 10\n    //\n    // Don't forget to save this file after editing!\n    //\n    // Write your own functions below this line:\n    `.replace(new RegExp(/^  */, 'mg'), '');\n    return default_content;\n}\n\n\nfunction get_default_python_udf_content() {\n    let default_content = `# This file can be used to store RBQL UDFs. Example:\n    #\n    # def foo(value):\n    #     return 'foo ' + str(len(value))\n    # \n    # \n    # Functions defined in this file can be used in RBQL queries e.g.\n    # SELECT foo(a1), a2 WHERE foo(a3) != 'foo 5' LIMIT 10\n    #\n    # Don't forget to save this file after editing!\n    #\n    # Write your own functions below this line:\n    `.replace(new RegExp(/^  */, 'mg'), '');\n    return default_content;\n}\n\n\nfunction update_subcomponent_stats(field, is_first_record, max_field_components_lens, calc_visual_char_width) {\n    // Extract overall field length and length of integer and fractional parts of the field if it represents a number.\n    let visual_field_length = calc_visual_char_width ? wcwidth(field) : field.length;\n    max_field_components_lens.has_wide_chars = max_field_components_lens.has_wide_chars || visual_field_length != field.length;\n    max_field_components_lens.max_total_length = Math.max(max_field_components_lens.max_total_length, visual_field_length);\n    if (max_field_components_lens.max_int_length == non_numeric_sentinel) {\n        // Column is not a number, early return.\n        return;\n    }\n    let match_result = number_regex.exec(field);\n    if (match_result === null) {\n        if (!is_first_record && field.length) { // Checking field_length here allows numeric columns to have some of the fields empty.\n            // We only mark the column as non-header if we know that this is not a header line.\n            max_field_components_lens.max_int_length = non_numeric_sentinel;\n            max_field_components_lens.max_fractional_length = non_numeric_sentinel;\n        }\n        return;\n    }\n    let cur_integer_part_length = match_result[1].length;\n    max_field_components_lens.max_int_length = Math.max(max_field_components_lens.max_int_length, cur_integer_part_length);\n    let cur_fractional_part_length = match_result[2] === undefined ? 0 : match_result[2].length;\n    max_field_components_lens.max_fractional_length = Math.max(max_field_components_lens.max_fractional_length, cur_fractional_part_length);\n}\n\n\nfunction get_cursor_position_if_unambiguous(active_editor) {\n    let selections = active_editor.selections;\n    if (!selections || selections.length != 1) {\n        // Support only single-cursor, multicursor is ambiguous.\n        return null;\n    }\n    let selection = selections[0];\n    let position = selection.active;\n    if (!position.isEqual(selection.anchor)) {\n        // Selections are ambiguous.\n        return null;\n    }\n    return position;\n}\n\n\nfunction is_ascii(src_str) {\n    return /^[\\x00-\\x7F]*$/.test(src_str);\n}\n\n\nfunction calc_column_stats(active_doc, delim, policy, comment_prefix, enable_double_width_alignment) {\n    let [records, _num_records_parsed, _fields_info, first_defective_line, _first_trailing_space_line, comments] = fast_load_utils.parse_document_records(active_doc, delim, policy, comment_prefix, /*stop_on_warning=*/true, /*max_records_to_parse=*/-1, /*collect_records=*/true, /*preserve_quotes_and_whitespaces=*/true);\n    if (first_defective_line !== null) {\n        return [null, first_defective_line + 1, null, null];\n    }\n    let column_stats = [];\n    let is_first_record = true;\n    let calc_visual_char_width = false;\n    for (let record of records) {\n        for (let fnum = 0; fnum < record.length; fnum++) {\n            if (column_stats.length <= fnum) {\n                column_stats.push({max_total_length: 0, max_int_length: 0, max_fractional_length: 0, has_wide_chars: false});\n            }\n            let field = record[fnum];\n            if (!calc_visual_char_width && enable_double_width_alignment) {\n                calc_visual_char_width = !is_ascii(field);\n            }\n            let field_lines = field.split('\\n');\n            if (field_lines.length > 1) {\n                // We don't allow multiline fields to be numeric for simplicity.\n                column_stats[fnum].max_int_length = non_numeric_sentinel;\n                column_stats[fnum].max_fractional_length = non_numeric_sentinel;\n            }\n            for (let field_line of field_lines) {\n                update_subcomponent_stats(field_line.trim(), is_first_record, column_stats[fnum], calc_visual_char_width);\n            }\n        }\n        is_first_record = false;\n    }\n    return [column_stats, null, records, comments];\n}\n\n\nfunction adjust_column_stats(column_stats, delim_length) {\n    // Ensure that numeric components max widths are consistent with non-numeric (header) width.\n    let adjusted_stats = [];\n    for (let column_stat of column_stats) {\n        if (column_stat.max_int_length <= 0) {\n            column_stat.max_int_length = -1;\n            column_stat.max_fractional_length = -1;\n        }\n        if (column_stat.max_int_length > 0) {\n            // The sum of integer and float parts can be bigger than the max width, e.g. here:\n            // value\n            // 0.12\n            // 1234\n            if (column_stat.max_int_length + column_stat.max_fractional_length > column_stat.max_total_length) {\n                column_stat.max_total_length = column_stat.max_int_length + column_stat.max_fractional_length;\n            }\n            // This is needed when the header is wider than numeric components and/or their sum.\n            if (column_stat.max_total_length - column_stat.max_fractional_length > column_stat.max_int_length) {\n                column_stat.max_int_length = column_stat.max_total_length - column_stat.max_fractional_length;\n            }\n            // Sanity check.\n            if (column_stat.max_total_length != column_stat.max_int_length + column_stat.max_fractional_length) {\n                // Assertion Error, this can never happen.\n                return null;\n            }\n        }\n        let previous_stat = adjusted_stats.length ? adjusted_stats[adjusted_stats.length - 1] : null;\n        column_stat.start_offset = previous_stat === null ? 0 : previous_stat.start_offset + previous_stat.max_total_length + alignment_extra_readability_whitespace_length + delim_length;\n        adjusted_stats.push(column_stat);\n    }\n    return adjusted_stats;\n}\n\n\nfunction align_field(field, is_first_record, max_field_components_lens, is_last_in_line) {\n    // Align field, use Math.max() to avoid negative delta_length which can happen theorethically due to async doc edit.\n    field = field.trim();\n    let visual_field_length = max_field_components_lens.has_wide_chars ? wcwidth(field) : field.length;\n    if (max_field_components_lens.max_int_length == non_numeric_sentinel) {\n        let delta_length = Math.max(max_field_components_lens.max_total_length - visual_field_length, 0);\n        return is_last_in_line ? field : field + ' '.repeat(delta_length + alignment_extra_readability_whitespace_length);\n    }\n    if (is_first_record) {\n        if (number_regex.exec(field) === null) {\n            // The line must be a header - align it using max_width rule.\n            let delta_length = Math.max(max_field_components_lens.max_total_length - visual_field_length, 0);\n            return is_last_in_line ? field : field + ' '.repeat(delta_length + alignment_extra_readability_whitespace_length);\n        }\n    }\n    let dot_pos = field.indexOf('.');\n    let cur_integer_part_length = dot_pos == -1 ? field.length : dot_pos;\n    // Here cur_fractional_part_length includes the leading dot too.\n    let cur_fractional_part_length = dot_pos == -1 ? 0 : field.length - dot_pos;\n    let integer_delta_length = Math.max(max_field_components_lens.max_int_length - cur_integer_part_length, 0);\n    let fractional_delta_length = Math.max(max_field_components_lens.max_fractional_length - cur_fractional_part_length);\n    let trailing_spaces = is_last_in_line ? '' : ' '.repeat(fractional_delta_length + alignment_extra_readability_whitespace_length);\n    return ' '.repeat(integer_delta_length) + field + trailing_spaces;\n}\n\n\nfunction rfc_align_field(field, is_first_record, max_field_components_lens, is_field_segment, is_last_in_line) {\n    let aligned = align_field(field, is_first_record, max_field_components_lens, is_last_in_line);\n    if (is_field_segment) {\n        aligned = ' '.repeat(max_field_components_lens.start_offset) + aligned;\n    }\n    return aligned;\n}\n\n\nclass RecordCommentMerger {\n    constructor(records, comments) {\n        this.records = records;\n        this.comments = comments;\n        this.nr = 0;\n        this.next_comment = 0;\n    }\n\n    get_next() {\n        // Returns tuple (record, comment).\n        if (this.has_comments_left() && (!this.has_records_left() || this.comments[this.next_comment].record_num <= this.nr)) {\n            let result = [null, this.comments[this.next_comment].comment_text];\n            this.next_comment += 1;\n            return result;\n        }\n        if (this.has_records_left()) {\n            let result = [this.records[this.nr], null];\n            this.nr += 1;\n            return result;\n        }\n        return [null, null];\n    }\n\n    has_comments_left() {\n        return this.next_comment < this.comments.length;\n    }\n\n    has_records_left() {\n        return this.nr < this.records.length;\n    }\n\n    has_entries_left() {\n        return this.has_comments_left() || this.has_records_left();\n    }\n}\n\n\nfunction align_columns(records, comments, column_stats, delim) {\n    // Unlike shrink_columns, here we don't compute `has_edit` flag because it is\n    // 1: Algorithmically complicated (especially for multiline fields) and we also can't just compare fields lengths like in shrink.\n    // 2: The alignment procedure is opinionated and \"Already aligned\" report has little value.\n    // Because of this in case of executing \"Align\" command consecutively N times one would have to run undo N times too.\n    let result_lines = [];\n    let is_first_record = true;\n    let merger = new RecordCommentMerger(records, comments);\n    while (merger.has_entries_left()) {\n        let [record, comment] = merger.get_next();\n        assert((comment === null) != (record === null));\n        if (record === null) {\n            result_lines.push(comment);\n            continue;\n        }\n        let aligned_fields = [];\n        for (let fnum = 0; fnum < record.length; fnum++) {\n            if (fnum >= column_stats.length) // Safeguard against async doc edit, should never happen.\n                break;\n            let is_field_segment = false;\n            let field = record[fnum];\n            let field_lines = field.split('\\n');\n            for (let i = 0; i < field_lines.length; i++) {\n                if (i > 0) {\n                    result_lines.push(aligned_fields.join(delim));\n                    aligned_fields = [];\n                    is_field_segment = true;\n                }\n                let is_last_in_line = fnum + 1 == record.length || (field_lines.length > 1 && i + 1 < field_lines.length);\n                let aligned_field = rfc_align_field(field_lines[i], is_first_record, column_stats[fnum], is_field_segment, is_last_in_line);\n                is_field_segment = false;\n                aligned_fields.push(aligned_field);\n            }\n        }\n        is_first_record = false;\n        result_lines.push(aligned_fields.join(delim));\n    }\n    return result_lines.join('\\n');\n}\n\n\nfunction shrink_columns(active_doc, delim, policy, comment_prefix) {\n    let [records, _num_records_parsed, _fields_info, first_defective_line, _first_trailing_space_line, comments] = fast_load_utils.parse_document_records(active_doc, delim, policy, comment_prefix, /*stop_on_warning=*/true, /*max_records_to_parse=*/-1, /*collect_records=*/true, /*preserve_quotes_and_whitespaces=*/true);\n    if (first_defective_line !== null) {\n        return [null, first_defective_line + 1];\n    }\n    let result_lines = [];\n    let has_edit = false;\n    let merger = new RecordCommentMerger(records, comments);\n    while (merger.has_entries_left()) {\n        let [record, comment] = merger.get_next();\n        assert((comment === null) != (record === null));\n        if (record === null) {\n            result_lines.push(comment);\n            continue;\n        }\n        let aligned_fields = [];\n        for (let fnum = 0; fnum < record.length; fnum++) {\n            let field = record[fnum];\n            let field_lines = field.split('\\n');\n            for (let i = 0; i < field_lines.length; i++) {\n                if (i > 0) {\n                    result_lines.push(aligned_fields.join(delim));\n                    aligned_fields = [];\n                }\n                let aligned_field = field_lines[i].trim();\n                if (aligned_field.length != field_lines[i].length) {\n                    // Unlike in align function here we can just compare resulting length to decide if change has occured.\n                    has_edit = true;\n                }\n                aligned_fields.push(aligned_field);\n            }\n        }\n        result_lines.push(aligned_fields.join(delim));\n    }\n    if (!has_edit)\n        return [null, null];\n    return [result_lines.join('\\n'), null];\n}\n\n\nfunction make_table_name_key(file_path) {\n    return 'rbql_table_name:' + file_path;\n}\n\n\nfunction expanduser(filepath) {\n    if (filepath.charAt(0) === '~') {\n        return path.join(os.homedir(), filepath.slice(1));\n    }\n    return filepath;\n}\n\n\nfunction find_table_path(vscode_global_state, main_table_dir, table_id) {\n    // If table_id is a relative path it could be relative either to the current directory or to the main table dir.\n    var candidate_path = expanduser(table_id);\n    if (fs.existsSync(candidate_path)) {\n        return candidate_path;\n    }\n    if (main_table_dir && !path.isAbsolute(candidate_path)) {\n        candidate_path = path.join(main_table_dir, candidate_path);\n        if (fs.existsSync(candidate_path)) {\n            return candidate_path;\n        }\n    }\n    let table_path = vscode_global_state ? vscode_global_state.get(make_table_name_key(table_id)) : null;\n    if (table_path && fs.existsSync(table_path)) {\n        return table_path;\n    }\n    return null;\n}\n\n\nasync function read_header(table_path, encoding) {\n    if (encoding == 'latin-1')\n        encoding = 'binary';\n    let readline = require('readline');\n    let input_reader = readline.createInterface({ input: fs.createReadStream(table_path, {encoding: encoding}) });\n    let closed = false;\n    let promise_resolve = null;\n    let promise_reject = null;\n    let output_promise = new Promise(function(resolve, reject) {\n        promise_resolve = resolve;\n        promise_reject = reject;\n    });\n    input_reader.on('line', line => {\n        if (!closed) {\n            closed = true;\n            input_reader.close();\n            promise_resolve(line);\n        }\n    });\n    input_reader.on('error', error => {\n        promise_reject(error);\n    });\n    return output_promise;\n}\n\n\nfunction get_header_line(document, comment_prefix) {\n    const num_lines = document.lineCount;\n    for (let lnum = 0; lnum < num_lines; ++lnum) {\n        const line_text = document.lineAt(lnum).text;\n        if (!comment_prefix || !line_text.startsWith(comment_prefix)) {\n            return [lnum, line_text];\n        }\n    }\n    return [null, null];\n}\n\n\nfunction make_inconsistent_num_fields_warning(table_name, inconsistent_records_info) {\n    let [record_num_1, num_fields_1, record_num_2, num_fields_2] = rbql.sample_first_two_inconsistent_records(inconsistent_records_info);\n    let warn_msg = `Number of fields in \"${table_name}\" table is not consistent: `;\n    warn_msg += `e.g. record ${record_num_1 + 1} -> ${num_fields_1} fields, record ${record_num_2 + 1} -> ${num_fields_2} fields`;\n    return warn_msg;\n}\n\n\nclass RbqlIOHandlingError extends Error {}\n\nclass VSCodeRecordIterator extends rbql.RBQLInputIterator {\n    constructor(document, delim, policy, has_header=false, comment_prefix=null, table_name='input', variable_prefix='a') {\n        // We could have done a hack here actually: convert the document to stream/buffer and then use the standard reader.\n        super();\n        this.has_header = has_header;\n        this.table_name = table_name;\n        this.variable_prefix = variable_prefix;\n        this.NR = 0; // Record number.\n        this.NL = 0; // Line number (NL != NR when the CSV file has comments or multiline fields).\n        let fail_on_warning = policy == 'quoted_rfc';\n        let [_num_records_parsed, _comments] = [null, null];\n        [this.records, _num_records_parsed, this.fields_info, this.first_defective_line, this._first_trailing_space_line, _comments] = fast_load_utils.parse_document_records(document, delim, policy, comment_prefix, fail_on_warning);\n        if (fail_on_warning && this.first_defective_line !== null) {\n            throw new RbqlIOHandlingError(`Inconsistent double quote escaping in ${this.table_name} table at record ${this.records.length}, line ${this.first_defective_line}`);\n        }\n        this.first_record = this.records.length ? this.records[0] : [];\n        this.next_record_index = 0;\n    }\n\n    stop() {\n    }\n\n    async get_variables_map(query_text) {\n        let variable_map = new Object();\n        rbql.parse_basic_variables(query_text, this.variable_prefix, variable_map);\n        rbql.parse_array_variables(query_text, this.variable_prefix, variable_map);\n        if (this.has_header) {\n            rbql.parse_attribute_variables(query_text, this.variable_prefix, this.first_record, 'CSV header line', variable_map);\n            rbql.parse_dictionary_variables(query_text, this.variable_prefix, this.first_record, variable_map);\n        }\n        return variable_map;\n    }\n\n    async get_header() {\n        return this.has_header ? this.first_record : null;\n    }\n\n    do_get_record() {\n        if (this.next_record_index >= this.records.length) {\n            return null;\n        }\n        let record = this.records[this.next_record_index];\n        this.next_record_index += 1;\n        return record;\n    }\n\n    async get_record() {\n        if (this.NR == 0 && this.has_header) {\n            this.do_get_record(); // Skip the header record.\n        }\n        this.NR += 1;\n        let record = this.do_get_record();\n        return record;\n    }\n\n    get_warnings() {\n        let result = [];\n        if (this.first_defective_line !== null)\n            result.push(`Inconsistent double quote escaping in ${this.table_name} table. E.g. at line ${this.first_defective_line}`);\n        if (this.fields_info.size > 1)\n            result.push(make_inconsistent_num_fields_warning(this.table_name, this.fields_info));\n        return result;\n    }\n}\n\n\nclass VSCodeWriter extends rbql.RBQLOutputWriter {\n    constructor(delim, policy) {\n        super();\n        this.delim = delim;\n        this.policy = policy;\n        this.header_len = null;\n        this.null_in_output = false;\n        this.delim_in_simple_output = false;\n        this.output_lines = [];\n\n        if (policy == 'simple') {\n            this.polymorphic_join = this.simple_join;\n        } else if (policy == 'quoted') {\n            this.polymorphic_join = this.quoted_join;\n        } else if (policy == 'quoted_rfc') {\n            this.polymorphic_join = this.quoted_join_rfc;\n        } else if (policy == 'monocolumn') {\n            this.polymorphic_join = this.mono_join;\n        } else if (policy == 'whitespace') {\n            this.polymorphic_join = this.simple_join;\n        } else {\n            throw new RbqlIOHandlingError('Unknown output csv policy');\n        }\n    }\n\n    set_header(header) {\n        if (header !== null) {\n            this.header_len = header.length;\n            this.write(header);\n        }\n    }\n\n    quoted_join(fields) {\n        let delim = this.delim;\n        var quoted_fields = fields.map(function(v) { return csv_utils.quote_field(String(v), delim); });\n        return quoted_fields.join(this.delim);\n    };\n\n\n    quoted_join_rfc(fields) {\n        let delim = this.delim;\n        var quoted_fields = fields.map(function(v) { return csv_utils.rfc_quote_field(String(v), delim); });\n        return quoted_fields.join(this.delim);\n    };\n\n\n    mono_join(fields) {\n        if (fields.length > 1) {\n            throw new RbqlIOHandlingError('Unable to use \"Monocolumn\" output format: some records have more than one field');\n        }\n        return fields[0];\n    };\n\n\n    simple_join(fields) {\n        var res = fields.join(this.delim);\n        if (fields.join('').indexOf(this.delim) != -1) {\n            this.delim_in_simple_output = true;\n        }\n        return res;\n    };\n\n\n    normalize_fields(out_fields) {\n        for (var i = 0; i < out_fields.length; i++) {\n            if (out_fields[i] == null) {\n                this.null_in_output = true;\n                out_fields[i] = '';\n            } else if (Array.isArray(out_fields[i])) {\n                this.normalize_fields(out_fields[i]);\n                out_fields[i] = out_fields[i].join(this.sub_array_delim);\n            }\n        }\n    };\n\n\n    write(fields) {\n        if (this.header_len !== null && fields.length != this.header_len)\n            throw new RbqlIOHandlingError(`Inconsistent number of columns in output header and the current record: ${this.header_len} != ${fields.length}`);\n        this.normalize_fields(fields);\n        this.output_lines.push(this.polymorphic_join(fields));\n        return true;\n    };\n\n    async finish() {\n    }\n\n    get_warnings() {\n        let result = [];\n        if (this.null_in_output)\n            result.push('null values in output were replaced by empty strings');\n        if (this.delim_in_simple_output)\n            result.push('Some output fields contain separator');\n        return result;\n    };\n}\n\nclass VSCodeTableRegistry {\n    constructor(){}\n\n    get_iterator_by_table_id(_table_id) {\n        throw new RbqlIOHandlingError(\"JOIN queries are currently not supported in vscode.dev web version.\");\n    }\n\n    get_warnings() {\n        return [];\n    };\n}\n\nasync function rbql_query_web(query_text, input_document, input_delim, input_policy, output_delim, output_policy, output_warnings, with_headers, comment_prefix=null) {\n    let user_init_code = ''; // TODO find a way to have init code.\n    let join_tables_registry = new VSCodeTableRegistry(); // TODO find a way to have join registry.\n    let input_iterator = new VSCodeRecordIterator(input_document, input_delim, input_policy, with_headers, comment_prefix);\n    let output_writer = new VSCodeWriter(output_delim, output_policy);\n    await rbql.query(query_text, input_iterator, output_writer, output_warnings, join_tables_registry, user_init_code);\n    return output_writer.output_lines;\n}\n\n\nclass VSCodeFileSystemCSVRegistry extends rbql.RBQLTableRegistry {\n    constructor(vscode_global_state, input_file_dir, delim, policy, encoding, has_header=false, comment_prefix=null, options=null) {\n        super();\n        this.vscode_global_state = vscode_global_state;\n        this.input_file_dir = input_file_dir;\n        this.delim = delim;\n        this.policy = policy;\n        this.encoding = encoding;\n        this.has_header = has_header;\n        this.comment_prefix = comment_prefix;\n        this.stream = null;\n        this.record_iterator = null;\n\n        this.options = options;\n        this.bulk_input_path = null;\n        this.table_path = null;\n    }\n\n    get_iterator_by_table_id(table_id) {\n        this.table_path = find_table_path(this.vscode_global_state, this.input_file_dir, table_id);\n        if (this.table_path === null) {\n            throw new RbqlIOHandlingError(`Unable to find join table \"${table_id}\"`);\n        }\n        if (this.options && this.options['bulk_read']) {\n            this.bulk_input_path = this.table_path;\n        } else {\n            this.stream = fs.createReadStream(this.table_path);\n        }\n        this.record_iterator = new rbql_csv.CSVRecordIterator(this.stream, this.bulk_input_path, this.encoding, this.delim, this.policy, this.has_header, this.comment_prefix, table_id, 'b');\n        return this.record_iterator;\n    };\n\n    get_warnings(output_warnings) {\n        if (this.record_iterator && this.has_header) {\n            output_warnings.push(`The first record in JOIN file ${path.basename(this.table_path)} was also treated as header (and skipped)`);\n        }\n    }\n}\n\n\nasync function rbql_query_node(vscode_global_state, query_text, input_path, input_delim, input_policy, output_path, output_delim, output_policy, csv_encoding, output_warnings, with_headers=false, comment_prefix=null, user_init_code='', options=null) {\n    let input_stream = null;\n    let bulk_input_path = null;\n    if (options && options['bulk_read'] && input_path) {\n        bulk_input_path = input_path;\n    } else {\n        input_stream = input_path === null ? process.stdin : fs.createReadStream(input_path);\n    }\n    let [output_stream, close_output_on_finish] = output_path === null ? [process.stdout, false] : [fs.createWriteStream(output_path), true];\n    if (input_delim == '\"' && input_policy == 'quoted')\n        throw new RbqlIOHandlingError('Double quote delimiter is incompatible with \"quoted\" policy');\n    if (csv_encoding == 'latin-1')\n        csv_encoding = 'binary';\n    if (!rbql_csv.is_ascii(query_text) && csv_encoding == 'binary')\n        throw new RbqlIOHandlingError('To use non-ascii characters in query enable UTF-8 encoding instead of latin-1/binary');\n    if ((!rbql_csv.is_ascii(input_delim) || !rbql_csv.is_ascii(output_delim)) && csv_encoding == 'binary')\n        throw new RbqlIOHandlingError('To use non-ascii characters in query enable UTF-8 encoding instead of latin-1/binary');\n\n    let default_init_source_path = path.join(os.homedir(), '.rbql_init_source.js');\n    if (user_init_code == '' && fs.existsSync(default_init_source_path)) {\n        user_init_code = rbql_csv.read_user_init_code(default_init_source_path);\n    }\n    let input_file_dir = input_path ? path.dirname(input_path) : null;\n    let join_tables_registry = new VSCodeFileSystemCSVRegistry(vscode_global_state, input_file_dir, input_delim, input_policy, csv_encoding, with_headers, comment_prefix, options);\n    let input_iterator = new rbql_csv.CSVRecordIterator(input_stream, bulk_input_path, csv_encoding, input_delim, input_policy, with_headers, comment_prefix);\n    let output_writer = new rbql_csv.CSVWriter(output_stream, close_output_on_finish, csv_encoding, output_delim, output_policy);\n\n    await rbql.query(query_text, input_iterator, output_writer, output_warnings, join_tables_registry, user_init_code);\n    join_tables_registry.get_warnings(output_warnings);\n}\n\n\nfunction make_multiline_record_ranges(vscode, delim_length, newline_marker, fields, start_line, expected_end_line_for_control) {\n    // Semantic ranges in VSCode can't span multiple lines, so we use this workaround.\n    let record_ranges = [];\n    let lnum_current = start_line;\n    let pos_in_editor_line = 0;\n    let next_pos_in_editor_line = 0;\n    for (let i = 0; i < fields.length; i++) {\n        let pos_in_logical_field = 0;\n        // Group tokens belonging to the same logical field.\n        let logical_field_tokens = [];\n        while (true) {\n            let newline_marker_pos = fields[i].indexOf(newline_marker, pos_in_logical_field);\n            if (newline_marker_pos == -1)\n                break;\n            logical_field_tokens.push(new vscode.Range(lnum_current, pos_in_editor_line, lnum_current, pos_in_editor_line + newline_marker_pos - pos_in_logical_field));\n            lnum_current += 1;\n            pos_in_editor_line = 0;\n            next_pos_in_editor_line = 0;\n            pos_in_logical_field = newline_marker_pos + newline_marker.length;\n        }\n        next_pos_in_editor_line += fields[i].length - pos_in_logical_field;\n        if (i + 1 < fields.length) {\n            next_pos_in_editor_line += delim_length;\n        }\n        logical_field_tokens.push(new vscode.Range(lnum_current, pos_in_editor_line, lnum_current, next_pos_in_editor_line));\n        record_ranges.push(logical_field_tokens);\n        // From semantic tokenization perspective the end of token doesn't include the last character of vscode.Range i.e. it treats the range as [) interval, unlike the Range.contains() function which treats ranges as [] intervals.\n        pos_in_editor_line = next_pos_in_editor_line;\n    }\n    assert(lnum_current == expected_end_line_for_control);\n    return record_ranges;\n}\n\n\nfunction is_opening_rfc_line(line_text, delim) {\n    // The line is oppening if by adding a character (to avoid accidental double double quote) and single double quote at the end we can make it parsable without warning!\n    // Some lines can be simultaneously opening and closing, e.g. `\",a1,a2` or `a1,a2,\"`\n    let [_record, warning] = csv_utils.split_quoted_str(line_text + 'x\"', delim);\n    return !warning;\n}\n\n\nfunction parse_document_range_rfc(vscode, doc, delim, comment_prefix, range, custom_parsing_margin=null) {\n    if (custom_parsing_margin === null) {\n        custom_parsing_margin = dynamic_csv_highlight_margin;\n    }\n    let begin_line = Math.max(0, range.start.line - custom_parsing_margin);\n    let end_line = Math.min(doc.lineCount, range.end.line + custom_parsing_margin);\n    let table_ranges = [];\n    let line_aggregator = new csv_utils.MultilineRecordAggregator(comment_prefix);\n    // The first or the second line in range with an odd number of double quotes is a start line, after finding it we can use the standard parsing algorithm.\n    for (let lnum = begin_line; lnum < end_line; lnum++) {\n        let line_text = doc.lineAt(lnum).text;\n        if (lnum + 1 == doc.lineCount && !line_text)\n            break;\n        let inside_multiline_record_before = line_aggregator.is_inside_multiline_record();\n        let start_line = lnum - line_aggregator.get_num_lines_in_record();\n        line_aggregator.add_line(line_text);\n        let inside_multiline_record_after = line_aggregator.is_inside_multiline_record();\n        if (!inside_multiline_record_before && inside_multiline_record_after) {\n            // Must be an odd-num line, check if this is an openning line - otherwise reset ranges.\n            if (!is_opening_rfc_line(line_text, delim)) {\n                table_ranges = [];\n                line_aggregator.reset();\n            }\n        }\n        if (line_aggregator.has_comment_line) {\n            table_ranges.push({comment_range: new vscode.Range(lnum, 0, lnum, line_text.length)});\n            line_aggregator.reset();\n        } else if (line_aggregator.has_full_record) {\n            const newline_marker = '\\r\\n'; // Use '\\r\\n' here to guarantee that this sequence is not present anywhere in the lines themselves.\n            let combined_line = line_aggregator.get_full_line(newline_marker);\n            line_aggregator.reset();\n            let [fields, warning] = csv_utils.smart_split(combined_line, delim, QUOTED_POLICY, /*preserve_quotes_and_whitespaces=*/true);\n            if (!warning) {\n                table_ranges.push({record_ranges: make_multiline_record_ranges(vscode, delim.length, newline_marker, fields, start_line, lnum)});\n            }\n        }\n    }\n    return table_ranges;\n}\n\n\nfunction parse_document_range_single_line(vscode, doc, delim, policy, comment_prefix, range) {\n    let table_ranges = [];\n    let begin_line = Math.max(0, range.start.line - dynamic_csv_highlight_margin);\n    let end_line = Math.min(doc.lineCount, range.end.line + dynamic_csv_highlight_margin);\n    for (let lnum = begin_line; lnum < end_line; lnum++) {\n        let record_ranges = [];\n        let line_text = doc.lineAt(lnum).text;\n        if (lnum + 1 == doc.lineCount && !line_text)\n            break;\n        if (comment_prefix && line_text.startsWith(comment_prefix)) {\n            table_ranges.push({comment_range: new vscode.Range(lnum, 0, lnum, line_text.length)});\n            continue;\n        }\n        let split_result = csv_utils.smart_split(line_text, delim, policy, /*preserve_quotes_and_whitespaces=*/true);\n        // TODO consider handling comments and warnings\n        let fields = split_result[0];\n        let cpos = 0;\n        let next_cpos = 0;\n        for (let i = 0; i < fields.length; i++) {\n            next_cpos += fields[i].length;\n            if (i + 1 < fields.length) {\n                next_cpos += delim.length;\n            }\n            record_ranges.push([new vscode.Range(lnum, cpos, lnum, next_cpos)]);\n            // From semantic tokenization perspective the end of token doesn't include the last character of vscode.Range i.e. it treats the range as [) interval, unlike the Range.contains() function which treats ranges as [] intervals.\n            cpos = next_cpos;\n        }\n        table_ranges.push({record_ranges: record_ranges});\n    }\n    return table_ranges;\n}\n\n\nfunction parse_document_range(vscode, doc, delim, policy, comment_prefix, range) {\n    if (policy == QUOTED_RFC_POLICY) {\n        return parse_document_range_rfc(vscode, doc, delim, comment_prefix, range);\n    } else {\n        return parse_document_range_single_line(vscode, doc, delim, policy, comment_prefix, range);\n    }\n}\n\n\nfunction get_field_by_line_position(fields, delim_length, query_pos) {\n    if (!fields.length)\n        return null;\n    var col_num = 0;\n    var cpos = fields[col_num].length + delim_length;\n    while (query_pos > cpos && col_num + 1 < fields.length) {\n        col_num += 1;\n        cpos = cpos + fields[col_num].length + delim_length;\n    }\n    return col_num;\n}\n\n\nfunction get_cursor_position_info_rfc(vscode, document, delim, comment_prefix, position) {\n    const hover_parse_margin = 20;\n    let range = new vscode.Range(Math.max(position.line - hover_parse_margin, 0), 0, position.line + hover_parse_margin, 0);\n    let table_ranges = parse_document_range_rfc(vscode, document, delim, comment_prefix, range);\n    let last_found_position_info = null; // Use last found instead of first found because cursor position at the border can belong to two ranges simultaneously.\n    for (let row_info of table_ranges) {\n        if (row_info.hasOwnProperty('comment_range')) {\n            if (row_info.comment_range.contains(position)) {\n                last_found_position_info = {is_comment: true};\n            }\n        } else {\n            for (let col_num = 0; col_num < row_info.record_ranges.length; col_num++) {\n                // One logical field can map to multiple ranges if it spans multiple lines.\n                for (let record_range of row_info.record_ranges[col_num]) {\n                    if (record_range.contains(position)) {\n                        last_found_position_info = {column_number: col_num, total_columns: row_info.record_ranges.length, split_warning: false};\n                    }\n                }\n            }\n        }\n    }\n    return last_found_position_info;\n}\n\n\nfunction get_cursor_position_info_standard(document, delim, policy, comment_prefix, position) {\n    var lnum = position.line;\n    var cnum = position.character;\n    var line = document.lineAt(lnum).text;\n\n    if (comment_prefix && line.startsWith(comment_prefix))\n        return {is_comment: true};\n\n    let [entries, warning] = csv_utils.smart_split(line, delim, policy, true);\n    var col_num = get_field_by_line_position(entries, delim.length, cnum + 1);\n    if (col_num == null)\n        return null;\n    return {column_number: col_num, total_columns: entries.length, split_warning: warning};\n}\n\n\nfunction get_cursor_position_info(vscode, document, delim, policy, comment_prefix, position) {\n    if (policy === null)\n        return null;\n    if (policy == QUOTED_RFC_POLICY) {\n        return get_cursor_position_info_rfc(vscode, document, delim, comment_prefix, position);\n    } else {\n        return get_cursor_position_info_standard(document, delim, policy, comment_prefix, position);\n    }\n}\n\n\nfunction format_cursor_position_info(cursor_position_info, header, show_column_names, show_comments, max_label_length) {\n    if (cursor_position_info.is_comment) {\n        if (show_comments) {\n            return ['Comment', 'Comment'];\n        } else {\n            return [null, null];\n        }\n    }\n    let short_report = 'Col ' + (cursor_position_info.column_number + 1);\n    let full_report = '[Rainbow CSV] ' + short_report;\n    if (show_column_names && cursor_position_info.column_number < header.length) {\n        let column_label = header[cursor_position_info.column_number].trim();\n        let short_column_label = column_label.substr(0, max_label_length);\n        if (short_column_label != column_label)\n            short_column_label = short_column_label + '...';\n        short_report += ': ' + short_column_label;\n        full_report += ': ' + column_label;\n    }\n    if (cursor_position_info.split_warning) {\n        full_report += '; ERR: Inconsistent double quotes in line';\n    } else if (header.length != cursor_position_info.total_columns) {\n        full_report += `; WARN: Inconsistent num of fields, header: ${header.length}, this line: ${cursor_position_info.total_columns}`;\n    }\n    return [full_report, short_report];\n}\n\n\nfunction sample_records(document, delim, policy, comment_prefix, end_record, preview_window_size, stop_on_warning, cached_table_parse_result) {\n    let records = [];\n    let first_failed_line = null;\n    let vscode_doc_version = null;\n    let [_num_records_parsed, _fields_info, _first_trailing_space_line, _comments] = [null, null, null, null];\n    // Here `preview_window_size` is typically 100.\n    if (end_record < preview_window_size * 5) {\n        // Re-sample the records. Re-sampling top records is fast and it ensures that all manual changes are mirrored into RBQL console.\n        [records, _num_records_parsed, _fields_info, first_failed_line, _first_trailing_space_line, _comments] = fast_load_utils.parse_document_records(document, delim, policy, comment_prefix, stop_on_warning, /*max_records_to_parse=*/end_record, /*collect_records=*/true, /*preserve_quotes_and_whitespaces=*/false);\n    } else {\n        let need_full_doc_parse = true;\n        if (cached_table_parse_result.has(document.fileName)) {\n            [records, first_failed_line, vscode_doc_version] = cached_table_parse_result.get(document.fileName);\n            if (document.version === vscode_doc_version) {\n                need_full_doc_parse = false;\n            }\n        }\n        if (need_full_doc_parse) {\n            let [records, _num_records_parsed, _fields_info, first_failed_line, _first_trailing_space_line, _comments] = fast_load_utils.parse_document_records(document, delim, policy, comment_prefix, stop_on_warning, /*max_records_to_parse=*/-1, /*collect_records=*/true, /*preserve_quotes_and_whitespaces=*/false);\n            cached_table_parse_result.set(document.fileName, [records, first_failed_line, document.version]);\n        }\n        [records, first_failed_line, vscode_doc_version] = cached_table_parse_result.get(document.fileName);\n    }\n    return [records, first_failed_line];\n}\n\n\nfunction sample_preview_records_from_context(rbql_context, dst_message, preview_window_size, cached_table_parse_result) {\n    let [document, delim, policy, comment_prefix] = [rbql_context.input_document, rbql_context.delim, rbql_context.policy, rbql_context.comment_prefix];\n    rbql_context.requested_start_record = Math.max(rbql_context.requested_start_record, 0);\n    let stop_on_warning = policy == QUOTED_RFC_POLICY;\n    let [records, first_failed_line] = sample_records(document, delim, policy, comment_prefix, rbql_context.requested_start_record + preview_window_size, preview_window_size, stop_on_warning, cached_table_parse_result);;\n    if (first_failed_line !== null && policy == QUOTED_RFC_POLICY) {\n        dst_message.preview_sampling_error = `Double quotes are not consistent in record ${records.length + 1} which starts at line ${first_failed_line + 1}`;\n        return;\n    }\n    rbql_context.requested_start_record = Math.max(0, Math.min(rbql_context.requested_start_record, records.length - preview_window_size));\n    let preview_records = records.slice(rbql_context.requested_start_record, rbql_context.requested_start_record + preview_window_size);\n\n    // Here we trim excessively long fields. The only benefit of doing is here instead of UI layer is to minimize the ammount of traffic that we send to UI - the total message size is limited.\n    for (let r = 0; r < preview_records.length; r++) {\n        let cur_record = preview_records[r];\n        for (let c = 0; c < cur_record.length; c++) {\n            if (cur_record[c].length > max_preview_field_length) {\n                cur_record[c] = cur_record[c].substr(0, max_preview_field_length) + '###UI_STRING_TRIM_MARKER###';\n            }\n        }\n    }\n    dst_message.preview_records = preview_records;\n    dst_message.actual_start_record = rbql_context.requested_start_record;\n}\n\nfunction show_lint_status_bar_button(vscode, extension_context, file_path, language_id) {\n\n    const COLOR_PROCESSING = '#A0A0A0';\n    const COLOR_ERROR      = '#f44242';\n    const COLOR_WARNING    = '#ffff28';\n    const COLOR_OK         = '#62f442';\n\n    let lint_cache_key = `${file_path}.${language_id}`;\n\n    if (!extension_context.lint_results.has(lint_cache_key)){\n      return;\n    }\n\n    var lint_report = extension_context.lint_results.get(lint_cache_key);\n\n    if (!extension_context.lint_status_bar_button){\n      extension_context.lint_status_bar_button = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n    }\n\n    extension_context.lint_status_bar_button.text = 'CSVLint';\n    let lint_report_msg = '';\n    if (lint_report.is_processing) {\n\n        extension_context.lint_status_bar_button.color = COLOR_PROCESSING;\n        extension_context.lint_status_bar_button.text = '$(clock) CSVLint';\n        lint_report_msg = 'Processing';\n\n    } else if (Number.isInteger(lint_report.first_defective_line)) {\n\n        lint_report_msg = `Error. Line ${lint_report.first_defective_line} has formatting error: double quote chars are not consistent`;\n        extension_context.lint_status_bar_button.color = COLOR_ERROR;\n        extension_context.lint_status_bar_button.text = '$(error) CSVLint';\n\n    } else if (lint_report.fields_info && lint_report.fields_info.size > 1) {\n\n        let [record_num_1, num_fields_1, record_num_2, num_fields_2] = rbql.sample_first_two_inconsistent_records(lint_report.fields_info);\n        lint_report_msg = `Error. Number of fields is not consistent: e.g. record ${record_num_1 + 1} has ${num_fields_1} fields, and record ${record_num_2 + 1} has ${num_fields_2} fields`;\n        extension_context.lint_status_bar_button.color = COLOR_ERROR;\n        extension_context.lint_status_bar_button.text = '$(error) CSVLint';\n\n    } else if (Number.isInteger(lint_report.first_trailing_space_line)) {\n\n        lint_report_msg = `Leading/Trailing spaces detected: e.g. at line ${lint_report.first_trailing_space_line + 1}. Run \"Shrink\" command to remove them`;\n        extension_context.lint_status_bar_button.color = COLOR_WARNING;\n        extension_context.lint_status_bar_button.text = '$(alert) CSVLint';\n    } else {\n        assert(lint_report.is_ok);\n        extension_context.lint_status_bar_button.color = COLOR_OK;\n        extension_context.lint_status_bar_button.text = '$(pass) CSVLint';\n        lint_report_msg = 'OK';\n    }\n    extension_context.lint_status_bar_button.tooltip = lint_report_msg + '\\nClick to recheck';\n    extension_context.lint_status_bar_button.command = 'rainbow-csv.CSVLint';\n    extension_context.lint_status_bar_button.show();\n}\n\n\nfunction generate_column_edit_selections(vscode, active_doc, delim, policy, comment_prefix, edit_mode, col_num) {\n    let [records, _num_records_parsed, _fields_info, first_defective_line, _first_trailing_space_line, comments] = fast_load_utils.parse_document_records(active_doc, delim, policy, comment_prefix, /*stop_on_warning=*/true, /*max_records_to_parse=*/-1, /*collect_records=*/true, /*preserve_quotes_and_whitespaces=*/true);\n    if (first_defective_line !== null) {\n        return [null, `Unable to enter column edit mode: quoting error at line ${first_defective_line + 1}`, null];\n    }\n    if (records.length + comments.length != active_doc.lineCount) {\n        // It is possible to support editing of non-multiline columns in such files, but for simplicity we won't do this.\n        return [null, 'Column edit mode is not supported for files with multiline fields', null];\n    }\n    let lnum = 0;\n    let selections = [];\n    let warning_msg = null;\n    let merger = new RecordCommentMerger(records, comments);\n    while (merger.has_entries_left()) {\n        let [record, comment] = merger.get_next();\n        assert((comment === null) != (record === null));\n        if (record !== null) {\n            if (col_num >= record.length) {\n                return [null, `Line ${lnum + 1} doesn't have field number ${col_num + 1}`, null];\n            }\n            let char_pos_before = record.slice(0, col_num).join('').length + col_num * delim.length;\n            let char_pos_after = record.slice(0, col_num + 1).join('').length + col_num * delim.length;\n            let line_text = record.join(delim);\n            if (!warning_msg && edit_mode == 'ce_before' && (policy == QUOTED_POLICY || policy == QUOTED_RFC_POLICY) && line_text.substring(char_pos_before - 2, char_pos_before + 2).indexOf('\"') != -1) {\n                warning_msg = `Be careful, cursor at line ${lnum + 1} has a double quote is in proximity.`;\n            }\n            if (!warning_msg && edit_mode == 'ce_after' && (policy == QUOTED_POLICY || policy == QUOTED_RFC_POLICY) && line_text.substring(char_pos_after - 2, char_pos_after + 2).indexOf('\"') != -1) {\n                warning_msg = `Be careful, cursor at line ${lnum + 1} has a double quote is in proximity.`;\n            }\n            if (!warning_msg && edit_mode == 'ce_select' && char_pos_before == char_pos_after) {\n                warning_msg = `Be careful, Field ${col_num + 1} at line ${lnum + 1} is empty.`;\n            }\n            let position_before = new vscode.Position(lnum, char_pos_before);\n            let position_after = new vscode.Position(lnum, char_pos_after);\n            if (edit_mode == 'ce_before') {\n                selections.push(new vscode.Selection(position_before, position_before));\n            }\n            if (edit_mode == 'ce_after') {\n                selections.push(new vscode.Selection(position_after, position_after));\n            }\n            if (edit_mode == 'ce_select') {\n                selections.push(new vscode.Selection(position_before, position_after));\n            }\n        }\n        lnum += 1;\n    }\n    return [selections, null, warning_msg];\n}\n\n\nmodule.exports.make_table_name_key = make_table_name_key;\nmodule.exports.find_table_path = find_table_path;\nmodule.exports.read_header = read_header;\nmodule.exports.rbql_query_web = rbql_query_web;\nmodule.exports.rbql_query_node = rbql_query_node;\nmodule.exports.get_header_line = get_header_line;\nmodule.exports.get_default_js_udf_content = get_default_js_udf_content;\nmodule.exports.get_default_python_udf_content = get_default_python_udf_content;\nmodule.exports.align_columns = align_columns;\nmodule.exports.shrink_columns = shrink_columns;\nmodule.exports.calc_column_stats = calc_column_stats;\nmodule.exports.adjust_column_stats = adjust_column_stats;\nmodule.exports.update_subcomponent_stats = update_subcomponent_stats;\nmodule.exports.align_field = align_field;\nmodule.exports.rfc_align_field = rfc_align_field;\nmodule.exports.assert = assert;\nmodule.exports.get_field_by_line_position = get_field_by_line_position;\nmodule.exports.get_cursor_position_info = get_cursor_position_info;\nmodule.exports.format_cursor_position_info = format_cursor_position_info;\nmodule.exports.parse_document_range = parse_document_range;\nmodule.exports.sample_preview_records_from_context = sample_preview_records_from_context;\nmodule.exports.parse_document_range_rfc = parse_document_range_rfc; // Only for unit tests.\nmodule.exports.sample_first_two_inconsistent_records = rbql.sample_first_two_inconsistent_records;\nmodule.exports.is_opening_rfc_line = is_opening_rfc_line; // Only for unit tests.\nmodule.exports.show_lint_status_bar_button = show_lint_status_bar_button;\nmodule.exports.get_cursor_position_if_unambiguous = get_cursor_position_if_unambiguous;\nmodule.exports.RecordCommentMerger = RecordCommentMerger;\nmodule.exports.generate_column_edit_selections = generate_column_edit_selections;\n","let field_regular_expression = '\"((?:[^\"]*\"\")*[^\"]*)\"';\nlet field_rgx = new RegExp('^' + field_regular_expression);\nlet field_rgx_external_whitespaces = new RegExp('^ *' + field_regular_expression + ' *');\n\n\n// TODO consider making this file (and rbql.js) both node and browser compatible: https://caolan.org/posts/writing_for_node_and_the_browser.html\n\n\nfunction split_lines(text) {\n    return text.split(/\\r\\n|\\r|\\n/);\n}\n\n\nfunction extract_next_field(src, dlm, preserve_quotes_and_whitespaces, allow_external_whitespaces, cidx, result) {\n    var warning = false;\n    let src_cur = src.substring(cidx);\n    let rgx = allow_external_whitespaces ? field_rgx_external_whitespaces : field_rgx;\n    let match_obj = rgx.exec(src_cur);\n    if (match_obj !== null) {\n        let match_end = match_obj[0].length;\n        if (cidx + match_end == src.length || src[cidx + match_end] == dlm) {\n            if (preserve_quotes_and_whitespaces) {\n                result.push(match_obj[0]);\n            } else {\n                result.push(match_obj[1].replace(/\"\"/g, '\"'));\n            }\n            return [cidx + match_end + 1, false];\n        }\n        warning = true;\n    }\n    var uidx = src.indexOf(dlm, cidx);\n    if (uidx == -1)\n        uidx = src.length;\n    var field = src.substring(cidx, uidx);\n    warning = warning || field.indexOf('\"') != -1;\n    result.push(field);\n    return [uidx + 1, warning];\n}\n\n\nfunction split_quoted_str(src, dlm, preserve_quotes_and_whitespaces=false) {\n    // This function is newline-agnostic i.e. it can also split records with multiline fields.\n    if (src.indexOf('\"') == -1) // Optimization for most common case\n        return [src.split(dlm), false];\n    var result = [];\n    var cidx = 0;\n    var warning = false;\n    let allow_external_whitespaces = dlm != ' ';\n    while (cidx < src.length) {\n        var extraction_report = extract_next_field(src, dlm, preserve_quotes_and_whitespaces, allow_external_whitespaces, cidx, result);\n        cidx = extraction_report[0];\n        warning = warning || extraction_report[1];\n    }\n    if (src.charAt(src.length - 1) == dlm)\n        result.push('');\n    return [result, warning];\n}\n\n\nfunction quote_field(src, delim) {\n    if (src.indexOf(delim) != -1 || src.indexOf('\"') != -1) {\n        var escaped = src.replace(/\"/g, '\"\"');\n        return `\"${escaped}\"`;\n    }\n    return src;\n}\n\n\nfunction rfc_quote_field(src, delim) {\n    if (src.indexOf(delim) != -1 || src.indexOf('\"') != -1 || src.indexOf('\\n') != -1 || src.indexOf('\\r') != -1) {\n        var escaped = src.replace(/\"/g, '\"\"');\n        return `\"${escaped}\"`;\n    }\n    return src;\n}\n\n\nfunction unquote_field(field) {\n    let rgx = new RegExp('^' + ' *' + field_regular_expression + ' *$');\n    let match_obj = rgx.exec(field);\n    if (match_obj !== null) {\n        return match_obj[1].replace(/\"\"/g, '\"');\n    }\n    return field;\n}\n\n\nfunction unquote_fields(fields) {\n    return fields.map(unquote_field);\n}\n\n\nfunction split_whitespace_separated_str(src, preserve_whitespaces=false) {\n    var rgxp = preserve_whitespaces ? new RegExp(' *[^ ]+ *', 'g') : new RegExp('[^ ]+', 'g');\n    let result = [];\n    let match_obj = null;\n    while((match_obj = rgxp.exec(src)) !== null) {\n        result.push(match_obj[0]);\n    }\n    if (preserve_whitespaces) {\n        for (let i = 0; i < result.length - 1; i++) {\n            result[i] = result[i].slice(0, -1);\n        }\n    }\n    return result;\n}\n\n\nfunction smart_split(src, dlm, policy, preserve_quotes_and_whitespaces) {\n    if (policy === 'simple')\n        return [src.split(dlm), false];\n    if (policy === 'whitespace')\n        return [split_whitespace_separated_str(src, preserve_quotes_and_whitespaces), false];\n    if (policy === 'monocolumn')\n        return [[src], false];\n    return split_quoted_str(src, dlm, preserve_quotes_and_whitespaces);\n}\n\n\nclass MultilineRecordAggregator {\n    constructor(comment_prefix) {\n        this.comment_prefix = comment_prefix;\n        this.reset();\n    }\n    add_line(line_text) {\n        if (this.has_full_record || this.has_comment_line) {\n            throw new Error('Invalid usage - record aggregator must be reset before adding new lines');\n        }\n        if (this.comment_prefix && this.rfc_line_buffer.length == 0 && line_text.startsWith(this.comment_prefix)) {\n            this.has_comment_line = true;\n            return false;\n        }\n        let match_list = line_text.match(/\"/g);\n        let has_unbalanced_double_quote = match_list && match_list.length % 2 == 1;\n        this.rfc_line_buffer.push(line_text);\n        this.has_full_record = (!has_unbalanced_double_quote && this.rfc_line_buffer.length == 1) || (has_unbalanced_double_quote && this.rfc_line_buffer.length > 1);\n        return this.has_full_record;\n    }\n    is_inside_multiline_record() {\n        return this.rfc_line_buffer.length && !this.has_full_record;\n    }\n    get_full_line(line_separator) {\n        return this.rfc_line_buffer.join(line_separator);\n    }\n    get_num_lines_in_record() {\n        return this.rfc_line_buffer.length;\n    }\n    reset() {\n        this.rfc_line_buffer = [];\n        this.has_full_record = false;\n        this.has_comment_line = false;\n    }\n}\n\n\nmodule.exports.split_quoted_str = split_quoted_str;\nmodule.exports.split_whitespace_separated_str = split_whitespace_separated_str;\nmodule.exports.smart_split = smart_split;\nmodule.exports.quote_field = quote_field;\nmodule.exports.rfc_quote_field = rfc_quote_field;\nmodule.exports.unquote_field = unquote_field;\nmodule.exports.unquote_fields = unquote_fields;\nmodule.exports.split_lines = split_lines;\nmodule.exports.MultilineRecordAggregator = MultilineRecordAggregator;\n","(function(exports){\n// The magic line above is to make the module both browser and Node compatible, see https://stackoverflow.com/questions/3225251/how-can-i-share-code-between-node-js-and-the-browser\n\n// This module works with records only. It is CSV-agnostic.\n// Do not add CSV-related logic or variables/functions/objects like \"delim\", \"separator\" etc\n\n\nclass RbqlParsingError extends Error {}\nclass RbqlRuntimeError extends Error {}\nclass AssertionError extends Error {}\nclass RbqlIOHandlingError extends Error {}\n\n\nclass InternalBadFieldError extends Error {\n    constructor(bad_idx, ...params) {\n        super(...params);\n        this.bad_idx = bad_idx;\n    }\n}\n\n\nfunction assert(condition, message=null) {\n    if (!condition) {\n        if (!message) {\n            message = 'Assertion error';\n        }\n        throw new AssertionError(message);\n    }\n}\n\n\nfunction replace_all(src, search, replacement) {\n    return src.split(search).join(replacement);\n}\n\n\nclass RBQLContext {\n    constructor(query_text, input_iterator, output_writer, user_init_code) {\n        this.query_text = query_text;\n        this.input_iterator = input_iterator;\n        this.writer = output_writer;\n        this.user_init_code = user_init_code;\n\n        this.unnest_list = null;\n        this.top_count = null;\n\n        this.like_regex_cache = new Map();\n\n        this.sort_key_expression = null;\n\n        this.aggregation_stage = 0;\n        this.aggregation_key_expression = null;\n        this.functional_aggregators = [];\n\n        this.join_map_impl = null;\n        this.join_map = null;\n        this.lhs_join_var_expression = null;\n\n        this.where_expression = null;\n\n        this.select_expression = null;\n\n        this.update_expressions = null;\n\n        this.variables_init_code = null;\n    }\n}\n\nvar query_context = null; // Needs to be global for MIN(), MAX(), etc functions. TODO find a way to make it local.\n\n\nconst wrong_aggregation_usage_error = 'Usage of RBQL aggregation functions inside JavaScript expressions is not allowed, see the docs';\nconst RBQL_VERSION = '0.27.0';\n\n\nfunction check_if_brackets_match(opening_bracket, closing_bracket) {\n    return (opening_bracket == '[' && closing_bracket == ']') || (opening_bracket == '(' && closing_bracket == ')') || (opening_bracket == '{' && closing_bracket == '}');\n}\n\n\nfunction parse_root_bracket_level_text_spans(select_expression) {\n    let text_spans = []; // parts of text separated by commas at the root parenthesis level\n    let last_pos = 0;\n    let bracket_stack = [];\n    for (let i = 0; i < select_expression.length; i++) {\n        let cur_char = select_expression[i];\n        if (cur_char == ',' && bracket_stack.length == 0) {\n            text_spans.push(select_expression.substring(last_pos, i));\n            last_pos = i + 1;\n        } else if (['[', '{', '('].indexOf(cur_char) != -1) {\n            bracket_stack.push(cur_char);\n        } else if ([']', '}', ')'].indexOf(cur_char) != -1) {\n            if (bracket_stack.length && check_if_brackets_match(bracket_stack[bracket_stack.length - 1], cur_char)) {\n                bracket_stack.pop();\n            } else {\n                throw new RbqlParsingError(`Unable to parse column headers in SELECT expression: No matching opening bracket for closing \"${cur_char}\"`);\n            }\n        }\n    }\n    if (bracket_stack.length) {\n        throw new RbqlParsingError(`Unable to parse column headers in SELECT expression: No matching closing bracket for opening \"${bracket_stack[0]}\"`);\n    }\n    text_spans.push(select_expression.substring(last_pos, select_expression.length));\n    text_spans = text_spans.map(span => span.trim());\n    return text_spans;\n}\n\n\nfunction unquote_string(quoted_str) {\n    // It's possible to use eval here to unqoute the quoted_column_name, but it would be a little barbaric, let's do it manually instead\n    if (!quoted_str || quoted_str.length < 2)\n        return null;\n    if (quoted_str[0] == \"'\" && quoted_str[quoted_str.length - 1] == \"'\") {\n        return quoted_str.substring(1, quoted_str.length - 1).replace(/\\\\'/g, \"'\").replace(/\\\\\\\\/g, \"\\\\\");\n    } else if (quoted_str[0] == '\"' && quoted_str[quoted_str.length - 1] == '\"') {\n        return quoted_str.substring(1, quoted_str.length - 1).replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, \"\\\\\");\n    } else {\n        return null;\n    }\n}\n\n\nfunction column_info_from_text_span(text_span, string_literals) {\n    // This function is a rough equivalent of \"column_info_from_node()\" function in python version of RBQL\n    text_span = text_span.trim();\n    let rbql_star_marker = '__RBQL_INTERNAL_STAR';\n    let simple_var_match = /^[_a-zA-Z][_a-zA-Z0-9]*$/.exec(text_span);\n    let attribute_match = /^([ab])\\.([_a-zA-Z][_a-zA-Z0-9]*)$/.exec(text_span);\n    let subscript_int_match = /^([ab])\\[([0-9]+)\\]$/.exec(text_span);\n    let subscript_str_match = /^([ab])\\[___RBQL_STRING_LITERAL([0-9]+)___\\]$/.exec(text_span);\n    let as_alias_match = /^(.*) (as|AS) +([a-zA-Z][a-zA-Z0-9_]*) *$/.exec(text_span);\n    if (as_alias_match !== null) {\n        return {table_name: null, column_index: null, column_name: null, is_star: false, alias_name: as_alias_match[3]};\n    }\n    if (simple_var_match !== null) {\n        if (text_span == rbql_star_marker)\n            return {table_name: null, column_index: null, column_name: null, is_star: true, alias_name: null};\n        if (text_span.startsWith('___RBQL_STRING_LITERAL'))\n            return null;\n        let match = /^([ab])([0-9]+)$/.exec(text_span);\n        if (match !== null) {\n            return {table_name: match[1], column_index: parseInt(match[2]) - 1, column_name: null, is_star: false, alias_name: null};\n        }\n        // Some examples for this branch: NR, NF\n        return {table_name: null, column_index: null, column_name: text_span, is_star: false, alias_name: null};\n    } else if (attribute_match !== null) {\n        let table_name = attribute_match[1];\n        let column_name = attribute_match[2];\n        if (column_name == rbql_star_marker) {\n            return {table_name: table_name, column_index: null, column_name: null, is_star: true, alias_name: null};\n        }\n        return {table_name: null, column_index: null, column_name: column_name, is_star: false, alias_name: null};\n    } else if (subscript_int_match != null) {\n        let table_name = subscript_int_match[1];\n        let column_index = parseInt(subscript_int_match[2]) - 1;\n        return {table_name: table_name, column_index: column_index, column_name: null, is_star: false, alias_name: null};\n    } else if (subscript_str_match != null) {\n        let table_name = subscript_str_match[1];\n        let replaced_string_literal_id = subscript_str_match[2];\n        if (replaced_string_literal_id < string_literals.length) {\n            let quoted_column_name = string_literals[replaced_string_literal_id];\n            let unquoted_column_name = unquote_string(quoted_column_name);\n            if (unquoted_column_name !== null && unquoted_column_name !== undefined) {\n                return {table_name: null, column_index: null, column_name: unquoted_column_name, is_star: false, alias_name: null};\n            }\n        }\n    }\n    return null;\n}\n\n\nfunction adhoc_parse_select_expression_to_column_infos(select_expression, string_literals) {\n    // It is acceptable for the algorithm to provide null column name when it could be theorethically possible to deduce the name.\n    // I.e. this algorithm guarantees precision but doesn't guarantee completeness in all theorethically possible queries.\n    // Although the algorithm should be complete in all practical scenarios, i.e. it should be hard to come up with the query that doesn't produce complete set of column names.\n    // The null column name just means that the output column will be named as col{i}, so the failure to detect the proper column name can be tolerated.\n    // Specifically this function guarantees the following:\n    // 1. The number of column_infos is correct and will match the number of fields in each record in the output - otherwise the exception should be thrown\n    // 2. If column_info at pos j is not null, it is guaranteed to correctly represent that column name in the output\n    let text_spans = parse_root_bracket_level_text_spans(select_expression);\n    let column_infos = text_spans.map(ts => column_info_from_text_span(ts, string_literals));\n    return column_infos;\n}\n\n\nfunction stable_compare(a, b) {\n    for (var i = 0; i < a.length; i++) {\n        if (a[i] !== b[i])\n            return a[i] < b[i] ? -1 : 1;\n    }\n}\n\n\nfunction safe_get(record, idx) {\n    return idx < record.length ? record[idx] : null;\n}\n\n\nfunction safe_join_get(record, idx) {\n    if (idx < record.length) {\n        return record[idx];\n    }\n    throw new InternalBadFieldError(idx);\n}\n\n\nfunction safe_set(record, idx, value) {\n    if (idx < record.length) {\n        record[idx] = value;\n    } else {\n        throw new InternalBadFieldError(idx);\n    }\n}\n\n\nfunction regexp_escape(text) {\n    // From here: https://stackoverflow.com/a/6969486/2898283\n    return text.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');  // $& means the whole matched text\n}\n\n\nfunction like_to_regex(pattern) {\n    let p = 0;\n    let i = 0;\n    let converted = '';\n    while (i < pattern.length) {\n        if (pattern.charAt(i) == '_' || pattern.charAt(i) == '%') {\n            converted += regexp_escape(pattern.substring(p, i));\n            p = i + 1;\n            if (pattern.charAt(i) == '_') {\n                converted += '.';\n            } else {\n                converted += '.*';\n            }\n        }\n        i += 1;\n    }\n    converted += regexp_escape(pattern.substring(p, i));\n    return '^' + converted + '$';\n}\n\n\nfunction like(text, pattern) {\n    let matcher = query_context.like_regex_cache.get(pattern);\n    if (matcher === undefined) {\n        matcher = new RegExp(like_to_regex(pattern));\n        query_context.like_regex_cache.set(pattern, matcher);\n    }\n    return matcher.test(text);\n}\nconst LIKE = like;\n\n\nclass RBQLAggregationToken {\n    constructor(marker_id, value) {\n        this.marker_id = marker_id;\n        this.value = value;\n    }\n\n    toString() {\n        throw new RbqlParsingError(wrong_aggregation_usage_error);\n    }\n}\n\n\nclass UnnestMarker {}\n\n\nfunction UNNEST(vals) {\n    if (query_context.unnest_list !== null) {\n        // Technically we can support multiple UNNEST's but the implementation/algorithm is more complex and just doesn't worth it\n        throw new RbqlParsingError('Only one UNNEST is allowed per query');\n    }\n    query_context.unnest_list = vals;\n    return new UnnestMarker();\n}\nconst unnest = UNNEST;\nconst Unnest = UNNEST;\nconst UNFOLD = UNNEST; // \"UNFOLD\" is deprecated, just for backward compatibility\n\n\nfunction parse_number(val) {\n    // We can do a more pedantic number test like `/^ *-{0,1}[0-9]+\\.{0,1}[0-9]* *$/.test(val)`, but  user will probably use just Number(val) or parseInt/parseFloat\n    let result = Number(val);\n    if (isNaN(result)) {\n        throw new RbqlRuntimeError(`Unable to convert value \"${val}\" to a number. MIN, MAX, SUM, AVG, MEDIAN and VARIANCE aggregate functions convert their string arguments to numeric values`);\n    }\n    return result;\n}\n\n\nclass AnyValueAggregator {\n    constructor() {\n        this.stats = new Map();\n    }\n\n    increment(key, val) {\n        var cur_aggr = this.stats.get(key);\n        if (cur_aggr === undefined) {\n            this.stats.set(key, val);\n        }\n    }\n\n    get_final(key) {\n        return this.stats.get(key);\n    }\n}\n\n\nclass MinAggregator {\n    constructor() {\n        this.stats = new Map();\n    }\n\n    increment(key, val) {\n        val = parse_number(val);\n        var cur_aggr = this.stats.get(key);\n        if (cur_aggr === undefined) {\n            this.stats.set(key, val);\n        } else {\n            this.stats.set(key, Math.min(cur_aggr, val));\n        }\n    }\n\n    get_final(key) {\n        return this.stats.get(key);\n    }\n}\n\n\nclass MaxAggregator {\n    constructor() {\n        this.stats = new Map();\n    }\n\n    increment(key, val) {\n        val = parse_number(val);\n        var cur_aggr = this.stats.get(key);\n        if (cur_aggr === undefined) {\n            this.stats.set(key, val);\n        } else {\n            this.stats.set(key, Math.max(cur_aggr, val));\n        }\n    }\n\n    get_final(key) {\n        return this.stats.get(key);\n    }\n}\n\n\nclass SumAggregator {\n    constructor() {\n        this.stats = new Map();\n    }\n\n    increment(key, val) {\n        val = parse_number(val);\n        var cur_aggr = this.stats.get(key);\n        if (cur_aggr === undefined) {\n            this.stats.set(key, val);\n        } else {\n            this.stats.set(key, cur_aggr + val);\n        }\n    }\n\n    get_final(key) {\n        return this.stats.get(key);\n    }\n}\n\n\nclass AvgAggregator {\n    constructor() {\n        this.stats = new Map();\n    }\n\n    increment(key, val) {\n        val = parse_number(val);\n        var cur_aggr = this.stats.get(key);\n        if (cur_aggr === undefined) {\n            this.stats.set(key, [val, 1]);\n        } else {\n            var cur_sum = cur_aggr[0];\n            var cur_cnt = cur_aggr[1];\n            this.stats.set(key, [cur_sum + val, cur_cnt + 1]);\n        }\n    }\n\n    get_final(key) {\n        var cur_aggr = this.stats.get(key);\n        var cur_sum = cur_aggr[0];\n        var cur_cnt = cur_aggr[1];\n        var avg = cur_sum / cur_cnt;\n        return avg;\n    }\n}\n\n\nclass VarianceAggregator {\n    constructor() {\n        this.stats = new Map();\n    }\n\n    increment(key, val) {\n        val = parse_number(val);\n        var cur_aggr = this.stats.get(key);\n        if (cur_aggr === undefined) {\n            this.stats.set(key, [val, val * val, 1]);\n        } else {\n            var cur_sum = cur_aggr[0];\n            var cur_sum_sq = cur_aggr[1];\n            var cur_cnt = cur_aggr[2];\n            this.stats.set(key, [cur_sum + val, cur_sum_sq + val * val, cur_cnt + 1]);\n        }\n    }\n\n    get_final(key) {\n        var cur_aggr = this.stats.get(key);\n        var cur_sum = cur_aggr[0];\n        var cur_sum_sq = cur_aggr[1];\n        var cur_cnt = cur_aggr[2];\n        var avg_val = cur_sum / cur_cnt;\n        var variance = cur_sum_sq / cur_cnt - avg_val * avg_val;\n        return variance;\n    }\n}\n\n\nclass MedianAggregator {\n    constructor() {\n        this.stats = new Map();\n    }\n\n    increment(key, val) {\n        val = parse_number(val);\n        var cur_aggr = this.stats.get(key);\n        if (cur_aggr === undefined) {\n            this.stats.set(key, [val]);\n        } else {\n            cur_aggr.push(val);\n        }\n    }\n\n    get_final(key) {\n        var cur_aggr = this.stats.get(key);\n        cur_aggr.sort(function(a, b) { return a - b; });\n        var m = Math.floor(cur_aggr.length / 2);\n        if (cur_aggr.length % 2) {\n            return cur_aggr[m];\n        } else {\n            return (cur_aggr[m - 1] + cur_aggr[m]) / 2.0;\n        }\n    }\n}\n\n\nclass CountAggregator {\n    constructor() {\n        this.stats = new Map();\n    }\n\n    increment(key, val) {\n        var cur_aggr = this.stats.get(key);\n        if (cur_aggr === undefined) {\n            this.stats.set(key, 1);\n        } else {\n            this.stats.set(key, cur_aggr + 1);\n        }\n    }\n\n    get_final(key) {\n        return this.stats.get(key);\n    }\n}\n\n\nclass ArrayAggAggregator {\n    constructor(post_proc=null) {\n        this.post_proc = post_proc;\n        this.stats = new Map();\n    }\n\n    increment(key, val) {\n        let cur_aggr = this.stats.get(key);\n        if (cur_aggr === undefined) {\n            this.stats.set(key, [val]);\n        } else {\n            cur_aggr.push(val);\n        }\n    }\n\n    get_final(key) {\n        let cur_aggr = this.stats.get(key);\n        if (this.post_proc === null)\n            return cur_aggr;\n        return this.post_proc(cur_aggr);\n    }\n}\n\n\nclass ConstGroupVerifier {\n    constructor(output_index) {\n        this.output_index = output_index;\n        this.const_values = new Map();\n    }\n\n    increment(key, value) {\n        var old_value = this.const_values.get(key);\n        if (old_value === undefined) {\n            this.const_values.set(key, value);\n        } else if (old_value != value) {\n            throw new RbqlRuntimeError(`Invalid aggregate expression: non-constant values in output column ${this.output_index + 1}. E.g. \"${old_value}\" and \"${value}\"`);\n        }\n    }\n\n    get_final(key) {\n        return this.const_values.get(key);\n    }\n}\n\n\nfunction init_aggregator(generator_name, val, post_proc=null) {\n    query_context.aggregation_stage = 1;\n    var res = new RBQLAggregationToken(query_context.functional_aggregators.length, val);\n    if (post_proc === null) {\n        query_context.functional_aggregators.push(new generator_name());\n    } else {\n        query_context.functional_aggregators.push(new generator_name(post_proc));\n    }\n    return res;\n}\n\nfunction ANY_VALUE(val) {\n    return query_context.aggregation_stage < 2 ? init_aggregator(AnyValueAggregator, val) : val;\n}\nconst any_value = ANY_VALUE;\nconst Any_value = ANY_VALUE;\n\nfunction MIN(val) {\n    return query_context.aggregation_stage < 2 ? init_aggregator(MinAggregator, val) : val;\n}\nconst min = MIN;\nconst Min = MIN;\n\nfunction MAX(val) {\n    return query_context.aggregation_stage < 2 ? init_aggregator(MaxAggregator, val) : val;\n}\nconst max = MAX;\nconst Max = MAX;\n\nfunction COUNT(val) {\n    return query_context.aggregation_stage < 2 ? init_aggregator(CountAggregator, 1) : 1;\n}\nconst count = COUNT;\nconst Count = COUNT;\n\nfunction SUM(val) {\n    return query_context.aggregation_stage < 2 ? init_aggregator(SumAggregator, val) : val;\n}\nconst sum = SUM;\nconst Sum = SUM;\n\nfunction AVG(val) {\n    return query_context.aggregation_stage < 2 ? init_aggregator(AvgAggregator, val) : val;\n}\nconst avg = AVG;\nconst Avg = AVG;\n\nfunction VARIANCE(val) {\n    return query_context.aggregation_stage < 2 ? init_aggregator(VarianceAggregator, val) : val;\n}\nconst variance = VARIANCE;\nconst Variance = VARIANCE;\n\nfunction MEDIAN(val) {\n    return query_context.aggregation_stage < 2 ? init_aggregator(MedianAggregator, val) : val;\n}\nconst median = MEDIAN;\nconst Median = MEDIAN;\n\nfunction ARRAY_AGG(val, post_proc=null) {\n    return query_context.aggregation_stage < 2 ? init_aggregator(ArrayAggAggregator, val, post_proc) : val;\n}\nconst array_agg = ARRAY_AGG;\nconst FOLD = ARRAY_AGG; // \"FOLD\" is deprecated, just for backward compatibility\n\n\nfunction add_to_set(dst_set, value) {\n    var len_before = dst_set.size;\n    dst_set.add(value);\n    return len_before != dst_set.size;\n}\n\n\nclass TopWriter {\n    constructor(subwriter, top_count) {\n        this.subwriter = subwriter;\n        this.NW = 0;\n        this.top_count = top_count;\n    }\n\n    async write(record) {\n        if (this.top_count !== null && this.NW >= this.top_count)\n            return false;\n        await this.subwriter.write(record);\n        this.NW += 1;\n        return true;\n    }\n\n    async finish() {\n        await this.subwriter.finish();\n    }\n}\n\n\nclass UniqWriter {\n    constructor(subwriter) {\n        this.subwriter = subwriter;\n        this.seen = new Set();\n    }\n\n    async write(record) {\n        if (!add_to_set(this.seen, JSON.stringify(record)))\n            return true;\n        if (!await this.subwriter.write(record))\n            return false;\n        return true;\n    }\n\n    async finish() {\n        await this.subwriter.finish();\n    }\n}\n\n\nclass UniqCountWriter {\n    constructor(subwriter) {\n        this.subwriter = subwriter;\n        this.records = new Map();\n    }\n\n    async write(record) {\n        var key = JSON.stringify(record);\n        var old_val = this.records.get(key);\n        if (old_val) {\n            old_val[0] += 1;\n        } else {\n            this.records.set(key, [1, record]);\n        }\n        return true;\n    }\n\n    async finish() {\n        for (var [key, value] of this.records) {\n            let [count, record] = value;\n            record.unshift(count);\n            if (!await this.subwriter.write(record))\n                break;\n        }\n        await this.subwriter.finish();\n    }\n}\n\n\nclass SortedWriter {\n    constructor(subwriter, reverse_sort) {\n        this.subwriter = subwriter;\n        this.reverse_sort = reverse_sort;\n        this.unsorted_entries = [];\n    }\n\n    async write(stable_entry) {\n        this.unsorted_entries.push(stable_entry);\n        return true;\n    }\n\n    async finish() {\n        var unsorted_entries = this.unsorted_entries;\n        unsorted_entries.sort(stable_compare);\n        if (this.reverse_sort)\n            unsorted_entries.reverse();\n        for (var i = 0; i < unsorted_entries.length; i++) {\n            var entry = unsorted_entries[i];\n            if (!await this.subwriter.write(entry[entry.length - 1]))\n                break;\n        }\n        await this.subwriter.finish();\n    }\n}\n\n\nclass AggregateWriter {\n    constructor(subwriter) {\n        this.subwriter = subwriter;\n        this.aggregators = [];\n        this.aggregation_keys = new Set();\n    }\n\n    async finish() {\n        var all_keys = Array.from(this.aggregation_keys);\n        all_keys.sort();\n        for (var i = 0; i < all_keys.length; i++) {\n            var key = all_keys[i];\n            var out_fields = [];\n            for (var ag of this.aggregators) {\n                out_fields.push(ag.get_final(key));\n            }\n            if (!await this.subwriter.write(out_fields))\n                break;\n        }\n        await this.subwriter.finish();\n    }\n}\n\n\nclass InnerJoiner {\n    constructor(join_map) {\n        this.join_map = join_map;\n    }\n\n    get_rhs(lhs_key) {\n        return this.join_map.get_join_records(lhs_key);\n    }\n}\n\n\nclass LeftJoiner {\n    constructor(join_map) {\n        this.join_map = join_map;\n        this.null_record = [[null, join_map.max_record_len, Array(join_map.max_record_len).fill(null)]];\n    }\n\n    get_rhs(lhs_key) {\n        let result = this.join_map.get_join_records(lhs_key);\n        if (result.length == 0) {\n            return this.null_record;\n        }\n        return result;\n    }\n}\n\n\nclass StrictLeftJoiner {\n    constructor(join_map) {\n        this.join_map = join_map;\n    }\n\n    get_rhs(lhs_key) {\n        let result = this.join_map.get_join_records(lhs_key);\n        if (result.length != 1) {\n            throw new RbqlRuntimeError('In \"STRICT LEFT JOIN\" each key in A must have exactly one match in B. Bad A key: \"' + lhs_key + '\"');\n        }\n        return result;\n    }\n}\n\n\nfunction select_except(src, except_fields) {\n    let result = [];\n    for (let i = 0; i < src.length; i++) {\n        if (except_fields.indexOf(i) == -1)\n            result.push(src[i]);\n    }\n    return result;\n}\n\n\nasync function select_simple(sort_key, NR, out_fields) {\n    if (query_context.sort_key_expression !== null) {\n        var sort_entry = sort_key.concat([NR, out_fields]);\n        if (!await query_context.writer.write(sort_entry))\n            return false;\n    } else {\n        if (!await query_context.writer.write(out_fields))\n            return false;\n    }\n    return true;\n}\n\n\nfunction select_aggregated(key, transparent_values) {\n    if (key !== null) {\n        key = JSON.stringify(key);\n    }\n    if (query_context.aggregation_stage === 1) {\n        if (!(query_context.writer instanceof TopWriter)) {\n            throw new RbqlParsingError('\"ORDER BY\", \"UPDATE\" and \"DISTINCT\" keywords are not allowed in aggregate queries');\n        }\n        query_context.writer = new AggregateWriter(query_context.writer);\n        let num_aggregators_found = 0;\n        for (var i = 0; i < transparent_values.length; i++) {\n            var trans_value = transparent_values[i];\n            if (trans_value instanceof RBQLAggregationToken) {\n                query_context.writer.aggregators.push(query_context.functional_aggregators[trans_value.marker_id]);\n                query_context.writer.aggregators[query_context.writer.aggregators.length - 1].increment(key, trans_value.value);\n                num_aggregators_found += 1;\n            } else {\n                query_context.writer.aggregators.push(new ConstGroupVerifier(query_context.writer.aggregators.length));\n                query_context.writer.aggregators[query_context.writer.aggregators.length - 1].increment(key, trans_value);\n            }\n        }\n        if (num_aggregators_found != query_context.functional_aggregators.length) {\n            throw new RbqlParsingError(wrong_aggregation_usage_error);\n        }\n        query_context.aggregation_stage = 2;\n    } else {\n        for (var i = 0; i < transparent_values.length; i++) {\n            var trans_value = transparent_values[i];\n            query_context.writer.aggregators[i].increment(key, trans_value);\n        }\n    }\n    query_context.writer.aggregation_keys.add(key);\n}\n\n\nasync function select_unnested(sort_key, NR, folded_fields) {\n    let out_fields = folded_fields.slice();\n    let unnest_pos = folded_fields.findIndex(val => val instanceof UnnestMarker);\n    for (var i = 0; i < query_context.unnest_list.length; i++) {\n        out_fields[unnest_pos] = query_context.unnest_list[i];\n        if (!await select_simple(sort_key, NR, out_fields.slice()))\n            return false;\n    }\n    return true;\n}\n\n\nconst PROCESS_SELECT_COMMON = `\n__RBQLMP__variables_init_code\nif (__RBQLMP__where_expression) {\n    let out_fields = __RBQLMP__select_expression;\n    if (query_context.aggregation_stage > 0) {\n        let key = __RBQLMP__aggregation_key_expression;\n        select_aggregated(key, out_fields);\n    } else {\n        let sort_key = [__RBQLMP__sort_key_expression];\n        if (query_context.unnest_list !== null) {\n            if (!await select_unnested(sort_key, NR, out_fields))\n                stop_flag = true;\n        } else {\n            if (!await select_simple(sort_key, NR, out_fields))\n                stop_flag = true;\n        }\n    }\n}\n`;\n\n\nconst PROCESS_SELECT_SIMPLE = `\nlet star_fields = record_a;\n__CODE__\n`;\n\n\nconst PROCESS_SELECT_JOIN = `\nlet join_matches = query_context.join_map.get_rhs(__RBQLMP__lhs_join_var_expression);\nfor (let join_match of join_matches) {\n    let [bNR, bNF, record_b] = join_match;\n    let star_fields = record_a.concat(record_b);\n    __CODE__\n    if (stop_flag)\n        break;\n}\n`;\n\n\nconst PROCESS_UPDATE_JOIN = `\nlet join_matches = query_context.join_map.get_rhs(__RBQLMP__lhs_join_var_expression);\nif (join_matches.length > 1)\n    throw new RbqlRuntimeError('More than one record in UPDATE query matched a key from the input table in the join table');\nlet record_b = null;\nlet bNR = null;\nlet bNF = null;\nif (join_matches.length == 1)\n    [bNR, bNF, record_b] = join_matches[0];\nlet up_fields = record_a;\n__RBQLMP__variables_init_code\nif (join_matches.length == 1 && (__RBQLMP__where_expression)) {\n    NU += 1;\n    __RBQLMP__update_expressions\n}\nif (!await query_context.writer.write(up_fields))\n    stop_flag = true;\n`;\n\n\nconst PROCESS_UPDATE_SIMPLE = `\nlet up_fields = record_a;\n__RBQLMP__variables_init_code\nif (__RBQLMP__where_expression) {\n    NU += 1;\n    __RBQLMP__update_expressions\n}\nif (!await query_context.writer.write(up_fields))\n    stop_flag = true;\n`;\n\n\nconst MAIN_LOOP_BODY = `\n__USER_INIT_CODE__\n\nlet NU = 0;\nlet NR = 0;\n\nlet stop_flag = false;\nwhile (!stop_flag) {\n    let record_a = await query_context.input_iterator.get_record();\n    if (record_a === null)\n        break;\n    NR += 1;\n    let NF = record_a.length;\n    query_context.unnest_list = null; // TODO optimize, don't need to set this every iteration\n    try {\n        __CODE__\n    } catch (e) {\n        if (e.constructor.name === 'InternalBadFieldError') {\n            throw new RbqlRuntimeError(\\`No \"a\\${e.bad_idx + 1}\" field at record \\${NR}\\`);\n        } else if (e.constructor.name === 'RbqlParsingError') {\n            throw(e);\n        } else {\n            throw new RbqlRuntimeError(\\`At record \\${NR}, Details: \\${e.message}\\`);\n        }\n    }\n}\n`;\n\n\nfunction embed_expression(parent_code, child_placeholder, child_expression) {\n    return replace_all(parent_code, child_placeholder, child_expression);\n}\n\n\nfunction embed_code(parent_code, child_placeholder, child_code) {\n    let parent_lines = parent_code.split('\\n');\n    let child_lines = child_code.split('\\n');\n    for (let i = 0; i < parent_lines.length; i++) {\n        let pos = parent_lines[i].indexOf(child_placeholder);\n        if (pos == -1)\n            continue;\n        assert(pos % 4 == 0);\n        let placeholder_indentation = parent_lines[i].substring(0, pos);\n        child_lines = child_lines.map(l => placeholder_indentation + l);\n        let result_lines = parent_lines.slice(0, i).concat(child_lines).concat(parent_lines.slice(i + 1));\n        return result_lines.join('\\n') + '\\n';\n    }\n    assert(false);\n}\n\n\nfunction generate_main_loop_code(query_context) {\n    let is_select_query = query_context.select_expression !== null;\n    let is_join_query = query_context.join_map !== null;\n    let where_expression = query_context.where_expression === null ? 'true' : query_context.where_expression;\n    let aggregation_key_expression = query_context.aggregation_key_expression === null ? 'null' : query_context.aggregation_key_expression;\n    let sort_key_expression = query_context.sort_key_expression === null ? 'null' : query_context.sort_key_expression;\n    let js_code = embed_code(MAIN_LOOP_BODY, '__USER_INIT_CODE__', query_context.user_init_code);\n    if (is_select_query) {\n        if (is_join_query) {\n            js_code = embed_code(embed_code(js_code, '__CODE__', PROCESS_SELECT_JOIN), '__CODE__', PROCESS_SELECT_COMMON);\n            js_code = embed_expression(js_code, '__RBQLMP__lhs_join_var_expression', query_context.lhs_join_var_expression);\n        } else {\n            js_code = embed_code(embed_code(js_code, '__CODE__', PROCESS_SELECT_SIMPLE), '__CODE__', PROCESS_SELECT_COMMON);\n        }\n        js_code = embed_code(js_code, '__RBQLMP__variables_init_code', query_context.variables_init_code);\n        js_code = embed_expression(js_code, '__RBQLMP__select_expression', query_context.select_expression);\n        js_code = embed_expression(js_code, '__RBQLMP__where_expression', where_expression);\n        js_code = embed_expression(js_code, '__RBQLMP__aggregation_key_expression', aggregation_key_expression);\n        js_code = embed_expression(js_code, '__RBQLMP__sort_key_expression', sort_key_expression);\n    } else {\n        if (is_join_query) {\n            js_code = embed_code(js_code, '__CODE__', PROCESS_UPDATE_JOIN);\n            js_code = embed_expression(js_code, '__RBQLMP__lhs_join_var_expression', query_context.lhs_join_var_expression);\n        } else {\n            js_code = embed_code(js_code, '__CODE__', PROCESS_UPDATE_SIMPLE);\n        }\n        js_code = embed_code(js_code, '__RBQLMP__variables_init_code', query_context.variables_init_code);\n        js_code = embed_code(js_code, '__RBQLMP__update_expressions', query_context.update_expressions);\n        js_code = embed_expression(js_code, '__RBQLMP__where_expression', where_expression);\n    }\n    return \"(async () => {\" + js_code + \"})()\";\n}\n\n\nasync function compile_and_run(query_context) {\n    let main_loop_body = generate_main_loop_code(query_context);\n    try {\n        let main_loop_promise = eval(main_loop_body);\n        await main_loop_promise;\n    } catch (e) {\n        if (e instanceof SyntaxError) {\n            // SyntaxError's from eval() function do not contain detailed explanation of what has caused the syntax error, so to guess what was wrong we can only use the original query\n            // v8 issue to fix eval: https://bugs.chromium.org/p/v8/issues/detail?id=2589\n            let lower_case_query = query_context.query_text.toLowerCase();\n            if (lower_case_query.indexOf(' having ') != -1)\n                throw new SyntaxError(e.message + \"\\nRBQL doesn't support \\\"HAVING\\\" keyword\");\n            if (lower_case_query.indexOf(' like ') != -1)\n                throw new SyntaxError(e.message + \"\\nRBQL doesn't support \\\"LIKE\\\" operator, use like() function instead e.g. ... WHERE like(a1, 'foo%bar') ... \"); // UT JSON\n            if (lower_case_query.indexOf(' from ') != -1)\n                throw new SyntaxError(e.message + \"\\nTip: If input table is defined by the environment, RBQL query should not have \\\"FROM\\\" keyword\"); // UT JSON\n            if (e && e.message && String(e.message).toLowerCase().indexOf('unexpected identifier') != -1) {\n                if (lower_case_query.indexOf(' and ') != -1)\n                    throw new SyntaxError(e.message + \"\\nDid you use 'and' keyword in your query?\\nJavaScript backend doesn't support 'and' keyword, use '&&' operator instead!\");\n                if (lower_case_query.indexOf(' or ') != -1)\n                    throw new SyntaxError(e.message + \"\\nDid you use 'or' keyword in your query?\\nJavaScript backend doesn't support 'or' keyword, use '||' operator instead!\");\n            }\n        }\n        if (e && e.message && e.message.indexOf('Received an instance of RBQLAggregationToken') != -1)\n            throw new RbqlParsingError(wrong_aggregation_usage_error);\n        throw e;\n    }\n}\n\n\nconst GROUP_BY = 'GROUP BY';\nconst UPDATE = 'UPDATE';\nconst SELECT = 'SELECT';\nconst JOIN = 'JOIN';\nconst INNER_JOIN = 'INNER JOIN';\nconst LEFT_JOIN = 'LEFT JOIN';\nconst LEFT_OUTER_JOIN = 'LEFT OUTER JOIN';\nconst STRICT_LEFT_JOIN = 'STRICT LEFT JOIN';\nconst ORDER_BY = 'ORDER BY';\nconst WHERE = 'WHERE';\nconst LIMIT = 'LIMIT';\nconst EXCEPT = 'EXCEPT';\nconst WITH = 'WITH';\n\n\nfunction get_ambiguous_error_msg(variable_name) {\n    return `Ambiguous variable name: \"${variable_name}\" is present both in input and in join tables`;\n}\n\n\nfunction get_all_matches(regexp, text) {\n    var result = [];\n    let match_obj = null;\n    while((match_obj = regexp.exec(text)) !== null) {\n        result.push(match_obj);\n    }\n    return result;\n}\n\n\nfunction str_strip(src) {\n    return src.replace(/^ +| +$/g, '');\n}\n\n\nfunction strip_comments(cline) {\n    cline = cline.trim();\n    if (cline.startsWith('//'))\n        return '';\n    return cline;\n}\n\n\nfunction combine_string_literals(backend_expression, string_literals) {\n    for (var i = 0; i < string_literals.length; i++) {\n        backend_expression = replace_all(backend_expression, `___RBQL_STRING_LITERAL${i}___`, string_literals[i]);\n    }\n    return backend_expression;\n}\n\n\nfunction parse_basic_variables(query_text, prefix, dst_variables_map) {\n    assert(prefix == 'a' || prefix == 'b');\n    let rgx = new RegExp(`(?:^|[^_a-zA-Z0-9])${prefix}([1-9][0-9]*)(?:$|(?=[^_a-zA-Z0-9]))`, 'g');\n    let matches = get_all_matches(rgx, query_text);\n    for (let i = 0; i < matches.length; i++) {\n        let field_num = parseInt(matches[i][1]);\n        dst_variables_map[prefix + String(field_num)] = {initialize: true, index: field_num - 1};\n    }\n}\n\n\nfunction parse_array_variables(query_text, prefix, dst_variables_map) {\n    assert(prefix == 'a' || prefix == 'b');\n    let rgx = new RegExp(`(?:^|[^_a-zA-Z0-9])${prefix}\\\\[([1-9][0-9]*)\\\\]`, 'g');\n    let matches = get_all_matches(rgx, query_text);\n    for (let i = 0; i < matches.length; i++) {\n        let field_num = parseInt(matches[i][1]);\n        dst_variables_map[`${prefix}[${field_num}]`] = {initialize: true, index: field_num - 1};\n    }\n}\n\n\nfunction js_string_escape_column_name(column_name, quote_char) {\n    column_name = column_name.replace(/\\\\/g, '\\\\\\\\');\n    column_name = column_name.replace(/\\n/g, '\\\\n');\n    column_name = column_name.replace(/\\r/g, '\\\\r');\n    column_name = column_name.replace(/\\t/g, '\\\\t');\n    if (quote_char === \"'\")\n        return column_name.replace(/'/g, \"\\\\'\");\n    if (quote_char === '\"')\n        return column_name.replace(/\"/g, '\\\\\"');\n    assert(quote_char === \"`\");\n    return column_name.replace(/`/g, \"\\\\`\");\n}\n\n\nfunction query_probably_has_dictionary_variable(query_text, column_name) {\n    let rgx = new RegExp('[-a-zA-Z0-9_:;+=!.,()%^#@&* ]+', 'g');\n    let continuous_name_segments = get_all_matches(rgx, column_name);\n    for (let continuous_segment of continuous_name_segments) {\n        if (query_text.indexOf(continuous_segment) == -1)\n            return false;\n    }\n    return true;\n}\n\n\nfunction parse_dictionary_variables(query_text, prefix, column_names, dst_variables_map) {\n    // The purpose of this algorithm is to minimize number of variables in varibale_map to improve performance, ideally it should be only variables from the query\n\n    // FIXME to prevent typos in attribute names either use query-based variable parsing which can properly handle back-tick strings or wrap \"a\" and \"b\" variables with ES6 Proxies https://stackoverflow.com/a/25658975/2898283\n    assert(prefix === 'a' || prefix === 'b');\n    let dict_test_rgx = new RegExp(`(?:^|[^_a-zA-Z0-9])${prefix}\\\\[`);\n    if (query_text.search(dict_test_rgx) == -1)\n        return;\n    for (let i = 0; i < column_names.length; i++) {\n        let column_name = column_names[i];\n        if (query_probably_has_dictionary_variable(query_text, column_name)) {\n            let escaped_column_name = js_string_escape_column_name(column_name, '\"');\n            dst_variables_map[`${prefix}[\"${escaped_column_name}\"]`] = {initialize: true, index: i};\n            escaped_column_name = js_string_escape_column_name(column_name, \"'\");\n            dst_variables_map[`${prefix}['${escaped_column_name}']`] = {initialize: false, index: i};\n            escaped_column_name = js_string_escape_column_name(column_name, \"`\");\n            dst_variables_map[`${prefix}[\\`${escaped_column_name}\\`]`] = {initialize: false, index: i};\n        }\n    }\n}\n\n\nfunction parse_attribute_variables(query_text, prefix, column_names, column_names_source, dst_variables_map) {\n    // The purpose of this algorithm is to minimize number of variables in varibale_map to improve performance, ideally it should be only variables from the query\n\n    assert(prefix === 'a' || prefix === 'b');\n    let rgx = new RegExp(`(?:^|[^_a-zA-Z0-9])${prefix}\\\\.([_a-zA-Z][_a-zA-Z0-9]*)`, 'g');\n    let matches = get_all_matches(rgx, query_text);\n    let column_names_from_query = matches.map(v => v[1]);\n    for (let column_name of column_names_from_query) {\n        let zero_based_idx = column_names.indexOf(column_name);\n        if (zero_based_idx != -1) {\n            dst_variables_map[`${prefix}.${column_name}`] = {initialize: true, index: zero_based_idx};\n        } else {\n            throw new RbqlParsingError(`Unable to find column \"${column_name}\" in ${prefix == 'a' ? 'input' : 'join'} ${column_names_source}`);\n        }\n    }\n}\n\n\nfunction map_variables_directly(query_text, column_names, dst_variables_map) {\n    for (let i = 0; i < column_names.length; i++) {\n        let column_name = column_names[i];\n        if ( /^[_a-zA-Z][_a-zA-Z0-9]*$/.exec(column_name) === null)\n            throw new RbqlIOHandlingError(`Unable to use column name \"${column_name}\" as RBQL/JS variable`);\n        if (query_text.indexOf(column_name) != -1)\n            dst_variables_map[column_name] = {initialize: true, index: i};\n    }\n}\n\n\nfunction ensure_no_ambiguous_variables(query_text, input_column_names, join_column_names) {\n    let join_column_names_set = new Set(join_column_names);\n    for (let column_name of input_column_names) {\n        if (join_column_names_set.has(column_name) && query_text.indexOf(column_name) != -1) // False positive is tolerable here\n            throw new RbqlParsingError(get_ambiguous_error_msg(column_name));\n    }\n}\n\n\nfunction parse_join_expression(src) {\n    src = str_strip(src);\n    const invalid_join_syntax_error = 'Invalid join syntax. Valid syntax: <JOIN> /path/to/B/table on a... == b... [and a... == b... [and ... ]]';\n    let rgx = /^ *([^ ]+) +on +/i;\n    let match = rgx.exec(src);\n    if (match === null)\n        throw new RbqlParsingError(invalid_join_syntax_error);\n    let table_id = match[1];\n    src = src.substr(match[0].length);\n\n    let variable_pairs = [];\n    var pair_rgx = /^([^ =]+) *==? *([^ =]+)/;\n    var and_rgx = /^ +(and|&&) +/i;\n    while (true) {\n        match = pair_rgx.exec(src);\n        if (match === null)\n            throw new RbqlParsingError(invalid_join_syntax_error);\n        variable_pairs.push([match[1], match[2]]);\n        src = src.substr(match[0].length);\n        if (!src.length)\n            break;\n        match = and_rgx.exec(src);\n        if (match === null)\n            throw new RbqlParsingError(invalid_join_syntax_error);\n        src = src.substr(match[0].length);\n    }\n    return [table_id, variable_pairs];\n}\n\n\nfunction resolve_join_variables(input_variables_map, join_variables_map, variable_pairs, string_literals) {\n    let lhs_variables = [];\n    let rhs_indices = [];\n    const valid_join_syntax_msg = 'Valid JOIN syntax: <JOIN> /path/to/B/table on a... == b... [and a... == b... [and ... ]]';\n    for (let variable_pair of variable_pairs) {\n        let [join_var_1, join_var_2] = variable_pair;\n        join_var_1 = combine_string_literals(join_var_1, string_literals);\n        join_var_2 = combine_string_literals(join_var_2, string_literals);\n        if (input_variables_map.hasOwnProperty(join_var_1) && join_variables_map.hasOwnProperty(join_var_1))\n            throw new RbqlParsingError(get_ambiguous_error_msg(join_var_1));\n        if (input_variables_map.hasOwnProperty(join_var_2) && join_variables_map.hasOwnProperty(join_var_2))\n            throw new RbqlParsingError(get_ambiguous_error_msg(join_var_2));\n        if (input_variables_map.hasOwnProperty(join_var_2))\n            [join_var_1, join_var_2] = [join_var_2, join_var_1];\n\n        let [lhs_key_index, rhs_key_index] = [null, null];\n        if (['NR', 'a.NR', 'aNR'].indexOf(join_var_1) != -1) {\n            lhs_key_index = -1;\n        } else if (input_variables_map.hasOwnProperty(join_var_1)) {\n            lhs_key_index = input_variables_map[join_var_1].index;\n        } else {\n            throw new RbqlParsingError(`Unable to parse JOIN expression: Input table does not have field \"${join_var_1}\"\\n${valid_join_syntax_msg}`);\n        }\n\n        if (['b.NR', 'bNR'].indexOf(join_var_2) != -1) {\n            rhs_key_index = -1;\n        } else if (join_variables_map.hasOwnProperty(join_var_2)) {\n            rhs_key_index = join_variables_map[join_var_2].index;\n        } else {\n            throw new RbqlParsingError(`Unable to parse JOIN expression: Join table does not have field \"${join_var_2}\"\\n${valid_join_syntax_msg}`);\n        }\n\n        let lhs_join_var_expression = lhs_key_index == -1 ? 'NR' : `safe_join_get(record_a, ${lhs_key_index})`;\n        rhs_indices.push(rhs_key_index);\n        lhs_variables.push(lhs_join_var_expression);\n    }\n    return [lhs_variables, rhs_indices];\n}\n\n\nfunction generate_common_init_code(query_text, variable_prefix) {\n    assert(variable_prefix == 'a' || variable_prefix == 'b');\n    let result = [];\n    result.push(`${variable_prefix} = new Object();`);\n    let base_var = variable_prefix == 'a' ? 'NR' : 'bNR';\n    let attr_var = `${variable_prefix}.NR`;\n    if (query_text.indexOf(attr_var) != -1)\n        result.push(`${attr_var} = ${base_var};`);\n    if (variable_prefix == 'a' && query_text.indexOf('aNR') != -1)\n        result.push('aNR = NR;');\n    return result;\n}\n\n\nfunction generate_init_statements(query_text, variables_map, join_variables_map, indent) {\n    let code_lines = generate_common_init_code(query_text, 'a');\n    let simple_var_name_rgx = /^[_0-9a-zA-Z]+$/;\n    for (const [variable_name, var_info] of Object.entries(variables_map)) {\n        if (var_info.initialize) {\n            let variable_declaration_keyword = simple_var_name_rgx.exec(variable_name) ? 'var ' : '';\n            code_lines.push(`${variable_declaration_keyword}${variable_name} = safe_get(record_a, ${var_info.index});`);\n        }\n    }\n    if (join_variables_map) {\n        code_lines = code_lines.concat(generate_common_init_code(query_text, 'b'));\n        for (const [variable_name, var_info] of Object.entries(join_variables_map)) {\n            if (var_info.initialize) {\n                let variable_declaration_keyword = simple_var_name_rgx.exec(variable_name) ? 'var ' : '';\n                code_lines.push(`${variable_declaration_keyword}${variable_name} = record_b === null ? null : safe_get(record_b, ${var_info.index});`);\n            }\n        }\n    }\n    for (let i = 1; i < code_lines.length; i++) {\n        code_lines[i] = indent + code_lines[i];\n    }\n    return code_lines.join('\\n');\n}\n\n\nfunction replace_star_count(aggregate_expression) {\n    var rgx = /(?:(?<=^)|(?<=,)) *COUNT\\( *\\* *\\)/ig;\n    var result = aggregate_expression.replace(rgx, ' COUNT(1)');\n    return str_strip(result);\n}\n\n\nfunction replace_star_vars(rbql_expression) {\n    let star_rgx = /(?:^|,) *(\\*|a\\.\\*|b\\.\\*) *(?=$|,)/g;\n    let matches = get_all_matches(star_rgx, rbql_expression);\n    let last_pos = 0;\n    let result = '';\n    for (let match of matches) {\n        let star_expression = match[1];\n        let replacement_expression = ']).concat(' + {'*': 'star_fields', 'a.*': 'record_a', 'b.*': 'record_b'}[star_expression] + ').concat([';\n        if (last_pos < match.index)\n            result += rbql_expression.substring(last_pos, match.index);\n        result += replacement_expression;\n        last_pos = match.index + match[0].length + 1; // Adding one to skip the lookahead comma\n    }\n    result += rbql_expression.substring(last_pos);\n    return result;\n}\n\n\nfunction replace_star_vars_for_header_parsing(rbql_expression) {\n    let star_rgx = /(?:(?<=^)|(?<=,)) *(\\*|a\\.\\*|b\\.\\*) *(?=$|,)/g;\n    let matches = get_all_matches(star_rgx, rbql_expression);\n    let last_pos = 0;\n    let result = '';\n    for (let match of matches) {\n        let star_expression = match[1];\n        let replacement_expression = {'*': '__RBQL_INTERNAL_STAR', 'a.*': 'a.__RBQL_INTERNAL_STAR', 'b.*': 'b.__RBQL_INTERNAL_STAR'}[star_expression];\n        if (last_pos < match.index)\n            result += rbql_expression.substring(last_pos, match.index);\n        result += replacement_expression;\n        last_pos = match.index + match[0].length;\n    }\n    result += rbql_expression.substring(last_pos);\n    return result;\n}\n\n\nfunction translate_update_expression(update_expression, input_variables_map, string_literals, indent) {\n    let first_assignment = str_strip(update_expression.split('=')[0]);\n    let first_assignment_error = `Unable to parse \"UPDATE\" expression: the expression must start with assignment, but \"${first_assignment}\" does not look like an assignable field name`;\n\n    let assignment_looking_rgx = /(?:^|,) *(a[.#a-zA-Z0-9\\[\\]_]*) *=(?=[^=])/g;\n    let update_expressions = [];\n    let pos = 0;\n    while (true) {\n        let match = assignment_looking_rgx.exec(update_expression);\n        if (update_expressions.length == 0 && (match === null || match.index != 0)) {\n            throw new RbqlParsingError(first_assignment_error);\n        }\n        if (match === null) {\n            update_expressions[update_expressions.length - 1] += str_strip(update_expression.substr(pos)) + ');';\n            break;\n        }\n        if (update_expressions.length)\n            update_expressions[update_expressions.length - 1] += str_strip(update_expression.substring(pos, match.index)) + ');';\n        let dst_var_name = combine_string_literals(str_strip(match[1]), string_literals);\n        if (!input_variables_map.hasOwnProperty(dst_var_name))\n            throw new RbqlParsingError(`Unable to parse \"UPDATE\" expression: Unknown field name: \"${dst_var_name}\"`);\n        let var_index = input_variables_map[dst_var_name].index;\n        let current_indent = update_expressions.length ? indent : '';\n        update_expressions.push(`${current_indent}safe_set(up_fields, ${var_index}, `);\n        pos = match.index + match[0].length;\n    }\n    return combine_string_literals(update_expressions.join('\\n'), string_literals);\n}\n\n\nfunction translate_select_expression(select_expression) {\n    let as_alias_replacement_regexp = / +(AS|as) +([a-zA-Z][a-zA-Z0-9_]*) *(?=$|,)/g;\n    let expression_without_counting_stars = replace_star_count(select_expression);\n    let expression_without_as_column_alias = expression_without_counting_stars.replace(as_alias_replacement_regexp, '');\n    let translated = str_strip(replace_star_vars(expression_without_as_column_alias));\n    let translated_for_header = str_strip(replace_star_vars_for_header_parsing(expression_without_counting_stars));\n    if (!translated.length)\n        throw new RbqlParsingError('\"SELECT\" expression is empty');\n    return [`[].concat([${translated}])`, translated_for_header];\n}\n\n\nfunction separate_string_literals(rbql_expression) {\n    // The regex consists of 3 almost identicall parts, the only difference is quote type\n    var rgx = /('(\\\\(\\\\\\\\)*'|[^'])*')|(\"(\\\\(\\\\\\\\)*\"|[^\"])*\")|(`(\\\\(\\\\\\\\)*`|[^`])*`)/g;\n    var match_obj = null;\n    var format_parts = [];\n    var string_literals = [];\n    var idx_before = 0;\n    while((match_obj = rgx.exec(rbql_expression)) !== null) {\n        var literal_id = string_literals.length;\n        var string_literal = match_obj[0];\n        string_literals.push(string_literal);\n        var start_index = match_obj.index;\n        format_parts.push(rbql_expression.substring(idx_before, start_index));\n        format_parts.push(`___RBQL_STRING_LITERAL${literal_id}___`);\n        idx_before = rgx.lastIndex;\n    }\n    format_parts.push(rbql_expression.substring(idx_before));\n    var format_expression = format_parts.join('');\n    format_expression = format_expression.replace(/\\t/g, ' ');\n    return [format_expression, string_literals];\n}\n\n\nfunction locate_statements(rbql_expression) {\n    let statement_groups = [];\n    statement_groups.push([STRICT_LEFT_JOIN, LEFT_OUTER_JOIN, LEFT_JOIN, INNER_JOIN, JOIN]);\n    statement_groups.push([SELECT]);\n    statement_groups.push([ORDER_BY]);\n    statement_groups.push([WHERE]);\n    statement_groups.push([UPDATE]);\n    statement_groups.push([GROUP_BY]);\n    statement_groups.push([LIMIT]);\n    statement_groups.push([EXCEPT]);\n    var result = [];\n    for (var ig = 0; ig < statement_groups.length; ig++) {\n        for (var is = 0; is < statement_groups[ig].length; is++) {\n            var statement = statement_groups[ig][is];\n            var rgxp = new RegExp('(?:^| )' + replace_all(statement, ' ', ' *') + '(?= )', 'ig');\n            var matches = get_all_matches(rgxp, rbql_expression);\n            if (!matches.length)\n                continue;\n            if (matches.length > 1)\n                throw new RbqlParsingError(`More than one \"${statement}\" statements found`);\n            assert(matches.length == 1);\n            var match = matches[0];\n            var match_str = match[0];\n            result.push([match.index, match.index + match_str.length, statement]);\n            break; // Break to avoid matching a sub-statement from the same group e.g. \"INNER JOIN\" -> \"JOIN\"\n        }\n    }\n    result.sort(function(a, b) { return a[0] - b[0]; });\n    return result;\n}\n\n\nfunction separate_actions(rbql_expression) {\n    rbql_expression = str_strip(rbql_expression);\n    var result = {};\n    let with_match = /^(.*)  *[Ww][Ii][Tt][Hh] *\\(([a-z]{4,20})\\) *$/.exec(rbql_expression);\n    if (with_match !== null) {\n        rbql_expression = with_match[1];\n        result[WITH] = with_match[2];\n    }\n    var ordered_statements = locate_statements(rbql_expression);\n    for (var i = 0; i < ordered_statements.length; i++) {\n        var statement_start = ordered_statements[i][0];\n        var span_start = ordered_statements[i][1];\n        var statement = ordered_statements[i][2];\n        var span_end = i + 1 < ordered_statements.length ? ordered_statements[i + 1][0] : rbql_expression.length;\n        assert(statement_start < span_start);\n        assert(span_start <= span_end);\n        var span = rbql_expression.substring(span_start, span_end);\n        var statement_params = {};\n        if ([STRICT_LEFT_JOIN, LEFT_OUTER_JOIN, LEFT_JOIN, INNER_JOIN, JOIN].indexOf(statement) != -1) {\n            statement_params['join_subtype'] = statement;\n            statement = JOIN;\n        }\n\n        if (statement == UPDATE) {\n            if (statement_start != 0)\n                throw new RbqlParsingError('UPDATE keyword must be at the beginning of the query');\n            span = span.replace(/^ *SET/i, '');\n        }\n\n        if (statement == ORDER_BY) {\n            span = span.replace(/ ASC *$/i, '');\n            var new_span = span.replace(/ DESC *$/i, '');\n            if (new_span != span) {\n                span = new_span;\n                statement_params['reverse'] = true;\n            } else {\n                statement_params['reverse'] = false;\n            }\n        }\n\n        if (statement == SELECT) {\n            if (statement_start != 0)\n                throw new RbqlParsingError('SELECT keyword must be at the beginning of the query');\n            let match = /^ *TOP *([0-9]+) /i.exec(span);\n            if (match !== null) {\n                statement_params['top'] = parseInt(match[1]);\n                span = span.substr(match.index + match[0].length);\n            }\n            match = /^ *DISTINCT *(COUNT)? /i.exec(span);\n            if (match !== null) {\n                statement_params['distinct'] = true;\n                if (match[1]) {\n                    statement_params['distinct_count'] = true;\n                }\n                span = span.substr(match.index + match[0].length);\n            }\n        }\n        statement_params['text'] = str_strip(span);\n        result[statement] = statement_params;\n    }\n    if (!result.hasOwnProperty(SELECT) && !result.hasOwnProperty(UPDATE)) {\n        throw new RbqlParsingError('Query must contain either SELECT or UPDATE statement');\n    }\n    assert(result.hasOwnProperty(SELECT) != result.hasOwnProperty(UPDATE));\n    return result;\n}\n\n\nfunction find_top(rb_actions) {\n    if (rb_actions.hasOwnProperty(LIMIT)) {\n        var rgx = /^[0-9]+$/;\n        if (rgx.exec(rb_actions[LIMIT]['text']) === null) {\n            throw new RbqlParsingError('LIMIT keyword must be followed by an integer');\n        }\n        var result = parseInt(rb_actions[LIMIT]['text']);\n        return result;\n    }\n    var select_action = rb_actions[SELECT];\n    if (select_action && select_action.hasOwnProperty('top')) {\n        return select_action['top'];\n    }\n    return null;\n}\n\n\nfunction translate_except_expression(except_expression, input_variables_map, string_literals, input_header) {\n    let skip_vars = except_expression.split(',');\n    skip_vars = skip_vars.map(str_strip);\n    let skip_indices = [];\n    for (let var_name of skip_vars) {\n        var_name = combine_string_literals(var_name, string_literals);\n        if (!input_variables_map.hasOwnProperty(var_name))\n            throw new RbqlParsingError(`Unknown field in EXCEPT expression: \"${var_name}\"`);\n        skip_indices.push(input_variables_map[var_name].index);\n    }\n    skip_indices = skip_indices.sort((a, b) => a - b);\n    let output_header = input_header === null ? null : select_except(input_header, skip_indices);\n    let indices_str = skip_indices.join(',');\n    return [output_header, `select_except(record_a, [${indices_str}])`];\n}\n\n\nclass HashJoinMap {\n    constructor(record_iterator, key_indices) {\n        this.max_record_len = 0;\n        this.hash_map = new Map();\n        this.record_iterator = record_iterator;\n        this.nr = 0;\n        if (key_indices.length == 1) {\n            this.key_index = key_indices[0];\n            this.key_indices = null;\n            this.polymorphic_get_key = this.get_single_key;\n        } else {\n            this.key_index = null;\n            this.key_indices = key_indices;\n            this.polymorphic_get_key = this.get_multi_key;\n        }\n    }\n\n    get_single_key(nr, fields) {\n        if (this.key_index >= fields.length)\n            throw new RbqlRuntimeError(`No field with index ${this.key_index + 1} at record ${this.nr} in \"B\" table`);\n        return this.key_index === -1 ? this.nr : fields[this.key_index];\n    };\n\n    get_multi_key(nr, fields) {\n        let result = [];\n        for (let ki of this.key_indices) {\n            if (ki >= fields.length)\n                throw new RbqlRuntimeError(`No field with index ${ki + 1} at record ${this.nr} in \"B\" table`);\n            result.push(ki === -1 ? this.nr : fields[ki]);\n        }\n        return JSON.stringify(result);\n    };\n\n    async build() {\n        while (true) {\n            let fields = await this.record_iterator.get_record();\n            if (fields === null)\n                break;\n            this.nr += 1;\n            let nf = fields.length;\n            this.max_record_len = Math.max(this.max_record_len, nf);\n            let key = this.polymorphic_get_key(this.nr, fields);\n            let key_records = this.hash_map.get(key);\n            if (key_records === undefined) {\n                this.hash_map.set(key, [[this.nr, nf, fields]]);\n            } else {\n                key_records.push([this.nr, nf, fields]);\n            }\n        }\n    };\n\n    get_join_records(key) {\n        let result = this.hash_map.get(key);\n        if (result === undefined)\n            return [];\n        return result;\n    };\n\n    get_warnings() {\n        return this.record_iterator.get_warnings();\n    };\n}\n\n\nfunction cleanup_query(query_text) {\n    return query_text.split('\\n').map(strip_comments).filter(line => line.length).join(' ').replace(/;+$/g, '');\n}\n\n\nfunction remove_redundant_table_name(query_text) {\n    query_text = str_strip(query_text.replace(/ +from +a(?: +|$)/gi, ' '));\n    query_text = str_strip(query_text.replace(/^ *update +a +set /gi, 'update '));\n    return query_text;\n}\n\n\nfunction select_output_header(input_header, join_header, query_column_infos) {\n    if (input_header === null) {\n        assert(join_header === null);\n    }\n    let query_has_star = false;\n    let query_has_column_alias = false;\n    for (let qci of query_column_infos) {\n        query_has_star = query_has_star || (qci !== null && qci.is_star);\n        query_has_column_alias = query_has_column_alias || (qci !== null && qci.alias_name !== null);\n    }\n    if (input_header === null) {\n        if (query_has_star && query_has_column_alias) {\n            throw new RbqlParsingError('Using both * (star) and AS alias in the same query is not allowed for input tables without header');\n        }\n        if (!query_has_column_alias) {\n            // Input table has no header and query has no aliases therefore the output table will be without header.\n            return null;\n        }\n        input_header = [];\n        join_header = [];\n    }\n    if (join_header === null) {\n        // This means there is no JOIN table.\n        join_header = [];\n    }\n    let output_header = [];\n    for (let qci of query_column_infos) {\n        // TODO refactor this and python version: extract this code into a function instead to always return something\n        if (qci === null) {\n            output_header.push('col' + (output_header.length + 1));\n        } else if (qci.is_star) {\n            if (qci.table_name === null) {\n                output_header = output_header.concat(input_header).concat(join_header);\n            } else if (qci.table_name === 'a') {\n                output_header = output_header.concat(input_header);\n            } else if (qci.table_name === 'b') {\n                output_header = output_header.concat(join_header);\n            }\n        } else if (qci.column_name !== null) {\n            output_header.push(qci.column_name);\n        } else if (qci.alias_name !== null) {\n            output_header.push(qci.alias_name);\n        } else if (qci.column_index !== null) {\n            if (qci.table_name == 'a' && qci.column_index < input_header.length) {\n                output_header.push(input_header[qci.column_index]);\n            } else if (qci.table_name == 'b' && qci.column_index < join_header.length) {\n                output_header.push(join_header[qci.column_index]);\n            } else {\n                output_header.push('col' + (output_header.length + 1));\n            }\n        } else { // Should never happen\n            output_header.push('col' + (output_header.length + 1));\n        }\n    }\n    return output_header;\n}\n\n\nfunction sample_first_two_inconsistent_records(inconsistent_records_info) {\n    let entries = Array.from(inconsistent_records_info.entries());\n    entries.sort(function(a, b) { return a[1] - b[1]; });\n    assert(entries.length > 1);\n    let [num_fields_1, record_num_1] = entries[0];\n    let [num_fields_2, record_num_2] = entries[1];\n    return [record_num_1, num_fields_1, record_num_2, num_fields_2];\n}\n\n\nfunction make_inconsistent_num_fields_warning(table_name, inconsistent_records_info) {\n    let [record_num_1, num_fields_1, record_num_2, num_fields_2] = sample_first_two_inconsistent_records(inconsistent_records_info);\n    let warn_msg = `Number of fields in \"${table_name}\" table is not consistent: `;\n    warn_msg += `e.g. record ${record_num_1} -> ${num_fields_1} fields, record ${record_num_2} -> ${num_fields_2} fields`;\n    return warn_msg;\n}\n\n\nclass RBQLInputIterator {\n    constructor(){}\n    stop() {\n        throw new Error(\"Unable to call the interface method\");\n    }\n    async get_variables_map(query_text) {\n        throw new Error(\"Unable to call the interface method\");\n    }\n    async get_record() {\n        throw new Error(\"Unable to call the interface method\");\n    }\n    handle_query_modifier() {\n        return; // Reimplement if you need to handle a boolean query modifier that can be used like this: `SELECT * WITH (modifiername)`\n    }\n    get_warnings() {\n        return []; // Reimplement if your class can produce warnings\n    }\n    async get_header() {\n        return null; // Reimplement if your class can provide input header\n    }\n}\n\n\nclass RBQLOutputWriter {\n    constructor(){}\n\n    async write(fields) {\n        throw new Error(\"Unable to call the interface method\");\n    }\n\n    async finish() {\n        // Reimplement if your class needs to do something on finish e.g. cleanup\n    };\n\n    get_warnings() {\n        return []; // Reimplement if your class can produce warnings\n    };\n\n    set_header() {\n        return; // Reimplement if your class can handle output headers in a meaningful way\n    }\n}\n\n\nclass RBQLTableRegistry {\n    constructor(){}\n\n    get_iterator_by_table_id(table_id) {\n        throw new Error(\"Unable to call the interface method\");\n    }\n\n    get_warnings() {\n        return []; // Reimplement if your class can produce warnings\n    };\n}\n\n\nclass TableIterator extends RBQLInputIterator {\n    constructor(table, column_names=null, normalize_column_names=true, variable_prefix='a') {\n        super();\n        this.table = table;\n        this.column_names = column_names;\n        this.normalize_column_names = normalize_column_names;\n        this.variable_prefix = variable_prefix;\n        this.nr = 0;\n        this.fields_info = new Map();\n        this.stopped = false;\n    }\n\n\n    stop() {\n        this.stopped = true;\n    };\n\n\n    async get_variables_map(query_text) {\n        let variable_map = new Object();\n        parse_basic_variables(query_text, this.variable_prefix, variable_map);\n        parse_array_variables(query_text, this.variable_prefix, variable_map);\n        if (this.column_names !== null) {\n            if (this.table.length && this.column_names.length != this.table[0].length)\n                throw new RbqlIOHandlingError('List of column names and table records have different lengths');\n            if (this.normalize_column_names) {\n                parse_dictionary_variables(query_text, this.variable_prefix, this.column_names, variable_map);\n                parse_attribute_variables(query_text, this.variable_prefix, this.column_names, 'column names list', variable_map);\n            } else {\n                map_variables_directly(query_text, this.column_names, variable_map);\n            }\n        }\n        return variable_map;\n    };\n\n\n    async get_record() {\n        if (this.stopped)\n            return null;\n        if (this.nr >= this.table.length)\n            return null;\n        let record = this.table[this.nr];\n        this.nr += 1;\n        let num_fields = record.length;\n        if (!this.fields_info.has(num_fields))\n            this.fields_info.set(num_fields, this.nr);\n        return record;\n    };\n\n    get_warnings() {\n        if (this.fields_info.size > 1)\n            return [make_inconsistent_num_fields_warning('input', this.fields_info)];\n        return [];\n    };\n\n    async get_header() {\n        return this.column_names;\n    }\n}\n\n\nclass TableWriter extends RBQLOutputWriter {\n    constructor(external_table) {\n        super();\n        this.table = external_table;\n        this.header = null;\n    }\n\n    async write(fields) {\n        this.table.push(fields);\n        return true;\n    };\n\n    set_header(header) {\n        this.header = header;\n    }\n}\n\n\nclass SingleTableRegistry extends RBQLTableRegistry {\n    constructor(table, column_names=null, normalize_column_names=true, table_id='b') {\n        super();\n        this.table = table;\n        this.table_id = table_id;\n        this.column_names = column_names;\n        this.normalize_column_names = normalize_column_names;\n    }\n\n    get_iterator_by_table_id(table_id) {\n        if (table_id.toLowerCase() !== this.table_id)\n            throw new RbqlIOHandlingError(`Unable to find join table: \"${table_id}\"`);\n        return new TableIterator(this.table, this.column_names, this.normalize_column_names, 'b');\n    };\n}\n\n\nasync function shallow_parse_input_query(query_text, input_iterator, join_tables_registry, query_context) {\n    query_text = cleanup_query(query_text);\n    var [format_expression, string_literals] = separate_string_literals(query_text);\n    format_expression = remove_redundant_table_name(format_expression);\n\n    var rb_actions = separate_actions(format_expression);\n    if (rb_actions.hasOwnProperty(WITH)) {\n        input_iterator.handle_query_modifier(rb_actions[WITH]);\n    }\n    var input_variables_map = await input_iterator.get_variables_map(query_text);\n\n    if (rb_actions.hasOwnProperty(ORDER_BY) && rb_actions.hasOwnProperty(UPDATE))\n        throw new RbqlParsingError('\"ORDER BY\" is not allowed in \"UPDATE\" queries');\n\n    if (rb_actions.hasOwnProperty(GROUP_BY)) {\n        if (rb_actions.hasOwnProperty(ORDER_BY) || rb_actions.hasOwnProperty(UPDATE))\n            throw new RbqlParsingError('\"ORDER BY\", \"UPDATE\" and \"DISTINCT\" keywords are not allowed in aggregate queries');\n        query_context.aggregation_key_expression = '[' + combine_string_literals(rb_actions[GROUP_BY]['text'], string_literals) + ']';\n        query_context.aggregation_stage = 1;\n    }\n\n\n    let input_header = await input_iterator.get_header();\n    let join_variables_map = null;\n    let join_header = null;\n    if (rb_actions.hasOwnProperty(JOIN)) {\n        var [rhs_table_id, variable_pairs] = parse_join_expression(rb_actions[JOIN]['text']);\n        if (join_tables_registry === null)\n            throw new RbqlParsingError('JOIN operations are not supported by the application');\n        let join_record_iterator = join_tables_registry.get_iterator_by_table_id(rhs_table_id);\n        if (!join_record_iterator)\n            throw new RbqlParsingError(`Unable to find join table: \"${rhs_table_id}\"`);\n        if (rb_actions.hasOwnProperty(WITH)) {\n            join_record_iterator.handle_query_modifier(rb_actions[WITH]);\n        }\n        join_variables_map = await join_record_iterator.get_variables_map(query_text);\n        join_header = await join_record_iterator.get_header();\n        if (input_header === null && join_header !== null) {\n            throw new RbqlIOHandlingError('Inconsistent modes: Input table doesn\\'t have a header while the Join table has a header');\n        }\n        if (input_header !== null && join_header === null) {\n            throw new RbqlIOHandlingError('Inconsistent modes: Input table has a header while the Join table doesn\\'t have a header');\n        }\n        let [lhs_variables, rhs_indices] = resolve_join_variables(input_variables_map, join_variables_map, variable_pairs, string_literals);\n        let sql_join_type = {'JOIN': InnerJoiner, 'INNER JOIN': InnerJoiner, 'LEFT JOIN': LeftJoiner, 'LEFT OUTER JOIN': LeftJoiner, 'STRICT LEFT JOIN': StrictLeftJoiner}[rb_actions[JOIN]['join_subtype']];\n        query_context.lhs_join_var_expression = lhs_variables.length == 1 ? lhs_variables[0] : 'JSON.stringify([' + lhs_variables.join(',') + '])';\n        query_context.join_map_impl = new HashJoinMap(join_record_iterator, rhs_indices);\n        await query_context.join_map_impl.build();\n        query_context.join_map = new sql_join_type(query_context.join_map_impl);\n    }\n\n    query_context.variables_init_code = combine_string_literals(generate_init_statements(format_expression, input_variables_map, join_variables_map, ' '.repeat(4)), string_literals);\n\n    if (rb_actions.hasOwnProperty(WHERE)) {\n        var where_expression = rb_actions[WHERE]['text'];\n        if (/[^><!=]=[^=]/.exec(where_expression))\n            throw new RbqlParsingError('Assignments \"=\" are not allowed in \"WHERE\" expressions. For equality test use \"==\" or \"===\"');\n        query_context.where_expression = combine_string_literals(where_expression, string_literals);\n    }\n\n    if (rb_actions.hasOwnProperty(UPDATE)) {\n        var update_expression = translate_update_expression(rb_actions[UPDATE]['text'], input_variables_map, string_literals, ' '.repeat(8));\n        query_context.update_expressions = combine_string_literals(update_expression, string_literals);\n        query_context.writer.set_header(input_header);\n    }\n\n    if (rb_actions.hasOwnProperty(SELECT)) {\n        query_context.top_count = find_top(rb_actions);\n        if (rb_actions.hasOwnProperty(EXCEPT)) {\n            if (rb_actions.hasOwnProperty(JOIN)) {\n                throw new RbqlParsingError('EXCEPT and JOIN are not allowed in the same query');\n            }\n            let [output_header, select_expression] = translate_except_expression(rb_actions[EXCEPT]['text'], input_variables_map, string_literals, input_header);\n            query_context.select_expression = select_expression;\n            query_context.writer.set_header(output_header);\n        } else {\n            let [select_expression, select_expression_for_header] = translate_select_expression(rb_actions[SELECT]['text']);\n            query_context.select_expression = combine_string_literals(select_expression, string_literals);\n            let column_infos = adhoc_parse_select_expression_to_column_infos(select_expression_for_header, string_literals);\n            let output_header = select_output_header(input_header, join_header, column_infos);\n            query_context.writer.set_header(output_header);\n        }\n\n        query_context.writer = new TopWriter(query_context.writer, query_context.top_count);\n        if (rb_actions[SELECT].hasOwnProperty('distinct_count')) {\n            query_context.writer = new UniqCountWriter(query_context.writer);\n        } else if (rb_actions[SELECT].hasOwnProperty('distinct')) {\n            query_context.writer = new UniqWriter(query_context.writer);\n        }\n    }\n\n    if (rb_actions.hasOwnProperty(ORDER_BY)) {\n        query_context.sort_key_expression = combine_string_literals(rb_actions[ORDER_BY]['text'], string_literals);\n        let reverse_sort = rb_actions[ORDER_BY]['reverse'];\n        query_context.writer = new SortedWriter(query_context.writer, reverse_sort);\n    }\n}\n\n\nasync function query(query_text, input_iterator, output_writer, output_warnings, join_tables_registry=null, user_init_code='') {\n    query_context = new RBQLContext(query_text, input_iterator, output_writer, user_init_code);\n    await shallow_parse_input_query(query_text, input_iterator, join_tables_registry, query_context);\n    await compile_and_run(query_context);\n    await query_context.writer.finish();\n    output_warnings.push(...input_iterator.get_warnings());\n    if (query_context.join_map_impl)\n        output_warnings.push(...query_context.join_map_impl.get_warnings());\n    output_warnings.push(...output_writer.get_warnings());\n}\n\n\nasync function query_table(query_text, input_table, output_table, output_warnings, join_table=null, input_column_names=null, join_column_names=null, output_column_names=null, normalize_column_names=true, user_init_code='') {\n    if (!normalize_column_names && input_column_names !== null && join_column_names !== null)\n        ensure_no_ambiguous_variables(query_text, input_column_names, join_column_names);\n    let input_iterator = new TableIterator(input_table, input_column_names, normalize_column_names);\n    let output_writer = new TableWriter(output_table);\n    let join_tables_registry = join_table === null ? null : new SingleTableRegistry(join_table, join_column_names, normalize_column_names);\n    await query(query_text, input_iterator, output_writer, output_warnings, join_tables_registry, user_init_code);\n    if (output_column_names !== null) {\n        assert(output_column_names.length == 0, '`output_column_names` param must be an empty list or null');\n        if (output_writer.header !== null) {\n            for (let column_name of output_writer.header) {\n                output_column_names.push(column_name);\n            }\n        }\n    }\n}\n\n\nfunction exception_to_error_info(e) {\n    let exceptions_type_map = {\n        'RbqlRuntimeError': 'query execution',\n        'RbqlParsingError': 'query parsing',\n        'SyntaxError': 'JS syntax error',\n        'RbqlIOHandlingError': 'IO handling'\n    };\n    let error_type = 'unexpected';\n    if (e.constructor && e.constructor.name && exceptions_type_map.hasOwnProperty(e.constructor.name)) {\n        error_type = exceptions_type_map[e.constructor.name];\n    }\n    let error_msg = e.hasOwnProperty('message') ? e.message : String(e);\n    return [error_type, error_msg];\n}\n\n\nexports.query = query;\nexports.query_table = query_table;\nexports.RBQLInputIterator = RBQLInputIterator;\nexports.RBQLOutputWriter = RBQLOutputWriter;\nexports.RBQLTableRegistry = RBQLTableRegistry;\n\nexports.version = RBQL_VERSION;\nexports.TableIterator = TableIterator;\nexports.TableWriter = TableWriter;\nexports.SingleTableRegistry = SingleTableRegistry;\nexports.exception_to_error_info = exception_to_error_info;\n\n\n// The functions below are exported just for unit tests, they are not part of the rbql API\n// TODO exports through the special unit_test proxy e.g. exports.unit_test.parse_basic_variables = parse_basic_variables;\nexports.parse_basic_variables = parse_basic_variables;\nexports.parse_array_variables = parse_array_variables;\nexports.parse_dictionary_variables = parse_dictionary_variables;\nexports.parse_attribute_variables = parse_attribute_variables;\nexports.get_all_matches = get_all_matches;\nexports.strip_comments = strip_comments;\nexports.separate_actions = separate_actions;\nexports.separate_string_literals = separate_string_literals;\nexports.combine_string_literals = combine_string_literals;\nexports.parse_join_expression = parse_join_expression;\nexports.resolve_join_variables = resolve_join_variables;\nexports.translate_update_expression = translate_update_expression;\nexports.translate_select_expression = translate_select_expression;\nexports.translate_except_expression = translate_except_expression;\nexports.like_to_regex = like_to_regex;\nexports.adhoc_parse_select_expression_to_column_infos = adhoc_parse_select_expression_to_column_infos;\nexports.replace_star_count = replace_star_count;\nexports.replace_star_vars_for_header_parsing = replace_star_vars_for_header_parsing;\nexports.select_output_header = select_output_header;\nexports.sample_first_two_inconsistent_records = sample_first_two_inconsistent_records;\n\n}(typeof exports === 'undefined' ? this.rbql = {} : exports));\n","const fs = require('fs');\nconst os = require('os');\nconst path = require('path');\nconst util = require('util');\n\nconst rbql = require('./rbql.js');\nconst csv_utils = require('./csv_utils.js');\n\n\nconst utf_decoding_error = 'Unable to decode input table as UTF-8. Use binary (latin-1) encoding instead';\n\n\nclass RbqlIOHandlingError extends Error {}\nclass AssertionError extends Error {}\n\n\n// TODO performance improvement: replace smart_split() with polymorphic_split()\n\n\nfunction assert(condition, message=null) {\n    if (!condition) {\n        if (!message) {\n            message = 'Assertion error';\n        }\n        throw new AssertionError(message);\n    }\n}\n\n\nfunction interpret_named_csv_format(format_name) {\n    format_name = format_name.toLowerCase();\n    if (format_name == 'monocolumn')\n        return ['', 'monocolumn'];\n    if (format_name == 'csv')\n        return [',', 'quoted'];\n    if (format_name == 'tsv')\n        return ['\\t', 'simple'];\n    throw new RbqlIOHandlingError(`Unknown format name: \"${format_name}\"`);\n}\n\n\n\nfunction is_ascii(str) {\n    return /^[\\x00-\\x7F]*$/.test(str);\n}\n\n\nfunction read_user_init_code(rbql_init_source_path) {\n    return fs.readFileSync(rbql_init_source_path, 'utf-8');\n}\n\n\nfunction remove_utf8_bom(line, assumed_source_encoding) {\n    if (assumed_source_encoding == 'binary' && line.length >= 3 && line.charCodeAt(0) === 0xEF && line.charCodeAt(1) === 0xBB && line.charCodeAt(2) === 0xBF) {\n        return line.substring(3);\n    }\n    if (assumed_source_encoding == 'utf-8' && line.length >= 1 && line.charCodeAt(0) === 0xFEFF) {\n        return line.substring(1);\n    }\n    return line;\n}\n\n\nfunction make_inconsistent_num_fields_warning(table_name, inconsistent_records_info) {\n    let [record_num_1, num_fields_1, record_num_2, num_fields_2] = rbql.sample_first_two_inconsistent_records(inconsistent_records_info);\n    let warn_msg = `Number of fields in \"${table_name}\" table is not consistent: `;\n    warn_msg += `e.g. record ${record_num_1} -> ${num_fields_1} fields, record ${record_num_2} -> ${num_fields_2} fields`;\n    return warn_msg;\n}\n\n\nfunction expanduser(filepath) {\n    if (filepath.charAt(0) === '~') {\n        return path.join(os.homedir(), filepath.slice(1));\n    }\n    return filepath;\n}\n\n\nfunction try_read_index(index_path) {\n    var content = null;\n    try {\n        content = fs.readFileSync(index_path, 'utf-8');\n    } catch (e) {\n        return [];\n    }\n    var lines = content.split('\\n');\n    var records = [];\n    for (var i = 0; i < lines.length; i++) {\n        if (!lines[i])\n            continue;\n        var record = lines[i].split('\\t');\n        records.push(record);\n    }\n    return records;\n}\n\n\nfunction get_index_record(index_path, key) {\n    var records = try_read_index(index_path);\n    for (var i = 0; i < records.length; i++) {\n        if (records[i].length && records[i][0] == key) {\n            return records[i];\n        }\n    }\n    return null;\n}\n\n\nfunction find_table_path(main_table_dir, table_id) {\n    // If table_id is a relative path it could be relative either to the current directory or to the main table dir.\n    var candidate_path = expanduser(table_id);\n    if (fs.existsSync(candidate_path)) {\n        return candidate_path;\n    }\n    if (main_table_dir && !path.isAbsolute(candidate_path)) {\n        candidate_path = path.join(main_table_dir, candidate_path);\n        if (fs.existsSync(candidate_path)) {\n            return candidate_path;\n        }\n    }\n    let table_names_settings_path = path.join(os.homedir(), '.rbql_table_names');\n    var name_record = get_index_record(table_names_settings_path, table_id);\n    if (name_record && name_record.length > 1 && fs.existsSync(name_record[1])) {\n        return name_record[1];\n    }\n    return null;\n}\n\n\nclass RecordQueue {\n    // TODO compare performance with a linked list\n    constructor() {\n        this.push_stack = [];\n        this.pull_stack = [];\n    }\n\n    enqueue(record) {\n        this.push_stack.push(record);\n    }\n\n    dequeue() {\n        if (!this.pull_stack.length) {\n            if (!this.push_stack.length)\n                return null;\n            this.pull_stack = this.push_stack;\n            this.pull_stack.reverse();\n            this.push_stack = [];\n        }\n        return this.pull_stack.pop();\n    }\n}\n\n\nclass CSVRecordIterator extends rbql.RBQLInputIterator {\n    // CSVRecordIterator implements a typical async producer-consumer model with an internal buffer:\n    // get_record() - consumer\n    // stream.on('data') - producer\n    constructor(stream, csv_path, encoding, delim, policy, has_header=false, comment_prefix=null, table_name='input', variable_prefix='a') {\n        super();\n        this.stream = stream;\n        this.csv_path = csv_path;\n        assert((this.stream === null) != (this.csv_path === null));\n        this.encoding = encoding;\n        this.delim = delim;\n        this.policy = policy;\n\n        this.has_header = has_header;\n        this.first_record = null;\n        this.first_record_should_be_emitted = !has_header;\n        this.header_preread_complete = false;\n\n        this.table_name = table_name;\n        this.variable_prefix = variable_prefix;\n        this.comment_prefix = comment_prefix;\n\n        this.decoder = null;\n        if (encoding == 'utf-8' && this.csv_path === null) {\n            // Unfortunately util.TextDecoder has serious flaws:\n            // 1. It doesn't work in Node without ICU: https://nodejs.org/api/util.html#util_new_textdecoder_encoding_options\n            // 2. It is broken in Electron: https://github.com/electron/electron/issues/18733\n\n            // Technically we can implement our own custom streaming text decoder, using the 3 following technologies:\n            // 1. decode-encode validation method from https://stackoverflow.com/a/32279283/2898283\n            // 2. Scanning buffer chunks for non-continuation utf-8 bytes from the end of the buffer:\n            //    src_buffer -> (buffer_before, buffer_after) where buffer_after is very small(a couple of bytes) and buffer_before is large and ends with a non-continuation bytes\n            // 3. Internal buffer to store small tail part from the previous buffer\n            this.decoder = new util.TextDecoder(encoding, {fatal: true, stream: true});\n        }\n\n        this.input_exhausted = false;\n        this.started = false;\n\n        this.utf8_bom_removed = false; // BOM doesn't get automatically removed by the decoder when utf-8 file is treated as latin-1\n        this.first_defective_line = null;\n\n        this.fields_info = new Map();\n        this.NR = 0; // Record number\n        this.NL = 0; // Line number (NL != NR when the CSV file has comments or multiline fields)\n\n        this.line_aggregator = new csv_utils.MultilineRecordAggregator(comment_prefix);\n\n        this.partially_decoded_line = '';\n        this.partially_decoded_line_ends_with_cr = false;\n\n        // Holds an external \"resolve\" function which is called when everything is fine.\n        this.resolve_current_record = null;\n        // Holds an external \"reject\" function which is called when error has occured.\n        this.reject_current_record = null;\n        // Holds last exception if we don't have any reject callbacks from clients yet.\n        this.current_exception = null;\n\n        this.produced_records_queue = new RecordQueue();\n\n        this.process_line_polymorphic = policy == 'quoted_rfc' ? this.process_partial_rfc_record_line : this.process_record_line_simple;\n    }\n\n\n    handle_query_modifier(modifier) {\n        // For `... WITH (header) ...` syntax\n        if (['header', 'headers'].indexOf(modifier) != -1) {\n            this.has_header = true;\n            this.first_record_should_be_emitted = false;\n        }\n        if (['noheader', 'noheaders'].indexOf(modifier) != -1) {\n            this.has_header = false;\n            this.first_record_should_be_emitted = true;\n        }\n    }\n\n\n    reset_external_callbacks() {\n        // Drop external callbacks simultaneously since promises can only resolve once, see: https://stackoverflow.com/a/18218542/2898283\n        this.reject_current_record = null;\n        this.resolve_current_record = null;\n    }\n\n    try_propagate_exception() {\n        if (this.current_exception && this.reject_current_record) {\n            let reject = this.reject_current_record;\n            let exception = this.current_exception;\n            this.reset_external_callbacks();\n            this.current_exception = null;\n            reject(exception);\n        }\n    }\n\n\n    store_or_propagate_exception(exception) {\n        if (this.current_exception === null)\n            // Ignore subsequent exceptions if we already have an unreported error. This way we prioritize earlier errors over the more recent ones.\n            this.current_exception = exception;\n        this.try_propagate_exception();\n    }\n\n\n    async preread_first_record() {\n        if (this.header_preread_complete)\n            return;\n        this.first_record = await this.get_record();\n        this.header_preread_complete = true; // We must set header_preread_complete to true after calling get_record(), because get_record() uses it internally.\n        if (this.first_record === null) {\n            return;\n        }\n        if (this.stream)\n            this.stream.pause();\n        this.first_record = this.first_record.slice();\n    };\n\n\n    async get_variables_map(query_text) {\n        let variable_map = new Object();\n        rbql.parse_basic_variables(query_text, this.variable_prefix, variable_map);\n        rbql.parse_array_variables(query_text, this.variable_prefix, variable_map);\n\n        await this.preread_first_record();\n        if (this.has_header && this.first_record) {\n            rbql.parse_attribute_variables(query_text, this.variable_prefix, this.first_record, 'CSV header line', variable_map);\n            rbql.parse_dictionary_variables(query_text, this.variable_prefix, this.first_record, variable_map);\n        }\n        return variable_map;\n    };\n\n    async get_header() {\n        await this.preread_first_record();\n        return this.has_header ? this.first_record : null;\n    }\n\n\n    try_resolve_next_record() {\n        this.try_propagate_exception();\n        if (this.resolve_current_record === null)\n            return;\n\n        let record = null;\n        if (this.first_record_should_be_emitted && this.header_preread_complete) {\n            this.first_record_should_be_emitted = false;\n            record = this.first_record;\n        } else {\n            record = this.produced_records_queue.dequeue();\n        }\n\n        if (record === null && !this.input_exhausted)\n            return;\n        let resolve = this.resolve_current_record;\n        this.reset_external_callbacks();\n        resolve(record);\n    };\n\n\n    async get_record() {\n        if (!this.started)\n            await this.start();\n        if (this.stream && this.stream.isPaused())\n            this.stream.resume();\n\n        let parent_iterator = this;\n        let current_record_promise = new Promise(function(resolve, reject) {\n            parent_iterator.resolve_current_record = resolve;\n            parent_iterator.reject_current_record = reject;\n        });\n        this.try_resolve_next_record();\n        return current_record_promise;\n    };\n\n\n    async get_all_records(num_records=null) {\n        let records = [];\n        while (true) {\n            let record = await this.get_record();\n            if (record === null)\n                break;\n            records.push(record);\n            if (num_records && records.length >= num_records) {\n                this.stop();\n                break;\n            }\n        }\n        return records;\n    };\n\n\n    process_record_line_simple(line) {\n        if (this.comment_prefix && line.startsWith(this.comment_prefix))\n            return; // Just skip the line\n        this.process_record_line(line);\n    }\n\n\n    process_record_line(line) {\n        this.NR += 1;\n        var [record, warning] = csv_utils.smart_split(line, this.delim, this.policy, false);\n        if (warning) {\n            if (this.first_defective_line === null) {\n                this.first_defective_line = this.NL;\n                if (this.policy == 'quoted_rfc')\n                    this.store_or_propagate_exception(new RbqlIOHandlingError(`Inconsistent double quote escaping in ${this.table_name} table at record ${this.NR}, line ${this.NL}`));\n            }\n        }\n        let num_fields = record.length;\n        if (!this.fields_info.has(num_fields))\n            this.fields_info.set(num_fields, this.NR);\n        this.produced_records_queue.enqueue(record);\n        this.try_resolve_next_record();\n    };\n\n\n    process_partial_rfc_record_line(line) {\n        this.line_aggregator.add_line(line);\n        if (this.line_aggregator.has_comment_line) {\n            this.line_aggregator.reset();\n        } else if (this.line_aggregator.has_full_record) {\n            this.process_record_line(this.line_aggregator.get_full_line('\\n'));\n            this.line_aggregator.reset();\n        }\n    };\n\n\n    process_line(line) {\n        this.NL += 1;\n        if (this.NL === 1) {\n            var clean_line = remove_utf8_bom(line, this.encoding);\n            if (clean_line != line) {\n                line = clean_line;\n                this.utf8_bom_removed = true;\n            }\n        }\n        this.process_line_polymorphic(line);\n    };\n\n\n    process_data_stream_chunk(data_chunk) {\n        let decoded_string = null;\n        if (this.decoder) {\n            try {\n                decoded_string = this.decoder.decode(data_chunk);\n            } catch (e) {\n                if (e instanceof TypeError) {\n                    this.store_or_propagate_exception(new RbqlIOHandlingError(utf_decoding_error));\n                } else {\n                    this.store_or_propagate_exception(e);\n                }\n                return;\n            }\n        } else {\n            decoded_string = data_chunk.toString(this.encoding);\n        }\n        let line_starts_with_lf = decoded_string.length && decoded_string[0] == '\\n';\n        let first_line_index = line_starts_with_lf && this.partially_decoded_line_ends_with_cr ? 1 : 0;\n        this.partially_decoded_line_ends_with_cr = decoded_string.length && decoded_string[decoded_string.length - 1] == '\\r';\n        let lines = csv_utils.split_lines(decoded_string);\n        lines[0] = this.partially_decoded_line + lines[0];\n        assert(first_line_index == 0 || lines[0].length == 0);\n        this.partially_decoded_line = lines.pop();\n        for (let i = first_line_index; i < lines.length; i++) {\n            this.process_line(lines[i]);\n        }\n    };\n\n\n    process_data_bulk(data_blob) {\n        let decoded_string = data_blob.toString(this.encoding);\n        if (this.encoding == 'utf-8') {\n            // Using hacky comparison method from here: https://stackoverflow.com/a/32279283/2898283\n            // TODO get rid of this once TextDecoder is really fixed or when alternative method of reliable decoding appears\n            let control_buffer = Buffer.from(decoded_string, 'utf-8');\n            if (Buffer.compare(data_blob, control_buffer) != 0) {\n                this.store_or_propagate_exception(new RbqlIOHandlingError(utf_decoding_error));\n                return;\n            }\n        }\n        let lines = csv_utils.split_lines(decoded_string);\n        if (lines.length && lines[lines.length - 1].length == 0)\n            lines.pop();\n        for (let i = 0; i < lines.length; i++) {\n            this.process_line(lines[i]);\n        }\n        if (this.line_aggregator.is_inside_multiline_record()) {\n            this.process_record_line(this.line_aggregator.get_full_line('\\n'));\n        }\n        this.input_exhausted = true;\n        this.try_resolve_next_record(); // Should be a NOOP here?\n    }\n\n\n    process_data_stream_end() {\n        this.input_exhausted = true;\n        if (this.partially_decoded_line.length) {\n            let last_line = this.partially_decoded_line;\n            this.partially_decoded_line = '';\n            this.process_line(last_line);\n        }\n        if (this.line_aggregator.is_inside_multiline_record()) {\n            this.process_record_line(this.line_aggregator.get_full_line('\\n'));\n        }\n        this.try_resolve_next_record();\n    };\n\n\n    stop() {\n        if (this.stream)\n            this.stream.destroy(); // TODO consider using pause() instead\n    };\n\n\n    async start() {\n        if (this.started)\n            return;\n        this.started = true;\n        if (this.stream) {\n            this.stream.on('data', (data_chunk) => { this.process_data_stream_chunk(data_chunk); });\n            this.stream.on('end', () => { this.process_data_stream_end(); });\n        } else {\n            let parent_iterator = this;\n            return new Promise(function(resolve, reject) {\n                fs.readFile(parent_iterator.csv_path, (err, data_blob) => {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        parent_iterator.process_data_bulk(data_blob);\n                        resolve();\n                    }\n                });\n            });\n        }\n    };\n\n\n    get_warnings() {\n        let result = [];\n        if (this.first_defective_line !== null)\n            result.push(`Inconsistent double quote escaping in ${this.table_name} table. E.g. at line ${this.first_defective_line}`);\n        if (this.utf8_bom_removed)\n            result.push(`UTF-8 Byte Order Mark (BOM) was found and skipped in ${this.table_name} table`);\n        if (this.fields_info.size > 1)\n            result.push(make_inconsistent_num_fields_warning(this.table_name, this.fields_info));\n        return result;\n    };\n}\n\n\nclass CSVWriter extends rbql.RBQLOutputWriter {\n    constructor(stream, close_stream_on_finish, encoding, delim, policy, line_separator='\\n') {\n        super();\n        this.stream = stream;\n        this.encoding = encoding;\n        if (encoding)\n            this.stream.setDefaultEncoding(encoding);\n        this.stream.on('error', (error_obj) => { this.store_first_error(error_obj); })\n        this.delim = delim;\n        this.policy = policy;\n        this.line_separator = line_separator;\n        this.sub_array_delim = delim == '|' ? ';' : '|';\n\n        this.close_stream_on_finish = close_stream_on_finish;\n\n        this.null_in_output = false;\n        this.delim_in_simple_output = false;\n        this.header_len = null;\n        this.first_error = null;\n\n        if (policy == 'simple') {\n            this.polymorphic_join = this.simple_join;\n        } else if (policy == 'quoted') {\n            this.polymorphic_join = this.quoted_join;\n        } else if (policy == 'quoted_rfc') {\n            this.polymorphic_join = this.quoted_join_rfc;\n        } else if (policy == 'monocolumn') {\n            this.polymorphic_join = this.mono_join;\n        } else if (policy == 'whitespace') {\n            this.polymorphic_join = this.simple_join;\n        } else {\n            throw new RbqlIOHandlingError('Unknown output csv policy');\n        }\n    }\n\n\n    store_first_error(error_obj) {\n        // Store only first error because it is typically more important than the subsequent ones.\n        if (this.first_error === null)\n            this.first_error = error_obj;\n    }\n\n    set_header(header) {\n        if (header !== null) {\n            this.header_len = header.length;\n            this.write(header);\n        }\n    }\n\n\n    quoted_join(fields) {\n        let delim = this.delim;\n        var quoted_fields = fields.map(function(v) { return csv_utils.quote_field(String(v), delim); });\n        return quoted_fields.join(this.delim);\n    };\n\n\n    quoted_join_rfc(fields) {\n        let delim = this.delim;\n        var quoted_fields = fields.map(function(v) { return csv_utils.rfc_quote_field(String(v), delim); });\n        return quoted_fields.join(this.delim);\n    };\n\n\n    mono_join(fields) {\n        if (fields.length > 1) {\n            throw new RbqlIOHandlingError('Unable to use \"Monocolumn\" output format: some records have more than one field');\n        }\n        return fields[0];\n    };\n\n\n    simple_join(fields) {\n        var res = fields.join(this.delim);\n        if (fields.join('').indexOf(this.delim) != -1) {\n            this.delim_in_simple_output = true;\n        }\n        return res;\n    };\n\n\n    normalize_fields(out_fields) {\n        for (var i = 0; i < out_fields.length; i++) {\n            if (out_fields[i] == null) {\n                this.null_in_output = true;\n                out_fields[i] = '';\n            } else if (Array.isArray(out_fields[i])) {\n                this.normalize_fields(out_fields[i]);\n                out_fields[i] = out_fields[i].join(this.sub_array_delim);\n            }\n        }\n    };\n\n\n    async write(fields) {\n        if (this.header_len !== null && fields.length != this.header_len)\n            throw new RbqlIOHandlingError(`Inconsistent number of columns in output header and the current record: ${this.header_len} != ${fields.length}`);\n        this.normalize_fields(fields);\n        this.stream.write(this.polymorphic_join(fields));\n        this.stream.write(this.line_separator);\n        let writer_error = this.first_error;\n        return new Promise(function(resolve, reject) {\n            if (writer_error !== null) {\n                reject(writer_error);\n            } else {\n                resolve(true);\n            }\n        });\n    };\n\n\n    _write_all(table) {\n        for (let i = 0; i < table.length; i++) {\n            this.write(table[i]);\n        }\n    };\n\n\n    async finish() {\n        let close_stream_on_finish = this.close_stream_on_finish;\n        let output_stream = this.stream;\n        let output_encoding = this.encoding;\n        let writer_error = this.first_error;\n        let finish_promise = new Promise(function(resolve, reject) {\n            if (writer_error !== null) {\n                reject(writer_error);\n            }\n            if (close_stream_on_finish) {\n                output_stream.end('', output_encoding, () => { resolve(); });\n            } else {\n                setTimeout(() => { resolve(); }, 0);\n            }\n        });\n        return finish_promise;\n    };\n\n\n    get_warnings() {\n        let result = [];\n        if (this.null_in_output)\n            result.push('null values in output were replaced by empty strings');\n        if (this.delim_in_simple_output)\n            result.push('Some output fields contain separator');\n        return result;\n    };\n\n}\n\n\nclass FileSystemCSVRegistry extends rbql.RBQLTableRegistry {\n    constructor(input_file_dir, delim, policy, encoding, has_header=false, comment_prefix=null, options=null) {\n        super();\n        this.input_file_dir = input_file_dir;\n        this.delim = delim;\n        this.policy = policy;\n        this.encoding = encoding;\n        this.has_header = has_header;\n        this.comment_prefix = comment_prefix;\n        this.stream = null;\n        this.record_iterator = null;\n\n        this.options = options;\n        this.bulk_input_path = null;\n        this.table_path = null;\n    }\n\n    get_iterator_by_table_id(table_id) {\n        this.table_path = find_table_path(this.input_file_dir, table_id);\n        if (this.table_path === null) {\n            throw new RbqlIOHandlingError(`Unable to find join table \"${table_id}\"`);\n        }\n        if (this.options && this.options['bulk_read']) {\n            this.bulk_input_path = this.table_path;\n        } else {\n            this.stream = fs.createReadStream(this.table_path);\n        }\n        this.record_iterator = new CSVRecordIterator(this.stream, this.bulk_input_path, this.encoding, this.delim, this.policy, this.has_header, this.comment_prefix, table_id, 'b');\n        return this.record_iterator;\n    };\n\n    get_warnings(output_warnings) {\n        if (this.record_iterator && this.has_header) {\n            output_warnings.push(`The first record in JOIN file ${path.basename(this.table_path)} was also treated as header (and skipped)`);\n        }\n    }\n}\n\n\nasync function query_csv(query_text, input_path, input_delim, input_policy, output_path, output_delim, output_policy, csv_encoding, output_warnings, with_headers=false, comment_prefix=null, user_init_code='', options=null) {\n    let input_stream = null;\n    let bulk_input_path = null;\n    if (options && options['bulk_read'] && input_path) {\n        bulk_input_path = input_path;\n    } else {\n        input_stream = input_path === null ? process.stdin : fs.createReadStream(input_path);\n    }\n    let [output_stream, close_output_on_finish] = output_path === null ? [process.stdout, false] : [fs.createWriteStream(output_path), true];\n    if (input_delim == '\"' && input_policy == 'quoted')\n        throw new RbqlIOHandlingError('Double quote delimiter is incompatible with \"quoted\" policy');\n    if (csv_encoding == 'latin-1')\n        csv_encoding = 'binary';\n    if (!is_ascii(query_text) && csv_encoding == 'binary')\n        throw new RbqlIOHandlingError('To use non-ascii characters in query enable UTF-8 encoding instead of latin-1/binary');\n    if ((!is_ascii(input_delim) || !is_ascii(output_delim)) && csv_encoding == 'binary')\n        throw new RbqlIOHandlingError('To use non-ascii characters in query enable UTF-8 encoding instead of latin-1/binary');\n\n    let default_init_source_path = path.join(os.homedir(), '.rbql_init_source.js');\n    if (user_init_code == '' && fs.existsSync(default_init_source_path)) {\n        user_init_code = read_user_init_code(default_init_source_path);\n    }\n    let input_file_dir = input_path ? path.dirname(input_path) : null;\n    let join_tables_registry = new FileSystemCSVRegistry(input_file_dir, input_delim, input_policy, csv_encoding, with_headers, comment_prefix, options);\n    let input_iterator = new CSVRecordIterator(input_stream, bulk_input_path, csv_encoding, input_delim, input_policy, with_headers, comment_prefix);\n    let output_writer = new CSVWriter(output_stream, close_output_on_finish, csv_encoding, output_delim, output_policy);\n\n    await rbql.query(query_text, input_iterator, output_writer, output_warnings, join_tables_registry, user_init_code);\n    join_tables_registry.get_warnings(output_warnings);\n}\n\n\nmodule.exports.is_ascii = is_ascii;\nmodule.exports.CSVRecordIterator = CSVRecordIterator;\nmodule.exports.CSVWriter = CSVWriter;\nmodule.exports.FileSystemCSVRegistry = FileSystemCSVRegistry;\nmodule.exports.interpret_named_csv_format = interpret_named_csv_format;\nmodule.exports.read_user_init_code = read_user_init_code;\nmodule.exports.query_csv = query_csv;\nmodule.exports.RecordQueue = RecordQueue;\nmodule.exports.exception_to_error_info = rbql.exception_to_error_info;\n","const assert = require('assert');\nconst rainbow_utils = require('../../rainbow_utils.js');\nconst fast_load_utils = require('../../fast_load_utils.js');\n\n\nclass VscodePositionTestDouble {\n    constructor(line, character) {\n        this.line = line;\n        this.character = character;\n    }\n}\n\nclass VscodeSelectionTestDouble {\n    constructor(anchor, active) {\n        this.anchor = anchor;\n        this.active = active;\n    }\n}\n\nclass VscodeRangeTestDouble {\n    constructor(l1, c1, l2, c2) {\n        this.start = new VscodePositionTestDouble(l1, c1);\n        this.end = new VscodePositionTestDouble(l2, c2);\n    }\n    contains(position) {\n        let after_start = position.line > this.start.line || (position.line === this.start.line && position.character >= this.start.character);\n        let before_end = position.line < this.end.line || (position.line == this.end.line && position.character <= this.end.character);\n        return after_start && before_end;\n    }\n}\n\nclass UriTestDouble {\n    constructor(scheme) {\n        this.scheme = scheme;\n    }\n}\n\nclass VscodeDocumentTestDouble {\n    constructor(lines_buffer, fileName='TestDouble.txt', language_id='plaintext', scheme='file') {\n        this.lines_buffer = lines_buffer;\n        this.lineCount = lines_buffer.length;\n        this.fileName = fileName;\n        this.version = 1;\n        this.languageId = language_id;\n        this.uri = new UriTestDouble(scheme);\n    }\n    lineAt(lnum) {\n        return {text: this.lines_buffer[lnum]};\n    }\n    getText() {\n        return this.lines_buffer.join('\\n');\n    }\n}\n\n\nclass VscodeStatusBarItemTestDouble {\n    constructor() {\n        this.text = null;\n        this.color = null;\n        this.tooltip = null;\n        this.command = null;\n        this.is_visible = false;\n    }\n    show() {\n        this.is_visible = true;\n    }\n}\n\n\nfunction create_status_bar_item_test_double(_alignment) {\n    return new VscodeStatusBarItemTestDouble();\n}\n\n\nfunction set_text_document_language_test_double(target_document, language_id) {\n    target_document.languageId = language_id;\n    return target_document;\n}\n\n\nlet vscode_test_double = {\n    Range: VscodeRangeTestDouble, \n    'window': {'createStatusBarItem': create_status_bar_item_test_double}, \n    StatusBarAlignment: {'Left': null}, \n    languages: {'setTextDocumentLanguage': set_text_document_language_test_double}, \n    Position: VscodePositionTestDouble, \n    Selection: VscodeSelectionTestDouble\n};\n\n\nfunction test_align_stats() {\n    let field = null;\n    let is_first_line = null;\n    let field_components = null;\n\n    // Previous fields are numbers but the current one is not - mark the column as non-numeric.\n    field = 'foobar';\n    is_first_line = 0;\n    field_components = {max_total_length: 5, max_int_length: 2, max_fractional_length: 3, has_wide_chars: false};\n    rainbow_utils.update_subcomponent_stats(field, is_first_line, field_components, /*calc_visual_char_width=*/true);\n    assert.deepEqual(field_components, {max_total_length: 6, max_int_length: -1, max_fractional_length: -1, has_wide_chars: false});\n\n    // The field is non-numeric but it is at the first line so could be a header - do not mark the column as non-numeric just yet.\n    field = 'foobar';\n    is_first_line = 1;\n    field_components = {max_total_length: 0, max_int_length: 0, max_fractional_length: 0};\n    rainbow_utils.update_subcomponent_stats(field, is_first_line, field_components, /*calc_visual_char_width=*/true);\n    assert.deepEqual(field_components, {max_total_length: 6, max_int_length: 0, max_fractional_length: 0, has_wide_chars: false});\n\n    // The field is a number but the column is already marked as non-numeric so we just update the max string width.\n    field = '100000';\n    is_first_line = 0;\n    field_components = {max_total_length: 2, max_int_length: -1, max_fractional_length: -1};\n    rainbow_utils.update_subcomponent_stats(field, is_first_line, field_components, /*calc_visual_char_width=*/true);\n    assert.deepEqual(field_components, {max_total_length: 6, max_int_length: -1, max_fractional_length: -1, has_wide_chars: false});\n\n    // Empty field should not mark a potentially numeric column as non-numeric.\n    field = '';\n    is_first_line = 0;\n    field_components = {max_total_length: 5, max_int_length: 2, max_fractional_length: 3};\n    rainbow_utils.update_subcomponent_stats(field, is_first_line, field_components, /*calc_visual_char_width=*/true);\n    assert.deepEqual(field_components, {max_total_length: 5, max_int_length: 2, max_fractional_length: 3, has_wide_chars: false});\n\n    // The field doesn't change stats because all of 3 components are smaller than the current maximums.\n    field = '100.3';\n    is_first_line = 0;\n    field_components = {max_total_length: 7, max_int_length: 4, max_fractional_length: 3, has_wide_chars: false};\n    rainbow_utils.update_subcomponent_stats(field, is_first_line, field_components, /*calc_visual_char_width=*/true);\n    assert.deepEqual(field_components, {max_total_length: 7, max_int_length: 4, max_fractional_length: 3, has_wide_chars: false});\n\n    // Integer update example.\n    field = '100000';\n    is_first_line = 0;\n    field_components = {max_total_length: 5, max_int_length: 2, max_fractional_length: 3};\n    rainbow_utils.update_subcomponent_stats(field, is_first_line, field_components, /*calc_visual_char_width=*/true);\n    assert.deepEqual(field_components, {max_total_length: 6, max_int_length: 6, max_fractional_length: 3, has_wide_chars: false});\n\n    // Float update example.\n    field = '1000.23';\n    is_first_line = 0;\n    field_components = {max_total_length: 3, max_int_length: 3, max_fractional_length: 0};\n    rainbow_utils.update_subcomponent_stats(field, is_first_line, field_components, /*calc_visual_char_width=*/true);\n    assert.deepEqual(field_components, {max_total_length: 7, max_int_length: 4, max_fractional_length: 3, has_wide_chars: false});\n\n    // Double-width chars and calc_visual_char_width set to \"true\"\n    field = '编号';\n    is_first_line = 0;\n    field_components = {max_total_length: 1, max_int_length: -1, max_fractional_length: -1};\n    rainbow_utils.update_subcomponent_stats(field, is_first_line, field_components, /*calc_visual_char_width=*/true);\n    assert.deepEqual(field_components, {max_total_length: 4, max_int_length: -1, max_fractional_length: -1, has_wide_chars: true});\n\n    // Double-width chars and calc_visual_char_width set to \"true\", has_wide_chars doesn't change i.e. remains 'true' even though field doesn't contain wide chars.\n    field = 'foobar';\n    is_first_line = 0;\n    field_components = {max_total_length: 1, max_int_length: -1, max_fractional_length: -1, has_wide_chars: true};\n    rainbow_utils.update_subcomponent_stats(field, is_first_line, field_components, /*calc_visual_char_width=*/true);\n    assert.deepEqual(field_components, {max_total_length: 6, max_int_length: -1, max_fractional_length: -1, has_wide_chars: true});\n\n    // Double-width chars and calc_visual_char_width set to \"false\"\n    field = '编号';\n    is_first_line = 0;\n    field_components = {max_total_length: 1, max_int_length: -1, max_fractional_length: -1};\n    rainbow_utils.update_subcomponent_stats(field, is_first_line, field_components, /*calc_visual_char_width=*/false);\n    assert.deepEqual(field_components, {max_total_length: 2, max_int_length: -1, max_fractional_length: -1, has_wide_chars: false});\n}\n\n\nfunction test_calc_column_stats() {\n    let [doc_lines, active_doc, delim, policy, comment_prefix] = [null, null, null, null, null];\n    let [column_stats, first_failed_line, records, comments] = [null, null, null, null];\n\n    // A basic rfc test.\n    doc_lines = [\n        '# commment line', \n        '1a,\"1b', \n        '1b,\"\"1b\"\",1b', \n        '1b\",1c',\n        '2a,2bbb,2cc', \n        ''\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted_rfc';\n    [column_stats, first_failed_line, records, comments] = rainbow_utils.calc_column_stats(active_doc, delim, policy, comment_prefix);\n    assert.deepEqual([{record_num: 0, comment_text: '# commment line'}, {record_num: 2, comment_text: ''}], comments);\n    assert.deepEqual(null, first_failed_line);\n    assert.deepEqual([{max_total_length: 2, max_int_length: -1, max_fractional_length: -1, has_wide_chars: false}, {max_total_length: 12, max_int_length: -1, max_fractional_length: -1, has_wide_chars: false}, {max_total_length: 3, max_int_length: -1, max_fractional_length: -1, has_wide_chars: false}], column_stats);\n\n    // Inconsistent num fields.\n    doc_lines = [\n        '1a,1b', \n        '2aa', \n        '3a,3b,3c'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted_rfc';\n    [column_stats, first_failed_line, records, comments] = rainbow_utils.calc_column_stats(active_doc, delim, policy, comment_prefix);\n    assert.deepEqual([], comments);\n    assert.deepEqual(null, first_failed_line);\n    assert.deepEqual([{max_total_length: 3, max_int_length: -1, max_fractional_length: -1, has_wide_chars: false}, {max_total_length: 2, max_int_length: -1, max_fractional_length: -1, has_wide_chars: false}, {max_total_length: 2, max_int_length: -1, max_fractional_length: -1, has_wide_chars: false}], column_stats);\n\n    // Defective line.\n    doc_lines = [\n        '1a,1b', \n        '2a\"a', \n        '3a,3b,3c'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted_rfc';\n    [column_stats, first_failed_line, records, comments] = rainbow_utils.calc_column_stats(active_doc, delim, policy, comment_prefix);\n    assert.deepEqual(2, first_failed_line);\n    assert.deepEqual(null, column_stats);\n    assert.deepEqual(null, records);\n\n    // First line non-numeric.\n    doc_lines = [\n        'type,weight', \n        'car,100', \n        'ship,  20000'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted_rfc';\n    [column_stats, first_failed_line, records, comments] = rainbow_utils.calc_column_stats(active_doc, delim, policy, comment_prefix);\n    assert.deepEqual([], comments);\n    assert.deepEqual(null, first_failed_line);\n    assert.deepEqual([{max_total_length: 4, max_int_length: -1, max_fractional_length: -1, has_wide_chars: false}, {max_total_length: 6, max_int_length: 5, max_fractional_length: 0, has_wide_chars: false}], column_stats);\n\n    // Numbers on different lines.\n    // Currently in this case we don't report second column as numeric, but this is more-or-less an arbitrary decission.\n    doc_lines = [\n        'car,100', \n        'ship,\"20000', \n        '300\"'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted_rfc';\n    [column_stats, first_failed_line, records, comments] = rainbow_utils.calc_column_stats(active_doc, delim, policy, comment_prefix);\n    assert.deepEqual([], comments);\n    assert.deepEqual(null, first_failed_line);\n    assert.deepEqual([{max_total_length: 4, max_int_length: -1, max_fractional_length: -1, has_wide_chars: false}, {max_total_length: 6, max_int_length: -1, max_fractional_length: -1, has_wide_chars: false}], column_stats);\n}\n\n\nfunction test_rfc_field_align() {\n    let [field, is_first_line, column_stats, aligned_field, is_field_segment] = [null, null, null, null, null, null];\n\n    // Align non-field segment in non-numeric non-last column.\n    field = 'foobar';\n    is_first_line = 0;\n    is_field_segment = false;\n    column_stats = [{max_total_length: 5, max_int_length: -1, max_fractional_length: -1}, {max_total_length: 10, max_int_length: -1, max_fractional_length: -1}];\n    column_stats = rainbow_utils.adjust_column_stats(column_stats, /*delim_length=*/1);\n    aligned_field = rainbow_utils.rfc_align_field(field, is_first_line, column_stats[1], is_field_segment, /*is_last_in_line=*/false);\n    assert.deepEqual('foobar     ', aligned_field);\n\n    // Align field segment in non-numeric non-last column.\n    field = 'foobar';\n    is_first_line = 0;\n    is_field_segment = true;\n    column_stats = [{max_total_length: 5, max_int_length: -1, max_fractional_length: -1}, {max_total_length: 10, max_int_length: -1, max_fractional_length: -1}];\n    column_stats = rainbow_utils.adjust_column_stats(column_stats, /*delim_length=*/1);\n    aligned_field = rainbow_utils.rfc_align_field(field, is_first_line, column_stats[1], is_field_segment, /*is_last_in_line=*/false);\n    assert.deepEqual('       foobar     ', aligned_field);\n\n    // Align non-field segment in non-numeric last column.\n    field = 'foobar';\n    is_first_line = 0;\n    is_field_segment = false;\n    column_stats = [{max_total_length: 5, max_int_length: -1, max_fractional_length: -1}, {max_total_length: 10, max_int_length: -1, max_fractional_length: -1}];\n    column_stats = rainbow_utils.adjust_column_stats(column_stats, /*delim_length=*/1);\n    aligned_field = rainbow_utils.rfc_align_field(field, is_first_line, column_stats[1], is_field_segment, /*is_last_in_line=*/true);\n    assert.deepEqual('foobar', aligned_field);\n\n    // Align field segment in non-numeric last column.\n    field = 'foobar';\n    is_first_line = 0;\n    is_field_segment = true;\n    column_stats = [{max_total_length: 5, max_int_length: -1, max_fractional_length: -1}, {max_total_length: 10, max_int_length: -1, max_fractional_length: -1}];\n    column_stats = rainbow_utils.adjust_column_stats(column_stats, /*delim_length=*/1);\n    aligned_field = rainbow_utils.rfc_align_field(field, is_first_line, column_stats[1], is_field_segment, /*is_last_in_line=*/true);\n    assert.deepEqual('       foobar', aligned_field);\n}\n\n\nfunction test_field_align() {\n    let field = null;\n    let is_first_line = null;\n    let max_components_lens = null;\n    let aligned_field = null;\n\n    // Align field in non-numeric non-last column.\n    field = 'foobar';\n    is_first_line = 0;\n    max_components_lens = {max_total_length: 10, max_int_length: -1, max_fractional_length: -1};\n    max_components_lens = rainbow_utils.adjust_column_stats([max_components_lens], /*delim_length=*/1)[0];\n    aligned_field = rainbow_utils.align_field(field, is_first_line, max_components_lens, /*is_last_in_line=*/false);\n    assert.deepEqual('foobar     ', aligned_field);\n\n    // Align field in non-numeric last column.\n    field = 'foobar';\n    is_first_line = 0;\n    max_components_lens = {max_total_length: 10, max_int_length: -1, max_fractional_length: -1};\n    max_components_lens = rainbow_utils.adjust_column_stats([max_components_lens], /*delim_length=*/1)[0];\n    aligned_field = rainbow_utils.align_field(field, is_first_line, max_components_lens, /*is_last_in_line=*/true);\n    assert.deepEqual('foobar', aligned_field);\n\n    // Align non-numeric first line (potentially header) field in numeric column.\n    field = 'foobar';\n    is_first_line = 1;\n    max_components_lens = {max_total_length: 10, max_int_length: 4, max_fractional_length: 6};\n    max_components_lens = rainbow_utils.adjust_column_stats([max_components_lens], /*delim_length=*/1)[0];\n    aligned_field = rainbow_utils.align_field(field, is_first_line, max_components_lens, /*is_last_in_line=*/false);\n    assert.deepEqual('foobar     ', aligned_field);\n\n    // Align numeric first line (potentially header) field in numeric column.\n    field = '10.1';\n    is_first_line = 1;\n    max_components_lens = {max_total_length: 10, max_int_length: 4, max_fractional_length: 6};\n    max_components_lens = rainbow_utils.adjust_column_stats([max_components_lens], /*delim_length=*/1)[0];\n    aligned_field = rainbow_utils.align_field(field, is_first_line, max_components_lens, /*is_last_in_line=*/false);\n    assert.deepEqual('  10.1     ', aligned_field);\n\n    // Align numeric field in non-numeric column (first line).\n    field = '10.1';\n    is_first_line = 1;\n    max_components_lens = {max_total_length: 10, max_int_length: -1, max_fractional_length: -1};\n    max_components_lens = rainbow_utils.adjust_column_stats([max_components_lens], /*delim_length=*/1)[0];\n    aligned_field = rainbow_utils.align_field(field, is_first_line, max_components_lens, /*is_last_in_line=*/false);\n    assert.deepEqual('10.1       ', aligned_field);\n\n    // Align numeric field in non-numeric column (not first line).\n    field = '10.1';\n    is_first_line = 0;\n    max_components_lens = {max_total_length: 10, max_int_length: -1, max_fractional_length: -1};\n    max_components_lens = rainbow_utils.adjust_column_stats([max_components_lens], /*delim_length=*/1)[0];\n    aligned_field = rainbow_utils.align_field(field, is_first_line, max_components_lens, /*is_last_in_line=*/false);\n    assert.deepEqual('10.1       ', aligned_field);\n\n    // Align numeric float in numeric non-last column.\n    field = '10.1';\n    is_first_line = 0;\n    max_components_lens = {max_total_length: 10, max_int_length: 4, max_fractional_length: 6};\n    max_components_lens = rainbow_utils.adjust_column_stats([max_components_lens], /*delim_length=*/1)[0];\n    aligned_field = rainbow_utils.align_field(field, is_first_line, max_components_lens, /*is_last_in_line=*/false);\n    assert.deepEqual('  10.1     ', aligned_field);\n\n    // Align numeric integer in numeric non-last column.\n    field = '1000';\n    is_first_line = 0;\n    max_components_lens = {max_total_length: 10, max_int_length: 4, max_fractional_length: 6};\n    max_components_lens = rainbow_utils.adjust_column_stats([max_components_lens], /*delim_length=*/1)[0];\n    aligned_field = rainbow_utils.align_field(field, is_first_line, max_components_lens, /*is_last_in_line=*/false);\n    assert.deepEqual('1000       ', aligned_field);\n\n    // Align numeric integer in numeric (integer) column.\n    field = '1000';\n    is_first_line = 0;\n    max_components_lens = {max_total_length: 4, max_int_length: 4, max_fractional_length: 0};\n    max_components_lens = rainbow_utils.adjust_column_stats([max_components_lens], /*delim_length=*/1)[0];\n    aligned_field = rainbow_utils.align_field(field, is_first_line, max_components_lens, /*is_last_in_line=*/false);\n    assert.deepEqual('1000 ', aligned_field);\n\n    // Align numeric integer in numeric (integer) column dominated by header width.\n    field = '1000';\n    is_first_line = 0;\n    max_components_lens = {max_total_length: 6, max_int_length: 4, max_fractional_length: 0};\n    max_components_lens = rainbow_utils.adjust_column_stats([max_components_lens], /*delim_length=*/1)[0];\n    aligned_field = rainbow_utils.align_field(field, is_first_line, max_components_lens, /*is_last_in_line=*/false);\n    assert.deepEqual('  1000 ', aligned_field);\n\n    // Align numeric float in numeric column dominated by header width.\n    field = '10.1';\n    is_first_line = 0;\n    max_components_lens = {max_total_length: 12, max_int_length: 4, max_fractional_length: 6};\n    max_components_lens = rainbow_utils.adjust_column_stats([max_components_lens], /*delim_length=*/1)[0];\n    aligned_field = rainbow_utils.align_field(field, is_first_line, max_components_lens, /*is_last_in_line=*/false);\n    assert.deepEqual('    10.1     ', aligned_field);\n}\n\n\nfunction test_adjust_column_stats() {\n    let [max_components_lens, adjusted_components, column_stats, adjusted_stats] = [null, null, null];\n\n    // Not a numeric column, adjustment is NOOP.\n    max_components_lens = {max_total_length: 10, max_int_length: -1, max_fractional_length: -1};\n    adjusted_components = rainbow_utils.adjust_column_stats([max_components_lens], /*delim_length=*/1)[0];\n    assert.deepEqual({max_total_length: 10, max_int_length: -1, max_fractional_length: -1, start_offset: 0}, adjusted_components);\n\n    // This is possisble with a single-line file.\n    max_components_lens = {max_total_length: 10, max_int_length: 0, max_fractional_length: 0};\n    adjusted_components = rainbow_utils.adjust_column_stats([max_components_lens], /*delim_length=*/1)[0];\n    assert.deepEqual({max_total_length: 10, max_int_length: -1, max_fractional_length: -1, start_offset: 0}, adjusted_components);\n\n    // Header is smaller than the sum of the numeric components.\n    // value\n    // 0.12\n    // 1234\n    max_components_lens = {max_total_length: 5, max_int_length: 4, max_fractional_length: 3};\n    adjusted_components = rainbow_utils.adjust_column_stats([max_components_lens], /*delim_length=*/1)[0];\n    assert.deepEqual({max_total_length: 7, max_int_length: 4, max_fractional_length: 3, start_offset: 0}, adjusted_components);\n\n    // Header is bigger than the sum of the numeric components.\n    max_components_lens = {max_total_length: 10, max_int_length: 4, max_fractional_length: 3};\n    adjusted_components = rainbow_utils.adjust_column_stats([max_components_lens], /*delim_length=*/1)[0];\n    assert.deepEqual({max_total_length: 10, max_int_length: 7, max_fractional_length: 3, start_offset: 0}, adjusted_components);\n\n    // Non-zero start offset\n    column_stats = [{max_total_length: 10, max_int_length: -1, max_fractional_length: -1}, {max_total_length: 8, max_int_length: -1, max_fractional_length: -1}];\n    adjusted_stats = rainbow_utils.adjust_column_stats(column_stats, /*delim_length=*/1);\n    assert.deepEqual([{max_total_length: 10, max_int_length: -1, max_fractional_length: -1, start_offset: 0}, {max_total_length: 8, max_int_length: -1, max_fractional_length: -1, start_offset: 12}], adjusted_stats);\n}\n\n\nfunction test_parse_document_records() {\n    let [doc_lines, active_doc, comment_prefix, delim, policy] = [null, null, null, null, null];\n    let [records, num_records_parsed, fields_info, first_defective_line, first_trailing_space_line, comments] = [null, null, null, null, null, null];\n\n    // Simple test with single-field records and max_records_to_parse set to a very big number.\n    doc_lines = [\n        'aaa', \n        'bbb', \n        'ccc'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ',';\n    policy = 'simple';\n    [records, num_records_parsed, fields_info, first_defective_line, first_trailing_space_line, comments] = fast_load_utils.parse_document_records(active_doc, delim, policy, comment_prefix, /*stop_on_warning=*/true, /*max_records_to_parse=*/1000, /*collect_records=*/true, /*preserve_quotes_and_whitespaces=*/false, /*detect_trailing_spaces=*/false);\n    assert.deepEqual([['aaa'], ['bbb'], ['ccc']], records);\n    assert.deepEqual([[1, 0]], Array.from(fields_info.entries()));\n    assert.deepEqual([], comments);\n    assert.equal(first_defective_line, null);\n    assert.equal(first_trailing_space_line, null);\n    assert.equal(num_records_parsed, records.length);\n\n    // Simple test with two-field records and a comment and a trailing space line.\n    doc_lines = [\n        'a1,a2', \n        'b1,b2', \n        '#comment', \n        'c1 ,c2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'simple';\n    [records, num_records_parsed, fields_info, first_defective_line, first_trailing_space_line, comments] = fast_load_utils.parse_document_records(active_doc, delim, policy, comment_prefix, /*stop_on_warning=*/true, /*max_records_to_parse=*/-1, /*collect_records=*/true, /*preserve_quotes_and_whitespaces=*/false, /*detect_trailing_spaces=*/true);\n    assert.deepEqual([['a1', 'a2'], ['b1', 'b2'], ['c1 ', 'c2']], records);\n    assert.deepEqual([[2, 0]], Array.from(fields_info.entries()));\n    assert.deepEqual([{record_num: 2, comment_text: '#comment'}], comments);\n    assert.equal(first_defective_line, null);\n    // The first trailing space line is line 3 (0-based) because the comment line also counts for a document line.\n    assert.equal(first_trailing_space_line, 3);\n\n    // Simple test with inconsistent records and trailing space.\n    doc_lines = [\n        'a1,a2 ', \n        'b1,b2', \n        '', \n        'c1', \n        'd3,d4,d5'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'simple';\n    [records, num_records_parsed, fields_info, first_defective_line, first_trailing_space_line, comments] = fast_load_utils.parse_document_records(active_doc, delim, policy, comment_prefix, /*stop_on_warning=*/true, /*max_records_to_parse=*/-1, /*collect_records=*/true, /*preserve_quotes_and_whitespaces=*/false, /*detect_trailing_spaces=*/true);\n    assert.deepEqual([['a1', 'a2 '], ['b1', 'b2'], [''], ['c1'], ['d3', 'd4', 'd5']], records);\n    assert.deepEqual([[2, 0], [1, 2], [3, 4]], Array.from(fields_info.entries()));\n    assert.equal(first_defective_line, null);\n    assert.equal(first_trailing_space_line, 0);\n\n    // Quoted policy, defective line 3, do not stop on warning.\n    doc_lines = [\n        'a1,a2', \n        '#\"b1,b2', \n        '\"b1,b2', \n        'c1', \n        'd3,d4,d5'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted';\n    [records, num_records_parsed, fields_info, first_defective_line, first_trailing_space_line, comments] = fast_load_utils.parse_document_records(active_doc, delim, policy, comment_prefix, /*stop_on_warning=*/false, /*max_records_to_parse=*/-1, /*collect_records=*/true, /*preserve_quotes_and_whitespaces=*/false, /*detect_trailing_spaces=*/true);\n    assert.deepEqual([['a1', 'a2'], ['\"b1', 'b2'], ['c1'], ['d3', 'd4', 'd5']], records);\n    assert.deepEqual([{record_num: 1, comment_text: '#\"b1,b2'}], comments);\n    assert.equal(first_defective_line, 2);\n    assert.equal(first_trailing_space_line, null);\n\n    // Quoted policy, defective line 3, stop on warning.\n    doc_lines = [\n        'a1,a2', \n        '#\"b1,b2', \n        '\"b1,b2', \n        'c1', \n        'd3,d4,d5'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted';\n    [records, num_records_parsed, fields_info, first_defective_line, first_trailing_space_line, comments] = fast_load_utils.parse_document_records(active_doc, delim, policy, comment_prefix, /*stop_on_warning=*/true, /*max_records_to_parse=*/-1, /*collect_records=*/true, /*preserve_quotes_and_whitespaces=*/false, /*detect_trailing_spaces=*/true);\n    assert.deepEqual([['a1', 'a2']], records);\n    assert.deepEqual([{record_num: 1, comment_text: '#\"b1,b2'}], comments);\n    assert.equal(first_defective_line, 2);\n    assert.equal(first_trailing_space_line, null);\n\n    // Quoted rfc policy - no issues.\n    doc_lines = [\n        'a1,\"a2', \n        'b1\"\",b2 ', \n        'c1,c2\",c3', \n        '#d1,\"', \n        '\"e1,\"\"e2,e3\"', \n        'f1 ,f2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted_rfc';\n    [records, num_records_parsed, fields_info, first_defective_line, first_trailing_space_line, comments] = fast_load_utils.parse_document_records(active_doc, delim, policy, comment_prefix, /*stop_on_warning=*/true, /*max_records_to_parse=*/-1, /*collect_records=*/true, /*preserve_quotes_and_whitespaces=*/false, /*detect_trailing_spaces=*/true);\n    assert.deepEqual([['a1', 'a2\\nb1\",b2 \\nc1,c2', 'c3'], ['e1,\"e2,e3'], ['f1 ', 'f2']], records);\n    assert.deepEqual([{record_num: 1, comment_text: '#d1,\"'}], comments);\n    assert.equal(first_defective_line, null);\n    // Trailing spaces inside the fields do not count, so the first trailing space will be at line 5.\n    assert.equal(first_trailing_space_line, 5);\n\n    // Quoted rfc policy - stop on warning.\n    doc_lines = [\n        'a1,\"a2', \n        'b1\"\",b2 ', \n        'c1,\"c2,c3', \n        '#d1,\"', \n        '\"e1,\"\"e2,e3\"', \n        'f1 ,f2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted_rfc';\n    [records, num_records_parsed, fields_info, first_defective_line, first_trailing_space_line, comments] = fast_load_utils.parse_document_records(active_doc, delim, policy, comment_prefix, /*stop_on_warning=*/true, /*max_records_to_parse=*/-1, /*collect_records=*/true, /*preserve_quotes_and_whitespaces=*/false, /*detect_trailing_spaces=*/true);\n    assert.deepEqual([], records);\n    assert.deepEqual([], comments);\n    assert.equal(first_defective_line, 0);\n\n    // too few columns for autodetection\n    doc_lines = [\n        'a1', \n        'b1', \n        'c1'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ',';\n    policy = 'simple';\n    [records, num_records_parsed, fields_info, first_defective_line, first_trailing_space_line, comments] = fast_load_utils.parse_document_records(active_doc, delim, policy, comment_prefix, /*stop_on_warning=*/false, /*max_records_to_parse=*/-1, /*collect_records=*/false, /*preserve_quotes_and_whitespaces=*/true, /*detect_trailing_spaces=*/false, /*min_num_fields_for_autodetection=*/2);\n    assert.equal(null, records);\n    assert.deepEqual([], comments);\n    // Only one entry in fields_info because of the early stop because of min_num_fields_for_autodetection check.\n    assert.deepEqual([[1, 0]], Array.from(fields_info.entries()));\n    assert.equal(first_defective_line, null);\n    assert.equal(first_trailing_space_line, null);\n\n    // Autodetection - enough columns.\n    doc_lines = [\n        'a1,a2', \n        'b1,b2', \n        'c1,c2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ',';\n    policy = 'quoted';\n    [records, num_records_parsed, fields_info, first_defective_line, first_trailing_space_line, comments] = fast_load_utils.parse_document_records(active_doc, delim, policy, comment_prefix, /*stop_on_warning=*/false, /*max_records_to_parse=*/-1, /*collect_records=*/false, /*preserve_quotes_and_whitespaces=*/true, /*detect_trailing_spaces=*/false, /*min_num_fields_for_autodetection=*/2);\n    assert.equal(null, records);\n    assert.deepEqual([[2, 0]], Array.from(fields_info.entries()));\n    assert.equal(first_defective_line, null);\n    assert.equal(first_trailing_space_line, null);\n\n    // Autodetection - different number of columns - early stop.\n    doc_lines = [\n        'a1,a2', \n        'b1,b2', \n        'c1,c2,c3', \n        'd1,d3'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ',';\n    policy = 'quoted';\n    [records, num_records_parsed, fields_info, first_defective_line, first_trailing_space_line, comments] = fast_load_utils.parse_document_records(active_doc, delim, policy, comment_prefix, /*stop_on_warning=*/false, /*max_records_to_parse=*/-1, /*collect_records=*/true, /*preserve_quotes_and_whitespaces=*/false, /*detect_trailing_spaces=*/false, /*min_num_fields_for_autodetection=*/2);\n    // Because of the early stop we don't parse the last 2 lines.\n    assert.deepEqual([['a1', 'a2'], ['b1', 'b2']], records);\n    // Make sure that we have two entries in fields_info - callers check fields_info to find out if we have autodetection failure.\n    assert.deepEqual([[2, 0], [3, 2]], Array.from(fields_info.entries()));\n\n    // Max record to parse - no defective line.\n    doc_lines = [\n        'a1,a2', \n        'b1,b2', \n        '\"c1,c2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ',';\n    policy = 'quoted_rfc';\n    [records, num_records_parsed, fields_info, first_defective_line, first_trailing_space_line, comments] = fast_load_utils.parse_document_records(active_doc, delim, policy, comment_prefix, /*stop_on_warning=*/true, /*max_records_to_parse=*/2, /*collect_records=*/true, /*preserve_quotes_and_whitespaces=*/false, /*detect_trailing_spaces=*/false);\n    assert.deepEqual([['a1', 'a2'], ['b1', 'b2']], records);\n    // Although the third line is defective we don't detect it because of max_records_to_parse limitation.\n    assert.equal(first_defective_line, null);\n\n    // Max record to parse - defective line.\n    doc_lines = [\n        'a1,a2', \n        'b1,b2', \n        '\"c1,c2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ',';\n    policy = 'quoted_rfc';\n    [records, num_records_parsed, fields_info, first_defective_line, first_trailing_space_line, comments] = fast_load_utils.parse_document_records(active_doc, delim, policy, comment_prefix, /*stop_on_warning=*/true, /*max_records_to_parse=*/5, /*collect_records=*/true, /*preserve_quotes_and_whitespaces=*/false, /*detect_trailing_spaces=*/false);\n    assert.deepEqual([['a1', 'a2'], ['b1', 'b2']], records);\n    // Although the third line is defective we don't detect it because of max_records_to_parse limitation.\n    assert.equal(first_defective_line, 2);\n\n    // Simple multichar separator, max_records_to_parse equals total number of records.\n    doc_lines = [\n        'a1#~#a2#~#a3', \n        'b1#~#b2#~#b3', \n        'c1#~#c2#~#c3'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = '#~#';\n    policy = 'simple';\n    [records, num_records_parsed, fields_info, first_defective_line, first_trailing_space_line, comments] = fast_load_utils.parse_document_records(active_doc, delim, policy, comment_prefix, /*stop_on_warning=*/true, /*max_records_to_parse=*/3, /*collect_records=*/true, /*preserve_quotes_and_whitespaces=*/false, /*detect_trailing_spaces=*/false);\n    assert.deepEqual([['a1', 'a2', 'a3'], ['b1', 'b2', 'b3'], ['c1', 'c2', 'c3']], records);\n    assert.equal(first_defective_line, null);\n\n    // Whitespace policy, trailing spaces are impossible for this policy.\n    doc_lines = [\n        '  a1 a2    a3', \n        'b1     b2 b3  ', \n        '  c1    c2       c3  '\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ' ';\n    policy = 'whitespace';\n    [records, num_records_parsed, fields_info, first_defective_line, first_trailing_space_line, comments] = fast_load_utils.parse_document_records(active_doc, delim, policy, comment_prefix, /*stop_on_warning=*/true, /*max_records_to_parse=*/3, /*collect_records=*/true, /*preserve_quotes_and_whitespaces=*/false, /*detect_trailing_spaces=*/true);\n    assert.deepEqual([['a1', 'a2', 'a3'], ['b1', 'b2', 'b3'], ['c1', 'c2', 'c3']], records);\n    assert.equal(first_defective_line, null);\n    // Although we have a lot of internal spaces, the first_trailing_space_line should be null because we use whitespace policy\n    assert.equal(first_trailing_space_line, null);\n\n    // Quoted rfc policy, preserve quotes.\n    doc_lines = [\n        'a1,\"a2', 'b1\"\",b2 ', \n        'c1,c2\",c3', '#d1,\"', \n        '\"e1,\"\"e2,e3\"', \n        'f1 ,f2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted_rfc';\n    [records, num_records_parsed, fields_info, first_defective_line, first_trailing_space_line, comments] = fast_load_utils.parse_document_records(active_doc, delim, policy, comment_prefix, /*stop_on_warning=*/true, /*max_records_to_parse=*/-1, /*collect_records=*/true, /*preserve_quotes_and_whitespaces=*/true, /*detect_trailing_spaces=*/true);\n    assert.deepEqual([['a1', '\"a2\\nb1\"\",b2 \\nc1,c2\"', 'c3'], ['\"e1,\"\"e2,e3\"'], ['f1 ', 'f2']], records);\n    assert.deepEqual([{record_num: 1, comment_text: '#d1,\"'}], comments);\n    assert.equal(first_defective_line, null);\n    // Trailing spaces inside the fields do not count, so the first trailing space will be at line 5.\n    assert.equal(first_trailing_space_line, 5);\n}\n\n\nfunction line_range_to_triple(vscode_range) {\n    assert.equal(vscode_range.start.line, vscode_range.end.line);\n    return [vscode_range.start.line, vscode_range.start.character, vscode_range.end.character];\n}\n\nfunction convert_ranges_to_triples(table_ranges) {\n    let table_comment_ranges = [];\n    let table_record_ranges = [];\n    for (let row_info of table_ranges) {\n        if (row_info.hasOwnProperty('comment_range')) {\n            table_comment_ranges.push(line_range_to_triple(row_info.comment_range));\n        } else {\n            assert(row_info.hasOwnProperty('record_ranges'));\n            let row_triple_groups = [];\n            for (let field_ranges of row_info.record_ranges) {\n                let field_triples = [];\n                for (let field_range of field_ranges) {\n                    field_triples.push(line_range_to_triple(field_range));\n                }\n                row_triple_groups.push(field_triples);\n            }\n            table_record_ranges.push(row_triple_groups);\n        }\n    }\n    return [table_comment_ranges, table_record_ranges];\n}\n\nfunction vr(l1, c1, l2, c2) {\n    return new VscodeRangeTestDouble(l1, c1, l2, c2);\n}\n\n// Flat Vscode Record. Use function for readability.\nfunction fvr(l, c1, c2) {\n    return [l, c1, c2];\n}\n\n\nfunction test_parse_document_range_rfc() {\n    let [doc_lines, active_doc, comment_prefix, delim, range] = [null, null, null, null, null];\n    let [table_ranges, table_comment_ranges, table_record_ranges] = [null, null, null];\n    let [record_ranges_0, record_ranges_1, record_ranges_2, record_ranges_3] = [null, null, null, null];\n    // Simple test case.\n    doc_lines = [\n        'a1,a2', \n        'b1,b2', \n        'c1,c2', \n        'd1,d2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ',';\n    range = new vscode_test_double.Range(1, 0, 3, 0);\n    table_ranges = rainbow_utils.parse_document_range_rfc(vscode_test_double, active_doc, delim, comment_prefix, range, /*custom_parsing_margin=*/0);\n    [table_comment_ranges, table_record_ranges] = convert_ranges_to_triples(table_ranges);\n    record_ranges_1 = [[fvr(1, 0, 3)], [fvr(1, 3, 5)]];\n    record_ranges_2 = [[fvr(2, 0, 3)], [fvr(2, 3, 5)]];\n    assert.deepEqual([record_ranges_1, record_ranges_2], table_record_ranges);\n    assert.deepEqual([], table_comment_ranges);\n\n    // Test last line parsing.\n    doc_lines = [\n        'a1,a2', \n        'b1,b2', \n        'c1,c2', \n        'd1,d2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ',';\n    range = new vscode_test_double.Range(1, 0, 4, 0);\n    table_ranges = rainbow_utils.parse_document_range_rfc(vscode_test_double, active_doc, delim, comment_prefix, range, /*custom_parsing_margin=*/0);\n    [table_comment_ranges, table_record_ranges] = convert_ranges_to_triples(table_ranges);\n    record_ranges_1 = [[fvr(1, 0, 3)], [fvr(1, 3, 5)]];\n    record_ranges_2 = [[fvr(2, 0, 3)], [fvr(2, 3, 5)]];\n    record_ranges_3 = [[fvr(3, 0, 3)], [fvr(3, 3, 5)]];\n    assert.deepEqual([record_ranges_1, record_ranges_2, record_ranges_3], table_record_ranges);\n    assert.deepEqual([], table_comment_ranges);\n\n    // Test behind last line and before first line parsing with large margin.\n    doc_lines = [\n        'a1,a2', \n        'b1,b2', \n        'c1,c2', \n        '#comment', \n        'd1,d2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ',';\n    range = new vscode_test_double.Range(0, 0, 5, 0);\n    table_ranges = rainbow_utils.parse_document_range_rfc(vscode_test_double, active_doc, delim, /*comment_prefix=*/'#', range, /*custom_parsing_margin=*/100);\n    [table_comment_ranges, table_record_ranges] = convert_ranges_to_triples(table_ranges);\n    record_ranges_0 = [[fvr(0, 0, 3)], [fvr(0, 3, 5)]];\n    record_ranges_1 = [[fvr(1, 0, 3)], [fvr(1, 3, 5)]];\n    record_ranges_2 = [[fvr(2, 0, 3)], [fvr(2, 3, 5)]];\n    record_ranges_3 = [[fvr(4, 0, 3)], [fvr(4, 3, 5)]];\n    assert.deepEqual([record_ranges_0, record_ranges_1, record_ranges_2, record_ranges_3], table_record_ranges);\n    assert.deepEqual([fvr(3, 0, 8)], table_comment_ranges);\n\n    // Test extension with the default margin.\n    doc_lines = [\n        'a1,a2', \n        'b1,b2', \n        'c1,c2', \n        '#comment', \n        'd1,d2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ',';\n    // The range covers only one line, but the default margin=50 should extend it to cover everything.\n    range = new vscode_test_double.Range(2, 0, 2, 0);\n    table_ranges = rainbow_utils.parse_document_range_rfc(vscode_test_double, active_doc, delim, /*comment_prefix=*/'#', range);\n    [table_comment_ranges, table_record_ranges] = convert_ranges_to_triples(table_ranges);\n    record_ranges_0 = [[fvr(0, 0, 3)], [fvr(0, 3, 5)]];\n    record_ranges_1 = [[fvr(1, 0, 3)], [fvr(1, 3, 5)]];\n    record_ranges_2 = [[fvr(2, 0, 3)], [fvr(2, 3, 5)]];\n    record_ranges_3 = [[fvr(4, 0, 3)], [fvr(4, 3, 5)]];\n    assert.deepEqual([record_ranges_0, record_ranges_1, record_ranges_2, record_ranges_3], table_record_ranges);\n    assert.deepEqual([fvr(3, 0, 8)], table_comment_ranges);\n\n\n    // Single record, 3 fields.\n    doc_lines = [\n        'a1,\"a2', \n        'b1,b2', \n        'c1,c2', \n        'd1\",d2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ',';\n    range = new vscode_test_double.Range(0, 0, 4, 0);\n    table_ranges = rainbow_utils.parse_document_range_rfc(vscode_test_double, active_doc, delim, comment_prefix, range, /*custom_parsing_margin=*/100);\n    [table_comment_ranges, table_record_ranges] = convert_ranges_to_triples(table_ranges);\n    record_ranges_0 = [[fvr(0, 0, 3)], [fvr(0, 3, 6), fvr(1, 0, 5), fvr(2, 0, 5), fvr(3, 0, 4)], [fvr(3, 4, 6)]];\n    assert.deepEqual([record_ranges_0], table_record_ranges);\n    assert.deepEqual([], table_comment_ranges);\n\n    // Mixture of single line and multiline fields in a single record. Also a comment prefix in the middle of the field which should not count.\n    doc_lines = [\n        'a1,a2,\"a3', \n        '#b1\",\"b2\"\",b3\",b4,\"b5', \n        'c1,c2\"'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ',';\n    range = new vscode_test_double.Range(0, 0, 4, 0);\n    table_ranges = rainbow_utils.parse_document_range_rfc(vscode_test_double, active_doc, delim, /*comment_prefix=*/'#', range, /*custom_parsing_margin=*/100);\n    [table_comment_ranges, table_record_ranges] = convert_ranges_to_triples(table_ranges);\n    record_ranges_0 = [[fvr(0, 0, 3)], [fvr(0, 3, 6)], [fvr(0, 6, 9), fvr(1, 0, 5)], [fvr(1, 5, 15)], [fvr(1, 15, 18)], [fvr(1, 18, 21), fvr(2, 0, 6)]];\n    assert.deepEqual([record_ranges_0], table_record_ranges);\n    assert.deepEqual([], table_comment_ranges);\n\n    // Discard some parsed lines which belongs to a record starting outside the parsing range\n    doc_lines = [\n        'a1,\"a2', \n        'b1,b2', \n        'c1,c2', \n        'd1,d2\"', \n        'e1,e2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ',';\n    range = new vscode_test_double.Range(1, 0, 20, 0); // doesn't include first line with the openning double quote.\n    table_ranges = rainbow_utils.parse_document_range_rfc(vscode_test_double, active_doc, delim, /*comment_prefix=*/'#', range, /*custom_parsing_margin=*/0);\n    [table_comment_ranges, table_record_ranges] = convert_ranges_to_triples(table_ranges);\n    record_ranges_0 = [[fvr(4, 0, 3)], [fvr(4, 3, 5)]];\n    assert.deepEqual([record_ranges_0], table_record_ranges);\n    assert.deepEqual([], table_comment_ranges);\n\n    // Now shift window one back - it should include all lines now.\n    doc_lines = [\n        'a1,\"a2', \n        'b1,b2', \n        'c1,c2', \n        'd1,d2\"', \n        'e1,e2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ',';\n    range = new vscode_test_double.Range(0, 0, 20, 0);\n    table_ranges = rainbow_utils.parse_document_range_rfc(vscode_test_double, active_doc, delim, /*comment_prefix=*/'#', range, /*custom_parsing_margin=*/0);\n    [table_comment_ranges, table_record_ranges] = convert_ranges_to_triples(table_ranges);\n    record_ranges_0 = [[fvr(0, 0, 3)], [fvr(0, 3, 6), fvr(1, 0, 5), fvr(2, 0, 5), fvr(3, 0, 6)]];\n    record_ranges_1 = [[fvr(4, 0, 3)], [fvr(4, 3, 5)]];\n    assert.deepEqual([record_ranges_0, record_ranges_1], table_record_ranges);\n    assert.deepEqual([], table_comment_ranges);\n\n    // Include only the first 2 records because end of the record is outside the parsing window.\n    doc_lines = [\n        'a1,a2', \n        'b1,b2', \n        'c1,\"c2', \n        'd1,d2', \n        'e1,e2', \n        'f1,f2\"'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ',';\n    range = new vscode_test_double.Range(0, 0, 5, 0); // doesn't include the last line with the closing double quote.\n    table_ranges = rainbow_utils.parse_document_range_rfc(vscode_test_double, active_doc, delim, /*comment_prefix=*/'#', range, /*custom_parsing_margin=*/0);\n    [table_comment_ranges, table_record_ranges] = convert_ranges_to_triples(table_ranges);\n    record_ranges_0 = [[fvr(0, 0, 3)], [fvr(0, 3, 5)]];\n    record_ranges_1 = [[fvr(1, 0, 3)], [fvr(1, 3, 5)]];\n    assert.deepEqual([record_ranges_0, record_ranges_1], table_record_ranges);\n    assert.deepEqual([], table_comment_ranges);\n\n    // Now include everything because the end record got inside the parsing window\n    doc_lines = [\n        'a1,a2', \n        'b1,b2', \n        'c1,\"c2', \n        'd1,d2', \n        'e1,e2', \n        'f1,f2\"'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ',';\n    range = new vscode_test_double.Range(0, 0, 6, 0); // doesn't include the last line with the closing double quote.\n    table_ranges = rainbow_utils.parse_document_range_rfc(vscode_test_double, active_doc, delim, /*comment_prefix=*/'#', range, /*custom_parsing_margin=*/0);\n    [table_comment_ranges, table_record_ranges] = convert_ranges_to_triples(table_ranges);\n    record_ranges_0 = [[fvr(0, 0, 3)], [fvr(0, 3, 5)]];\n    record_ranges_1 = [[fvr(1, 0, 3)], [fvr(1, 3, 5)]];\n    record_ranges_2 = [[fvr(2, 0, 3)], [fvr(2, 3, 6), fvr(3, 0, 5), fvr(4, 0, 5), fvr(5, 0, 6)]];\n    assert.deepEqual([record_ranges_0, record_ranges_1, record_ranges_2], table_record_ranges);\n    assert.deepEqual([], table_comment_ranges);\n\n    // ===================================================================================\n    // Beginning of 4 related test on the same data but with the different parsing windows\n\n    // Nothing is parsed because the window started at the record which end didn't fit into the parsing range.\n    doc_lines = [\n        'a1,\"a2', \n        'b1,b2', \n        'c1\",\"c2', \n        'd1,d2', \n        '#hello world', \n        'e1,e2', \n        'f1\",f2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ',';\n    range = new vscode_test_double.Range(0, 0, 6, 0); // doesn't include the last line with the closing double quote.\n    table_ranges = rainbow_utils.parse_document_range_rfc(vscode_test_double, active_doc, delim, /*comment_prefix=*/'#', range, /*custom_parsing_margin=*/0);\n    [table_comment_ranges, table_record_ranges] = convert_ranges_to_triples(table_ranges);\n    assert.deepEqual([], table_record_ranges);\n    assert.deepEqual([], table_comment_ranges);\n\n    // Same as before but the window is shifted slightly so we (wrongly) assume that the internal field lines are independent records.\n    doc_lines = [\n        'a1,\"a2', \n        'b1,b2', \n        'c1\",\"c2', \n        'd1,d2', \n        '#hello world', \n        'e1,e2', \n        'f1\",f2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ',';\n    range = new vscode_test_double.Range(1, 0, 6, 0); // doesn't include the last line with the closing double quote.\n    table_ranges = rainbow_utils.parse_document_range_rfc(vscode_test_double, active_doc, delim, /*comment_prefix=*/'#', range, /*custom_parsing_margin=*/0);\n    [table_comment_ranges, table_record_ranges] = convert_ranges_to_triples(table_ranges);\n    record_ranges_0 = [[fvr(1, 0, 3)], [fvr(1, 3, 5)]];\n    // Note that the third line `c1\",\"c2` is not parsed because since parser assumes it to be an independent record it contains syntax errors.\n    record_ranges_1 = [[fvr(3, 0, 3)], [fvr(3, 3, 5)]];\n    record_ranges_2 = [[fvr(5, 0, 3)], [fvr(5, 3, 5)]];\n    assert.deepEqual([record_ranges_0, record_ranges_1, record_ranges_2], table_record_ranges);\n    // Although `#hello world` is actually part of the multiline field we wrongly assume it to be a comment since our parsing window don't cover neither begin nor end of the record.\n    assert.deepEqual([fvr(4, 0, 12)], table_comment_ranges);\n\n    // Nothing is parsed again because the window ends right at the closing line and the beginning didn't fit.\n    doc_lines = [\n        'a1,\"a2', \n        'b1,b2', \n        'c1\",\"c2', \n        'd1,d2', \n        '#hello world', \n        'e1,e2', \n        'f1\",f2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ',';\n    range = new vscode_test_double.Range(1, 0, 7, 0);\n    table_ranges = rainbow_utils.parse_document_range_rfc(vscode_test_double, active_doc, delim, /*comment_prefix=*/'#', range, /*custom_parsing_margin=*/0);\n    [table_comment_ranges, table_record_ranges] = convert_ranges_to_triples(table_ranges);\n    assert.deepEqual([], table_record_ranges);\n    assert.deepEqual([], table_comment_ranges);\n\n\n    // All lines now fit in the range and they are being properly parsed as a single record.\n    doc_lines = [\n        'a1,\"a2', \n        'b1,b2', \n        'c1\",\"c2', \n        'd1,d2', \n        '#hello world', \n        'e1,e2', \n        'f1\",f2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = null;\n    delim = ',';\n    range = new vscode_test_double.Range(0, 0, 7, 0);\n    table_ranges = rainbow_utils.parse_document_range_rfc(vscode_test_double, active_doc, delim, /*comment_prefix=*/'#', range, /*custom_parsing_margin=*/0);\n    [table_comment_ranges, table_record_ranges] = convert_ranges_to_triples(table_ranges);\n    record_ranges_0 = [[fvr(0, 0, 3)], [fvr(0, 3, 6), fvr(1, 0, 5), fvr(2, 0, 4)], [fvr(2, 4, 7), fvr(3, 0, 5), fvr(4, 0, 12), fvr(5, 0, 5), fvr(6, 0, 4)], [fvr(6, 4, 6)]];\n    assert.deepEqual([record_ranges_0], table_record_ranges);\n    assert.deepEqual([], table_comment_ranges);\n\n\n    // End of 4 related test on the same data but with the different parsing windows\n    // ===================================================================================\n\n\n    // Discard some at the beginning and some at the end where the record didn't fit into the parsing window\n    doc_lines = [\n        'a1;\"a2', \n        'b1;b2', \n        'c1\";c2', \n        'd1;d2', \n        '#hello world', \n        'e1;e2', \n        'f1;\"f2', \n        'g1;g2', \n        'h1\";h2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ';';\n    range = new vscode_test_double.Range(1, 0, 8, 0);\n    table_ranges = rainbow_utils.parse_document_range_rfc(vscode_test_double, active_doc, delim, comment_prefix, range, /*custom_parsing_margin=*/0);\n    [table_comment_ranges, table_record_ranges] = convert_ranges_to_triples(table_ranges);\n    record_ranges_1 = [[fvr(3, 0, 3)], [fvr(3, 3, 5)]];\n    record_ranges_2 = [[fvr(5, 0, 3)], [fvr(5, 3, 5)]];\n    assert.deepEqual([record_ranges_1, record_ranges_2], table_record_ranges);\n    assert.deepEqual([fvr(4, 0, 12)], table_comment_ranges);\n\n}\n\n\nfunction test_is_opening_rfc_line() {\n    assert(rainbow_utils.is_opening_rfc_line('a1,\"a2', ','));\n    assert(rainbow_utils.is_opening_rfc_line('a1;\"a2', ';'));\n    assert(rainbow_utils.is_opening_rfc_line('a1,  \" a2', ','));\n    assert(rainbow_utils.is_opening_rfc_line('a1  ,  \" a2', ','));\n    assert(rainbow_utils.is_opening_rfc_line('a1,a1,a1  ,  \" a2', ','));\n    assert(rainbow_utils.is_opening_rfc_line('a1,\"a1,a1  \",  \" a2', ','));\n    assert(rainbow_utils.is_opening_rfc_line('a1,\"a1,a1  \" ,  \" a2', ','));\n    assert(!rainbow_utils.is_opening_rfc_line('a1,a2', ','));\n    assert(!rainbow_utils.is_opening_rfc_line('a1\",a2', ','));\n    assert(!rainbow_utils.is_opening_rfc_line('a1;a2', ';'));\n    assert(!rainbow_utils.is_opening_rfc_line('a1\";a2', ';'));\n\n    // Some lines can be both closing and opening, e.g. this one:\n    assert(rainbow_utils.is_opening_rfc_line('\",a2,a3', ','));\n\n    assert(!rainbow_utils.is_opening_rfc_line('abcd\"', ','));\n    assert(!rainbow_utils.is_opening_rfc_line('abcd\",ab', ','));\n    assert(!rainbow_utils.is_opening_rfc_line('ab,cd\",ab', ','));\n    assert(!rainbow_utils.is_opening_rfc_line('ab\"\"x\"\"cd\",ab', ','));\n    assert(!rainbow_utils.is_opening_rfc_line('a1,\"a2,a3\"\"a4,a5\"\"\",a6,a7', ','));\n    assert(rainbow_utils.is_opening_rfc_line('\"', ','));\n    assert(rainbow_utils.is_opening_rfc_line('\",', ','));\n    assert(rainbow_utils.is_opening_rfc_line(',\"', ','));\n    assert(rainbow_utils.is_opening_rfc_line('a,\"', ','));\n    assert(!rainbow_utils.is_opening_rfc_line('a,a\"', ','));\n}\n\n\nfunction test_sample_preview_records_from_context() {\n    let [doc_lines, active_doc, comment_prefix, delim, rbql_context, preview_window_size, cached_table_parse_result, dst_message, policy] = [null, null, null, null, null, null, null, null, null];\n    let doc_file_name = 'fake_doc.txt';\n\n    // Simple test with a comment and negative start record.\n    doc_lines = [\n        'a1,a2', \n        'b1,b2', \n        '#comment', \n        'c1,c2', \n        'd1,d2'\n    ];\n    delim = ',';\n    comment_prefix = '#';\n    preview_window_size = 10;\n    active_doc = new VscodeDocumentTestDouble(doc_lines, doc_file_name);\n    requested_start_record = -100;\n    cached_table_parse_result = new Map();\n    dst_message = new Object();\n    policy = 'simple';\n    rbql_context = {input_document: active_doc, delim: delim, policy: policy, comment_prefix: comment_prefix, requested_start_record: requested_start_record};\n    rainbow_utils.sample_preview_records_from_context(rbql_context, dst_message, preview_window_size, cached_table_parse_result);\n    assert.equal(dst_message.actual_start_record, 0);\n    assert.deepEqual([['a1', 'a2'], ['b1', 'b2'], ['c1', 'c2'], ['d1', 'd2']], dst_message.preview_records);\n    assert(!cached_table_parse_result.has(doc_file_name));\n\n    // Invalid quoting.\n    doc_lines = [\n        'a1,\"a2', \n        'b1\",b2', \n        '#comment', \n        'c1,\"c2', \n        'd1,d2'\n    ];\n    delim = ',';\n    comment_prefix = '#';\n    preview_window_size = 10;\n    active_doc = new VscodeDocumentTestDouble(doc_lines, doc_file_name);\n    requested_start_record = 0;\n    cached_table_parse_result = new Map();\n    dst_message = new Object();\n    policy = 'quoted_rfc';\n    rbql_context = {input_document: active_doc, delim: delim, policy: policy, comment_prefix: comment_prefix, requested_start_record: requested_start_record};\n    rainbow_utils.sample_preview_records_from_context(rbql_context, dst_message, preview_window_size, cached_table_parse_result);\n    assert(!dst_message.actual_start_record);\n    assert(!dst_message.preview_records);\n    assert.equal(dst_message.preview_sampling_error, 'Double quotes are not consistent in record 2 which starts at line 4');\n    assert(!cached_table_parse_result.has(doc_file_name));\n\n    // Test window shift back to 0.\n    doc_lines = [\n        'a1,a2', \n        'b1,b2', \n        '#comment', \n        'c1,c2', \n        'd1,d2', \n        'e1,e2'\n    ];\n    delim = ',';\n    comment_prefix = '#';\n    preview_window_size = 10;\n    active_doc = new VscodeDocumentTestDouble(doc_lines, doc_file_name);\n    requested_start_record = 3;\n    cached_table_parse_result = new Map();\n    dst_message = new Object();\n    policy = 'simple';\n    rbql_context = {input_document: active_doc, delim: delim, policy: policy, comment_prefix: comment_prefix, requested_start_record: requested_start_record};\n    rainbow_utils.sample_preview_records_from_context(rbql_context, dst_message, preview_window_size, cached_table_parse_result);\n    // The start record is shifted to record 1 from requested record 3 to show the maximum number of the requested 10 entries.\n    assert.equal(dst_message.actual_start_record, 0);\n    assert.deepEqual([['a1', 'a2'], ['b1', 'b2'], ['c1', 'c2'], ['d1', 'd2'], ['e1', 'e2']], dst_message.preview_records);\n    assert(!cached_table_parse_result.has(doc_file_name));\n\n    // Test window shift back exact.\n    doc_lines = [\n        'a1,a2', \n        'b1,b2', \n        '#comment', \n        'c1,c2', \n        'd1,d2', \n        'e1,e2'\n    ];\n    delim = ',';\n    comment_prefix = '#';\n    preview_window_size = 4;\n    active_doc = new VscodeDocumentTestDouble(doc_lines, doc_file_name);\n    requested_start_record = 3;\n    cached_table_parse_result = new Map();\n    dst_message = new Object();\n    policy = 'simple';\n    rbql_context = {input_document: active_doc, delim: delim, policy: policy, comment_prefix: comment_prefix, requested_start_record: requested_start_record};\n    rainbow_utils.sample_preview_records_from_context(rbql_context, dst_message, preview_window_size, cached_table_parse_result);\n    // The start record is shifted to record 1 from requested record 3 to show the requested 4 entries.\n    assert.equal(dst_message.actual_start_record, 1);\n    assert.deepEqual([['b1', 'b2'], ['c1', 'c2'], ['d1', 'd2'], ['e1', 'e2']], dst_message.preview_records);\n    assert(!cached_table_parse_result.has(doc_file_name));\n\n    // Test UI_STRING_TRIM_MARKER behavior.\n    doc_lines = [\n        '1'.repeat(251) + ',' + '2'.repeat(251)\n    ];\n    delim = ',';\n    comment_prefix = '#';\n    preview_window_size = 4;\n    active_doc = new VscodeDocumentTestDouble(doc_lines, doc_file_name);\n    requested_start_record = 3;\n    cached_table_parse_result = new Map();\n    dst_message = new Object();\n    policy = 'simple';\n    rbql_context = {input_document: active_doc, delim: delim, policy: policy, comment_prefix: comment_prefix, requested_start_record: requested_start_record};\n    rainbow_utils.sample_preview_records_from_context(rbql_context, dst_message, preview_window_size, cached_table_parse_result);\n    assert.equal(dst_message.actual_start_record, 0);\n    assert.deepEqual([['1'.repeat(250) + '###UI_STRING_TRIM_MARKER###', '2'.repeat(250) + '###UI_STRING_TRIM_MARKER###']], dst_message.preview_records);\n    assert(!cached_table_parse_result.has(doc_file_name));\n\n    // Test that comment lines do not prevent to sample requested number of entries.\n    doc_lines = [\n        '#info', \n        '#info', \n        '#info', \n        '#info', \n        '#info', \n        '#info', \n        '#info', \n        '#info', \n        '#info', \n        '#info', \n        'a1,a2', \n        'b1,b2', \n        '#comment', \n        'c1,c2', \n        'd1,d2'\n    ];\n    delim = ',';\n    comment_prefix = '#';\n    preview_window_size = 3;\n    active_doc = new VscodeDocumentTestDouble(doc_lines, doc_file_name);\n    requested_start_record = 0;\n    cached_table_parse_result = new Map();\n    dst_message = new Object();\n    policy = 'simple';\n    rbql_context = {input_document: active_doc, delim: delim, policy: policy, comment_prefix: comment_prefix, requested_start_record: requested_start_record};\n    rainbow_utils.sample_preview_records_from_context(rbql_context, dst_message, preview_window_size, cached_table_parse_result);\n    assert.equal(dst_message.actual_start_record, 0);\n    assert.deepEqual([['a1', 'a2'], ['b1', 'b2'], ['c1', 'c2']], dst_message.preview_records);\n    assert(!cached_table_parse_result.has(doc_file_name));\n\n    // Check caching logic.\n    doc_lines = [\n        'a1,a2', \n        'b1,b2', \n        'c1,c2', \n        '#comment', \n        'd1,d2', \n        'e1,e2', \n        'f1,f2', \n        'g1,g2', \n        'h1,h2', \n        'i1,i2', \n        'j1,j2', \n        'k1,k2', \n        'l1,l2', \n        'm1,m2', \n        'n1,n2', \n        'o1\"\",o2'\n    ];\n    delim = ',';\n    comment_prefix = '#';\n    preview_window_size = 2;\n    active_doc = new VscodeDocumentTestDouble(doc_lines, doc_file_name);\n    requested_start_record = 11;\n    cached_table_parse_result = new Map();\n    dst_message = new Object();\n    policy = 'quoted_rfc';\n    rbql_context = {input_document: active_doc, delim: delim, policy: policy, comment_prefix: comment_prefix, requested_start_record: requested_start_record};\n    rainbow_utils.sample_preview_records_from_context(rbql_context, dst_message, preview_window_size, cached_table_parse_result);\n    assert.equal(dst_message.preview_sampling_error, 'Double quotes are not consistent in record 15 which starts at line 16');\n    assert(cached_table_parse_result.has(doc_file_name));\n    assert.deepEqual([['a1', 'a2'], ['b1', 'b2'], ['c1', 'c2'], ['d1', 'd2'], ['e1', 'e2'], ['f1', 'f2'], ['g1', 'g2'], ['h1', 'h2'], ['i1', 'i2'], ['j1', 'j2'], ['k1', 'k2'], ['l1', 'l2'], ['m1', 'm2'], ['n1', 'n2']], cached_table_parse_result.get(doc_file_name)[0]);\n    assert.equal(15, cached_table_parse_result.get(doc_file_name)[1]); // First failed line.\n    assert.equal(1, cached_table_parse_result.get(doc_file_name)[2]); // Doc verion.\n\n    // Check that even with the updated doc the old version is returned because we haven't adjusted the version.\n    dst_message = new Object();\n    active_doc.lines_buffer[active_doc.lines_buffer.length - 1] = 'o1,o2';\n    rainbow_utils.sample_preview_records_from_context(rbql_context, dst_message, preview_window_size, cached_table_parse_result);\n    assert.equal(dst_message.preview_sampling_error, 'Double quotes are not consistent in record 15 which starts at line 16');\n    assert.deepEqual([['a1', 'a2'], ['b1', 'b2'], ['c1', 'c2'], ['d1', 'd2'], ['e1', 'e2'], ['f1', 'f2'], ['g1', 'g2'], ['h1', 'h2'], ['i1', 'i2'], ['j1', 'j2'], ['k1', 'k2'], ['l1', 'l2'], ['m1', 'm2'], ['n1', 'n2']], cached_table_parse_result.get(doc_file_name)[0]);\n    assert.equal(15, cached_table_parse_result.get(doc_file_name)[1]); // First failed line.\n    assert.equal(1, cached_table_parse_result.get(doc_file_name)[2]); // Doc verion.\n\n    // Check that updating doc version triggers reparsing which now returns the correct sample because the doc was fixed earlier..\n    dst_message = new Object();\n    active_doc.version = 2;\n    rainbow_utils.sample_preview_records_from_context(rbql_context, dst_message, preview_window_size, cached_table_parse_result);\n    assert.equal(dst_message.actual_start_record, 11);\n    assert.deepEqual([['l1', 'l2'], ['m1', 'm2']], dst_message.preview_records);\n    assert.equal(dst_message.preview_sampling_error, undefined);\n    assert.deepEqual([['a1', 'a2'], ['b1', 'b2'], ['c1', 'c2'], ['d1', 'd2'], ['e1', 'e2'], ['f1', 'f2'], ['g1', 'g2'], ['h1', 'h2'], ['i1', 'i2'], ['j1', 'j2'], ['k1', 'k2'], ['l1', 'l2'], ['m1', 'm2'], ['n1', 'n2'], ['o1', 'o2']], cached_table_parse_result.get(doc_file_name)[0]);\n    assert.equal(undefined, cached_table_parse_result.get(doc_file_name)[1]); // First failed line.\n    assert.equal(2, cached_table_parse_result.get(doc_file_name)[2]); // Doc verion.\n}\n\n\nfunction test_show_lint_status_bar_button() {\n    let [extension_context, file_path, language_id, fields_info, first_defective_line, first_trailing_space_line] = [null, null, null, null, null, null];\n\n    // Test \"is processing\" display status.\n    extension_context = {lint_results: new Map()};\n    file_path = 'fake_path.txt';\n    language_id = 'fake_csv_language_id';\n    lint_cache_key = `${file_path}.${language_id}`;\n    extension_context.lint_results.set(lint_cache_key, {is_processing: true, is_ok: true}); // Adding `is_ok` to test that it has no affect.\n    rainbow_utils.show_lint_status_bar_button(vscode_test_double, extension_context, file_path, language_id);\n    assert.equal(extension_context.lint_status_bar_button.is_visible, true);\n    assert.equal(extension_context.lint_status_bar_button.tooltip, 'Processing\\nClick to recheck');\n\n    // Test that missing cache key entry doesn't create a new item.\n    extension_context = {lint_results: new Map()};\n    file_path = 'fake_path.txt';\n    language_id = 'fake_csv_language_id';\n    lint_cache_key = `${file_path}.${language_id}.bad`;\n    extension_context.lint_results.set(lint_cache_key, {is_processing: true});\n    rainbow_utils.show_lint_status_bar_button(vscode_test_double, extension_context, file_path, language_id);\n    assert.equal(extension_context.lint_status_bar_button, undefined);\n\n    // First defective line test. First trailing space line and inconsistent fields info should have no effect on the result.\n    extension_context = {lint_results: new Map()};\n    first_defective_line = 10;\n    first_trailing_space_line = 5;\n    fields_info = new Map([[2, 0], [3, 2]]);\n    file_path = 'fake_path.txt';\n    language_id = 'fake_csv_language_id';\n    lint_cache_key = `${file_path}.${language_id}`;\n    extension_context.lint_results.set(lint_cache_key, {first_defective_line: first_defective_line, fields_info: fields_info, first_trailing_space_line: first_trailing_space_line});\n    rainbow_utils.show_lint_status_bar_button(vscode_test_double, extension_context, file_path, language_id);\n    assert.equal(extension_context.lint_status_bar_button.is_visible, true);\n    assert.equal(extension_context.lint_status_bar_button.tooltip, 'Error. Line 10 has formatting error: double quote chars are not consistent\\nClick to recheck');\n\n    // Inconsistent fields info test. First trailing space line should have no effect on the result.\n    extension_context = {lint_results: new Map()};\n    first_trailing_space_line = 5;\n    fields_info = new Map([[2, 0], [1, 10], [4, 15], [3, 2]]);\n    file_path = 'fake_path.txt';\n    language_id = 'fake_csv_language_id';\n    lint_cache_key = `${file_path}.${language_id}`;\n    extension_context.lint_results.set(lint_cache_key, {fields_info: fields_info, first_trailing_space_line: first_trailing_space_line});\n    rainbow_utils.show_lint_status_bar_button(vscode_test_double, extension_context, file_path, language_id);\n    assert.equal(extension_context.lint_status_bar_button.is_visible, true);\n    assert.equal(extension_context.lint_status_bar_button.tooltip, 'Error. Number of fields is not consistent: e.g. record 1 has 2 fields, and record 3 has 3 fields\\nClick to recheck');\n\n    // Test first trailing space line.\n    extension_context = {lint_results: new Map()};\n    first_trailing_space_line = 0; // Even zero line should trigger the warning - test against dumb `!first_trailing_space_line` check.\n    file_path = 'fake_path.txt';\n    language_id = 'fake_csv_language_id';\n    lint_cache_key = `${file_path}.${language_id}`;\n    extension_context.lint_results.set(lint_cache_key, {first_trailing_space_line: first_trailing_space_line, is_ok: true});\n    rainbow_utils.show_lint_status_bar_button(vscode_test_double, extension_context, file_path, language_id);\n    assert.equal(extension_context.lint_status_bar_button.is_visible, true);\n    assert.equal(extension_context.lint_status_bar_button.tooltip, 'Leading/Trailing spaces detected: e.g. at line 1. Run \"Shrink\" command to remove them\\nClick to recheck');\n\n    // Test OK lint status - no errors/warnings.\n    extension_context = {lint_results: new Map()};\n    file_path = 'fake_path.txt';\n    language_id = 'fake_csv_language_id';\n    lint_cache_key = `${file_path}.${language_id}`;\n    extension_context.lint_results.set(lint_cache_key, {is_ok: true});\n    rainbow_utils.show_lint_status_bar_button(vscode_test_double, extension_context, file_path, language_id);\n    assert.equal(extension_context.lint_status_bar_button.is_visible, true);\n    assert.equal(extension_context.lint_status_bar_button.tooltip, 'OK\\nClick to recheck');\n}\n\n\nfunction test_get_cursor_position_info() {\n    let [doc_lines, active_doc, delim, policy, comment_prefix, position, position_info] = [null, null, null, null, null, null, null];\n\n    // Basic test.\n    doc_lines = [\n        'a1,a2', \n        'b1,b2', \n        '#comment', \n        'c1,c2', \n        'd1,d2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    delim = ',';\n    policy = 'simple';\n    comment_prefix = '#';\n    position = new VscodePositionTestDouble(/*line=*/3, /*character=*/3);\n    position_info = rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, position);\n    assert.deepEqual({column_number: 1, total_columns: 2, split_warning: false}, position_info);\n\n    // Delim character maps to preceeding field.\n    doc_lines = [\n        'a1,a2', \n        'b1,b2', \n        '#comment', \n        'c1,c2', \n        'd1,d2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    delim = ',';\n    policy = 'simple';\n    comment_prefix = '#';\n    position = new VscodePositionTestDouble(/*line=*/3, /*character=*/2);\n    position_info = rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, position);\n    assert.deepEqual({column_number: 0, total_columns: 2, split_warning: false}, position_info);\n\n    // Basic test, comment\n    doc_lines = [\n        'a1,a2', \n        'b1,b2', \n        '#comment', \n        'c1,c2', \n        'd1,d2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    delim = ',';\n    policy = 'simple';\n    comment_prefix = '#';\n    position = new VscodePositionTestDouble(/*line=*/2, /*character=*/5);\n    position_info = rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, position);\n    assert.deepEqual({is_comment: true}, position_info);\n\n    // Column info for the last character in line.\n    doc_lines = [\n        'a1,a2', \n        'b1,b2', \n        '#comment', \n        'c1,c2', \n        'd1,d2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    delim = ',';\n    policy = 'simple';\n    comment_prefix = '#';\n    position = new VscodePositionTestDouble(/*line=*/3, /*character=*/4);\n    position_info = rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, position);\n    assert.deepEqual({column_number: 1, total_columns: 2, split_warning: false}, position_info);\n\n    // Multicharacter separator test - critical locations across field boundaries.\n    doc_lines = [\n        'a1@@@a2@@@a3', \n        'b1@@@b2@@@b3', \n        '#comment', \n        'c1@@@c2@@@c3', \n        'd1@@@d2@@@d3'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    delim = '@@@';\n    policy = 'simple';\n    comment_prefix = '#';\n    assert.deepEqual({column_number: 0, total_columns: 3, split_warning: false}, rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, new VscodePositionTestDouble(/*line=*/3, /*character=*/4)));\n    assert.deepEqual({column_number: 1, total_columns: 3, split_warning: false}, rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, new VscodePositionTestDouble(/*line=*/3, /*character=*/5)));\n    assert.deepEqual({column_number: 1, total_columns: 3, split_warning: false}, rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, new VscodePositionTestDouble(/*line=*/3, /*character=*/9)));\n    assert.deepEqual({column_number: 2, total_columns: 3, split_warning: false}, rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, new VscodePositionTestDouble(/*line=*/3, /*character=*/10)));\n\n    // Column info for whitespace policy.\n    doc_lines = [\n        'a1  a2 ', \n        'b1    b2', \n        '$$comment', \n        '$c1  c2  ', \n        'd1   d2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    delim = ' ';\n    policy = 'whitespace';\n    comment_prefix = '$$';\n    assert.deepEqual({column_number: 0, total_columns: 2, split_warning: false}, rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, new VscodePositionTestDouble(/*line=*/3, /*character=*/0)));\n    assert.deepEqual({column_number: 0, total_columns: 2, split_warning: false}, rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, new VscodePositionTestDouble(/*line=*/3, /*character=*/4)));\n    assert.deepEqual({column_number: 1, total_columns: 2, split_warning: false}, rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, new VscodePositionTestDouble(/*line=*/3, /*character=*/5)));\n    assert.deepEqual({is_comment: true}, rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, new VscodePositionTestDouble(/*line=*/2, /*character=*/6)));\n\n    // Test with quoted policy and split warning.\n    doc_lines = [\n        'a1,a2', \n        '$b1,\"b2', \n        '$$comment', \n        '\"c1,\"\"c1\"\"\",c2', \n        'd1,d2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    delim = ',';\n    policy = 'quoted';\n    comment_prefix = '$$';\n    assert.deepEqual({column_number: 0, total_columns: 2, split_warning: false}, rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, new VscodePositionTestDouble(/*line=*/3, /*character=*/11)));\n    assert.deepEqual({column_number: 1, total_columns: 2, split_warning: false}, rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, new VscodePositionTestDouble(/*line=*/3, /*character=*/12)));\n    assert.deepEqual({column_number: 1, total_columns: 2, split_warning: true}, rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, new VscodePositionTestDouble(/*line=*/1, /*character=*/4)));\n    assert.deepEqual({is_comment: true}, rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, new VscodePositionTestDouble(/*line=*/2, /*character=*/6)));\n\n    // Quoted RFC policy test.\n    doc_lines = [\n        'a1,a2', \n        '#comment', \n        'b1,\"b2', \n        '#not a \"\"comment\"\", inside multiline field!', \n        'd1,d2\"', \n        'e1,\"e2,e2\"', \n        'f1,\"f2'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    delim = ',';\n    policy = 'quoted_rfc';\n    comment_prefix = '#';\n    assert.deepEqual({is_comment: true}, rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, new VscodePositionTestDouble(/*line=*/1, /*character=*/6)));\n    assert.deepEqual({column_number: 1, total_columns: 2, split_warning: false}, rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, new VscodePositionTestDouble(/*line=*/3, /*character=*/6)));\n    assert.deepEqual({column_number: 1, total_columns: 2, split_warning: false}, rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, new VscodePositionTestDouble(/*line=*/4, /*character=*/5)));\n    assert.deepEqual({column_number: 1, total_columns: 2, split_warning: false}, rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, new VscodePositionTestDouble(/*line=*/5, /*character=*/3)));\n    assert.equal(null, rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, new VscodePositionTestDouble(/*line=*/6, /*character=*/1)));\n    assert.equal(null, rainbow_utils.get_cursor_position_info(vscode_test_double, active_doc, delim, policy, comment_prefix, new VscodePositionTestDouble(/*line=*/6, /*character=*/3)));\n}\n\n\nfunction test_align_columns() {\n    let [unaligned_doc_lines, active_doc, delim, policy, comment_prefix] = [null, null, null, null, null];\n    let [column_stats, first_failed_line, records, comments] = [null, null, null, null];\n    let [aligned_doc_text, aligned_doc_lines, expected_doc_lines] = [null, null]\n\n    // Basic test with numeric column.\n    unaligned_doc_lines = [\n        'type,weight',\n        'car,100',\n        'ship,20000'\n    ];\n    active_doc = new VscodeDocumentTestDouble(unaligned_doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted';\n    [column_stats, first_failed_line, records, comments] = rainbow_utils.calc_column_stats(active_doc, delim, policy, comment_prefix);\n    column_stats = rainbow_utils.adjust_column_stats(column_stats, delim.length);\n    aligned_doc_text = rainbow_utils.align_columns(records, comments, column_stats, delim);\n    aligned_doc_lines = aligned_doc_text.split('\\n');\n    expected_doc_lines = [\n        'type ,weight',\n        'car  ,   100',\n        'ship , 20000'\n    ];\n    assert.deepEqual(expected_doc_lines, aligned_doc_lines);\n\n    // Basic test with string-only columns.\n    unaligned_doc_lines = [\n        'type,color',\n        'car,red',\n        'ship,orange'\n    ];\n    active_doc = new VscodeDocumentTestDouble(unaligned_doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted';\n    [column_stats, first_failed_line, records, comments] = rainbow_utils.calc_column_stats(active_doc, delim, policy, comment_prefix);\n    column_stats = rainbow_utils.adjust_column_stats(column_stats, delim.length);\n    aligned_doc_text = rainbow_utils.align_columns(records, comments, column_stats, delim);\n    aligned_doc_lines = aligned_doc_text.split('\\n');\n    expected_doc_lines = [\n        'type ,color',\n        'car  ,red',\n        'ship ,orange'\n    ];\n    assert.deepEqual(expected_doc_lines, aligned_doc_lines);\n\n    // Basic test with float column and random spaces.\n    unaligned_doc_lines = [\n        '  type, wght,  color ',\n        '  car  ,   1.008  ,   red',\n        '   ship ,  200.5  ,  yellow'\n    ];\n    active_doc = new VscodeDocumentTestDouble(unaligned_doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted';\n    [column_stats, first_failed_line, records, comments] = rainbow_utils.calc_column_stats(active_doc, delim, policy, comment_prefix);\n    column_stats = rainbow_utils.adjust_column_stats(column_stats, delim.length);\n    aligned_doc_text = rainbow_utils.align_columns(records, comments, column_stats, delim);\n    aligned_doc_lines = aligned_doc_text.split('\\n');\n    expected_doc_lines = [\n        'type ,wght    ,color',\n        'car  ,  1.008 ,red',\n        'ship ,200.5   ,yellow'\n    ];\n    assert.deepEqual(expected_doc_lines, aligned_doc_lines);\n\n    // Basic test with comment lines and last empty line which should not diappear after alignment.\n    unaligned_doc_lines = [\n        '#info',\n        'type,weight',\n        '#foo,foo',\n        '#m',\n        'car,100',\n        'ship,20000',\n        '#bar', '#bar', ''\n    ];\n    active_doc = new VscodeDocumentTestDouble(unaligned_doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted_rfc';\n    [column_stats, first_failed_line, records, comments] = rainbow_utils.calc_column_stats(active_doc, delim, policy, comment_prefix);\n    column_stats = rainbow_utils.adjust_column_stats(column_stats, delim.length);\n    aligned_doc_text = rainbow_utils.align_columns(records, comments, column_stats, delim);\n    aligned_doc_lines = aligned_doc_text.split('\\n');\n    expected_doc_lines = [\n        '#info',\n        'type ,weight',\n        '#foo,foo',\n        '#m',\n        'car  ,   100',\n        'ship , 20000',\n        '#bar',\n        '#bar',\n        ''\n    ];\n    assert.deepEqual(expected_doc_lines, aligned_doc_lines);\n\n    // RFC multiline fields test.\n    unaligned_doc_lines = [\n        'type,info,max_speed',\n        'car,\"A nice red car.',\n        'Can get you \"\"anywhere\"\" you want.',\n        'GPS included\",100',\n        'ship,\"Big heavy superfreighter \"\"Yamaha-2000\"\".',\n        'Comes with a crew of 10\",25'\n    ];\n    active_doc = new VscodeDocumentTestDouble(unaligned_doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted_rfc';\n    [column_stats, first_failed_line, records, comments] = rainbow_utils.calc_column_stats(active_doc, delim, policy, comment_prefix);\n    column_stats = rainbow_utils.adjust_column_stats(column_stats, delim.length);\n    aligned_doc_text = rainbow_utils.align_columns(records, comments, column_stats, delim);\n    aligned_doc_lines = aligned_doc_text.split('\\n');\n    expected_doc_lines = [\n        'type ,info                                       ,max_speed',\n        'car  ,\"A nice red car.',\n        '      Can get you \"\"anywhere\"\" you want.',\n        '      GPS included\"                              ,      100',\n        'ship ,\"Big heavy superfreighter \"\"Yamaha-2000\"\".',\n        '      Comes with a crew of 10\"                   ,       25'\n    ];\n    assert.deepEqual(expected_doc_lines, aligned_doc_lines);\n\n    // Test with syntax error.\n    unaligned_doc_lines = [\n        'type,color',\n        'car,red',\n        'ship\",orange'\n    ];\n    active_doc = new VscodeDocumentTestDouble(unaligned_doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted';\n    [column_stats, first_failed_line, records, comments] = rainbow_utils.calc_column_stats(active_doc, delim, policy, comment_prefix);\n    assert.equal(null, column_stats);\n    assert.equal(3, first_failed_line);\n    assert.equal(null, records);\n}\n\nfunction test_shrink_columns() {\n    let [original_doc_lines, active_doc, delim, policy, comment_prefix] = [null, null, null, null, null];\n    let [first_failed_line, shrinked_doc_text, shrinked_doc_lines, expected_doc_lines] = [null, null, null, null];\n\n    // Basic test.\n    original_doc_lines = [\n        '  type  , weight, color',\n        ' car,100  , yellow   ',\n        'ship,20000,red'\n    ];\n    active_doc = new VscodeDocumentTestDouble(original_doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted';\n    [shrinked_doc_text, first_failed_line] = rainbow_utils.shrink_columns(active_doc, delim, policy, comment_prefix);\n    shrinked_doc_lines = shrinked_doc_text.split('\\n');\n    expected_doc_lines = [\n        'type,weight,color',\n        'car,100,yellow',\n        'ship,20000,red'\n    ];\n    assert.deepEqual(expected_doc_lines, shrinked_doc_lines);\n\n    // No edits (already shrinked) should be reported as null.\n    original_doc_lines = [\n        'type,weight,color',\n        'car,100,yellow',\n        'ship,20000,red'\n    ];\n    active_doc = new VscodeDocumentTestDouble(original_doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted';\n    [shrinked_doc_text, first_failed_line] = rainbow_utils.shrink_columns(active_doc, delim, policy, comment_prefix);\n    assert.equal(null, first_failed_line);\n    assert.equal(null, shrinked_doc_text);\n\n    // Test with comments and last trailing line.\n    original_doc_lines = [\n        '#hello',\n        '  type  , weight, color',\n        '#foo',\n        '#bar',\n        ' car,100  , yellow   ',\n        'ship,20000,red',\n        '# foo , bar',\n        ''\n    ];\n    active_doc = new VscodeDocumentTestDouble(original_doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted';\n    [shrinked_doc_text, first_failed_line] = rainbow_utils.shrink_columns(active_doc, delim, policy, comment_prefix);\n    shrinked_doc_lines = shrinked_doc_text.split('\\n');\n    expected_doc_lines = [\n        '#hello',\n        'type,weight,color',\n        '#foo',\n        '#bar',\n        'car,100,yellow',\n        'ship,20000,red',\n        '# foo , bar',\n        ''\n    ];\n    assert.deepEqual(expected_doc_lines, shrinked_doc_lines);\n\n    // Test with syntax error.\n    original_doc_lines = [\n        '  type  , weight, color',\n        ' car,100  , yellow   ',\n        'ship,20000\",red'\n    ];\n    active_doc = new VscodeDocumentTestDouble(original_doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted';\n    [shrinked_doc_text, first_failed_line] = rainbow_utils.shrink_columns(active_doc, delim, policy, comment_prefix);\n    assert.equal(first_failed_line, 3);\n    assert.equal(shrinked_doc_text, null);\n\n    // RFC multiline fields test.\n    original_doc_lines = [\n        'type ,info                                       ,max_speed',\n        'car  ,\"A nice red car.',\n        '      Can get you \"\"anywhere\"\" you want.',\n        '      GPS included\"                              ,      100',\n        'ship ,\"Big heavy superfreighter \"\"Yamaha-2000\"\".',\n        '      Comes with a crew of 10\"                   ,       25'\n    ];\n    active_doc = new VscodeDocumentTestDouble(original_doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted_rfc';\n    [shrinked_doc_text, first_failed_line] = rainbow_utils.shrink_columns(active_doc, delim, policy, comment_prefix);\n    shrinked_doc_lines = shrinked_doc_text.split('\\n');\n    expected_doc_lines = [\n        'type,info,max_speed',\n        'car,\"A nice red car.',\n        'Can get you \"\"anywhere\"\" you want.',\n        'GPS included\",100',\n        'ship,\"Big heavy superfreighter \"\"Yamaha-2000\"\".',\n        'Comes with a crew of 10\",25'\n    ];\n    assert.deepEqual(expected_doc_lines, shrinked_doc_lines);\n\n    // RFC multiline fields test with no edits.\n    original_doc_lines = [\n        'type,info,max_speed',\n        'car,\"A nice red car.',\n        'Can get you \"\"anywhere\"\" you want.',\n        'GPS included\",100',\n        'ship,\"Big heavy superfreighter \"\"Yamaha-2000\"\".',\n        'Comes with a crew of 10\",25'\n    ];\n    active_doc = new VscodeDocumentTestDouble(original_doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted_rfc';\n    [shrinked_doc_text, first_failed_line] = rainbow_utils.shrink_columns(active_doc, delim, policy, comment_prefix);\n    assert.equal(null, first_failed_line);\n    assert.equal(null, shrinked_doc_text);\n}\n\n\nfunction get_all_entries(record_comment_merger) {\n    let result = [];\n    while (record_comment_merger.has_entries_left()) {\n        result.push(record_comment_merger.get_next());\n    }\n    return result;\n}\n\n\nfunction test_record_comment_merger() {\n    let [records, comments] = [null, null];\n    let record_comment_merger = null;\n    let [entries, expected_entries] = [null, null];\n\n    // Basic test.\n    records = [\n        'hello', \n        'world'\n    ];\n    comments = [\n        {record_num: 0, comment_text: '#foo'},\n        {record_num: 2, comment_text: '#bar1'},\n        {record_num: 2, comment_text: '#bar2'}\n    ];\n    record_comment_merger = new rainbow_utils.RecordCommentMerger(records, comments);\n    entries = get_all_entries(record_comment_merger);\n    expected_entries = [\n        [null, '#foo'], \n        ['hello', null], \n        ['world', null],\n        [null, '#bar1'], \n        [null, '#bar2'], \n    ];\n    assert.deepEqual(expected_entries, entries);\n\n    // No records.\n    records = [\n    ];\n    comments = [\n        {record_num: 0, comment_text: '#foo'},\n        {record_num: 2, comment_text: '#bar1'},\n        {record_num: 2, comment_text: '#bar2'}\n    ];\n    record_comment_merger = new rainbow_utils.RecordCommentMerger(records, comments);\n    entries = get_all_entries(record_comment_merger);\n    expected_entries = [\n        [null, '#foo'], \n        [null, '#bar1'], \n        [null, '#bar2'], \n    ];\n    assert.deepEqual(expected_entries, entries);\n\n    // No comments.\n    records = [\n        'hello', \n        'world'\n    ];\n    comments = [\n    ];\n    record_comment_merger = new rainbow_utils.RecordCommentMerger(records, comments);\n    entries = get_all_entries(record_comment_merger);\n    expected_entries = [\n        ['hello', null], \n        ['world', null],\n    ];\n    assert.deepEqual(expected_entries, entries);\n\n    // No records and no comments.\n    records = [\n    ];\n    comments = [\n    ];\n    record_comment_merger = new rainbow_utils.RecordCommentMerger(records, comments);\n    entries = get_all_entries(record_comment_merger);\n    expected_entries = [\n    ];\n    assert.deepEqual(expected_entries, entries);\n}\n\n\nfunction test_generate_column_edit_selections() {\n    let [doc_lines, active_doc, delim, policy, comment_prefix, edit_mode, col_num] = [null, null, null, null, null, null, null];\n    let [selections, error_msg, warning_msg] = [null, null, null];\n    let [expected_selections, expected_error_msg, expected_warning_msg] = [null, null, null];\n\n    // Basic test.\n    doc_lines = [\n        'type,weight,color',\n        'car,100,yellow',\n        'ship,20000,red'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted';\n    edit_mode = 'ce_before';\n    col_num = 1; // 0-based.\n    [selections, error_msg, warning_msg] = rainbow_utils.generate_column_edit_selections(vscode_test_double, active_doc, delim, policy, comment_prefix, edit_mode, col_num);\n    assert.equal(null, error_msg);\n    assert.equal(null, warning_msg);\n    expected_selections = [\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(0, 5), new VscodePositionTestDouble(0, 5)),\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(1, 4), new VscodePositionTestDouble(1, 4)),\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(2, 5), new VscodePositionTestDouble(2, 5)),\n    ];\n    assert.deepEqual(expected_selections, selections);\n\n    // Basic test with quoted_rfc.\n    doc_lines = [\n        'type,weight,color',\n        'car,100,yellow',\n        'ship,20000,red'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted_rfc';\n    edit_mode = 'ce_before';\n    col_num = 1; // 0-based.\n    [selections, error_msg, warning_msg] = rainbow_utils.generate_column_edit_selections(vscode_test_double, active_doc, delim, policy, comment_prefix, edit_mode, col_num);\n    assert.equal(null, error_msg);\n    assert.equal(null, warning_msg);\n    expected_selections = [\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(0, 5), new VscodePositionTestDouble(0, 5)),\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(1, 4), new VscodePositionTestDouble(1, 4)),\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(2, 5), new VscodePositionTestDouble(2, 5)),\n    ];\n    assert.deepEqual(expected_selections, selections);\n\n    // Test with multiline fields.\n    doc_lines = [\n        'type,weight,color',\n        'car,100,\"yellow',\n        ' and black\"',\n        'ship,20000,red'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted_rfc';\n    edit_mode = 'ce_before';\n    col_num = 1; // 0-based.\n    [selections, error_msg, warning_msg] = rainbow_utils.generate_column_edit_selections(vscode_test_double, active_doc, delim, policy, comment_prefix, edit_mode, col_num);\n    assert.equal('Column edit mode is not supported for files with multiline fields', error_msg);\n\n    // Basic test with comments.\n    doc_lines = [\n        'type,weight,color',\n        'car,100,yellow',\n        '#hello world',\n        'ship,20000,red'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted';\n    edit_mode = 'ce_before';\n    col_num = 1; // 0-based.\n    [selections, error_msg, warning_msg] = rainbow_utils.generate_column_edit_selections(vscode_test_double, active_doc, delim, policy, comment_prefix, edit_mode, col_num);\n    assert.equal(null, error_msg);\n    assert.equal(null, warning_msg);\n    expected_selections = [\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(0, 5), new VscodePositionTestDouble(0, 5)),\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(1, 4), new VscodePositionTestDouble(1, 4)),\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(3, 5), new VscodePositionTestDouble(3, 5)),\n    ];\n    assert.deepEqual(expected_selections, selections);\n\n    // Test with quoting error.\n    doc_lines = [\n        'type,weight,color',\n        'car,100,yellow \" red',\n        'ship,20000,red'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted';\n    edit_mode = 'ce_before';\n    col_num = 1; // 0-based.\n    [selections, error_msg, warning_msg] = rainbow_utils.generate_column_edit_selections(vscode_test_double, active_doc, delim, policy, comment_prefix, edit_mode, col_num);\n    assert.equal('Unable to enter column edit mode: quoting error at line 2', error_msg);\n    assert.equal(null, warning_msg);\n    assert.deepEqual(null, selections);\n\n    // Test with inconsistent fields length.\n    doc_lines = [\n        'type,weight,color',\n        'car,100,yellow',\n        'rocket,1000',\n        'ship,20000,red'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted';\n    edit_mode = 'ce_before';\n    col_num = 2; // 0-based.\n    [selections, error_msg, warning_msg] = rainbow_utils.generate_column_edit_selections(vscode_test_double, active_doc, delim, policy, comment_prefix, edit_mode, col_num);\n    assert.equal('Line 3 doesn\\'t have field number 3', error_msg);\n    assert.equal(null, warning_msg);\n    assert.deepEqual(null, selections);\n\n    // Test with \"ce_before\" and a double quote in proximity.\n    doc_lines = [\n        'type,weight,color',\n        'car,\"100\",yellow',\n        'ship,20000,red'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted';\n    edit_mode = 'ce_before';\n    col_num = 1; // 0-based.\n    [selections, error_msg, warning_msg] = rainbow_utils.generate_column_edit_selections(vscode_test_double, active_doc, delim, policy, comment_prefix, edit_mode, col_num);\n    assert.equal(null, error_msg);\n    assert.equal(\"Be careful, cursor at line 2 has a double quote is in proximity.\", warning_msg);\n    expected_selections = [\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(0, 5), new VscodePositionTestDouble(0, 5)),\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(1, 4), new VscodePositionTestDouble(1, 4)),\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(2, 5), new VscodePositionTestDouble(2, 5)),\n    ];\n    assert.deepEqual(expected_selections, selections);\n\n    // Test with \"ce_after\" and a double quote in proximity.\n    doc_lines = [\n        'type,weight,color',\n        'car,\"100\",yellow',\n        'ship,20000,red'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = ',';\n    policy = 'quoted';\n    edit_mode = 'ce_after';\n    col_num = 1; // 0-based.\n    [selections, error_msg, warning_msg] = rainbow_utils.generate_column_edit_selections(vscode_test_double, active_doc, delim, policy, comment_prefix, edit_mode, col_num);\n    assert.equal(null, error_msg);\n    assert.equal(\"Be careful, cursor at line 2 has a double quote is in proximity.\", warning_msg);\n    expected_selections = [\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(0, 11), new VscodePositionTestDouble(0, 11)),\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(1, 9), new VscodePositionTestDouble(1, 9)),\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(2, 10), new VscodePositionTestDouble(2, 10)),\n    ];\n    assert.deepEqual(expected_selections, selections);\n\n    // Test with \"ce_select\" and an empty field.\n    doc_lines = [\n        'type\\tweight\\tcolor',\n        'car\\t\\tyellow',\n        'ship\\t20000\\tred'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = '\\t';\n    policy = 'simple';\n    edit_mode = 'ce_select';\n    col_num = 1; // 0-based.\n    [selections, error_msg, warning_msg] = rainbow_utils.generate_column_edit_selections(vscode_test_double, active_doc, delim, policy, comment_prefix, edit_mode, col_num);\n    assert.equal(null, error_msg);\n    assert.equal(\"Be careful, Field 2 at line 2 is empty.\", warning_msg);\n    expected_selections = [\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(0, 5), new VscodePositionTestDouble(0, 11)),\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(1, 4), new VscodePositionTestDouble(1, 4)),\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(2, 5), new VscodePositionTestDouble(2, 10)),\n    ];\n    assert.deepEqual(expected_selections, selections);\n\n    // Test with \"ce_after\", double quote in proximity and simple policy.\n    doc_lines = [\n        'type|weight|color',\n        'car|\"100\"|yellow',\n        'ship|20000|red'\n    ];\n    active_doc = new VscodeDocumentTestDouble(doc_lines);\n    comment_prefix = '#';\n    delim = '|';\n    policy = 'simple';\n    edit_mode = 'ce_after';\n    col_num = 1; // 0-based.\n    [selections, error_msg, warning_msg] = rainbow_utils.generate_column_edit_selections(vscode_test_double, active_doc, delim, policy, comment_prefix, edit_mode, col_num);\n    assert.equal(null, error_msg);\n    assert.equal(null, warning_msg);\n    expected_selections = [\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(0, 11), new VscodePositionTestDouble(0, 11)),\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(1, 9), new VscodePositionTestDouble(1, 9)),\n        new VscodeSelectionTestDouble(new VscodePositionTestDouble(2, 10), new VscodePositionTestDouble(2, 10)),\n    ];\n    assert.deepEqual(expected_selections, selections);\n}\n\n\nfunction test_all() {\n    test_align_stats();\n    test_field_align();\n    test_rfc_field_align();\n    test_align_columns();\n    test_shrink_columns();\n    test_calc_column_stats();\n    test_adjust_column_stats();\n    test_parse_document_records();\n    test_parse_document_range_rfc();\n    test_is_opening_rfc_line();\n    test_sample_preview_records_from_context();\n    test_show_lint_status_bar_button();\n    test_get_cursor_position_info();\n    test_record_comment_merger();\n    test_generate_column_edit_selections();\n}\n\nexports.test_all = test_all;\nexports.VscodePositionTestDouble = VscodePositionTestDouble;\nexports.VscodeRangeTestDouble = VscodeRangeTestDouble;\nexports.VscodeDocumentTestDouble = VscodeDocumentTestDouble;\nexports.vscode_test_double = vscode_test_double;\n","module.exports = require(\"vscode\");","'use strict';\n\nvar possibleNames = [\n\t'BigInt64Array',\n\t'BigUint64Array',\n\t'Float32Array',\n\t'Float64Array',\n\t'Int16Array',\n\t'Int32Array',\n\t'Int8Array',\n\t'Uint16Array',\n\t'Uint32Array',\n\t'Uint8Array',\n\t'Uint8ClampedArray'\n];\n\nvar g = typeof globalThis === 'undefined' ? global : globalThis;\n\nmodule.exports = function availableTypedArrays() {\n\tvar out = [];\n\tfor (var i = 0; i < possibleNames.length; i++) {\n\t\tif (typeof g[possibleNames[i]] === 'function') {\n\t\t\tout[out.length] = possibleNames[i];\n\t\t}\n\t}\n\treturn out;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","const assert = require('assert');\nconst os = require('os');\n\nconst vscode = require('vscode');\n\nconst rainbow_utils = require('../../rainbow_utils.js');\nconst unit_tests = require('./unit_tests.js');\n\n\n// The only reason why we are importing extension as a module here is to run some small unit tests like autodetect_dialect_frequency_based.\n// All other functionality such as commands and highlighting would work without this import/require line, since the extension is activated using VSCode internal mechanisms.\n// So the require/import extension line below can be deleted and all of the main integration tests would still pass.\nconst extension = require('../../extension.js');\n\n\nconst is_web_ext = (os.homedir === undefined); // Runs as web extension in browser.\n\n// TODO make RBQL command wait for the result to reduce the timeout.\nconst poor_rbql_async_design_workaround_timeout = 6000;\n\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\nasync function SetCursorToTheTopAtStartWorkaround() {\n    await sleep(200);\n    // Calling \"cursorTop\" is a workaround for in-UI testing mode - the file can be reopened with the cursor at some random position.\n    // It is not clear how to properly fix this.\n    await vscode.commands.executeCommand(\"cursorTop\");\n}\n\n\nfunction log_message(msg) {\n    console.log('###RAINBOW_CSV_UNIT_TEST_MESSAGE### ' + msg);\n}\n\n\nasync function test_comment_prefix_js(test_folder_uri) {\n    let [uri, active_doc, editor, lint_report] = [null, null, null, null];\n    uri = vscode.Uri.joinPath(test_folder_uri, 'csv_files', 'countries_with_comments.csv');\n    active_doc = await vscode.workspace.openTextDocument(uri);\n    editor = await vscode.window.showTextDocument(active_doc);\n    await sleep(1000);\n\n    lint_report = await vscode.commands.executeCommand('rainbow-csv.CSVLint');\n    assert(!lint_report.is_ok); // Lint is failing because we mistakenly treat comment lines as records.\n\n    await SetCursorToTheTopAtStartWorkaround();\n    await vscode.commands.executeCommand(\"cursorRightSelect\");\n    await vscode.commands.executeCommand(\"cursorRightSelect\");\n    await sleep(1000);\n    await vscode.commands.executeCommand('rainbow-csv.SetCommentPrefix');\n    await sleep(1500);\n\n    lint_report = await vscode.commands.executeCommand('rainbow-csv.CSVLint');\n    assert(lint_report.is_ok); // Lint is OK because we marked comment lines as comments.\n    await sleep(1000);\n\n    // Now lets toggle the comment.\n    await vscode.commands.executeCommand(\"cursorTop\");\n    await vscode.commands.executeCommand(\"cursorRight\");\n    await vscode.commands.executeCommand(\"cursorRight\");\n    await sleep(500);\n    await vscode.commands.executeCommand(\"editor.action.commentLine\");\n    lint_report = await vscode.commands.executeCommand('rainbow-csv.CSVLint');\n    assert(!lint_report.is_ok); // Lint is failing again because we toggled the first comment line.\n    await sleep(1000);\n    await vscode.commands.executeCommand(\"editor.action.commentLine\");\n    lint_report = await vscode.commands.executeCommand('rainbow-csv.CSVLint');\n    assert(lint_report.is_ok); // Lint is OK now because we toggled the first line again back to its comment state.\n    await sleep(1000);\n    // Undo twice to avoid unsaved changes for RBQL.\n    await vscode.commands.executeCommand(\"undo\");\n    await vscode.commands.executeCommand(\"undo\");\n    await sleep(1000);\n\n    let test_task = {rbql_backend: \"js\", rbql_query: \"SELECT a.Country, a.Population\", with_headers: true, integration_test_delay: 1500};\n    await vscode.commands.executeCommand('rainbow-csv.RBQL', test_task);\n    await sleep(poor_rbql_async_design_workaround_timeout);\n    active_doc = vscode.window.activeTextEditor.document;\n    let num_lines_after_query = active_doc.lineCount;\n    log_message(`Length after js query: ${num_lines_after_query}`);\n    let expected_num_lines = 11; // 10 records + header.\n    if (!is_web_ext) {\n        expected_num_lines += 1; // Standard non-web CSV writer adds a newline at the end.\n    }\n    assert.equal(expected_num_lines, num_lines_after_query);\n}\n\nasync function test_comment_prefix_python_rbql(test_folder_uri) {\n    let [uri, active_doc, editor, lint_report] = [null, null, null, null];\n    uri = vscode.Uri.joinPath(test_folder_uri, 'csv_files', 'countries_with_comments.csv');\n    active_doc = await vscode.workspace.openTextDocument(uri);\n    editor = await vscode.window.showTextDocument(active_doc);\n    await sleep(1000);\n    // Don't need to select comment prefix again since we already did it for this file in the previous test.\n    // Using Python native expressions to make sure that we are running python query.\n    let test_task = {rbql_backend: \"python\", rbql_query: \"SELECT '[{}]'.format(a.Country), int(a.Population) / 10\", with_headers: true, integration_test_delay: 1500};\n    await vscode.commands.executeCommand('rainbow-csv.RBQL', test_task);\n    await sleep(poor_rbql_async_design_workaround_timeout);\n    active_doc = vscode.window.activeTextEditor.document;\n    let num_lines_after_query = active_doc.lineCount;\n    log_message(`Length after python query: ${num_lines_after_query}`);\n    assert.equal(12, num_lines_after_query); // Ten records + header + trailing empty line = 12\n}\n\n\nasync function test_rbql_node(test_folder_uri) {\n    let [uri, active_doc, editor] = [null, null, null];\n\n    // Test comment prefix and js query with it.\n    await test_comment_prefix_js(test_folder_uri);\n    // Test comment prefix with python query.\n    await test_comment_prefix_python_rbql(test_folder_uri);\n\n    // Test Python query.\n    uri = vscode.Uri.joinPath(test_folder_uri, 'csv_files', 'university_ranking.csv');\n    active_doc = await vscode.workspace.openTextDocument(uri);\n    editor = await vscode.window.showTextDocument(active_doc);\n    await sleep(1000);\n    let test_task = {rbql_backend: \"python\", with_headers: true, rbql_query: \"select top 20 a1, math.ceil(float(a.total_score) * 100), a['university_name'], None, 'foo bar' order by a2\"};\n    await vscode.commands.executeCommand('rainbow-csv.RBQL', test_task);\n    await sleep(poor_rbql_async_design_workaround_timeout);\n    // Indirectly check reported warnings.\n    let state_report = await vscode.commands.executeCommand('rainbow-csv.InternalTest', {check_last_rbql_warnings: true});\n    assert.equal('[\"None values in output were replaced by empty strings\"]', JSON.stringify(state_report.warnings));\n    active_doc = vscode.window.activeTextEditor.document;\n    let length_after_query = active_doc.getText().length;\n    log_message(`Length after python query: ${length_after_query}`);\n    assert.equal(868, length_after_query); // wc -c gives smaller value. Probably VSCode uses '\\r\\n' as line ends.\n\n    // Test JS query.\n    test_task = {rbql_backend: \"js\", with_headers: false, rbql_query: \"select a2 * 10, a3, a3.length where NR > 1 order by a3.length limit 10\"};\n    await vscode.commands.executeCommand('rainbow-csv.RBQL', test_task);\n    await sleep(poor_rbql_async_design_workaround_timeout);\n    active_doc = vscode.window.activeTextEditor.document;\n    length_after_query = active_doc.getText().length;\n    log_message(`Length after js query: ${length_after_query}`);\n    assert.equal(268, length_after_query);\n\n    // Test RBQL query error reporting.\n    test_task = {rbql_backend: \"python\", rbql_query: \"select nonexistent_function(a1)\"};\n    await vscode.commands.executeCommand('rainbow-csv.RBQL', test_task);\n    await sleep(poor_rbql_async_design_workaround_timeout);\n    state_report = await vscode.commands.executeCommand('rainbow-csv.InternalTest', {check_last_rbql_report: true});\n    assert.equal('query execution', state_report.error_type);\n    assert.equal(\"At record 1, Details: name 'nonexistent_function' is not defined\", state_report.error_msg);\n\n    // Test with multiline records.\n    uri = vscode.Uri.joinPath(test_folder_uri, 'csv_files', 'synthetic_rfc_newline_data.csv');\n    active_doc = await vscode.workspace.openTextDocument(uri);\n    editor = await vscode.window.showTextDocument(active_doc);\n    await sleep(1000);\n    assert.equal(active_doc.languageId, 'dynamic csv');\n    test_task = {rbql_backend: \"js\", rbql_query: \"select '<<<<<', a3, a2, a1, '>>>>> NR: ' + NR\"};\n    await vscode.commands.executeCommand('rainbow-csv.RBQL', test_task);\n    await sleep(poor_rbql_async_design_workaround_timeout);\n    active_doc = vscode.window.activeTextEditor.document;\n    length_after_query = active_doc.getText().length;\n    log_message(`Length after js multiline-record query: ${length_after_query}`);\n    assert.equal(645, length_after_query);\n\n    // Test RBQL JOIN query.\n    uri = vscode.Uri.joinPath(test_folder_uri, 'csv_files', 'university_ranking.csv');\n    active_doc = await vscode.workspace.openTextDocument(uri);\n    editor = await vscode.window.showTextDocument(active_doc);\n    await sleep(1000);\n    test_task = {rbql_backend: \"python\", with_headers: true, rbql_query: \"select a.university_name, b.Country, b.Population, b['GDP per capita'] JOIN countries.csv on a.country == b.Country order by int(b.Population) desc\"};\n    await vscode.commands.executeCommand('rainbow-csv.RBQL', test_task);\n    await sleep(poor_rbql_async_design_workaround_timeout);\n    state_report = await vscode.commands.executeCommand('rainbow-csv.InternalTest', {check_last_rbql_warnings: true});\n    assert.equal('[\"The first record in JOIN file countries.csv was also treated as header (and skipped)\"]', JSON.stringify(state_report.warnings));\n    active_doc = vscode.window.activeTextEditor.document;\n    length_after_query = active_doc.getText().length;\n    log_message(`Length after join query: ${length_after_query}`);\n    // Not sure why it is 11592 and not 11610, when saving the file `wc -c` gives 11610.\n    assert.equal(11592, length_after_query);\n    // We have 202 not 201 because the trailing '\\n' maps to a trailing empty line in VSCode.\n    assert.equal(202, active_doc.lineCount);\n\n    // Test UPDATE, no warnings and copy back.\n    uri = vscode.Uri.joinPath(test_folder_uri, 'csv_files', 'countries.csv');\n    active_doc = await vscode.workspace.openTextDocument(uri);\n    let filename_before = active_doc.fileName;\n    let length_before_query = active_doc.getText().length;\n    editor = await vscode.window.showTextDocument(active_doc);\n    assert(active_doc.getText().indexOf('oceania') == -1);\n    assert(active_doc.getText().indexOf('OCEANIA') > 0);\n    await sleep(1000);\n\n    test_task = {rbql_backend: \"python\", with_headers: true, rbql_query: \"UPDATE set a.Region = a.Region.lower()\"};\n    await vscode.commands.executeCommand('rainbow-csv.RBQL', test_task);\n    await sleep(poor_rbql_async_design_workaround_timeout);\n    state_report = await vscode.commands.executeCommand('rainbow-csv.InternalTest', {check_last_rbql_warnings: true});\n    assert.equal('[]', JSON.stringify(state_report.warnings));\n    active_doc = vscode.window.activeTextEditor.document;\n    let filename_after = active_doc.fileName;\n    length_after_query = active_doc.getText().length;\n    log_message(`Length after update query: ${length_after_query}`);\n    // Changing column to lowercase should not affect the doc length if we account for the '\\r\\n' line endings.\n    assert.equal(length_before_query, length_after_query - active_doc.lineCount + 1);\n    assert(active_doc.getText().indexOf('OCEANIA') == -1);\n    assert(active_doc.getText().indexOf('oceania') > 0);\n\n    await sleep(1000);\n    await vscode.commands.executeCommand('rainbow-csv.CopyBack');\n    await sleep(1000);\n    active_doc = await vscode.workspace.openTextDocument(uri);\n    let filename_after_copy_back = active_doc.fileName;\n    // Make sure that the name stays the same as the original doc but the content has changed.\n    assert.equal(filename_before, filename_after_copy_back);\n    assert(active_doc.getText().indexOf('OCEANIA') == -1);\n    assert(active_doc.getText().indexOf('oceania') > 0);\n}\n\n\nasync function test_rbql_web(test_folder_uri) {\n    let [uri, active_doc, editor] = [null, null, null];\n\n    // Test comment prefix and js query with it.\n    await test_comment_prefix_js(test_folder_uri);\n\n    uri = vscode.Uri.joinPath(test_folder_uri, 'csv_files', 'university_ranking.csv');\n    active_doc = await vscode.workspace.openTextDocument(uri);\n    editor = await vscode.window.showTextDocument(active_doc);\n    await sleep(1000);\n    let test_task = {rbql_backend: \"js\", with_headers: true, rbql_query: \"select top 20 a1, Math.ceil(parseFloat(a.total_score) * 100), a['university_name'], null, 'foo bar' order by a2\"};\n    await vscode.commands.executeCommand('rainbow-csv.RBQL', test_task);\n    await sleep(poor_rbql_async_design_workaround_timeout);\n\n    // Indirectly check reported warnings.\n    let state_report = await vscode.commands.executeCommand('rainbow-csv.InternalTest', {check_last_rbql_warnings: true});\n    assert.equal('[\"null values in output were replaced by empty strings\"]', JSON.stringify(state_report.warnings));\n    active_doc = vscode.window.activeTextEditor.document;\n    let length_after_query = active_doc.getText().length;\n    log_message(`Length after first js query: ${length_after_query}`);\n    assert.equal(846, length_after_query);\n\n    test_task = {rbql_backend: \"js\", rbql_query: \"select a2 * 10, a3, a3.length where NR > 1 order by a3.length limit 10\"};\n    await vscode.commands.executeCommand('rainbow-csv.RBQL', test_task);\n    await sleep(poor_rbql_async_design_workaround_timeout);\n    active_doc = vscode.window.activeTextEditor.document;\n    length_after_query = active_doc.getText().length;\n    log_message(`Length after second js query: ${length_after_query}`);\n    // 267 instead of 268 because no trailing '\\n' at the end of file.\n    assert.equal(267, length_after_query);\n\n    // Test RBQL query error reporting.\n    test_task = {rbql_backend: \"js\", rbql_query: \"select nonexistent_function(a1)\"};\n    await vscode.commands.executeCommand('rainbow-csv.RBQL', test_task);\n    await sleep(poor_rbql_async_design_workaround_timeout);\n    state_report = await vscode.commands.executeCommand('rainbow-csv.InternalTest', {check_last_rbql_report: true});\n    assert.equal('query execution', state_report.error_type);\n    assert.equal(\"At record 1, Details: nonexistent_function is not defined\", state_report.error_msg);\n\n    // Test with multiline records.\n    log_message('Starting multiline records test');\n    uri = vscode.Uri.joinPath(test_folder_uri, 'csv_files', 'synthetic_rfc_newline_data.csv');\n    active_doc = await vscode.workspace.openTextDocument(uri);\n    editor = await vscode.window.showTextDocument(active_doc);\n    await sleep(1000);\n\n    test_task = {rbql_backend: \"js\", rbql_query: \"select '<<<<<', a3, a2, a1, '>>>>> NR: ' + NR\", enable_rfc_newlines: true};\n    await vscode.commands.executeCommand('rainbow-csv.RBQL', test_task);\n    await sleep(poor_rbql_async_design_workaround_timeout);\n    active_doc = vscode.window.activeTextEditor.document;\n    length_after_query = active_doc.getText().length;\n    log_message(`Length after js multiline-record query: ${length_after_query}`);\n    // 644 instead of 645 because no trailing '\\n' at the end of file.\n    assert.equal(644, length_after_query);\n}\n\n\nasync function test_double_width_chars_alignment(test_folder_uri) {\n    let uri = vscode.Uri.joinPath(test_folder_uri, 'csv_files', 'double_width_chars.csv');\n    let active_doc = await vscode.workspace.openTextDocument(uri);\n    let editor = await vscode.window.showTextDocument(active_doc);\n    let length_original = active_doc.getText().length;\n    log_message(`Original length: ${length_original}`);\n    assert.equal(274, length_original);\n    await sleep(2000);\n\n    await vscode.commands.executeCommand('rainbow-csv.Align');\n    let length_aligned = active_doc.getText().length;\n    log_message(`Aligned length: ${length_aligned}`);\n    assert.equal(461, length_aligned);\n    assert(length_aligned > length_original);\n    let lint_report = await vscode.commands.executeCommand('rainbow-csv.CSVLint');\n    assert(lint_report.is_ok);\n    await sleep(2000);\n\n    await vscode.commands.executeCommand('rainbow-csv.Shrink');\n    let length_shrinked = active_doc.getText().length;\n    log_message(`Shrinked length: ${length_shrinked}`);\n    // This is to ensure that after original -> align -> shrink sequence we get back to original doc.\n    assert.equal(length_original, length_shrinked);\n    await sleep(500);\n}\n\n\nasync function test_align_shrink_lint(test_folder_uri) {\n    let uri = vscode.Uri.joinPath(test_folder_uri, 'csv_files', 'university_ranking.csv');\n    let active_doc = await vscode.workspace.openTextDocument(uri);\n    let editor = await vscode.window.showTextDocument(active_doc);\n    let length_original = active_doc.getText().length;\n    log_message(`Original length: ${length_original}`);\n    assert.equal(12538, length_original);\n    await sleep(2000);\n\n    await vscode.commands.executeCommand('rainbow-csv.Align');\n    let length_aligned = active_doc.getText().length;\n    log_message(`Aligned length: ${length_aligned}`);\n    assert.equal(25896, length_aligned);\n    assert(length_aligned > length_original);\n    let lint_report = await vscode.commands.executeCommand('rainbow-csv.CSVLint');\n    assert(lint_report.is_ok);\n    await sleep(2000);\n\n    await vscode.commands.executeCommand('rainbow-csv.Shrink');\n    let length_shrinked = active_doc.getText().length;\n    log_message(`Shrinked length: ${length_shrinked}`);\n    // This is to ensure that after original -> align -> shrink sequence we get back to original doc.\n    assert.equal(length_original, length_shrinked);\n    await sleep(500);\n\n    let text_with_comma = 'foobar,';\n    await vscode.commands.executeCommand('default:type', { text: text_with_comma });\n    lint_report = await vscode.commands.executeCommand('rainbow-csv.CSVLint');\n    assert(lint_report.fields_info.size > 1);\n    await sleep(500);\n\n    for (let i = 0; i < text_with_comma.length; i++) {\n        await vscode.commands.executeCommand(\"deleteLeft\");\n    }\n    await sleep(500);\n}\n\n\nasync function test_column_edit(test_folder_uri) {\n    let uri = vscode.Uri.joinPath(test_folder_uri, 'csv_files', 'movies.txt');\n    let active_doc = await vscode.workspace.openTextDocument(uri);\n    let editor = await vscode.window.showTextDocument(active_doc);\n    let length_original = active_doc.getText().length;\n    assert.equal(9986, length_original);\n    await SetCursorToTheTopAtStartWorkaround();\n    for (let i = 0; i < 10; i++) {\n        await vscode.commands.executeCommand(\"cursorRight\");\n    }\n    await sleep(1000);\n    await vscode.commands.executeCommand(\"rainbow-csv.ColumnEditAfter\");\n    await sleep(1000);\n    let text_with_comma = 'foobar,';\n    await vscode.commands.executeCommand('default:type', { text: text_with_comma });\n    let length_after_column_edit = active_doc.getText().length;\n    assert.equal(length_original + active_doc.lineCount * text_with_comma.length, length_after_column_edit);\n    await sleep(1000);\n    for (let i = 0; i < text_with_comma.length; i++) {\n        await vscode.commands.executeCommand(\"deleteLeft\");\n    }\n    await sleep(1000);\n    let length_after_delete = active_doc.getText().length;\n    // Ensure that after multicursor deletion of the added `text_with_comma` text we get back to the original doc.\n    assert.equal(length_original, length_after_delete);\n}\n\n\nasync function test_no_autodetection(test_folder_uri) {\n    let uri = vscode.Uri.joinPath(test_folder_uri, 'csv_files', 'lorem_ipsum.txt');\n    let active_doc = await vscode.workspace.openTextDocument(uri);\n    log_message(`languageId for lorem_ipsum.txt: ${active_doc.languageId}`);\n    assert.equal(active_doc.languageId, 'plaintext');\n    let editor = await vscode.window.showTextDocument(active_doc);\n    await sleep(1000);\n\n    uri = vscode.Uri.joinPath(test_folder_uri, 'suite', 'index.js');\n    active_doc = await vscode.workspace.openTextDocument(uri);\n    log_message(`languageId for index.js: ${active_doc.languageId}`);\n    assert.equal(active_doc.languageId, 'javascript');\n    editor = await vscode.window.showTextDocument(active_doc);\n    await sleep(1000);\n\n    uri = vscode.Uri.joinPath(test_folder_uri, 'csv_files', 'lorem_ipsum');\n    active_doc = await vscode.workspace.openTextDocument(uri);\n    log_message(`languageId for lorem_ipsum: ${active_doc.languageId}`);\n    assert.equal(active_doc.languageId, 'plaintext');\n    editor = await vscode.window.showTextDocument(active_doc);\n    await sleep(1000);\n}\n\n\nasync function test_dynamic_csv(test_folder_uri) {\n    let uri = vscode.Uri.joinPath(test_folder_uri, 'csv_files', 'movies_multichar_separator.txt');\n    let active_doc = await vscode.workspace.openTextDocument(uri);\n    log_message(`languageId for movies_multichar_separator.txt: ${active_doc.languageId}`);\n    assert.equal(active_doc.languageId, 'plaintext');\n    let editor = await vscode.window.showTextDocument(active_doc);\n    await SetCursorToTheTopAtStartWorkaround();\n    await sleep(1000);\n    for (let i = 0; i < 6; i++) {\n        await vscode.commands.executeCommand(\"cursorRight\");\n    }\n    for (let i = 0; i < 3; i++) {\n        await vscode.commands.executeCommand(\"cursorRightSelect\");\n    }\n    await sleep(1000);\n    await vscode.commands.executeCommand('rainbow-csv.RainbowSeparator');\n    await sleep(2000);\n    log_message(`languageId for small_movies.pipe after RainbowSeparator: ${active_doc.languageId}`);\n    assert.equal(active_doc.languageId, 'dynamic csv');\n    await vscode.commands.executeCommand('rainbow-csv.RainbowSeparatorOff');\n    await sleep(2000);\n    log_message(`languageId for small_movies.pipe after RainbowSeparatorOff: ${active_doc.languageId}`);\n    assert.equal(active_doc.languageId, 'plaintext');\n    await sleep(1000);\n\n    await vscode.commands.executeCommand('rainbow-csv.RainbowSeparator');\n    await sleep(1000);\n\n    // Scroll around to test.\n    await vscode.commands.executeCommand(\"scrollPageDown\");\n    await sleep(500);\n    await vscode.commands.executeCommand(\"scrollPageUp\");\n    await sleep(500);\n\n    let length_original = active_doc.getText().length;\n    await vscode.commands.executeCommand('rainbow-csv.Align');\n    let length_aligned = active_doc.getText().length;\n    assert.equal(length_original + 8513, length_aligned); // 8513 was calculated as the difference in file sizes reported by wc -c.\n    await sleep(1000);\n    await vscode.commands.executeCommand('rainbow-csv.Shrink');\n    await sleep(1000);\n    let length_shrinked = active_doc.getText().length;\n    assert.equal(length_original, length_shrinked);\n\n    // Now we need to undo the commands to run RBQL.\n    await vscode.commands.executeCommand('undo'); // Undo Shrink.\n    await sleep(500);\n    await vscode.commands.executeCommand('undo'); // Undo Align.\n    await sleep(500);\n\n    let test_task = {rbql_backend: \"js\", rbql_query: \"select a1, a4 % 100, a5 order by a1 limit 20\"};\n    await vscode.commands.executeCommand('rainbow-csv.RBQL', test_task);\n    await sleep(poor_rbql_async_design_workaround_timeout);\n    active_doc = vscode.window.activeTextEditor.document;\n    let length_after_query = active_doc.getText().length;\n    log_message(`Length after js query: ${length_after_query}`);\n    await sleep(1000);\n    let expected_num_lines = 742;\n    if (!is_web_ext) {\n        expected_num_lines += 1; // Standard non-web CSV writer adds a newline at the end.\n    }\n    assert.equal(expected_num_lines, length_after_query);\n}\n\nasync function test_huge_file(test_folder_uri) {\n    // Test huge file close to VSCode syntax highlighting limit (20MB Or 300K lines).\n    // Do some basic navigation commands and some basic editing to ensure that performance is OK.\n    let start_time = performance.now();\n    let uri = vscode.Uri.joinPath(test_folder_uri, 'csv_files', 'books_huge.txt');\n    let active_doc = await vscode.workspace.openTextDocument(uri);\n    let editor = await vscode.window.showTextDocument(active_doc);\n    assert.equal(active_doc.languageId, 'csv');\n    await vscode.commands.executeCommand(\"cursorBottom\");\n    await sleep(500);\n    await vscode.commands.executeCommand(\"cursorTop\");\n    await sleep(500);\n    for (let i = 0; i < 100; i++) {\n        await vscode.commands.executeCommand(\"scrollPageDown\");\n        await sleep(10);\n    }\n    for (let i = 0; i < 10; i++) {\n        // Delete some lines.\n        await vscode.commands.executeCommand(\"editor.action.deleteLines\");\n        await sleep(10);\n    }\n    await sleep(500);\n    await vscode.commands.executeCommand(\"cursorTop\");\n    await sleep(500);\n    let end_time = performance.now();\n    let total_sleep_time = 500 * 4 - 10 * 100 - 10 * 10;\n    let total_adjusted_latency = (end_time - start_time) - total_sleep_time;\n    log_message(`total adjusted latency: ${total_adjusted_latency}`);\n    assert(total_adjusted_latency < 20000);\n}\n\nasync function test_autodetection(test_folder_uri) {\n    let uri = vscode.Uri.joinPath(test_folder_uri, 'csv_files', 'university_ranking_semicolon.txt');\n    let active_doc = await vscode.workspace.openTextDocument(uri);\n    let editor = await vscode.window.showTextDocument(active_doc);\n    log_message(`languageId for university_ranking_semicolon.txt: ${active_doc.languageId}`);\n    assert.equal(active_doc.languageId, 'csv (semicolon)');\n    await sleep(1000);\n}\n\n\nasync function test_manual_enable_disable(test_folder_uri) {\n    let uri = vscode.Uri.joinPath(test_folder_uri, 'csv_files', 'small_movies.pipe');\n    let active_doc = await vscode.workspace.openTextDocument(uri);\n    log_message(`languageId for small_movies.pipe: ${active_doc.languageId}`);\n    assert.equal(active_doc.languageId, 'plaintext');\n    let editor = await vscode.window.showTextDocument(active_doc);\n    await SetCursorToTheTopAtStartWorkaround();\n    await sleep(1000);\n    for (let i = 0; i < 6; i++) {\n        await vscode.commands.executeCommand(\"cursorRight\");\n    }\n    await vscode.commands.executeCommand(\"cursorRightSelect\");\n    await sleep(1000);\n    await vscode.commands.executeCommand('rainbow-csv.RainbowSeparator');\n    await sleep(2000);\n    log_message(`languageId for small_movies.pipe after RainbowSeparator: ${active_doc.languageId}`);\n    assert.equal(active_doc.languageId, 'csv (pipe)');\n    await vscode.commands.executeCommand('rainbow-csv.RainbowSeparatorOff');\n    await sleep(2000);\n    log_message(`languageId for small_movies.pipe after RainbowSeparatorOff: ${active_doc.languageId}`);\n    assert.equal(active_doc.languageId, 'plaintext');\n    await sleep(1000);\n}\n\n\nfunction test_range_position_contains_equivalence() {\n    // Ensure equivalence of test double and native classes \"contains\" logic.\n    let [vscode_range, vscode_position, test_double_range, test_double_position] = [null, null, null, null];\n\n    // Simple test.\n    vscode_range = new vscode.Range(1, 0, 1, 10);\n    vscode_position = new vscode.Position(1, 4);\n    test_double_range = new unit_tests.VscodeRangeTestDouble(1, 0, 1, 10);\n    test_double_position = new unit_tests.VscodePositionTestDouble(1, 4);\n    assert(vscode_range.contains(vscode_position));\n    assert(test_double_range.contains(test_double_position));\n\n    // Simple not contains test - different line.\n    vscode_range = new vscode.Range(1, 0, 1, 10);\n    vscode_position = new vscode.Position(2, 4);\n    test_double_range = new unit_tests.VscodeRangeTestDouble(1, 0, 1, 10);\n    test_double_position = new unit_tests.VscodePositionTestDouble(2, 4);\n    assert(!vscode_range.contains(vscode_position));\n    assert(!test_double_range.contains(test_double_position));\n\n    // Simple not contains test - after last character.\n    vscode_range = new vscode.Range(3, 5, 3, 10);\n    vscode_position = new vscode.Position(3, 11);\n    test_double_range = new unit_tests.VscodeRangeTestDouble(3, 5, 3, 10);\n    test_double_position = new unit_tests.VscodePositionTestDouble(3, 11);\n    assert(!vscode_range.contains(vscode_position));\n    assert(!test_double_range.contains(test_double_position));\n\n    // Contains test - last character.\n    vscode_range = new vscode.Range(3, 5, 3, 10);\n    vscode_position = new vscode.Position(3, 10);\n    test_double_range = new unit_tests.VscodeRangeTestDouble(3, 5, 3, 10);\n    test_double_position = new unit_tests.VscodePositionTestDouble(3, 10);\n    assert(vscode_range.contains(vscode_position));\n    assert(test_double_range.contains(test_double_position));\n\n    // Contains test - first character.\n    vscode_range = new vscode.Range(3, 5, 3, 10);\n    vscode_position = new vscode.Position(3, 5);\n    test_double_range = new unit_tests.VscodeRangeTestDouble(3, 5, 3, 10);\n    test_double_position = new unit_tests.VscodePositionTestDouble(3, 5);\n    assert(vscode_range.contains(vscode_position));\n    assert(test_double_range.contains(test_double_position));\n\n    // Not contains test - line before.\n    vscode_range = new vscode.Range(3, 5, 3, 10);\n    vscode_position = new vscode.Position(2, 5);\n    test_double_range = new unit_tests.VscodeRangeTestDouble(3, 5, 3, 10);\n    test_double_position = new unit_tests.VscodePositionTestDouble(2, 5);\n    assert(!vscode_range.contains(vscode_position));\n    assert(!test_double_range.contains(test_double_position));\n\n    // Contains test - multiline range, but character is off - still contains.\n    vscode_range = new vscode.Range(3, 5, 10, 4);\n    vscode_position = new vscode.Position(3, 100);\n    test_double_range = new unit_tests.VscodeRangeTestDouble(3, 5, 10, 4);\n    test_double_position = new unit_tests.VscodePositionTestDouble(3, 100);\n    assert(vscode_range.contains(vscode_position));\n    assert(test_double_range.contains(test_double_position));\n}\n\n\nfunction test_autodetect_dialect_frequency_based() {\n    let [doc_lines, active_doc, candidate_separators, max_num_chars_to_test, dialect_info] = [null, null, null, null, null];\n\n    // Basic test.\n    doc_lines = ['a1;a2', 'b1;b2', '#comment', 'c1;c2', 'd1;d2'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines);\n    candidate_separators = [',', ';'];\n    max_num_chars_to_test = 10000;\n    dialect_info = extension.autodetect_dialect_frequency_based(active_doc, candidate_separators, max_num_chars_to_test);\n    assert.deepEqual(['csv (semicolon)', ';', 'quoted'], dialect_info);\n\n    // Empty doc - should return csv since this is the default (presumably doc has .csv extension in order to call this function).\n    doc_lines = [];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines);\n    candidate_separators = ['|', ' ', '\\t', ',', ';'];\n    max_num_chars_to_test = 10000;\n    dialect_info = extension.autodetect_dialect_frequency_based(active_doc, candidate_separators, max_num_chars_to_test);\n    assert.deepEqual(['csv', ',', 'quoted'], dialect_info);\n\n    // Test max_num_chars_to_test effect on autodetection result.\n    doc_lines = ['a|b|c|d,f|g|h|d', 'a,b', 'c,d', 'e,f', 'g,h', 'k,l', 'm,n', 'o,p'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines);\n    candidate_separators = ['|', ',', ';'];\n    assert.deepEqual(['csv (pipe)', '|', 'simple'], extension.autodetect_dialect_frequency_based(active_doc, candidate_separators, /*max_num_chars_to_test=*/10));\n    assert.deepEqual(['csv', ',', 'quoted'], extension.autodetect_dialect_frequency_based(active_doc, candidate_separators, /*max_num_chars_to_test=*/10000));\n\n    // Dynamic csv test.\n    doc_lines = ['a$b', 'c$d', 'e$f', 'g,h', 'k,l'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines);\n    candidate_separators = ['$', ',', ';'];\n    assert.deepEqual(['dynamic csv', '$', 'simple'], extension.autodetect_dialect_frequency_based(active_doc, candidate_separators, /*max_num_chars_to_test=*/10000));\n\n    // Skipping frequent dot and whitespace because they are in blocklist.\n    doc_lines = ['a;  b...', 'c ;d...', 'e   ;f...', 'g  ; h...', 'k  l...'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines);\n    candidate_separators = [' ', '.', ';'];\n    assert.deepEqual(['csv (semicolon)', ';', 'quoted'], extension.autodetect_dialect_frequency_based(active_doc, candidate_separators, /*max_num_chars_to_test=*/10000));\n\n    // Using default comma separator because the user configured ones have zero frequency. Not sure if this is the right behavior in this case though.\n    doc_lines = ['a|b', 'c|d', 'e|f'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines);\n    candidate_separators = [';', '\\t'];\n    assert.deepEqual(['csv', ',', 'quoted'], extension.autodetect_dialect_frequency_based(active_doc, candidate_separators, /*max_num_chars_to_test=*/10000));\n\n    // Empty configured separators list.\n    doc_lines = ['a|b', 'c|d', 'e|f'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines);\n    candidate_separators = [];\n    assert.deepEqual(['csv', ',', 'quoted'], extension.autodetect_dialect_frequency_based(active_doc, candidate_separators, /*max_num_chars_to_test=*/10000));\n}\n\n\nasync function test_try_autoenable_rainbow_csv() {\n    let [config, extension_context, doc_lines, active_doc] = [null, null, null, null];\n\n    // Simple test. `other_fake.txt` in stop list doesn't prevent autodetection. Trailing space is not detected because the config option is set to 'false'.\n    doc_lines = ['a|b', 'c|d  ', 'e|f'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.txt', 'plaintext');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set(['other_fake.txt'])};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', ';', '\\t', '|']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 3]]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('csv (pipe)', active_doc.languageId);\n    assert.deepEqual([['fake.txt.csv (pipe)', {is_ok: true, first_trailing_space_line: null}]], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([['fake.txt', 'plaintext']], Array.from(extension_context.original_language_ids.entries()));\n\n    // Simple test. No autodetection.\n    doc_lines = ['a|b', 'c|d', 'e|f', 'g,h'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.txt', 'plaintext');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set()};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', ';', '\\t', '|']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 3], ['comment_prefix', '#']]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('plaintext', active_doc.languageId);\n    assert.deepEqual([], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([], Array.from(extension_context.original_language_ids.entries()));\n\n    // Test that the autodetection doesn't happen if enable_separator_autodetection is false.\n    doc_lines = ['a|b', 'c|d', 'e|f'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.txt', 'plaintext');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set()};\n    config = new Map([['enable_separator_autodetection', false], ['autodetect_separators', [',', ';', '\\t', '|']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 3], ['comment_prefix', '#']]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('plaintext', active_doc.languageId);\n    assert.deepEqual([], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([], Array.from(extension_context.original_language_ids.entries()));\n\n    // Test `TAB` to -> '\\t' conversion.\n    doc_lines = ['a\\tb', 'c\\td', 'e\\tf'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.txt', 'plaintext');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set()};\n    config = new Map([['enable_separator_autodetection', false], ['autodetect_separators', [',', ';', '\\t', '|']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 3], ['comment_prefix', '#']]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('plaintext', active_doc.languageId);\n    assert.deepEqual([], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([], Array.from(extension_context.original_language_ids.entries()));\n\n    // Test stoplist.\n    doc_lines = ['a|b', 'c|d', 'e|f'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.txt', 'plaintext');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set(['fake.txt'])};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', ';', '\\t', '|']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 3], ['comment_prefix', '#']]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('plaintext', active_doc.languageId);\n    assert.deepEqual([], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([], Array.from(extension_context.original_language_ids.entries()));\n\n    // No filename - no autodetection.\n    doc_lines = ['a|b', 'c|d', 'e|f'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, '', 'plaintext');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set()};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', ';', '\\t', '|']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 3], ['comment_prefix', '#']]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('plaintext', active_doc.languageId);\n    assert.deepEqual([], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([], Array.from(extension_context.original_language_ids.entries()));\n\n    // Emulating a virtual .git file - no autodetection.\n    doc_lines = ['a|b', 'c|d', 'e|f'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.git', 'plaintext', 'git');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set()};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', ';', '\\t', '|']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 3], ['comment_prefix', '#']]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('plaintext', active_doc.languageId);\n    assert.deepEqual([], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([], Array.from(extension_context.original_language_ids.entries()));\n\n    // Non-plaintext language id - no autodetection.\n    doc_lines = ['a|b', 'c|d', 'e|f'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.txt', 'foobar');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set()};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', ';', '\\t', '|']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 3], ['comment_prefix', '#']]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('foobar', active_doc.languageId);\n    assert.deepEqual([], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([], Array.from(extension_context.original_language_ids.entries()));\n\n    // Non-plaintext language id but filename has .csv extension - autodetection.\n    doc_lines = ['a|b', 'c|d', 'e|f'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.csv', 'csv');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set()};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', ';', '\\t', '|']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 3], ['comment_prefix', '#']]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('csv (pipe)', active_doc.languageId);\n    assert.deepEqual([['fake.csv.csv (pipe)', {is_ok: true, first_trailing_space_line: null}]], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    // We don't save `csv` and other rainbow dialects into original_language_ids.\n    assert.deepEqual([], Array.from(extension_context.original_language_ids.entries()));\n\n    // Test quoted_rfc policy autodetection for `,` and `;` separators.\n    doc_lines = ['a,b', 'c,\"d', 'a\"\"sd\"\"f', 'ef\"', 'g,h', 'i,j'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.txt', 'plaintext');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set()};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', ';', '\\t', '|']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 3]]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('dynamic csv', active_doc.languageId);\n    assert.deepEqual([['fake.txt.dynamic csv', {is_ok: true, first_trailing_space_line: null}]], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([['fake.txt', {delim: ',', policy: 'quoted_rfc'}]], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([['fake.txt', 'plaintext']], Array.from(extension_context.original_language_ids.entries()));\n\n    // Test that quoted_rfc policy doesn't extend for other separators e.g. pipe `|`.\n    doc_lines = ['a|b', 'c|\"d', 'a\"\"sd\"\"f', 'ef\"', 'g|h', 'i|j'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.txt', 'plaintext');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set()};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', ';', '\\t', '|']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 3], ['comment_prefix', '#']]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('plaintext', active_doc.languageId);\n    assert.deepEqual([], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([], Array.from(extension_context.original_language_ids.entries()));\n\n    // Test trailing spaces detection.\n    doc_lines = ['a|b', 'c  |d', 'e|f'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.txt', 'plaintext');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set(['other_fake.txt'])};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', ';', '\\t', '|']], ['csv_lint_detect_trailing_spaces', true], ['autodetection_min_line_count', 3], ['comment_prefix', '#']]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('csv (pipe)', active_doc.languageId);\n    assert.deepEqual([['fake.txt.csv (pipe)', {is_ok: true, first_trailing_space_line: 1}]], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([['fake.txt', 'plaintext']], Array.from(extension_context.original_language_ids.entries()));\n\n    // Test too few lines for autodetection.\n    doc_lines = ['a|b', 'c|d', 'e|f'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.txt', 'plaintext');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set()};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', ';', '\\t', '|']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 4], ['comment_prefix', '#']]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('plaintext', active_doc.languageId);\n    assert.deepEqual([], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([], Array.from(extension_context.original_language_ids.entries()));\n\n    // Test autodetection with default comment prefix.\n    doc_lines = ['a|b', '#comment', 'c|d', 'e|f'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.txt', 'plaintext');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set()};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', ';', '\\t', '|']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 3]]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('csv (pipe)', active_doc.languageId);\n    assert.deepEqual([['fake.txt.csv (pipe)', {is_ok: true, first_trailing_space_line: null}]], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([['fake.txt', 'plaintext']], Array.from(extension_context.original_language_ids.entries()));\n\n    // Test autodetection with custom comment prefix\n    doc_lines = ['a|b', '$$comment', 'c|d', 'e|f'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.txt', 'plaintext');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set()};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', ';', '\\t', '|']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 3], ['comment_prefix', '$$']]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('csv (pipe)', active_doc.languageId);\n    assert.deepEqual([['fake.txt.csv (pipe)', {is_ok: true, first_trailing_space_line: null}]], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([['fake.txt', 'plaintext']], Array.from(extension_context.original_language_ids.entries()));\n\n    // Test no autodetection with default comment prefix.\n    doc_lines = ['a|b', '$$comment', 'c|d', 'e|f'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.txt', 'plaintext');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set()};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', ';', '\\t', '|']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 3]]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('plaintext', active_doc.languageId);\n    assert.deepEqual([], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([], Array.from(extension_context.original_language_ids.entries()));\n\n    // Test second candidate (TAB) more popular than the first (comma).\n    doc_lines = ['a,b\\tc\\td', 'a,b\\tc\\td', 'a,b\\tc\\td', 'a,b\\tc\\td'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.txt', 'plaintext');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set()};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', 'TAB']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 3], ['comment_prefix', '$$']]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('tsv', active_doc.languageId);\n    assert.deepEqual([['fake.txt.tsv', {is_ok: true, first_trailing_space_line: null}]], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([['fake.txt', 'plaintext']], Array.from(extension_context.original_language_ids.entries()));\n\n    // Test inconsistent num of fields.\n    doc_lines = ['a|b', 'c|d', 'e|f', 'e|f|g'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.txt', 'plaintext');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set()};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', ';', '\\t', '|']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 3]]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('plaintext', active_doc.languageId);\n    assert.deepEqual([], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([], Array.from(extension_context.original_language_ids.entries()));\n\n    // Test defective line (quoting error).\n    doc_lines = ['a,b', 'c,d', 'e,\"fsdf\"\"', 'g,h'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.txt', 'plaintext');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set()};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', ';', '\\t', '|']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 3]]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('plaintext', active_doc.languageId);\n    assert.deepEqual([], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([], Array.from(extension_context.original_language_ids.entries()));\n\n    // Test switch to frequency based autodetection.\n    doc_lines = ['a,b,c', 'a,b,c', 'a,b,c', 'a,b\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tc'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.csv', 'csv');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set()};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', 'TAB']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 3]]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('tsv', active_doc.languageId);\n    // In case of frequency based autodetection we will have lint results cache empty - this is probably fine because we will recalculate it later after enabling rainbow features for the file.\n    assert.deepEqual([], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([], Array.from(extension_context.original_language_ids.entries()));\n\n    // Test that autodetected language matches the original language id.\n    doc_lines = ['a,b,c', 'a,b,c', 'a,b ,c', '#comment'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.csv', 'csv');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set()};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', 'TAB']], ['csv_lint_detect_trailing_spaces', true], ['autodetection_min_line_count', 3]]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('csv', active_doc.languageId);\n    assert.deepEqual([['fake.csv.csv', {is_ok: true, first_trailing_space_line: 2}]], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    // Original language id should not be set since it matches the autodetected language\n    assert.deepEqual([], Array.from(extension_context.original_language_ids.entries()));\n\n    // Test that autodetection_min_line_count also applies to the record count, not just source lines - do not count comment lines.\n    doc_lines = ['Device ids, use with caution!', '#a20', '#a50', '#a30'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.txt', 'plaintext');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set()};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', 'TAB']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 3]]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('plaintext', active_doc.languageId);\n    assert.deepEqual([], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([], Array.from(extension_context.original_language_ids.entries()));\n\n    // Test that autodetection_min_line_count also applies to the record count, not just source lines - count multiline record once.\n    doc_lines = ['hello,\"world', 'asd,fasf', '', 'sadf', 'fasdf\"'];\n    active_doc = new unit_tests.VscodeDocumentTestDouble(doc_lines, 'fake.txt', 'plaintext');\n    extension_context = {lint_results: new Map(), dynamic_document_dialects: new Map(), original_language_ids: new Map(), autodetection_stoplist: new Set()};\n    config = new Map([['enable_separator_autodetection', true], ['autodetect_separators', [',', 'TAB']], ['csv_lint_detect_trailing_spaces', false], ['autodetection_min_line_count', 3]]);\n    await extension.try_autodetect_and_set_rainbow_filetype(unit_tests.vscode_test_double, config, extension_context, active_doc);\n    assert.equal('plaintext', active_doc.languageId);\n    assert.deepEqual([], Array.from(extension_context.lint_results.entries()));\n    assert.deepEqual([], Array.from(extension_context.dynamic_document_dialects.entries()));\n    assert.deepEqual([], Array.from(extension_context.original_language_ids.entries()));\n}\n\n\nasync function run() {\n    try {\n        log_message('Starting tests');\n\n        assert.equal(-1, [1, 2, 3].indexOf(0));\n\n        let use_script_based_root = false; // This is a workaround for running unit tests from inside VSCode UI instead of command line, but we probably don't need this since we are passing the workspace file explicitly.\n        let workspace_folder_uri = null;\n        if (!is_web_ext && use_script_based_root) {\n            workspace_folder_uri = vscode.Uri.file('file:/' + __dirname);\n        } else {\n            assert(vscode.workspace.workspaceFolders);\n            assert.equal(1, vscode.workspace.workspaceFolders.length);\n            workspace_folder_uri = vscode.workspace.workspaceFolders[0].uri;\n        }\n        let test_folder_uri = workspace_folder_uri; // FIXME check if need to adjust for web test, but better start web version in the test directory (last arg in cmd) instead of the cwd.\n\n        test_range_position_contains_equivalence();\n\n        unit_tests.test_all();\n\n        test_autodetect_dialect_frequency_based();\n\n        await test_try_autoenable_rainbow_csv();\n\n        await test_no_autodetection(test_folder_uri);\n        if (!is_web_ext) {\n            // Ensure that opening non-csv files doesn't cause rainbow csv to import relatively heavy lazy-loaded code.\n            // There is no point to check this in web since all of the files are bundled into a single script anyway.\n            let state_report = await vscode.commands.executeCommand('rainbow-csv.InternalTest', {check_initialization_state: true});\n            assert(state_report.initialized);\n            assert(!state_report.lazy_loaded);\n        }\n\n        await test_autodetection(test_folder_uri);\n        await test_manual_enable_disable(test_folder_uri);\n\n        await test_huge_file(test_folder_uri);\n\n        await test_dynamic_csv(test_folder_uri);\n\n        if (is_web_ext) {\n            await test_rbql_web(test_folder_uri);\n        } else {\n            await test_rbql_node(test_folder_uri);\n        }\n\n        if (!is_web_ext) {\n            // Sanity check that after using advanced functionality such as RBQL, the non-basic code is lazy loaded.\n            let state_report = await vscode.commands.executeCommand('rainbow-csv.InternalTest', {check_initialization_state: true});\n            assert(state_report.initialized);\n            assert(state_report.lazy_loaded);\n        }\n\n        await test_align_shrink_lint(test_folder_uri);\n        await test_double_width_chars_alignment(test_folder_uri);\n        await test_column_edit(test_folder_uri);\n\n        log_message('Finishing tests');\n    } catch (e) {\n        log_message('Error: tests have failed. Exception:');\n        log_message(String(e));\n        log_message(String(e.stack));\n    }\n}\n\nexports.run = run;\n"],"names":["module","exports","combining","DEFAULTS","nul","control","wcwidth","ucs","opts","mid","min","max","length","Math","floor","bisearch","str","s","i","n","charCodeAt","wcswidth","vscode","path","fs","os","child_process","fast_load_utils","csv_utils","rbql_csv","rainbow_utils","ll_rainbow_utils","is_web_ext","undefined","homedir","preview_window_size","scratch_buf_marker","client_html_template_web","aligned_files","Set","result_set_parent_map","Map","cached_table_parse_result","manual_comment_prefix_stoplist","rbql_status_bar_button","align_shrink_button","rainbow_off_status_bar_button","rainbow_on_status_bar_button","copy_back_button","column_info_button","dynamic_dialect_select_button","rbql_context","last_rbql_queries","client_html_template","global_state","preview_panel","doc_first_edit_subscription","keyboard_cursor_subscription","last_closed_rainbow_doc_info","_unit_test_last_rbql_report","_unit_test_last_warnings","cursor_timeout_handle","rainbow_token_event","comment_token_event","sticky_header_disposable","DYNAMIC_CSV","QUOTED_POLICY","QUOTED_RFC_POLICY","SIMPLE_POLICY","extension_context","lint_results","lint_status_bar_button","dynamic_document_dialects","custom_comment_prefixes","original_language_ids","reenable_rainbow_language_infos","autodetection_stoplist","autodetection_temporarily_disabled_for_rbql","dynamic_dialect_for_next_request","dialect_map","tokenTypes","tokens_legend","SemanticTokensLegend","is_eligible_doc","vscode_doc","uri","fileName","indexOf","scheme","is_eligible_scheme","is_rainbow_dialect_doc","hasOwnProperty","languageId","make_dialect_info","delim","policy","make_dynamic_dialect_key","file_path","async","save_dynamic_info","dialect_info","save_to_global_state","set","get_dynamic_info","has","get","get_from_global_state","safe_lower","src_str","toLowerCase","get_default_policy","separator","language_id","map_dialect_to_language_id","absolute_path_map","show_single_line_error","error_msg","active_window","window","showErrorMessage","sleep","ms","Promise","resolve","setTimeout","report_progress","progress","status_message","report","message","key","default_value","value","update","replace_doc_content","active_editor","active_doc","new_content","invalid_range","Range","lineCount","full_range","validateRange","edit","replace","make_header_key","make_with_headers_key","get_from_config","param_name","config","workspace","getConfiguration","get_header_from_document","document","comment_prefix","_header_lnum","header_line","get_header_line","smart_split","get_header","header_info","header","get_dialect","StickyHeaderProvider","constructor","provideDocumentSymbols","_delim","header_lnum","header_line_num","header_range","contains","symbol_kind","SymbolKind","File","DocumentSymbol","register_sticky_header_provider","force","dispose","header_symbol_provider","document_selector","push","language","languages","registerDocumentSymbolProvider","enable_dynamic_semantic_tokenization","token_provider","RainbowTokenProvider","registerDocumentRangeSemanticTokensProvider","register_comment_tokenization_handler","CommentTokenProvider","get_dialect_from_user_dialog","showInputBox","enable_rainbow_features_if_csv","hide","createStatusBarItem","StatusBarAlignment","Left","text","tooltip","command","show","try_resolve_incomplete_dynamic_csv_dialect_if_needed","setLanguageConfiguration","comments","lineComment","show_lint_status_bar_button","show_align_shrink_button","parent_table_path","parent_basename","basename","show_rbql_copy_to_source_button","show_column_info_button","onDidChangeTextEditorSelection","handle_cursor_movement","enable_rainbow_ui","csv_lint","disable_ui_elements","all_buttons","disable_rainbow_features_if_non_csv","get_active_editor","activeTextEditor","get_active_doc","is_active_doc","toString","position","get_cursor_position_if_unambiguous","cursor_position_info","get_cursor_position_info","enable_tooltip_column_names","full_report","short_report","format_cursor_position_info","Right","do_show_column_info_button","is_manual_op","lint_cache_key","is_processing","detect_trailing_spaces","_records","_num_records_parsed","fields_info","first_defective_line","first_trailing_space_line","_comments","parse_document_records","lint_result","size","csv_lint_cmd","run_internal_test_cmd","integration_test_options","check_initialization_state","initialized","lazy_loaded","check_last_rbql_report","check_last_rbql_warnings","show_warnings","warnings","showWarningMessage","handle_rbql_result_file_node","text_doc","showTextDocument","error","setTextDocumentLanguage","file_path_to_query_key","run_command_and_parse_output","cmd","args","execution_result","reject","stdout_data","stderr_data","process","spawn","stdout","on","data","stderr","code","err","command_async_wrapper","error_type","name","json_report","JSON","parse","e","send_report_to_webview","webview","report_msg","postMessage","set_header_line","_comment_prefix","selection","start","line","raw_header","lineAt","preserve_original_language_id_if_needed","original_language_id","manually_set_rainbow_separator","end","substring","character","add","set_comment_prefix","delete","restore_original_language","current_language_info","dynamic_dialect_info","remove_dynamic_info","reenable_rainbow_language","rainbow_language_info","set_join_table_name","table_name","make_table_name_key","set_virtual_header","old_header","old_header_str","fields","quoted_fields","map","val","field","quote_field","join","quoted_join","input_box_props","raw_new_header","new_header","column_edit","edit_mode","col_num","column_number","selections","warning_msg","generate_column_edit_selections","shrink_table","progress_options","location","ProgressLocation","Window","title","withProgress","shrinked_doc_text","first_failed_line","shrink_columns","align_table","double_width_alignment","column_stats","records","calc_column_stats","adjust_column_stats","aligned_doc_text","align_columns","align_in_scratch_file","is_scratch_file","aligned_doc_cfg","content","scratch_doc","openTextDocument","copy_back","result_doc","parent_doc","parent_editor","query_result_doc","getText","do_copy_back","handle_rbql_client_message","message_type","init_msg","sample_preview_records_from_context","path_key","input_document_path","history_list","with_headers","header_for_ui","rbql_backend","rbql_query","integration_test_delay","table_id","encoding","input_table_dir","dirname","table_path","find_table_path","read_header","warning","console","String","navig_direction","requested_start_record","input_document","protocol_message","backend_language","output_dialect","query","old_index","splice","update_query_history","input_path","csv_encoding","input_delim","input_policy","output_delim","output_policy","output_path","input_table_path","rbql_output_dir","tmpdir","get_dst_table_dir","orig_extension","extname","delim_ext_map","dst_extension","result_table_name","get_dst_table_name","startsWith","log","stringify","target_language_id","output_doc_cfg","rbql_query_web","handle_rbql_result_file_web","csv_options","rbql_query_node","exception_to_error_info","cmd_safe_query","Buffer","from","output_doc","run_rbql_query","udf_file_path","default_content","get_default_js_udf_content","get_default_python_udf_content","existsSync","writeFileSync","udf_doc","edit_rbql","orig_uri","isDirty","rnd_suffix","random","with_headers_by_default","createWebviewPanel","ViewColumn","Active","enableScripts","readFileSync","client_html","paths_list","local_path","adjusted_webview_url","asWebviewUri","Uri","file","adjust_webview_paths","html","onDidReceiveMessage","autodetect_dialect_frequency_based","candidate_separators","max_num_chars_to_test","best_dialect","best_separator","best_policy","best_dialect_frequency","frequency","j","dialect_id","try_autodetect_and_set_rainbow_filetype","is_default_csv","endsWith","abs","Date","now","timestamp","comment_prefix_for_autodetection","rainbow_csv_language_id","candidate_dialects","min_num_lines","best_dialect_first_trailing_space_line","best_dialect_num_columns","candidate_dialect","num_records_parsed","num_columns","Array","keys","autodetect_dialect","handle_first_edit_for_an_empty_doc","change_event","handle_editor_switch","editor","_unused_cursor_event","clearTimeout","handle_doc_open","new_doc","isUntitled","onDidChangeTextDocument","handle_doc_close","doc_to_close","make_preview","preview_mode","fsPath","size_limit","file_size_in_bytes","statSync","full_orig_doc","file_basename","out_path","open","fd","buffer","alloc","read_begin_pos","read","_num","buffer_str","substr","lastIndexOf","includes","then","doc","register_csv_hover_info_provider","context","hover_provider","registerHoverProvider","provideHover","token","cancellation_token","isCancellationRequested","_full_text","Hover","make_hover","subscriptions","provideDocumentRangeSemanticTokens","range","_token","table_ranges","parse_document_range","builder","SemanticTokensBuilder","row_info","comment_range","record_ranges","record_range","build","begin_line","end_line","lnum","line_text","activate","globalState","rbql_client_uri","joinPath","extensionUri","bytes","readFile","TextDecoder","decode","asAbsolutePath","lint_cmd","commands","registerCommand","rbql_cmd","set_header_line_cmd","set_comment_prefix_cmd","edit_column_names_cmd","set_join_table_name_cmd","column_edit_before_cmd","choose_dynamic_separator_cmd","choose_dynamic_separator","column_edit_after_cmd","column_edit_select_cmd","set_separator_cmd","set_separator_multiline_cmd","rainbow_off_cmd","rainbow_on_cmd","sample_head_cmd","sample_tail_cmd","align_cmd","shrink_cmd","copy_back_cmd","internal_test_cmd","doc_open_event","onDidOpenTextDocument","doc_close_event","onDidCloseTextDocument","switch_event","onDidChangeActiveTextEditor","deactivate","AssertionError","Error","assert","condition","RecordTextConsumer","stop_on_warning","collect_records","preserve_quotes_and_whitespaces","min_num_fields_for_autodetection","this","consume","record_text","record_start_line","record","charAt","max_records_to_parse","num_lines","line_aggregator","MultilineRecordAggregator","consumer","record_num","comment_text","add_line","has_comment_line","reset","has_full_record","get_full_line","is_inside_multiline_record","_typeof","o","Symbol","iterator","prototype","_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","input","hint","prim","toPrimitive","res","call","TypeError","_toPrimitive","_createClass","Constructor","protoProps","staticProps","isDeepEqual","isDeepStrictEqual","_require$codes","codes","ERR_AMBIGUOUS_ARGUMENT","ERR_INVALID_ARG_TYPE","ERR_INVALID_ARG_VALUE","ERR_INVALID_RETURN_VALUE","ERR_MISSING_ARGS","inspect","_require$types","isPromise","isRegExp","objectAssign","objectIs","RegExpPrototypeTest","lazyLoadComparison","comparison","warned","ok","NO_EXCEPTION_SENTINEL","innerFail","obj","innerOk","fn","argLen","generatedMessage","actual","expected","operator","stackStartFn","_len","arguments","_key","apply","concat","fail","internalMessage","argsLen","emitWarning","warn","bind","errArgs","equal","notEqual","deepEqual","notDeepEqual","deepStrictEqual","notDeepStrictEqual","strictEqual","notStrictEqual","Comparison","_this","instance","_classCallCheck","forEach","expectedException","msg","a","b","compareExceptionKey","isPrototypeOf","getActual","checkIsPromise","catch","waitForActual","promiseFn","resultPromise","expectsError","details","fnType","expectsNoError","internalMatch","string","regexp","fnName","match","strict","_len6","_key6","throws","_len2","_key2","rejects","_len3","_key3","result","doesNotThrow","_len4","_key4","doesNotReject","_len5","_key5","ifError","newErr","origStack","stack","tmp2","split","shift","tmp1","pos","slice","doesNotMatch","ownKeys","r","t","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","_objectSpread","_toPropertyKey","getOwnPropertyDescriptors","defineProperties","arg","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","_wrapNativeSuper","Class","_cache","Function","Wrapper","_construct","_getPrototypeOf","create","_setPrototypeOf","Parent","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","p","setPrototypeOf","__proto__","getPrototypeOf","search","this_len","blue","green","red","white","kReadableOperator","strictEqualObject","notStrictEqualObject","notIdentical","copyError","source","inspectValue","compact","customInspect","depth","maxArrayLength","Infinity","showHidden","breakLength","showProxy","sorted","getters","_Error","_inspect$custom","subClass","superClass","_inherits","Derived","hasNativeReflectConstruct","_super","Super","NewTarget","options","limit","stackTraceLimit","isTTY","getColorDepth","other","lastPos","skipped","actualInspected","actualLines","expectedLines","indicator","inputLength","columns","count","maxCount","repeat","pop","maxLines","_actualLines","printedLines","skippedMsg","cur","expectedLine","actualLine","divergingLines","createErrDiff","base","_res","knownOperators","captureStackTrace","recurseTimes","ctx","custom","util","createErrorType","Base","NodeError","_Base","arg1","arg2","arg3","getMessage","oneOf","thing","isArray","len","determiner","type","reason","inspected","RangeError","_slicedToArray","arr","_arrayWithHoles","l","u","f","next","done","return","_iterableToArrayLimit","minLen","_arrayLikeToArray","test","_unsupportedIterableToArray","_nonIterableRest","arr2","regexFlagsSupported","flags","arrayFromSet","array","arrayFromMap","is","objectGetOwnPropertySymbols","numberIsNaN","Number","isNaN","uncurryThis","propertyIsEnumerable","objectToString","isAnyArrayBuffer","isArrayBufferView","isDate","isMap","isSet","isNativeError","isBoxedPrimitive","isNumberObject","isStringObject","isBooleanObject","isBigIntObject","isSymbolObject","isFloat32Array","isFloat64Array","isNonIndex","pow","getOwnNonIndexProperties","compare","x","y","kNoIterator","kIsArray","kIsSet","kIsMap","innerDeepEqual","val1","val2","memos","buf1","buf2","val1Tag","keys1","keys2","keyCheck","getTime","RegExp","byteLength","Uint8Array","byteOffset","areSimilarTypedArrays","offset","areSimilarFloatArrays","_keys","_keys2","BigInt","isEqualBoxedPrimitive","getEnumerables","k","iterationType","aKeys","bKeys","symbolKeysA","symbolKeysB","_symbolKeysB","val2MemoA","val2MemoB","areEq","memo","aValues","setMightHaveLoosePrim","bValues","_i","_val","setHasEqualElement","setEquiv","aEntries","_aEntries$i","item1","item2","mapMightHaveLoosePrim","bEntries","_i2","_bEntries$_i","item","mapHasEqualEntry","mapEquiv","keysA","objEquiv","setValues","findLooseMatchingPrimitives","altValue","curB","key1","key2","GetIntrinsic","callBind","$indexOf","allowMissing","intrinsic","setFunctionLength","$TypeError","$apply","$call","$reflectApply","$defineProperty","$max","originalFunction","func","applyBind","hasPropertyDescriptors","$SyntaxError","gopd","property","nonEnumerable","nonWritable","nonConfigurable","loose","desc","hasSymbols","toStr","defineDataProperty","supportsDescriptors","object","predicate","predicates","isCallable","list","thisArg","receiver","forEachArray","forEachString","forEachObject","concatty","that","bound","arrLike","slicy","boundLength","boundArgs","joiner","joiny","Empty","implementation","SyntaxError","$Function","getEvalledConstructor","expressionSyntax","$gOPD","throwTypeError","ThrowTypeError","calleeThrows","gOPDthrows","hasProto","getProto","needsEval","TypedArray","INTRINSICS","AggregateError","ArrayBuffer","Atomics","BigInt64Array","BigUint64Array","DataView","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","eval","EvalError","Float32Array","Float64Array","FinalizationRegistry","Int8Array","Int16Array","Int32Array","isFinite","parseFloat","parseInt","SharedArrayBuffer","Uint8ClampedArray","Uint16Array","Uint32Array","URIError","WeakMap","WeakRef","WeakSet","errorProto","doEval","gen","LEGACY_ALIASES","hasOwn","$concat","$spliceApply","$replace","$strSlice","$exec","exec","rePropName","reEscapeChar","getBaseIntrinsic","alias","intrinsicName","parts","first","last","number","quote","subString","stringToPath","intrinsicBaseName","intrinsicRealName","skipFurtherCaching","isOwn","part","hasArrayLengthDefineBug","foo","$Object","origSymbol","hasSymbolSham","sym","symObj","getOwnPropertyNames","syms","toStringTag","$hasOwn","ctor","superCtor","super_","TempCtor","hasToStringTag","$toString","callBound","isStandardArguments","isLegacyArguments","callee","supportsStandardArguments","badArrayLike","isCallableMarker","fnToStr","reflectApply","_","constructorRegex","isES6ClassFn","fnStr","tryFunctionObject","isIE68","isDDA","all","strClass","GeneratorFunction","isFnRegex","generatorFunc","getGeneratorFunc","define","getPolyfill","shim","polyfill","NaN","whichTypedArray","keysShim","isArgs","isEnumerable","hasDontEnumBug","hasProtoEnumBug","dontEnums","equalsConstructorPrototype","excludedKeys","$applicationCache","$console","$external","$frame","$frameElement","$frames","$innerHeight","$innerWidth","$onmozfullscreenchange","$onmozfullscreenerror","$outerHeight","$outerWidth","$pageXOffset","$pageYOffset","$parent","$scrollLeft","$scrollTop","$scrollX","$scrollY","$self","$webkitIndexedDB","$webkitStorageInfo","$window","hasAutomationEqualityBug","isObject","isFunction","isArguments","isString","theKeys","skipProto","skipConstructor","equalsConstructorPrototypeIfNotBuggy","origKeys","originalKeys","keysWorksWithArguments","objectKeys","toObject","$push","$propIsEnumerable","originalGetSymbols","source1","to","getSymbols","nextKey","propValue","assign","letters","lacksProperEnumerationOrder","preventExtensions","thrower","assignHasPendingExceptions","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","noop","nextTick","browser","env","argv","version","versions","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","hasDescriptors","gOPD","$floor","functionLengthIsConfigurable","functionLengthIsWritable","copy","fill","readUInt8","isArgumentsObject","isGeneratorFunction","isTypedArray","BigIntSupported","SymbolSupported","ObjectToString","numberValue","stringValue","booleanValue","bigIntValue","symbolValue","checkBoxedPrimitive","prototypeValueOf","isMapToString","isSetToString","isWeakMapToString","isWeakSetToString","isArrayBufferToString","isArrayBuffer","working","isDataViewToString","isDataView","isView","isUint8Array","isUint8ClampedArray","isUint16Array","isUint32Array","isInt8Array","isInt16Array","isInt32Array","isBigInt64Array","isBigUint64Array","isWeakMap","isWeakSet","SharedArrayBufferCopy","isSharedArrayBufferToString","isSharedArrayBuffer","isAsyncFunction","isMapIterator","isSetIterator","isGeneratorObject","isWebAssemblyCompiledModule","method","descriptors","formatRegExp","format","objects","isNull","deprecate","noDeprecation","throwDeprecation","traceDeprecation","trace","debugs","debugEnvRegex","NODE_DEBUG","debugEnv","toUpperCase","seen","stylize","stylizeNoColor","colors","isBoolean","_extend","isUndefined","stylizeWithColor","formatValue","styleType","style","styles","ret","primitive","simple","isNumber","formatPrimitive","visibleKeys","hash","idx","arrayToHash","isError","formatError","output","braces","toUTCString","formatProperty","formatArray","reduce","prev","reduceToSingleString","ar","re","d","pad","debuglog","pid","types","isNullOrUndefined","isSymbol","isPrimitive","isBuffer","months","prop","time","getHours","getMinutes","getSeconds","getDate","getMonth","inherits","origin","kCustomPromisifiedSymbol","callbackifyOnRejected","cb","newReason","promisify","original","promiseResolve","promiseReject","promise","callbackify","callbackified","maybeCb","rej","availableTypedArrays","g","globalThis","typedArrays","$slice","cache","typedArray","proto","superProto","tag","found","getter","trySlices","tryTypedArrays","rbql","non_numeric_sentinel","number_regex","alignment_extra_readability_whitespace_length","update_subcomponent_stats","is_first_record","max_field_components_lens","calc_visual_char_width","visual_field_length","has_wide_chars","max_total_length","max_int_length","match_result","max_fractional_length","cur_integer_part_length","cur_fractional_part_length","align_field","is_last_in_line","trim","delta_length","dot_pos","integer_delta_length","fractional_delta_length","trailing_spaces","rfc_align_field","is_field_segment","aligned","start_offset","RecordCommentMerger","nr","next_comment","get_next","has_comments_left","has_records_left","has_entries_left","vscode_global_state","main_table_dir","filepath","candidate_path","isAbsolute","RbqlIOHandlingError","VSCodeRecordIterator","RBQLInputIterator","has_header","variable_prefix","super","NR","NL","fail_on_warning","_first_trailing_space_line","first_record","next_record_index","stop","get_variables_map","query_text","variable_map","parse_basic_variables","parse_array_variables","parse_attribute_variables","parse_dictionary_variables","do_get_record","get_record","get_warnings","inconsistent_records_info","record_num_1","num_fields_1","record_num_2","num_fields_2","sample_first_two_inconsistent_records","warn_msg","make_inconsistent_num_fields_warning","VSCodeWriter","RBQLOutputWriter","header_len","null_in_output","delim_in_simple_output","output_lines","polymorphic_join","simple_join","quoted_join_rfc","mono_join","set_header","write","v","rfc_quote_field","normalize_fields","out_fields","sub_array_delim","finish","VSCodeTableRegistry","get_iterator_by_table_id","_table_id","VSCodeFileSystemCSVRegistry","RBQLTableRegistry","input_file_dir","stream","record_iterator","bulk_input_path","createReadStream","CSVRecordIterator","output_warnings","make_multiline_record_ranges","delim_length","newline_marker","start_line","expected_end_line_for_control","lnum_current","pos_in_editor_line","next_pos_in_editor_line","pos_in_logical_field","logical_field_tokens","newline_marker_pos","is_opening_rfc_line","_record","split_quoted_str","parse_document_range_rfc","custom_parsing_margin","inside_multiline_record_before","get_num_lines_in_record","inside_multiline_record_after","combined_line","get_field_by_line_position","query_pos","cpos","input_reader","createInterface","closed","promise_resolve","promise_reject","output_promise","close","join_tables_registry","input_iterator","output_writer","user_init_code","input_stream","stdin","output_stream","close_output_on_finish","createWriteStream","is_ascii","default_init_source_path","read_user_init_code","CSVWriter","result_lines","merger","comment","aligned_fields","fnum","field_lines","aligned_field","_fields_info","has_edit","enable_double_width_alignment","field_line","adjusted_stats","column_stat","previous_stat","last_found_position_info","is_comment","total_columns","split_warning","get_cursor_position_info_rfc","cnum","entries","get_cursor_position_info_standard","show_column_names","show_comments","max_label_length","column_label","short_column_label","next_cpos","parse_document_range_single_line","dst_message","end_record","vscode_doc_version","need_full_doc_parse","sample_records","preview_sampling_error","preview_records","cur_record","c","actual_start_record","COLOR_ERROR","lint_report","lint_report_msg","color","isInteger","is_ok","active","isEqual","anchor","char_pos_before","char_pos_after","position_before","Position","position_after","Selection","field_regular_expression","field_rgx","field_rgx_external_whitespaces","extract_next_field","src","dlm","allow_external_whitespaces","cidx","src_cur","match_obj","match_end","uidx","extraction_report","unquote_field","split_whitespace_separated_str","preserve_whitespaces","rgxp","unquote_fields","split_lines","rfc_line_buffer","match_list","has_unbalanced_double_quote","line_separator","RbqlParsingError","RbqlRuntimeError","InternalBadFieldError","bad_idx","params","replace_all","replacement","RBQLContext","writer","unnest_list","top_count","like_regex_cache","sort_key_expression","aggregation_stage","aggregation_key_expression","functional_aggregators","join_map_impl","join_map","lhs_join_var_expression","where_expression","select_expression","update_expressions","variables_init_code","query_context","wrong_aggregation_usage_error","RBQL_VERSION","check_if_brackets_match","opening_bracket","closing_bracket","parse_root_bracket_level_text_spans","text_spans","last_pos","bracket_stack","cur_char","span","unquote_string","quoted_str","column_info_from_text_span","text_span","string_literals","rbql_star_marker","simple_var_match","attribute_match","subscript_int_match","subscript_str_match","as_alias_match","column_index","column_name","is_star","alias_name","replaced_string_literal_id","unquoted_column_name","adhoc_parse_select_expression_to_column_infos","ts","stable_compare","safe_get","safe_join_get","safe_set","regexp_escape","like_to_regex","pattern","converted","like","matcher","LIKE","RBQLAggregationToken","marker_id","UnnestMarker","UNNEST","vals","unnest","Unnest","UNFOLD","parse_number","AnyValueAggregator","stats","increment","get_final","MinAggregator","cur_aggr","MaxAggregator","SumAggregator","AvgAggregator","cur_sum","cur_cnt","VarianceAggregator","cur_sum_sq","avg_val","MedianAggregator","sort","m","CountAggregator","ArrayAggAggregator","post_proc","ConstGroupVerifier","output_index","const_values","old_value","init_aggregator","generator_name","ANY_VALUE","any_value","Any_value","MIN","Min","MAX","Max","COUNT","Count","SUM","sum","Sum","AVG","avg","Avg","VARIANCE","variance","Variance","MEDIAN","median","Median","ARRAY_AGG","array_agg","FOLD","add_to_set","dst_set","len_before","TopWriter","subwriter","NW","UniqWriter","UniqCountWriter","old_val","unshift","SortedWriter","reverse_sort","unsorted_entries","stable_entry","reverse","entry","AggregateWriter","aggregators","aggregation_keys","all_keys","ag","InnerJoiner","get_rhs","lhs_key","get_join_records","LeftJoiner","null_record","max_record_len","StrictLeftJoiner","select_except","except_fields","select_simple","sort_key","sort_entry","select_aggregated","transparent_values","num_aggregators_found","trans_value","select_unnested","folded_fields","unnest_pos","findIndex","PROCESS_SELECT_COMMON","PROCESS_SELECT_SIMPLE","PROCESS_SELECT_JOIN","PROCESS_UPDATE_JOIN","PROCESS_UPDATE_SIMPLE","MAIN_LOOP_BODY","embed_expression","parent_code","child_placeholder","child_expression","embed_code","child_code","parent_lines","child_lines","placeholder_indentation","generate_main_loop_code","is_select_query","is_join_query","js_code","compile_and_run","main_loop_body","main_loop_promise","lower_case_query","GROUP_BY","UPDATE","SELECT","JOIN","INNER_JOIN","LEFT_JOIN","LEFT_OUTER_JOIN","STRICT_LEFT_JOIN","ORDER_BY","WHERE","LIMIT","EXCEPT","WITH","get_ambiguous_error_msg","variable_name","get_all_matches","str_strip","strip_comments","cline","combine_string_literals","backend_expression","prefix","dst_variables_map","matches","field_num","initialize","index","js_string_escape_column_name","quote_char","query_probably_has_dictionary_variable","continuous_name_segments","continuous_segment","column_names","dict_test_rgx","escaped_column_name","column_names_source","column_names_from_query","zero_based_idx","map_variables_directly","ensure_no_ambiguous_variables","input_column_names","join_column_names","join_column_names_set","parse_join_expression","invalid_join_syntax_error","variable_pairs","pair_rgx","and_rgx","resolve_join_variables","input_variables_map","join_variables_map","lhs_variables","rhs_indices","valid_join_syntax_msg","variable_pair","join_var_1","join_var_2","lhs_key_index","rhs_key_index","generate_common_init_code","base_var","attr_var","generate_init_statements","variables_map","indent","code_lines","simple_var_name_rgx","var_info","variable_declaration_keyword","replace_star_count","aggregate_expression","replace_star_vars","rbql_expression","replacement_expression","replace_star_vars_for_header_parsing","translate_update_expression","update_expression","first_assignment_error","assignment_looking_rgx","dst_var_name","var_index","current_indent","translate_select_expression","expression_without_counting_stars","translated","translated_for_header","separate_string_literals","rgx","format_parts","idx_before","literal_id","string_literal","start_index","lastIndex","format_expression","locate_statements","statement_groups","ig","statement","match_str","separate_actions","with_match","ordered_statements","statement_start","span_start","span_end","statement_params","new_span","find_top","rb_actions","select_action","translate_except_expression","except_expression","input_header","skip_vars","skip_indices","var_name","HashJoinMap","key_indices","hash_map","key_index","polymorphic_get_key","get_single_key","get_multi_key","ki","nf","key_records","cleanup_query","remove_redundant_table_name","select_output_header","join_header","query_column_infos","query_has_star","query_has_column_alias","qci","output_header","handle_query_modifier","TableIterator","table","normalize_column_names","stopped","num_fields","TableWriter","external_table","SingleTableRegistry","shallow_parse_input_query","rhs_table_id","join_record_iterator","sql_join_type","select_expression_for_header","query_table","input_table","output_table","join_table","output_column_names","exceptions_type_map","utf_decoding_error","rbql_init_source_path","name_record","index_path","lines","try_read_index","get_index_record","RecordQueue","push_stack","pull_stack","enqueue","dequeue","csv_path","first_record_should_be_emitted","header_preread_complete","decoder","fatal","input_exhausted","started","utf8_bom_removed","partially_decoded_line","partially_decoded_line_ends_with_cr","resolve_current_record","reject_current_record","current_exception","produced_records_queue","process_line_polymorphic","process_partial_rfc_record_line","process_record_line_simple","modifier","reset_external_callbacks","try_propagate_exception","exception","store_or_propagate_exception","preread_first_record","pause","try_resolve_next_record","isPaused","resume","parent_iterator","current_record_promise","get_all_records","num_records","process_record_line","process_line","clean_line","assumed_source_encoding","remove_utf8_bom","process_data_stream_chunk","data_chunk","decoded_string","first_line_index","process_data_bulk","data_blob","control_buffer","process_data_stream_end","last_line","destroy","close_stream_on_finish","setDefaultEncoding","error_obj","store_first_error","first_error","writer_error","_write_all","output_encoding","FileSystemCSVRegistry","interpret_named_csv_format","format_name","query_csv","VscodePositionTestDouble","VscodeSelectionTestDouble","VscodeRangeTestDouble","l1","c1","l2","c2","after_start","before_end","UriTestDouble","VscodeDocumentTestDouble","lines_buffer","VscodeStatusBarItemTestDouble","is_visible","vscode_test_double","_alignment","target_document","line_range_to_triple","vscode_range","convert_ranges_to_triples","table_comment_ranges","table_record_ranges","row_triple_groups","field_ranges","field_triples","field_range","fvr","get_all_entries","record_comment_merger","test_all","is_first_line","field_components","test_align_stats","max_components_lens","test_field_align","test_rfc_field_align","unaligned_doc_lines","aligned_doc_lines","expected_doc_lines","test_align_columns","original_doc_lines","shrinked_doc_lines","test_shrink_columns","doc_lines","test_calc_column_stats","adjusted_components","test_adjust_column_stats","test_parse_document_records","record_ranges_0","record_ranges_1","record_ranges_2","record_ranges_3","test_parse_document_range_rfc","doc_file_name","test_sample_preview_records_from_context","test_show_lint_status_bar_button","position_info","test_get_cursor_position_info","expected_entries","test_record_comment_merger","expected_selections","expected_error_msg","expected_warning_msg","test_generate_column_edit_selections","require","possibleNames","out","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","unit_tests","extension","poor_rbql_async_design_workaround_timeout","SetCursorToTheTopAtStartWorkaround","executeCommand","log_message","test_comment_prefix_js","test_folder_uri","num_lines_after_query","expected_num_lines","workspace_folder_uri","workspaceFolders","vscode_position","test_double_range","test_double_position","test_range_position_contains_equivalence","test_autodetect_dialect_frequency_based","test_try_autoenable_rainbow_csv","test_no_autodetection","state_report","test_autodetection","test_manual_enable_disable","start_time","performance","total_adjusted_latency","test_huge_file","length_original","length_aligned","length_shrinked","length_after_query","test_dynamic_csv","test_task","enable_rfc_newlines","test_rbql_web","test_comment_prefix_python_rbql","filename_before","length_before_query","filename_after_copy_back","test_rbql_node","text_with_comma","test_align_shrink_lint","test_double_width_chars_alignment","length_after_column_edit","length_after_delete","test_column_edit"],"sourceRoot":""}