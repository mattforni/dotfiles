export type MathRenderingOption = "None" | "KaTeX" | "MathJax";
export type PreviewTheme = "atom-dark.css" | "atom-light.css" | "atom-material.css" | "github-dark.css" | "github-light.css" | "gothic.css" | "medium.css" | "monokai.css" | "newsprint.css" | "night.css" | "none.css" | "one-dark.css" | "one-light.css" | "solarized-dark.css" | "solarized-light.css" | "vue.css";
export type CodeBlockTheme = "auto.css" | "default.css" | "atom-dark.css" | "atom-light.css" | "atom-material.css" | "coy.css" | "darcula.css" | "dark.css" | "funky.css" | "github.css" | "hopscotch.css" | "monokai.css" | "okaidia.css" | "one-dark.css" | "one-light.css" | "pen-paper-coffee.css" | "pojoaque.css" | "solarized-dark.css" | "solarized-light.css" | "twilight.css" | "vue.css" | "vs.css" | "xonokai.css";
export type RevealJsTheme = "beige.css" | "black.css" | "blood.css" | "league.css" | "moon.css" | "night.css" | "serif.css" | "simple.css" | "sky.css" | "solarized.css" | "white.css" | "none.css";
export type MermaidTheme = "default" | "dark" | "forest";
export interface MarkdownEngineConfig {
    configPath?: string;
    usePandocParser?: boolean;
    breakOnSingleNewLine?: boolean;
    enableTypographer?: boolean;
    enableWikiLinkSyntax?: boolean;
    enableLinkify?: boolean;
    useGitHubStylePipedLink?: boolean;
    wikiLinkFileExtension?: string;
    enableEmojiSyntax?: boolean;
    enableExtendedTableSyntax?: boolean;
    enableCriticMarkupSyntax?: boolean;
    protocolsWhiteList?: string;
    mathRenderingOption?: MathRenderingOption;
    mathInlineDelimiters?: string[][];
    mathBlockDelimiters?: string[][];
    mathRenderingOnlineService?: string;
    codeBlockTheme?: CodeBlockTheme;
    previewTheme?: PreviewTheme;
    revealjsTheme?: RevealJsTheme;
    mermaidTheme?: MermaidTheme;
    frontMatterRenderingOption?: string;
    imageFolderPath?: string;
    printBackground?: boolean;
    chromePath?: string;
    imageMagickPath?: string;
    pandocPath?: string;
    pandocMarkdownFlavor?: string;
    pandocArguments?: string[];
    latexEngine?: string;
    enableScriptExecution?: boolean;
    enableHTML5Embed?: boolean;
    HTML5EmbedUseImageSyntax?: boolean;
    HTML5EmbedUseLinkSyntax?: boolean;
    HTML5EmbedIsAllowedHttp?: boolean;
    HTML5EmbedAudioAttributes?: string;
    HTML5EmbedVideoAttributes?: string;
    puppeteerWaitForTimeout?: number;
    usePuppeteerCore?: boolean;
    puppeteerArgs?: string[];
    plantumlServer: string;
}
export declare const defaultMarkdownEngineConfig: MarkdownEngineConfig;
